// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceOrderReferenceObjectDatum is an object representing the database table.
type SapServiceOrderReferenceObjectDatum struct {
	ServiceOrder                 string      `boil:"ServiceOrder" json:"ServiceOrder" toml:"ServiceOrder" yaml:"ServiceOrder"`
	ServiceReferenceEquipment    null.String `boil:"ServiceReferenceEquipment" json:"ServiceReferenceEquipment,omitempty" toml:"ServiceReferenceEquipment" yaml:"ServiceReferenceEquipment,omitempty"`
	ServiceRefFunctionalLocation null.String `boil:"ServiceRefFunctionalLocation" json:"ServiceRefFunctionalLocation,omitempty" toml:"ServiceRefFunctionalLocation" yaml:"ServiceRefFunctionalLocation,omitempty"`
	SrvcRefObjIsMainObject       null.Bool   `boil:"SrvcRefObjIsMainObject" json:"SrvcRefObjIsMainObject,omitempty" toml:"SrvcRefObjIsMainObject" yaml:"SrvcRefObjIsMainObject,omitempty"`

	R *sapServiceOrderReferenceObjectDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceOrderReferenceObjectDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceOrderReferenceObjectDatumColumns = struct {
	ServiceOrder                 string
	ServiceReferenceEquipment    string
	ServiceRefFunctionalLocation string
	SrvcRefObjIsMainObject       string
}{
	ServiceOrder:                 "ServiceOrder",
	ServiceReferenceEquipment:    "ServiceReferenceEquipment",
	ServiceRefFunctionalLocation: "ServiceRefFunctionalLocation",
	SrvcRefObjIsMainObject:       "SrvcRefObjIsMainObject",
}

var SapServiceOrderReferenceObjectDatumTableColumns = struct {
	ServiceOrder                 string
	ServiceReferenceEquipment    string
	ServiceRefFunctionalLocation string
	SrvcRefObjIsMainObject       string
}{
	ServiceOrder:                 "sap_service_order_reference_object_data.ServiceOrder",
	ServiceReferenceEquipment:    "sap_service_order_reference_object_data.ServiceReferenceEquipment",
	ServiceRefFunctionalLocation: "sap_service_order_reference_object_data.ServiceRefFunctionalLocation",
	SrvcRefObjIsMainObject:       "sap_service_order_reference_object_data.SrvcRefObjIsMainObject",
}

// Generated where

var SapServiceOrderReferenceObjectDatumWhere = struct {
	ServiceOrder                 whereHelperstring
	ServiceReferenceEquipment    whereHelpernull_String
	ServiceRefFunctionalLocation whereHelpernull_String
	SrvcRefObjIsMainObject       whereHelpernull_Bool
}{
	ServiceOrder:                 whereHelperstring{field: "`sap_service_order_reference_object_data`.`ServiceOrder`"},
	ServiceReferenceEquipment:    whereHelpernull_String{field: "`sap_service_order_reference_object_data`.`ServiceReferenceEquipment`"},
	ServiceRefFunctionalLocation: whereHelpernull_String{field: "`sap_service_order_reference_object_data`.`ServiceRefFunctionalLocation`"},
	SrvcRefObjIsMainObject:       whereHelpernull_Bool{field: "`sap_service_order_reference_object_data`.`SrvcRefObjIsMainObject`"},
}

// SapServiceOrderReferenceObjectDatumRels is where relationship names are stored.
var SapServiceOrderReferenceObjectDatumRels = struct {
	ServiceOrderSapServiceOrderHeaderDatum string
}{
	ServiceOrderSapServiceOrderHeaderDatum: "ServiceOrderSapServiceOrderHeaderDatum",
}

// sapServiceOrderReferenceObjectDatumR is where relationships are stored.
type sapServiceOrderReferenceObjectDatumR struct {
	ServiceOrderSapServiceOrderHeaderDatum *SapServiceOrderHeaderDatum `boil:"ServiceOrderSapServiceOrderHeaderDatum" json:"ServiceOrderSapServiceOrderHeaderDatum" toml:"ServiceOrderSapServiceOrderHeaderDatum" yaml:"ServiceOrderSapServiceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapServiceOrderReferenceObjectDatumR) NewStruct() *sapServiceOrderReferenceObjectDatumR {
	return &sapServiceOrderReferenceObjectDatumR{}
}

func (r *sapServiceOrderReferenceObjectDatumR) GetServiceOrderSapServiceOrderHeaderDatum() *SapServiceOrderHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ServiceOrderSapServiceOrderHeaderDatum
}

// sapServiceOrderReferenceObjectDatumL is where Load methods for each relationship are stored.
type sapServiceOrderReferenceObjectDatumL struct{}

var (
	sapServiceOrderReferenceObjectDatumAllColumns            = []string{"ServiceOrder", "ServiceReferenceEquipment", "ServiceRefFunctionalLocation", "SrvcRefObjIsMainObject"}
	sapServiceOrderReferenceObjectDatumColumnsWithoutDefault = []string{"ServiceOrder", "ServiceReferenceEquipment", "ServiceRefFunctionalLocation", "SrvcRefObjIsMainObject"}
	sapServiceOrderReferenceObjectDatumColumnsWithDefault    = []string{}
	sapServiceOrderReferenceObjectDatumPrimaryKeyColumns     = []string{"ServiceOrder"}
	sapServiceOrderReferenceObjectDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceOrderReferenceObjectDatumSlice is an alias for a slice of pointers to SapServiceOrderReferenceObjectDatum.
	// This should almost always be used instead of []SapServiceOrderReferenceObjectDatum.
	SapServiceOrderReferenceObjectDatumSlice []*SapServiceOrderReferenceObjectDatum
	// SapServiceOrderReferenceObjectDatumHook is the signature for custom SapServiceOrderReferenceObjectDatum hook methods
	SapServiceOrderReferenceObjectDatumHook func(context.Context, boil.ContextExecutor, *SapServiceOrderReferenceObjectDatum) error

	sapServiceOrderReferenceObjectDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceOrderReferenceObjectDatumType                 = reflect.TypeOf(&SapServiceOrderReferenceObjectDatum{})
	sapServiceOrderReferenceObjectDatumMapping              = queries.MakeStructMapping(sapServiceOrderReferenceObjectDatumType)
	sapServiceOrderReferenceObjectDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns)
	sapServiceOrderReferenceObjectDatumInsertCacheMut       sync.RWMutex
	sapServiceOrderReferenceObjectDatumInsertCache          = make(map[string]insertCache)
	sapServiceOrderReferenceObjectDatumUpdateCacheMut       sync.RWMutex
	sapServiceOrderReferenceObjectDatumUpdateCache          = make(map[string]updateCache)
	sapServiceOrderReferenceObjectDatumUpsertCacheMut       sync.RWMutex
	sapServiceOrderReferenceObjectDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceOrderReferenceObjectDatumAfterSelectHooks []SapServiceOrderReferenceObjectDatumHook

var sapServiceOrderReferenceObjectDatumBeforeInsertHooks []SapServiceOrderReferenceObjectDatumHook
var sapServiceOrderReferenceObjectDatumAfterInsertHooks []SapServiceOrderReferenceObjectDatumHook

var sapServiceOrderReferenceObjectDatumBeforeUpdateHooks []SapServiceOrderReferenceObjectDatumHook
var sapServiceOrderReferenceObjectDatumAfterUpdateHooks []SapServiceOrderReferenceObjectDatumHook

var sapServiceOrderReferenceObjectDatumBeforeDeleteHooks []SapServiceOrderReferenceObjectDatumHook
var sapServiceOrderReferenceObjectDatumAfterDeleteHooks []SapServiceOrderReferenceObjectDatumHook

var sapServiceOrderReferenceObjectDatumBeforeUpsertHooks []SapServiceOrderReferenceObjectDatumHook
var sapServiceOrderReferenceObjectDatumAfterUpsertHooks []SapServiceOrderReferenceObjectDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceOrderReferenceObjectDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderReferenceObjectDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceOrderReferenceObjectDatumHook registers your hook function for all future operations.
func AddSapServiceOrderReferenceObjectDatumHook(hookPoint boil.HookPoint, sapServiceOrderReferenceObjectDatumHook SapServiceOrderReferenceObjectDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceOrderReferenceObjectDatumAfterSelectHooks = append(sapServiceOrderReferenceObjectDatumAfterSelectHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.BeforeInsertHook:
		sapServiceOrderReferenceObjectDatumBeforeInsertHooks = append(sapServiceOrderReferenceObjectDatumBeforeInsertHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.AfterInsertHook:
		sapServiceOrderReferenceObjectDatumAfterInsertHooks = append(sapServiceOrderReferenceObjectDatumAfterInsertHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceOrderReferenceObjectDatumBeforeUpdateHooks = append(sapServiceOrderReferenceObjectDatumBeforeUpdateHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.AfterUpdateHook:
		sapServiceOrderReferenceObjectDatumAfterUpdateHooks = append(sapServiceOrderReferenceObjectDatumAfterUpdateHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceOrderReferenceObjectDatumBeforeDeleteHooks = append(sapServiceOrderReferenceObjectDatumBeforeDeleteHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.AfterDeleteHook:
		sapServiceOrderReferenceObjectDatumAfterDeleteHooks = append(sapServiceOrderReferenceObjectDatumAfterDeleteHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceOrderReferenceObjectDatumBeforeUpsertHooks = append(sapServiceOrderReferenceObjectDatumBeforeUpsertHooks, sapServiceOrderReferenceObjectDatumHook)
	case boil.AfterUpsertHook:
		sapServiceOrderReferenceObjectDatumAfterUpsertHooks = append(sapServiceOrderReferenceObjectDatumAfterUpsertHooks, sapServiceOrderReferenceObjectDatumHook)
	}
}

// One returns a single sapServiceOrderReferenceObjectDatum record from the query.
func (q sapServiceOrderReferenceObjectDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceOrderReferenceObjectDatum, error) {
	o := &SapServiceOrderReferenceObjectDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_order_reference_object_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceOrderReferenceObjectDatum records from the query.
func (q sapServiceOrderReferenceObjectDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceOrderReferenceObjectDatumSlice, error) {
	var o []*SapServiceOrderReferenceObjectDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceOrderReferenceObjectDatum slice")
	}

	if len(sapServiceOrderReferenceObjectDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceOrderReferenceObjectDatum records in the query.
func (q sapServiceOrderReferenceObjectDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_order_reference_object_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceOrderReferenceObjectDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_order_reference_object_data exists")
	}

	return count > 0, nil
}

// ServiceOrderSapServiceOrderHeaderDatum pointed to by the foreign key.
func (o *SapServiceOrderReferenceObjectDatum) ServiceOrderSapServiceOrderHeaderDatum(mods ...qm.QueryMod) sapServiceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	return SapServiceOrderHeaderData(queryMods...)
}

// LoadServiceOrderSapServiceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceOrderReferenceObjectDatumL) LoadServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderReferenceObjectDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderReferenceObjectDatum
	var object *SapServiceOrderReferenceObjectDatum

	if singular {
		object = maybeSapServiceOrderReferenceObjectDatum.(*SapServiceOrderReferenceObjectDatum)
	} else {
		slice = *maybeSapServiceOrderReferenceObjectDatum.(*[]*SapServiceOrderReferenceObjectDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderReferenceObjectDatumR{}
		}
		args = append(args, object.ServiceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderReferenceObjectDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_header_data`),
		qm.WhereIn(`sap_service_order_header_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderHeaderDatum")
	}

	var resultSlice []*SapServiceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_header_data")
	}

	if len(sapServiceOrderReferenceObjectDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderHeaderDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderReferenceObjectDatum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderHeaderDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderReferenceObjectDatum = local
				break
			}
		}
	}

	return nil
}

// SetServiceOrderSapServiceOrderHeaderDatum of the sapServiceOrderReferenceObjectDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderHeaderDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderReferenceObjectDatum.
func (o *SapServiceOrderReferenceObjectDatum) SetServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_order_reference_object_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceOrder, o.ServiceOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceOrder = related.ServiceOrder
	if o.R == nil {
		o.R = &sapServiceOrderReferenceObjectDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderReferenceObjectDatum: o,
		}
	} else {
		related.R.ServiceOrderSapServiceOrderReferenceObjectDatum = o
	}

	return nil
}

// SapServiceOrderReferenceObjectData retrieves all the records using an executor.
func SapServiceOrderReferenceObjectData(mods ...qm.QueryMod) sapServiceOrderReferenceObjectDatumQuery {
	mods = append(mods, qm.From("`sap_service_order_reference_object_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_service_order_reference_object_data`.*"})
	}

	return sapServiceOrderReferenceObjectDatumQuery{q}
}

// FindSapServiceOrderReferenceObjectDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceOrderReferenceObjectDatum(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, selectCols ...string) (*SapServiceOrderReferenceObjectDatum, error) {
	sapServiceOrderReferenceObjectDatumObj := &SapServiceOrderReferenceObjectDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_order_reference_object_data` where `ServiceOrder`=?", sel,
	)

	q := queries.Raw(query, serviceOrder)

	err := q.Bind(ctx, exec, sapServiceOrderReferenceObjectDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_order_reference_object_data")
	}

	if err = sapServiceOrderReferenceObjectDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceOrderReferenceObjectDatumObj, err
	}

	return sapServiceOrderReferenceObjectDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceOrderReferenceObjectDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_reference_object_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderReferenceObjectDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceOrderReferenceObjectDatumInsertCacheMut.RLock()
	cache, cached := sapServiceOrderReferenceObjectDatumInsertCache[key]
	sapServiceOrderReferenceObjectDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceOrderReferenceObjectDatumAllColumns,
			sapServiceOrderReferenceObjectDatumColumnsWithDefault,
			sapServiceOrderReferenceObjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_order_reference_object_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_order_reference_object_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_order_reference_object_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_order_reference_object_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_reference_object_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderReferenceObjectDatumInsertCacheMut.Lock()
		sapServiceOrderReferenceObjectDatumInsertCache[key] = cache
		sapServiceOrderReferenceObjectDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceOrderReferenceObjectDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceOrderReferenceObjectDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceOrderReferenceObjectDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceOrderReferenceObjectDatumUpdateCache[key]
	sapServiceOrderReferenceObjectDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceOrderReferenceObjectDatumAllColumns,
			sapServiceOrderReferenceObjectDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_order_reference_object_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_order_reference_object_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, append(wl, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_order_reference_object_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_order_reference_object_data")
	}

	if !cached {
		sapServiceOrderReferenceObjectDatumUpdateCacheMut.Lock()
		sapServiceOrderReferenceObjectDatumUpdateCache[key] = cache
		sapServiceOrderReferenceObjectDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceOrderReferenceObjectDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_order_reference_object_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_order_reference_object_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceOrderReferenceObjectDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderReferenceObjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_order_reference_object_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceOrderReferenceObjectDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceOrderReferenceObjectDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceOrderReferenceObjectDatumUniqueColumns = []string{
	"ServiceOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceOrderReferenceObjectDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_reference_object_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderReferenceObjectDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceOrderReferenceObjectDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceOrderReferenceObjectDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceOrderReferenceObjectDatumUpsertCache[key]
	sapServiceOrderReferenceObjectDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceOrderReferenceObjectDatumAllColumns,
			sapServiceOrderReferenceObjectDatumColumnsWithDefault,
			sapServiceOrderReferenceObjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceOrderReferenceObjectDatumAllColumns,
			sapServiceOrderReferenceObjectDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_order_reference_object_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_order_reference_object_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_order_reference_object_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_order_reference_object_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceOrderReferenceObjectDatumType, sapServiceOrderReferenceObjectDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_order_reference_object_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_reference_object_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderReferenceObjectDatumUpsertCacheMut.Lock()
		sapServiceOrderReferenceObjectDatumUpsertCache[key] = cache
		sapServiceOrderReferenceObjectDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceOrderReferenceObjectDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceOrderReferenceObjectDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceOrderReferenceObjectDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceOrderReferenceObjectDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_order_reference_object_data` WHERE `ServiceOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_order_reference_object_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_order_reference_object_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceOrderReferenceObjectDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceOrderReferenceObjectDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_order_reference_object_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_reference_object_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceOrderReferenceObjectDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceOrderReferenceObjectDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderReferenceObjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_order_reference_object_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceOrderReferenceObjectDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_reference_object_data")
	}

	if len(sapServiceOrderReferenceObjectDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceOrderReferenceObjectDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceOrderReferenceObjectDatum(ctx, exec, o.ServiceOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceOrderReferenceObjectDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceOrderReferenceObjectDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderReferenceObjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_order_reference_object_data`.* FROM `sap_service_order_reference_object_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceOrderReferenceObjectDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceOrderReferenceObjectDatumExists checks if the SapServiceOrderReferenceObjectDatum row exists.
func SapServiceOrderReferenceObjectDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_order_reference_object_data` where `ServiceOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceOrder)
	}
	row := exec.QueryRowContext(ctx, sql, serviceOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_order_reference_object_data exists")
	}

	return exists, nil
}
