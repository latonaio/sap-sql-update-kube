// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionOrderComponentDatum is an object representing the database table.
type SapProductionOrderComponentDatum struct {
	ManufacturingOrder             string      `boil:"ManufacturingOrder" json:"ManufacturingOrder" toml:"ManufacturingOrder" yaml:"ManufacturingOrder"`
	ManufacturingOrderSequence     string      `boil:"ManufacturingOrderSequence" json:"ManufacturingOrderSequence" toml:"ManufacturingOrderSequence" yaml:"ManufacturingOrderSequence"`
	ManufacturingOrderOperation    string      `boil:"ManufacturingOrderOperation" json:"ManufacturingOrderOperation" toml:"ManufacturingOrderOperation" yaml:"ManufacturingOrderOperation"`
	OrderInternalBillOfOperations  string      `boil:"OrderInternalBillOfOperations" json:"OrderInternalBillOfOperations" toml:"OrderInternalBillOfOperations" yaml:"OrderInternalBillOfOperations"`
	BOMItem                        string      `boil:"BOMItem" json:"BOMItem" toml:"BOMItem" yaml:"BOMItem"`
	Reservation                    null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                null.String `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	ManufacturingOrderCategory     null.String `boil:"ManufacturingOrderCategory" json:"ManufacturingOrderCategory,omitempty" toml:"ManufacturingOrderCategory" yaml:"ManufacturingOrderCategory,omitempty"`
	ManufacturingOrderType         null.String `boil:"ManufacturingOrderType" json:"ManufacturingOrderType,omitempty" toml:"ManufacturingOrderType" yaml:"ManufacturingOrderType,omitempty"`
	ProductionPlant                null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	MatlCompRequirementDate        null.String `boil:"MatlCompRequirementDate" json:"MatlCompRequirementDate,omitempty" toml:"MatlCompRequirementDate" yaml:"MatlCompRequirementDate,omitempty"`
	MatlCompRequirementTime        null.String `boil:"MatlCompRequirementTime" json:"MatlCompRequirementTime,omitempty" toml:"MatlCompRequirementTime" yaml:"MatlCompRequirementTime,omitempty"`
	ReservationIsFinallyIssued     null.Bool   `boil:"ReservationIsFinallyIssued" json:"ReservationIsFinallyIssued,omitempty" toml:"ReservationIsFinallyIssued" yaml:"ReservationIsFinallyIssued,omitempty"`
	IsBulkMaterialComponent        null.Bool   `boil:"IsBulkMaterialComponent" json:"IsBulkMaterialComponent,omitempty" toml:"IsBulkMaterialComponent" yaml:"IsBulkMaterialComponent,omitempty"`
	MatlCompIsMarkedForBackflush   null.Bool   `boil:"MatlCompIsMarkedForBackflush" json:"MatlCompIsMarkedForBackflush,omitempty" toml:"MatlCompIsMarkedForBackflush" yaml:"MatlCompIsMarkedForBackflush,omitempty"`
	MaterialCompIsCostRelevant     null.String `boil:"MaterialCompIsCostRelevant" json:"MaterialCompIsCostRelevant,omitempty" toml:"MaterialCompIsCostRelevant" yaml:"MaterialCompIsCostRelevant,omitempty"`
	SalesOrder                     null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem                 null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	SortField                      null.String `boil:"SortField" json:"SortField,omitempty" toml:"SortField" yaml:"SortField,omitempty"`
	BillOfMaterialCategory         null.String `boil:"BillOfMaterialCategory" json:"BillOfMaterialCategory,omitempty" toml:"BillOfMaterialCategory" yaml:"BillOfMaterialCategory,omitempty"`
	BOMItemCategory                null.String `boil:"BOMItemCategory" json:"BOMItemCategory,omitempty" toml:"BOMItemCategory" yaml:"BOMItemCategory,omitempty"`
	BillOfMaterialItemNumber       null.String `boil:"BillOfMaterialItemNumber" json:"BillOfMaterialItemNumber,omitempty" toml:"BillOfMaterialItemNumber" yaml:"BillOfMaterialItemNumber,omitempty"`
	BOMItemDescription             null.String `boil:"BOMItemDescription" json:"BOMItemDescription,omitempty" toml:"BOMItemDescription" yaml:"BOMItemDescription,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	BatchSplitType                 null.String `boil:"BatchSplitType" json:"BatchSplitType,omitempty" toml:"BatchSplitType" yaml:"BatchSplitType,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	SupplyArea                     null.String `boil:"SupplyArea" json:"SupplyArea,omitempty" toml:"SupplyArea" yaml:"SupplyArea,omitempty"`
	GoodsRecipientName             null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	UnloadingPointName             null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	MaterialCompIsAlternativeItem  null.Bool   `boil:"MaterialCompIsAlternativeItem" json:"MaterialCompIsAlternativeItem,omitempty" toml:"MaterialCompIsAlternativeItem" yaml:"MaterialCompIsAlternativeItem,omitempty"`
	AlternativeItemGroup           null.String `boil:"AlternativeItemGroup" json:"AlternativeItemGroup,omitempty" toml:"AlternativeItemGroup" yaml:"AlternativeItemGroup,omitempty"`
	AlternativeItemStrategy        null.String `boil:"AlternativeItemStrategy" json:"AlternativeItemStrategy,omitempty" toml:"AlternativeItemStrategy" yaml:"AlternativeItemStrategy,omitempty"`
	AlternativeItemPriority        null.String `boil:"AlternativeItemPriority" json:"AlternativeItemPriority,omitempty" toml:"AlternativeItemPriority" yaml:"AlternativeItemPriority,omitempty"`
	UsageProbabilityPercent        null.String `boil:"UsageProbabilityPercent" json:"UsageProbabilityPercent,omitempty" toml:"UsageProbabilityPercent" yaml:"UsageProbabilityPercent,omitempty"`
	MaterialComponentIsPhantomItem null.Bool   `boil:"MaterialComponentIsPhantomItem" json:"MaterialComponentIsPhantomItem,omitempty" toml:"MaterialComponentIsPhantomItem" yaml:"MaterialComponentIsPhantomItem,omitempty"`
	LeadTimeOffset                 null.String `boil:"LeadTimeOffset" json:"LeadTimeOffset,omitempty" toml:"LeadTimeOffset" yaml:"LeadTimeOffset,omitempty"`
	QuantityIsFixed                null.Bool   `boil:"QuantityIsFixed" json:"QuantityIsFixed,omitempty" toml:"QuantityIsFixed" yaml:"QuantityIsFixed,omitempty"`
	IsNetScrap                     null.Bool   `boil:"IsNetScrap" json:"IsNetScrap,omitempty" toml:"IsNetScrap" yaml:"IsNetScrap,omitempty"`
	ComponentScrapInPercent        null.String `boil:"ComponentScrapInPercent" json:"ComponentScrapInPercent,omitempty" toml:"ComponentScrapInPercent" yaml:"ComponentScrapInPercent,omitempty"`
	OperationScrapInPercent        null.String `boil:"OperationScrapInPercent" json:"OperationScrapInPercent,omitempty" toml:"OperationScrapInPercent" yaml:"OperationScrapInPercent,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	RequiredQuantity               null.String `boil:"RequiredQuantity" json:"RequiredQuantity,omitempty" toml:"RequiredQuantity" yaml:"RequiredQuantity,omitempty"`
	WithdrawnQuantity              null.String `boil:"WithdrawnQuantity" json:"WithdrawnQuantity,omitempty" toml:"WithdrawnQuantity" yaml:"WithdrawnQuantity,omitempty"`
	ConfirmedAvailableQuantity     null.String `boil:"ConfirmedAvailableQuantity" json:"ConfirmedAvailableQuantity,omitempty" toml:"ConfirmedAvailableQuantity" yaml:"ConfirmedAvailableQuantity,omitempty"`
	MaterialCompOriginalQuantity   null.String `boil:"MaterialCompOriginalQuantity" json:"MaterialCompOriginalQuantity,omitempty" toml:"MaterialCompOriginalQuantity" yaml:"MaterialCompOriginalQuantity,omitempty"`
	Currency                       null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	WithdrawnQuantityAmount        null.String `boil:"WithdrawnQuantityAmount" json:"WithdrawnQuantityAmount,omitempty" toml:"WithdrawnQuantityAmount" yaml:"WithdrawnQuantityAmount,omitempty"`

	R *sapProductionOrderComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionOrderComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionOrderComponentDatumColumns = struct {
	ManufacturingOrder             string
	ManufacturingOrderSequence     string
	ManufacturingOrderOperation    string
	OrderInternalBillOfOperations  string
	BOMItem                        string
	Reservation                    string
	ReservationItem                string
	MaterialGroup                  string
	Material                       string
	Plant                          string
	ManufacturingOrderCategory     string
	ManufacturingOrderType         string
	ProductionPlant                string
	MatlCompRequirementDate        string
	MatlCompRequirementTime        string
	ReservationIsFinallyIssued     string
	IsBulkMaterialComponent        string
	MatlCompIsMarkedForBackflush   string
	MaterialCompIsCostRelevant     string
	SalesOrder                     string
	SalesOrderItem                 string
	SortField                      string
	BillOfMaterialCategory         string
	BOMItemCategory                string
	BillOfMaterialItemNumber       string
	BOMItemDescription             string
	StorageLocation                string
	Batch                          string
	BatchSplitType                 string
	GoodsMovementType              string
	SupplyArea                     string
	GoodsRecipientName             string
	UnloadingPointName             string
	MaterialCompIsAlternativeItem  string
	AlternativeItemGroup           string
	AlternativeItemStrategy        string
	AlternativeItemPriority        string
	UsageProbabilityPercent        string
	MaterialComponentIsPhantomItem string
	LeadTimeOffset                 string
	QuantityIsFixed                string
	IsNetScrap                     string
	ComponentScrapInPercent        string
	OperationScrapInPercent        string
	BaseUnit                       string
	RequiredQuantity               string
	WithdrawnQuantity              string
	ConfirmedAvailableQuantity     string
	MaterialCompOriginalQuantity   string
	Currency                       string
	WithdrawnQuantityAmount        string
}{
	ManufacturingOrder:             "ManufacturingOrder",
	ManufacturingOrderSequence:     "ManufacturingOrderSequence",
	ManufacturingOrderOperation:    "ManufacturingOrderOperation",
	OrderInternalBillOfOperations:  "OrderInternalBillOfOperations",
	BOMItem:                        "BOMItem",
	Reservation:                    "Reservation",
	ReservationItem:                "ReservationItem",
	MaterialGroup:                  "MaterialGroup",
	Material:                       "Material",
	Plant:                          "Plant",
	ManufacturingOrderCategory:     "ManufacturingOrderCategory",
	ManufacturingOrderType:         "ManufacturingOrderType",
	ProductionPlant:                "ProductionPlant",
	MatlCompRequirementDate:        "MatlCompRequirementDate",
	MatlCompRequirementTime:        "MatlCompRequirementTime",
	ReservationIsFinallyIssued:     "ReservationIsFinallyIssued",
	IsBulkMaterialComponent:        "IsBulkMaterialComponent",
	MatlCompIsMarkedForBackflush:   "MatlCompIsMarkedForBackflush",
	MaterialCompIsCostRelevant:     "MaterialCompIsCostRelevant",
	SalesOrder:                     "SalesOrder",
	SalesOrderItem:                 "SalesOrderItem",
	SortField:                      "SortField",
	BillOfMaterialCategory:         "BillOfMaterialCategory",
	BOMItemCategory:                "BOMItemCategory",
	BillOfMaterialItemNumber:       "BillOfMaterialItemNumber",
	BOMItemDescription:             "BOMItemDescription",
	StorageLocation:                "StorageLocation",
	Batch:                          "Batch",
	BatchSplitType:                 "BatchSplitType",
	GoodsMovementType:              "GoodsMovementType",
	SupplyArea:                     "SupplyArea",
	GoodsRecipientName:             "GoodsRecipientName",
	UnloadingPointName:             "UnloadingPointName",
	MaterialCompIsAlternativeItem:  "MaterialCompIsAlternativeItem",
	AlternativeItemGroup:           "AlternativeItemGroup",
	AlternativeItemStrategy:        "AlternativeItemStrategy",
	AlternativeItemPriority:        "AlternativeItemPriority",
	UsageProbabilityPercent:        "UsageProbabilityPercent",
	MaterialComponentIsPhantomItem: "MaterialComponentIsPhantomItem",
	LeadTimeOffset:                 "LeadTimeOffset",
	QuantityIsFixed:                "QuantityIsFixed",
	IsNetScrap:                     "IsNetScrap",
	ComponentScrapInPercent:        "ComponentScrapInPercent",
	OperationScrapInPercent:        "OperationScrapInPercent",
	BaseUnit:                       "BaseUnit",
	RequiredQuantity:               "RequiredQuantity",
	WithdrawnQuantity:              "WithdrawnQuantity",
	ConfirmedAvailableQuantity:     "ConfirmedAvailableQuantity",
	MaterialCompOriginalQuantity:   "MaterialCompOriginalQuantity",
	Currency:                       "Currency",
	WithdrawnQuantityAmount:        "WithdrawnQuantityAmount",
}

var SapProductionOrderComponentDatumTableColumns = struct {
	ManufacturingOrder             string
	ManufacturingOrderSequence     string
	ManufacturingOrderOperation    string
	OrderInternalBillOfOperations  string
	BOMItem                        string
	Reservation                    string
	ReservationItem                string
	MaterialGroup                  string
	Material                       string
	Plant                          string
	ManufacturingOrderCategory     string
	ManufacturingOrderType         string
	ProductionPlant                string
	MatlCompRequirementDate        string
	MatlCompRequirementTime        string
	ReservationIsFinallyIssued     string
	IsBulkMaterialComponent        string
	MatlCompIsMarkedForBackflush   string
	MaterialCompIsCostRelevant     string
	SalesOrder                     string
	SalesOrderItem                 string
	SortField                      string
	BillOfMaterialCategory         string
	BOMItemCategory                string
	BillOfMaterialItemNumber       string
	BOMItemDescription             string
	StorageLocation                string
	Batch                          string
	BatchSplitType                 string
	GoodsMovementType              string
	SupplyArea                     string
	GoodsRecipientName             string
	UnloadingPointName             string
	MaterialCompIsAlternativeItem  string
	AlternativeItemGroup           string
	AlternativeItemStrategy        string
	AlternativeItemPriority        string
	UsageProbabilityPercent        string
	MaterialComponentIsPhantomItem string
	LeadTimeOffset                 string
	QuantityIsFixed                string
	IsNetScrap                     string
	ComponentScrapInPercent        string
	OperationScrapInPercent        string
	BaseUnit                       string
	RequiredQuantity               string
	WithdrawnQuantity              string
	ConfirmedAvailableQuantity     string
	MaterialCompOriginalQuantity   string
	Currency                       string
	WithdrawnQuantityAmount        string
}{
	ManufacturingOrder:             "sap_production_order_component_data.ManufacturingOrder",
	ManufacturingOrderSequence:     "sap_production_order_component_data.ManufacturingOrderSequence",
	ManufacturingOrderOperation:    "sap_production_order_component_data.ManufacturingOrderOperation",
	OrderInternalBillOfOperations:  "sap_production_order_component_data.OrderInternalBillOfOperations",
	BOMItem:                        "sap_production_order_component_data.BOMItem",
	Reservation:                    "sap_production_order_component_data.Reservation",
	ReservationItem:                "sap_production_order_component_data.ReservationItem",
	MaterialGroup:                  "sap_production_order_component_data.MaterialGroup",
	Material:                       "sap_production_order_component_data.Material",
	Plant:                          "sap_production_order_component_data.Plant",
	ManufacturingOrderCategory:     "sap_production_order_component_data.ManufacturingOrderCategory",
	ManufacturingOrderType:         "sap_production_order_component_data.ManufacturingOrderType",
	ProductionPlant:                "sap_production_order_component_data.ProductionPlant",
	MatlCompRequirementDate:        "sap_production_order_component_data.MatlCompRequirementDate",
	MatlCompRequirementTime:        "sap_production_order_component_data.MatlCompRequirementTime",
	ReservationIsFinallyIssued:     "sap_production_order_component_data.ReservationIsFinallyIssued",
	IsBulkMaterialComponent:        "sap_production_order_component_data.IsBulkMaterialComponent",
	MatlCompIsMarkedForBackflush:   "sap_production_order_component_data.MatlCompIsMarkedForBackflush",
	MaterialCompIsCostRelevant:     "sap_production_order_component_data.MaterialCompIsCostRelevant",
	SalesOrder:                     "sap_production_order_component_data.SalesOrder",
	SalesOrderItem:                 "sap_production_order_component_data.SalesOrderItem",
	SortField:                      "sap_production_order_component_data.SortField",
	BillOfMaterialCategory:         "sap_production_order_component_data.BillOfMaterialCategory",
	BOMItemCategory:                "sap_production_order_component_data.BOMItemCategory",
	BillOfMaterialItemNumber:       "sap_production_order_component_data.BillOfMaterialItemNumber",
	BOMItemDescription:             "sap_production_order_component_data.BOMItemDescription",
	StorageLocation:                "sap_production_order_component_data.StorageLocation",
	Batch:                          "sap_production_order_component_data.Batch",
	BatchSplitType:                 "sap_production_order_component_data.BatchSplitType",
	GoodsMovementType:              "sap_production_order_component_data.GoodsMovementType",
	SupplyArea:                     "sap_production_order_component_data.SupplyArea",
	GoodsRecipientName:             "sap_production_order_component_data.GoodsRecipientName",
	UnloadingPointName:             "sap_production_order_component_data.UnloadingPointName",
	MaterialCompIsAlternativeItem:  "sap_production_order_component_data.MaterialCompIsAlternativeItem",
	AlternativeItemGroup:           "sap_production_order_component_data.AlternativeItemGroup",
	AlternativeItemStrategy:        "sap_production_order_component_data.AlternativeItemStrategy",
	AlternativeItemPriority:        "sap_production_order_component_data.AlternativeItemPriority",
	UsageProbabilityPercent:        "sap_production_order_component_data.UsageProbabilityPercent",
	MaterialComponentIsPhantomItem: "sap_production_order_component_data.MaterialComponentIsPhantomItem",
	LeadTimeOffset:                 "sap_production_order_component_data.LeadTimeOffset",
	QuantityIsFixed:                "sap_production_order_component_data.QuantityIsFixed",
	IsNetScrap:                     "sap_production_order_component_data.IsNetScrap",
	ComponentScrapInPercent:        "sap_production_order_component_data.ComponentScrapInPercent",
	OperationScrapInPercent:        "sap_production_order_component_data.OperationScrapInPercent",
	BaseUnit:                       "sap_production_order_component_data.BaseUnit",
	RequiredQuantity:               "sap_production_order_component_data.RequiredQuantity",
	WithdrawnQuantity:              "sap_production_order_component_data.WithdrawnQuantity",
	ConfirmedAvailableQuantity:     "sap_production_order_component_data.ConfirmedAvailableQuantity",
	MaterialCompOriginalQuantity:   "sap_production_order_component_data.MaterialCompOriginalQuantity",
	Currency:                       "sap_production_order_component_data.Currency",
	WithdrawnQuantityAmount:        "sap_production_order_component_data.WithdrawnQuantityAmount",
}

// Generated where

var SapProductionOrderComponentDatumWhere = struct {
	ManufacturingOrder             whereHelperstring
	ManufacturingOrderSequence     whereHelperstring
	ManufacturingOrderOperation    whereHelperstring
	OrderInternalBillOfOperations  whereHelperstring
	BOMItem                        whereHelperstring
	Reservation                    whereHelpernull_String
	ReservationItem                whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	Material                       whereHelpernull_String
	Plant                          whereHelpernull_String
	ManufacturingOrderCategory     whereHelpernull_String
	ManufacturingOrderType         whereHelpernull_String
	ProductionPlant                whereHelpernull_String
	MatlCompRequirementDate        whereHelpernull_String
	MatlCompRequirementTime        whereHelpernull_String
	ReservationIsFinallyIssued     whereHelpernull_Bool
	IsBulkMaterialComponent        whereHelpernull_Bool
	MatlCompIsMarkedForBackflush   whereHelpernull_Bool
	MaterialCompIsCostRelevant     whereHelpernull_String
	SalesOrder                     whereHelpernull_String
	SalesOrderItem                 whereHelpernull_String
	SortField                      whereHelpernull_String
	BillOfMaterialCategory         whereHelpernull_String
	BOMItemCategory                whereHelpernull_String
	BillOfMaterialItemNumber       whereHelpernull_String
	BOMItemDescription             whereHelpernull_String
	StorageLocation                whereHelpernull_String
	Batch                          whereHelpernull_String
	BatchSplitType                 whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
	SupplyArea                     whereHelpernull_String
	GoodsRecipientName             whereHelpernull_String
	UnloadingPointName             whereHelpernull_String
	MaterialCompIsAlternativeItem  whereHelpernull_Bool
	AlternativeItemGroup           whereHelpernull_String
	AlternativeItemStrategy        whereHelpernull_String
	AlternativeItemPriority        whereHelpernull_String
	UsageProbabilityPercent        whereHelpernull_String
	MaterialComponentIsPhantomItem whereHelpernull_Bool
	LeadTimeOffset                 whereHelpernull_String
	QuantityIsFixed                whereHelpernull_Bool
	IsNetScrap                     whereHelpernull_Bool
	ComponentScrapInPercent        whereHelpernull_String
	OperationScrapInPercent        whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	RequiredQuantity               whereHelpernull_String
	WithdrawnQuantity              whereHelpernull_String
	ConfirmedAvailableQuantity     whereHelpernull_String
	MaterialCompOriginalQuantity   whereHelpernull_String
	Currency                       whereHelpernull_String
	WithdrawnQuantityAmount        whereHelpernull_String
}{
	ManufacturingOrder:             whereHelperstring{field: "`sap_production_order_component_data`.`ManufacturingOrder`"},
	ManufacturingOrderSequence:     whereHelperstring{field: "`sap_production_order_component_data`.`ManufacturingOrderSequence`"},
	ManufacturingOrderOperation:    whereHelperstring{field: "`sap_production_order_component_data`.`ManufacturingOrderOperation`"},
	OrderInternalBillOfOperations:  whereHelperstring{field: "`sap_production_order_component_data`.`OrderInternalBillOfOperations`"},
	BOMItem:                        whereHelperstring{field: "`sap_production_order_component_data`.`BOMItem`"},
	Reservation:                    whereHelpernull_String{field: "`sap_production_order_component_data`.`Reservation`"},
	ReservationItem:                whereHelpernull_String{field: "`sap_production_order_component_data`.`ReservationItem`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_production_order_component_data`.`MaterialGroup`"},
	Material:                       whereHelpernull_String{field: "`sap_production_order_component_data`.`Material`"},
	Plant:                          whereHelpernull_String{field: "`sap_production_order_component_data`.`Plant`"},
	ManufacturingOrderCategory:     whereHelpernull_String{field: "`sap_production_order_component_data`.`ManufacturingOrderCategory`"},
	ManufacturingOrderType:         whereHelpernull_String{field: "`sap_production_order_component_data`.`ManufacturingOrderType`"},
	ProductionPlant:                whereHelpernull_String{field: "`sap_production_order_component_data`.`ProductionPlant`"},
	MatlCompRequirementDate:        whereHelpernull_String{field: "`sap_production_order_component_data`.`MatlCompRequirementDate`"},
	MatlCompRequirementTime:        whereHelpernull_String{field: "`sap_production_order_component_data`.`MatlCompRequirementTime`"},
	ReservationIsFinallyIssued:     whereHelpernull_Bool{field: "`sap_production_order_component_data`.`ReservationIsFinallyIssued`"},
	IsBulkMaterialComponent:        whereHelpernull_Bool{field: "`sap_production_order_component_data`.`IsBulkMaterialComponent`"},
	MatlCompIsMarkedForBackflush:   whereHelpernull_Bool{field: "`sap_production_order_component_data`.`MatlCompIsMarkedForBackflush`"},
	MaterialCompIsCostRelevant:     whereHelpernull_String{field: "`sap_production_order_component_data`.`MaterialCompIsCostRelevant`"},
	SalesOrder:                     whereHelpernull_String{field: "`sap_production_order_component_data`.`SalesOrder`"},
	SalesOrderItem:                 whereHelpernull_String{field: "`sap_production_order_component_data`.`SalesOrderItem`"},
	SortField:                      whereHelpernull_String{field: "`sap_production_order_component_data`.`SortField`"},
	BillOfMaterialCategory:         whereHelpernull_String{field: "`sap_production_order_component_data`.`BillOfMaterialCategory`"},
	BOMItemCategory:                whereHelpernull_String{field: "`sap_production_order_component_data`.`BOMItemCategory`"},
	BillOfMaterialItemNumber:       whereHelpernull_String{field: "`sap_production_order_component_data`.`BillOfMaterialItemNumber`"},
	BOMItemDescription:             whereHelpernull_String{field: "`sap_production_order_component_data`.`BOMItemDescription`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_production_order_component_data`.`StorageLocation`"},
	Batch:                          whereHelpernull_String{field: "`sap_production_order_component_data`.`Batch`"},
	BatchSplitType:                 whereHelpernull_String{field: "`sap_production_order_component_data`.`BatchSplitType`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_production_order_component_data`.`GoodsMovementType`"},
	SupplyArea:                     whereHelpernull_String{field: "`sap_production_order_component_data`.`SupplyArea`"},
	GoodsRecipientName:             whereHelpernull_String{field: "`sap_production_order_component_data`.`GoodsRecipientName`"},
	UnloadingPointName:             whereHelpernull_String{field: "`sap_production_order_component_data`.`UnloadingPointName`"},
	MaterialCompIsAlternativeItem:  whereHelpernull_Bool{field: "`sap_production_order_component_data`.`MaterialCompIsAlternativeItem`"},
	AlternativeItemGroup:           whereHelpernull_String{field: "`sap_production_order_component_data`.`AlternativeItemGroup`"},
	AlternativeItemStrategy:        whereHelpernull_String{field: "`sap_production_order_component_data`.`AlternativeItemStrategy`"},
	AlternativeItemPriority:        whereHelpernull_String{field: "`sap_production_order_component_data`.`AlternativeItemPriority`"},
	UsageProbabilityPercent:        whereHelpernull_String{field: "`sap_production_order_component_data`.`UsageProbabilityPercent`"},
	MaterialComponentIsPhantomItem: whereHelpernull_Bool{field: "`sap_production_order_component_data`.`MaterialComponentIsPhantomItem`"},
	LeadTimeOffset:                 whereHelpernull_String{field: "`sap_production_order_component_data`.`LeadTimeOffset`"},
	QuantityIsFixed:                whereHelpernull_Bool{field: "`sap_production_order_component_data`.`QuantityIsFixed`"},
	IsNetScrap:                     whereHelpernull_Bool{field: "`sap_production_order_component_data`.`IsNetScrap`"},
	ComponentScrapInPercent:        whereHelpernull_String{field: "`sap_production_order_component_data`.`ComponentScrapInPercent`"},
	OperationScrapInPercent:        whereHelpernull_String{field: "`sap_production_order_component_data`.`OperationScrapInPercent`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_production_order_component_data`.`BaseUnit`"},
	RequiredQuantity:               whereHelpernull_String{field: "`sap_production_order_component_data`.`RequiredQuantity`"},
	WithdrawnQuantity:              whereHelpernull_String{field: "`sap_production_order_component_data`.`WithdrawnQuantity`"},
	ConfirmedAvailableQuantity:     whereHelpernull_String{field: "`sap_production_order_component_data`.`ConfirmedAvailableQuantity`"},
	MaterialCompOriginalQuantity:   whereHelpernull_String{field: "`sap_production_order_component_data`.`MaterialCompOriginalQuantity`"},
	Currency:                       whereHelpernull_String{field: "`sap_production_order_component_data`.`Currency`"},
	WithdrawnQuantityAmount:        whereHelpernull_String{field: "`sap_production_order_component_data`.`WithdrawnQuantityAmount`"},
}

// SapProductionOrderComponentDatumRels is where relationship names are stored.
var SapProductionOrderComponentDatumRels = struct {
	ManufacturingOrderSapProductionOrderGeneralDatum string
}{
	ManufacturingOrderSapProductionOrderGeneralDatum: "ManufacturingOrderSapProductionOrderGeneralDatum",
}

// sapProductionOrderComponentDatumR is where relationships are stored.
type sapProductionOrderComponentDatumR struct {
	ManufacturingOrderSapProductionOrderGeneralDatum *SapProductionOrderGeneralDatum `boil:"ManufacturingOrderSapProductionOrderGeneralDatum" json:"ManufacturingOrderSapProductionOrderGeneralDatum" toml:"ManufacturingOrderSapProductionOrderGeneralDatum" yaml:"ManufacturingOrderSapProductionOrderGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductionOrderComponentDatumR) NewStruct() *sapProductionOrderComponentDatumR {
	return &sapProductionOrderComponentDatumR{}
}

// sapProductionOrderComponentDatumL is where Load methods for each relationship are stored.
type sapProductionOrderComponentDatumL struct{}

var (
	sapProductionOrderComponentDatumAllColumns            = []string{"ManufacturingOrder", "ManufacturingOrderSequence", "ManufacturingOrderOperation", "OrderInternalBillOfOperations", "BOMItem", "Reservation", "ReservationItem", "MaterialGroup", "Material", "Plant", "ManufacturingOrderCategory", "ManufacturingOrderType", "ProductionPlant", "MatlCompRequirementDate", "MatlCompRequirementTime", "ReservationIsFinallyIssued", "IsBulkMaterialComponent", "MatlCompIsMarkedForBackflush", "MaterialCompIsCostRelevant", "SalesOrder", "SalesOrderItem", "SortField", "BillOfMaterialCategory", "BOMItemCategory", "BillOfMaterialItemNumber", "BOMItemDescription", "StorageLocation", "Batch", "BatchSplitType", "GoodsMovementType", "SupplyArea", "GoodsRecipientName", "UnloadingPointName", "MaterialCompIsAlternativeItem", "AlternativeItemGroup", "AlternativeItemStrategy", "AlternativeItemPriority", "UsageProbabilityPercent", "MaterialComponentIsPhantomItem", "LeadTimeOffset", "QuantityIsFixed", "IsNetScrap", "ComponentScrapInPercent", "OperationScrapInPercent", "BaseUnit", "RequiredQuantity", "WithdrawnQuantity", "ConfirmedAvailableQuantity", "MaterialCompOriginalQuantity", "Currency", "WithdrawnQuantityAmount"}
	sapProductionOrderComponentDatumColumnsWithoutDefault = []string{"ManufacturingOrder", "ManufacturingOrderSequence", "ManufacturingOrderOperation", "OrderInternalBillOfOperations", "BOMItem", "Reservation", "ReservationItem", "MaterialGroup", "Material", "Plant", "ManufacturingOrderCategory", "ManufacturingOrderType", "ProductionPlant", "MatlCompRequirementDate", "MatlCompRequirementTime", "ReservationIsFinallyIssued", "IsBulkMaterialComponent", "MatlCompIsMarkedForBackflush", "MaterialCompIsCostRelevant", "SalesOrder", "SalesOrderItem", "SortField", "BillOfMaterialCategory", "BOMItemCategory", "BillOfMaterialItemNumber", "BOMItemDescription", "StorageLocation", "Batch", "BatchSplitType", "GoodsMovementType", "SupplyArea", "GoodsRecipientName", "UnloadingPointName", "MaterialCompIsAlternativeItem", "AlternativeItemGroup", "AlternativeItemStrategy", "AlternativeItemPriority", "UsageProbabilityPercent", "MaterialComponentIsPhantomItem", "LeadTimeOffset", "QuantityIsFixed", "IsNetScrap", "ComponentScrapInPercent", "OperationScrapInPercent", "BaseUnit", "RequiredQuantity", "WithdrawnQuantity", "ConfirmedAvailableQuantity", "MaterialCompOriginalQuantity", "Currency", "WithdrawnQuantityAmount"}
	sapProductionOrderComponentDatumColumnsWithDefault    = []string{}
	sapProductionOrderComponentDatumPrimaryKeyColumns     = []string{"ManufacturingOrder", "ManufacturingOrderSequence", "ManufacturingOrderOperation", "OrderInternalBillOfOperations", "BOMItem"}
	sapProductionOrderComponentDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionOrderComponentDatumSlice is an alias for a slice of pointers to SapProductionOrderComponentDatum.
	// This should almost always be used instead of []SapProductionOrderComponentDatum.
	SapProductionOrderComponentDatumSlice []*SapProductionOrderComponentDatum
	// SapProductionOrderComponentDatumHook is the signature for custom SapProductionOrderComponentDatum hook methods
	SapProductionOrderComponentDatumHook func(context.Context, boil.ContextExecutor, *SapProductionOrderComponentDatum) error

	sapProductionOrderComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionOrderComponentDatumType                 = reflect.TypeOf(&SapProductionOrderComponentDatum{})
	sapProductionOrderComponentDatumMapping              = queries.MakeStructMapping(sapProductionOrderComponentDatumType)
	sapProductionOrderComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, sapProductionOrderComponentDatumPrimaryKeyColumns)
	sapProductionOrderComponentDatumInsertCacheMut       sync.RWMutex
	sapProductionOrderComponentDatumInsertCache          = make(map[string]insertCache)
	sapProductionOrderComponentDatumUpdateCacheMut       sync.RWMutex
	sapProductionOrderComponentDatumUpdateCache          = make(map[string]updateCache)
	sapProductionOrderComponentDatumUpsertCacheMut       sync.RWMutex
	sapProductionOrderComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionOrderComponentDatumAfterSelectHooks []SapProductionOrderComponentDatumHook

var sapProductionOrderComponentDatumBeforeInsertHooks []SapProductionOrderComponentDatumHook
var sapProductionOrderComponentDatumAfterInsertHooks []SapProductionOrderComponentDatumHook

var sapProductionOrderComponentDatumBeforeUpdateHooks []SapProductionOrderComponentDatumHook
var sapProductionOrderComponentDatumAfterUpdateHooks []SapProductionOrderComponentDatumHook

var sapProductionOrderComponentDatumBeforeDeleteHooks []SapProductionOrderComponentDatumHook
var sapProductionOrderComponentDatumAfterDeleteHooks []SapProductionOrderComponentDatumHook

var sapProductionOrderComponentDatumBeforeUpsertHooks []SapProductionOrderComponentDatumHook
var sapProductionOrderComponentDatumAfterUpsertHooks []SapProductionOrderComponentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionOrderComponentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionOrderComponentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionOrderComponentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionOrderComponentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionOrderComponentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionOrderComponentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionOrderComponentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionOrderComponentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionOrderComponentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderComponentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionOrderComponentDatumHook registers your hook function for all future operations.
func AddSapProductionOrderComponentDatumHook(hookPoint boil.HookPoint, sapProductionOrderComponentDatumHook SapProductionOrderComponentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionOrderComponentDatumAfterSelectHooks = append(sapProductionOrderComponentDatumAfterSelectHooks, sapProductionOrderComponentDatumHook)
	case boil.BeforeInsertHook:
		sapProductionOrderComponentDatumBeforeInsertHooks = append(sapProductionOrderComponentDatumBeforeInsertHooks, sapProductionOrderComponentDatumHook)
	case boil.AfterInsertHook:
		sapProductionOrderComponentDatumAfterInsertHooks = append(sapProductionOrderComponentDatumAfterInsertHooks, sapProductionOrderComponentDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionOrderComponentDatumBeforeUpdateHooks = append(sapProductionOrderComponentDatumBeforeUpdateHooks, sapProductionOrderComponentDatumHook)
	case boil.AfterUpdateHook:
		sapProductionOrderComponentDatumAfterUpdateHooks = append(sapProductionOrderComponentDatumAfterUpdateHooks, sapProductionOrderComponentDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionOrderComponentDatumBeforeDeleteHooks = append(sapProductionOrderComponentDatumBeforeDeleteHooks, sapProductionOrderComponentDatumHook)
	case boil.AfterDeleteHook:
		sapProductionOrderComponentDatumAfterDeleteHooks = append(sapProductionOrderComponentDatumAfterDeleteHooks, sapProductionOrderComponentDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionOrderComponentDatumBeforeUpsertHooks = append(sapProductionOrderComponentDatumBeforeUpsertHooks, sapProductionOrderComponentDatumHook)
	case boil.AfterUpsertHook:
		sapProductionOrderComponentDatumAfterUpsertHooks = append(sapProductionOrderComponentDatumAfterUpsertHooks, sapProductionOrderComponentDatumHook)
	}
}

// One returns a single sapProductionOrderComponentDatum record from the query.
func (q sapProductionOrderComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionOrderComponentDatum, error) {
	o := &SapProductionOrderComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_order_component_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionOrderComponentDatum records from the query.
func (q sapProductionOrderComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionOrderComponentDatumSlice, error) {
	var o []*SapProductionOrderComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionOrderComponentDatum slice")
	}

	if len(sapProductionOrderComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionOrderComponentDatum records in the query.
func (q sapProductionOrderComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_order_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionOrderComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_order_component_data exists")
	}

	return count > 0, nil
}

// ManufacturingOrderSapProductionOrderGeneralDatum pointed to by the foreign key.
func (o *SapProductionOrderComponentDatum) ManufacturingOrderSapProductionOrderGeneralDatum(mods ...qm.QueryMod) sapProductionOrderGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ManufacturingOrder` = ?", o.ManufacturingOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductionOrderGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_production_order_general_data`")

	return query
}

// LoadManufacturingOrderSapProductionOrderGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductionOrderComponentDatumL) LoadManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderComponentDatum
	var object *SapProductionOrderComponentDatum

	if singular {
		object = maybeSapProductionOrderComponentDatum.(*SapProductionOrderComponentDatum)
	} else {
		slice = *maybeSapProductionOrderComponentDatum.(*[]*SapProductionOrderComponentDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderComponentDatumR{}
		}
		args = append(args, object.ManufacturingOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_general_data`),
		qm.WhereIn(`sap_production_order_general_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductionOrderGeneralDatum")
	}

	var resultSlice []*SapProductionOrderGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductionOrderGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_production_order_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_general_data")
	}

	if len(sapProductionOrderComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductionOrderGeneralDatumR{}
		}
		foreign.R.ManufacturingOrderSapProductionOrderComponentData = append(foreign.R.ManufacturingOrderSapProductionOrderComponentData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductionOrderGeneralDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderComponentData = append(foreign.R.ManufacturingOrderSapProductionOrderComponentData, local)
				break
			}
		}
	}

	return nil
}

// SetManufacturingOrderSapProductionOrderGeneralDatum of the sapProductionOrderComponentDatum to the related item.
// Sets o.R.ManufacturingOrderSapProductionOrderGeneralDatum to related.
// Adds o to related.R.ManufacturingOrderSapProductionOrderComponentData.
func (o *SapProductionOrderComponentDatum) SetManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductionOrderGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_production_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
		strmangle.WhereClause("`", "`", 0, sapProductionOrderComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ManufacturingOrder, o.ManufacturingOrder, o.ManufacturingOrderSequence, o.ManufacturingOrderOperation, o.OrderInternalBillOfOperations, o.BOMItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManufacturingOrder = related.ManufacturingOrder
	if o.R == nil {
		o.R = &sapProductionOrderComponentDatumR{
			ManufacturingOrderSapProductionOrderGeneralDatum: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderComponentData: SapProductionOrderComponentDatumSlice{o},
		}
	} else {
		related.R.ManufacturingOrderSapProductionOrderComponentData = append(related.R.ManufacturingOrderSapProductionOrderComponentData, o)
	}

	return nil
}

// SapProductionOrderComponentData retrieves all the records using an executor.
func SapProductionOrderComponentData(mods ...qm.QueryMod) sapProductionOrderComponentDatumQuery {
	mods = append(mods, qm.From("`sap_production_order_component_data`"))
	return sapProductionOrderComponentDatumQuery{NewQuery(mods...)}
}

// FindSapProductionOrderComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionOrderComponentDatum(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, manufacturingOrderSequence string, manufacturingOrderOperation string, orderInternalBillOfOperations string, bOMItem string, selectCols ...string) (*SapProductionOrderComponentDatum, error) {
	sapProductionOrderComponentDatumObj := &SapProductionOrderComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_order_component_data` where `ManufacturingOrder`=? AND `ManufacturingOrderSequence`=? AND `ManufacturingOrderOperation`=? AND `OrderInternalBillOfOperations`=? AND `BOMItem`=?", sel,
	)

	q := queries.Raw(query, manufacturingOrder, manufacturingOrderSequence, manufacturingOrderOperation, orderInternalBillOfOperations, bOMItem)

	err := q.Bind(ctx, exec, sapProductionOrderComponentDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_order_component_data")
	}

	if err = sapProductionOrderComponentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionOrderComponentDatumObj, err
	}

	return sapProductionOrderComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionOrderComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_component_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionOrderComponentDatumInsertCacheMut.RLock()
	cache, cached := sapProductionOrderComponentDatumInsertCache[key]
	sapProductionOrderComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionOrderComponentDatumAllColumns,
			sapProductionOrderComponentDatumColumnsWithDefault,
			sapProductionOrderComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_order_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_order_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_order_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionOrderComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_order_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ManufacturingOrder,
		o.ManufacturingOrderSequence,
		o.ManufacturingOrderOperation,
		o.OrderInternalBillOfOperations,
		o.BOMItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_component_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderComponentDatumInsertCacheMut.Lock()
		sapProductionOrderComponentDatumInsertCache[key] = cache
		sapProductionOrderComponentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionOrderComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionOrderComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionOrderComponentDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionOrderComponentDatumUpdateCache[key]
	sapProductionOrderComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionOrderComponentDatumAllColumns,
			sapProductionOrderComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_order_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_order_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionOrderComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, append(wl, sapProductionOrderComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_order_component_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_order_component_data")
	}

	if !cached {
		sapProductionOrderComponentDatumUpdateCacheMut.Lock()
		sapProductionOrderComponentDatumUpdateCache[key] = cache
		sapProductionOrderComponentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionOrderComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_order_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_order_component_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionOrderComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionOrderComponentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionOrderComponentDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionOrderComponentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionOrderComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_component_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionOrderComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionOrderComponentDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionOrderComponentDatumUpsertCache[key]
	sapProductionOrderComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionOrderComponentDatumAllColumns,
			sapProductionOrderComponentDatumColumnsWithDefault,
			sapProductionOrderComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionOrderComponentDatumAllColumns,
			sapProductionOrderComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_order_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_order_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_order_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_order_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionOrderComponentDatumType, sapProductionOrderComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_order_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_component_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderComponentDatumUpsertCacheMut.Lock()
		sapProductionOrderComponentDatumUpsertCache[key] = cache
		sapProductionOrderComponentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionOrderComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionOrderComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionOrderComponentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionOrderComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_order_component_data` WHERE `ManufacturingOrder`=? AND `ManufacturingOrderSequence`=? AND `ManufacturingOrderOperation`=? AND `OrderInternalBillOfOperations`=? AND `BOMItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_order_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_order_component_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionOrderComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionOrderComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_order_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_component_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionOrderComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionOrderComponentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_order_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionOrderComponentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_component_data")
	}

	if len(sapProductionOrderComponentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionOrderComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionOrderComponentDatum(ctx, exec, o.ManufacturingOrder, o.ManufacturingOrderSequence, o.ManufacturingOrderOperation, o.OrderInternalBillOfOperations, o.BOMItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionOrderComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionOrderComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_order_component_data`.* FROM `sap_production_order_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionOrderComponentDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionOrderComponentDatumExists checks if the SapProductionOrderComponentDatum row exists.
func SapProductionOrderComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, manufacturingOrderSequence string, manufacturingOrderOperation string, orderInternalBillOfOperations string, bOMItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_order_component_data` where `ManufacturingOrder`=? AND `ManufacturingOrderSequence`=? AND `ManufacturingOrderOperation`=? AND `OrderInternalBillOfOperations`=? AND `BOMItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, manufacturingOrder, manufacturingOrderSequence, manufacturingOrderOperation, orderInternalBillOfOperations, bOMItem)
	}
	row := exec.QueryRowContext(ctx, sql, manufacturingOrder, manufacturingOrderSequence, manufacturingOrderOperation, orderInternalBillOfOperations, bOMItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_order_component_data exists")
	}

	return exists, nil
}
