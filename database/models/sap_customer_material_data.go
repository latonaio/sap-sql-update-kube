// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCustomerMaterialDatum is an object representing the database table.
type SapCustomerMaterialDatum struct {
	Customer                       string      `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	SalesOrganization              string      `boil:"SalesOrganization" json:"SalesOrganization" toml:"SalesOrganization" yaml:"SalesOrganization"`
	DistributionChannel            string      `boil:"DistributionChannel" json:"DistributionChannel" toml:"DistributionChannel" yaml:"DistributionChannel"`
	Material                       string      `boil:"Material" json:"Material" toml:"Material" yaml:"Material"`
	MaterialByCustomer             null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	MaterialDescriptionByCustomer  null.String `boil:"MaterialDescriptionByCustomer" json:"MaterialDescriptionByCustomer,omitempty" toml:"MaterialDescriptionByCustomer" yaml:"MaterialDescriptionByCustomer,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	DeliveryPriority               null.String `boil:"DeliveryPriority" json:"DeliveryPriority,omitempty" toml:"DeliveryPriority" yaml:"DeliveryPriority,omitempty"`
	MinDeliveryQtyInBaseUnit       null.String `boil:"MinDeliveryQtyInBaseUnit" json:"MinDeliveryQtyInBaseUnit,omitempty" toml:"MinDeliveryQtyInBaseUnit" yaml:"MinDeliveryQtyInBaseUnit,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	PartialDeliveryIsAllowed       null.String `boil:"PartialDeliveryIsAllowed" json:"PartialDeliveryIsAllowed,omitempty" toml:"PartialDeliveryIsAllowed" yaml:"PartialDeliveryIsAllowed,omitempty"`
	MaxNmbrOfPartialDelivery       null.String `boil:"MaxNmbrOfPartialDelivery" json:"MaxNmbrOfPartialDelivery,omitempty" toml:"MaxNmbrOfPartialDelivery" yaml:"MaxNmbrOfPartialDelivery,omitempty"`
	UnderdelivTolrtdLmtRatioInPct  null.String `boil:"UnderdelivTolrtdLmtRatioInPct" json:"UnderdelivTolrtdLmtRatioInPct,omitempty" toml:"UnderdelivTolrtdLmtRatioInPct" yaml:"UnderdelivTolrtdLmtRatioInPct,omitempty"`
	OverdelivTolrtdLmtRatioInPct   null.String `boil:"OverdelivTolrtdLmtRatioInPct" json:"OverdelivTolrtdLmtRatioInPct,omitempty" toml:"OverdelivTolrtdLmtRatioInPct" yaml:"OverdelivTolrtdLmtRatioInPct,omitempty"`
	UnlimitedOverdeliveryIsAllowed null.Bool   `boil:"UnlimitedOverdeliveryIsAllowed" json:"UnlimitedOverdeliveryIsAllowed,omitempty" toml:"UnlimitedOverdeliveryIsAllowed" yaml:"UnlimitedOverdeliveryIsAllowed,omitempty"`
	CustomerMaterialItemUsage      null.String `boil:"CustomerMaterialItemUsage" json:"CustomerMaterialItemUsage,omitempty" toml:"CustomerMaterialItemUsage" yaml:"CustomerMaterialItemUsage,omitempty"`
	SalesUnit                      null.String `boil:"SalesUnit" json:"SalesUnit,omitempty" toml:"SalesUnit" yaml:"SalesUnit,omitempty"`
	SalesQtyToBaseQtyDnmntr        null.String `boil:"SalesQtyToBaseQtyDnmntr" json:"SalesQtyToBaseQtyDnmntr,omitempty" toml:"SalesQtyToBaseQtyDnmntr" yaml:"SalesQtyToBaseQtyDnmntr,omitempty"`
	SalesQtyToBaseQtyNmrtr         null.String `boil:"SalesQtyToBaseQtyNmrtr" json:"SalesQtyToBaseQtyNmrtr,omitempty" toml:"SalesQtyToBaseQtyNmrtr" yaml:"SalesQtyToBaseQtyNmrtr,omitempty"`

	R *sapCustomerMaterialDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCustomerMaterialDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCustomerMaterialDatumColumns = struct {
	Customer                       string
	SalesOrganization              string
	DistributionChannel            string
	Material                       string
	MaterialByCustomer             string
	MaterialDescriptionByCustomer  string
	Plant                          string
	DeliveryPriority               string
	MinDeliveryQtyInBaseUnit       string
	BaseUnit                       string
	PartialDeliveryIsAllowed       string
	MaxNmbrOfPartialDelivery       string
	UnderdelivTolrtdLmtRatioInPct  string
	OverdelivTolrtdLmtRatioInPct   string
	UnlimitedOverdeliveryIsAllowed string
	CustomerMaterialItemUsage      string
	SalesUnit                      string
	SalesQtyToBaseQtyDnmntr        string
	SalesQtyToBaseQtyNmrtr         string
}{
	Customer:                       "Customer",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	Material:                       "Material",
	MaterialByCustomer:             "MaterialByCustomer",
	MaterialDescriptionByCustomer:  "MaterialDescriptionByCustomer",
	Plant:                          "Plant",
	DeliveryPriority:               "DeliveryPriority",
	MinDeliveryQtyInBaseUnit:       "MinDeliveryQtyInBaseUnit",
	BaseUnit:                       "BaseUnit",
	PartialDeliveryIsAllowed:       "PartialDeliveryIsAllowed",
	MaxNmbrOfPartialDelivery:       "MaxNmbrOfPartialDelivery",
	UnderdelivTolrtdLmtRatioInPct:  "UnderdelivTolrtdLmtRatioInPct",
	OverdelivTolrtdLmtRatioInPct:   "OverdelivTolrtdLmtRatioInPct",
	UnlimitedOverdeliveryIsAllowed: "UnlimitedOverdeliveryIsAllowed",
	CustomerMaterialItemUsage:      "CustomerMaterialItemUsage",
	SalesUnit:                      "SalesUnit",
	SalesQtyToBaseQtyDnmntr:        "SalesQtyToBaseQtyDnmntr",
	SalesQtyToBaseQtyNmrtr:         "SalesQtyToBaseQtyNmrtr",
}

var SapCustomerMaterialDatumTableColumns = struct {
	Customer                       string
	SalesOrganization              string
	DistributionChannel            string
	Material                       string
	MaterialByCustomer             string
	MaterialDescriptionByCustomer  string
	Plant                          string
	DeliveryPriority               string
	MinDeliveryQtyInBaseUnit       string
	BaseUnit                       string
	PartialDeliveryIsAllowed       string
	MaxNmbrOfPartialDelivery       string
	UnderdelivTolrtdLmtRatioInPct  string
	OverdelivTolrtdLmtRatioInPct   string
	UnlimitedOverdeliveryIsAllowed string
	CustomerMaterialItemUsage      string
	SalesUnit                      string
	SalesQtyToBaseQtyDnmntr        string
	SalesQtyToBaseQtyNmrtr         string
}{
	Customer:                       "sap_customer_material_data.Customer",
	SalesOrganization:              "sap_customer_material_data.SalesOrganization",
	DistributionChannel:            "sap_customer_material_data.DistributionChannel",
	Material:                       "sap_customer_material_data.Material",
	MaterialByCustomer:             "sap_customer_material_data.MaterialByCustomer",
	MaterialDescriptionByCustomer:  "sap_customer_material_data.MaterialDescriptionByCustomer",
	Plant:                          "sap_customer_material_data.Plant",
	DeliveryPriority:               "sap_customer_material_data.DeliveryPriority",
	MinDeliveryQtyInBaseUnit:       "sap_customer_material_data.MinDeliveryQtyInBaseUnit",
	BaseUnit:                       "sap_customer_material_data.BaseUnit",
	PartialDeliveryIsAllowed:       "sap_customer_material_data.PartialDeliveryIsAllowed",
	MaxNmbrOfPartialDelivery:       "sap_customer_material_data.MaxNmbrOfPartialDelivery",
	UnderdelivTolrtdLmtRatioInPct:  "sap_customer_material_data.UnderdelivTolrtdLmtRatioInPct",
	OverdelivTolrtdLmtRatioInPct:   "sap_customer_material_data.OverdelivTolrtdLmtRatioInPct",
	UnlimitedOverdeliveryIsAllowed: "sap_customer_material_data.UnlimitedOverdeliveryIsAllowed",
	CustomerMaterialItemUsage:      "sap_customer_material_data.CustomerMaterialItemUsage",
	SalesUnit:                      "sap_customer_material_data.SalesUnit",
	SalesQtyToBaseQtyDnmntr:        "sap_customer_material_data.SalesQtyToBaseQtyDnmntr",
	SalesQtyToBaseQtyNmrtr:         "sap_customer_material_data.SalesQtyToBaseQtyNmrtr",
}

// Generated where

var SapCustomerMaterialDatumWhere = struct {
	Customer                       whereHelperstring
	SalesOrganization              whereHelperstring
	DistributionChannel            whereHelperstring
	Material                       whereHelperstring
	MaterialByCustomer             whereHelpernull_String
	MaterialDescriptionByCustomer  whereHelpernull_String
	Plant                          whereHelpernull_String
	DeliveryPriority               whereHelpernull_String
	MinDeliveryQtyInBaseUnit       whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	PartialDeliveryIsAllowed       whereHelpernull_String
	MaxNmbrOfPartialDelivery       whereHelpernull_String
	UnderdelivTolrtdLmtRatioInPct  whereHelpernull_String
	OverdelivTolrtdLmtRatioInPct   whereHelpernull_String
	UnlimitedOverdeliveryIsAllowed whereHelpernull_Bool
	CustomerMaterialItemUsage      whereHelpernull_String
	SalesUnit                      whereHelpernull_String
	SalesQtyToBaseQtyDnmntr        whereHelpernull_String
	SalesQtyToBaseQtyNmrtr         whereHelpernull_String
}{
	Customer:                       whereHelperstring{field: "`sap_customer_material_data`.`Customer`"},
	SalesOrganization:              whereHelperstring{field: "`sap_customer_material_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelperstring{field: "`sap_customer_material_data`.`DistributionChannel`"},
	Material:                       whereHelperstring{field: "`sap_customer_material_data`.`Material`"},
	MaterialByCustomer:             whereHelpernull_String{field: "`sap_customer_material_data`.`MaterialByCustomer`"},
	MaterialDescriptionByCustomer:  whereHelpernull_String{field: "`sap_customer_material_data`.`MaterialDescriptionByCustomer`"},
	Plant:                          whereHelpernull_String{field: "`sap_customer_material_data`.`Plant`"},
	DeliveryPriority:               whereHelpernull_String{field: "`sap_customer_material_data`.`DeliveryPriority`"},
	MinDeliveryQtyInBaseUnit:       whereHelpernull_String{field: "`sap_customer_material_data`.`MinDeliveryQtyInBaseUnit`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_customer_material_data`.`BaseUnit`"},
	PartialDeliveryIsAllowed:       whereHelpernull_String{field: "`sap_customer_material_data`.`PartialDeliveryIsAllowed`"},
	MaxNmbrOfPartialDelivery:       whereHelpernull_String{field: "`sap_customer_material_data`.`MaxNmbrOfPartialDelivery`"},
	UnderdelivTolrtdLmtRatioInPct:  whereHelpernull_String{field: "`sap_customer_material_data`.`UnderdelivTolrtdLmtRatioInPct`"},
	OverdelivTolrtdLmtRatioInPct:   whereHelpernull_String{field: "`sap_customer_material_data`.`OverdelivTolrtdLmtRatioInPct`"},
	UnlimitedOverdeliveryIsAllowed: whereHelpernull_Bool{field: "`sap_customer_material_data`.`UnlimitedOverdeliveryIsAllowed`"},
	CustomerMaterialItemUsage:      whereHelpernull_String{field: "`sap_customer_material_data`.`CustomerMaterialItemUsage`"},
	SalesUnit:                      whereHelpernull_String{field: "`sap_customer_material_data`.`SalesUnit`"},
	SalesQtyToBaseQtyDnmntr:        whereHelpernull_String{field: "`sap_customer_material_data`.`SalesQtyToBaseQtyDnmntr`"},
	SalesQtyToBaseQtyNmrtr:         whereHelpernull_String{field: "`sap_customer_material_data`.`SalesQtyToBaseQtyNmrtr`"},
}

// SapCustomerMaterialDatumRels is where relationship names are stored.
var SapCustomerMaterialDatumRels = struct {
}{}

// sapCustomerMaterialDatumR is where relationships are stored.
type sapCustomerMaterialDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapCustomerMaterialDatumR) NewStruct() *sapCustomerMaterialDatumR {
	return &sapCustomerMaterialDatumR{}
}

// sapCustomerMaterialDatumL is where Load methods for each relationship are stored.
type sapCustomerMaterialDatumL struct{}

var (
	sapCustomerMaterialDatumAllColumns            = []string{"Customer", "SalesOrganization", "DistributionChannel", "Material", "MaterialByCustomer", "MaterialDescriptionByCustomer", "Plant", "DeliveryPriority", "MinDeliveryQtyInBaseUnit", "BaseUnit", "PartialDeliveryIsAllowed", "MaxNmbrOfPartialDelivery", "UnderdelivTolrtdLmtRatioInPct", "OverdelivTolrtdLmtRatioInPct", "UnlimitedOverdeliveryIsAllowed", "CustomerMaterialItemUsage", "SalesUnit", "SalesQtyToBaseQtyDnmntr", "SalesQtyToBaseQtyNmrtr"}
	sapCustomerMaterialDatumColumnsWithoutDefault = []string{"Customer", "SalesOrganization", "DistributionChannel", "Material", "MaterialByCustomer", "MaterialDescriptionByCustomer", "Plant", "DeliveryPriority", "MinDeliveryQtyInBaseUnit", "BaseUnit", "PartialDeliveryIsAllowed", "MaxNmbrOfPartialDelivery", "UnderdelivTolrtdLmtRatioInPct", "OverdelivTolrtdLmtRatioInPct", "UnlimitedOverdeliveryIsAllowed", "CustomerMaterialItemUsage", "SalesUnit", "SalesQtyToBaseQtyDnmntr", "SalesQtyToBaseQtyNmrtr"}
	sapCustomerMaterialDatumColumnsWithDefault    = []string{}
	sapCustomerMaterialDatumPrimaryKeyColumns     = []string{"Customer", "SalesOrganization", "DistributionChannel", "Material"}
	sapCustomerMaterialDatumGeneratedColumns      = []string{}
)

type (
	// SapCustomerMaterialDatumSlice is an alias for a slice of pointers to SapCustomerMaterialDatum.
	// This should almost always be used instead of []SapCustomerMaterialDatum.
	SapCustomerMaterialDatumSlice []*SapCustomerMaterialDatum
	// SapCustomerMaterialDatumHook is the signature for custom SapCustomerMaterialDatum hook methods
	SapCustomerMaterialDatumHook func(context.Context, boil.ContextExecutor, *SapCustomerMaterialDatum) error

	sapCustomerMaterialDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCustomerMaterialDatumType                 = reflect.TypeOf(&SapCustomerMaterialDatum{})
	sapCustomerMaterialDatumMapping              = queries.MakeStructMapping(sapCustomerMaterialDatumType)
	sapCustomerMaterialDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, sapCustomerMaterialDatumPrimaryKeyColumns)
	sapCustomerMaterialDatumInsertCacheMut       sync.RWMutex
	sapCustomerMaterialDatumInsertCache          = make(map[string]insertCache)
	sapCustomerMaterialDatumUpdateCacheMut       sync.RWMutex
	sapCustomerMaterialDatumUpdateCache          = make(map[string]updateCache)
	sapCustomerMaterialDatumUpsertCacheMut       sync.RWMutex
	sapCustomerMaterialDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCustomerMaterialDatumAfterSelectHooks []SapCustomerMaterialDatumHook

var sapCustomerMaterialDatumBeforeInsertHooks []SapCustomerMaterialDatumHook
var sapCustomerMaterialDatumAfterInsertHooks []SapCustomerMaterialDatumHook

var sapCustomerMaterialDatumBeforeUpdateHooks []SapCustomerMaterialDatumHook
var sapCustomerMaterialDatumAfterUpdateHooks []SapCustomerMaterialDatumHook

var sapCustomerMaterialDatumBeforeDeleteHooks []SapCustomerMaterialDatumHook
var sapCustomerMaterialDatumAfterDeleteHooks []SapCustomerMaterialDatumHook

var sapCustomerMaterialDatumBeforeUpsertHooks []SapCustomerMaterialDatumHook
var sapCustomerMaterialDatumAfterUpsertHooks []SapCustomerMaterialDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCustomerMaterialDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCustomerMaterialDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCustomerMaterialDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCustomerMaterialDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCustomerMaterialDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCustomerMaterialDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCustomerMaterialDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCustomerMaterialDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCustomerMaterialDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerMaterialDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCustomerMaterialDatumHook registers your hook function for all future operations.
func AddSapCustomerMaterialDatumHook(hookPoint boil.HookPoint, sapCustomerMaterialDatumHook SapCustomerMaterialDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCustomerMaterialDatumAfterSelectHooks = append(sapCustomerMaterialDatumAfterSelectHooks, sapCustomerMaterialDatumHook)
	case boil.BeforeInsertHook:
		sapCustomerMaterialDatumBeforeInsertHooks = append(sapCustomerMaterialDatumBeforeInsertHooks, sapCustomerMaterialDatumHook)
	case boil.AfterInsertHook:
		sapCustomerMaterialDatumAfterInsertHooks = append(sapCustomerMaterialDatumAfterInsertHooks, sapCustomerMaterialDatumHook)
	case boil.BeforeUpdateHook:
		sapCustomerMaterialDatumBeforeUpdateHooks = append(sapCustomerMaterialDatumBeforeUpdateHooks, sapCustomerMaterialDatumHook)
	case boil.AfterUpdateHook:
		sapCustomerMaterialDatumAfterUpdateHooks = append(sapCustomerMaterialDatumAfterUpdateHooks, sapCustomerMaterialDatumHook)
	case boil.BeforeDeleteHook:
		sapCustomerMaterialDatumBeforeDeleteHooks = append(sapCustomerMaterialDatumBeforeDeleteHooks, sapCustomerMaterialDatumHook)
	case boil.AfterDeleteHook:
		sapCustomerMaterialDatumAfterDeleteHooks = append(sapCustomerMaterialDatumAfterDeleteHooks, sapCustomerMaterialDatumHook)
	case boil.BeforeUpsertHook:
		sapCustomerMaterialDatumBeforeUpsertHooks = append(sapCustomerMaterialDatumBeforeUpsertHooks, sapCustomerMaterialDatumHook)
	case boil.AfterUpsertHook:
		sapCustomerMaterialDatumAfterUpsertHooks = append(sapCustomerMaterialDatumAfterUpsertHooks, sapCustomerMaterialDatumHook)
	}
}

// One returns a single sapCustomerMaterialDatum record from the query.
func (q sapCustomerMaterialDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCustomerMaterialDatum, error) {
	o := &SapCustomerMaterialDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_customer_material_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCustomerMaterialDatum records from the query.
func (q sapCustomerMaterialDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCustomerMaterialDatumSlice, error) {
	var o []*SapCustomerMaterialDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCustomerMaterialDatum slice")
	}

	if len(sapCustomerMaterialDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCustomerMaterialDatum records in the query.
func (q sapCustomerMaterialDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_customer_material_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCustomerMaterialDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_customer_material_data exists")
	}

	return count > 0, nil
}

// SapCustomerMaterialData retrieves all the records using an executor.
func SapCustomerMaterialData(mods ...qm.QueryMod) sapCustomerMaterialDatumQuery {
	mods = append(mods, qm.From("`sap_customer_material_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_customer_material_data`.*"})
	}

	return sapCustomerMaterialDatumQuery{q}
}

// FindSapCustomerMaterialDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCustomerMaterialDatum(ctx context.Context, exec boil.ContextExecutor, customer string, salesOrganization string, distributionChannel string, material string, selectCols ...string) (*SapCustomerMaterialDatum, error) {
	sapCustomerMaterialDatumObj := &SapCustomerMaterialDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_customer_material_data` where `Customer`=? AND `SalesOrganization`=? AND `DistributionChannel`=? AND `Material`=?", sel,
	)

	q := queries.Raw(query, customer, salesOrganization, distributionChannel, material)

	err := q.Bind(ctx, exec, sapCustomerMaterialDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_customer_material_data")
	}

	if err = sapCustomerMaterialDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCustomerMaterialDatumObj, err
	}

	return sapCustomerMaterialDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCustomerMaterialDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_material_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerMaterialDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCustomerMaterialDatumInsertCacheMut.RLock()
	cache, cached := sapCustomerMaterialDatumInsertCache[key]
	sapCustomerMaterialDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCustomerMaterialDatumAllColumns,
			sapCustomerMaterialDatumColumnsWithDefault,
			sapCustomerMaterialDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_customer_material_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_customer_material_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_customer_material_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCustomerMaterialDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_customer_material_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Customer,
		o.SalesOrganization,
		o.DistributionChannel,
		o.Material,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_material_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerMaterialDatumInsertCacheMut.Lock()
		sapCustomerMaterialDatumInsertCache[key] = cache
		sapCustomerMaterialDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCustomerMaterialDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCustomerMaterialDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCustomerMaterialDatumUpdateCacheMut.RLock()
	cache, cached := sapCustomerMaterialDatumUpdateCache[key]
	sapCustomerMaterialDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCustomerMaterialDatumAllColumns,
			sapCustomerMaterialDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_customer_material_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_customer_material_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCustomerMaterialDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, append(wl, sapCustomerMaterialDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_customer_material_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_customer_material_data")
	}

	if !cached {
		sapCustomerMaterialDatumUpdateCacheMut.Lock()
		sapCustomerMaterialDatumUpdateCache[key] = cache
		sapCustomerMaterialDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCustomerMaterialDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_customer_material_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_customer_material_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCustomerMaterialDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerMaterialDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_customer_material_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerMaterialDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCustomerMaterialDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCustomerMaterialDatum")
	}
	return rowsAff, nil
}

var mySQLSapCustomerMaterialDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCustomerMaterialDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_material_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerMaterialDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCustomerMaterialDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCustomerMaterialDatumUpsertCacheMut.RLock()
	cache, cached := sapCustomerMaterialDatumUpsertCache[key]
	sapCustomerMaterialDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCustomerMaterialDatumAllColumns,
			sapCustomerMaterialDatumColumnsWithDefault,
			sapCustomerMaterialDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCustomerMaterialDatumAllColumns,
			sapCustomerMaterialDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_customer_material_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_customer_material_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_customer_material_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_customer_material_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCustomerMaterialDatumType, sapCustomerMaterialDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_customer_material_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_material_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerMaterialDatumUpsertCacheMut.Lock()
		sapCustomerMaterialDatumUpsertCache[key] = cache
		sapCustomerMaterialDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCustomerMaterialDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCustomerMaterialDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCustomerMaterialDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCustomerMaterialDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_customer_material_data` WHERE `Customer`=? AND `SalesOrganization`=? AND `DistributionChannel`=? AND `Material`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_customer_material_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_customer_material_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCustomerMaterialDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCustomerMaterialDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_customer_material_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_material_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCustomerMaterialDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCustomerMaterialDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerMaterialDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_customer_material_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerMaterialDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCustomerMaterialDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_material_data")
	}

	if len(sapCustomerMaterialDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCustomerMaterialDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCustomerMaterialDatum(ctx, exec, o.Customer, o.SalesOrganization, o.DistributionChannel, o.Material)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCustomerMaterialDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCustomerMaterialDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerMaterialDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_customer_material_data`.* FROM `sap_customer_material_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerMaterialDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCustomerMaterialDatumSlice")
	}

	*o = slice

	return nil
}

// SapCustomerMaterialDatumExists checks if the SapCustomerMaterialDatum row exists.
func SapCustomerMaterialDatumExists(ctx context.Context, exec boil.ContextExecutor, customer string, salesOrganization string, distributionChannel string, material string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_customer_material_data` where `Customer`=? AND `SalesOrganization`=? AND `DistributionChannel`=? AND `Material`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customer, salesOrganization, distributionChannel, material)
	}
	row := exec.QueryRowContext(ctx, sql, customer, salesOrganization, distributionChannel, material)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_customer_material_data exists")
	}

	return exists, nil
}
