// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceTaskListStrategyPackageDatum is an object representing the database table.
type SapMaintenanceTaskListStrategyPackageDatum struct {
	TaskListType                   string      `boil:"TaskListType" json:"TaskListType" toml:"TaskListType" yaml:"TaskListType"`
	TaskListGroup                  string      `boil:"TaskListGroup" json:"TaskListGroup" toml:"TaskListGroup" yaml:"TaskListGroup"`
	TaskListGroupCounter           string      `boil:"TaskListGroupCounter" json:"TaskListGroupCounter" toml:"TaskListGroupCounter" yaml:"TaskListGroupCounter"`
	TaskListSequence               string      `boil:"TaskListSequence" json:"TaskListSequence" toml:"TaskListSequence" yaml:"TaskListSequence"`
	TaskListOperationInternalID    null.String `boil:"TaskListOperationInternalID" json:"TaskListOperationInternalID,omitempty" toml:"TaskListOperationInternalID" yaml:"TaskListOperationInternalID,omitempty"`
	MaintenancePackage             null.String `boil:"MaintenancePackage" json:"MaintenancePackage,omitempty" toml:"MaintenancePackage" yaml:"MaintenancePackage,omitempty"`
	MaintPckgTskListOpAllocIntNmbr null.String `boil:"MaintPckgTskListOpAllocIntNmbr" json:"MaintPckgTskListOpAllocIntNmbr,omitempty" toml:"MaintPckgTskListOpAllocIntNmbr" yaml:"MaintPckgTskListOpAllocIntNmbr,omitempty"`
	MaintenancePackageText         null.String `boil:"MaintenancePackageText" json:"MaintenancePackageText,omitempty" toml:"MaintenancePackageText" yaml:"MaintenancePackageText,omitempty"`
	MaintenanceTaskListOperation   null.String `boil:"MaintenanceTaskListOperation" json:"MaintenanceTaskListOperation,omitempty" toml:"MaintenanceTaskListOperation" yaml:"MaintenanceTaskListOperation,omitempty"`
	OperationText                  null.String `boil:"OperationText" json:"OperationText,omitempty" toml:"OperationText" yaml:"OperationText,omitempty"`
	MaintTaskListSubOperation      null.String `boil:"MaintTaskListSubOperation" json:"MaintTaskListSubOperation,omitempty" toml:"MaintTaskListSubOperation" yaml:"MaintTaskListSubOperation,omitempty"`
	ChangeNumber                   null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`

	R *sapMaintenanceTaskListStrategyPackageDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceTaskListStrategyPackageDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceTaskListStrategyPackageDatumColumns = struct {
	TaskListType                   string
	TaskListGroup                  string
	TaskListGroupCounter           string
	TaskListSequence               string
	TaskListOperationInternalID    string
	MaintenancePackage             string
	MaintPckgTskListOpAllocIntNmbr string
	MaintenancePackageText         string
	MaintenanceTaskListOperation   string
	OperationText                  string
	MaintTaskListSubOperation      string
	ChangeNumber                   string
}{
	TaskListType:                   "TaskListType",
	TaskListGroup:                  "TaskListGroup",
	TaskListGroupCounter:           "TaskListGroupCounter",
	TaskListSequence:               "TaskListSequence",
	TaskListOperationInternalID:    "TaskListOperationInternalID",
	MaintenancePackage:             "MaintenancePackage",
	MaintPckgTskListOpAllocIntNmbr: "MaintPckgTskListOpAllocIntNmbr",
	MaintenancePackageText:         "MaintenancePackageText",
	MaintenanceTaskListOperation:   "MaintenanceTaskListOperation",
	OperationText:                  "OperationText",
	MaintTaskListSubOperation:      "MaintTaskListSubOperation",
	ChangeNumber:                   "ChangeNumber",
}

var SapMaintenanceTaskListStrategyPackageDatumTableColumns = struct {
	TaskListType                   string
	TaskListGroup                  string
	TaskListGroupCounter           string
	TaskListSequence               string
	TaskListOperationInternalID    string
	MaintenancePackage             string
	MaintPckgTskListOpAllocIntNmbr string
	MaintenancePackageText         string
	MaintenanceTaskListOperation   string
	OperationText                  string
	MaintTaskListSubOperation      string
	ChangeNumber                   string
}{
	TaskListType:                   "sap_maintenance_task_list_strategy_package_data.TaskListType",
	TaskListGroup:                  "sap_maintenance_task_list_strategy_package_data.TaskListGroup",
	TaskListGroupCounter:           "sap_maintenance_task_list_strategy_package_data.TaskListGroupCounter",
	TaskListSequence:               "sap_maintenance_task_list_strategy_package_data.TaskListSequence",
	TaskListOperationInternalID:    "sap_maintenance_task_list_strategy_package_data.TaskListOperationInternalID",
	MaintenancePackage:             "sap_maintenance_task_list_strategy_package_data.MaintenancePackage",
	MaintPckgTskListOpAllocIntNmbr: "sap_maintenance_task_list_strategy_package_data.MaintPckgTskListOpAllocIntNmbr",
	MaintenancePackageText:         "sap_maintenance_task_list_strategy_package_data.MaintenancePackageText",
	MaintenanceTaskListOperation:   "sap_maintenance_task_list_strategy_package_data.MaintenanceTaskListOperation",
	OperationText:                  "sap_maintenance_task_list_strategy_package_data.OperationText",
	MaintTaskListSubOperation:      "sap_maintenance_task_list_strategy_package_data.MaintTaskListSubOperation",
	ChangeNumber:                   "sap_maintenance_task_list_strategy_package_data.ChangeNumber",
}

// Generated where

var SapMaintenanceTaskListStrategyPackageDatumWhere = struct {
	TaskListType                   whereHelperstring
	TaskListGroup                  whereHelperstring
	TaskListGroupCounter           whereHelperstring
	TaskListSequence               whereHelperstring
	TaskListOperationInternalID    whereHelpernull_String
	MaintenancePackage             whereHelpernull_String
	MaintPckgTskListOpAllocIntNmbr whereHelpernull_String
	MaintenancePackageText         whereHelpernull_String
	MaintenanceTaskListOperation   whereHelpernull_String
	OperationText                  whereHelpernull_String
	MaintTaskListSubOperation      whereHelpernull_String
	ChangeNumber                   whereHelpernull_String
}{
	TaskListType:                   whereHelperstring{field: "`sap_maintenance_task_list_strategy_package_data`.`TaskListType`"},
	TaskListGroup:                  whereHelperstring{field: "`sap_maintenance_task_list_strategy_package_data`.`TaskListGroup`"},
	TaskListGroupCounter:           whereHelperstring{field: "`sap_maintenance_task_list_strategy_package_data`.`TaskListGroupCounter`"},
	TaskListSequence:               whereHelperstring{field: "`sap_maintenance_task_list_strategy_package_data`.`TaskListSequence`"},
	TaskListOperationInternalID:    whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`TaskListOperationInternalID`"},
	MaintenancePackage:             whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`MaintenancePackage`"},
	MaintPckgTskListOpAllocIntNmbr: whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`MaintPckgTskListOpAllocIntNmbr`"},
	MaintenancePackageText:         whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`MaintenancePackageText`"},
	MaintenanceTaskListOperation:   whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`MaintenanceTaskListOperation`"},
	OperationText:                  whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`OperationText`"},
	MaintTaskListSubOperation:      whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`MaintTaskListSubOperation`"},
	ChangeNumber:                   whereHelpernull_String{field: "`sap_maintenance_task_list_strategy_package_data`.`ChangeNumber`"},
}

// SapMaintenanceTaskListStrategyPackageDatumRels is where relationship names are stored.
var SapMaintenanceTaskListStrategyPackageDatumRels = struct {
}{}

// sapMaintenanceTaskListStrategyPackageDatumR is where relationships are stored.
type sapMaintenanceTaskListStrategyPackageDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceTaskListStrategyPackageDatumR) NewStruct() *sapMaintenanceTaskListStrategyPackageDatumR {
	return &sapMaintenanceTaskListStrategyPackageDatumR{}
}

// sapMaintenanceTaskListStrategyPackageDatumL is where Load methods for each relationship are stored.
type sapMaintenanceTaskListStrategyPackageDatumL struct{}

var (
	sapMaintenanceTaskListStrategyPackageDatumAllColumns            = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListSequence", "TaskListOperationInternalID", "MaintenancePackage", "MaintPckgTskListOpAllocIntNmbr", "MaintenancePackageText", "MaintenanceTaskListOperation", "OperationText", "MaintTaskListSubOperation", "ChangeNumber"}
	sapMaintenanceTaskListStrategyPackageDatumColumnsWithoutDefault = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListSequence", "TaskListOperationInternalID", "MaintenancePackage", "MaintPckgTskListOpAllocIntNmbr", "MaintenancePackageText", "MaintenanceTaskListOperation", "OperationText", "MaintTaskListSubOperation", "ChangeNumber"}
	sapMaintenanceTaskListStrategyPackageDatumColumnsWithDefault    = []string{}
	sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns     = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListSequence"}
	sapMaintenanceTaskListStrategyPackageDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceTaskListStrategyPackageDatumSlice is an alias for a slice of pointers to SapMaintenanceTaskListStrategyPackageDatum.
	// This should almost always be used instead of []SapMaintenanceTaskListStrategyPackageDatum.
	SapMaintenanceTaskListStrategyPackageDatumSlice []*SapMaintenanceTaskListStrategyPackageDatum
	// SapMaintenanceTaskListStrategyPackageDatumHook is the signature for custom SapMaintenanceTaskListStrategyPackageDatum hook methods
	SapMaintenanceTaskListStrategyPackageDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceTaskListStrategyPackageDatum) error

	sapMaintenanceTaskListStrategyPackageDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceTaskListStrategyPackageDatumType                 = reflect.TypeOf(&SapMaintenanceTaskListStrategyPackageDatum{})
	sapMaintenanceTaskListStrategyPackageDatumMapping              = queries.MakeStructMapping(sapMaintenanceTaskListStrategyPackageDatumType)
	sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns)
	sapMaintenanceTaskListStrategyPackageDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceTaskListStrategyPackageDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceTaskListStrategyPackageDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceTaskListStrategyPackageDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceTaskListStrategyPackageDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceTaskListStrategyPackageDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceTaskListStrategyPackageDatumAfterSelectHooks []SapMaintenanceTaskListStrategyPackageDatumHook

var sapMaintenanceTaskListStrategyPackageDatumBeforeInsertHooks []SapMaintenanceTaskListStrategyPackageDatumHook
var sapMaintenanceTaskListStrategyPackageDatumAfterInsertHooks []SapMaintenanceTaskListStrategyPackageDatumHook

var sapMaintenanceTaskListStrategyPackageDatumBeforeUpdateHooks []SapMaintenanceTaskListStrategyPackageDatumHook
var sapMaintenanceTaskListStrategyPackageDatumAfterUpdateHooks []SapMaintenanceTaskListStrategyPackageDatumHook

var sapMaintenanceTaskListStrategyPackageDatumBeforeDeleteHooks []SapMaintenanceTaskListStrategyPackageDatumHook
var sapMaintenanceTaskListStrategyPackageDatumAfterDeleteHooks []SapMaintenanceTaskListStrategyPackageDatumHook

var sapMaintenanceTaskListStrategyPackageDatumBeforeUpsertHooks []SapMaintenanceTaskListStrategyPackageDatumHook
var sapMaintenanceTaskListStrategyPackageDatumAfterUpsertHooks []SapMaintenanceTaskListStrategyPackageDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceTaskListStrategyPackageDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListStrategyPackageDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceTaskListStrategyPackageDatumHook registers your hook function for all future operations.
func AddSapMaintenanceTaskListStrategyPackageDatumHook(hookPoint boil.HookPoint, sapMaintenanceTaskListStrategyPackageDatumHook SapMaintenanceTaskListStrategyPackageDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceTaskListStrategyPackageDatumAfterSelectHooks = append(sapMaintenanceTaskListStrategyPackageDatumAfterSelectHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceTaskListStrategyPackageDatumBeforeInsertHooks = append(sapMaintenanceTaskListStrategyPackageDatumBeforeInsertHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceTaskListStrategyPackageDatumAfterInsertHooks = append(sapMaintenanceTaskListStrategyPackageDatumAfterInsertHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceTaskListStrategyPackageDatumBeforeUpdateHooks = append(sapMaintenanceTaskListStrategyPackageDatumBeforeUpdateHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceTaskListStrategyPackageDatumAfterUpdateHooks = append(sapMaintenanceTaskListStrategyPackageDatumAfterUpdateHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceTaskListStrategyPackageDatumBeforeDeleteHooks = append(sapMaintenanceTaskListStrategyPackageDatumBeforeDeleteHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceTaskListStrategyPackageDatumAfterDeleteHooks = append(sapMaintenanceTaskListStrategyPackageDatumAfterDeleteHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceTaskListStrategyPackageDatumBeforeUpsertHooks = append(sapMaintenanceTaskListStrategyPackageDatumBeforeUpsertHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceTaskListStrategyPackageDatumAfterUpsertHooks = append(sapMaintenanceTaskListStrategyPackageDatumAfterUpsertHooks, sapMaintenanceTaskListStrategyPackageDatumHook)
	}
}

// One returns a single sapMaintenanceTaskListStrategyPackageDatum record from the query.
func (q sapMaintenanceTaskListStrategyPackageDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceTaskListStrategyPackageDatum, error) {
	o := &SapMaintenanceTaskListStrategyPackageDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_task_list_strategy_package_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceTaskListStrategyPackageDatum records from the query.
func (q sapMaintenanceTaskListStrategyPackageDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceTaskListStrategyPackageDatumSlice, error) {
	var o []*SapMaintenanceTaskListStrategyPackageDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceTaskListStrategyPackageDatum slice")
	}

	if len(sapMaintenanceTaskListStrategyPackageDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceTaskListStrategyPackageDatum records in the query.
func (q sapMaintenanceTaskListStrategyPackageDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_task_list_strategy_package_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceTaskListStrategyPackageDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_task_list_strategy_package_data exists")
	}

	return count > 0, nil
}

// SapMaintenanceTaskListStrategyPackageData retrieves all the records using an executor.
func SapMaintenanceTaskListStrategyPackageData(mods ...qm.QueryMod) sapMaintenanceTaskListStrategyPackageDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_task_list_strategy_package_data`"))
	return sapMaintenanceTaskListStrategyPackageDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceTaskListStrategyPackageDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceTaskListStrategyPackageDatum(ctx context.Context, exec boil.ContextExecutor, taskListType string, taskListGroup string, taskListGroupCounter string, taskListSequence string, selectCols ...string) (*SapMaintenanceTaskListStrategyPackageDatum, error) {
	sapMaintenanceTaskListStrategyPackageDatumObj := &SapMaintenanceTaskListStrategyPackageDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_task_list_strategy_package_data` where `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListSequence`=?", sel,
	)

	q := queries.Raw(query, taskListType, taskListGroup, taskListGroupCounter, taskListSequence)

	err := q.Bind(ctx, exec, sapMaintenanceTaskListStrategyPackageDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_task_list_strategy_package_data")
	}

	if err = sapMaintenanceTaskListStrategyPackageDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceTaskListStrategyPackageDatumObj, err
	}

	return sapMaintenanceTaskListStrategyPackageDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceTaskListStrategyPackageDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_task_list_strategy_package_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceTaskListStrategyPackageDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceTaskListStrategyPackageDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListStrategyPackageDatumInsertCache[key]
	sapMaintenanceTaskListStrategyPackageDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceTaskListStrategyPackageDatumAllColumns,
			sapMaintenanceTaskListStrategyPackageDatumColumnsWithDefault,
			sapMaintenanceTaskListStrategyPackageDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_task_list_strategy_package_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_task_list_strategy_package_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_task_list_strategy_package_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_task_list_strategy_package_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TaskListType,
		o.TaskListGroup,
		o.TaskListGroupCounter,
		o.TaskListSequence,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_task_list_strategy_package_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceTaskListStrategyPackageDatumInsertCacheMut.Lock()
		sapMaintenanceTaskListStrategyPackageDatumInsertCache[key] = cache
		sapMaintenanceTaskListStrategyPackageDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceTaskListStrategyPackageDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceTaskListStrategyPackageDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceTaskListStrategyPackageDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListStrategyPackageDatumUpdateCache[key]
	sapMaintenanceTaskListStrategyPackageDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceTaskListStrategyPackageDatumAllColumns,
			sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_task_list_strategy_package_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_task_list_strategy_package_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, append(wl, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_task_list_strategy_package_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_task_list_strategy_package_data")
	}

	if !cached {
		sapMaintenanceTaskListStrategyPackageDatumUpdateCacheMut.Lock()
		sapMaintenanceTaskListStrategyPackageDatumUpdateCache[key] = cache
		sapMaintenanceTaskListStrategyPackageDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceTaskListStrategyPackageDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_task_list_strategy_package_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_task_list_strategy_package_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceTaskListStrategyPackageDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_task_list_strategy_package_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceTaskListStrategyPackageDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceTaskListStrategyPackageDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceTaskListStrategyPackageDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceTaskListStrategyPackageDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_task_list_strategy_package_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceTaskListStrategyPackageDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceTaskListStrategyPackageDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceTaskListStrategyPackageDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListStrategyPackageDatumUpsertCache[key]
	sapMaintenanceTaskListStrategyPackageDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceTaskListStrategyPackageDatumAllColumns,
			sapMaintenanceTaskListStrategyPackageDatumColumnsWithDefault,
			sapMaintenanceTaskListStrategyPackageDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceTaskListStrategyPackageDatumAllColumns,
			sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_task_list_strategy_package_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_task_list_strategy_package_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_task_list_strategy_package_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_task_list_strategy_package_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceTaskListStrategyPackageDatumType, sapMaintenanceTaskListStrategyPackageDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_task_list_strategy_package_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_task_list_strategy_package_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceTaskListStrategyPackageDatumUpsertCacheMut.Lock()
		sapMaintenanceTaskListStrategyPackageDatumUpsertCache[key] = cache
		sapMaintenanceTaskListStrategyPackageDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceTaskListStrategyPackageDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceTaskListStrategyPackageDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceTaskListStrategyPackageDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_task_list_strategy_package_data` WHERE `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListSequence`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_task_list_strategy_package_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_task_list_strategy_package_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceTaskListStrategyPackageDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceTaskListStrategyPackageDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_task_list_strategy_package_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_task_list_strategy_package_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceTaskListStrategyPackageDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceTaskListStrategyPackageDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_task_list_strategy_package_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceTaskListStrategyPackageDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_task_list_strategy_package_data")
	}

	if len(sapMaintenanceTaskListStrategyPackageDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceTaskListStrategyPackageDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceTaskListStrategyPackageDatum(ctx, exec, o.TaskListType, o.TaskListGroup, o.TaskListGroupCounter, o.TaskListSequence)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceTaskListStrategyPackageDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceTaskListStrategyPackageDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_task_list_strategy_package_data`.* FROM `sap_maintenance_task_list_strategy_package_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListStrategyPackageDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceTaskListStrategyPackageDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceTaskListStrategyPackageDatumExists checks if the SapMaintenanceTaskListStrategyPackageDatum row exists.
func SapMaintenanceTaskListStrategyPackageDatumExists(ctx context.Context, exec boil.ContextExecutor, taskListType string, taskListGroup string, taskListGroupCounter string, taskListSequence string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_task_list_strategy_package_data` where `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListSequence`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, taskListType, taskListGroup, taskListGroupCounter, taskListSequence)
	}
	row := exec.QueryRowContext(ctx, sql, taskListType, taskListGroup, taskListGroupCounter, taskListSequence)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_task_list_strategy_package_data exists")
	}

	return exists, nil
}
