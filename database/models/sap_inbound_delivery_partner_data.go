// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapInboundDeliveryPartnerDatum is an object representing the database table.
type SapInboundDeliveryPartnerDatum struct {
	SDDocument      string      `boil:"SDDocument" json:"SDDocument" toml:"SDDocument" yaml:"SDDocument"`
	SDDocumentItem  string      `boil:"SDDocumentItem" json:"SDDocumentItem" toml:"SDDocumentItem" yaml:"SDDocumentItem"`
	PartnerFunction string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	Customer        null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	Supplier        null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	AddressID       null.String `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	ContactPerson   null.String `boil:"ContactPerson" json:"ContactPerson,omitempty" toml:"ContactPerson" yaml:"ContactPerson,omitempty"`
	Personnel       null.String `boil:"Personnel" json:"Personnel,omitempty" toml:"Personnel" yaml:"Personnel,omitempty"`

	R *sapInboundDeliveryPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapInboundDeliveryPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapInboundDeliveryPartnerDatumColumns = struct {
	SDDocument      string
	SDDocumentItem  string
	PartnerFunction string
	Customer        string
	Supplier        string
	AddressID       string
	ContactPerson   string
	Personnel       string
}{
	SDDocument:      "SDDocument",
	SDDocumentItem:  "SDDocumentItem",
	PartnerFunction: "PartnerFunction",
	Customer:        "Customer",
	Supplier:        "Supplier",
	AddressID:       "AddressID",
	ContactPerson:   "ContactPerson",
	Personnel:       "Personnel",
}

var SapInboundDeliveryPartnerDatumTableColumns = struct {
	SDDocument      string
	SDDocumentItem  string
	PartnerFunction string
	Customer        string
	Supplier        string
	AddressID       string
	ContactPerson   string
	Personnel       string
}{
	SDDocument:      "sap_inbound_delivery_partner_data.SDDocument",
	SDDocumentItem:  "sap_inbound_delivery_partner_data.SDDocumentItem",
	PartnerFunction: "sap_inbound_delivery_partner_data.PartnerFunction",
	Customer:        "sap_inbound_delivery_partner_data.Customer",
	Supplier:        "sap_inbound_delivery_partner_data.Supplier",
	AddressID:       "sap_inbound_delivery_partner_data.AddressID",
	ContactPerson:   "sap_inbound_delivery_partner_data.ContactPerson",
	Personnel:       "sap_inbound_delivery_partner_data.Personnel",
}

// Generated where

var SapInboundDeliveryPartnerDatumWhere = struct {
	SDDocument      whereHelperstring
	SDDocumentItem  whereHelperstring
	PartnerFunction whereHelperstring
	Customer        whereHelpernull_String
	Supplier        whereHelpernull_String
	AddressID       whereHelpernull_String
	ContactPerson   whereHelpernull_String
	Personnel       whereHelpernull_String
}{
	SDDocument:      whereHelperstring{field: "`sap_inbound_delivery_partner_data`.`SDDocument`"},
	SDDocumentItem:  whereHelperstring{field: "`sap_inbound_delivery_partner_data`.`SDDocumentItem`"},
	PartnerFunction: whereHelperstring{field: "`sap_inbound_delivery_partner_data`.`PartnerFunction`"},
	Customer:        whereHelpernull_String{field: "`sap_inbound_delivery_partner_data`.`Customer`"},
	Supplier:        whereHelpernull_String{field: "`sap_inbound_delivery_partner_data`.`Supplier`"},
	AddressID:       whereHelpernull_String{field: "`sap_inbound_delivery_partner_data`.`AddressID`"},
	ContactPerson:   whereHelpernull_String{field: "`sap_inbound_delivery_partner_data`.`ContactPerson`"},
	Personnel:       whereHelpernull_String{field: "`sap_inbound_delivery_partner_data`.`Personnel`"},
}

// SapInboundDeliveryPartnerDatumRels is where relationship names are stored.
var SapInboundDeliveryPartnerDatumRels = struct {
	SDDocumentSapInboundDeliveryHeaderDatum string
}{
	SDDocumentSapInboundDeliveryHeaderDatum: "SDDocumentSapInboundDeliveryHeaderDatum",
}

// sapInboundDeliveryPartnerDatumR is where relationships are stored.
type sapInboundDeliveryPartnerDatumR struct {
	SDDocumentSapInboundDeliveryHeaderDatum *SapInboundDeliveryHeaderDatum `boil:"SDDocumentSapInboundDeliveryHeaderDatum" json:"SDDocumentSapInboundDeliveryHeaderDatum" toml:"SDDocumentSapInboundDeliveryHeaderDatum" yaml:"SDDocumentSapInboundDeliveryHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapInboundDeliveryPartnerDatumR) NewStruct() *sapInboundDeliveryPartnerDatumR {
	return &sapInboundDeliveryPartnerDatumR{}
}

// sapInboundDeliveryPartnerDatumL is where Load methods for each relationship are stored.
type sapInboundDeliveryPartnerDatumL struct{}

var (
	sapInboundDeliveryPartnerDatumAllColumns            = []string{"SDDocument", "SDDocumentItem", "PartnerFunction", "Customer", "Supplier", "AddressID", "ContactPerson", "Personnel"}
	sapInboundDeliveryPartnerDatumColumnsWithoutDefault = []string{"SDDocument", "SDDocumentItem", "PartnerFunction", "Customer", "Supplier", "AddressID", "ContactPerson", "Personnel"}
	sapInboundDeliveryPartnerDatumColumnsWithDefault    = []string{}
	sapInboundDeliveryPartnerDatumPrimaryKeyColumns     = []string{"SDDocument", "SDDocumentItem", "PartnerFunction"}
	sapInboundDeliveryPartnerDatumGeneratedColumns      = []string{}
)

type (
	// SapInboundDeliveryPartnerDatumSlice is an alias for a slice of pointers to SapInboundDeliveryPartnerDatum.
	// This should almost always be used instead of []SapInboundDeliveryPartnerDatum.
	SapInboundDeliveryPartnerDatumSlice []*SapInboundDeliveryPartnerDatum
	// SapInboundDeliveryPartnerDatumHook is the signature for custom SapInboundDeliveryPartnerDatum hook methods
	SapInboundDeliveryPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapInboundDeliveryPartnerDatum) error

	sapInboundDeliveryPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapInboundDeliveryPartnerDatumType                 = reflect.TypeOf(&SapInboundDeliveryPartnerDatum{})
	sapInboundDeliveryPartnerDatumMapping              = queries.MakeStructMapping(sapInboundDeliveryPartnerDatumType)
	sapInboundDeliveryPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, sapInboundDeliveryPartnerDatumPrimaryKeyColumns)
	sapInboundDeliveryPartnerDatumInsertCacheMut       sync.RWMutex
	sapInboundDeliveryPartnerDatumInsertCache          = make(map[string]insertCache)
	sapInboundDeliveryPartnerDatumUpdateCacheMut       sync.RWMutex
	sapInboundDeliveryPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapInboundDeliveryPartnerDatumUpsertCacheMut       sync.RWMutex
	sapInboundDeliveryPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapInboundDeliveryPartnerDatumAfterSelectHooks []SapInboundDeliveryPartnerDatumHook

var sapInboundDeliveryPartnerDatumBeforeInsertHooks []SapInboundDeliveryPartnerDatumHook
var sapInboundDeliveryPartnerDatumAfterInsertHooks []SapInboundDeliveryPartnerDatumHook

var sapInboundDeliveryPartnerDatumBeforeUpdateHooks []SapInboundDeliveryPartnerDatumHook
var sapInboundDeliveryPartnerDatumAfterUpdateHooks []SapInboundDeliveryPartnerDatumHook

var sapInboundDeliveryPartnerDatumBeforeDeleteHooks []SapInboundDeliveryPartnerDatumHook
var sapInboundDeliveryPartnerDatumAfterDeleteHooks []SapInboundDeliveryPartnerDatumHook

var sapInboundDeliveryPartnerDatumBeforeUpsertHooks []SapInboundDeliveryPartnerDatumHook
var sapInboundDeliveryPartnerDatumAfterUpsertHooks []SapInboundDeliveryPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapInboundDeliveryPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapInboundDeliveryPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapInboundDeliveryPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapInboundDeliveryPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapInboundDeliveryPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapInboundDeliveryPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapInboundDeliveryPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapInboundDeliveryPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapInboundDeliveryPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapInboundDeliveryPartnerDatumHook registers your hook function for all future operations.
func AddSapInboundDeliveryPartnerDatumHook(hookPoint boil.HookPoint, sapInboundDeliveryPartnerDatumHook SapInboundDeliveryPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapInboundDeliveryPartnerDatumAfterSelectHooks = append(sapInboundDeliveryPartnerDatumAfterSelectHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.BeforeInsertHook:
		sapInboundDeliveryPartnerDatumBeforeInsertHooks = append(sapInboundDeliveryPartnerDatumBeforeInsertHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.AfterInsertHook:
		sapInboundDeliveryPartnerDatumAfterInsertHooks = append(sapInboundDeliveryPartnerDatumAfterInsertHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapInboundDeliveryPartnerDatumBeforeUpdateHooks = append(sapInboundDeliveryPartnerDatumBeforeUpdateHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapInboundDeliveryPartnerDatumAfterUpdateHooks = append(sapInboundDeliveryPartnerDatumAfterUpdateHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapInboundDeliveryPartnerDatumBeforeDeleteHooks = append(sapInboundDeliveryPartnerDatumBeforeDeleteHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapInboundDeliveryPartnerDatumAfterDeleteHooks = append(sapInboundDeliveryPartnerDatumAfterDeleteHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapInboundDeliveryPartnerDatumBeforeUpsertHooks = append(sapInboundDeliveryPartnerDatumBeforeUpsertHooks, sapInboundDeliveryPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapInboundDeliveryPartnerDatumAfterUpsertHooks = append(sapInboundDeliveryPartnerDatumAfterUpsertHooks, sapInboundDeliveryPartnerDatumHook)
	}
}

// One returns a single sapInboundDeliveryPartnerDatum record from the query.
func (q sapInboundDeliveryPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapInboundDeliveryPartnerDatum, error) {
	o := &SapInboundDeliveryPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_inbound_delivery_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapInboundDeliveryPartnerDatum records from the query.
func (q sapInboundDeliveryPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapInboundDeliveryPartnerDatumSlice, error) {
	var o []*SapInboundDeliveryPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapInboundDeliveryPartnerDatum slice")
	}

	if len(sapInboundDeliveryPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapInboundDeliveryPartnerDatum records in the query.
func (q sapInboundDeliveryPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_inbound_delivery_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapInboundDeliveryPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_inbound_delivery_partner_data exists")
	}

	return count > 0, nil
}

// SDDocumentSapInboundDeliveryHeaderDatum pointed to by the foreign key.
func (o *SapInboundDeliveryPartnerDatum) SDDocumentSapInboundDeliveryHeaderDatum(mods ...qm.QueryMod) sapInboundDeliveryHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DeliveryDocument` = ?", o.SDDocument),
	}

	queryMods = append(queryMods, mods...)

	query := SapInboundDeliveryHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_inbound_delivery_header_data`")

	return query
}

// LoadSDDocumentSapInboundDeliveryHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapInboundDeliveryPartnerDatumL) LoadSDDocumentSapInboundDeliveryHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapInboundDeliveryPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapInboundDeliveryPartnerDatum
	var object *SapInboundDeliveryPartnerDatum

	if singular {
		object = maybeSapInboundDeliveryPartnerDatum.(*SapInboundDeliveryPartnerDatum)
	} else {
		slice = *maybeSapInboundDeliveryPartnerDatum.(*[]*SapInboundDeliveryPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapInboundDeliveryPartnerDatumR{}
		}
		args = append(args, object.SDDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapInboundDeliveryPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.SDDocument {
					continue Outer
				}
			}

			args = append(args, obj.SDDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_inbound_delivery_header_data`),
		qm.WhereIn(`sap_inbound_delivery_header_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapInboundDeliveryHeaderDatum")
	}

	var resultSlice []*SapInboundDeliveryHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapInboundDeliveryHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_inbound_delivery_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_inbound_delivery_header_data")
	}

	if len(sapInboundDeliveryPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SDDocumentSapInboundDeliveryHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapInboundDeliveryHeaderDatumR{}
		}
		foreign.R.SDDocumentSapInboundDeliveryPartnerData = append(foreign.R.SDDocumentSapInboundDeliveryPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SDDocument == foreign.DeliveryDocument {
				local.R.SDDocumentSapInboundDeliveryHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapInboundDeliveryHeaderDatumR{}
				}
				foreign.R.SDDocumentSapInboundDeliveryPartnerData = append(foreign.R.SDDocumentSapInboundDeliveryPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetSDDocumentSapInboundDeliveryHeaderDatum of the sapInboundDeliveryPartnerDatum to the related item.
// Sets o.R.SDDocumentSapInboundDeliveryHeaderDatum to related.
// Adds o to related.R.SDDocumentSapInboundDeliveryPartnerData.
func (o *SapInboundDeliveryPartnerDatum) SetSDDocumentSapInboundDeliveryHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapInboundDeliveryHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_inbound_delivery_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SDDocument"}),
		strmangle.WhereClause("`", "`", 0, sapInboundDeliveryPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DeliveryDocument, o.SDDocument, o.SDDocumentItem, o.PartnerFunction}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SDDocument = related.DeliveryDocument
	if o.R == nil {
		o.R = &sapInboundDeliveryPartnerDatumR{
			SDDocumentSapInboundDeliveryHeaderDatum: related,
		}
	} else {
		o.R.SDDocumentSapInboundDeliveryHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapInboundDeliveryHeaderDatumR{
			SDDocumentSapInboundDeliveryPartnerData: SapInboundDeliveryPartnerDatumSlice{o},
		}
	} else {
		related.R.SDDocumentSapInboundDeliveryPartnerData = append(related.R.SDDocumentSapInboundDeliveryPartnerData, o)
	}

	return nil
}

// SapInboundDeliveryPartnerData retrieves all the records using an executor.
func SapInboundDeliveryPartnerData(mods ...qm.QueryMod) sapInboundDeliveryPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_inbound_delivery_partner_data`"))
	return sapInboundDeliveryPartnerDatumQuery{NewQuery(mods...)}
}

// FindSapInboundDeliveryPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapInboundDeliveryPartnerDatum(ctx context.Context, exec boil.ContextExecutor, sDDocument string, sDDocumentItem string, partnerFunction string, selectCols ...string) (*SapInboundDeliveryPartnerDatum, error) {
	sapInboundDeliveryPartnerDatumObj := &SapInboundDeliveryPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_inbound_delivery_partner_data` where `SDDocument`=? AND `SDDocumentItem`=? AND `PartnerFunction`=?", sel,
	)

	q := queries.Raw(query, sDDocument, sDDocumentItem, partnerFunction)

	err := q.Bind(ctx, exec, sapInboundDeliveryPartnerDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_inbound_delivery_partner_data")
	}

	if err = sapInboundDeliveryPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapInboundDeliveryPartnerDatumObj, err
	}

	return sapInboundDeliveryPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapInboundDeliveryPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_inbound_delivery_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapInboundDeliveryPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapInboundDeliveryPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapInboundDeliveryPartnerDatumInsertCache[key]
	sapInboundDeliveryPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapInboundDeliveryPartnerDatumAllColumns,
			sapInboundDeliveryPartnerDatumColumnsWithDefault,
			sapInboundDeliveryPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_inbound_delivery_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_inbound_delivery_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_inbound_delivery_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapInboundDeliveryPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_inbound_delivery_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SDDocument,
		o.SDDocumentItem,
		o.PartnerFunction,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_inbound_delivery_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapInboundDeliveryPartnerDatumInsertCacheMut.Lock()
		sapInboundDeliveryPartnerDatumInsertCache[key] = cache
		sapInboundDeliveryPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapInboundDeliveryPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapInboundDeliveryPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapInboundDeliveryPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapInboundDeliveryPartnerDatumUpdateCache[key]
	sapInboundDeliveryPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapInboundDeliveryPartnerDatumAllColumns,
			sapInboundDeliveryPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_inbound_delivery_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_inbound_delivery_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapInboundDeliveryPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, append(wl, sapInboundDeliveryPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_inbound_delivery_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_inbound_delivery_partner_data")
	}

	if !cached {
		sapInboundDeliveryPartnerDatumUpdateCacheMut.Lock()
		sapInboundDeliveryPartnerDatumUpdateCache[key] = cache
		sapInboundDeliveryPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapInboundDeliveryPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_inbound_delivery_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_inbound_delivery_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapInboundDeliveryPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_inbound_delivery_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapInboundDeliveryPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapInboundDeliveryPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapInboundDeliveryPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapInboundDeliveryPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_inbound_delivery_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapInboundDeliveryPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapInboundDeliveryPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapInboundDeliveryPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapInboundDeliveryPartnerDatumUpsertCache[key]
	sapInboundDeliveryPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapInboundDeliveryPartnerDatumAllColumns,
			sapInboundDeliveryPartnerDatumColumnsWithDefault,
			sapInboundDeliveryPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapInboundDeliveryPartnerDatumAllColumns,
			sapInboundDeliveryPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_inbound_delivery_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_inbound_delivery_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_inbound_delivery_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_inbound_delivery_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapInboundDeliveryPartnerDatumType, sapInboundDeliveryPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_inbound_delivery_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_inbound_delivery_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapInboundDeliveryPartnerDatumUpsertCacheMut.Lock()
		sapInboundDeliveryPartnerDatumUpsertCache[key] = cache
		sapInboundDeliveryPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapInboundDeliveryPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapInboundDeliveryPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapInboundDeliveryPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapInboundDeliveryPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_inbound_delivery_partner_data` WHERE `SDDocument`=? AND `SDDocumentItem`=? AND `PartnerFunction`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_inbound_delivery_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_inbound_delivery_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapInboundDeliveryPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapInboundDeliveryPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_inbound_delivery_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_inbound_delivery_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapInboundDeliveryPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapInboundDeliveryPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_inbound_delivery_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapInboundDeliveryPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_inbound_delivery_partner_data")
	}

	if len(sapInboundDeliveryPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapInboundDeliveryPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapInboundDeliveryPartnerDatum(ctx, exec, o.SDDocument, o.SDDocumentItem, o.PartnerFunction)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapInboundDeliveryPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapInboundDeliveryPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_inbound_delivery_partner_data`.* FROM `sap_inbound_delivery_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapInboundDeliveryPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapInboundDeliveryPartnerDatumExists checks if the SapInboundDeliveryPartnerDatum row exists.
func SapInboundDeliveryPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, sDDocument string, sDDocumentItem string, partnerFunction string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_inbound_delivery_partner_data` where `SDDocument`=? AND `SDDocumentItem`=? AND `PartnerFunction`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sDDocument, sDDocumentItem, partnerFunction)
	}
	row := exec.QueryRowContext(ctx, sql, sDDocument, sDDocumentItem, partnerFunction)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_inbound_delivery_partner_data exists")
	}

	return exists, nil
}
