// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPlannedOrderHeaderDatum is an object representing the database table.
type SapPlannedOrderHeaderDatum struct {
	PlannedOrder                   string      `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderType               null.String `boil:"PlannedOrderType" json:"PlannedOrderType,omitempty" toml:"PlannedOrderType" yaml:"PlannedOrderType,omitempty"`
	PlannedOrderProfile            null.String `boil:"PlannedOrderProfile" json:"PlannedOrderProfile,omitempty" toml:"PlannedOrderProfile" yaml:"PlannedOrderProfile,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialName                   null.String `boil:"MaterialName" json:"MaterialName,omitempty" toml:"MaterialName" yaml:"MaterialName,omitempty"`
	ProductionPlant                null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	MRPPlant                       null.String `boil:"MRPPlant" json:"MRPPlant,omitempty" toml:"MRPPlant" yaml:"MRPPlant,omitempty"`
	MRPArea                        null.String `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	ProductionVersion              null.String `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	MaterialProcurementCategory    null.String `boil:"MaterialProcurementCategory" json:"MaterialProcurementCategory,omitempty" toml:"MaterialProcurementCategory" yaml:"MaterialProcurementCategory,omitempty"`
	MaterialProcurementType        null.String `boil:"MaterialProcurementType" json:"MaterialProcurementType,omitempty" toml:"MaterialProcurementType" yaml:"MaterialProcurementType,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	TotalQuantity                  null.String `boil:"TotalQuantity" json:"TotalQuantity,omitempty" toml:"TotalQuantity" yaml:"TotalQuantity,omitempty"`
	PlndOrderPlannedScrapQty       null.String `boil:"PlndOrderPlannedScrapQty" json:"PlndOrderPlannedScrapQty,omitempty" toml:"PlndOrderPlannedScrapQty" yaml:"PlndOrderPlannedScrapQty,omitempty"`
	GoodsReceiptQty                null.String `boil:"GoodsReceiptQty" json:"GoodsReceiptQty,omitempty" toml:"GoodsReceiptQty" yaml:"GoodsReceiptQty,omitempty"`
	IssuedQuantity                 null.String `boil:"IssuedQuantity" json:"IssuedQuantity,omitempty" toml:"IssuedQuantity" yaml:"IssuedQuantity,omitempty"`
	PlndOrderPlannedStartDate      null.String `boil:"PlndOrderPlannedStartDate" json:"PlndOrderPlannedStartDate,omitempty" toml:"PlndOrderPlannedStartDate" yaml:"PlndOrderPlannedStartDate,omitempty"`
	PlndOrderPlannedStartTime      null.String `boil:"PlndOrderPlannedStartTime" json:"PlndOrderPlannedStartTime,omitempty" toml:"PlndOrderPlannedStartTime" yaml:"PlndOrderPlannedStartTime,omitempty"`
	PlndOrderPlannedEndDate        null.String `boil:"PlndOrderPlannedEndDate" json:"PlndOrderPlannedEndDate,omitempty" toml:"PlndOrderPlannedEndDate" yaml:"PlndOrderPlannedEndDate,omitempty"`
	PlndOrderPlannedEndTime        null.String `boil:"PlndOrderPlannedEndTime" json:"PlndOrderPlannedEndTime,omitempty" toml:"PlndOrderPlannedEndTime" yaml:"PlndOrderPlannedEndTime,omitempty"`
	PlannedOrderOpeningDate        null.String `boil:"PlannedOrderOpeningDate" json:"PlannedOrderOpeningDate,omitempty" toml:"PlannedOrderOpeningDate" yaml:"PlannedOrderOpeningDate,omitempty"`
	PlannedOrderLastChangeDateTime null.String `boil:"PlannedOrderLastChangeDateTime" json:"PlannedOrderLastChangeDateTime,omitempty" toml:"PlannedOrderLastChangeDateTime" yaml:"PlannedOrderLastChangeDateTime,omitempty"`
	ProductionStartDate            null.String `boil:"ProductionStartDate" json:"ProductionStartDate,omitempty" toml:"ProductionStartDate" yaml:"ProductionStartDate,omitempty"`
	ProductionEndDate              null.String `boil:"ProductionEndDate" json:"ProductionEndDate,omitempty" toml:"ProductionEndDate" yaml:"ProductionEndDate,omitempty"`
	SalesOrder                     null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem                 null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	Customer                       null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	WBSElementInternalID           null.String `boil:"WBSElementInternalID" json:"WBSElementInternalID,omitempty" toml:"WBSElementInternalID" yaml:"WBSElementInternalID,omitempty"`
	WBSElementExternalID           null.String `boil:"WBSElementExternalID" json:"WBSElementExternalID,omitempty" toml:"WBSElementExternalID" yaml:"WBSElementExternalID,omitempty"`
	WBSDescription                 null.String `boil:"WBSDescription" json:"WBSDescription,omitempty" toml:"WBSDescription" yaml:"WBSDescription,omitempty"`
	AccountAssignmentCategory      null.String `boil:"AccountAssignmentCategory" json:"AccountAssignmentCategory,omitempty" toml:"AccountAssignmentCategory" yaml:"AccountAssignmentCategory,omitempty"`
	Reservation                    null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	PlannedOrderLongText           null.String `boil:"PlannedOrderLongText" json:"PlannedOrderLongText,omitempty" toml:"PlannedOrderLongText" yaml:"PlannedOrderLongText,omitempty"`
	MRPController                  null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionSupervisor           null.String `boil:"ProductionSupervisor" json:"ProductionSupervisor,omitempty" toml:"ProductionSupervisor" yaml:"ProductionSupervisor,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	PurchasingOrganization         null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	FixedSupplier                  null.String `boil:"FixedSupplier" json:"FixedSupplier,omitempty" toml:"FixedSupplier" yaml:"FixedSupplier,omitempty"`
	PurchasingDocument             null.String `boil:"PurchasingDocument" json:"PurchasingDocument,omitempty" toml:"PurchasingDocument" yaml:"PurchasingDocument,omitempty"`
	PurchasingDocumentItem         null.String `boil:"PurchasingDocumentItem" json:"PurchasingDocumentItem,omitempty" toml:"PurchasingDocumentItem" yaml:"PurchasingDocumentItem,omitempty"`
	SupplierName                   null.String `boil:"SupplierName" json:"SupplierName,omitempty" toml:"SupplierName" yaml:"SupplierName,omitempty"`
	PlannedOrderIsFirm             null.Bool   `boil:"PlannedOrderIsFirm" json:"PlannedOrderIsFirm,omitempty" toml:"PlannedOrderIsFirm" yaml:"PlannedOrderIsFirm,omitempty"`
	PlannedOrderIsConvertible      null.Bool   `boil:"PlannedOrderIsConvertible" json:"PlannedOrderIsConvertible,omitempty" toml:"PlannedOrderIsConvertible" yaml:"PlannedOrderIsConvertible,omitempty"`
	PlannedOrderBOMIsFixed         null.Bool   `boil:"PlannedOrderBOMIsFixed" json:"PlannedOrderBOMIsFixed,omitempty" toml:"PlannedOrderBOMIsFixed" yaml:"PlannedOrderBOMIsFixed,omitempty"`
	PlannedOrderCapacityIsDsptchd  null.Bool   `boil:"PlannedOrderCapacityIsDsptchd" json:"PlannedOrderCapacityIsDsptchd,omitempty" toml:"PlannedOrderCapacityIsDsptchd" yaml:"PlannedOrderCapacityIsDsptchd,omitempty"`
	CapacityRequirement            null.String `boil:"CapacityRequirement" json:"CapacityRequirement,omitempty" toml:"CapacityRequirement" yaml:"CapacityRequirement,omitempty"`
	BillOfOperationsVariant        null.String `boil:"BillOfOperationsVariant" json:"BillOfOperationsVariant,omitempty" toml:"BillOfOperationsVariant" yaml:"BillOfOperationsVariant,omitempty"`
	CapacityRequirementOrigin      null.String `boil:"CapacityRequirementOrigin" json:"CapacityRequirementOrigin,omitempty" toml:"CapacityRequirementOrigin" yaml:"CapacityRequirementOrigin,omitempty"`
	BillOfOperationsType           null.String `boil:"BillOfOperationsType" json:"BillOfOperationsType,omitempty" toml:"BillOfOperationsType" yaml:"BillOfOperationsType,omitempty"`
	BillOfOperationsGroup          null.String `boil:"BillOfOperationsGroup" json:"BillOfOperationsGroup,omitempty" toml:"BillOfOperationsGroup" yaml:"BillOfOperationsGroup,omitempty"`
	LastScheduledDate              null.String `boil:"LastScheduledDate" json:"LastScheduledDate,omitempty" toml:"LastScheduledDate" yaml:"LastScheduledDate,omitempty"`
	ScheduledBasicEndDate          null.String `boil:"ScheduledBasicEndDate" json:"ScheduledBasicEndDate,omitempty" toml:"ScheduledBasicEndDate" yaml:"ScheduledBasicEndDate,omitempty"`
	ScheduledBasicEndTime          null.String `boil:"ScheduledBasicEndTime" json:"ScheduledBasicEndTime,omitempty" toml:"ScheduledBasicEndTime" yaml:"ScheduledBasicEndTime,omitempty"`
	ScheduledBasicStartDate        null.String `boil:"ScheduledBasicStartDate" json:"ScheduledBasicStartDate,omitempty" toml:"ScheduledBasicStartDate" yaml:"ScheduledBasicStartDate,omitempty"`
	ScheduledBasicStartTime        null.String `boil:"ScheduledBasicStartTime" json:"ScheduledBasicStartTime,omitempty" toml:"ScheduledBasicStartTime" yaml:"ScheduledBasicStartTime,omitempty"`
	SchedulingType                 null.String `boil:"SchedulingType" json:"SchedulingType,omitempty" toml:"SchedulingType" yaml:"SchedulingType,omitempty"`

	R *sapPlannedOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPlannedOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPlannedOrderHeaderDatumColumns = struct {
	PlannedOrder                   string
	PlannedOrderType               string
	PlannedOrderProfile            string
	Material                       string
	MaterialName                   string
	ProductionPlant                string
	MRPPlant                       string
	MRPArea                        string
	ProductionVersion              string
	MaterialProcurementCategory    string
	MaterialProcurementType        string
	StorageLocation                string
	BaseUnit                       string
	TotalQuantity                  string
	PlndOrderPlannedScrapQty       string
	GoodsReceiptQty                string
	IssuedQuantity                 string
	PlndOrderPlannedStartDate      string
	PlndOrderPlannedStartTime      string
	PlndOrderPlannedEndDate        string
	PlndOrderPlannedEndTime        string
	PlannedOrderOpeningDate        string
	PlannedOrderLastChangeDateTime string
	ProductionStartDate            string
	ProductionEndDate              string
	SalesOrder                     string
	SalesOrderItem                 string
	Customer                       string
	WBSElementInternalID           string
	WBSElementExternalID           string
	WBSDescription                 string
	AccountAssignmentCategory      string
	Reservation                    string
	PlannedOrderLongText           string
	MRPController                  string
	ProductionSupervisor           string
	PurchasingGroup                string
	PurchasingOrganization         string
	FixedSupplier                  string
	PurchasingDocument             string
	PurchasingDocumentItem         string
	SupplierName                   string
	PlannedOrderIsFirm             string
	PlannedOrderIsConvertible      string
	PlannedOrderBOMIsFixed         string
	PlannedOrderCapacityIsDsptchd  string
	CapacityRequirement            string
	BillOfOperationsVariant        string
	CapacityRequirementOrigin      string
	BillOfOperationsType           string
	BillOfOperationsGroup          string
	LastScheduledDate              string
	ScheduledBasicEndDate          string
	ScheduledBasicEndTime          string
	ScheduledBasicStartDate        string
	ScheduledBasicStartTime        string
	SchedulingType                 string
}{
	PlannedOrder:                   "PlannedOrder",
	PlannedOrderType:               "PlannedOrderType",
	PlannedOrderProfile:            "PlannedOrderProfile",
	Material:                       "Material",
	MaterialName:                   "MaterialName",
	ProductionPlant:                "ProductionPlant",
	MRPPlant:                       "MRPPlant",
	MRPArea:                        "MRPArea",
	ProductionVersion:              "ProductionVersion",
	MaterialProcurementCategory:    "MaterialProcurementCategory",
	MaterialProcurementType:        "MaterialProcurementType",
	StorageLocation:                "StorageLocation",
	BaseUnit:                       "BaseUnit",
	TotalQuantity:                  "TotalQuantity",
	PlndOrderPlannedScrapQty:       "PlndOrderPlannedScrapQty",
	GoodsReceiptQty:                "GoodsReceiptQty",
	IssuedQuantity:                 "IssuedQuantity",
	PlndOrderPlannedStartDate:      "PlndOrderPlannedStartDate",
	PlndOrderPlannedStartTime:      "PlndOrderPlannedStartTime",
	PlndOrderPlannedEndDate:        "PlndOrderPlannedEndDate",
	PlndOrderPlannedEndTime:        "PlndOrderPlannedEndTime",
	PlannedOrderOpeningDate:        "PlannedOrderOpeningDate",
	PlannedOrderLastChangeDateTime: "PlannedOrderLastChangeDateTime",
	ProductionStartDate:            "ProductionStartDate",
	ProductionEndDate:              "ProductionEndDate",
	SalesOrder:                     "SalesOrder",
	SalesOrderItem:                 "SalesOrderItem",
	Customer:                       "Customer",
	WBSElementInternalID:           "WBSElementInternalID",
	WBSElementExternalID:           "WBSElementExternalID",
	WBSDescription:                 "WBSDescription",
	AccountAssignmentCategory:      "AccountAssignmentCategory",
	Reservation:                    "Reservation",
	PlannedOrderLongText:           "PlannedOrderLongText",
	MRPController:                  "MRPController",
	ProductionSupervisor:           "ProductionSupervisor",
	PurchasingGroup:                "PurchasingGroup",
	PurchasingOrganization:         "PurchasingOrganization",
	FixedSupplier:                  "FixedSupplier",
	PurchasingDocument:             "PurchasingDocument",
	PurchasingDocumentItem:         "PurchasingDocumentItem",
	SupplierName:                   "SupplierName",
	PlannedOrderIsFirm:             "PlannedOrderIsFirm",
	PlannedOrderIsConvertible:      "PlannedOrderIsConvertible",
	PlannedOrderBOMIsFixed:         "PlannedOrderBOMIsFixed",
	PlannedOrderCapacityIsDsptchd:  "PlannedOrderCapacityIsDsptchd",
	CapacityRequirement:            "CapacityRequirement",
	BillOfOperationsVariant:        "BillOfOperationsVariant",
	CapacityRequirementOrigin:      "CapacityRequirementOrigin",
	BillOfOperationsType:           "BillOfOperationsType",
	BillOfOperationsGroup:          "BillOfOperationsGroup",
	LastScheduledDate:              "LastScheduledDate",
	ScheduledBasicEndDate:          "ScheduledBasicEndDate",
	ScheduledBasicEndTime:          "ScheduledBasicEndTime",
	ScheduledBasicStartDate:        "ScheduledBasicStartDate",
	ScheduledBasicStartTime:        "ScheduledBasicStartTime",
	SchedulingType:                 "SchedulingType",
}

var SapPlannedOrderHeaderDatumTableColumns = struct {
	PlannedOrder                   string
	PlannedOrderType               string
	PlannedOrderProfile            string
	Material                       string
	MaterialName                   string
	ProductionPlant                string
	MRPPlant                       string
	MRPArea                        string
	ProductionVersion              string
	MaterialProcurementCategory    string
	MaterialProcurementType        string
	StorageLocation                string
	BaseUnit                       string
	TotalQuantity                  string
	PlndOrderPlannedScrapQty       string
	GoodsReceiptQty                string
	IssuedQuantity                 string
	PlndOrderPlannedStartDate      string
	PlndOrderPlannedStartTime      string
	PlndOrderPlannedEndDate        string
	PlndOrderPlannedEndTime        string
	PlannedOrderOpeningDate        string
	PlannedOrderLastChangeDateTime string
	ProductionStartDate            string
	ProductionEndDate              string
	SalesOrder                     string
	SalesOrderItem                 string
	Customer                       string
	WBSElementInternalID           string
	WBSElementExternalID           string
	WBSDescription                 string
	AccountAssignmentCategory      string
	Reservation                    string
	PlannedOrderLongText           string
	MRPController                  string
	ProductionSupervisor           string
	PurchasingGroup                string
	PurchasingOrganization         string
	FixedSupplier                  string
	PurchasingDocument             string
	PurchasingDocumentItem         string
	SupplierName                   string
	PlannedOrderIsFirm             string
	PlannedOrderIsConvertible      string
	PlannedOrderBOMIsFixed         string
	PlannedOrderCapacityIsDsptchd  string
	CapacityRequirement            string
	BillOfOperationsVariant        string
	CapacityRequirementOrigin      string
	BillOfOperationsType           string
	BillOfOperationsGroup          string
	LastScheduledDate              string
	ScheduledBasicEndDate          string
	ScheduledBasicEndTime          string
	ScheduledBasicStartDate        string
	ScheduledBasicStartTime        string
	SchedulingType                 string
}{
	PlannedOrder:                   "sap_planned_order_header_data.PlannedOrder",
	PlannedOrderType:               "sap_planned_order_header_data.PlannedOrderType",
	PlannedOrderProfile:            "sap_planned_order_header_data.PlannedOrderProfile",
	Material:                       "sap_planned_order_header_data.Material",
	MaterialName:                   "sap_planned_order_header_data.MaterialName",
	ProductionPlant:                "sap_planned_order_header_data.ProductionPlant",
	MRPPlant:                       "sap_planned_order_header_data.MRPPlant",
	MRPArea:                        "sap_planned_order_header_data.MRPArea",
	ProductionVersion:              "sap_planned_order_header_data.ProductionVersion",
	MaterialProcurementCategory:    "sap_planned_order_header_data.MaterialProcurementCategory",
	MaterialProcurementType:        "sap_planned_order_header_data.MaterialProcurementType",
	StorageLocation:                "sap_planned_order_header_data.StorageLocation",
	BaseUnit:                       "sap_planned_order_header_data.BaseUnit",
	TotalQuantity:                  "sap_planned_order_header_data.TotalQuantity",
	PlndOrderPlannedScrapQty:       "sap_planned_order_header_data.PlndOrderPlannedScrapQty",
	GoodsReceiptQty:                "sap_planned_order_header_data.GoodsReceiptQty",
	IssuedQuantity:                 "sap_planned_order_header_data.IssuedQuantity",
	PlndOrderPlannedStartDate:      "sap_planned_order_header_data.PlndOrderPlannedStartDate",
	PlndOrderPlannedStartTime:      "sap_planned_order_header_data.PlndOrderPlannedStartTime",
	PlndOrderPlannedEndDate:        "sap_planned_order_header_data.PlndOrderPlannedEndDate",
	PlndOrderPlannedEndTime:        "sap_planned_order_header_data.PlndOrderPlannedEndTime",
	PlannedOrderOpeningDate:        "sap_planned_order_header_data.PlannedOrderOpeningDate",
	PlannedOrderLastChangeDateTime: "sap_planned_order_header_data.PlannedOrderLastChangeDateTime",
	ProductionStartDate:            "sap_planned_order_header_data.ProductionStartDate",
	ProductionEndDate:              "sap_planned_order_header_data.ProductionEndDate",
	SalesOrder:                     "sap_planned_order_header_data.SalesOrder",
	SalesOrderItem:                 "sap_planned_order_header_data.SalesOrderItem",
	Customer:                       "sap_planned_order_header_data.Customer",
	WBSElementInternalID:           "sap_planned_order_header_data.WBSElementInternalID",
	WBSElementExternalID:           "sap_planned_order_header_data.WBSElementExternalID",
	WBSDescription:                 "sap_planned_order_header_data.WBSDescription",
	AccountAssignmentCategory:      "sap_planned_order_header_data.AccountAssignmentCategory",
	Reservation:                    "sap_planned_order_header_data.Reservation",
	PlannedOrderLongText:           "sap_planned_order_header_data.PlannedOrderLongText",
	MRPController:                  "sap_planned_order_header_data.MRPController",
	ProductionSupervisor:           "sap_planned_order_header_data.ProductionSupervisor",
	PurchasingGroup:                "sap_planned_order_header_data.PurchasingGroup",
	PurchasingOrganization:         "sap_planned_order_header_data.PurchasingOrganization",
	FixedSupplier:                  "sap_planned_order_header_data.FixedSupplier",
	PurchasingDocument:             "sap_planned_order_header_data.PurchasingDocument",
	PurchasingDocumentItem:         "sap_planned_order_header_data.PurchasingDocumentItem",
	SupplierName:                   "sap_planned_order_header_data.SupplierName",
	PlannedOrderIsFirm:             "sap_planned_order_header_data.PlannedOrderIsFirm",
	PlannedOrderIsConvertible:      "sap_planned_order_header_data.PlannedOrderIsConvertible",
	PlannedOrderBOMIsFixed:         "sap_planned_order_header_data.PlannedOrderBOMIsFixed",
	PlannedOrderCapacityIsDsptchd:  "sap_planned_order_header_data.PlannedOrderCapacityIsDsptchd",
	CapacityRequirement:            "sap_planned_order_header_data.CapacityRequirement",
	BillOfOperationsVariant:        "sap_planned_order_header_data.BillOfOperationsVariant",
	CapacityRequirementOrigin:      "sap_planned_order_header_data.CapacityRequirementOrigin",
	BillOfOperationsType:           "sap_planned_order_header_data.BillOfOperationsType",
	BillOfOperationsGroup:          "sap_planned_order_header_data.BillOfOperationsGroup",
	LastScheduledDate:              "sap_planned_order_header_data.LastScheduledDate",
	ScheduledBasicEndDate:          "sap_planned_order_header_data.ScheduledBasicEndDate",
	ScheduledBasicEndTime:          "sap_planned_order_header_data.ScheduledBasicEndTime",
	ScheduledBasicStartDate:        "sap_planned_order_header_data.ScheduledBasicStartDate",
	ScheduledBasicStartTime:        "sap_planned_order_header_data.ScheduledBasicStartTime",
	SchedulingType:                 "sap_planned_order_header_data.SchedulingType",
}

// Generated where

var SapPlannedOrderHeaderDatumWhere = struct {
	PlannedOrder                   whereHelperstring
	PlannedOrderType               whereHelpernull_String
	PlannedOrderProfile            whereHelpernull_String
	Material                       whereHelpernull_String
	MaterialName                   whereHelpernull_String
	ProductionPlant                whereHelpernull_String
	MRPPlant                       whereHelpernull_String
	MRPArea                        whereHelpernull_String
	ProductionVersion              whereHelpernull_String
	MaterialProcurementCategory    whereHelpernull_String
	MaterialProcurementType        whereHelpernull_String
	StorageLocation                whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	TotalQuantity                  whereHelpernull_String
	PlndOrderPlannedScrapQty       whereHelpernull_String
	GoodsReceiptQty                whereHelpernull_String
	IssuedQuantity                 whereHelpernull_String
	PlndOrderPlannedStartDate      whereHelpernull_String
	PlndOrderPlannedStartTime      whereHelpernull_String
	PlndOrderPlannedEndDate        whereHelpernull_String
	PlndOrderPlannedEndTime        whereHelpernull_String
	PlannedOrderOpeningDate        whereHelpernull_String
	PlannedOrderLastChangeDateTime whereHelpernull_String
	ProductionStartDate            whereHelpernull_String
	ProductionEndDate              whereHelpernull_String
	SalesOrder                     whereHelpernull_String
	SalesOrderItem                 whereHelpernull_String
	Customer                       whereHelpernull_String
	WBSElementInternalID           whereHelpernull_String
	WBSElementExternalID           whereHelpernull_String
	WBSDescription                 whereHelpernull_String
	AccountAssignmentCategory      whereHelpernull_String
	Reservation                    whereHelpernull_String
	PlannedOrderLongText           whereHelpernull_String
	MRPController                  whereHelpernull_String
	ProductionSupervisor           whereHelpernull_String
	PurchasingGroup                whereHelpernull_String
	PurchasingOrganization         whereHelpernull_String
	FixedSupplier                  whereHelpernull_String
	PurchasingDocument             whereHelpernull_String
	PurchasingDocumentItem         whereHelpernull_String
	SupplierName                   whereHelpernull_String
	PlannedOrderIsFirm             whereHelpernull_Bool
	PlannedOrderIsConvertible      whereHelpernull_Bool
	PlannedOrderBOMIsFixed         whereHelpernull_Bool
	PlannedOrderCapacityIsDsptchd  whereHelpernull_Bool
	CapacityRequirement            whereHelpernull_String
	BillOfOperationsVariant        whereHelpernull_String
	CapacityRequirementOrigin      whereHelpernull_String
	BillOfOperationsType           whereHelpernull_String
	BillOfOperationsGroup          whereHelpernull_String
	LastScheduledDate              whereHelpernull_String
	ScheduledBasicEndDate          whereHelpernull_String
	ScheduledBasicEndTime          whereHelpernull_String
	ScheduledBasicStartDate        whereHelpernull_String
	ScheduledBasicStartTime        whereHelpernull_String
	SchedulingType                 whereHelpernull_String
}{
	PlannedOrder:                   whereHelperstring{field: "`sap_planned_order_header_data`.`PlannedOrder`"},
	PlannedOrderType:               whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlannedOrderType`"},
	PlannedOrderProfile:            whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlannedOrderProfile`"},
	Material:                       whereHelpernull_String{field: "`sap_planned_order_header_data`.`Material`"},
	MaterialName:                   whereHelpernull_String{field: "`sap_planned_order_header_data`.`MaterialName`"},
	ProductionPlant:                whereHelpernull_String{field: "`sap_planned_order_header_data`.`ProductionPlant`"},
	MRPPlant:                       whereHelpernull_String{field: "`sap_planned_order_header_data`.`MRPPlant`"},
	MRPArea:                        whereHelpernull_String{field: "`sap_planned_order_header_data`.`MRPArea`"},
	ProductionVersion:              whereHelpernull_String{field: "`sap_planned_order_header_data`.`ProductionVersion`"},
	MaterialProcurementCategory:    whereHelpernull_String{field: "`sap_planned_order_header_data`.`MaterialProcurementCategory`"},
	MaterialProcurementType:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`MaterialProcurementType`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_planned_order_header_data`.`StorageLocation`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_planned_order_header_data`.`BaseUnit`"},
	TotalQuantity:                  whereHelpernull_String{field: "`sap_planned_order_header_data`.`TotalQuantity`"},
	PlndOrderPlannedScrapQty:       whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlndOrderPlannedScrapQty`"},
	GoodsReceiptQty:                whereHelpernull_String{field: "`sap_planned_order_header_data`.`GoodsReceiptQty`"},
	IssuedQuantity:                 whereHelpernull_String{field: "`sap_planned_order_header_data`.`IssuedQuantity`"},
	PlndOrderPlannedStartDate:      whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlndOrderPlannedStartDate`"},
	PlndOrderPlannedStartTime:      whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlndOrderPlannedStartTime`"},
	PlndOrderPlannedEndDate:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlndOrderPlannedEndDate`"},
	PlndOrderPlannedEndTime:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlndOrderPlannedEndTime`"},
	PlannedOrderOpeningDate:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlannedOrderOpeningDate`"},
	PlannedOrderLastChangeDateTime: whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlannedOrderLastChangeDateTime`"},
	ProductionStartDate:            whereHelpernull_String{field: "`sap_planned_order_header_data`.`ProductionStartDate`"},
	ProductionEndDate:              whereHelpernull_String{field: "`sap_planned_order_header_data`.`ProductionEndDate`"},
	SalesOrder:                     whereHelpernull_String{field: "`sap_planned_order_header_data`.`SalesOrder`"},
	SalesOrderItem:                 whereHelpernull_String{field: "`sap_planned_order_header_data`.`SalesOrderItem`"},
	Customer:                       whereHelpernull_String{field: "`sap_planned_order_header_data`.`Customer`"},
	WBSElementInternalID:           whereHelpernull_String{field: "`sap_planned_order_header_data`.`WBSElementInternalID`"},
	WBSElementExternalID:           whereHelpernull_String{field: "`sap_planned_order_header_data`.`WBSElementExternalID`"},
	WBSDescription:                 whereHelpernull_String{field: "`sap_planned_order_header_data`.`WBSDescription`"},
	AccountAssignmentCategory:      whereHelpernull_String{field: "`sap_planned_order_header_data`.`AccountAssignmentCategory`"},
	Reservation:                    whereHelpernull_String{field: "`sap_planned_order_header_data`.`Reservation`"},
	PlannedOrderLongText:           whereHelpernull_String{field: "`sap_planned_order_header_data`.`PlannedOrderLongText`"},
	MRPController:                  whereHelpernull_String{field: "`sap_planned_order_header_data`.`MRPController`"},
	ProductionSupervisor:           whereHelpernull_String{field: "`sap_planned_order_header_data`.`ProductionSupervisor`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_planned_order_header_data`.`PurchasingGroup`"},
	PurchasingOrganization:         whereHelpernull_String{field: "`sap_planned_order_header_data`.`PurchasingOrganization`"},
	FixedSupplier:                  whereHelpernull_String{field: "`sap_planned_order_header_data`.`FixedSupplier`"},
	PurchasingDocument:             whereHelpernull_String{field: "`sap_planned_order_header_data`.`PurchasingDocument`"},
	PurchasingDocumentItem:         whereHelpernull_String{field: "`sap_planned_order_header_data`.`PurchasingDocumentItem`"},
	SupplierName:                   whereHelpernull_String{field: "`sap_planned_order_header_data`.`SupplierName`"},
	PlannedOrderIsFirm:             whereHelpernull_Bool{field: "`sap_planned_order_header_data`.`PlannedOrderIsFirm`"},
	PlannedOrderIsConvertible:      whereHelpernull_Bool{field: "`sap_planned_order_header_data`.`PlannedOrderIsConvertible`"},
	PlannedOrderBOMIsFixed:         whereHelpernull_Bool{field: "`sap_planned_order_header_data`.`PlannedOrderBOMIsFixed`"},
	PlannedOrderCapacityIsDsptchd:  whereHelpernull_Bool{field: "`sap_planned_order_header_data`.`PlannedOrderCapacityIsDsptchd`"},
	CapacityRequirement:            whereHelpernull_String{field: "`sap_planned_order_header_data`.`CapacityRequirement`"},
	BillOfOperationsVariant:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`BillOfOperationsVariant`"},
	CapacityRequirementOrigin:      whereHelpernull_String{field: "`sap_planned_order_header_data`.`CapacityRequirementOrigin`"},
	BillOfOperationsType:           whereHelpernull_String{field: "`sap_planned_order_header_data`.`BillOfOperationsType`"},
	BillOfOperationsGroup:          whereHelpernull_String{field: "`sap_planned_order_header_data`.`BillOfOperationsGroup`"},
	LastScheduledDate:              whereHelpernull_String{field: "`sap_planned_order_header_data`.`LastScheduledDate`"},
	ScheduledBasicEndDate:          whereHelpernull_String{field: "`sap_planned_order_header_data`.`ScheduledBasicEndDate`"},
	ScheduledBasicEndTime:          whereHelpernull_String{field: "`sap_planned_order_header_data`.`ScheduledBasicEndTime`"},
	ScheduledBasicStartDate:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`ScheduledBasicStartDate`"},
	ScheduledBasicStartTime:        whereHelpernull_String{field: "`sap_planned_order_header_data`.`ScheduledBasicStartTime`"},
	SchedulingType:                 whereHelpernull_String{field: "`sap_planned_order_header_data`.`SchedulingType`"},
}

// SapPlannedOrderHeaderDatumRels is where relationship names are stored.
var SapPlannedOrderHeaderDatumRels = struct {
	PlannedOrderSapPlannedOrderComponentDatum string
}{
	PlannedOrderSapPlannedOrderComponentDatum: "PlannedOrderSapPlannedOrderComponentDatum",
}

// sapPlannedOrderHeaderDatumR is where relationships are stored.
type sapPlannedOrderHeaderDatumR struct {
	PlannedOrderSapPlannedOrderComponentDatum *SapPlannedOrderComponentDatum `boil:"PlannedOrderSapPlannedOrderComponentDatum" json:"PlannedOrderSapPlannedOrderComponentDatum" toml:"PlannedOrderSapPlannedOrderComponentDatum" yaml:"PlannedOrderSapPlannedOrderComponentDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPlannedOrderHeaderDatumR) NewStruct() *sapPlannedOrderHeaderDatumR {
	return &sapPlannedOrderHeaderDatumR{}
}

// sapPlannedOrderHeaderDatumL is where Load methods for each relationship are stored.
type sapPlannedOrderHeaderDatumL struct{}

var (
	sapPlannedOrderHeaderDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderType", "PlannedOrderProfile", "Material", "MaterialName", "ProductionPlant", "MRPPlant", "MRPArea", "ProductionVersion", "MaterialProcurementCategory", "MaterialProcurementType", "StorageLocation", "BaseUnit", "TotalQuantity", "PlndOrderPlannedScrapQty", "GoodsReceiptQty", "IssuedQuantity", "PlndOrderPlannedStartDate", "PlndOrderPlannedStartTime", "PlndOrderPlannedEndDate", "PlndOrderPlannedEndTime", "PlannedOrderOpeningDate", "PlannedOrderLastChangeDateTime", "ProductionStartDate", "ProductionEndDate", "SalesOrder", "SalesOrderItem", "Customer", "WBSElementInternalID", "WBSElementExternalID", "WBSDescription", "AccountAssignmentCategory", "Reservation", "PlannedOrderLongText", "MRPController", "ProductionSupervisor", "PurchasingGroup", "PurchasingOrganization", "FixedSupplier", "PurchasingDocument", "PurchasingDocumentItem", "SupplierName", "PlannedOrderIsFirm", "PlannedOrderIsConvertible", "PlannedOrderBOMIsFixed", "PlannedOrderCapacityIsDsptchd", "CapacityRequirement", "BillOfOperationsVariant", "CapacityRequirementOrigin", "BillOfOperationsType", "BillOfOperationsGroup", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType"}
	sapPlannedOrderHeaderDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderType", "PlannedOrderProfile", "Material", "MaterialName", "ProductionPlant", "MRPPlant", "MRPArea", "ProductionVersion", "MaterialProcurementCategory", "MaterialProcurementType", "StorageLocation", "BaseUnit", "TotalQuantity", "PlndOrderPlannedScrapQty", "GoodsReceiptQty", "IssuedQuantity", "PlndOrderPlannedStartDate", "PlndOrderPlannedStartTime", "PlndOrderPlannedEndDate", "PlndOrderPlannedEndTime", "PlannedOrderOpeningDate", "PlannedOrderLastChangeDateTime", "ProductionStartDate", "ProductionEndDate", "SalesOrder", "SalesOrderItem", "Customer", "WBSElementInternalID", "WBSElementExternalID", "WBSDescription", "AccountAssignmentCategory", "Reservation", "PlannedOrderLongText", "MRPController", "ProductionSupervisor", "PurchasingGroup", "PurchasingOrganization", "FixedSupplier", "PurchasingDocument", "PurchasingDocumentItem", "SupplierName", "PlannedOrderIsFirm", "PlannedOrderIsConvertible", "PlannedOrderBOMIsFixed", "PlannedOrderCapacityIsDsptchd", "CapacityRequirement", "BillOfOperationsVariant", "CapacityRequirementOrigin", "BillOfOperationsType", "BillOfOperationsGroup", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType"}
	sapPlannedOrderHeaderDatumColumnsWithDefault    = []string{}
	sapPlannedOrderHeaderDatumPrimaryKeyColumns     = []string{"PlannedOrder"}
	sapPlannedOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapPlannedOrderHeaderDatumSlice is an alias for a slice of pointers to SapPlannedOrderHeaderDatum.
	// This should almost always be used instead of []SapPlannedOrderHeaderDatum.
	SapPlannedOrderHeaderDatumSlice []*SapPlannedOrderHeaderDatum
	// SapPlannedOrderHeaderDatumHook is the signature for custom SapPlannedOrderHeaderDatum hook methods
	SapPlannedOrderHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapPlannedOrderHeaderDatum) error

	sapPlannedOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPlannedOrderHeaderDatumType                 = reflect.TypeOf(&SapPlannedOrderHeaderDatum{})
	sapPlannedOrderHeaderDatumMapping              = queries.MakeStructMapping(sapPlannedOrderHeaderDatumType)
	sapPlannedOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, sapPlannedOrderHeaderDatumPrimaryKeyColumns)
	sapPlannedOrderHeaderDatumInsertCacheMut       sync.RWMutex
	sapPlannedOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	sapPlannedOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	sapPlannedOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapPlannedOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	sapPlannedOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPlannedOrderHeaderDatumAfterSelectHooks []SapPlannedOrderHeaderDatumHook

var sapPlannedOrderHeaderDatumBeforeInsertHooks []SapPlannedOrderHeaderDatumHook
var sapPlannedOrderHeaderDatumAfterInsertHooks []SapPlannedOrderHeaderDatumHook

var sapPlannedOrderHeaderDatumBeforeUpdateHooks []SapPlannedOrderHeaderDatumHook
var sapPlannedOrderHeaderDatumAfterUpdateHooks []SapPlannedOrderHeaderDatumHook

var sapPlannedOrderHeaderDatumBeforeDeleteHooks []SapPlannedOrderHeaderDatumHook
var sapPlannedOrderHeaderDatumAfterDeleteHooks []SapPlannedOrderHeaderDatumHook

var sapPlannedOrderHeaderDatumBeforeUpsertHooks []SapPlannedOrderHeaderDatumHook
var sapPlannedOrderHeaderDatumAfterUpsertHooks []SapPlannedOrderHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPlannedOrderHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPlannedOrderHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPlannedOrderHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPlannedOrderHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPlannedOrderHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPlannedOrderHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPlannedOrderHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPlannedOrderHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPlannedOrderHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPlannedOrderHeaderDatumHook registers your hook function for all future operations.
func AddSapPlannedOrderHeaderDatumHook(hookPoint boil.HookPoint, sapPlannedOrderHeaderDatumHook SapPlannedOrderHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPlannedOrderHeaderDatumAfterSelectHooks = append(sapPlannedOrderHeaderDatumAfterSelectHooks, sapPlannedOrderHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapPlannedOrderHeaderDatumBeforeInsertHooks = append(sapPlannedOrderHeaderDatumBeforeInsertHooks, sapPlannedOrderHeaderDatumHook)
	case boil.AfterInsertHook:
		sapPlannedOrderHeaderDatumAfterInsertHooks = append(sapPlannedOrderHeaderDatumAfterInsertHooks, sapPlannedOrderHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapPlannedOrderHeaderDatumBeforeUpdateHooks = append(sapPlannedOrderHeaderDatumBeforeUpdateHooks, sapPlannedOrderHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapPlannedOrderHeaderDatumAfterUpdateHooks = append(sapPlannedOrderHeaderDatumAfterUpdateHooks, sapPlannedOrderHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapPlannedOrderHeaderDatumBeforeDeleteHooks = append(sapPlannedOrderHeaderDatumBeforeDeleteHooks, sapPlannedOrderHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapPlannedOrderHeaderDatumAfterDeleteHooks = append(sapPlannedOrderHeaderDatumAfterDeleteHooks, sapPlannedOrderHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapPlannedOrderHeaderDatumBeforeUpsertHooks = append(sapPlannedOrderHeaderDatumBeforeUpsertHooks, sapPlannedOrderHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapPlannedOrderHeaderDatumAfterUpsertHooks = append(sapPlannedOrderHeaderDatumAfterUpsertHooks, sapPlannedOrderHeaderDatumHook)
	}
}

// One returns a single sapPlannedOrderHeaderDatum record from the query.
func (q sapPlannedOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPlannedOrderHeaderDatum, error) {
	o := &SapPlannedOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_planned_order_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPlannedOrderHeaderDatum records from the query.
func (q sapPlannedOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPlannedOrderHeaderDatumSlice, error) {
	var o []*SapPlannedOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPlannedOrderHeaderDatum slice")
	}

	if len(sapPlannedOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPlannedOrderHeaderDatum records in the query.
func (q sapPlannedOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_planned_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPlannedOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_planned_order_header_data exists")
	}

	return count > 0, nil
}

// PlannedOrderSapPlannedOrderComponentDatum pointed to by the foreign key.
func (o *SapPlannedOrderHeaderDatum) PlannedOrderSapPlannedOrderComponentDatum(mods ...qm.QueryMod) sapPlannedOrderComponentDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapPlannedOrderComponentData(queryMods...)
	queries.SetFrom(query.Query, "`sap_planned_order_component_data`")

	return query
}

// LoadPlannedOrderSapPlannedOrderComponentDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapPlannedOrderHeaderDatumL) LoadPlannedOrderSapPlannedOrderComponentDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPlannedOrderHeaderDatum
	var object *SapPlannedOrderHeaderDatum

	if singular {
		object = maybeSapPlannedOrderHeaderDatum.(*SapPlannedOrderHeaderDatum)
	} else {
		slice = *maybeSapPlannedOrderHeaderDatum.(*[]*SapPlannedOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_planned_order_component_data`),
		qm.WhereIn(`sap_planned_order_component_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPlannedOrderComponentDatum")
	}

	var resultSlice []*SapPlannedOrderComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPlannedOrderComponentDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_planned_order_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_planned_order_component_data")
	}

	if len(sapPlannedOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderSapPlannedOrderComponentDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPlannedOrderComponentDatumR{}
		}
		foreign.R.PlannedOrderSapPlannedOrderHeaderDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderSapPlannedOrderComponentDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPlannedOrderComponentDatumR{}
				}
				foreign.R.PlannedOrderSapPlannedOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// SetPlannedOrderSapPlannedOrderComponentDatum of the sapPlannedOrderHeaderDatum to the related item.
// Sets o.R.PlannedOrderSapPlannedOrderComponentDatum to related.
// Adds o to related.R.PlannedOrderSapPlannedOrderHeaderDatum.
func (o *SapPlannedOrderHeaderDatum) SetPlannedOrderSapPlannedOrderComponentDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPlannedOrderComponentDatum) error {
	var err error

	if insert {
		related.PlannedOrder = o.PlannedOrder

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_planned_order_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
			strmangle.WhereClause("`", "`", 0, sapPlannedOrderComponentDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.PlannedOrder, related.PlannedOrder}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.PlannedOrder = o.PlannedOrder

	}

	if o.R == nil {
		o.R = &sapPlannedOrderHeaderDatumR{
			PlannedOrderSapPlannedOrderComponentDatum: related,
		}
	} else {
		o.R.PlannedOrderSapPlannedOrderComponentDatum = related
	}

	if related.R == nil {
		related.R = &sapPlannedOrderComponentDatumR{
			PlannedOrderSapPlannedOrderHeaderDatum: o,
		}
	} else {
		related.R.PlannedOrderSapPlannedOrderHeaderDatum = o
	}
	return nil
}

// SapPlannedOrderHeaderData retrieves all the records using an executor.
func SapPlannedOrderHeaderData(mods ...qm.QueryMod) sapPlannedOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_planned_order_header_data`"))
	return sapPlannedOrderHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapPlannedOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPlannedOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder string, selectCols ...string) (*SapPlannedOrderHeaderDatum, error) {
	sapPlannedOrderHeaderDatumObj := &SapPlannedOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_planned_order_header_data` where `PlannedOrder`=?", sel,
	)

	q := queries.Raw(query, plannedOrder)

	err := q.Bind(ctx, exec, sapPlannedOrderHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_planned_order_header_data")
	}

	if err = sapPlannedOrderHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPlannedOrderHeaderDatumObj, err
	}

	return sapPlannedOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPlannedOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_order_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPlannedOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapPlannedOrderHeaderDatumInsertCache[key]
	sapPlannedOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPlannedOrderHeaderDatumAllColumns,
			sapPlannedOrderHeaderDatumColumnsWithDefault,
			sapPlannedOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_planned_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_planned_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_planned_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPlannedOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_planned_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedOrderHeaderDatumInsertCacheMut.Lock()
		sapPlannedOrderHeaderDatumInsertCache[key] = cache
		sapPlannedOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPlannedOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPlannedOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPlannedOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapPlannedOrderHeaderDatumUpdateCache[key]
	sapPlannedOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPlannedOrderHeaderDatumAllColumns,
			sapPlannedOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_planned_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_planned_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPlannedOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, append(wl, sapPlannedOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_planned_order_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_planned_order_header_data")
	}

	if !cached {
		sapPlannedOrderHeaderDatumUpdateCacheMut.Lock()
		sapPlannedOrderHeaderDatumUpdateCache[key] = cache
		sapPlannedOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPlannedOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_planned_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_planned_order_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPlannedOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPlannedOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPlannedOrderHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapPlannedOrderHeaderDatumUniqueColumns = []string{
	"PlannedOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPlannedOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_order_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPlannedOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPlannedOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapPlannedOrderHeaderDatumUpsertCache[key]
	sapPlannedOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPlannedOrderHeaderDatumAllColumns,
			sapPlannedOrderHeaderDatumColumnsWithDefault,
			sapPlannedOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPlannedOrderHeaderDatumAllColumns,
			sapPlannedOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_planned_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_planned_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_planned_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_planned_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPlannedOrderHeaderDatumType, sapPlannedOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_planned_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedOrderHeaderDatumUpsertCacheMut.Lock()
		sapPlannedOrderHeaderDatumUpsertCache[key] = cache
		sapPlannedOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPlannedOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPlannedOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPlannedOrderHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPlannedOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_planned_order_header_data` WHERE `PlannedOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_planned_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_planned_order_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPlannedOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPlannedOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_planned_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_order_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPlannedOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPlannedOrderHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_planned_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPlannedOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_order_header_data")
	}

	if len(sapPlannedOrderHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPlannedOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPlannedOrderHeaderDatum(ctx, exec, o.PlannedOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPlannedOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPlannedOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_planned_order_header_data`.* FROM `sap_planned_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPlannedOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapPlannedOrderHeaderDatumExists checks if the SapPlannedOrderHeaderDatum row exists.
func SapPlannedOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_planned_order_header_data` where `PlannedOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_planned_order_header_data exists")
	}

	return exists, nil
}
