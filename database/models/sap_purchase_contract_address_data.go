// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseContractAddressDatum is an object representing the database table.
type SapPurchaseContractAddressDatum struct {
	PurchaseContract       string      `boil:"PurchaseContract" json:"PurchaseContract" toml:"PurchaseContract" yaml:"PurchaseContract"`
	PurchaseContractItem   string      `boil:"PurchaseContractItem" json:"PurchaseContractItem" toml:"PurchaseContractItem" yaml:"PurchaseContractItem"`
	AddressID              null.String `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	CityName               null.String `boil:"CityName" json:"CityName,omitempty" toml:"CityName" yaml:"CityName,omitempty"`
	PostalCode             null.String `boil:"PostalCode" json:"PostalCode,omitempty" toml:"PostalCode" yaml:"PostalCode,omitempty"`
	StreetName             null.String `boil:"StreetName" json:"StreetName,omitempty" toml:"StreetName" yaml:"StreetName,omitempty"`
	Country                null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	CorrespondenceLanguage null.String `boil:"CorrespondenceLanguage" json:"CorrespondenceLanguage,omitempty" toml:"CorrespondenceLanguage" yaml:"CorrespondenceLanguage,omitempty"`
	Region                 null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	PhoneNumber            null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	FaxNumber              null.String `boil:"FaxNumber" json:"FaxNumber,omitempty" toml:"FaxNumber" yaml:"FaxNumber,omitempty"`

	R *sapPurchaseContractAddressDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseContractAddressDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseContractAddressDatumColumns = struct {
	PurchaseContract       string
	PurchaseContractItem   string
	AddressID              string
	CityName               string
	PostalCode             string
	StreetName             string
	Country                string
	CorrespondenceLanguage string
	Region                 string
	PhoneNumber            string
	FaxNumber              string
}{
	PurchaseContract:       "PurchaseContract",
	PurchaseContractItem:   "PurchaseContractItem",
	AddressID:              "AddressID",
	CityName:               "CityName",
	PostalCode:             "PostalCode",
	StreetName:             "StreetName",
	Country:                "Country",
	CorrespondenceLanguage: "CorrespondenceLanguage",
	Region:                 "Region",
	PhoneNumber:            "PhoneNumber",
	FaxNumber:              "FaxNumber",
}

var SapPurchaseContractAddressDatumTableColumns = struct {
	PurchaseContract       string
	PurchaseContractItem   string
	AddressID              string
	CityName               string
	PostalCode             string
	StreetName             string
	Country                string
	CorrespondenceLanguage string
	Region                 string
	PhoneNumber            string
	FaxNumber              string
}{
	PurchaseContract:       "sap_purchase_contract_address_data.PurchaseContract",
	PurchaseContractItem:   "sap_purchase_contract_address_data.PurchaseContractItem",
	AddressID:              "sap_purchase_contract_address_data.AddressID",
	CityName:               "sap_purchase_contract_address_data.CityName",
	PostalCode:             "sap_purchase_contract_address_data.PostalCode",
	StreetName:             "sap_purchase_contract_address_data.StreetName",
	Country:                "sap_purchase_contract_address_data.Country",
	CorrespondenceLanguage: "sap_purchase_contract_address_data.CorrespondenceLanguage",
	Region:                 "sap_purchase_contract_address_data.Region",
	PhoneNumber:            "sap_purchase_contract_address_data.PhoneNumber",
	FaxNumber:              "sap_purchase_contract_address_data.FaxNumber",
}

// Generated where

var SapPurchaseContractAddressDatumWhere = struct {
	PurchaseContract       whereHelperstring
	PurchaseContractItem   whereHelperstring
	AddressID              whereHelpernull_String
	CityName               whereHelpernull_String
	PostalCode             whereHelpernull_String
	StreetName             whereHelpernull_String
	Country                whereHelpernull_String
	CorrespondenceLanguage whereHelpernull_String
	Region                 whereHelpernull_String
	PhoneNumber            whereHelpernull_String
	FaxNumber              whereHelpernull_String
}{
	PurchaseContract:       whereHelperstring{field: "`sap_purchase_contract_address_data`.`PurchaseContract`"},
	PurchaseContractItem:   whereHelperstring{field: "`sap_purchase_contract_address_data`.`PurchaseContractItem`"},
	AddressID:              whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`AddressID`"},
	CityName:               whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`CityName`"},
	PostalCode:             whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`PostalCode`"},
	StreetName:             whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`StreetName`"},
	Country:                whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`Country`"},
	CorrespondenceLanguage: whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`CorrespondenceLanguage`"},
	Region:                 whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`Region`"},
	PhoneNumber:            whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`PhoneNumber`"},
	FaxNumber:              whereHelpernull_String{field: "`sap_purchase_contract_address_data`.`FaxNumber`"},
}

// SapPurchaseContractAddressDatumRels is where relationship names are stored.
var SapPurchaseContractAddressDatumRels = struct {
	PurchaseContractSapPurchaseContractHeaderDatum string
}{
	PurchaseContractSapPurchaseContractHeaderDatum: "PurchaseContractSapPurchaseContractHeaderDatum",
}

// sapPurchaseContractAddressDatumR is where relationships are stored.
type sapPurchaseContractAddressDatumR struct {
	PurchaseContractSapPurchaseContractHeaderDatum *SapPurchaseContractHeaderDatum `boil:"PurchaseContractSapPurchaseContractHeaderDatum" json:"PurchaseContractSapPurchaseContractHeaderDatum" toml:"PurchaseContractSapPurchaseContractHeaderDatum" yaml:"PurchaseContractSapPurchaseContractHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseContractAddressDatumR) NewStruct() *sapPurchaseContractAddressDatumR {
	return &sapPurchaseContractAddressDatumR{}
}

// sapPurchaseContractAddressDatumL is where Load methods for each relationship are stored.
type sapPurchaseContractAddressDatumL struct{}

var (
	sapPurchaseContractAddressDatumAllColumns            = []string{"PurchaseContract", "PurchaseContractItem", "AddressID", "CityName", "PostalCode", "StreetName", "Country", "CorrespondenceLanguage", "Region", "PhoneNumber", "FaxNumber"}
	sapPurchaseContractAddressDatumColumnsWithoutDefault = []string{"PurchaseContract", "PurchaseContractItem", "AddressID", "CityName", "PostalCode", "StreetName", "Country", "CorrespondenceLanguage", "Region", "PhoneNumber", "FaxNumber"}
	sapPurchaseContractAddressDatumColumnsWithDefault    = []string{}
	sapPurchaseContractAddressDatumPrimaryKeyColumns     = []string{"PurchaseContract", "PurchaseContractItem"}
)

type (
	// SapPurchaseContractAddressDatumSlice is an alias for a slice of pointers to SapPurchaseContractAddressDatum.
	// This should almost always be used instead of []SapPurchaseContractAddressDatum.
	SapPurchaseContractAddressDatumSlice []*SapPurchaseContractAddressDatum
	// SapPurchaseContractAddressDatumHook is the signature for custom SapPurchaseContractAddressDatum hook methods
	SapPurchaseContractAddressDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseContractAddressDatum) error

	sapPurchaseContractAddressDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseContractAddressDatumType                 = reflect.TypeOf(&SapPurchaseContractAddressDatum{})
	sapPurchaseContractAddressDatumMapping              = queries.MakeStructMapping(sapPurchaseContractAddressDatumType)
	sapPurchaseContractAddressDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, sapPurchaseContractAddressDatumPrimaryKeyColumns)
	sapPurchaseContractAddressDatumInsertCacheMut       sync.RWMutex
	sapPurchaseContractAddressDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseContractAddressDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseContractAddressDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseContractAddressDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseContractAddressDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseContractAddressDatumBeforeInsertHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumBeforeUpdateHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumBeforeDeleteHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumBeforeUpsertHooks []SapPurchaseContractAddressDatumHook

var sapPurchaseContractAddressDatumAfterInsertHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumAfterSelectHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumAfterUpdateHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumAfterDeleteHooks []SapPurchaseContractAddressDatumHook
var sapPurchaseContractAddressDatumAfterUpsertHooks []SapPurchaseContractAddressDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseContractAddressDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseContractAddressDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseContractAddressDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseContractAddressDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseContractAddressDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseContractAddressDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseContractAddressDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseContractAddressDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseContractAddressDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractAddressDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseContractAddressDatumHook registers your hook function for all future operations.
func AddSapPurchaseContractAddressDatumHook(hookPoint boil.HookPoint, sapPurchaseContractAddressDatumHook SapPurchaseContractAddressDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapPurchaseContractAddressDatumBeforeInsertHooks = append(sapPurchaseContractAddressDatumBeforeInsertHooks, sapPurchaseContractAddressDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseContractAddressDatumBeforeUpdateHooks = append(sapPurchaseContractAddressDatumBeforeUpdateHooks, sapPurchaseContractAddressDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseContractAddressDatumBeforeDeleteHooks = append(sapPurchaseContractAddressDatumBeforeDeleteHooks, sapPurchaseContractAddressDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseContractAddressDatumBeforeUpsertHooks = append(sapPurchaseContractAddressDatumBeforeUpsertHooks, sapPurchaseContractAddressDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseContractAddressDatumAfterInsertHooks = append(sapPurchaseContractAddressDatumAfterInsertHooks, sapPurchaseContractAddressDatumHook)
	case boil.AfterSelectHook:
		sapPurchaseContractAddressDatumAfterSelectHooks = append(sapPurchaseContractAddressDatumAfterSelectHooks, sapPurchaseContractAddressDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseContractAddressDatumAfterUpdateHooks = append(sapPurchaseContractAddressDatumAfterUpdateHooks, sapPurchaseContractAddressDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseContractAddressDatumAfterDeleteHooks = append(sapPurchaseContractAddressDatumAfterDeleteHooks, sapPurchaseContractAddressDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseContractAddressDatumAfterUpsertHooks = append(sapPurchaseContractAddressDatumAfterUpsertHooks, sapPurchaseContractAddressDatumHook)
	}
}

// One returns a single sapPurchaseContractAddressDatum record from the query.
func (q sapPurchaseContractAddressDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseContractAddressDatum, error) {
	o := &SapPurchaseContractAddressDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_contract_address_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseContractAddressDatum records from the query.
func (q sapPurchaseContractAddressDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseContractAddressDatumSlice, error) {
	var o []*SapPurchaseContractAddressDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseContractAddressDatum slice")
	}

	if len(sapPurchaseContractAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseContractAddressDatum records in the query.
func (q sapPurchaseContractAddressDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_contract_address_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseContractAddressDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_contract_address_data exists")
	}

	return count > 0, nil
}

// PurchaseContractSapPurchaseContractHeaderDatum pointed to by the foreign key.
func (o *SapPurchaseContractAddressDatum) PurchaseContractSapPurchaseContractHeaderDatum(mods ...qm.QueryMod) sapPurchaseContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseContract` = ?", o.PurchaseContract),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseContractHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_contract_header_data`")

	return query
}

// LoadPurchaseContractSapPurchaseContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseContractAddressDatumL) LoadPurchaseContractSapPurchaseContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseContractAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseContractAddressDatum
	var object *SapPurchaseContractAddressDatum

	if singular {
		object = maybeSapPurchaseContractAddressDatum.(*SapPurchaseContractAddressDatum)
	} else {
		slice = *maybeSapPurchaseContractAddressDatum.(*[]*SapPurchaseContractAddressDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseContractAddressDatumR{}
		}
		args = append(args, object.PurchaseContract)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseContractAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseContract {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseContract)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_contract_header_data`),
		qm.WhereIn(`sap_purchase_contract_header_data.PurchaseContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseContractHeaderDatum")
	}

	var resultSlice []*SapPurchaseContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_contract_header_data")
	}

	if len(sapPurchaseContractAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseContractSapPurchaseContractHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseContractHeaderDatumR{}
		}
		foreign.R.PurchaseContractSapPurchaseContractAddressData = append(foreign.R.PurchaseContractSapPurchaseContractAddressData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseContract == foreign.PurchaseContract {
				local.R.PurchaseContractSapPurchaseContractHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseContractHeaderDatumR{}
				}
				foreign.R.PurchaseContractSapPurchaseContractAddressData = append(foreign.R.PurchaseContractSapPurchaseContractAddressData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseContractSapPurchaseContractHeaderDatum of the sapPurchaseContractAddressDatum to the related item.
// Sets o.R.PurchaseContractSapPurchaseContractHeaderDatum to related.
// Adds o to related.R.PurchaseContractSapPurchaseContractAddressData.
func (o *SapPurchaseContractAddressDatum) SetPurchaseContractSapPurchaseContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_contract_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseContract"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseContractAddressDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseContract, o.PurchaseContract, o.PurchaseContractItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseContract = related.PurchaseContract
	if o.R == nil {
		o.R = &sapPurchaseContractAddressDatumR{
			PurchaseContractSapPurchaseContractHeaderDatum: related,
		}
	} else {
		o.R.PurchaseContractSapPurchaseContractHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchaseContractHeaderDatumR{
			PurchaseContractSapPurchaseContractAddressData: SapPurchaseContractAddressDatumSlice{o},
		}
	} else {
		related.R.PurchaseContractSapPurchaseContractAddressData = append(related.R.PurchaseContractSapPurchaseContractAddressData, o)
	}

	return nil
}

// SapPurchaseContractAddressData retrieves all the records using an executor.
func SapPurchaseContractAddressData(mods ...qm.QueryMod) sapPurchaseContractAddressDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_contract_address_data`"))
	return sapPurchaseContractAddressDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseContractAddressDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseContractAddressDatum(ctx context.Context, exec boil.ContextExecutor, purchaseContract string, purchaseContractItem string, selectCols ...string) (*SapPurchaseContractAddressDatum, error) {
	sapPurchaseContractAddressDatumObj := &SapPurchaseContractAddressDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_contract_address_data` where `PurchaseContract`=? AND `PurchaseContractItem`=?", sel,
	)

	q := queries.Raw(query, purchaseContract, purchaseContractItem)

	err := q.Bind(ctx, exec, sapPurchaseContractAddressDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_contract_address_data")
	}

	if err = sapPurchaseContractAddressDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseContractAddressDatumObj, err
	}

	return sapPurchaseContractAddressDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseContractAddressDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_contract_address_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseContractAddressDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseContractAddressDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseContractAddressDatumInsertCache[key]
	sapPurchaseContractAddressDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseContractAddressDatumAllColumns,
			sapPurchaseContractAddressDatumColumnsWithDefault,
			sapPurchaseContractAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_contract_address_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_contract_address_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_contract_address_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseContractAddressDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_contract_address_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseContract,
		o.PurchaseContractItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_contract_address_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseContractAddressDatumInsertCacheMut.Lock()
		sapPurchaseContractAddressDatumInsertCache[key] = cache
		sapPurchaseContractAddressDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseContractAddressDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseContractAddressDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseContractAddressDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseContractAddressDatumUpdateCache[key]
	sapPurchaseContractAddressDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseContractAddressDatumAllColumns,
			sapPurchaseContractAddressDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_contract_address_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_contract_address_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseContractAddressDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, append(wl, sapPurchaseContractAddressDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_contract_address_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_contract_address_data")
	}

	if !cached {
		sapPurchaseContractAddressDatumUpdateCacheMut.Lock()
		sapPurchaseContractAddressDatumUpdateCache[key] = cache
		sapPurchaseContractAddressDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseContractAddressDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_contract_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_contract_address_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseContractAddressDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_contract_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractAddressDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseContractAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseContractAddressDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseContractAddressDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseContractAddressDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_contract_address_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseContractAddressDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseContractAddressDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseContractAddressDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseContractAddressDatumUpsertCache[key]
	sapPurchaseContractAddressDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseContractAddressDatumAllColumns,
			sapPurchaseContractAddressDatumColumnsWithDefault,
			sapPurchaseContractAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapPurchaseContractAddressDatumAllColumns,
			sapPurchaseContractAddressDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_contract_address_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_contract_address_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_contract_address_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_contract_address_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseContractAddressDatumType, sapPurchaseContractAddressDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_contract_address_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_contract_address_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseContractAddressDatumUpsertCacheMut.Lock()
		sapPurchaseContractAddressDatumUpsertCache[key] = cache
		sapPurchaseContractAddressDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseContractAddressDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseContractAddressDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseContractAddressDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseContractAddressDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_contract_address_data` WHERE `PurchaseContract`=? AND `PurchaseContractItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_contract_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_contract_address_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseContractAddressDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseContractAddressDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_contract_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_contract_address_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseContractAddressDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseContractAddressDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_contract_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractAddressDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseContractAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_contract_address_data")
	}

	if len(sapPurchaseContractAddressDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseContractAddressDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseContractAddressDatum(ctx, exec, o.PurchaseContract, o.PurchaseContractItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseContractAddressDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseContractAddressDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_contract_address_data`.* FROM `sap_purchase_contract_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractAddressDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseContractAddressDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseContractAddressDatumExists checks if the SapPurchaseContractAddressDatum row exists.
func SapPurchaseContractAddressDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseContract string, purchaseContractItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_contract_address_data` where `PurchaseContract`=? AND `PurchaseContractItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseContract, purchaseContractItem)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseContract, purchaseContractItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_contract_address_data exists")
	}

	return exists, nil
}
