// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterWorkSchedulingDatum is an object representing the database table.
type SapProductMasterWorkSchedulingDatum struct {
	Product                       string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                         string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	ProductionInvtryManagedLoc    null.String `boil:"ProductionInvtryManagedLoc" json:"ProductionInvtryManagedLoc,omitempty" toml:"ProductionInvtryManagedLoc" yaml:"ProductionInvtryManagedLoc,omitempty"`
	ProductProcessingTime         null.Int    `boil:"ProductProcessingTime" json:"ProductProcessingTime,omitempty" toml:"ProductProcessingTime" yaml:"ProductProcessingTime,omitempty"`
	ProductionSupervisor          null.String `boil:"ProductionSupervisor" json:"ProductionSupervisor,omitempty" toml:"ProductionSupervisor" yaml:"ProductionSupervisor,omitempty"`
	ProductProductionQuantityUnit null.String `boil:"ProductProductionQuantityUnit" json:"ProductProductionQuantityUnit,omitempty" toml:"ProductProductionQuantityUnit" yaml:"ProductProductionQuantityUnit,omitempty"`
	ProdnOrderIsBatchRequired     null.String `boil:"ProdnOrderIsBatchRequired" json:"ProdnOrderIsBatchRequired,omitempty" toml:"ProdnOrderIsBatchRequired" yaml:"ProdnOrderIsBatchRequired,omitempty"`
	MatlCompIsMarkedForBackflush  null.String `boil:"MatlCompIsMarkedForBackflush" json:"MatlCompIsMarkedForBackflush,omitempty" toml:"MatlCompIsMarkedForBackflush" yaml:"MatlCompIsMarkedForBackflush,omitempty"`
	ProductionSchedulingProfile   null.String `boil:"ProductionSchedulingProfile" json:"ProductionSchedulingProfile,omitempty" toml:"ProductionSchedulingProfile" yaml:"ProductionSchedulingProfile,omitempty"`

	R *sapProductMasterWorkSchedulingDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterWorkSchedulingDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterWorkSchedulingDatumColumns = struct {
	Product                       string
	Plant                         string
	ProductionInvtryManagedLoc    string
	ProductProcessingTime         string
	ProductionSupervisor          string
	ProductProductionQuantityUnit string
	ProdnOrderIsBatchRequired     string
	MatlCompIsMarkedForBackflush  string
	ProductionSchedulingProfile   string
}{
	Product:                       "Product",
	Plant:                         "Plant",
	ProductionInvtryManagedLoc:    "ProductionInvtryManagedLoc",
	ProductProcessingTime:         "ProductProcessingTime",
	ProductionSupervisor:          "ProductionSupervisor",
	ProductProductionQuantityUnit: "ProductProductionQuantityUnit",
	ProdnOrderIsBatchRequired:     "ProdnOrderIsBatchRequired",
	MatlCompIsMarkedForBackflush:  "MatlCompIsMarkedForBackflush",
	ProductionSchedulingProfile:   "ProductionSchedulingProfile",
}

var SapProductMasterWorkSchedulingDatumTableColumns = struct {
	Product                       string
	Plant                         string
	ProductionInvtryManagedLoc    string
	ProductProcessingTime         string
	ProductionSupervisor          string
	ProductProductionQuantityUnit string
	ProdnOrderIsBatchRequired     string
	MatlCompIsMarkedForBackflush  string
	ProductionSchedulingProfile   string
}{
	Product:                       "sap_product_master_work_scheduling_data.Product",
	Plant:                         "sap_product_master_work_scheduling_data.Plant",
	ProductionInvtryManagedLoc:    "sap_product_master_work_scheduling_data.ProductionInvtryManagedLoc",
	ProductProcessingTime:         "sap_product_master_work_scheduling_data.ProductProcessingTime",
	ProductionSupervisor:          "sap_product_master_work_scheduling_data.ProductionSupervisor",
	ProductProductionQuantityUnit: "sap_product_master_work_scheduling_data.ProductProductionQuantityUnit",
	ProdnOrderIsBatchRequired:     "sap_product_master_work_scheduling_data.ProdnOrderIsBatchRequired",
	MatlCompIsMarkedForBackflush:  "sap_product_master_work_scheduling_data.MatlCompIsMarkedForBackflush",
	ProductionSchedulingProfile:   "sap_product_master_work_scheduling_data.ProductionSchedulingProfile",
}

// Generated where

var SapProductMasterWorkSchedulingDatumWhere = struct {
	Product                       whereHelperstring
	Plant                         whereHelperstring
	ProductionInvtryManagedLoc    whereHelpernull_String
	ProductProcessingTime         whereHelpernull_Int
	ProductionSupervisor          whereHelpernull_String
	ProductProductionQuantityUnit whereHelpernull_String
	ProdnOrderIsBatchRequired     whereHelpernull_String
	MatlCompIsMarkedForBackflush  whereHelpernull_String
	ProductionSchedulingProfile   whereHelpernull_String
}{
	Product:                       whereHelperstring{field: "`sap_product_master_work_scheduling_data`.`Product`"},
	Plant:                         whereHelperstring{field: "`sap_product_master_work_scheduling_data`.`Plant`"},
	ProductionInvtryManagedLoc:    whereHelpernull_String{field: "`sap_product_master_work_scheduling_data`.`ProductionInvtryManagedLoc`"},
	ProductProcessingTime:         whereHelpernull_Int{field: "`sap_product_master_work_scheduling_data`.`ProductProcessingTime`"},
	ProductionSupervisor:          whereHelpernull_String{field: "`sap_product_master_work_scheduling_data`.`ProductionSupervisor`"},
	ProductProductionQuantityUnit: whereHelpernull_String{field: "`sap_product_master_work_scheduling_data`.`ProductProductionQuantityUnit`"},
	ProdnOrderIsBatchRequired:     whereHelpernull_String{field: "`sap_product_master_work_scheduling_data`.`ProdnOrderIsBatchRequired`"},
	MatlCompIsMarkedForBackflush:  whereHelpernull_String{field: "`sap_product_master_work_scheduling_data`.`MatlCompIsMarkedForBackflush`"},
	ProductionSchedulingProfile:   whereHelpernull_String{field: "`sap_product_master_work_scheduling_data`.`ProductionSchedulingProfile`"},
}

// SapProductMasterWorkSchedulingDatumRels is where relationship names are stored.
var SapProductMasterWorkSchedulingDatumRels = struct {
	ProductSapProductMasterGeneralDatum string
}{
	ProductSapProductMasterGeneralDatum: "ProductSapProductMasterGeneralDatum",
}

// sapProductMasterWorkSchedulingDatumR is where relationships are stored.
type sapProductMasterWorkSchedulingDatumR struct {
	ProductSapProductMasterGeneralDatum *SapProductMasterGeneralDatum `boil:"ProductSapProductMasterGeneralDatum" json:"ProductSapProductMasterGeneralDatum" toml:"ProductSapProductMasterGeneralDatum" yaml:"ProductSapProductMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterWorkSchedulingDatumR) NewStruct() *sapProductMasterWorkSchedulingDatumR {
	return &sapProductMasterWorkSchedulingDatumR{}
}

func (r *sapProductMasterWorkSchedulingDatumR) GetProductSapProductMasterGeneralDatum() *SapProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductSapProductMasterGeneralDatum
}

// sapProductMasterWorkSchedulingDatumL is where Load methods for each relationship are stored.
type sapProductMasterWorkSchedulingDatumL struct{}

var (
	sapProductMasterWorkSchedulingDatumAllColumns            = []string{"Product", "Plant", "ProductionInvtryManagedLoc", "ProductProcessingTime", "ProductionSupervisor", "ProductProductionQuantityUnit", "ProdnOrderIsBatchRequired", "MatlCompIsMarkedForBackflush", "ProductionSchedulingProfile"}
	sapProductMasterWorkSchedulingDatumColumnsWithoutDefault = []string{"Product", "Plant", "ProductionInvtryManagedLoc", "ProductProcessingTime", "ProductionSupervisor", "ProductProductionQuantityUnit", "ProdnOrderIsBatchRequired", "MatlCompIsMarkedForBackflush", "ProductionSchedulingProfile"}
	sapProductMasterWorkSchedulingDatumColumnsWithDefault    = []string{}
	sapProductMasterWorkSchedulingDatumPrimaryKeyColumns     = []string{"Product", "Plant"}
	sapProductMasterWorkSchedulingDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterWorkSchedulingDatumSlice is an alias for a slice of pointers to SapProductMasterWorkSchedulingDatum.
	// This should almost always be used instead of []SapProductMasterWorkSchedulingDatum.
	SapProductMasterWorkSchedulingDatumSlice []*SapProductMasterWorkSchedulingDatum
	// SapProductMasterWorkSchedulingDatumHook is the signature for custom SapProductMasterWorkSchedulingDatum hook methods
	SapProductMasterWorkSchedulingDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterWorkSchedulingDatum) error

	sapProductMasterWorkSchedulingDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterWorkSchedulingDatumType                 = reflect.TypeOf(&SapProductMasterWorkSchedulingDatum{})
	sapProductMasterWorkSchedulingDatumMapping              = queries.MakeStructMapping(sapProductMasterWorkSchedulingDatumType)
	sapProductMasterWorkSchedulingDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns)
	sapProductMasterWorkSchedulingDatumInsertCacheMut       sync.RWMutex
	sapProductMasterWorkSchedulingDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterWorkSchedulingDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterWorkSchedulingDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterWorkSchedulingDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterWorkSchedulingDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterWorkSchedulingDatumAfterSelectHooks []SapProductMasterWorkSchedulingDatumHook

var sapProductMasterWorkSchedulingDatumBeforeInsertHooks []SapProductMasterWorkSchedulingDatumHook
var sapProductMasterWorkSchedulingDatumAfterInsertHooks []SapProductMasterWorkSchedulingDatumHook

var sapProductMasterWorkSchedulingDatumBeforeUpdateHooks []SapProductMasterWorkSchedulingDatumHook
var sapProductMasterWorkSchedulingDatumAfterUpdateHooks []SapProductMasterWorkSchedulingDatumHook

var sapProductMasterWorkSchedulingDatumBeforeDeleteHooks []SapProductMasterWorkSchedulingDatumHook
var sapProductMasterWorkSchedulingDatumAfterDeleteHooks []SapProductMasterWorkSchedulingDatumHook

var sapProductMasterWorkSchedulingDatumBeforeUpsertHooks []SapProductMasterWorkSchedulingDatumHook
var sapProductMasterWorkSchedulingDatumAfterUpsertHooks []SapProductMasterWorkSchedulingDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterWorkSchedulingDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterWorkSchedulingDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterWorkSchedulingDatumHook registers your hook function for all future operations.
func AddSapProductMasterWorkSchedulingDatumHook(hookPoint boil.HookPoint, sapProductMasterWorkSchedulingDatumHook SapProductMasterWorkSchedulingDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterWorkSchedulingDatumAfterSelectHooks = append(sapProductMasterWorkSchedulingDatumAfterSelectHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterWorkSchedulingDatumBeforeInsertHooks = append(sapProductMasterWorkSchedulingDatumBeforeInsertHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterWorkSchedulingDatumAfterInsertHooks = append(sapProductMasterWorkSchedulingDatumAfterInsertHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterWorkSchedulingDatumBeforeUpdateHooks = append(sapProductMasterWorkSchedulingDatumBeforeUpdateHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterWorkSchedulingDatumAfterUpdateHooks = append(sapProductMasterWorkSchedulingDatumAfterUpdateHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterWorkSchedulingDatumBeforeDeleteHooks = append(sapProductMasterWorkSchedulingDatumBeforeDeleteHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterWorkSchedulingDatumAfterDeleteHooks = append(sapProductMasterWorkSchedulingDatumAfterDeleteHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterWorkSchedulingDatumBeforeUpsertHooks = append(sapProductMasterWorkSchedulingDatumBeforeUpsertHooks, sapProductMasterWorkSchedulingDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterWorkSchedulingDatumAfterUpsertHooks = append(sapProductMasterWorkSchedulingDatumAfterUpsertHooks, sapProductMasterWorkSchedulingDatumHook)
	}
}

// One returns a single sapProductMasterWorkSchedulingDatum record from the query.
func (q sapProductMasterWorkSchedulingDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterWorkSchedulingDatum, error) {
	o := &SapProductMasterWorkSchedulingDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_work_scheduling_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterWorkSchedulingDatum records from the query.
func (q sapProductMasterWorkSchedulingDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterWorkSchedulingDatumSlice, error) {
	var o []*SapProductMasterWorkSchedulingDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterWorkSchedulingDatum slice")
	}

	if len(sapProductMasterWorkSchedulingDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterWorkSchedulingDatum records in the query.
func (q sapProductMasterWorkSchedulingDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_work_scheduling_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterWorkSchedulingDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_work_scheduling_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterWorkSchedulingDatum) ProductSapProductMasterGeneralDatum(mods ...qm.QueryMod) sapProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return SapProductMasterGeneralData(queryMods...)
}

// LoadProductSapProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterWorkSchedulingDatumL) LoadProductSapProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterWorkSchedulingDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterWorkSchedulingDatum
	var object *SapProductMasterWorkSchedulingDatum

	if singular {
		object = maybeSapProductMasterWorkSchedulingDatum.(*SapProductMasterWorkSchedulingDatum)
	} else {
		slice = *maybeSapProductMasterWorkSchedulingDatum.(*[]*SapProductMasterWorkSchedulingDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterWorkSchedulingDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterWorkSchedulingDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_general_data`),
		qm.WhereIn(`sap_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterGeneralDatum")
	}

	var resultSlice []*SapProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_general_data")
	}

	if len(sapProductMasterWorkSchedulingDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterWorkSchedulingData = append(foreign.R.ProductSapProductMasterWorkSchedulingData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterWorkSchedulingData = append(foreign.R.ProductSapProductMasterWorkSchedulingData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterGeneralDatum of the sapProductMasterWorkSchedulingDatum to the related item.
// Sets o.R.ProductSapProductMasterGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterWorkSchedulingData.
func (o *SapProductMasterWorkSchedulingDatum) SetProductSapProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_work_scheduling_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterWorkSchedulingDatumR{
			ProductSapProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterGeneralDatumR{
			ProductSapProductMasterWorkSchedulingData: SapProductMasterWorkSchedulingDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterWorkSchedulingData = append(related.R.ProductSapProductMasterWorkSchedulingData, o)
	}

	return nil
}

// SapProductMasterWorkSchedulingData retrieves all the records using an executor.
func SapProductMasterWorkSchedulingData(mods ...qm.QueryMod) sapProductMasterWorkSchedulingDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_work_scheduling_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_product_master_work_scheduling_data`.*"})
	}

	return sapProductMasterWorkSchedulingDatumQuery{q}
}

// FindSapProductMasterWorkSchedulingDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterWorkSchedulingDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, selectCols ...string) (*SapProductMasterWorkSchedulingDatum, error) {
	sapProductMasterWorkSchedulingDatumObj := &SapProductMasterWorkSchedulingDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_work_scheduling_data` where `Product`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, plant)

	err := q.Bind(ctx, exec, sapProductMasterWorkSchedulingDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_work_scheduling_data")
	}

	if err = sapProductMasterWorkSchedulingDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterWorkSchedulingDatumObj, err
	}

	return sapProductMasterWorkSchedulingDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterWorkSchedulingDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_work_scheduling_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterWorkSchedulingDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterWorkSchedulingDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterWorkSchedulingDatumInsertCache[key]
	sapProductMasterWorkSchedulingDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterWorkSchedulingDatumAllColumns,
			sapProductMasterWorkSchedulingDatumColumnsWithDefault,
			sapProductMasterWorkSchedulingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_work_scheduling_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_work_scheduling_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_work_scheduling_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_work_scheduling_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_work_scheduling_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterWorkSchedulingDatumInsertCacheMut.Lock()
		sapProductMasterWorkSchedulingDatumInsertCache[key] = cache
		sapProductMasterWorkSchedulingDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterWorkSchedulingDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterWorkSchedulingDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterWorkSchedulingDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterWorkSchedulingDatumUpdateCache[key]
	sapProductMasterWorkSchedulingDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterWorkSchedulingDatumAllColumns,
			sapProductMasterWorkSchedulingDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_work_scheduling_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_work_scheduling_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, append(wl, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_work_scheduling_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_work_scheduling_data")
	}

	if !cached {
		sapProductMasterWorkSchedulingDatumUpdateCacheMut.Lock()
		sapProductMasterWorkSchedulingDatumUpdateCache[key] = cache
		sapProductMasterWorkSchedulingDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterWorkSchedulingDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_work_scheduling_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_work_scheduling_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterWorkSchedulingDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterWorkSchedulingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_work_scheduling_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterWorkSchedulingDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterWorkSchedulingDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterWorkSchedulingDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterWorkSchedulingDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_work_scheduling_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterWorkSchedulingDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterWorkSchedulingDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterWorkSchedulingDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterWorkSchedulingDatumUpsertCache[key]
	sapProductMasterWorkSchedulingDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterWorkSchedulingDatumAllColumns,
			sapProductMasterWorkSchedulingDatumColumnsWithDefault,
			sapProductMasterWorkSchedulingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterWorkSchedulingDatumAllColumns,
			sapProductMasterWorkSchedulingDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_work_scheduling_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_work_scheduling_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_work_scheduling_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_work_scheduling_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterWorkSchedulingDatumType, sapProductMasterWorkSchedulingDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_work_scheduling_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_work_scheduling_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterWorkSchedulingDatumUpsertCacheMut.Lock()
		sapProductMasterWorkSchedulingDatumUpsertCache[key] = cache
		sapProductMasterWorkSchedulingDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterWorkSchedulingDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterWorkSchedulingDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterWorkSchedulingDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterWorkSchedulingDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_work_scheduling_data` WHERE `Product`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_work_scheduling_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_work_scheduling_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterWorkSchedulingDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterWorkSchedulingDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_work_scheduling_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_work_scheduling_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterWorkSchedulingDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterWorkSchedulingDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterWorkSchedulingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_work_scheduling_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterWorkSchedulingDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_work_scheduling_data")
	}

	if len(sapProductMasterWorkSchedulingDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterWorkSchedulingDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterWorkSchedulingDatum(ctx, exec, o.Product, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterWorkSchedulingDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterWorkSchedulingDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterWorkSchedulingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_work_scheduling_data`.* FROM `sap_product_master_work_scheduling_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterWorkSchedulingDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterWorkSchedulingDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterWorkSchedulingDatumExists checks if the SapProductMasterWorkSchedulingDatum row exists.
func SapProductMasterWorkSchedulingDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_work_scheduling_data` where `Product`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_work_scheduling_data exists")
	}

	return exists, nil
}
