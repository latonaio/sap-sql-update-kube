// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCreditManagementMasterBusinessPartnerDatum is an object representing the database table.
type SapCreditManagementMasterBusinessPartnerDatum struct {
	BusinessPartner                string      `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	CrdtMgmtBusinessPartnerGroup   null.String `boil:"CrdtMgmtBusinessPartnerGroup" json:"CrdtMgmtBusinessPartnerGroup,omitempty" toml:"CrdtMgmtBusinessPartnerGroup" yaml:"CrdtMgmtBusinessPartnerGroup,omitempty"`
	CreditWorthinessScoreValue     null.String `boil:"CreditWorthinessScoreValue" json:"CreditWorthinessScoreValue,omitempty" toml:"CreditWorthinessScoreValue" yaml:"CreditWorthinessScoreValue,omitempty"`
	CrdtWrthnssScoreValdtyEndDate  null.String `boil:"CrdtWrthnssScoreValdtyEndDate" json:"CrdtWrthnssScoreValdtyEndDate,omitempty" toml:"CrdtWrthnssScoreValdtyEndDate" yaml:"CrdtWrthnssScoreValdtyEndDate,omitempty"`
	CrdtWorthinessScoreLastChgDate null.String `boil:"CrdtWorthinessScoreLastChgDate" json:"CrdtWorthinessScoreLastChgDate,omitempty" toml:"CrdtWorthinessScoreLastChgDate" yaml:"CrdtWorthinessScoreLastChgDate,omitempty"`
	CalcdCrdtWorthinessScoreValue  null.String `boil:"CalcdCrdtWorthinessScoreValue" json:"CalcdCrdtWorthinessScoreValue,omitempty" toml:"CalcdCrdtWorthinessScoreValue" yaml:"CalcdCrdtWorthinessScoreValue,omitempty"`
	CreditRiskClass                null.String `boil:"CreditRiskClass" json:"CreditRiskClass,omitempty" toml:"CreditRiskClass" yaml:"CreditRiskClass,omitempty"`
	CalculatedCreditRiskClass      null.String `boil:"CalculatedCreditRiskClass" json:"CalculatedCreditRiskClass,omitempty" toml:"CalculatedCreditRiskClass" yaml:"CalculatedCreditRiskClass,omitempty"`
	CreditRiskClassLastChangeDate  null.String `boil:"CreditRiskClassLastChangeDate" json:"CreditRiskClassLastChangeDate,omitempty" toml:"CreditRiskClassLastChangeDate" yaml:"CreditRiskClassLastChangeDate,omitempty"`
	CreditCheckRule                null.String `boil:"CreditCheckRule" json:"CreditCheckRule,omitempty" toml:"CreditCheckRule" yaml:"CreditCheckRule,omitempty"`
	CreditScoreAndLimitCalcRule    null.String `boil:"CreditScoreAndLimitCalcRule" json:"CreditScoreAndLimitCalcRule,omitempty" toml:"CreditScoreAndLimitCalcRule" yaml:"CreditScoreAndLimitCalcRule,omitempty"`

	R *sapCreditManagementMasterBusinessPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCreditManagementMasterBusinessPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCreditManagementMasterBusinessPartnerDatumColumns = struct {
	BusinessPartner                string
	CrdtMgmtBusinessPartnerGroup   string
	CreditWorthinessScoreValue     string
	CrdtWrthnssScoreValdtyEndDate  string
	CrdtWorthinessScoreLastChgDate string
	CalcdCrdtWorthinessScoreValue  string
	CreditRiskClass                string
	CalculatedCreditRiskClass      string
	CreditRiskClassLastChangeDate  string
	CreditCheckRule                string
	CreditScoreAndLimitCalcRule    string
}{
	BusinessPartner:                "BusinessPartner",
	CrdtMgmtBusinessPartnerGroup:   "CrdtMgmtBusinessPartnerGroup",
	CreditWorthinessScoreValue:     "CreditWorthinessScoreValue",
	CrdtWrthnssScoreValdtyEndDate:  "CrdtWrthnssScoreValdtyEndDate",
	CrdtWorthinessScoreLastChgDate: "CrdtWorthinessScoreLastChgDate",
	CalcdCrdtWorthinessScoreValue:  "CalcdCrdtWorthinessScoreValue",
	CreditRiskClass:                "CreditRiskClass",
	CalculatedCreditRiskClass:      "CalculatedCreditRiskClass",
	CreditRiskClassLastChangeDate:  "CreditRiskClassLastChangeDate",
	CreditCheckRule:                "CreditCheckRule",
	CreditScoreAndLimitCalcRule:    "CreditScoreAndLimitCalcRule",
}

var SapCreditManagementMasterBusinessPartnerDatumTableColumns = struct {
	BusinessPartner                string
	CrdtMgmtBusinessPartnerGroup   string
	CreditWorthinessScoreValue     string
	CrdtWrthnssScoreValdtyEndDate  string
	CrdtWorthinessScoreLastChgDate string
	CalcdCrdtWorthinessScoreValue  string
	CreditRiskClass                string
	CalculatedCreditRiskClass      string
	CreditRiskClassLastChangeDate  string
	CreditCheckRule                string
	CreditScoreAndLimitCalcRule    string
}{
	BusinessPartner:                "sap_credit_management_master_business_partner_data.BusinessPartner",
	CrdtMgmtBusinessPartnerGroup:   "sap_credit_management_master_business_partner_data.CrdtMgmtBusinessPartnerGroup",
	CreditWorthinessScoreValue:     "sap_credit_management_master_business_partner_data.CreditWorthinessScoreValue",
	CrdtWrthnssScoreValdtyEndDate:  "sap_credit_management_master_business_partner_data.CrdtWrthnssScoreValdtyEndDate",
	CrdtWorthinessScoreLastChgDate: "sap_credit_management_master_business_partner_data.CrdtWorthinessScoreLastChgDate",
	CalcdCrdtWorthinessScoreValue:  "sap_credit_management_master_business_partner_data.CalcdCrdtWorthinessScoreValue",
	CreditRiskClass:                "sap_credit_management_master_business_partner_data.CreditRiskClass",
	CalculatedCreditRiskClass:      "sap_credit_management_master_business_partner_data.CalculatedCreditRiskClass",
	CreditRiskClassLastChangeDate:  "sap_credit_management_master_business_partner_data.CreditRiskClassLastChangeDate",
	CreditCheckRule:                "sap_credit_management_master_business_partner_data.CreditCheckRule",
	CreditScoreAndLimitCalcRule:    "sap_credit_management_master_business_partner_data.CreditScoreAndLimitCalcRule",
}

// Generated where

var SapCreditManagementMasterBusinessPartnerDatumWhere = struct {
	BusinessPartner                whereHelperstring
	CrdtMgmtBusinessPartnerGroup   whereHelpernull_String
	CreditWorthinessScoreValue     whereHelpernull_String
	CrdtWrthnssScoreValdtyEndDate  whereHelpernull_String
	CrdtWorthinessScoreLastChgDate whereHelpernull_String
	CalcdCrdtWorthinessScoreValue  whereHelpernull_String
	CreditRiskClass                whereHelpernull_String
	CalculatedCreditRiskClass      whereHelpernull_String
	CreditRiskClassLastChangeDate  whereHelpernull_String
	CreditCheckRule                whereHelpernull_String
	CreditScoreAndLimitCalcRule    whereHelpernull_String
}{
	BusinessPartner:                whereHelperstring{field: "`sap_credit_management_master_business_partner_data`.`BusinessPartner`"},
	CrdtMgmtBusinessPartnerGroup:   whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CrdtMgmtBusinessPartnerGroup`"},
	CreditWorthinessScoreValue:     whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CreditWorthinessScoreValue`"},
	CrdtWrthnssScoreValdtyEndDate:  whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CrdtWrthnssScoreValdtyEndDate`"},
	CrdtWorthinessScoreLastChgDate: whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CrdtWorthinessScoreLastChgDate`"},
	CalcdCrdtWorthinessScoreValue:  whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CalcdCrdtWorthinessScoreValue`"},
	CreditRiskClass:                whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CreditRiskClass`"},
	CalculatedCreditRiskClass:      whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CalculatedCreditRiskClass`"},
	CreditRiskClassLastChangeDate:  whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CreditRiskClassLastChangeDate`"},
	CreditCheckRule:                whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CreditCheckRule`"},
	CreditScoreAndLimitCalcRule:    whereHelpernull_String{field: "`sap_credit_management_master_business_partner_data`.`CreditScoreAndLimitCalcRule`"},
}

// SapCreditManagementMasterBusinessPartnerDatumRels is where relationship names are stored.
var SapCreditManagementMasterBusinessPartnerDatumRels = struct {
	BusinessPartnerSapCreditManagementMasterCreditAccountData string
}{
	BusinessPartnerSapCreditManagementMasterCreditAccountData: "BusinessPartnerSapCreditManagementMasterCreditAccountData",
}

// sapCreditManagementMasterBusinessPartnerDatumR is where relationships are stored.
type sapCreditManagementMasterBusinessPartnerDatumR struct {
	BusinessPartnerSapCreditManagementMasterCreditAccountData SapCreditManagementMasterCreditAccountDatumSlice `boil:"BusinessPartnerSapCreditManagementMasterCreditAccountData" json:"BusinessPartnerSapCreditManagementMasterCreditAccountData" toml:"BusinessPartnerSapCreditManagementMasterCreditAccountData" yaml:"BusinessPartnerSapCreditManagementMasterCreditAccountData"`
}

// NewStruct creates a new relationship struct
func (*sapCreditManagementMasterBusinessPartnerDatumR) NewStruct() *sapCreditManagementMasterBusinessPartnerDatumR {
	return &sapCreditManagementMasterBusinessPartnerDatumR{}
}

func (r *sapCreditManagementMasterBusinessPartnerDatumR) GetBusinessPartnerSapCreditManagementMasterCreditAccountData() SapCreditManagementMasterCreditAccountDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerSapCreditManagementMasterCreditAccountData
}

// sapCreditManagementMasterBusinessPartnerDatumL is where Load methods for each relationship are stored.
type sapCreditManagementMasterBusinessPartnerDatumL struct{}

var (
	sapCreditManagementMasterBusinessPartnerDatumAllColumns            = []string{"BusinessPartner", "CrdtMgmtBusinessPartnerGroup", "CreditWorthinessScoreValue", "CrdtWrthnssScoreValdtyEndDate", "CrdtWorthinessScoreLastChgDate", "CalcdCrdtWorthinessScoreValue", "CreditRiskClass", "CalculatedCreditRiskClass", "CreditRiskClassLastChangeDate", "CreditCheckRule", "CreditScoreAndLimitCalcRule"}
	sapCreditManagementMasterBusinessPartnerDatumColumnsWithoutDefault = []string{"BusinessPartner", "CrdtMgmtBusinessPartnerGroup", "CreditWorthinessScoreValue", "CrdtWrthnssScoreValdtyEndDate", "CrdtWorthinessScoreLastChgDate", "CalcdCrdtWorthinessScoreValue", "CreditRiskClass", "CalculatedCreditRiskClass", "CreditRiskClassLastChangeDate", "CreditCheckRule", "CreditScoreAndLimitCalcRule"}
	sapCreditManagementMasterBusinessPartnerDatumColumnsWithDefault    = []string{}
	sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	sapCreditManagementMasterBusinessPartnerDatumGeneratedColumns      = []string{}
)

type (
	// SapCreditManagementMasterBusinessPartnerDatumSlice is an alias for a slice of pointers to SapCreditManagementMasterBusinessPartnerDatum.
	// This should almost always be used instead of []SapCreditManagementMasterBusinessPartnerDatum.
	SapCreditManagementMasterBusinessPartnerDatumSlice []*SapCreditManagementMasterBusinessPartnerDatum
	// SapCreditManagementMasterBusinessPartnerDatumHook is the signature for custom SapCreditManagementMasterBusinessPartnerDatum hook methods
	SapCreditManagementMasterBusinessPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapCreditManagementMasterBusinessPartnerDatum) error

	sapCreditManagementMasterBusinessPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCreditManagementMasterBusinessPartnerDatumType                 = reflect.TypeOf(&SapCreditManagementMasterBusinessPartnerDatum{})
	sapCreditManagementMasterBusinessPartnerDatumMapping              = queries.MakeStructMapping(sapCreditManagementMasterBusinessPartnerDatumType)
	sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns)
	sapCreditManagementMasterBusinessPartnerDatumInsertCacheMut       sync.RWMutex
	sapCreditManagementMasterBusinessPartnerDatumInsertCache          = make(map[string]insertCache)
	sapCreditManagementMasterBusinessPartnerDatumUpdateCacheMut       sync.RWMutex
	sapCreditManagementMasterBusinessPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapCreditManagementMasterBusinessPartnerDatumUpsertCacheMut       sync.RWMutex
	sapCreditManagementMasterBusinessPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCreditManagementMasterBusinessPartnerDatumAfterSelectHooks []SapCreditManagementMasterBusinessPartnerDatumHook

var sapCreditManagementMasterBusinessPartnerDatumBeforeInsertHooks []SapCreditManagementMasterBusinessPartnerDatumHook
var sapCreditManagementMasterBusinessPartnerDatumAfterInsertHooks []SapCreditManagementMasterBusinessPartnerDatumHook

var sapCreditManagementMasterBusinessPartnerDatumBeforeUpdateHooks []SapCreditManagementMasterBusinessPartnerDatumHook
var sapCreditManagementMasterBusinessPartnerDatumAfterUpdateHooks []SapCreditManagementMasterBusinessPartnerDatumHook

var sapCreditManagementMasterBusinessPartnerDatumBeforeDeleteHooks []SapCreditManagementMasterBusinessPartnerDatumHook
var sapCreditManagementMasterBusinessPartnerDatumAfterDeleteHooks []SapCreditManagementMasterBusinessPartnerDatumHook

var sapCreditManagementMasterBusinessPartnerDatumBeforeUpsertHooks []SapCreditManagementMasterBusinessPartnerDatumHook
var sapCreditManagementMasterBusinessPartnerDatumAfterUpsertHooks []SapCreditManagementMasterBusinessPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCreditManagementMasterBusinessPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterBusinessPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCreditManagementMasterBusinessPartnerDatumHook registers your hook function for all future operations.
func AddSapCreditManagementMasterBusinessPartnerDatumHook(hookPoint boil.HookPoint, sapCreditManagementMasterBusinessPartnerDatumHook SapCreditManagementMasterBusinessPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCreditManagementMasterBusinessPartnerDatumAfterSelectHooks = append(sapCreditManagementMasterBusinessPartnerDatumAfterSelectHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.BeforeInsertHook:
		sapCreditManagementMasterBusinessPartnerDatumBeforeInsertHooks = append(sapCreditManagementMasterBusinessPartnerDatumBeforeInsertHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.AfterInsertHook:
		sapCreditManagementMasterBusinessPartnerDatumAfterInsertHooks = append(sapCreditManagementMasterBusinessPartnerDatumAfterInsertHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapCreditManagementMasterBusinessPartnerDatumBeforeUpdateHooks = append(sapCreditManagementMasterBusinessPartnerDatumBeforeUpdateHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapCreditManagementMasterBusinessPartnerDatumAfterUpdateHooks = append(sapCreditManagementMasterBusinessPartnerDatumAfterUpdateHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapCreditManagementMasterBusinessPartnerDatumBeforeDeleteHooks = append(sapCreditManagementMasterBusinessPartnerDatumBeforeDeleteHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapCreditManagementMasterBusinessPartnerDatumAfterDeleteHooks = append(sapCreditManagementMasterBusinessPartnerDatumAfterDeleteHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapCreditManagementMasterBusinessPartnerDatumBeforeUpsertHooks = append(sapCreditManagementMasterBusinessPartnerDatumBeforeUpsertHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapCreditManagementMasterBusinessPartnerDatumAfterUpsertHooks = append(sapCreditManagementMasterBusinessPartnerDatumAfterUpsertHooks, sapCreditManagementMasterBusinessPartnerDatumHook)
	}
}

// One returns a single sapCreditManagementMasterBusinessPartnerDatum record from the query.
func (q sapCreditManagementMasterBusinessPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCreditManagementMasterBusinessPartnerDatum, error) {
	o := &SapCreditManagementMasterBusinessPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_credit_management_master_business_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCreditManagementMasterBusinessPartnerDatum records from the query.
func (q sapCreditManagementMasterBusinessPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCreditManagementMasterBusinessPartnerDatumSlice, error) {
	var o []*SapCreditManagementMasterBusinessPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCreditManagementMasterBusinessPartnerDatum slice")
	}

	if len(sapCreditManagementMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCreditManagementMasterBusinessPartnerDatum records in the query.
func (q sapCreditManagementMasterBusinessPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_credit_management_master_business_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCreditManagementMasterBusinessPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_credit_management_master_business_partner_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerSapCreditManagementMasterCreditAccountData retrieves all the sap_credit_management_master_credit_account_datum's SapCreditManagementMasterCreditAccountData with an executor via BusinessPartner column.
func (o *SapCreditManagementMasterBusinessPartnerDatum) BusinessPartnerSapCreditManagementMasterCreditAccountData(mods ...qm.QueryMod) sapCreditManagementMasterCreditAccountDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_credit_management_master_credit_account_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return SapCreditManagementMasterCreditAccountData(queryMods...)
}

// LoadBusinessPartnerSapCreditManagementMasterCreditAccountData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCreditManagementMasterBusinessPartnerDatumL) LoadBusinessPartnerSapCreditManagementMasterCreditAccountData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditManagementMasterBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditManagementMasterBusinessPartnerDatum
	var object *SapCreditManagementMasterBusinessPartnerDatum

	if singular {
		object = maybeSapCreditManagementMasterBusinessPartnerDatum.(*SapCreditManagementMasterBusinessPartnerDatum)
	} else {
		slice = *maybeSapCreditManagementMasterBusinessPartnerDatum.(*[]*SapCreditManagementMasterBusinessPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditManagementMasterBusinessPartnerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditManagementMasterBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_management_master_credit_account_data`),
		qm.WhereIn(`sap_credit_management_master_credit_account_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_credit_management_master_credit_account_data")
	}

	var resultSlice []*SapCreditManagementMasterCreditAccountDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_credit_management_master_credit_account_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_credit_management_master_credit_account_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_management_master_credit_account_data")
	}

	if len(sapCreditManagementMasterCreditAccountDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerSapCreditManagementMasterCreditAccountData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCreditManagementMasterCreditAccountDatumR{}
			}
			foreign.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapCreditManagementMasterCreditAccountData = append(local.R.BusinessPartnerSapCreditManagementMasterCreditAccountData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCreditManagementMasterCreditAccountDatumR{}
				}
				foreign.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum = local
				break
			}
		}
	}

	return nil
}

// AddBusinessPartnerSapCreditManagementMasterCreditAccountData adds the given related objects to the existing relationships
// of the sap_credit_management_master_business_partner_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerSapCreditManagementMasterCreditAccountData.
// Sets related.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum appropriately.
func (o *SapCreditManagementMasterBusinessPartnerDatum) AddBusinessPartnerSapCreditManagementMasterCreditAccountData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCreditManagementMasterCreditAccountDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_credit_management_master_credit_account_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.CreditSegment}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapCreditManagementMasterBusinessPartnerDatumR{
			BusinessPartnerSapCreditManagementMasterCreditAccountData: related,
		}
	} else {
		o.R.BusinessPartnerSapCreditManagementMasterCreditAccountData = append(o.R.BusinessPartnerSapCreditManagementMasterCreditAccountData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCreditManagementMasterCreditAccountDatumR{
				BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum = o
		}
	}
	return nil
}

// SapCreditManagementMasterBusinessPartnerData retrieves all the records using an executor.
func SapCreditManagementMasterBusinessPartnerData(mods ...qm.QueryMod) sapCreditManagementMasterBusinessPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_credit_management_master_business_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_credit_management_master_business_partner_data`.*"})
	}

	return sapCreditManagementMasterBusinessPartnerDatumQuery{q}
}

// FindSapCreditManagementMasterBusinessPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCreditManagementMasterBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner string, selectCols ...string) (*SapCreditManagementMasterBusinessPartnerDatum, error) {
	sapCreditManagementMasterBusinessPartnerDatumObj := &SapCreditManagementMasterBusinessPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_credit_management_master_business_partner_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, sapCreditManagementMasterBusinessPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_credit_management_master_business_partner_data")
	}

	if err = sapCreditManagementMasterBusinessPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCreditManagementMasterBusinessPartnerDatumObj, err
	}

	return sapCreditManagementMasterBusinessPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCreditManagementMasterBusinessPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_management_master_business_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditManagementMasterBusinessPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCreditManagementMasterBusinessPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapCreditManagementMasterBusinessPartnerDatumInsertCache[key]
	sapCreditManagementMasterBusinessPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCreditManagementMasterBusinessPartnerDatumAllColumns,
			sapCreditManagementMasterBusinessPartnerDatumColumnsWithDefault,
			sapCreditManagementMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_credit_management_master_business_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_credit_management_master_business_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_credit_management_master_business_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_credit_management_master_business_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_management_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditManagementMasterBusinessPartnerDatumInsertCacheMut.Lock()
		sapCreditManagementMasterBusinessPartnerDatumInsertCache[key] = cache
		sapCreditManagementMasterBusinessPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCreditManagementMasterBusinessPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCreditManagementMasterBusinessPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCreditManagementMasterBusinessPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapCreditManagementMasterBusinessPartnerDatumUpdateCache[key]
	sapCreditManagementMasterBusinessPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCreditManagementMasterBusinessPartnerDatumAllColumns,
			sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_credit_management_master_business_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_credit_management_master_business_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, append(wl, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_credit_management_master_business_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_credit_management_master_business_partner_data")
	}

	if !cached {
		sapCreditManagementMasterBusinessPartnerDatumUpdateCacheMut.Lock()
		sapCreditManagementMasterBusinessPartnerDatumUpdateCache[key] = cache
		sapCreditManagementMasterBusinessPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCreditManagementMasterBusinessPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_credit_management_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_credit_management_master_business_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCreditManagementMasterBusinessPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_credit_management_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCreditManagementMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCreditManagementMasterBusinessPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapCreditManagementMasterBusinessPartnerDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCreditManagementMasterBusinessPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_management_master_business_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditManagementMasterBusinessPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCreditManagementMasterBusinessPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCreditManagementMasterBusinessPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapCreditManagementMasterBusinessPartnerDatumUpsertCache[key]
	sapCreditManagementMasterBusinessPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCreditManagementMasterBusinessPartnerDatumAllColumns,
			sapCreditManagementMasterBusinessPartnerDatumColumnsWithDefault,
			sapCreditManagementMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCreditManagementMasterBusinessPartnerDatumAllColumns,
			sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_credit_management_master_business_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_credit_management_master_business_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_credit_management_master_business_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_credit_management_master_business_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCreditManagementMasterBusinessPartnerDatumType, sapCreditManagementMasterBusinessPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_credit_management_master_business_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_management_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditManagementMasterBusinessPartnerDatumUpsertCacheMut.Lock()
		sapCreditManagementMasterBusinessPartnerDatumUpsertCache[key] = cache
		sapCreditManagementMasterBusinessPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCreditManagementMasterBusinessPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCreditManagementMasterBusinessPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCreditManagementMasterBusinessPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_credit_management_master_business_partner_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_credit_management_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_credit_management_master_business_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCreditManagementMasterBusinessPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCreditManagementMasterBusinessPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_credit_management_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_management_master_business_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCreditManagementMasterBusinessPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCreditManagementMasterBusinessPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_credit_management_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCreditManagementMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_management_master_business_partner_data")
	}

	if len(sapCreditManagementMasterBusinessPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCreditManagementMasterBusinessPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCreditManagementMasterBusinessPartnerDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCreditManagementMasterBusinessPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCreditManagementMasterBusinessPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_credit_management_master_business_partner_data`.* FROM `sap_credit_management_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditManagementMasterBusinessPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCreditManagementMasterBusinessPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapCreditManagementMasterBusinessPartnerDatumExists checks if the SapCreditManagementMasterBusinessPartnerDatum row exists.
func SapCreditManagementMasterBusinessPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_credit_management_master_business_partner_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_credit_management_master_business_partner_data exists")
	}

	return exists, nil
}
