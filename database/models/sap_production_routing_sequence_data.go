// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionRoutingSequenceDatum is an object representing the database table.
type SapProductionRoutingSequenceDatum struct {
	ProductionRoutingGroup       string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting            string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingSequence    string      `boil:"ProductionRoutingSequence" json:"ProductionRoutingSequence" toml:"ProductionRoutingSequence" yaml:"ProductionRoutingSequence"`
	ProductionRoutingSqncIntVers string      `boil:"ProductionRoutingSqncIntVers" json:"ProductionRoutingSqncIntVers" toml:"ProductionRoutingSqncIntVers" yaml:"ProductionRoutingSqncIntVers"`
	ChangeNumber                 null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ValidityStartDate            null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate              null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	SequenceCategory             null.String `boil:"SequenceCategory" json:"SequenceCategory,omitempty" toml:"SequenceCategory" yaml:"SequenceCategory,omitempty"`
	BillOfOperationsRefSequence  null.String `boil:"BillOfOperationsRefSequence" json:"BillOfOperationsRefSequence,omitempty" toml:"BillOfOperationsRefSequence" yaml:"BillOfOperationsRefSequence,omitempty"`
	MinimumLotSizeQuantity       null.String `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity       null.String `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	BillOfOperationsUnit         null.String `boil:"BillOfOperationsUnit" json:"BillOfOperationsUnit,omitempty" toml:"BillOfOperationsUnit" yaml:"BillOfOperationsUnit,omitempty"`
	SequenceText                 null.String `boil:"SequenceText" json:"SequenceText,omitempty" toml:"SequenceText" yaml:"SequenceText,omitempty"`
	CreationDate                 null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate               null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`

	R *sapProductionRoutingSequenceDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionRoutingSequenceDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionRoutingSequenceDatumColumns = struct {
	ProductionRoutingGroup       string
	ProductionRouting            string
	ProductionRoutingSequence    string
	ProductionRoutingSqncIntVers string
	ChangeNumber                 string
	ValidityStartDate            string
	ValidityEndDate              string
	SequenceCategory             string
	BillOfOperationsRefSequence  string
	MinimumLotSizeQuantity       string
	MaximumLotSizeQuantity       string
	BillOfOperationsUnit         string
	SequenceText                 string
	CreationDate                 string
	LastChangeDate               string
}{
	ProductionRoutingGroup:       "ProductionRoutingGroup",
	ProductionRouting:            "ProductionRouting",
	ProductionRoutingSequence:    "ProductionRoutingSequence",
	ProductionRoutingSqncIntVers: "ProductionRoutingSqncIntVers",
	ChangeNumber:                 "ChangeNumber",
	ValidityStartDate:            "ValidityStartDate",
	ValidityEndDate:              "ValidityEndDate",
	SequenceCategory:             "SequenceCategory",
	BillOfOperationsRefSequence:  "BillOfOperationsRefSequence",
	MinimumLotSizeQuantity:       "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:       "MaximumLotSizeQuantity",
	BillOfOperationsUnit:         "BillOfOperationsUnit",
	SequenceText:                 "SequenceText",
	CreationDate:                 "CreationDate",
	LastChangeDate:               "LastChangeDate",
}

var SapProductionRoutingSequenceDatumTableColumns = struct {
	ProductionRoutingGroup       string
	ProductionRouting            string
	ProductionRoutingSequence    string
	ProductionRoutingSqncIntVers string
	ChangeNumber                 string
	ValidityStartDate            string
	ValidityEndDate              string
	SequenceCategory             string
	BillOfOperationsRefSequence  string
	MinimumLotSizeQuantity       string
	MaximumLotSizeQuantity       string
	BillOfOperationsUnit         string
	SequenceText                 string
	CreationDate                 string
	LastChangeDate               string
}{
	ProductionRoutingGroup:       "sap_production_routing_sequence_data.ProductionRoutingGroup",
	ProductionRouting:            "sap_production_routing_sequence_data.ProductionRouting",
	ProductionRoutingSequence:    "sap_production_routing_sequence_data.ProductionRoutingSequence",
	ProductionRoutingSqncIntVers: "sap_production_routing_sequence_data.ProductionRoutingSqncIntVers",
	ChangeNumber:                 "sap_production_routing_sequence_data.ChangeNumber",
	ValidityStartDate:            "sap_production_routing_sequence_data.ValidityStartDate",
	ValidityEndDate:              "sap_production_routing_sequence_data.ValidityEndDate",
	SequenceCategory:             "sap_production_routing_sequence_data.SequenceCategory",
	BillOfOperationsRefSequence:  "sap_production_routing_sequence_data.BillOfOperationsRefSequence",
	MinimumLotSizeQuantity:       "sap_production_routing_sequence_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:       "sap_production_routing_sequence_data.MaximumLotSizeQuantity",
	BillOfOperationsUnit:         "sap_production_routing_sequence_data.BillOfOperationsUnit",
	SequenceText:                 "sap_production_routing_sequence_data.SequenceText",
	CreationDate:                 "sap_production_routing_sequence_data.CreationDate",
	LastChangeDate:               "sap_production_routing_sequence_data.LastChangeDate",
}

// Generated where

var SapProductionRoutingSequenceDatumWhere = struct {
	ProductionRoutingGroup       whereHelperstring
	ProductionRouting            whereHelperstring
	ProductionRoutingSequence    whereHelperstring
	ProductionRoutingSqncIntVers whereHelperstring
	ChangeNumber                 whereHelpernull_String
	ValidityStartDate            whereHelpernull_String
	ValidityEndDate              whereHelpernull_String
	SequenceCategory             whereHelpernull_String
	BillOfOperationsRefSequence  whereHelpernull_String
	MinimumLotSizeQuantity       whereHelpernull_String
	MaximumLotSizeQuantity       whereHelpernull_String
	BillOfOperationsUnit         whereHelpernull_String
	SequenceText                 whereHelpernull_String
	CreationDate                 whereHelpernull_String
	LastChangeDate               whereHelpernull_String
}{
	ProductionRoutingGroup:       whereHelperstring{field: "`sap_production_routing_sequence_data`.`ProductionRoutingGroup`"},
	ProductionRouting:            whereHelperstring{field: "`sap_production_routing_sequence_data`.`ProductionRouting`"},
	ProductionRoutingSequence:    whereHelperstring{field: "`sap_production_routing_sequence_data`.`ProductionRoutingSequence`"},
	ProductionRoutingSqncIntVers: whereHelperstring{field: "`sap_production_routing_sequence_data`.`ProductionRoutingSqncIntVers`"},
	ChangeNumber:                 whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`ChangeNumber`"},
	ValidityStartDate:            whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`ValidityStartDate`"},
	ValidityEndDate:              whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`ValidityEndDate`"},
	SequenceCategory:             whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`SequenceCategory`"},
	BillOfOperationsRefSequence:  whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`BillOfOperationsRefSequence`"},
	MinimumLotSizeQuantity:       whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:       whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`MaximumLotSizeQuantity`"},
	BillOfOperationsUnit:         whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`BillOfOperationsUnit`"},
	SequenceText:                 whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`SequenceText`"},
	CreationDate:                 whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`CreationDate`"},
	LastChangeDate:               whereHelpernull_String{field: "`sap_production_routing_sequence_data`.`LastChangeDate`"},
}

// SapProductionRoutingSequenceDatumRels is where relationship names are stored.
var SapProductionRoutingSequenceDatumRels = struct {
}{}

// sapProductionRoutingSequenceDatumR is where relationships are stored.
type sapProductionRoutingSequenceDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapProductionRoutingSequenceDatumR) NewStruct() *sapProductionRoutingSequenceDatumR {
	return &sapProductionRoutingSequenceDatumR{}
}

// sapProductionRoutingSequenceDatumL is where Load methods for each relationship are stored.
type sapProductionRoutingSequenceDatumL struct{}

var (
	sapProductionRoutingSequenceDatumAllColumns            = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingSqncIntVers", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "SequenceCategory", "BillOfOperationsRefSequence", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "BillOfOperationsUnit", "SequenceText", "CreationDate", "LastChangeDate"}
	sapProductionRoutingSequenceDatumColumnsWithoutDefault = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingSqncIntVers", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "SequenceCategory", "BillOfOperationsRefSequence", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "BillOfOperationsUnit", "SequenceText", "CreationDate", "LastChangeDate"}
	sapProductionRoutingSequenceDatumColumnsWithDefault    = []string{}
	sapProductionRoutingSequenceDatumPrimaryKeyColumns     = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingSqncIntVers"}
)

type (
	// SapProductionRoutingSequenceDatumSlice is an alias for a slice of pointers to SapProductionRoutingSequenceDatum.
	// This should almost always be used instead of []SapProductionRoutingSequenceDatum.
	SapProductionRoutingSequenceDatumSlice []*SapProductionRoutingSequenceDatum
	// SapProductionRoutingSequenceDatumHook is the signature for custom SapProductionRoutingSequenceDatum hook methods
	SapProductionRoutingSequenceDatumHook func(context.Context, boil.ContextExecutor, *SapProductionRoutingSequenceDatum) error

	sapProductionRoutingSequenceDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionRoutingSequenceDatumType                 = reflect.TypeOf(&SapProductionRoutingSequenceDatum{})
	sapProductionRoutingSequenceDatumMapping              = queries.MakeStructMapping(sapProductionRoutingSequenceDatumType)
	sapProductionRoutingSequenceDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, sapProductionRoutingSequenceDatumPrimaryKeyColumns)
	sapProductionRoutingSequenceDatumInsertCacheMut       sync.RWMutex
	sapProductionRoutingSequenceDatumInsertCache          = make(map[string]insertCache)
	sapProductionRoutingSequenceDatumUpdateCacheMut       sync.RWMutex
	sapProductionRoutingSequenceDatumUpdateCache          = make(map[string]updateCache)
	sapProductionRoutingSequenceDatumUpsertCacheMut       sync.RWMutex
	sapProductionRoutingSequenceDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionRoutingSequenceDatumBeforeInsertHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumBeforeUpdateHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumBeforeDeleteHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumBeforeUpsertHooks []SapProductionRoutingSequenceDatumHook

var sapProductionRoutingSequenceDatumAfterInsertHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumAfterSelectHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumAfterUpdateHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumAfterDeleteHooks []SapProductionRoutingSequenceDatumHook
var sapProductionRoutingSequenceDatumAfterUpsertHooks []SapProductionRoutingSequenceDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionRoutingSequenceDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionRoutingSequenceDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionRoutingSequenceDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionRoutingSequenceDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionRoutingSequenceDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionRoutingSequenceDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionRoutingSequenceDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionRoutingSequenceDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionRoutingSequenceDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingSequenceDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionRoutingSequenceDatumHook registers your hook function for all future operations.
func AddSapProductionRoutingSequenceDatumHook(hookPoint boil.HookPoint, sapProductionRoutingSequenceDatumHook SapProductionRoutingSequenceDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapProductionRoutingSequenceDatumBeforeInsertHooks = append(sapProductionRoutingSequenceDatumBeforeInsertHooks, sapProductionRoutingSequenceDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionRoutingSequenceDatumBeforeUpdateHooks = append(sapProductionRoutingSequenceDatumBeforeUpdateHooks, sapProductionRoutingSequenceDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionRoutingSequenceDatumBeforeDeleteHooks = append(sapProductionRoutingSequenceDatumBeforeDeleteHooks, sapProductionRoutingSequenceDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionRoutingSequenceDatumBeforeUpsertHooks = append(sapProductionRoutingSequenceDatumBeforeUpsertHooks, sapProductionRoutingSequenceDatumHook)
	case boil.AfterInsertHook:
		sapProductionRoutingSequenceDatumAfterInsertHooks = append(sapProductionRoutingSequenceDatumAfterInsertHooks, sapProductionRoutingSequenceDatumHook)
	case boil.AfterSelectHook:
		sapProductionRoutingSequenceDatumAfterSelectHooks = append(sapProductionRoutingSequenceDatumAfterSelectHooks, sapProductionRoutingSequenceDatumHook)
	case boil.AfterUpdateHook:
		sapProductionRoutingSequenceDatumAfterUpdateHooks = append(sapProductionRoutingSequenceDatumAfterUpdateHooks, sapProductionRoutingSequenceDatumHook)
	case boil.AfterDeleteHook:
		sapProductionRoutingSequenceDatumAfterDeleteHooks = append(sapProductionRoutingSequenceDatumAfterDeleteHooks, sapProductionRoutingSequenceDatumHook)
	case boil.AfterUpsertHook:
		sapProductionRoutingSequenceDatumAfterUpsertHooks = append(sapProductionRoutingSequenceDatumAfterUpsertHooks, sapProductionRoutingSequenceDatumHook)
	}
}

// One returns a single sapProductionRoutingSequenceDatum record from the query.
func (q sapProductionRoutingSequenceDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionRoutingSequenceDatum, error) {
	o := &SapProductionRoutingSequenceDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_routing_sequence_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionRoutingSequenceDatum records from the query.
func (q sapProductionRoutingSequenceDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionRoutingSequenceDatumSlice, error) {
	var o []*SapProductionRoutingSequenceDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionRoutingSequenceDatum slice")
	}

	if len(sapProductionRoutingSequenceDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionRoutingSequenceDatum records in the query.
func (q sapProductionRoutingSequenceDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_routing_sequence_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionRoutingSequenceDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_routing_sequence_data exists")
	}

	return count > 0, nil
}

// SapProductionRoutingSequenceData retrieves all the records using an executor.
func SapProductionRoutingSequenceData(mods ...qm.QueryMod) sapProductionRoutingSequenceDatumQuery {
	mods = append(mods, qm.From("`sap_production_routing_sequence_data`"))
	return sapProductionRoutingSequenceDatumQuery{NewQuery(mods...)}
}

// FindSapProductionRoutingSequenceDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionRoutingSequenceDatum(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingSqncIntVers string, selectCols ...string) (*SapProductionRoutingSequenceDatum, error) {
	sapProductionRoutingSequenceDatumObj := &SapProductionRoutingSequenceDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_routing_sequence_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingSqncIntVers`=?", sel,
	)

	q := queries.Raw(query, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingSqncIntVers)

	err := q.Bind(ctx, exec, sapProductionRoutingSequenceDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_routing_sequence_data")
	}

	if err = sapProductionRoutingSequenceDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionRoutingSequenceDatumObj, err
	}

	return sapProductionRoutingSequenceDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionRoutingSequenceDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_sequence_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingSequenceDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionRoutingSequenceDatumInsertCacheMut.RLock()
	cache, cached := sapProductionRoutingSequenceDatumInsertCache[key]
	sapProductionRoutingSequenceDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionRoutingSequenceDatumAllColumns,
			sapProductionRoutingSequenceDatumColumnsWithDefault,
			sapProductionRoutingSequenceDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_routing_sequence_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_routing_sequence_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_routing_sequence_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionRoutingSequenceDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_routing_sequence_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingSequence,
		o.ProductionRoutingSqncIntVers,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_sequence_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingSequenceDatumInsertCacheMut.Lock()
		sapProductionRoutingSequenceDatumInsertCache[key] = cache
		sapProductionRoutingSequenceDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionRoutingSequenceDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionRoutingSequenceDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionRoutingSequenceDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionRoutingSequenceDatumUpdateCache[key]
	sapProductionRoutingSequenceDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionRoutingSequenceDatumAllColumns,
			sapProductionRoutingSequenceDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_routing_sequence_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_routing_sequence_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionRoutingSequenceDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, append(wl, sapProductionRoutingSequenceDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_routing_sequence_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_routing_sequence_data")
	}

	if !cached {
		sapProductionRoutingSequenceDatumUpdateCacheMut.Lock()
		sapProductionRoutingSequenceDatumUpdateCache[key] = cache
		sapProductionRoutingSequenceDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionRoutingSequenceDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_routing_sequence_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_routing_sequence_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionRoutingSequenceDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingSequenceDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_routing_sequence_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingSequenceDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionRoutingSequenceDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionRoutingSequenceDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionRoutingSequenceDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionRoutingSequenceDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_sequence_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingSequenceDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionRoutingSequenceDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionRoutingSequenceDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionRoutingSequenceDatumUpsertCache[key]
	sapProductionRoutingSequenceDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionRoutingSequenceDatumAllColumns,
			sapProductionRoutingSequenceDatumColumnsWithDefault,
			sapProductionRoutingSequenceDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapProductionRoutingSequenceDatumAllColumns,
			sapProductionRoutingSequenceDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_routing_sequence_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_routing_sequence_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_routing_sequence_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_routing_sequence_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionRoutingSequenceDatumType, sapProductionRoutingSequenceDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_routing_sequence_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_sequence_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingSequenceDatumUpsertCacheMut.Lock()
		sapProductionRoutingSequenceDatumUpsertCache[key] = cache
		sapProductionRoutingSequenceDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionRoutingSequenceDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionRoutingSequenceDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionRoutingSequenceDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionRoutingSequenceDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_routing_sequence_data` WHERE `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingSqncIntVers`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_routing_sequence_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_routing_sequence_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionRoutingSequenceDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionRoutingSequenceDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_routing_sequence_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_sequence_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionRoutingSequenceDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionRoutingSequenceDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingSequenceDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_routing_sequence_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingSequenceDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionRoutingSequenceDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_sequence_data")
	}

	if len(sapProductionRoutingSequenceDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionRoutingSequenceDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionRoutingSequenceDatum(ctx, exec, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingSequence, o.ProductionRoutingSqncIntVers)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionRoutingSequenceDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionRoutingSequenceDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingSequenceDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_routing_sequence_data`.* FROM `sap_production_routing_sequence_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingSequenceDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionRoutingSequenceDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionRoutingSequenceDatumExists checks if the SapProductionRoutingSequenceDatum row exists.
func SapProductionRoutingSequenceDatumExists(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingSqncIntVers string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_routing_sequence_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingSqncIntVers`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingSqncIntVers)
	}
	row := exec.QueryRowContext(ctx, sql, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingSqncIntVers)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_routing_sequence_data exists")
	}

	return exists, nil
}
