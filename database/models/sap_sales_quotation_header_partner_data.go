// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesQuotationHeaderPartnerDatum is an object representing the database table.
type SapSalesQuotationHeaderPartnerDatum struct {
	SalesQuotation  string      `boil:"SalesQuotation" json:"SalesQuotation" toml:"SalesQuotation" yaml:"SalesQuotation"`
	PartnerFunction string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	Customer        null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	Supplier        null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`

	R *sapSalesQuotationHeaderPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesQuotationHeaderPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesQuotationHeaderPartnerDatumColumns = struct {
	SalesQuotation  string
	PartnerFunction string
	Customer        string
	Supplier        string
}{
	SalesQuotation:  "SalesQuotation",
	PartnerFunction: "PartnerFunction",
	Customer:        "Customer",
	Supplier:        "Supplier",
}

var SapSalesQuotationHeaderPartnerDatumTableColumns = struct {
	SalesQuotation  string
	PartnerFunction string
	Customer        string
	Supplier        string
}{
	SalesQuotation:  "sap_sales_quotation_header_partner_data.SalesQuotation",
	PartnerFunction: "sap_sales_quotation_header_partner_data.PartnerFunction",
	Customer:        "sap_sales_quotation_header_partner_data.Customer",
	Supplier:        "sap_sales_quotation_header_partner_data.Supplier",
}

// Generated where

var SapSalesQuotationHeaderPartnerDatumWhere = struct {
	SalesQuotation  whereHelperstring
	PartnerFunction whereHelperstring
	Customer        whereHelpernull_String
	Supplier        whereHelpernull_String
}{
	SalesQuotation:  whereHelperstring{field: "`sap_sales_quotation_header_partner_data`.`SalesQuotation`"},
	PartnerFunction: whereHelperstring{field: "`sap_sales_quotation_header_partner_data`.`PartnerFunction`"},
	Customer:        whereHelpernull_String{field: "`sap_sales_quotation_header_partner_data`.`Customer`"},
	Supplier:        whereHelpernull_String{field: "`sap_sales_quotation_header_partner_data`.`Supplier`"},
}

// SapSalesQuotationHeaderPartnerDatumRels is where relationship names are stored.
var SapSalesQuotationHeaderPartnerDatumRels = struct {
	SalesQuotationSapSalesQuotationHeaderDatum string
}{
	SalesQuotationSapSalesQuotationHeaderDatum: "SalesQuotationSapSalesQuotationHeaderDatum",
}

// sapSalesQuotationHeaderPartnerDatumR is where relationships are stored.
type sapSalesQuotationHeaderPartnerDatumR struct {
	SalesQuotationSapSalesQuotationHeaderDatum *SapSalesQuotationHeaderDatum `boil:"SalesQuotationSapSalesQuotationHeaderDatum" json:"SalesQuotationSapSalesQuotationHeaderDatum" toml:"SalesQuotationSapSalesQuotationHeaderDatum" yaml:"SalesQuotationSapSalesQuotationHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesQuotationHeaderPartnerDatumR) NewStruct() *sapSalesQuotationHeaderPartnerDatumR {
	return &sapSalesQuotationHeaderPartnerDatumR{}
}

func (r *sapSalesQuotationHeaderPartnerDatumR) GetSalesQuotationSapSalesQuotationHeaderDatum() *SapSalesQuotationHeaderDatum {
	if r == nil {
		return nil
	}
	return r.SalesQuotationSapSalesQuotationHeaderDatum
}

// sapSalesQuotationHeaderPartnerDatumL is where Load methods for each relationship are stored.
type sapSalesQuotationHeaderPartnerDatumL struct{}

var (
	sapSalesQuotationHeaderPartnerDatumAllColumns            = []string{"SalesQuotation", "PartnerFunction", "Customer", "Supplier"}
	sapSalesQuotationHeaderPartnerDatumColumnsWithoutDefault = []string{"SalesQuotation", "PartnerFunction", "Customer", "Supplier"}
	sapSalesQuotationHeaderPartnerDatumColumnsWithDefault    = []string{}
	sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns     = []string{"SalesQuotation", "PartnerFunction"}
	sapSalesQuotationHeaderPartnerDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesQuotationHeaderPartnerDatumSlice is an alias for a slice of pointers to SapSalesQuotationHeaderPartnerDatum.
	// This should almost always be used instead of []SapSalesQuotationHeaderPartnerDatum.
	SapSalesQuotationHeaderPartnerDatumSlice []*SapSalesQuotationHeaderPartnerDatum
	// SapSalesQuotationHeaderPartnerDatumHook is the signature for custom SapSalesQuotationHeaderPartnerDatum hook methods
	SapSalesQuotationHeaderPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapSalesQuotationHeaderPartnerDatum) error

	sapSalesQuotationHeaderPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesQuotationHeaderPartnerDatumType                 = reflect.TypeOf(&SapSalesQuotationHeaderPartnerDatum{})
	sapSalesQuotationHeaderPartnerDatumMapping              = queries.MakeStructMapping(sapSalesQuotationHeaderPartnerDatumType)
	sapSalesQuotationHeaderPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns)
	sapSalesQuotationHeaderPartnerDatumInsertCacheMut       sync.RWMutex
	sapSalesQuotationHeaderPartnerDatumInsertCache          = make(map[string]insertCache)
	sapSalesQuotationHeaderPartnerDatumUpdateCacheMut       sync.RWMutex
	sapSalesQuotationHeaderPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapSalesQuotationHeaderPartnerDatumUpsertCacheMut       sync.RWMutex
	sapSalesQuotationHeaderPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesQuotationHeaderPartnerDatumAfterSelectHooks []SapSalesQuotationHeaderPartnerDatumHook

var sapSalesQuotationHeaderPartnerDatumBeforeInsertHooks []SapSalesQuotationHeaderPartnerDatumHook
var sapSalesQuotationHeaderPartnerDatumAfterInsertHooks []SapSalesQuotationHeaderPartnerDatumHook

var sapSalesQuotationHeaderPartnerDatumBeforeUpdateHooks []SapSalesQuotationHeaderPartnerDatumHook
var sapSalesQuotationHeaderPartnerDatumAfterUpdateHooks []SapSalesQuotationHeaderPartnerDatumHook

var sapSalesQuotationHeaderPartnerDatumBeforeDeleteHooks []SapSalesQuotationHeaderPartnerDatumHook
var sapSalesQuotationHeaderPartnerDatumAfterDeleteHooks []SapSalesQuotationHeaderPartnerDatumHook

var sapSalesQuotationHeaderPartnerDatumBeforeUpsertHooks []SapSalesQuotationHeaderPartnerDatumHook
var sapSalesQuotationHeaderPartnerDatumAfterUpsertHooks []SapSalesQuotationHeaderPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesQuotationHeaderPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesQuotationHeaderPartnerDatumHook registers your hook function for all future operations.
func AddSapSalesQuotationHeaderPartnerDatumHook(hookPoint boil.HookPoint, sapSalesQuotationHeaderPartnerDatumHook SapSalesQuotationHeaderPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesQuotationHeaderPartnerDatumAfterSelectHooks = append(sapSalesQuotationHeaderPartnerDatumAfterSelectHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.BeforeInsertHook:
		sapSalesQuotationHeaderPartnerDatumBeforeInsertHooks = append(sapSalesQuotationHeaderPartnerDatumBeforeInsertHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.AfterInsertHook:
		sapSalesQuotationHeaderPartnerDatumAfterInsertHooks = append(sapSalesQuotationHeaderPartnerDatumAfterInsertHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesQuotationHeaderPartnerDatumBeforeUpdateHooks = append(sapSalesQuotationHeaderPartnerDatumBeforeUpdateHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapSalesQuotationHeaderPartnerDatumAfterUpdateHooks = append(sapSalesQuotationHeaderPartnerDatumAfterUpdateHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesQuotationHeaderPartnerDatumBeforeDeleteHooks = append(sapSalesQuotationHeaderPartnerDatumBeforeDeleteHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapSalesQuotationHeaderPartnerDatumAfterDeleteHooks = append(sapSalesQuotationHeaderPartnerDatumAfterDeleteHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesQuotationHeaderPartnerDatumBeforeUpsertHooks = append(sapSalesQuotationHeaderPartnerDatumBeforeUpsertHooks, sapSalesQuotationHeaderPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapSalesQuotationHeaderPartnerDatumAfterUpsertHooks = append(sapSalesQuotationHeaderPartnerDatumAfterUpsertHooks, sapSalesQuotationHeaderPartnerDatumHook)
	}
}

// One returns a single sapSalesQuotationHeaderPartnerDatum record from the query.
func (q sapSalesQuotationHeaderPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesQuotationHeaderPartnerDatum, error) {
	o := &SapSalesQuotationHeaderPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_quotation_header_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesQuotationHeaderPartnerDatum records from the query.
func (q sapSalesQuotationHeaderPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesQuotationHeaderPartnerDatumSlice, error) {
	var o []*SapSalesQuotationHeaderPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesQuotationHeaderPartnerDatum slice")
	}

	if len(sapSalesQuotationHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesQuotationHeaderPartnerDatum records in the query.
func (q sapSalesQuotationHeaderPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_quotation_header_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesQuotationHeaderPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_quotation_header_partner_data exists")
	}

	return count > 0, nil
}

// SalesQuotationSapSalesQuotationHeaderDatum pointed to by the foreign key.
func (o *SapSalesQuotationHeaderPartnerDatum) SalesQuotationSapSalesQuotationHeaderDatum(mods ...qm.QueryMod) sapSalesQuotationHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesQuotation` = ?", o.SalesQuotation),
	}

	queryMods = append(queryMods, mods...)

	return SapSalesQuotationHeaderData(queryMods...)
}

// LoadSalesQuotationSapSalesQuotationHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesQuotationHeaderPartnerDatumL) LoadSalesQuotationSapSalesQuotationHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesQuotationHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesQuotationHeaderPartnerDatum
	var object *SapSalesQuotationHeaderPartnerDatum

	if singular {
		object = maybeSapSalesQuotationHeaderPartnerDatum.(*SapSalesQuotationHeaderPartnerDatum)
	} else {
		slice = *maybeSapSalesQuotationHeaderPartnerDatum.(*[]*SapSalesQuotationHeaderPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesQuotationHeaderPartnerDatumR{}
		}
		args = append(args, object.SalesQuotation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesQuotationHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesQuotation {
					continue Outer
				}
			}

			args = append(args, obj.SalesQuotation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_quotation_header_data`),
		qm.WhereIn(`sap_sales_quotation_header_data.SalesQuotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesQuotationHeaderDatum")
	}

	var resultSlice []*SapSalesQuotationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesQuotationHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_quotation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_quotation_header_data")
	}

	if len(sapSalesQuotationHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesQuotationSapSalesQuotationHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesQuotationHeaderDatumR{}
		}
		foreign.R.SalesQuotationSapSalesQuotationHeaderPartnerData = append(foreign.R.SalesQuotationSapSalesQuotationHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesQuotation == foreign.SalesQuotation {
				local.R.SalesQuotationSapSalesQuotationHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesQuotationHeaderDatumR{}
				}
				foreign.R.SalesQuotationSapSalesQuotationHeaderPartnerData = append(foreign.R.SalesQuotationSapSalesQuotationHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesQuotationSapSalesQuotationHeaderDatum of the sapSalesQuotationHeaderPartnerDatum to the related item.
// Sets o.R.SalesQuotationSapSalesQuotationHeaderDatum to related.
// Adds o to related.R.SalesQuotationSapSalesQuotationHeaderPartnerData.
func (o *SapSalesQuotationHeaderPartnerDatum) SetSalesQuotationSapSalesQuotationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesQuotationHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_quotation_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesQuotation"}),
		strmangle.WhereClause("`", "`", 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesQuotation, o.SalesQuotation, o.PartnerFunction}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesQuotation = related.SalesQuotation
	if o.R == nil {
		o.R = &sapSalesQuotationHeaderPartnerDatumR{
			SalesQuotationSapSalesQuotationHeaderDatum: related,
		}
	} else {
		o.R.SalesQuotationSapSalesQuotationHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesQuotationHeaderDatumR{
			SalesQuotationSapSalesQuotationHeaderPartnerData: SapSalesQuotationHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.SalesQuotationSapSalesQuotationHeaderPartnerData = append(related.R.SalesQuotationSapSalesQuotationHeaderPartnerData, o)
	}

	return nil
}

// SapSalesQuotationHeaderPartnerData retrieves all the records using an executor.
func SapSalesQuotationHeaderPartnerData(mods ...qm.QueryMod) sapSalesQuotationHeaderPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_sales_quotation_header_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_sales_quotation_header_partner_data`.*"})
	}

	return sapSalesQuotationHeaderPartnerDatumQuery{q}
}

// FindSapSalesQuotationHeaderPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesQuotationHeaderPartnerDatum(ctx context.Context, exec boil.ContextExecutor, salesQuotation string, partnerFunction string, selectCols ...string) (*SapSalesQuotationHeaderPartnerDatum, error) {
	sapSalesQuotationHeaderPartnerDatumObj := &SapSalesQuotationHeaderPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_quotation_header_partner_data` where `SalesQuotation`=? AND `PartnerFunction`=?", sel,
	)

	q := queries.Raw(query, salesQuotation, partnerFunction)

	err := q.Bind(ctx, exec, sapSalesQuotationHeaderPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_quotation_header_partner_data")
	}

	if err = sapSalesQuotationHeaderPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesQuotationHeaderPartnerDatumObj, err
	}

	return sapSalesQuotationHeaderPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesQuotationHeaderPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_quotation_header_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesQuotationHeaderPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesQuotationHeaderPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapSalesQuotationHeaderPartnerDatumInsertCache[key]
	sapSalesQuotationHeaderPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesQuotationHeaderPartnerDatumAllColumns,
			sapSalesQuotationHeaderPartnerDatumColumnsWithDefault,
			sapSalesQuotationHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_quotation_header_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_quotation_header_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_quotation_header_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_quotation_header_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesQuotation,
		o.PartnerFunction,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_quotation_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesQuotationHeaderPartnerDatumInsertCacheMut.Lock()
		sapSalesQuotationHeaderPartnerDatumInsertCache[key] = cache
		sapSalesQuotationHeaderPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesQuotationHeaderPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesQuotationHeaderPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesQuotationHeaderPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesQuotationHeaderPartnerDatumUpdateCache[key]
	sapSalesQuotationHeaderPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesQuotationHeaderPartnerDatumAllColumns,
			sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_quotation_header_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_quotation_header_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, append(wl, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_quotation_header_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_quotation_header_partner_data")
	}

	if !cached {
		sapSalesQuotationHeaderPartnerDatumUpdateCacheMut.Lock()
		sapSalesQuotationHeaderPartnerDatumUpdateCache[key] = cache
		sapSalesQuotationHeaderPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesQuotationHeaderPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_quotation_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_quotation_header_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesQuotationHeaderPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesQuotationHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_quotation_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesQuotationHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesQuotationHeaderPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesQuotationHeaderPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesQuotationHeaderPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_quotation_header_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesQuotationHeaderPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesQuotationHeaderPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesQuotationHeaderPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesQuotationHeaderPartnerDatumUpsertCache[key]
	sapSalesQuotationHeaderPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesQuotationHeaderPartnerDatumAllColumns,
			sapSalesQuotationHeaderPartnerDatumColumnsWithDefault,
			sapSalesQuotationHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesQuotationHeaderPartnerDatumAllColumns,
			sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_quotation_header_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_quotation_header_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_quotation_header_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_quotation_header_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesQuotationHeaderPartnerDatumType, sapSalesQuotationHeaderPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_quotation_header_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_quotation_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesQuotationHeaderPartnerDatumUpsertCacheMut.Lock()
		sapSalesQuotationHeaderPartnerDatumUpsertCache[key] = cache
		sapSalesQuotationHeaderPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesQuotationHeaderPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesQuotationHeaderPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesQuotationHeaderPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesQuotationHeaderPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_quotation_header_partner_data` WHERE `SalesQuotation`=? AND `PartnerFunction`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_quotation_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_quotation_header_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesQuotationHeaderPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesQuotationHeaderPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_quotation_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_quotation_header_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesQuotationHeaderPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesQuotationHeaderPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesQuotationHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_quotation_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesQuotationHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_quotation_header_partner_data")
	}

	if len(sapSalesQuotationHeaderPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesQuotationHeaderPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesQuotationHeaderPartnerDatum(ctx, exec, o.SalesQuotation, o.PartnerFunction)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesQuotationHeaderPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesQuotationHeaderPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesQuotationHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_quotation_header_partner_data`.* FROM `sap_sales_quotation_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesQuotationHeaderPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesQuotationHeaderPartnerDatumExists checks if the SapSalesQuotationHeaderPartnerDatum row exists.
func SapSalesQuotationHeaderPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, salesQuotation string, partnerFunction string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_quotation_header_partner_data` where `SalesQuotation`=? AND `PartnerFunction`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesQuotation, partnerFunction)
	}
	row := exec.QueryRowContext(ctx, sql, salesQuotation, partnerFunction)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_quotation_header_partner_data exists")
	}

	return exists, nil
}
