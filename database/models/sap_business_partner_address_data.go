// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerAddressDatum is an object representing the database table.
type SapBusinessPartnerAddressDatum struct {
	BusinessPartner   string      `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	AddressID         string      `boil:"AddressID" json:"AddressID" toml:"AddressID" yaml:"AddressID"`
	ValidityEndDate   string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	Country           null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	Region            null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	StreetName        null.String `boil:"StreetName" json:"StreetName,omitempty" toml:"StreetName" yaml:"StreetName,omitempty"`
	CityName          null.String `boil:"CityName" json:"CityName,omitempty" toml:"CityName" yaml:"CityName,omitempty"`
	PostalCode        null.String `boil:"PostalCode" json:"PostalCode,omitempty" toml:"PostalCode" yaml:"PostalCode,omitempty"`
	Language          null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`

	R *sapBusinessPartnerAddressDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerAddressDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerAddressDatumColumns = struct {
	BusinessPartner   string
	AddressID         string
	ValidityEndDate   string
	ValidityStartDate string
	Country           string
	Region            string
	StreetName        string
	CityName          string
	PostalCode        string
	Language          string
}{
	BusinessPartner:   "BusinessPartner",
	AddressID:         "AddressID",
	ValidityEndDate:   "ValidityEndDate",
	ValidityStartDate: "ValidityStartDate",
	Country:           "Country",
	Region:            "Region",
	StreetName:        "StreetName",
	CityName:          "CityName",
	PostalCode:        "PostalCode",
	Language:          "Language",
}

var SapBusinessPartnerAddressDatumTableColumns = struct {
	BusinessPartner   string
	AddressID         string
	ValidityEndDate   string
	ValidityStartDate string
	Country           string
	Region            string
	StreetName        string
	CityName          string
	PostalCode        string
	Language          string
}{
	BusinessPartner:   "sap_business_partner_address_data.BusinessPartner",
	AddressID:         "sap_business_partner_address_data.AddressID",
	ValidityEndDate:   "sap_business_partner_address_data.ValidityEndDate",
	ValidityStartDate: "sap_business_partner_address_data.ValidityStartDate",
	Country:           "sap_business_partner_address_data.Country",
	Region:            "sap_business_partner_address_data.Region",
	StreetName:        "sap_business_partner_address_data.StreetName",
	CityName:          "sap_business_partner_address_data.CityName",
	PostalCode:        "sap_business_partner_address_data.PostalCode",
	Language:          "sap_business_partner_address_data.Language",
}

// Generated where

var SapBusinessPartnerAddressDatumWhere = struct {
	BusinessPartner   whereHelperstring
	AddressID         whereHelperstring
	ValidityEndDate   whereHelperstring
	ValidityStartDate whereHelpernull_String
	Country           whereHelpernull_String
	Region            whereHelpernull_String
	StreetName        whereHelpernull_String
	CityName          whereHelpernull_String
	PostalCode        whereHelpernull_String
	Language          whereHelpernull_String
}{
	BusinessPartner:   whereHelperstring{field: "`sap_business_partner_address_data`.`BusinessPartner`"},
	AddressID:         whereHelperstring{field: "`sap_business_partner_address_data`.`AddressID`"},
	ValidityEndDate:   whereHelperstring{field: "`sap_business_partner_address_data`.`ValidityEndDate`"},
	ValidityStartDate: whereHelpernull_String{field: "`sap_business_partner_address_data`.`ValidityStartDate`"},
	Country:           whereHelpernull_String{field: "`sap_business_partner_address_data`.`Country`"},
	Region:            whereHelpernull_String{field: "`sap_business_partner_address_data`.`Region`"},
	StreetName:        whereHelpernull_String{field: "`sap_business_partner_address_data`.`StreetName`"},
	CityName:          whereHelpernull_String{field: "`sap_business_partner_address_data`.`CityName`"},
	PostalCode:        whereHelpernull_String{field: "`sap_business_partner_address_data`.`PostalCode`"},
	Language:          whereHelpernull_String{field: "`sap_business_partner_address_data`.`Language`"},
}

// SapBusinessPartnerAddressDatumRels is where relationship names are stored.
var SapBusinessPartnerAddressDatumRels = struct {
	BusinessPartnerSapBusinessPartnerGeneralDatum string
}{
	BusinessPartnerSapBusinessPartnerGeneralDatum: "BusinessPartnerSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerAddressDatumR is where relationships are stored.
type sapBusinessPartnerAddressDatumR struct {
	BusinessPartnerSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"BusinessPartnerSapBusinessPartnerGeneralDatum" json:"BusinessPartnerSapBusinessPartnerGeneralDatum" toml:"BusinessPartnerSapBusinessPartnerGeneralDatum" yaml:"BusinessPartnerSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerAddressDatumR) NewStruct() *sapBusinessPartnerAddressDatumR {
	return &sapBusinessPartnerAddressDatumR{}
}

// sapBusinessPartnerAddressDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerAddressDatumL struct{}

var (
	sapBusinessPartnerAddressDatumAllColumns            = []string{"BusinessPartner", "AddressID", "ValidityEndDate", "ValidityStartDate", "Country", "Region", "StreetName", "CityName", "PostalCode", "Language"}
	sapBusinessPartnerAddressDatumColumnsWithoutDefault = []string{"BusinessPartner", "AddressID", "ValidityEndDate", "ValidityStartDate", "Country", "Region", "StreetName", "CityName", "PostalCode", "Language"}
	sapBusinessPartnerAddressDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerAddressDatumPrimaryKeyColumns     = []string{"BusinessPartner", "AddressID", "ValidityEndDate"}
)

type (
	// SapBusinessPartnerAddressDatumSlice is an alias for a slice of pointers to SapBusinessPartnerAddressDatum.
	// This should almost always be used instead of []SapBusinessPartnerAddressDatum.
	SapBusinessPartnerAddressDatumSlice []*SapBusinessPartnerAddressDatum
	// SapBusinessPartnerAddressDatumHook is the signature for custom SapBusinessPartnerAddressDatum hook methods
	SapBusinessPartnerAddressDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerAddressDatum) error

	sapBusinessPartnerAddressDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerAddressDatumType                 = reflect.TypeOf(&SapBusinessPartnerAddressDatum{})
	sapBusinessPartnerAddressDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerAddressDatumType)
	sapBusinessPartnerAddressDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, sapBusinessPartnerAddressDatumPrimaryKeyColumns)
	sapBusinessPartnerAddressDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerAddressDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerAddressDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerAddressDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerAddressDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerAddressDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerAddressDatumBeforeInsertHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumBeforeUpdateHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumBeforeDeleteHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumBeforeUpsertHooks []SapBusinessPartnerAddressDatumHook

var sapBusinessPartnerAddressDatumAfterInsertHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumAfterSelectHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumAfterUpdateHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumAfterDeleteHooks []SapBusinessPartnerAddressDatumHook
var sapBusinessPartnerAddressDatumAfterUpsertHooks []SapBusinessPartnerAddressDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerAddressDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerAddressDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerAddressDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerAddressDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerAddressDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerAddressDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerAddressDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerAddressDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerAddressDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerAddressDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerAddressDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerAddressDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerAddressDatumHook SapBusinessPartnerAddressDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapBusinessPartnerAddressDatumBeforeInsertHooks = append(sapBusinessPartnerAddressDatumBeforeInsertHooks, sapBusinessPartnerAddressDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerAddressDatumBeforeUpdateHooks = append(sapBusinessPartnerAddressDatumBeforeUpdateHooks, sapBusinessPartnerAddressDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerAddressDatumBeforeDeleteHooks = append(sapBusinessPartnerAddressDatumBeforeDeleteHooks, sapBusinessPartnerAddressDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerAddressDatumBeforeUpsertHooks = append(sapBusinessPartnerAddressDatumBeforeUpsertHooks, sapBusinessPartnerAddressDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerAddressDatumAfterInsertHooks = append(sapBusinessPartnerAddressDatumAfterInsertHooks, sapBusinessPartnerAddressDatumHook)
	case boil.AfterSelectHook:
		sapBusinessPartnerAddressDatumAfterSelectHooks = append(sapBusinessPartnerAddressDatumAfterSelectHooks, sapBusinessPartnerAddressDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerAddressDatumAfterUpdateHooks = append(sapBusinessPartnerAddressDatumAfterUpdateHooks, sapBusinessPartnerAddressDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerAddressDatumAfterDeleteHooks = append(sapBusinessPartnerAddressDatumAfterDeleteHooks, sapBusinessPartnerAddressDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerAddressDatumAfterUpsertHooks = append(sapBusinessPartnerAddressDatumAfterUpsertHooks, sapBusinessPartnerAddressDatumHook)
	}
}

// One returns a single sapBusinessPartnerAddressDatum record from the query.
func (q sapBusinessPartnerAddressDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerAddressDatum, error) {
	o := &SapBusinessPartnerAddressDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_address_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerAddressDatum records from the query.
func (q sapBusinessPartnerAddressDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerAddressDatumSlice, error) {
	var o []*SapBusinessPartnerAddressDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerAddressDatum slice")
	}

	if len(sapBusinessPartnerAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerAddressDatum records in the query.
func (q sapBusinessPartnerAddressDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_address_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerAddressDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_address_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerAddressDatum) BusinessPartnerSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadBusinessPartnerSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerAddressDatumL) LoadBusinessPartnerSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerAddressDatum
	var object *SapBusinessPartnerAddressDatum

	if singular {
		object = maybeSapBusinessPartnerAddressDatum.(*SapBusinessPartnerAddressDatum)
	} else {
		slice = *maybeSapBusinessPartnerAddressDatum.(*[]*SapBusinessPartnerAddressDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerAddressDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerSapBusinessPartnerAddressData = append(foreign.R.BusinessPartnerSapBusinessPartnerAddressData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerSapBusinessPartnerAddressData = append(foreign.R.BusinessPartnerSapBusinessPartnerAddressData, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerSapBusinessPartnerGeneralDatum of the sapBusinessPartnerAddressDatum to the related item.
// Sets o.R.BusinessPartnerSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerSapBusinessPartnerAddressData.
func (o *SapBusinessPartnerAddressDatum) SetBusinessPartnerSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.AddressID, o.ValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerAddressDatumR{
			BusinessPartnerSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			BusinessPartnerSapBusinessPartnerAddressData: SapBusinessPartnerAddressDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerSapBusinessPartnerAddressData = append(related.R.BusinessPartnerSapBusinessPartnerAddressData, o)
	}

	return nil
}

// SapBusinessPartnerAddressData retrieves all the records using an executor.
func SapBusinessPartnerAddressData(mods ...qm.QueryMod) sapBusinessPartnerAddressDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_address_data`"))
	return sapBusinessPartnerAddressDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerAddressDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerAddressDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner string, addressID string, validityEndDate string, selectCols ...string) (*SapBusinessPartnerAddressDatum, error) {
	sapBusinessPartnerAddressDatumObj := &SapBusinessPartnerAddressDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_address_data` where `BusinessPartner`=? AND `AddressID`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, businessPartner, addressID, validityEndDate)

	err := q.Bind(ctx, exec, sapBusinessPartnerAddressDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_address_data")
	}

	if err = sapBusinessPartnerAddressDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerAddressDatumObj, err
	}

	return sapBusinessPartnerAddressDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerAddressDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_address_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerAddressDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerAddressDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerAddressDatumInsertCache[key]
	sapBusinessPartnerAddressDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerAddressDatumAllColumns,
			sapBusinessPartnerAddressDatumColumnsWithDefault,
			sapBusinessPartnerAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_address_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_address_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_address_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_address_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.AddressID,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_address_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerAddressDatumInsertCacheMut.Lock()
		sapBusinessPartnerAddressDatumInsertCache[key] = cache
		sapBusinessPartnerAddressDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerAddressDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerAddressDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerAddressDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerAddressDatumUpdateCache[key]
	sapBusinessPartnerAddressDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerAddressDatumAllColumns,
			sapBusinessPartnerAddressDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_address_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_address_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, append(wl, sapBusinessPartnerAddressDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_address_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_address_data")
	}

	if !cached {
		sapBusinessPartnerAddressDatumUpdateCacheMut.Lock()
		sapBusinessPartnerAddressDatumUpdateCache[key] = cache
		sapBusinessPartnerAddressDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerAddressDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_address_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerAddressDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerAddressDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerAddressDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerAddressDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_address_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerAddressDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerAddressDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerAddressDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerAddressDatumUpsertCache[key]
	sapBusinessPartnerAddressDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerAddressDatumAllColumns,
			sapBusinessPartnerAddressDatumColumnsWithDefault,
			sapBusinessPartnerAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerAddressDatumAllColumns,
			sapBusinessPartnerAddressDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_address_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_address_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_address_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_address_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerAddressDatumType, sapBusinessPartnerAddressDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_address_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_address_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerAddressDatumUpsertCacheMut.Lock()
		sapBusinessPartnerAddressDatumUpsertCache[key] = cache
		sapBusinessPartnerAddressDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerAddressDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerAddressDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerAddressDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerAddressDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_address_data` WHERE `BusinessPartner`=? AND `AddressID`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_address_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerAddressDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerAddressDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_address_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerAddressDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerAddressDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_address_data")
	}

	if len(sapBusinessPartnerAddressDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerAddressDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerAddressDatum(ctx, exec, o.BusinessPartner, o.AddressID, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerAddressDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerAddressDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_address_data`.* FROM `sap_business_partner_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerAddressDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerAddressDatumExists checks if the SapBusinessPartnerAddressDatum row exists.
func SapBusinessPartnerAddressDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner string, addressID string, validityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_address_data` where `BusinessPartner`=? AND `AddressID`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, addressID, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, addressID, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_address_data exists")
	}

	return exists, nil
}
