// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCustomerReturnItemProcessStepDatum is an object representing the database table.
type SapCustomerReturnItemProcessStepDatum struct {
	RetsMgmtProcess               string      `boil:"RetsMgmtProcess" json:"RetsMgmtProcess" toml:"RetsMgmtProcess" yaml:"RetsMgmtProcess"`
	RetsMgmtProcessItem           string      `boil:"RetsMgmtProcessItem" json:"RetsMgmtProcessItem" toml:"RetsMgmtProcessItem" yaml:"RetsMgmtProcessItem"`
	RetsMgmtProcItmQtySplit       string      `boil:"RetsMgmtProcItmQtySplit" json:"RetsMgmtProcItmQtySplit" toml:"RetsMgmtProcItmQtySplit" yaml:"RetsMgmtProcItmQtySplit"`
	RetsMgmtProcessStep           string      `boil:"RetsMgmtProcessStep" json:"RetsMgmtProcessStep" toml:"RetsMgmtProcessStep" yaml:"RetsMgmtProcessStep"`
	CustomerReturn                null.String `boil:"CustomerReturn" json:"CustomerReturn,omitempty" toml:"CustomerReturn" yaml:"CustomerReturn,omitempty"`
	ReturnsDocumentType           null.String `boil:"ReturnsDocumentType" json:"ReturnsDocumentType,omitempty" toml:"ReturnsDocumentType" yaml:"ReturnsDocumentType,omitempty"`
	ReturnsDocument               null.String `boil:"ReturnsDocument" json:"ReturnsDocument,omitempty" toml:"ReturnsDocument" yaml:"ReturnsDocument,omitempty"`
	ReturnsDocumentItem           null.String `boil:"ReturnsDocumentItem" json:"ReturnsDocumentItem,omitempty" toml:"ReturnsDocumentItem" yaml:"ReturnsDocumentItem,omitempty"`
	ReturnsDocumentStatus         null.String `boil:"ReturnsDocumentStatus" json:"ReturnsDocumentStatus,omitempty" toml:"ReturnsDocumentStatus" yaml:"ReturnsDocumentStatus,omitempty"`
	ReturnsDocumentApprovalStatus null.String `boil:"ReturnsDocumentApprovalStatus" json:"ReturnsDocumentApprovalStatus,omitempty" toml:"ReturnsDocumentApprovalStatus" yaml:"ReturnsDocumentApprovalStatus,omitempty"`
	ReturnsReferenceDocumentType  null.String `boil:"ReturnsReferenceDocumentType" json:"ReturnsReferenceDocumentType,omitempty" toml:"ReturnsReferenceDocumentType" yaml:"ReturnsReferenceDocumentType,omitempty"`
	ReturnsReferenceDocument      null.String `boil:"ReturnsReferenceDocument" json:"ReturnsReferenceDocument,omitempty" toml:"ReturnsReferenceDocument" yaml:"ReturnsReferenceDocument,omitempty"`
	ReturnsReferenceDocumentItem  null.String `boil:"ReturnsReferenceDocumentItem" json:"ReturnsReferenceDocumentItem,omitempty" toml:"ReturnsReferenceDocumentItem" yaml:"ReturnsReferenceDocumentItem,omitempty"`
	RetsMgmtProcStepExecStatus    null.String `boil:"RetsMgmtProcStepExecStatus" json:"RetsMgmtProcStepExecStatus,omitempty" toml:"RetsMgmtProcStepExecStatus" yaml:"RetsMgmtProcStepExecStatus,omitempty"`

	R *sapCustomerReturnItemProcessStepDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCustomerReturnItemProcessStepDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCustomerReturnItemProcessStepDatumColumns = struct {
	RetsMgmtProcess               string
	RetsMgmtProcessItem           string
	RetsMgmtProcItmQtySplit       string
	RetsMgmtProcessStep           string
	CustomerReturn                string
	ReturnsDocumentType           string
	ReturnsDocument               string
	ReturnsDocumentItem           string
	ReturnsDocumentStatus         string
	ReturnsDocumentApprovalStatus string
	ReturnsReferenceDocumentType  string
	ReturnsReferenceDocument      string
	ReturnsReferenceDocumentItem  string
	RetsMgmtProcStepExecStatus    string
}{
	RetsMgmtProcess:               "RetsMgmtProcess",
	RetsMgmtProcessItem:           "RetsMgmtProcessItem",
	RetsMgmtProcItmQtySplit:       "RetsMgmtProcItmQtySplit",
	RetsMgmtProcessStep:           "RetsMgmtProcessStep",
	CustomerReturn:                "CustomerReturn",
	ReturnsDocumentType:           "ReturnsDocumentType",
	ReturnsDocument:               "ReturnsDocument",
	ReturnsDocumentItem:           "ReturnsDocumentItem",
	ReturnsDocumentStatus:         "ReturnsDocumentStatus",
	ReturnsDocumentApprovalStatus: "ReturnsDocumentApprovalStatus",
	ReturnsReferenceDocumentType:  "ReturnsReferenceDocumentType",
	ReturnsReferenceDocument:      "ReturnsReferenceDocument",
	ReturnsReferenceDocumentItem:  "ReturnsReferenceDocumentItem",
	RetsMgmtProcStepExecStatus:    "RetsMgmtProcStepExecStatus",
}

var SapCustomerReturnItemProcessStepDatumTableColumns = struct {
	RetsMgmtProcess               string
	RetsMgmtProcessItem           string
	RetsMgmtProcItmQtySplit       string
	RetsMgmtProcessStep           string
	CustomerReturn                string
	ReturnsDocumentType           string
	ReturnsDocument               string
	ReturnsDocumentItem           string
	ReturnsDocumentStatus         string
	ReturnsDocumentApprovalStatus string
	ReturnsReferenceDocumentType  string
	ReturnsReferenceDocument      string
	ReturnsReferenceDocumentItem  string
	RetsMgmtProcStepExecStatus    string
}{
	RetsMgmtProcess:               "sap_customer_return_item_process_step_data.RetsMgmtProcess",
	RetsMgmtProcessItem:           "sap_customer_return_item_process_step_data.RetsMgmtProcessItem",
	RetsMgmtProcItmQtySplit:       "sap_customer_return_item_process_step_data.RetsMgmtProcItmQtySplit",
	RetsMgmtProcessStep:           "sap_customer_return_item_process_step_data.RetsMgmtProcessStep",
	CustomerReturn:                "sap_customer_return_item_process_step_data.CustomerReturn",
	ReturnsDocumentType:           "sap_customer_return_item_process_step_data.ReturnsDocumentType",
	ReturnsDocument:               "sap_customer_return_item_process_step_data.ReturnsDocument",
	ReturnsDocumentItem:           "sap_customer_return_item_process_step_data.ReturnsDocumentItem",
	ReturnsDocumentStatus:         "sap_customer_return_item_process_step_data.ReturnsDocumentStatus",
	ReturnsDocumentApprovalStatus: "sap_customer_return_item_process_step_data.ReturnsDocumentApprovalStatus",
	ReturnsReferenceDocumentType:  "sap_customer_return_item_process_step_data.ReturnsReferenceDocumentType",
	ReturnsReferenceDocument:      "sap_customer_return_item_process_step_data.ReturnsReferenceDocument",
	ReturnsReferenceDocumentItem:  "sap_customer_return_item_process_step_data.ReturnsReferenceDocumentItem",
	RetsMgmtProcStepExecStatus:    "sap_customer_return_item_process_step_data.RetsMgmtProcStepExecStatus",
}

// Generated where

var SapCustomerReturnItemProcessStepDatumWhere = struct {
	RetsMgmtProcess               whereHelperstring
	RetsMgmtProcessItem           whereHelperstring
	RetsMgmtProcItmQtySplit       whereHelperstring
	RetsMgmtProcessStep           whereHelperstring
	CustomerReturn                whereHelpernull_String
	ReturnsDocumentType           whereHelpernull_String
	ReturnsDocument               whereHelpernull_String
	ReturnsDocumentItem           whereHelpernull_String
	ReturnsDocumentStatus         whereHelpernull_String
	ReturnsDocumentApprovalStatus whereHelpernull_String
	ReturnsReferenceDocumentType  whereHelpernull_String
	ReturnsReferenceDocument      whereHelpernull_String
	ReturnsReferenceDocumentItem  whereHelpernull_String
	RetsMgmtProcStepExecStatus    whereHelpernull_String
}{
	RetsMgmtProcess:               whereHelperstring{field: "`sap_customer_return_item_process_step_data`.`RetsMgmtProcess`"},
	RetsMgmtProcessItem:           whereHelperstring{field: "`sap_customer_return_item_process_step_data`.`RetsMgmtProcessItem`"},
	RetsMgmtProcItmQtySplit:       whereHelperstring{field: "`sap_customer_return_item_process_step_data`.`RetsMgmtProcItmQtySplit`"},
	RetsMgmtProcessStep:           whereHelperstring{field: "`sap_customer_return_item_process_step_data`.`RetsMgmtProcessStep`"},
	CustomerReturn:                whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`CustomerReturn`"},
	ReturnsDocumentType:           whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsDocumentType`"},
	ReturnsDocument:               whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsDocument`"},
	ReturnsDocumentItem:           whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsDocumentItem`"},
	ReturnsDocumentStatus:         whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsDocumentStatus`"},
	ReturnsDocumentApprovalStatus: whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsDocumentApprovalStatus`"},
	ReturnsReferenceDocumentType:  whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsReferenceDocumentType`"},
	ReturnsReferenceDocument:      whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsReferenceDocument`"},
	ReturnsReferenceDocumentItem:  whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`ReturnsReferenceDocumentItem`"},
	RetsMgmtProcStepExecStatus:    whereHelpernull_String{field: "`sap_customer_return_item_process_step_data`.`RetsMgmtProcStepExecStatus`"},
}

// SapCustomerReturnItemProcessStepDatumRels is where relationship names are stored.
var SapCustomerReturnItemProcessStepDatumRels = struct {
	CustomerReturnSapCustomerReturnHeaderDatum string
}{
	CustomerReturnSapCustomerReturnHeaderDatum: "CustomerReturnSapCustomerReturnHeaderDatum",
}

// sapCustomerReturnItemProcessStepDatumR is where relationships are stored.
type sapCustomerReturnItemProcessStepDatumR struct {
	CustomerReturnSapCustomerReturnHeaderDatum *SapCustomerReturnHeaderDatum `boil:"CustomerReturnSapCustomerReturnHeaderDatum" json:"CustomerReturnSapCustomerReturnHeaderDatum" toml:"CustomerReturnSapCustomerReturnHeaderDatum" yaml:"CustomerReturnSapCustomerReturnHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCustomerReturnItemProcessStepDatumR) NewStruct() *sapCustomerReturnItemProcessStepDatumR {
	return &sapCustomerReturnItemProcessStepDatumR{}
}

func (r *sapCustomerReturnItemProcessStepDatumR) GetCustomerReturnSapCustomerReturnHeaderDatum() *SapCustomerReturnHeaderDatum {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnHeaderDatum
}

// sapCustomerReturnItemProcessStepDatumL is where Load methods for each relationship are stored.
type sapCustomerReturnItemProcessStepDatumL struct{}

var (
	sapCustomerReturnItemProcessStepDatumAllColumns            = []string{"RetsMgmtProcess", "RetsMgmtProcessItem", "RetsMgmtProcItmQtySplit", "RetsMgmtProcessStep", "CustomerReturn", "ReturnsDocumentType", "ReturnsDocument", "ReturnsDocumentItem", "ReturnsDocumentStatus", "ReturnsDocumentApprovalStatus", "ReturnsReferenceDocumentType", "ReturnsReferenceDocument", "ReturnsReferenceDocumentItem", "RetsMgmtProcStepExecStatus"}
	sapCustomerReturnItemProcessStepDatumColumnsWithoutDefault = []string{"RetsMgmtProcess", "RetsMgmtProcessItem", "RetsMgmtProcItmQtySplit", "RetsMgmtProcessStep", "CustomerReturn", "ReturnsDocumentType", "ReturnsDocument", "ReturnsDocumentItem", "ReturnsDocumentStatus", "ReturnsDocumentApprovalStatus", "ReturnsReferenceDocumentType", "ReturnsReferenceDocument", "ReturnsReferenceDocumentItem", "RetsMgmtProcStepExecStatus"}
	sapCustomerReturnItemProcessStepDatumColumnsWithDefault    = []string{}
	sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns     = []string{"RetsMgmtProcess", "RetsMgmtProcessItem", "RetsMgmtProcItmQtySplit", "RetsMgmtProcessStep"}
	sapCustomerReturnItemProcessStepDatumGeneratedColumns      = []string{}
)

type (
	// SapCustomerReturnItemProcessStepDatumSlice is an alias for a slice of pointers to SapCustomerReturnItemProcessStepDatum.
	// This should almost always be used instead of []SapCustomerReturnItemProcessStepDatum.
	SapCustomerReturnItemProcessStepDatumSlice []*SapCustomerReturnItemProcessStepDatum
	// SapCustomerReturnItemProcessStepDatumHook is the signature for custom SapCustomerReturnItemProcessStepDatum hook methods
	SapCustomerReturnItemProcessStepDatumHook func(context.Context, boil.ContextExecutor, *SapCustomerReturnItemProcessStepDatum) error

	sapCustomerReturnItemProcessStepDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCustomerReturnItemProcessStepDatumType                 = reflect.TypeOf(&SapCustomerReturnItemProcessStepDatum{})
	sapCustomerReturnItemProcessStepDatumMapping              = queries.MakeStructMapping(sapCustomerReturnItemProcessStepDatumType)
	sapCustomerReturnItemProcessStepDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns)
	sapCustomerReturnItemProcessStepDatumInsertCacheMut       sync.RWMutex
	sapCustomerReturnItemProcessStepDatumInsertCache          = make(map[string]insertCache)
	sapCustomerReturnItemProcessStepDatumUpdateCacheMut       sync.RWMutex
	sapCustomerReturnItemProcessStepDatumUpdateCache          = make(map[string]updateCache)
	sapCustomerReturnItemProcessStepDatumUpsertCacheMut       sync.RWMutex
	sapCustomerReturnItemProcessStepDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCustomerReturnItemProcessStepDatumAfterSelectHooks []SapCustomerReturnItemProcessStepDatumHook

var sapCustomerReturnItemProcessStepDatumBeforeInsertHooks []SapCustomerReturnItemProcessStepDatumHook
var sapCustomerReturnItemProcessStepDatumAfterInsertHooks []SapCustomerReturnItemProcessStepDatumHook

var sapCustomerReturnItemProcessStepDatumBeforeUpdateHooks []SapCustomerReturnItemProcessStepDatumHook
var sapCustomerReturnItemProcessStepDatumAfterUpdateHooks []SapCustomerReturnItemProcessStepDatumHook

var sapCustomerReturnItemProcessStepDatumBeforeDeleteHooks []SapCustomerReturnItemProcessStepDatumHook
var sapCustomerReturnItemProcessStepDatumAfterDeleteHooks []SapCustomerReturnItemProcessStepDatumHook

var sapCustomerReturnItemProcessStepDatumBeforeUpsertHooks []SapCustomerReturnItemProcessStepDatumHook
var sapCustomerReturnItemProcessStepDatumAfterUpsertHooks []SapCustomerReturnItemProcessStepDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCustomerReturnItemProcessStepDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemProcessStepDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCustomerReturnItemProcessStepDatumHook registers your hook function for all future operations.
func AddSapCustomerReturnItemProcessStepDatumHook(hookPoint boil.HookPoint, sapCustomerReturnItemProcessStepDatumHook SapCustomerReturnItemProcessStepDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCustomerReturnItemProcessStepDatumAfterSelectHooks = append(sapCustomerReturnItemProcessStepDatumAfterSelectHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.BeforeInsertHook:
		sapCustomerReturnItemProcessStepDatumBeforeInsertHooks = append(sapCustomerReturnItemProcessStepDatumBeforeInsertHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.AfterInsertHook:
		sapCustomerReturnItemProcessStepDatumAfterInsertHooks = append(sapCustomerReturnItemProcessStepDatumAfterInsertHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.BeforeUpdateHook:
		sapCustomerReturnItemProcessStepDatumBeforeUpdateHooks = append(sapCustomerReturnItemProcessStepDatumBeforeUpdateHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.AfterUpdateHook:
		sapCustomerReturnItemProcessStepDatumAfterUpdateHooks = append(sapCustomerReturnItemProcessStepDatumAfterUpdateHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.BeforeDeleteHook:
		sapCustomerReturnItemProcessStepDatumBeforeDeleteHooks = append(sapCustomerReturnItemProcessStepDatumBeforeDeleteHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.AfterDeleteHook:
		sapCustomerReturnItemProcessStepDatumAfterDeleteHooks = append(sapCustomerReturnItemProcessStepDatumAfterDeleteHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.BeforeUpsertHook:
		sapCustomerReturnItemProcessStepDatumBeforeUpsertHooks = append(sapCustomerReturnItemProcessStepDatumBeforeUpsertHooks, sapCustomerReturnItemProcessStepDatumHook)
	case boil.AfterUpsertHook:
		sapCustomerReturnItemProcessStepDatumAfterUpsertHooks = append(sapCustomerReturnItemProcessStepDatumAfterUpsertHooks, sapCustomerReturnItemProcessStepDatumHook)
	}
}

// One returns a single sapCustomerReturnItemProcessStepDatum record from the query.
func (q sapCustomerReturnItemProcessStepDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCustomerReturnItemProcessStepDatum, error) {
	o := &SapCustomerReturnItemProcessStepDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_customer_return_item_process_step_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCustomerReturnItemProcessStepDatum records from the query.
func (q sapCustomerReturnItemProcessStepDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCustomerReturnItemProcessStepDatumSlice, error) {
	var o []*SapCustomerReturnItemProcessStepDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCustomerReturnItemProcessStepDatum slice")
	}

	if len(sapCustomerReturnItemProcessStepDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCustomerReturnItemProcessStepDatum records in the query.
func (q sapCustomerReturnItemProcessStepDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_customer_return_item_process_step_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCustomerReturnItemProcessStepDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_customer_return_item_process_step_data exists")
	}

	return count > 0, nil
}

// CustomerReturnSapCustomerReturnHeaderDatum pointed to by the foreign key.
func (o *SapCustomerReturnItemProcessStepDatum) CustomerReturnSapCustomerReturnHeaderDatum(mods ...qm.QueryMod) sapCustomerReturnHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CustomerReturn` = ?", o.CustomerReturn),
	}

	queryMods = append(queryMods, mods...)

	return SapCustomerReturnHeaderData(queryMods...)
}

// LoadCustomerReturnSapCustomerReturnHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCustomerReturnItemProcessStepDatumL) LoadCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnItemProcessStepDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnItemProcessStepDatum
	var object *SapCustomerReturnItemProcessStepDatum

	if singular {
		object = maybeSapCustomerReturnItemProcessStepDatum.(*SapCustomerReturnItemProcessStepDatum)
	} else {
		slice = *maybeSapCustomerReturnItemProcessStepDatum.(*[]*SapCustomerReturnItemProcessStepDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnItemProcessStepDatumR{}
		}
		if !queries.IsNil(object.CustomerReturn) {
			args = append(args, object.CustomerReturn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnItemProcessStepDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerReturn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CustomerReturn) {
				args = append(args, obj.CustomerReturn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_header_data`),
		qm.WhereIn(`sap_customer_return_header_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCustomerReturnHeaderDatum")
	}

	var resultSlice []*SapCustomerReturnHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCustomerReturnHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_customer_return_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_header_data")
	}

	if len(sapCustomerReturnItemProcessStepDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomerReturnSapCustomerReturnHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCustomerReturnHeaderDatumR{}
		}
		foreign.R.CustomerReturnSapCustomerReturnItemProcessStepData = append(foreign.R.CustomerReturnSapCustomerReturnItemProcessStepData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CustomerReturn, foreign.CustomerReturn) {
				local.R.CustomerReturnSapCustomerReturnHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnHeaderDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnItemProcessStepData = append(foreign.R.CustomerReturnSapCustomerReturnItemProcessStepData, local)
				break
			}
		}
	}

	return nil
}

// SetCustomerReturnSapCustomerReturnHeaderDatum of the sapCustomerReturnItemProcessStepDatum to the related item.
// Sets o.R.CustomerReturnSapCustomerReturnHeaderDatum to related.
// Adds o to related.R.CustomerReturnSapCustomerReturnItemProcessStepData.
func (o *SapCustomerReturnItemProcessStepDatum) SetCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCustomerReturnHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_customer_return_item_process_step_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
		strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CustomerReturn, o.RetsMgmtProcess, o.RetsMgmtProcessItem, o.RetsMgmtProcItmQtySplit, o.RetsMgmtProcessStep}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CustomerReturn, related.CustomerReturn)
	if o.R == nil {
		o.R = &sapCustomerReturnItemProcessStepDatumR{
			CustomerReturnSapCustomerReturnHeaderDatum: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemProcessStepData: SapCustomerReturnItemProcessStepDatumSlice{o},
		}
	} else {
		related.R.CustomerReturnSapCustomerReturnItemProcessStepData = append(related.R.CustomerReturnSapCustomerReturnItemProcessStepData, o)
	}

	return nil
}

// RemoveCustomerReturnSapCustomerReturnHeaderDatum relationship.
// Sets o.R.CustomerReturnSapCustomerReturnHeaderDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SapCustomerReturnItemProcessStepDatum) RemoveCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *SapCustomerReturnHeaderDatum) error {
	var err error

	queries.SetScanner(&o.CustomerReturn, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("CustomerReturn")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CustomerReturnSapCustomerReturnHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CustomerReturnSapCustomerReturnItemProcessStepData {
		if queries.Equal(o.CustomerReturn, ri.CustomerReturn) {
			continue
		}

		ln := len(related.R.CustomerReturnSapCustomerReturnItemProcessStepData)
		if ln > 1 && i < ln-1 {
			related.R.CustomerReturnSapCustomerReturnItemProcessStepData[i] = related.R.CustomerReturnSapCustomerReturnItemProcessStepData[ln-1]
		}
		related.R.CustomerReturnSapCustomerReturnItemProcessStepData = related.R.CustomerReturnSapCustomerReturnItemProcessStepData[:ln-1]
		break
	}
	return nil
}

// SapCustomerReturnItemProcessStepData retrieves all the records using an executor.
func SapCustomerReturnItemProcessStepData(mods ...qm.QueryMod) sapCustomerReturnItemProcessStepDatumQuery {
	mods = append(mods, qm.From("`sap_customer_return_item_process_step_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_customer_return_item_process_step_data`.*"})
	}

	return sapCustomerReturnItemProcessStepDatumQuery{q}
}

// FindSapCustomerReturnItemProcessStepDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCustomerReturnItemProcessStepDatum(ctx context.Context, exec boil.ContextExecutor, retsMgmtProcess string, retsMgmtProcessItem string, retsMgmtProcItmQtySplit string, retsMgmtProcessStep string, selectCols ...string) (*SapCustomerReturnItemProcessStepDatum, error) {
	sapCustomerReturnItemProcessStepDatumObj := &SapCustomerReturnItemProcessStepDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_customer_return_item_process_step_data` where `RetsMgmtProcess`=? AND `RetsMgmtProcessItem`=? AND `RetsMgmtProcItmQtySplit`=? AND `RetsMgmtProcessStep`=?", sel,
	)

	q := queries.Raw(query, retsMgmtProcess, retsMgmtProcessItem, retsMgmtProcItmQtySplit, retsMgmtProcessStep)

	err := q.Bind(ctx, exec, sapCustomerReturnItemProcessStepDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_customer_return_item_process_step_data")
	}

	if err = sapCustomerReturnItemProcessStepDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCustomerReturnItemProcessStepDatumObj, err
	}

	return sapCustomerReturnItemProcessStepDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCustomerReturnItemProcessStepDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_item_process_step_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnItemProcessStepDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCustomerReturnItemProcessStepDatumInsertCacheMut.RLock()
	cache, cached := sapCustomerReturnItemProcessStepDatumInsertCache[key]
	sapCustomerReturnItemProcessStepDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCustomerReturnItemProcessStepDatumAllColumns,
			sapCustomerReturnItemProcessStepDatumColumnsWithDefault,
			sapCustomerReturnItemProcessStepDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_customer_return_item_process_step_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_customer_return_item_process_step_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_customer_return_item_process_step_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_customer_return_item_process_step_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RetsMgmtProcess,
		o.RetsMgmtProcessItem,
		o.RetsMgmtProcItmQtySplit,
		o.RetsMgmtProcessStep,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_item_process_step_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnItemProcessStepDatumInsertCacheMut.Lock()
		sapCustomerReturnItemProcessStepDatumInsertCache[key] = cache
		sapCustomerReturnItemProcessStepDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCustomerReturnItemProcessStepDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCustomerReturnItemProcessStepDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCustomerReturnItemProcessStepDatumUpdateCacheMut.RLock()
	cache, cached := sapCustomerReturnItemProcessStepDatumUpdateCache[key]
	sapCustomerReturnItemProcessStepDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCustomerReturnItemProcessStepDatumAllColumns,
			sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_customer_return_item_process_step_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_customer_return_item_process_step_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, append(wl, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_customer_return_item_process_step_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_customer_return_item_process_step_data")
	}

	if !cached {
		sapCustomerReturnItemProcessStepDatumUpdateCacheMut.Lock()
		sapCustomerReturnItemProcessStepDatumUpdateCache[key] = cache
		sapCustomerReturnItemProcessStepDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCustomerReturnItemProcessStepDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_customer_return_item_process_step_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_customer_return_item_process_step_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCustomerReturnItemProcessStepDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemProcessStepDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_customer_return_item_process_step_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCustomerReturnItemProcessStepDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCustomerReturnItemProcessStepDatum")
	}
	return rowsAff, nil
}

var mySQLSapCustomerReturnItemProcessStepDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCustomerReturnItemProcessStepDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_item_process_step_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnItemProcessStepDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCustomerReturnItemProcessStepDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCustomerReturnItemProcessStepDatumUpsertCacheMut.RLock()
	cache, cached := sapCustomerReturnItemProcessStepDatumUpsertCache[key]
	sapCustomerReturnItemProcessStepDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCustomerReturnItemProcessStepDatumAllColumns,
			sapCustomerReturnItemProcessStepDatumColumnsWithDefault,
			sapCustomerReturnItemProcessStepDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCustomerReturnItemProcessStepDatumAllColumns,
			sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_customer_return_item_process_step_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_customer_return_item_process_step_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_customer_return_item_process_step_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_customer_return_item_process_step_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCustomerReturnItemProcessStepDatumType, sapCustomerReturnItemProcessStepDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_customer_return_item_process_step_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_item_process_step_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnItemProcessStepDatumUpsertCacheMut.Lock()
		sapCustomerReturnItemProcessStepDatumUpsertCache[key] = cache
		sapCustomerReturnItemProcessStepDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCustomerReturnItemProcessStepDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCustomerReturnItemProcessStepDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCustomerReturnItemProcessStepDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCustomerReturnItemProcessStepDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_customer_return_item_process_step_data` WHERE `RetsMgmtProcess`=? AND `RetsMgmtProcessItem`=? AND `RetsMgmtProcItmQtySplit`=? AND `RetsMgmtProcessStep`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_customer_return_item_process_step_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_customer_return_item_process_step_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCustomerReturnItemProcessStepDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCustomerReturnItemProcessStepDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_customer_return_item_process_step_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_item_process_step_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCustomerReturnItemProcessStepDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCustomerReturnItemProcessStepDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemProcessStepDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_customer_return_item_process_step_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCustomerReturnItemProcessStepDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_item_process_step_data")
	}

	if len(sapCustomerReturnItemProcessStepDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCustomerReturnItemProcessStepDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCustomerReturnItemProcessStepDatum(ctx, exec, o.RetsMgmtProcess, o.RetsMgmtProcessItem, o.RetsMgmtProcItmQtySplit, o.RetsMgmtProcessStep)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCustomerReturnItemProcessStepDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCustomerReturnItemProcessStepDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemProcessStepDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_customer_return_item_process_step_data`.* FROM `sap_customer_return_item_process_step_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCustomerReturnItemProcessStepDatumSlice")
	}

	*o = slice

	return nil
}

// SapCustomerReturnItemProcessStepDatumExists checks if the SapCustomerReturnItemProcessStepDatum row exists.
func SapCustomerReturnItemProcessStepDatumExists(ctx context.Context, exec boil.ContextExecutor, retsMgmtProcess string, retsMgmtProcessItem string, retsMgmtProcItmQtySplit string, retsMgmtProcessStep string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_customer_return_item_process_step_data` where `RetsMgmtProcess`=? AND `RetsMgmtProcessItem`=? AND `RetsMgmtProcItmQtySplit`=? AND `RetsMgmtProcessStep`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, retsMgmtProcess, retsMgmtProcessItem, retsMgmtProcItmQtySplit, retsMgmtProcessStep)
	}
	row := exec.QueryRowContext(ctx, sql, retsMgmtProcess, retsMgmtProcessItem, retsMgmtProcItmQtySplit, retsMgmtProcessStep)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_customer_return_item_process_step_data exists")
	}

	return exists, nil
}
