// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceConfirmationReferenceObjectDatum is an object representing the database table.
type SapServiceConfirmationReferenceObjectDatum struct {
	ServiceConfirmation          string      `boil:"ServiceConfirmation" json:"ServiceConfirmation" toml:"ServiceConfirmation" yaml:"ServiceConfirmation"`
	ServiceReferenceEquipment    null.String `boil:"ServiceReferenceEquipment" json:"ServiceReferenceEquipment,omitempty" toml:"ServiceReferenceEquipment" yaml:"ServiceReferenceEquipment,omitempty"`
	ServiceRefFunctionalLocation null.String `boil:"ServiceRefFunctionalLocation" json:"ServiceRefFunctionalLocation,omitempty" toml:"ServiceRefFunctionalLocation" yaml:"ServiceRefFunctionalLocation,omitempty"`
	SrvcRefObjIsMainObject       null.Bool   `boil:"SrvcRefObjIsMainObject" json:"SrvcRefObjIsMainObject,omitempty" toml:"SrvcRefObjIsMainObject" yaml:"SrvcRefObjIsMainObject,omitempty"`

	R *sapServiceConfirmationReferenceObjectDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceConfirmationReferenceObjectDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceConfirmationReferenceObjectDatumColumns = struct {
	ServiceConfirmation          string
	ServiceReferenceEquipment    string
	ServiceRefFunctionalLocation string
	SrvcRefObjIsMainObject       string
}{
	ServiceConfirmation:          "ServiceConfirmation",
	ServiceReferenceEquipment:    "ServiceReferenceEquipment",
	ServiceRefFunctionalLocation: "ServiceRefFunctionalLocation",
	SrvcRefObjIsMainObject:       "SrvcRefObjIsMainObject",
}

var SapServiceConfirmationReferenceObjectDatumTableColumns = struct {
	ServiceConfirmation          string
	ServiceReferenceEquipment    string
	ServiceRefFunctionalLocation string
	SrvcRefObjIsMainObject       string
}{
	ServiceConfirmation:          "sap_service_confirmation_reference_object_data.ServiceConfirmation",
	ServiceReferenceEquipment:    "sap_service_confirmation_reference_object_data.ServiceReferenceEquipment",
	ServiceRefFunctionalLocation: "sap_service_confirmation_reference_object_data.ServiceRefFunctionalLocation",
	SrvcRefObjIsMainObject:       "sap_service_confirmation_reference_object_data.SrvcRefObjIsMainObject",
}

// Generated where

var SapServiceConfirmationReferenceObjectDatumWhere = struct {
	ServiceConfirmation          whereHelperstring
	ServiceReferenceEquipment    whereHelpernull_String
	ServiceRefFunctionalLocation whereHelpernull_String
	SrvcRefObjIsMainObject       whereHelpernull_Bool
}{
	ServiceConfirmation:          whereHelperstring{field: "`sap_service_confirmation_reference_object_data`.`ServiceConfirmation`"},
	ServiceReferenceEquipment:    whereHelpernull_String{field: "`sap_service_confirmation_reference_object_data`.`ServiceReferenceEquipment`"},
	ServiceRefFunctionalLocation: whereHelpernull_String{field: "`sap_service_confirmation_reference_object_data`.`ServiceRefFunctionalLocation`"},
	SrvcRefObjIsMainObject:       whereHelpernull_Bool{field: "`sap_service_confirmation_reference_object_data`.`SrvcRefObjIsMainObject`"},
}

// SapServiceConfirmationReferenceObjectDatumRels is where relationship names are stored.
var SapServiceConfirmationReferenceObjectDatumRels = struct {
	ServiceConfirmationSapServiceConfirmationHeaderDatum string
}{
	ServiceConfirmationSapServiceConfirmationHeaderDatum: "ServiceConfirmationSapServiceConfirmationHeaderDatum",
}

// sapServiceConfirmationReferenceObjectDatumR is where relationships are stored.
type sapServiceConfirmationReferenceObjectDatumR struct {
	ServiceConfirmationSapServiceConfirmationHeaderDatum *SapServiceConfirmationHeaderDatum `boil:"ServiceConfirmationSapServiceConfirmationHeaderDatum" json:"ServiceConfirmationSapServiceConfirmationHeaderDatum" toml:"ServiceConfirmationSapServiceConfirmationHeaderDatum" yaml:"ServiceConfirmationSapServiceConfirmationHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapServiceConfirmationReferenceObjectDatumR) NewStruct() *sapServiceConfirmationReferenceObjectDatumR {
	return &sapServiceConfirmationReferenceObjectDatumR{}
}

// sapServiceConfirmationReferenceObjectDatumL is where Load methods for each relationship are stored.
type sapServiceConfirmationReferenceObjectDatumL struct{}

var (
	sapServiceConfirmationReferenceObjectDatumAllColumns            = []string{"ServiceConfirmation", "ServiceReferenceEquipment", "ServiceRefFunctionalLocation", "SrvcRefObjIsMainObject"}
	sapServiceConfirmationReferenceObjectDatumColumnsWithoutDefault = []string{"ServiceConfirmation", "ServiceReferenceEquipment", "ServiceRefFunctionalLocation", "SrvcRefObjIsMainObject"}
	sapServiceConfirmationReferenceObjectDatumColumnsWithDefault    = []string{}
	sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns     = []string{"ServiceConfirmation"}
)

type (
	// SapServiceConfirmationReferenceObjectDatumSlice is an alias for a slice of pointers to SapServiceConfirmationReferenceObjectDatum.
	// This should almost always be used instead of []SapServiceConfirmationReferenceObjectDatum.
	SapServiceConfirmationReferenceObjectDatumSlice []*SapServiceConfirmationReferenceObjectDatum
	// SapServiceConfirmationReferenceObjectDatumHook is the signature for custom SapServiceConfirmationReferenceObjectDatum hook methods
	SapServiceConfirmationReferenceObjectDatumHook func(context.Context, boil.ContextExecutor, *SapServiceConfirmationReferenceObjectDatum) error

	sapServiceConfirmationReferenceObjectDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceConfirmationReferenceObjectDatumType                 = reflect.TypeOf(&SapServiceConfirmationReferenceObjectDatum{})
	sapServiceConfirmationReferenceObjectDatumMapping              = queries.MakeStructMapping(sapServiceConfirmationReferenceObjectDatumType)
	sapServiceConfirmationReferenceObjectDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns)
	sapServiceConfirmationReferenceObjectDatumInsertCacheMut       sync.RWMutex
	sapServiceConfirmationReferenceObjectDatumInsertCache          = make(map[string]insertCache)
	sapServiceConfirmationReferenceObjectDatumUpdateCacheMut       sync.RWMutex
	sapServiceConfirmationReferenceObjectDatumUpdateCache          = make(map[string]updateCache)
	sapServiceConfirmationReferenceObjectDatumUpsertCacheMut       sync.RWMutex
	sapServiceConfirmationReferenceObjectDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceConfirmationReferenceObjectDatumBeforeInsertHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumBeforeUpdateHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumBeforeDeleteHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumBeforeUpsertHooks []SapServiceConfirmationReferenceObjectDatumHook

var sapServiceConfirmationReferenceObjectDatumAfterInsertHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumAfterSelectHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumAfterUpdateHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumAfterDeleteHooks []SapServiceConfirmationReferenceObjectDatumHook
var sapServiceConfirmationReferenceObjectDatumAfterUpsertHooks []SapServiceConfirmationReferenceObjectDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceConfirmationReferenceObjectDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationReferenceObjectDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceConfirmationReferenceObjectDatumHook registers your hook function for all future operations.
func AddSapServiceConfirmationReferenceObjectDatumHook(hookPoint boil.HookPoint, sapServiceConfirmationReferenceObjectDatumHook SapServiceConfirmationReferenceObjectDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapServiceConfirmationReferenceObjectDatumBeforeInsertHooks = append(sapServiceConfirmationReferenceObjectDatumBeforeInsertHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceConfirmationReferenceObjectDatumBeforeUpdateHooks = append(sapServiceConfirmationReferenceObjectDatumBeforeUpdateHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceConfirmationReferenceObjectDatumBeforeDeleteHooks = append(sapServiceConfirmationReferenceObjectDatumBeforeDeleteHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceConfirmationReferenceObjectDatumBeforeUpsertHooks = append(sapServiceConfirmationReferenceObjectDatumBeforeUpsertHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.AfterInsertHook:
		sapServiceConfirmationReferenceObjectDatumAfterInsertHooks = append(sapServiceConfirmationReferenceObjectDatumAfterInsertHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.AfterSelectHook:
		sapServiceConfirmationReferenceObjectDatumAfterSelectHooks = append(sapServiceConfirmationReferenceObjectDatumAfterSelectHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.AfterUpdateHook:
		sapServiceConfirmationReferenceObjectDatumAfterUpdateHooks = append(sapServiceConfirmationReferenceObjectDatumAfterUpdateHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.AfterDeleteHook:
		sapServiceConfirmationReferenceObjectDatumAfterDeleteHooks = append(sapServiceConfirmationReferenceObjectDatumAfterDeleteHooks, sapServiceConfirmationReferenceObjectDatumHook)
	case boil.AfterUpsertHook:
		sapServiceConfirmationReferenceObjectDatumAfterUpsertHooks = append(sapServiceConfirmationReferenceObjectDatumAfterUpsertHooks, sapServiceConfirmationReferenceObjectDatumHook)
	}
}

// One returns a single sapServiceConfirmationReferenceObjectDatum record from the query.
func (q sapServiceConfirmationReferenceObjectDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceConfirmationReferenceObjectDatum, error) {
	o := &SapServiceConfirmationReferenceObjectDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_confirmation_reference_object_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceConfirmationReferenceObjectDatum records from the query.
func (q sapServiceConfirmationReferenceObjectDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceConfirmationReferenceObjectDatumSlice, error) {
	var o []*SapServiceConfirmationReferenceObjectDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceConfirmationReferenceObjectDatum slice")
	}

	if len(sapServiceConfirmationReferenceObjectDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceConfirmationReferenceObjectDatum records in the query.
func (q sapServiceConfirmationReferenceObjectDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_confirmation_reference_object_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceConfirmationReferenceObjectDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_confirmation_reference_object_data exists")
	}

	return count > 0, nil
}

// ServiceConfirmationSapServiceConfirmationHeaderDatum pointed to by the foreign key.
func (o *SapServiceConfirmationReferenceObjectDatum) ServiceConfirmationSapServiceConfirmationHeaderDatum(mods ...qm.QueryMod) sapServiceConfirmationHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceConfirmation` = ?", o.ServiceConfirmation),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceConfirmationHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_confirmation_header_data`")

	return query
}

// LoadServiceConfirmationSapServiceConfirmationHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceConfirmationReferenceObjectDatumL) LoadServiceConfirmationSapServiceConfirmationHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationReferenceObjectDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationReferenceObjectDatum
	var object *SapServiceConfirmationReferenceObjectDatum

	if singular {
		object = maybeSapServiceConfirmationReferenceObjectDatum.(*SapServiceConfirmationReferenceObjectDatum)
	} else {
		slice = *maybeSapServiceConfirmationReferenceObjectDatum.(*[]*SapServiceConfirmationReferenceObjectDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationReferenceObjectDatumR{}
		}
		args = append(args, object.ServiceConfirmation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationReferenceObjectDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_header_data`),
		qm.WhereIn(`sap_service_confirmation_header_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceConfirmationHeaderDatum")
	}

	var resultSlice []*SapServiceConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceConfirmationHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_header_data")
	}

	if len(sapServiceConfirmationReferenceObjectDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceConfirmationHeaderDatumR{}
		}
		foreign.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationHeaderDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum = local
				break
			}
		}
	}

	return nil
}

// SetServiceConfirmationSapServiceConfirmationHeaderDatum of the sapServiceConfirmationReferenceObjectDatum to the related item.
// Sets o.R.ServiceConfirmationSapServiceConfirmationHeaderDatum to related.
// Adds o to related.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum.
func (o *SapServiceConfirmationReferenceObjectDatum) SetServiceConfirmationSapServiceConfirmationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceConfirmationHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_confirmation_reference_object_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
		strmangle.WhereClause("`", "`", 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceConfirmation, o.ServiceConfirmation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceConfirmation = related.ServiceConfirmation
	if o.R == nil {
		o.R = &sapServiceConfirmationReferenceObjectDatumR{
			ServiceConfirmationSapServiceConfirmationHeaderDatum: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceConfirmationHeaderDatumR{
			ServiceConfirmationSapServiceConfirmationReferenceObjectDatum: o,
		}
	} else {
		related.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum = o
	}

	return nil
}

// SapServiceConfirmationReferenceObjectData retrieves all the records using an executor.
func SapServiceConfirmationReferenceObjectData(mods ...qm.QueryMod) sapServiceConfirmationReferenceObjectDatumQuery {
	mods = append(mods, qm.From("`sap_service_confirmation_reference_object_data`"))
	return sapServiceConfirmationReferenceObjectDatumQuery{NewQuery(mods...)}
}

// FindSapServiceConfirmationReferenceObjectDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceConfirmationReferenceObjectDatum(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string, selectCols ...string) (*SapServiceConfirmationReferenceObjectDatum, error) {
	sapServiceConfirmationReferenceObjectDatumObj := &SapServiceConfirmationReferenceObjectDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_confirmation_reference_object_data` where `ServiceConfirmation`=?", sel,
	)

	q := queries.Raw(query, serviceConfirmation)

	err := q.Bind(ctx, exec, sapServiceConfirmationReferenceObjectDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_confirmation_reference_object_data")
	}

	if err = sapServiceConfirmationReferenceObjectDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceConfirmationReferenceObjectDatumObj, err
	}

	return sapServiceConfirmationReferenceObjectDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceConfirmationReferenceObjectDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_reference_object_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationReferenceObjectDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceConfirmationReferenceObjectDatumInsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationReferenceObjectDatumInsertCache[key]
	sapServiceConfirmationReferenceObjectDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceConfirmationReferenceObjectDatumAllColumns,
			sapServiceConfirmationReferenceObjectDatumColumnsWithDefault,
			sapServiceConfirmationReferenceObjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_confirmation_reference_object_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_confirmation_reference_object_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_confirmation_reference_object_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_confirmation_reference_object_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceConfirmation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_reference_object_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationReferenceObjectDatumInsertCacheMut.Lock()
		sapServiceConfirmationReferenceObjectDatumInsertCache[key] = cache
		sapServiceConfirmationReferenceObjectDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceConfirmationReferenceObjectDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceConfirmationReferenceObjectDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceConfirmationReferenceObjectDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceConfirmationReferenceObjectDatumUpdateCache[key]
	sapServiceConfirmationReferenceObjectDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceConfirmationReferenceObjectDatumAllColumns,
			sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_confirmation_reference_object_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_confirmation_reference_object_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, append(wl, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_confirmation_reference_object_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_confirmation_reference_object_data")
	}

	if !cached {
		sapServiceConfirmationReferenceObjectDatumUpdateCacheMut.Lock()
		sapServiceConfirmationReferenceObjectDatumUpdateCache[key] = cache
		sapServiceConfirmationReferenceObjectDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceConfirmationReferenceObjectDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_confirmation_reference_object_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_confirmation_reference_object_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceConfirmationReferenceObjectDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationReferenceObjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_confirmation_reference_object_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceConfirmationReferenceObjectDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceConfirmationReferenceObjectDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceConfirmationReferenceObjectDatumUniqueColumns = []string{
	"ServiceConfirmation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceConfirmationReferenceObjectDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_reference_object_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationReferenceObjectDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceConfirmationReferenceObjectDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceConfirmationReferenceObjectDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationReferenceObjectDatumUpsertCache[key]
	sapServiceConfirmationReferenceObjectDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceConfirmationReferenceObjectDatumAllColumns,
			sapServiceConfirmationReferenceObjectDatumColumnsWithDefault,
			sapServiceConfirmationReferenceObjectDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapServiceConfirmationReferenceObjectDatumAllColumns,
			sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_confirmation_reference_object_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_confirmation_reference_object_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_confirmation_reference_object_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_confirmation_reference_object_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceConfirmationReferenceObjectDatumType, sapServiceConfirmationReferenceObjectDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_confirmation_reference_object_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_reference_object_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationReferenceObjectDatumUpsertCacheMut.Lock()
		sapServiceConfirmationReferenceObjectDatumUpsertCache[key] = cache
		sapServiceConfirmationReferenceObjectDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceConfirmationReferenceObjectDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceConfirmationReferenceObjectDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceConfirmationReferenceObjectDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceConfirmationReferenceObjectDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_confirmation_reference_object_data` WHERE `ServiceConfirmation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_confirmation_reference_object_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_confirmation_reference_object_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceConfirmationReferenceObjectDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceConfirmationReferenceObjectDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_confirmation_reference_object_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_reference_object_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceConfirmationReferenceObjectDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceConfirmationReferenceObjectDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationReferenceObjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_confirmation_reference_object_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceConfirmationReferenceObjectDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_reference_object_data")
	}

	if len(sapServiceConfirmationReferenceObjectDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceConfirmationReferenceObjectDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceConfirmationReferenceObjectDatum(ctx, exec, o.ServiceConfirmation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceConfirmationReferenceObjectDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceConfirmationReferenceObjectDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationReferenceObjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_confirmation_reference_object_data`.* FROM `sap_service_confirmation_reference_object_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceConfirmationReferenceObjectDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceConfirmationReferenceObjectDatumExists checks if the SapServiceConfirmationReferenceObjectDatum row exists.
func SapServiceConfirmationReferenceObjectDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_confirmation_reference_object_data` where `ServiceConfirmation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceConfirmation)
	}
	row := exec.QueryRowContext(ctx, sql, serviceConfirmation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_confirmation_reference_object_data exists")
	}

	return exists, nil
}
