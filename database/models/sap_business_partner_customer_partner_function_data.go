// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerCustomerPartnerFunctionDatum is an object representing the database table.
type SapBusinessPartnerCustomerPartnerFunctionDatum struct {
	Customer                   string      `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	SalesOrganization          string      `boil:"SalesOrganization" json:"SalesOrganization" toml:"SalesOrganization" yaml:"SalesOrganization"`
	DistributionChannel        string      `boil:"DistributionChannel" json:"DistributionChannel" toml:"DistributionChannel" yaml:"DistributionChannel"`
	Division                   string      `boil:"Division" json:"Division" toml:"Division" yaml:"Division"`
	PartnerCounter             string      `boil:"PartnerCounter" json:"PartnerCounter" toml:"PartnerCounter" yaml:"PartnerCounter"`
	PartnerFunction            null.String `boil:"PartnerFunction" json:"PartnerFunction,omitempty" toml:"PartnerFunction" yaml:"PartnerFunction,omitempty"`
	BPCustomerNumber           null.String `boil:"BPCustomerNumber" json:"BPCustomerNumber,omitempty" toml:"BPCustomerNumber" yaml:"BPCustomerNumber,omitempty"`
	CustomerPartnerDescription null.String `boil:"CustomerPartnerDescription" json:"CustomerPartnerDescription,omitempty" toml:"CustomerPartnerDescription" yaml:"CustomerPartnerDescription,omitempty"`
	DefaultPartner             null.Bool   `boil:"DefaultPartner" json:"DefaultPartner,omitempty" toml:"DefaultPartner" yaml:"DefaultPartner,omitempty"`
	Supplier                   null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	AuthorizationGroup         null.String `boil:"AuthorizationGroup" json:"AuthorizationGroup,omitempty" toml:"AuthorizationGroup" yaml:"AuthorizationGroup,omitempty"`

	R *sapBusinessPartnerCustomerPartnerFunctionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerCustomerPartnerFunctionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerCustomerPartnerFunctionDatumColumns = struct {
	Customer                   string
	SalesOrganization          string
	DistributionChannel        string
	Division                   string
	PartnerCounter             string
	PartnerFunction            string
	BPCustomerNumber           string
	CustomerPartnerDescription string
	DefaultPartner             string
	Supplier                   string
	AuthorizationGroup         string
}{
	Customer:                   "Customer",
	SalesOrganization:          "SalesOrganization",
	DistributionChannel:        "DistributionChannel",
	Division:                   "Division",
	PartnerCounter:             "PartnerCounter",
	PartnerFunction:            "PartnerFunction",
	BPCustomerNumber:           "BPCustomerNumber",
	CustomerPartnerDescription: "CustomerPartnerDescription",
	DefaultPartner:             "DefaultPartner",
	Supplier:                   "Supplier",
	AuthorizationGroup:         "AuthorizationGroup",
}

var SapBusinessPartnerCustomerPartnerFunctionDatumTableColumns = struct {
	Customer                   string
	SalesOrganization          string
	DistributionChannel        string
	Division                   string
	PartnerCounter             string
	PartnerFunction            string
	BPCustomerNumber           string
	CustomerPartnerDescription string
	DefaultPartner             string
	Supplier                   string
	AuthorizationGroup         string
}{
	Customer:                   "sap_business_partner_customer_partner_function_data.Customer",
	SalesOrganization:          "sap_business_partner_customer_partner_function_data.SalesOrganization",
	DistributionChannel:        "sap_business_partner_customer_partner_function_data.DistributionChannel",
	Division:                   "sap_business_partner_customer_partner_function_data.Division",
	PartnerCounter:             "sap_business_partner_customer_partner_function_data.PartnerCounter",
	PartnerFunction:            "sap_business_partner_customer_partner_function_data.PartnerFunction",
	BPCustomerNumber:           "sap_business_partner_customer_partner_function_data.BPCustomerNumber",
	CustomerPartnerDescription: "sap_business_partner_customer_partner_function_data.CustomerPartnerDescription",
	DefaultPartner:             "sap_business_partner_customer_partner_function_data.DefaultPartner",
	Supplier:                   "sap_business_partner_customer_partner_function_data.Supplier",
	AuthorizationGroup:         "sap_business_partner_customer_partner_function_data.AuthorizationGroup",
}

// Generated where

var SapBusinessPartnerCustomerPartnerFunctionDatumWhere = struct {
	Customer                   whereHelperstring
	SalesOrganization          whereHelperstring
	DistributionChannel        whereHelperstring
	Division                   whereHelperstring
	PartnerCounter             whereHelperstring
	PartnerFunction            whereHelpernull_String
	BPCustomerNumber           whereHelpernull_String
	CustomerPartnerDescription whereHelpernull_String
	DefaultPartner             whereHelpernull_Bool
	Supplier                   whereHelpernull_String
	AuthorizationGroup         whereHelpernull_String
}{
	Customer:                   whereHelperstring{field: "`sap_business_partner_customer_partner_function_data`.`Customer`"},
	SalesOrganization:          whereHelperstring{field: "`sap_business_partner_customer_partner_function_data`.`SalesOrganization`"},
	DistributionChannel:        whereHelperstring{field: "`sap_business_partner_customer_partner_function_data`.`DistributionChannel`"},
	Division:                   whereHelperstring{field: "`sap_business_partner_customer_partner_function_data`.`Division`"},
	PartnerCounter:             whereHelperstring{field: "`sap_business_partner_customer_partner_function_data`.`PartnerCounter`"},
	PartnerFunction:            whereHelpernull_String{field: "`sap_business_partner_customer_partner_function_data`.`PartnerFunction`"},
	BPCustomerNumber:           whereHelpernull_String{field: "`sap_business_partner_customer_partner_function_data`.`BPCustomerNumber`"},
	CustomerPartnerDescription: whereHelpernull_String{field: "`sap_business_partner_customer_partner_function_data`.`CustomerPartnerDescription`"},
	DefaultPartner:             whereHelpernull_Bool{field: "`sap_business_partner_customer_partner_function_data`.`DefaultPartner`"},
	Supplier:                   whereHelpernull_String{field: "`sap_business_partner_customer_partner_function_data`.`Supplier`"},
	AuthorizationGroup:         whereHelpernull_String{field: "`sap_business_partner_customer_partner_function_data`.`AuthorizationGroup`"},
}

// SapBusinessPartnerCustomerPartnerFunctionDatumRels is where relationship names are stored.
var SapBusinessPartnerCustomerPartnerFunctionDatumRels = struct {
	CustomerSapBusinessPartnerGeneralDatum string
}{
	CustomerSapBusinessPartnerGeneralDatum: "CustomerSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerCustomerPartnerFunctionDatumR is where relationships are stored.
type sapBusinessPartnerCustomerPartnerFunctionDatumR struct {
	CustomerSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"CustomerSapBusinessPartnerGeneralDatum" json:"CustomerSapBusinessPartnerGeneralDatum" toml:"CustomerSapBusinessPartnerGeneralDatum" yaml:"CustomerSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerCustomerPartnerFunctionDatumR) NewStruct() *sapBusinessPartnerCustomerPartnerFunctionDatumR {
	return &sapBusinessPartnerCustomerPartnerFunctionDatumR{}
}

// sapBusinessPartnerCustomerPartnerFunctionDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerCustomerPartnerFunctionDatumL struct{}

var (
	sapBusinessPartnerCustomerPartnerFunctionDatumAllColumns            = []string{"Customer", "SalesOrganization", "DistributionChannel", "Division", "PartnerCounter", "PartnerFunction", "BPCustomerNumber", "CustomerPartnerDescription", "DefaultPartner", "Supplier", "AuthorizationGroup"}
	sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithoutDefault = []string{"Customer", "SalesOrganization", "DistributionChannel", "Division", "PartnerCounter", "PartnerFunction", "BPCustomerNumber", "CustomerPartnerDescription", "DefaultPartner", "Supplier", "AuthorizationGroup"}
	sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns     = []string{"Customer", "SalesOrganization", "DistributionChannel", "Division", "PartnerCounter"}
	sapBusinessPartnerCustomerPartnerFunctionDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerCustomerPartnerFunctionDatumSlice is an alias for a slice of pointers to SapBusinessPartnerCustomerPartnerFunctionDatum.
	// This should almost always be used instead of []SapBusinessPartnerCustomerPartnerFunctionDatum.
	SapBusinessPartnerCustomerPartnerFunctionDatumSlice []*SapBusinessPartnerCustomerPartnerFunctionDatum
	// SapBusinessPartnerCustomerPartnerFunctionDatumHook is the signature for custom SapBusinessPartnerCustomerPartnerFunctionDatum hook methods
	SapBusinessPartnerCustomerPartnerFunctionDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerCustomerPartnerFunctionDatum) error

	sapBusinessPartnerCustomerPartnerFunctionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerCustomerPartnerFunctionDatumType                 = reflect.TypeOf(&SapBusinessPartnerCustomerPartnerFunctionDatum{})
	sapBusinessPartnerCustomerPartnerFunctionDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType)
	sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns)
	sapBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerCustomerPartnerFunctionDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook

var sapBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook
var sapBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook

var sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook
var sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook

var sapBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook
var sapBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook

var sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook
var sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks []SapBusinessPartnerCustomerPartnerFunctionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerCustomerPartnerFunctionDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerCustomerPartnerFunctionDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerCustomerPartnerFunctionDatumHook SapBusinessPartnerCustomerPartnerFunctionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks = append(sapBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks, sapBusinessPartnerCustomerPartnerFunctionDatumHook)
	}
}

// One returns a single sapBusinessPartnerCustomerPartnerFunctionDatum record from the query.
func (q sapBusinessPartnerCustomerPartnerFunctionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerCustomerPartnerFunctionDatum, error) {
	o := &SapBusinessPartnerCustomerPartnerFunctionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_customer_partner_function_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerCustomerPartnerFunctionDatum records from the query.
func (q sapBusinessPartnerCustomerPartnerFunctionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerCustomerPartnerFunctionDatumSlice, error) {
	var o []*SapBusinessPartnerCustomerPartnerFunctionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerCustomerPartnerFunctionDatum slice")
	}

	if len(sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerCustomerPartnerFunctionDatum records in the query.
func (q sapBusinessPartnerCustomerPartnerFunctionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_customer_partner_function_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerCustomerPartnerFunctionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_customer_partner_function_data exists")
	}

	return count > 0, nil
}

// CustomerSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) CustomerSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Customer),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadCustomerSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerCustomerPartnerFunctionDatumL) LoadCustomerSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerCustomerPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerCustomerPartnerFunctionDatum
	var object *SapBusinessPartnerCustomerPartnerFunctionDatum

	if singular {
		object = maybeSapBusinessPartnerCustomerPartnerFunctionDatum.(*SapBusinessPartnerCustomerPartnerFunctionDatum)
	} else {
		slice = *maybeSapBusinessPartnerCustomerPartnerFunctionDatum.(*[]*SapBusinessPartnerCustomerPartnerFunctionDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerCustomerPartnerFunctionDatumR{}
		}
		args = append(args, object.Customer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerCustomerPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if a == obj.Customer {
					continue Outer
				}
			}

			args = append(args, obj.Customer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomerSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Customer == foreign.BusinessPartner {
				local.R.CustomerSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// SetCustomerSapBusinessPartnerGeneralDatum of the sapBusinessPartnerCustomerPartnerFunctionDatum to the related item.
// Sets o.R.CustomerSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) SetCustomerSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_customer_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Customer"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Customer, o.SalesOrganization, o.DistributionChannel, o.Division, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Customer = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerCustomerPartnerFunctionDatumR{
			CustomerSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.CustomerSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			CustomerSapBusinessPartnerCustomerPartnerFunctionData: SapBusinessPartnerCustomerPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData = append(related.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData, o)
	}

	return nil
}

// SapBusinessPartnerCustomerPartnerFunctionData retrieves all the records using an executor.
func SapBusinessPartnerCustomerPartnerFunctionData(mods ...qm.QueryMod) sapBusinessPartnerCustomerPartnerFunctionDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_customer_partner_function_data`"))
	return sapBusinessPartnerCustomerPartnerFunctionDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerCustomerPartnerFunctionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerCustomerPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, customer string, salesOrganization string, distributionChannel string, division string, partnerCounter string, selectCols ...string) (*SapBusinessPartnerCustomerPartnerFunctionDatum, error) {
	sapBusinessPartnerCustomerPartnerFunctionDatumObj := &SapBusinessPartnerCustomerPartnerFunctionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_customer_partner_function_data` where `Customer`=? AND `SalesOrganization`=? AND `DistributionChannel`=? AND `Division`=? AND `PartnerCounter`=?", sel,
	)

	q := queries.Raw(query, customer, salesOrganization, distributionChannel, division, partnerCounter)

	err := q.Bind(ctx, exec, sapBusinessPartnerCustomerPartnerFunctionDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_customer_partner_function_data")
	}

	if err = sapBusinessPartnerCustomerPartnerFunctionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerCustomerPartnerFunctionDatumObj, err
	}

	return sapBusinessPartnerCustomerPartnerFunctionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_customer_partner_function_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerCustomerPartnerFunctionDatumInsertCache[key]
	sapBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault,
			sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_customer_partner_function_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_customer_partner_function_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_customer_partner_function_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_customer_partner_function_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Customer,
		o.SalesOrganization,
		o.DistributionChannel,
		o.Division,
		o.PartnerCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_customer_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.Lock()
		sapBusinessPartnerCustomerPartnerFunctionDatumInsertCache[key] = cache
		sapBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerCustomerPartnerFunctionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCache[key]
	sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_customer_partner_function_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_customer_partner_function_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, append(wl, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_customer_partner_function_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_customer_partner_function_data")
	}

	if !cached {
		sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.Lock()
		sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCache[key] = cache
		sapBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerCustomerPartnerFunctionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_customer_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_customer_partner_function_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerCustomerPartnerFunctionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_customer_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerCustomerPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerCustomerPartnerFunctionDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerCustomerPartnerFunctionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_customer_partner_function_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerCustomerPartnerFunctionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCache[key]
	sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault,
			sapBusinessPartnerCustomerPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_customer_partner_function_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_customer_partner_function_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_customer_partner_function_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_customer_partner_function_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerCustomerPartnerFunctionDatumType, sapBusinessPartnerCustomerPartnerFunctionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_customer_partner_function_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_customer_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.Lock()
		sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCache[key] = cache
		sapBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerCustomerPartnerFunctionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerCustomerPartnerFunctionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_customer_partner_function_data` WHERE `Customer`=? AND `SalesOrganization`=? AND `DistributionChannel`=? AND `Division`=? AND `PartnerCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_customer_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_customer_partner_function_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerCustomerPartnerFunctionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerCustomerPartnerFunctionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_customer_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_customer_partner_function_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerCustomerPartnerFunctionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_customer_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerCustomerPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_customer_partner_function_data")
	}

	if len(sapBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerCustomerPartnerFunctionDatum(ctx, exec, o.Customer, o.SalesOrganization, o.DistributionChannel, o.Division, o.PartnerCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerCustomerPartnerFunctionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerCustomerPartnerFunctionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_customer_partner_function_data`.* FROM `sap_business_partner_customer_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerCustomerPartnerFunctionDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerCustomerPartnerFunctionDatumExists checks if the SapBusinessPartnerCustomerPartnerFunctionDatum row exists.
func SapBusinessPartnerCustomerPartnerFunctionDatumExists(ctx context.Context, exec boil.ContextExecutor, customer string, salesOrganization string, distributionChannel string, division string, partnerCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_customer_partner_function_data` where `Customer`=? AND `SalesOrganization`=? AND `DistributionChannel`=? AND `Division`=? AND `PartnerCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customer, salesOrganization, distributionChannel, division, partnerCounter)
	}
	row := exec.QueryRowContext(ctx, sql, customer, salesOrganization, distributionChannel, division, partnerCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_customer_partner_function_data exists")
	}

	return exists, nil
}
