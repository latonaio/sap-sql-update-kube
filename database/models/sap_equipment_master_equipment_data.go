// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapEquipmentMasterEquipmentDatum is an object representing the database table.
type SapEquipmentMasterEquipmentDatum struct {
	Equipment                     string      `boil:"Equipment" json:"Equipment" toml:"Equipment" yaml:"Equipment"`
	ValidityEndDate               null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ValidityEndTime               null.String `boil:"ValidityEndTime" json:"ValidityEndTime,omitempty" toml:"ValidityEndTime" yaml:"ValidityEndTime,omitempty"`
	ValidityStartDate             null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	EquipmentName                 null.String `boil:"EquipmentName" json:"EquipmentName,omitempty" toml:"EquipmentName" yaml:"EquipmentName,omitempty"`
	EquipmentCategory             null.String `boil:"EquipmentCategory" json:"EquipmentCategory,omitempty" toml:"EquipmentCategory" yaml:"EquipmentCategory,omitempty"`
	TechnicalObjectType           null.String `boil:"TechnicalObjectType" json:"TechnicalObjectType,omitempty" toml:"TechnicalObjectType" yaml:"TechnicalObjectType,omitempty"`
	GrossWeight                   null.String `boil:"GrossWeight" json:"GrossWeight,omitempty" toml:"GrossWeight" yaml:"GrossWeight,omitempty"`
	GrossWeightUnit               null.String `boil:"GrossWeightUnit" json:"GrossWeightUnit,omitempty" toml:"GrossWeightUnit" yaml:"GrossWeightUnit,omitempty"`
	SizeOrDimensionText           null.String `boil:"SizeOrDimensionText" json:"SizeOrDimensionText,omitempty" toml:"SizeOrDimensionText" yaml:"SizeOrDimensionText,omitempty"`
	InventoryNumber               null.String `boil:"InventoryNumber" json:"InventoryNumber,omitempty" toml:"InventoryNumber" yaml:"InventoryNumber,omitempty"`
	OperationStartDate            null.String `boil:"OperationStartDate" json:"OperationStartDate,omitempty" toml:"OperationStartDate" yaml:"OperationStartDate,omitempty"`
	AcquisitionValue              null.String `boil:"AcquisitionValue" json:"AcquisitionValue,omitempty" toml:"AcquisitionValue" yaml:"AcquisitionValue,omitempty"`
	Currency                      null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	AcquisitionDate               null.String `boil:"AcquisitionDate" json:"AcquisitionDate,omitempty" toml:"AcquisitionDate" yaml:"AcquisitionDate,omitempty"`
	AssetManufacturerName         null.String `boil:"AssetManufacturerName" json:"AssetManufacturerName,omitempty" toml:"AssetManufacturerName" yaml:"AssetManufacturerName,omitempty"`
	ManufacturerPartTypeName      null.String `boil:"ManufacturerPartTypeName" json:"ManufacturerPartTypeName,omitempty" toml:"ManufacturerPartTypeName" yaml:"ManufacturerPartTypeName,omitempty"`
	ManufacturerCountry           null.String `boil:"ManufacturerCountry" json:"ManufacturerCountry,omitempty" toml:"ManufacturerCountry" yaml:"ManufacturerCountry,omitempty"`
	ConstructionYear              null.String `boil:"ConstructionYear" json:"ConstructionYear,omitempty" toml:"ConstructionYear" yaml:"ConstructionYear,omitempty"`
	ConstructionMonth             null.String `boil:"ConstructionMonth" json:"ConstructionMonth,omitempty" toml:"ConstructionMonth" yaml:"ConstructionMonth,omitempty"`
	ManufacturerPartNmbr          null.String `boil:"ManufacturerPartNmbr" json:"ManufacturerPartNmbr,omitempty" toml:"ManufacturerPartNmbr" yaml:"ManufacturerPartNmbr,omitempty"`
	ManufacturerSerialNumber      null.String `boil:"ManufacturerSerialNumber" json:"ManufacturerSerialNumber,omitempty" toml:"ManufacturerSerialNumber" yaml:"ManufacturerSerialNumber,omitempty"`
	MaintenancePlant              null.String `boil:"MaintenancePlant" json:"MaintenancePlant,omitempty" toml:"MaintenancePlant" yaml:"MaintenancePlant,omitempty"`
	AssetLocation                 null.String `boil:"AssetLocation" json:"AssetLocation,omitempty" toml:"AssetLocation" yaml:"AssetLocation,omitempty"`
	AssetRoom                     null.String `boil:"AssetRoom" json:"AssetRoom,omitempty" toml:"AssetRoom" yaml:"AssetRoom,omitempty"`
	PlantSection                  null.String `boil:"PlantSection" json:"PlantSection,omitempty" toml:"PlantSection" yaml:"PlantSection,omitempty"`
	WorkCenter                    null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	WorkCenterPlant               null.String `boil:"WorkCenterPlant" json:"WorkCenterPlant,omitempty" toml:"WorkCenterPlant" yaml:"WorkCenterPlant,omitempty"`
	CompanyCode                   null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	BusinessArea                  null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	MasterFixedAsset              null.String `boil:"MasterFixedAsset" json:"MasterFixedAsset,omitempty" toml:"MasterFixedAsset" yaml:"MasterFixedAsset,omitempty"`
	FixedAsset                    null.String `boil:"FixedAsset" json:"FixedAsset,omitempty" toml:"FixedAsset" yaml:"FixedAsset,omitempty"`
	CostCenter                    null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	WBSElementExternalID          null.String `boil:"WBSElementExternalID" json:"WBSElementExternalID,omitempty" toml:"WBSElementExternalID" yaml:"WBSElementExternalID,omitempty"`
	SettlementOrder               null.String `boil:"SettlementOrder" json:"SettlementOrder,omitempty" toml:"SettlementOrder" yaml:"SettlementOrder,omitempty"`
	MaintenancePlanningPlant      null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	MaintenancePlannerGroup       null.String `boil:"MaintenancePlannerGroup" json:"MaintenancePlannerGroup,omitempty" toml:"MaintenancePlannerGroup" yaml:"MaintenancePlannerGroup,omitempty"`
	MainWorkCenter                null.String `boil:"MainWorkCenter" json:"MainWorkCenter,omitempty" toml:"MainWorkCenter" yaml:"MainWorkCenter,omitempty"`
	MainWorkCenterPlant           null.String `boil:"MainWorkCenterPlant" json:"MainWorkCenterPlant,omitempty" toml:"MainWorkCenterPlant" yaml:"MainWorkCenterPlant,omitempty"`
	CatalogProfile                null.String `boil:"CatalogProfile" json:"CatalogProfile,omitempty" toml:"CatalogProfile" yaml:"CatalogProfile,omitempty"`
	FunctionalLocation            null.String `boil:"FunctionalLocation" json:"FunctionalLocation,omitempty" toml:"FunctionalLocation" yaml:"FunctionalLocation,omitempty"`
	SuperordinateEquipment        null.String `boil:"SuperordinateEquipment" json:"SuperordinateEquipment,omitempty" toml:"SuperordinateEquipment" yaml:"SuperordinateEquipment,omitempty"`
	EquipInstallationPositionNmbr null.String `boil:"EquipInstallationPositionNmbr" json:"EquipInstallationPositionNmbr,omitempty" toml:"EquipInstallationPositionNmbr" yaml:"EquipInstallationPositionNmbr,omitempty"`
	TechnicalObjectSortCode       null.String `boil:"TechnicalObjectSortCode" json:"TechnicalObjectSortCode,omitempty" toml:"TechnicalObjectSortCode" yaml:"TechnicalObjectSortCode,omitempty"`
	ConstructionMaterial          null.String `boil:"ConstructionMaterial" json:"ConstructionMaterial,omitempty" toml:"ConstructionMaterial" yaml:"ConstructionMaterial,omitempty"`
	Material                      null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	EquipmentIsAvailable          null.Bool   `boil:"EquipmentIsAvailable" json:"EquipmentIsAvailable,omitempty" toml:"EquipmentIsAvailable" yaml:"EquipmentIsAvailable,omitempty"`
	EquipmentIsInstalled          null.Bool   `boil:"EquipmentIsInstalled" json:"EquipmentIsInstalled,omitempty" toml:"EquipmentIsInstalled" yaml:"EquipmentIsInstalled,omitempty"`
	EquipIsAllocToSuperiorEquip   null.Bool   `boil:"EquipIsAllocToSuperiorEquip" json:"EquipIsAllocToSuperiorEquip,omitempty" toml:"EquipIsAllocToSuperiorEquip" yaml:"EquipIsAllocToSuperiorEquip,omitempty"`
	EquipHasSubOrdinateEquipment  null.String `boil:"EquipHasSubOrdinateEquipment" json:"EquipHasSubOrdinateEquipment,omitempty" toml:"EquipHasSubOrdinateEquipment" yaml:"EquipHasSubOrdinateEquipment,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDateTime            null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	EquipmentIsMarkedForDeletion  null.Bool   `boil:"EquipmentIsMarkedForDeletion" json:"EquipmentIsMarkedForDeletion,omitempty" toml:"EquipmentIsMarkedForDeletion" yaml:"EquipmentIsMarkedForDeletion,omitempty"`

	R *sapEquipmentMasterEquipmentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapEquipmentMasterEquipmentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapEquipmentMasterEquipmentDatumColumns = struct {
	Equipment                     string
	ValidityEndDate               string
	ValidityEndTime               string
	ValidityStartDate             string
	EquipmentName                 string
	EquipmentCategory             string
	TechnicalObjectType           string
	GrossWeight                   string
	GrossWeightUnit               string
	SizeOrDimensionText           string
	InventoryNumber               string
	OperationStartDate            string
	AcquisitionValue              string
	Currency                      string
	AcquisitionDate               string
	AssetManufacturerName         string
	ManufacturerPartTypeName      string
	ManufacturerCountry           string
	ConstructionYear              string
	ConstructionMonth             string
	ManufacturerPartNmbr          string
	ManufacturerSerialNumber      string
	MaintenancePlant              string
	AssetLocation                 string
	AssetRoom                     string
	PlantSection                  string
	WorkCenter                    string
	WorkCenterPlant               string
	CompanyCode                   string
	BusinessArea                  string
	MasterFixedAsset              string
	FixedAsset                    string
	CostCenter                    string
	WBSElementExternalID          string
	SettlementOrder               string
	MaintenancePlanningPlant      string
	MaintenancePlannerGroup       string
	MainWorkCenter                string
	MainWorkCenterPlant           string
	CatalogProfile                string
	FunctionalLocation            string
	SuperordinateEquipment        string
	EquipInstallationPositionNmbr string
	TechnicalObjectSortCode       string
	ConstructionMaterial          string
	Material                      string
	EquipmentIsAvailable          string
	EquipmentIsInstalled          string
	EquipIsAllocToSuperiorEquip   string
	EquipHasSubOrdinateEquipment  string
	CreationDate                  string
	LastChangeDateTime            string
	EquipmentIsMarkedForDeletion  string
}{
	Equipment:                     "Equipment",
	ValidityEndDate:               "ValidityEndDate",
	ValidityEndTime:               "ValidityEndTime",
	ValidityStartDate:             "ValidityStartDate",
	EquipmentName:                 "EquipmentName",
	EquipmentCategory:             "EquipmentCategory",
	TechnicalObjectType:           "TechnicalObjectType",
	GrossWeight:                   "GrossWeight",
	GrossWeightUnit:               "GrossWeightUnit",
	SizeOrDimensionText:           "SizeOrDimensionText",
	InventoryNumber:               "InventoryNumber",
	OperationStartDate:            "OperationStartDate",
	AcquisitionValue:              "AcquisitionValue",
	Currency:                      "Currency",
	AcquisitionDate:               "AcquisitionDate",
	AssetManufacturerName:         "AssetManufacturerName",
	ManufacturerPartTypeName:      "ManufacturerPartTypeName",
	ManufacturerCountry:           "ManufacturerCountry",
	ConstructionYear:              "ConstructionYear",
	ConstructionMonth:             "ConstructionMonth",
	ManufacturerPartNmbr:          "ManufacturerPartNmbr",
	ManufacturerSerialNumber:      "ManufacturerSerialNumber",
	MaintenancePlant:              "MaintenancePlant",
	AssetLocation:                 "AssetLocation",
	AssetRoom:                     "AssetRoom",
	PlantSection:                  "PlantSection",
	WorkCenter:                    "WorkCenter",
	WorkCenterPlant:               "WorkCenterPlant",
	CompanyCode:                   "CompanyCode",
	BusinessArea:                  "BusinessArea",
	MasterFixedAsset:              "MasterFixedAsset",
	FixedAsset:                    "FixedAsset",
	CostCenter:                    "CostCenter",
	WBSElementExternalID:          "WBSElementExternalID",
	SettlementOrder:               "SettlementOrder",
	MaintenancePlanningPlant:      "MaintenancePlanningPlant",
	MaintenancePlannerGroup:       "MaintenancePlannerGroup",
	MainWorkCenter:                "MainWorkCenter",
	MainWorkCenterPlant:           "MainWorkCenterPlant",
	CatalogProfile:                "CatalogProfile",
	FunctionalLocation:            "FunctionalLocation",
	SuperordinateEquipment:        "SuperordinateEquipment",
	EquipInstallationPositionNmbr: "EquipInstallationPositionNmbr",
	TechnicalObjectSortCode:       "TechnicalObjectSortCode",
	ConstructionMaterial:          "ConstructionMaterial",
	Material:                      "Material",
	EquipmentIsAvailable:          "EquipmentIsAvailable",
	EquipmentIsInstalled:          "EquipmentIsInstalled",
	EquipIsAllocToSuperiorEquip:   "EquipIsAllocToSuperiorEquip",
	EquipHasSubOrdinateEquipment:  "EquipHasSubOrdinateEquipment",
	CreationDate:                  "CreationDate",
	LastChangeDateTime:            "LastChangeDateTime",
	EquipmentIsMarkedForDeletion:  "EquipmentIsMarkedForDeletion",
}

var SapEquipmentMasterEquipmentDatumTableColumns = struct {
	Equipment                     string
	ValidityEndDate               string
	ValidityEndTime               string
	ValidityStartDate             string
	EquipmentName                 string
	EquipmentCategory             string
	TechnicalObjectType           string
	GrossWeight                   string
	GrossWeightUnit               string
	SizeOrDimensionText           string
	InventoryNumber               string
	OperationStartDate            string
	AcquisitionValue              string
	Currency                      string
	AcquisitionDate               string
	AssetManufacturerName         string
	ManufacturerPartTypeName      string
	ManufacturerCountry           string
	ConstructionYear              string
	ConstructionMonth             string
	ManufacturerPartNmbr          string
	ManufacturerSerialNumber      string
	MaintenancePlant              string
	AssetLocation                 string
	AssetRoom                     string
	PlantSection                  string
	WorkCenter                    string
	WorkCenterPlant               string
	CompanyCode                   string
	BusinessArea                  string
	MasterFixedAsset              string
	FixedAsset                    string
	CostCenter                    string
	WBSElementExternalID          string
	SettlementOrder               string
	MaintenancePlanningPlant      string
	MaintenancePlannerGroup       string
	MainWorkCenter                string
	MainWorkCenterPlant           string
	CatalogProfile                string
	FunctionalLocation            string
	SuperordinateEquipment        string
	EquipInstallationPositionNmbr string
	TechnicalObjectSortCode       string
	ConstructionMaterial          string
	Material                      string
	EquipmentIsAvailable          string
	EquipmentIsInstalled          string
	EquipIsAllocToSuperiorEquip   string
	EquipHasSubOrdinateEquipment  string
	CreationDate                  string
	LastChangeDateTime            string
	EquipmentIsMarkedForDeletion  string
}{
	Equipment:                     "sap_equipment_master_equipment_data.Equipment",
	ValidityEndDate:               "sap_equipment_master_equipment_data.ValidityEndDate",
	ValidityEndTime:               "sap_equipment_master_equipment_data.ValidityEndTime",
	ValidityStartDate:             "sap_equipment_master_equipment_data.ValidityStartDate",
	EquipmentName:                 "sap_equipment_master_equipment_data.EquipmentName",
	EquipmentCategory:             "sap_equipment_master_equipment_data.EquipmentCategory",
	TechnicalObjectType:           "sap_equipment_master_equipment_data.TechnicalObjectType",
	GrossWeight:                   "sap_equipment_master_equipment_data.GrossWeight",
	GrossWeightUnit:               "sap_equipment_master_equipment_data.GrossWeightUnit",
	SizeOrDimensionText:           "sap_equipment_master_equipment_data.SizeOrDimensionText",
	InventoryNumber:               "sap_equipment_master_equipment_data.InventoryNumber",
	OperationStartDate:            "sap_equipment_master_equipment_data.OperationStartDate",
	AcquisitionValue:              "sap_equipment_master_equipment_data.AcquisitionValue",
	Currency:                      "sap_equipment_master_equipment_data.Currency",
	AcquisitionDate:               "sap_equipment_master_equipment_data.AcquisitionDate",
	AssetManufacturerName:         "sap_equipment_master_equipment_data.AssetManufacturerName",
	ManufacturerPartTypeName:      "sap_equipment_master_equipment_data.ManufacturerPartTypeName",
	ManufacturerCountry:           "sap_equipment_master_equipment_data.ManufacturerCountry",
	ConstructionYear:              "sap_equipment_master_equipment_data.ConstructionYear",
	ConstructionMonth:             "sap_equipment_master_equipment_data.ConstructionMonth",
	ManufacturerPartNmbr:          "sap_equipment_master_equipment_data.ManufacturerPartNmbr",
	ManufacturerSerialNumber:      "sap_equipment_master_equipment_data.ManufacturerSerialNumber",
	MaintenancePlant:              "sap_equipment_master_equipment_data.MaintenancePlant",
	AssetLocation:                 "sap_equipment_master_equipment_data.AssetLocation",
	AssetRoom:                     "sap_equipment_master_equipment_data.AssetRoom",
	PlantSection:                  "sap_equipment_master_equipment_data.PlantSection",
	WorkCenter:                    "sap_equipment_master_equipment_data.WorkCenter",
	WorkCenterPlant:               "sap_equipment_master_equipment_data.WorkCenterPlant",
	CompanyCode:                   "sap_equipment_master_equipment_data.CompanyCode",
	BusinessArea:                  "sap_equipment_master_equipment_data.BusinessArea",
	MasterFixedAsset:              "sap_equipment_master_equipment_data.MasterFixedAsset",
	FixedAsset:                    "sap_equipment_master_equipment_data.FixedAsset",
	CostCenter:                    "sap_equipment_master_equipment_data.CostCenter",
	WBSElementExternalID:          "sap_equipment_master_equipment_data.WBSElementExternalID",
	SettlementOrder:               "sap_equipment_master_equipment_data.SettlementOrder",
	MaintenancePlanningPlant:      "sap_equipment_master_equipment_data.MaintenancePlanningPlant",
	MaintenancePlannerGroup:       "sap_equipment_master_equipment_data.MaintenancePlannerGroup",
	MainWorkCenter:                "sap_equipment_master_equipment_data.MainWorkCenter",
	MainWorkCenterPlant:           "sap_equipment_master_equipment_data.MainWorkCenterPlant",
	CatalogProfile:                "sap_equipment_master_equipment_data.CatalogProfile",
	FunctionalLocation:            "sap_equipment_master_equipment_data.FunctionalLocation",
	SuperordinateEquipment:        "sap_equipment_master_equipment_data.SuperordinateEquipment",
	EquipInstallationPositionNmbr: "sap_equipment_master_equipment_data.EquipInstallationPositionNmbr",
	TechnicalObjectSortCode:       "sap_equipment_master_equipment_data.TechnicalObjectSortCode",
	ConstructionMaterial:          "sap_equipment_master_equipment_data.ConstructionMaterial",
	Material:                      "sap_equipment_master_equipment_data.Material",
	EquipmentIsAvailable:          "sap_equipment_master_equipment_data.EquipmentIsAvailable",
	EquipmentIsInstalled:          "sap_equipment_master_equipment_data.EquipmentIsInstalled",
	EquipIsAllocToSuperiorEquip:   "sap_equipment_master_equipment_data.EquipIsAllocToSuperiorEquip",
	EquipHasSubOrdinateEquipment:  "sap_equipment_master_equipment_data.EquipHasSubOrdinateEquipment",
	CreationDate:                  "sap_equipment_master_equipment_data.CreationDate",
	LastChangeDateTime:            "sap_equipment_master_equipment_data.LastChangeDateTime",
	EquipmentIsMarkedForDeletion:  "sap_equipment_master_equipment_data.EquipmentIsMarkedForDeletion",
}

// Generated where

var SapEquipmentMasterEquipmentDatumWhere = struct {
	Equipment                     whereHelperstring
	ValidityEndDate               whereHelpernull_String
	ValidityEndTime               whereHelpernull_String
	ValidityStartDate             whereHelpernull_String
	EquipmentName                 whereHelpernull_String
	EquipmentCategory             whereHelpernull_String
	TechnicalObjectType           whereHelpernull_String
	GrossWeight                   whereHelpernull_String
	GrossWeightUnit               whereHelpernull_String
	SizeOrDimensionText           whereHelpernull_String
	InventoryNumber               whereHelpernull_String
	OperationStartDate            whereHelpernull_String
	AcquisitionValue              whereHelpernull_String
	Currency                      whereHelpernull_String
	AcquisitionDate               whereHelpernull_String
	AssetManufacturerName         whereHelpernull_String
	ManufacturerPartTypeName      whereHelpernull_String
	ManufacturerCountry           whereHelpernull_String
	ConstructionYear              whereHelpernull_String
	ConstructionMonth             whereHelpernull_String
	ManufacturerPartNmbr          whereHelpernull_String
	ManufacturerSerialNumber      whereHelpernull_String
	MaintenancePlant              whereHelpernull_String
	AssetLocation                 whereHelpernull_String
	AssetRoom                     whereHelpernull_String
	PlantSection                  whereHelpernull_String
	WorkCenter                    whereHelpernull_String
	WorkCenterPlant               whereHelpernull_String
	CompanyCode                   whereHelpernull_String
	BusinessArea                  whereHelpernull_String
	MasterFixedAsset              whereHelpernull_String
	FixedAsset                    whereHelpernull_String
	CostCenter                    whereHelpernull_String
	WBSElementExternalID          whereHelpernull_String
	SettlementOrder               whereHelpernull_String
	MaintenancePlanningPlant      whereHelpernull_String
	MaintenancePlannerGroup       whereHelpernull_String
	MainWorkCenter                whereHelpernull_String
	MainWorkCenterPlant           whereHelpernull_String
	CatalogProfile                whereHelpernull_String
	FunctionalLocation            whereHelpernull_String
	SuperordinateEquipment        whereHelpernull_String
	EquipInstallationPositionNmbr whereHelpernull_String
	TechnicalObjectSortCode       whereHelpernull_String
	ConstructionMaterial          whereHelpernull_String
	Material                      whereHelpernull_String
	EquipmentIsAvailable          whereHelpernull_Bool
	EquipmentIsInstalled          whereHelpernull_Bool
	EquipIsAllocToSuperiorEquip   whereHelpernull_Bool
	EquipHasSubOrdinateEquipment  whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDateTime            whereHelpernull_String
	EquipmentIsMarkedForDeletion  whereHelpernull_Bool
}{
	Equipment:                     whereHelperstring{field: "`sap_equipment_master_equipment_data`.`Equipment`"},
	ValidityEndDate:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ValidityEndDate`"},
	ValidityEndTime:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ValidityEndTime`"},
	ValidityStartDate:             whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ValidityStartDate`"},
	EquipmentName:                 whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`EquipmentName`"},
	EquipmentCategory:             whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`EquipmentCategory`"},
	TechnicalObjectType:           whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`TechnicalObjectType`"},
	GrossWeight:                   whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`GrossWeight`"},
	GrossWeightUnit:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`GrossWeightUnit`"},
	SizeOrDimensionText:           whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`SizeOrDimensionText`"},
	InventoryNumber:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`InventoryNumber`"},
	OperationStartDate:            whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`OperationStartDate`"},
	AcquisitionValue:              whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`AcquisitionValue`"},
	Currency:                      whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`Currency`"},
	AcquisitionDate:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`AcquisitionDate`"},
	AssetManufacturerName:         whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`AssetManufacturerName`"},
	ManufacturerPartTypeName:      whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ManufacturerPartTypeName`"},
	ManufacturerCountry:           whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ManufacturerCountry`"},
	ConstructionYear:              whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ConstructionYear`"},
	ConstructionMonth:             whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ConstructionMonth`"},
	ManufacturerPartNmbr:          whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ManufacturerPartNmbr`"},
	ManufacturerSerialNumber:      whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ManufacturerSerialNumber`"},
	MaintenancePlant:              whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`MaintenancePlant`"},
	AssetLocation:                 whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`AssetLocation`"},
	AssetRoom:                     whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`AssetRoom`"},
	PlantSection:                  whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`PlantSection`"},
	WorkCenter:                    whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`WorkCenter`"},
	WorkCenterPlant:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`WorkCenterPlant`"},
	CompanyCode:                   whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`CompanyCode`"},
	BusinessArea:                  whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`BusinessArea`"},
	MasterFixedAsset:              whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`MasterFixedAsset`"},
	FixedAsset:                    whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`FixedAsset`"},
	CostCenter:                    whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`CostCenter`"},
	WBSElementExternalID:          whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`WBSElementExternalID`"},
	SettlementOrder:               whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`SettlementOrder`"},
	MaintenancePlanningPlant:      whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`MaintenancePlanningPlant`"},
	MaintenancePlannerGroup:       whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`MaintenancePlannerGroup`"},
	MainWorkCenter:                whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`MainWorkCenter`"},
	MainWorkCenterPlant:           whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`MainWorkCenterPlant`"},
	CatalogProfile:                whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`CatalogProfile`"},
	FunctionalLocation:            whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`FunctionalLocation`"},
	SuperordinateEquipment:        whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`SuperordinateEquipment`"},
	EquipInstallationPositionNmbr: whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`EquipInstallationPositionNmbr`"},
	TechnicalObjectSortCode:       whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`TechnicalObjectSortCode`"},
	ConstructionMaterial:          whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`ConstructionMaterial`"},
	Material:                      whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`Material`"},
	EquipmentIsAvailable:          whereHelpernull_Bool{field: "`sap_equipment_master_equipment_data`.`EquipmentIsAvailable`"},
	EquipmentIsInstalled:          whereHelpernull_Bool{field: "`sap_equipment_master_equipment_data`.`EquipmentIsInstalled`"},
	EquipIsAllocToSuperiorEquip:   whereHelpernull_Bool{field: "`sap_equipment_master_equipment_data`.`EquipIsAllocToSuperiorEquip`"},
	EquipHasSubOrdinateEquipment:  whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`EquipHasSubOrdinateEquipment`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`CreationDate`"},
	LastChangeDateTime:            whereHelpernull_String{field: "`sap_equipment_master_equipment_data`.`LastChangeDateTime`"},
	EquipmentIsMarkedForDeletion:  whereHelpernull_Bool{field: "`sap_equipment_master_equipment_data`.`EquipmentIsMarkedForDeletion`"},
}

// SapEquipmentMasterEquipmentDatumRels is where relationship names are stored.
var SapEquipmentMasterEquipmentDatumRels = struct {
	EquipmentSapEquipmentMasterBusinessPartnerData string
}{
	EquipmentSapEquipmentMasterBusinessPartnerData: "EquipmentSapEquipmentMasterBusinessPartnerData",
}

// sapEquipmentMasterEquipmentDatumR is where relationships are stored.
type sapEquipmentMasterEquipmentDatumR struct {
	EquipmentSapEquipmentMasterBusinessPartnerData SapEquipmentMasterBusinessPartnerDatumSlice `boil:"EquipmentSapEquipmentMasterBusinessPartnerData" json:"EquipmentSapEquipmentMasterBusinessPartnerData" toml:"EquipmentSapEquipmentMasterBusinessPartnerData" yaml:"EquipmentSapEquipmentMasterBusinessPartnerData"`
}

// NewStruct creates a new relationship struct
func (*sapEquipmentMasterEquipmentDatumR) NewStruct() *sapEquipmentMasterEquipmentDatumR {
	return &sapEquipmentMasterEquipmentDatumR{}
}

func (r *sapEquipmentMasterEquipmentDatumR) GetEquipmentSapEquipmentMasterBusinessPartnerData() SapEquipmentMasterBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.EquipmentSapEquipmentMasterBusinessPartnerData
}

// sapEquipmentMasterEquipmentDatumL is where Load methods for each relationship are stored.
type sapEquipmentMasterEquipmentDatumL struct{}

var (
	sapEquipmentMasterEquipmentDatumAllColumns            = []string{"Equipment", "ValidityEndDate", "ValidityEndTime", "ValidityStartDate", "EquipmentName", "EquipmentCategory", "TechnicalObjectType", "GrossWeight", "GrossWeightUnit", "SizeOrDimensionText", "InventoryNumber", "OperationStartDate", "AcquisitionValue", "Currency", "AcquisitionDate", "AssetManufacturerName", "ManufacturerPartTypeName", "ManufacturerCountry", "ConstructionYear", "ConstructionMonth", "ManufacturerPartNmbr", "ManufacturerSerialNumber", "MaintenancePlant", "AssetLocation", "AssetRoom", "PlantSection", "WorkCenter", "WorkCenterPlant", "CompanyCode", "BusinessArea", "MasterFixedAsset", "FixedAsset", "CostCenter", "WBSElementExternalID", "SettlementOrder", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "MainWorkCenter", "MainWorkCenterPlant", "CatalogProfile", "FunctionalLocation", "SuperordinateEquipment", "EquipInstallationPositionNmbr", "TechnicalObjectSortCode", "ConstructionMaterial", "Material", "EquipmentIsAvailable", "EquipmentIsInstalled", "EquipIsAllocToSuperiorEquip", "EquipHasSubOrdinateEquipment", "CreationDate", "LastChangeDateTime", "EquipmentIsMarkedForDeletion"}
	sapEquipmentMasterEquipmentDatumColumnsWithoutDefault = []string{"Equipment", "ValidityEndDate", "ValidityEndTime", "ValidityStartDate", "EquipmentName", "EquipmentCategory", "TechnicalObjectType", "GrossWeight", "GrossWeightUnit", "SizeOrDimensionText", "InventoryNumber", "OperationStartDate", "AcquisitionValue", "Currency", "AcquisitionDate", "AssetManufacturerName", "ManufacturerPartTypeName", "ManufacturerCountry", "ConstructionYear", "ConstructionMonth", "ManufacturerPartNmbr", "ManufacturerSerialNumber", "MaintenancePlant", "AssetLocation", "AssetRoom", "PlantSection", "WorkCenter", "WorkCenterPlant", "CompanyCode", "BusinessArea", "MasterFixedAsset", "FixedAsset", "CostCenter", "WBSElementExternalID", "SettlementOrder", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "MainWorkCenter", "MainWorkCenterPlant", "CatalogProfile", "FunctionalLocation", "SuperordinateEquipment", "EquipInstallationPositionNmbr", "TechnicalObjectSortCode", "ConstructionMaterial", "Material", "EquipmentIsAvailable", "EquipmentIsInstalled", "EquipIsAllocToSuperiorEquip", "EquipHasSubOrdinateEquipment", "CreationDate", "LastChangeDateTime", "EquipmentIsMarkedForDeletion"}
	sapEquipmentMasterEquipmentDatumColumnsWithDefault    = []string{}
	sapEquipmentMasterEquipmentDatumPrimaryKeyColumns     = []string{"Equipment"}
	sapEquipmentMasterEquipmentDatumGeneratedColumns      = []string{}
)

type (
	// SapEquipmentMasterEquipmentDatumSlice is an alias for a slice of pointers to SapEquipmentMasterEquipmentDatum.
	// This should almost always be used instead of []SapEquipmentMasterEquipmentDatum.
	SapEquipmentMasterEquipmentDatumSlice []*SapEquipmentMasterEquipmentDatum
	// SapEquipmentMasterEquipmentDatumHook is the signature for custom SapEquipmentMasterEquipmentDatum hook methods
	SapEquipmentMasterEquipmentDatumHook func(context.Context, boil.ContextExecutor, *SapEquipmentMasterEquipmentDatum) error

	sapEquipmentMasterEquipmentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapEquipmentMasterEquipmentDatumType                 = reflect.TypeOf(&SapEquipmentMasterEquipmentDatum{})
	sapEquipmentMasterEquipmentDatumMapping              = queries.MakeStructMapping(sapEquipmentMasterEquipmentDatumType)
	sapEquipmentMasterEquipmentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns)
	sapEquipmentMasterEquipmentDatumInsertCacheMut       sync.RWMutex
	sapEquipmentMasterEquipmentDatumInsertCache          = make(map[string]insertCache)
	sapEquipmentMasterEquipmentDatumUpdateCacheMut       sync.RWMutex
	sapEquipmentMasterEquipmentDatumUpdateCache          = make(map[string]updateCache)
	sapEquipmentMasterEquipmentDatumUpsertCacheMut       sync.RWMutex
	sapEquipmentMasterEquipmentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapEquipmentMasterEquipmentDatumAfterSelectHooks []SapEquipmentMasterEquipmentDatumHook

var sapEquipmentMasterEquipmentDatumBeforeInsertHooks []SapEquipmentMasterEquipmentDatumHook
var sapEquipmentMasterEquipmentDatumAfterInsertHooks []SapEquipmentMasterEquipmentDatumHook

var sapEquipmentMasterEquipmentDatumBeforeUpdateHooks []SapEquipmentMasterEquipmentDatumHook
var sapEquipmentMasterEquipmentDatumAfterUpdateHooks []SapEquipmentMasterEquipmentDatumHook

var sapEquipmentMasterEquipmentDatumBeforeDeleteHooks []SapEquipmentMasterEquipmentDatumHook
var sapEquipmentMasterEquipmentDatumAfterDeleteHooks []SapEquipmentMasterEquipmentDatumHook

var sapEquipmentMasterEquipmentDatumBeforeUpsertHooks []SapEquipmentMasterEquipmentDatumHook
var sapEquipmentMasterEquipmentDatumAfterUpsertHooks []SapEquipmentMasterEquipmentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapEquipmentMasterEquipmentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterEquipmentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapEquipmentMasterEquipmentDatumHook registers your hook function for all future operations.
func AddSapEquipmentMasterEquipmentDatumHook(hookPoint boil.HookPoint, sapEquipmentMasterEquipmentDatumHook SapEquipmentMasterEquipmentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapEquipmentMasterEquipmentDatumAfterSelectHooks = append(sapEquipmentMasterEquipmentDatumAfterSelectHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.BeforeInsertHook:
		sapEquipmentMasterEquipmentDatumBeforeInsertHooks = append(sapEquipmentMasterEquipmentDatumBeforeInsertHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.AfterInsertHook:
		sapEquipmentMasterEquipmentDatumAfterInsertHooks = append(sapEquipmentMasterEquipmentDatumAfterInsertHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.BeforeUpdateHook:
		sapEquipmentMasterEquipmentDatumBeforeUpdateHooks = append(sapEquipmentMasterEquipmentDatumBeforeUpdateHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.AfterUpdateHook:
		sapEquipmentMasterEquipmentDatumAfterUpdateHooks = append(sapEquipmentMasterEquipmentDatumAfterUpdateHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.BeforeDeleteHook:
		sapEquipmentMasterEquipmentDatumBeforeDeleteHooks = append(sapEquipmentMasterEquipmentDatumBeforeDeleteHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.AfterDeleteHook:
		sapEquipmentMasterEquipmentDatumAfterDeleteHooks = append(sapEquipmentMasterEquipmentDatumAfterDeleteHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.BeforeUpsertHook:
		sapEquipmentMasterEquipmentDatumBeforeUpsertHooks = append(sapEquipmentMasterEquipmentDatumBeforeUpsertHooks, sapEquipmentMasterEquipmentDatumHook)
	case boil.AfterUpsertHook:
		sapEquipmentMasterEquipmentDatumAfterUpsertHooks = append(sapEquipmentMasterEquipmentDatumAfterUpsertHooks, sapEquipmentMasterEquipmentDatumHook)
	}
}

// One returns a single sapEquipmentMasterEquipmentDatum record from the query.
func (q sapEquipmentMasterEquipmentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapEquipmentMasterEquipmentDatum, error) {
	o := &SapEquipmentMasterEquipmentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_equipment_master_equipment_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapEquipmentMasterEquipmentDatum records from the query.
func (q sapEquipmentMasterEquipmentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapEquipmentMasterEquipmentDatumSlice, error) {
	var o []*SapEquipmentMasterEquipmentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapEquipmentMasterEquipmentDatum slice")
	}

	if len(sapEquipmentMasterEquipmentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapEquipmentMasterEquipmentDatum records in the query.
func (q sapEquipmentMasterEquipmentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_equipment_master_equipment_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapEquipmentMasterEquipmentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_equipment_master_equipment_data exists")
	}

	return count > 0, nil
}

// EquipmentSapEquipmentMasterBusinessPartnerData retrieves all the sap_equipment_master_business_partner_datum's SapEquipmentMasterBusinessPartnerData with an executor via Equipment column.
func (o *SapEquipmentMasterEquipmentDatum) EquipmentSapEquipmentMasterBusinessPartnerData(mods ...qm.QueryMod) sapEquipmentMasterBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_equipment_master_business_partner_data`.`Equipment`=?", o.Equipment),
	)

	return SapEquipmentMasterBusinessPartnerData(queryMods...)
}

// LoadEquipmentSapEquipmentMasterBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapEquipmentMasterEquipmentDatumL) LoadEquipmentSapEquipmentMasterBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapEquipmentMasterEquipmentDatum interface{}, mods queries.Applicator) error {
	var slice []*SapEquipmentMasterEquipmentDatum
	var object *SapEquipmentMasterEquipmentDatum

	if singular {
		object = maybeSapEquipmentMasterEquipmentDatum.(*SapEquipmentMasterEquipmentDatum)
	} else {
		slice = *maybeSapEquipmentMasterEquipmentDatum.(*[]*SapEquipmentMasterEquipmentDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapEquipmentMasterEquipmentDatumR{}
		}
		args = append(args, object.Equipment)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapEquipmentMasterEquipmentDatumR{}
			}

			for _, a := range args {
				if a == obj.Equipment {
					continue Outer
				}
			}

			args = append(args, obj.Equipment)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_equipment_master_business_partner_data`),
		qm.WhereIn(`sap_equipment_master_business_partner_data.Equipment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_equipment_master_business_partner_data")
	}

	var resultSlice []*SapEquipmentMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_equipment_master_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_equipment_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_equipment_master_business_partner_data")
	}

	if len(sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquipmentSapEquipmentMasterBusinessPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapEquipmentMasterBusinessPartnerDatumR{}
			}
			foreign.R.EquipmentSapEquipmentMasterEquipmentDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Equipment == foreign.Equipment {
				local.R.EquipmentSapEquipmentMasterBusinessPartnerData = append(local.R.EquipmentSapEquipmentMasterBusinessPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapEquipmentMasterBusinessPartnerDatumR{}
				}
				foreign.R.EquipmentSapEquipmentMasterEquipmentDatum = local
				break
			}
		}
	}

	return nil
}

// AddEquipmentSapEquipmentMasterBusinessPartnerData adds the given related objects to the existing relationships
// of the sap_equipment_master_equipment_datum, optionally inserting them as new records.
// Appends related to o.R.EquipmentSapEquipmentMasterBusinessPartnerData.
// Sets related.R.EquipmentSapEquipmentMasterEquipmentDatum appropriately.
func (o *SapEquipmentMasterEquipmentDatum) AddEquipmentSapEquipmentMasterBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapEquipmentMasterBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Equipment = o.Equipment
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_equipment_master_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Equipment"}),
				strmangle.WhereClause("`", "`", 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Equipment, rel.Equipment, rel.PartnerFunction, rel.EquipmentPartnerObjectNmbr}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Equipment = o.Equipment
		}
	}

	if o.R == nil {
		o.R = &sapEquipmentMasterEquipmentDatumR{
			EquipmentSapEquipmentMasterBusinessPartnerData: related,
		}
	} else {
		o.R.EquipmentSapEquipmentMasterBusinessPartnerData = append(o.R.EquipmentSapEquipmentMasterBusinessPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapEquipmentMasterBusinessPartnerDatumR{
				EquipmentSapEquipmentMasterEquipmentDatum: o,
			}
		} else {
			rel.R.EquipmentSapEquipmentMasterEquipmentDatum = o
		}
	}
	return nil
}

// SapEquipmentMasterEquipmentData retrieves all the records using an executor.
func SapEquipmentMasterEquipmentData(mods ...qm.QueryMod) sapEquipmentMasterEquipmentDatumQuery {
	mods = append(mods, qm.From("`sap_equipment_master_equipment_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_equipment_master_equipment_data`.*"})
	}

	return sapEquipmentMasterEquipmentDatumQuery{q}
}

// FindSapEquipmentMasterEquipmentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapEquipmentMasterEquipmentDatum(ctx context.Context, exec boil.ContextExecutor, equipment string, selectCols ...string) (*SapEquipmentMasterEquipmentDatum, error) {
	sapEquipmentMasterEquipmentDatumObj := &SapEquipmentMasterEquipmentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_equipment_master_equipment_data` where `Equipment`=?", sel,
	)

	q := queries.Raw(query, equipment)

	err := q.Bind(ctx, exec, sapEquipmentMasterEquipmentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_equipment_master_equipment_data")
	}

	if err = sapEquipmentMasterEquipmentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapEquipmentMasterEquipmentDatumObj, err
	}

	return sapEquipmentMasterEquipmentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapEquipmentMasterEquipmentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_equipment_master_equipment_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapEquipmentMasterEquipmentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapEquipmentMasterEquipmentDatumInsertCacheMut.RLock()
	cache, cached := sapEquipmentMasterEquipmentDatumInsertCache[key]
	sapEquipmentMasterEquipmentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapEquipmentMasterEquipmentDatumAllColumns,
			sapEquipmentMasterEquipmentDatumColumnsWithDefault,
			sapEquipmentMasterEquipmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_equipment_master_equipment_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_equipment_master_equipment_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_equipment_master_equipment_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_equipment_master_equipment_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Equipment,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_equipment_master_equipment_data")
	}

CacheNoHooks:
	if !cached {
		sapEquipmentMasterEquipmentDatumInsertCacheMut.Lock()
		sapEquipmentMasterEquipmentDatumInsertCache[key] = cache
		sapEquipmentMasterEquipmentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapEquipmentMasterEquipmentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapEquipmentMasterEquipmentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapEquipmentMasterEquipmentDatumUpdateCacheMut.RLock()
	cache, cached := sapEquipmentMasterEquipmentDatumUpdateCache[key]
	sapEquipmentMasterEquipmentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapEquipmentMasterEquipmentDatumAllColumns,
			sapEquipmentMasterEquipmentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_equipment_master_equipment_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_equipment_master_equipment_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, append(wl, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_equipment_master_equipment_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_equipment_master_equipment_data")
	}

	if !cached {
		sapEquipmentMasterEquipmentDatumUpdateCacheMut.Lock()
		sapEquipmentMasterEquipmentDatumUpdateCache[key] = cache
		sapEquipmentMasterEquipmentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapEquipmentMasterEquipmentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_equipment_master_equipment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_equipment_master_equipment_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapEquipmentMasterEquipmentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapEquipmentMasterEquipmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_equipment_master_equipment_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapEquipmentMasterEquipmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapEquipmentMasterEquipmentDatum")
	}
	return rowsAff, nil
}

var mySQLSapEquipmentMasterEquipmentDatumUniqueColumns = []string{
	"Equipment",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapEquipmentMasterEquipmentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_equipment_master_equipment_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapEquipmentMasterEquipmentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapEquipmentMasterEquipmentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapEquipmentMasterEquipmentDatumUpsertCacheMut.RLock()
	cache, cached := sapEquipmentMasterEquipmentDatumUpsertCache[key]
	sapEquipmentMasterEquipmentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapEquipmentMasterEquipmentDatumAllColumns,
			sapEquipmentMasterEquipmentDatumColumnsWithDefault,
			sapEquipmentMasterEquipmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapEquipmentMasterEquipmentDatumAllColumns,
			sapEquipmentMasterEquipmentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_equipment_master_equipment_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_equipment_master_equipment_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_equipment_master_equipment_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_equipment_master_equipment_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapEquipmentMasterEquipmentDatumType, sapEquipmentMasterEquipmentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_equipment_master_equipment_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_equipment_master_equipment_data")
	}

CacheNoHooks:
	if !cached {
		sapEquipmentMasterEquipmentDatumUpsertCacheMut.Lock()
		sapEquipmentMasterEquipmentDatumUpsertCache[key] = cache
		sapEquipmentMasterEquipmentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapEquipmentMasterEquipmentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapEquipmentMasterEquipmentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapEquipmentMasterEquipmentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapEquipmentMasterEquipmentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_equipment_master_equipment_data` WHERE `Equipment`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_equipment_master_equipment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_equipment_master_equipment_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapEquipmentMasterEquipmentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapEquipmentMasterEquipmentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_equipment_master_equipment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_equipment_master_equipment_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapEquipmentMasterEquipmentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapEquipmentMasterEquipmentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapEquipmentMasterEquipmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_equipment_master_equipment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapEquipmentMasterEquipmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_equipment_master_equipment_data")
	}

	if len(sapEquipmentMasterEquipmentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapEquipmentMasterEquipmentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapEquipmentMasterEquipmentDatum(ctx, exec, o.Equipment)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapEquipmentMasterEquipmentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapEquipmentMasterEquipmentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapEquipmentMasterEquipmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_equipment_master_equipment_data`.* FROM `sap_equipment_master_equipment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapEquipmentMasterEquipmentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapEquipmentMasterEquipmentDatumSlice")
	}

	*o = slice

	return nil
}

// SapEquipmentMasterEquipmentDatumExists checks if the SapEquipmentMasterEquipmentDatum row exists.
func SapEquipmentMasterEquipmentDatumExists(ctx context.Context, exec boil.ContextExecutor, equipment string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_equipment_master_equipment_data` where `Equipment`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, equipment)
	}
	row := exec.QueryRowContext(ctx, sql, equipment)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_equipment_master_equipment_data exists")
	}

	return exists, nil
}
