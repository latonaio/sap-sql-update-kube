// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterMRPAreaDatum is an object representing the database table.
type SapProductMasterMRPAreaDatum struct {
	Product                       string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                         string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	MRPArea                       string      `boil:"MRPArea" json:"MRPArea" toml:"MRPArea" yaml:"MRPArea"`
	MRPType                       null.String `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPResponsible                null.String `boil:"MRPResponsible" json:"MRPResponsible,omitempty" toml:"MRPResponsible" yaml:"MRPResponsible,omitempty"`
	MRPGroup                      null.String `boil:"MRPGroup" json:"MRPGroup,omitempty" toml:"MRPGroup" yaml:"MRPGroup,omitempty"`
	ReorderThresholdQuantity      null.String `boil:"ReorderThresholdQuantity" json:"ReorderThresholdQuantity,omitempty" toml:"ReorderThresholdQuantity" yaml:"ReorderThresholdQuantity,omitempty"`
	PlanningTimeFence             null.String `boil:"PlanningTimeFence" json:"PlanningTimeFence,omitempty" toml:"PlanningTimeFence" yaml:"PlanningTimeFence,omitempty"`
	LotSizingProcedure            null.String `boil:"LotSizingProcedure" json:"LotSizingProcedure,omitempty" toml:"LotSizingProcedure" yaml:"LotSizingProcedure,omitempty"`
	LotSizeRoundingQuantity       null.String `boil:"LotSizeRoundingQuantity" json:"LotSizeRoundingQuantity,omitempty" toml:"LotSizeRoundingQuantity" yaml:"LotSizeRoundingQuantity,omitempty"`
	MinimumLotSizeQuantity        null.String `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity        null.String `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	MaximumStockQuantity          null.String `boil:"MaximumStockQuantity" json:"MaximumStockQuantity,omitempty" toml:"MaximumStockQuantity" yaml:"MaximumStockQuantity,omitempty"`
	ProcurementSubType            null.String `boil:"ProcurementSubType" json:"ProcurementSubType,omitempty" toml:"ProcurementSubType" yaml:"ProcurementSubType,omitempty"`
	DfltStorageLocationExtProcmt  null.String `boil:"DfltStorageLocationExtProcmt" json:"DfltStorageLocationExtProcmt,omitempty" toml:"DfltStorageLocationExtProcmt" yaml:"DfltStorageLocationExtProcmt,omitempty"`
	MRPPlanningCalendar           null.String `boil:"MRPPlanningCalendar" json:"MRPPlanningCalendar,omitempty" toml:"MRPPlanningCalendar" yaml:"MRPPlanningCalendar,omitempty"`
	SafetyStockQuantity           null.String `boil:"SafetyStockQuantity" json:"SafetyStockQuantity,omitempty" toml:"SafetyStockQuantity" yaml:"SafetyStockQuantity,omitempty"`
	SafetyDuration                null.String `boil:"SafetyDuration" json:"SafetyDuration,omitempty" toml:"SafetyDuration" yaml:"SafetyDuration,omitempty"`
	FixedLotSizeQuantity          null.String `boil:"FixedLotSizeQuantity" json:"FixedLotSizeQuantity,omitempty" toml:"FixedLotSizeQuantity" yaml:"FixedLotSizeQuantity,omitempty"`
	PlannedDeliveryDurationInDays null.String `boil:"PlannedDeliveryDurationInDays" json:"PlannedDeliveryDurationInDays,omitempty" toml:"PlannedDeliveryDurationInDays" yaml:"PlannedDeliveryDurationInDays,omitempty"`
	StorageLocation               null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *sapProductMasterMRPAreaDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterMRPAreaDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterMRPAreaDatumColumns = struct {
	Product                       string
	Plant                         string
	MRPArea                       string
	MRPType                       string
	MRPResponsible                string
	MRPGroup                      string
	ReorderThresholdQuantity      string
	PlanningTimeFence             string
	LotSizingProcedure            string
	LotSizeRoundingQuantity       string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	MaximumStockQuantity          string
	ProcurementSubType            string
	DfltStorageLocationExtProcmt  string
	MRPPlanningCalendar           string
	SafetyStockQuantity           string
	SafetyDuration                string
	FixedLotSizeQuantity          string
	PlannedDeliveryDurationInDays string
	StorageLocation               string
	IsMarkedForDeletion           string
}{
	Product:                       "Product",
	Plant:                         "Plant",
	MRPArea:                       "MRPArea",
	MRPType:                       "MRPType",
	MRPResponsible:                "MRPResponsible",
	MRPGroup:                      "MRPGroup",
	ReorderThresholdQuantity:      "ReorderThresholdQuantity",
	PlanningTimeFence:             "PlanningTimeFence",
	LotSizingProcedure:            "LotSizingProcedure",
	LotSizeRoundingQuantity:       "LotSizeRoundingQuantity",
	MinimumLotSizeQuantity:        "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "MaximumLotSizeQuantity",
	MaximumStockQuantity:          "MaximumStockQuantity",
	ProcurementSubType:            "ProcurementSubType",
	DfltStorageLocationExtProcmt:  "DfltStorageLocationExtProcmt",
	MRPPlanningCalendar:           "MRPPlanningCalendar",
	SafetyStockQuantity:           "SafetyStockQuantity",
	SafetyDuration:                "SafetyDuration",
	FixedLotSizeQuantity:          "FixedLotSizeQuantity",
	PlannedDeliveryDurationInDays: "PlannedDeliveryDurationInDays",
	StorageLocation:               "StorageLocation",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var SapProductMasterMRPAreaDatumTableColumns = struct {
	Product                       string
	Plant                         string
	MRPArea                       string
	MRPType                       string
	MRPResponsible                string
	MRPGroup                      string
	ReorderThresholdQuantity      string
	PlanningTimeFence             string
	LotSizingProcedure            string
	LotSizeRoundingQuantity       string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	MaximumStockQuantity          string
	ProcurementSubType            string
	DfltStorageLocationExtProcmt  string
	MRPPlanningCalendar           string
	SafetyStockQuantity           string
	SafetyDuration                string
	FixedLotSizeQuantity          string
	PlannedDeliveryDurationInDays string
	StorageLocation               string
	IsMarkedForDeletion           string
}{
	Product:                       "sap_product_master_mrp_area_data.Product",
	Plant:                         "sap_product_master_mrp_area_data.Plant",
	MRPArea:                       "sap_product_master_mrp_area_data.MRPArea",
	MRPType:                       "sap_product_master_mrp_area_data.MRPType",
	MRPResponsible:                "sap_product_master_mrp_area_data.MRPResponsible",
	MRPGroup:                      "sap_product_master_mrp_area_data.MRPGroup",
	ReorderThresholdQuantity:      "sap_product_master_mrp_area_data.ReorderThresholdQuantity",
	PlanningTimeFence:             "sap_product_master_mrp_area_data.PlanningTimeFence",
	LotSizingProcedure:            "sap_product_master_mrp_area_data.LotSizingProcedure",
	LotSizeRoundingQuantity:       "sap_product_master_mrp_area_data.LotSizeRoundingQuantity",
	MinimumLotSizeQuantity:        "sap_product_master_mrp_area_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "sap_product_master_mrp_area_data.MaximumLotSizeQuantity",
	MaximumStockQuantity:          "sap_product_master_mrp_area_data.MaximumStockQuantity",
	ProcurementSubType:            "sap_product_master_mrp_area_data.ProcurementSubType",
	DfltStorageLocationExtProcmt:  "sap_product_master_mrp_area_data.DfltStorageLocationExtProcmt",
	MRPPlanningCalendar:           "sap_product_master_mrp_area_data.MRPPlanningCalendar",
	SafetyStockQuantity:           "sap_product_master_mrp_area_data.SafetyStockQuantity",
	SafetyDuration:                "sap_product_master_mrp_area_data.SafetyDuration",
	FixedLotSizeQuantity:          "sap_product_master_mrp_area_data.FixedLotSizeQuantity",
	PlannedDeliveryDurationInDays: "sap_product_master_mrp_area_data.PlannedDeliveryDurationInDays",
	StorageLocation:               "sap_product_master_mrp_area_data.StorageLocation",
	IsMarkedForDeletion:           "sap_product_master_mrp_area_data.IsMarkedForDeletion",
}

// Generated where

var SapProductMasterMRPAreaDatumWhere = struct {
	Product                       whereHelperstring
	Plant                         whereHelperstring
	MRPArea                       whereHelperstring
	MRPType                       whereHelpernull_String
	MRPResponsible                whereHelpernull_String
	MRPGroup                      whereHelpernull_String
	ReorderThresholdQuantity      whereHelpernull_String
	PlanningTimeFence             whereHelpernull_String
	LotSizingProcedure            whereHelpernull_String
	LotSizeRoundingQuantity       whereHelpernull_String
	MinimumLotSizeQuantity        whereHelpernull_String
	MaximumLotSizeQuantity        whereHelpernull_String
	MaximumStockQuantity          whereHelpernull_String
	ProcurementSubType            whereHelpernull_String
	DfltStorageLocationExtProcmt  whereHelpernull_String
	MRPPlanningCalendar           whereHelpernull_String
	SafetyStockQuantity           whereHelpernull_String
	SafetyDuration                whereHelpernull_String
	FixedLotSizeQuantity          whereHelpernull_String
	PlannedDeliveryDurationInDays whereHelpernull_String
	StorageLocation               whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	Product:                       whereHelperstring{field: "`sap_product_master_mrp_area_data`.`Product`"},
	Plant:                         whereHelperstring{field: "`sap_product_master_mrp_area_data`.`Plant`"},
	MRPArea:                       whereHelperstring{field: "`sap_product_master_mrp_area_data`.`MRPArea`"},
	MRPType:                       whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MRPType`"},
	MRPResponsible:                whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MRPResponsible`"},
	MRPGroup:                      whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MRPGroup`"},
	ReorderThresholdQuantity:      whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`ReorderThresholdQuantity`"},
	PlanningTimeFence:             whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`PlanningTimeFence`"},
	LotSizingProcedure:            whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`LotSizingProcedure`"},
	LotSizeRoundingQuantity:       whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`LotSizeRoundingQuantity`"},
	MinimumLotSizeQuantity:        whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:        whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MaximumLotSizeQuantity`"},
	MaximumStockQuantity:          whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MaximumStockQuantity`"},
	ProcurementSubType:            whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`ProcurementSubType`"},
	DfltStorageLocationExtProcmt:  whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`DfltStorageLocationExtProcmt`"},
	MRPPlanningCalendar:           whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`MRPPlanningCalendar`"},
	SafetyStockQuantity:           whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`SafetyStockQuantity`"},
	SafetyDuration:                whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`SafetyDuration`"},
	FixedLotSizeQuantity:          whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`FixedLotSizeQuantity`"},
	PlannedDeliveryDurationInDays: whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`PlannedDeliveryDurationInDays`"},
	StorageLocation:               whereHelpernull_String{field: "`sap_product_master_mrp_area_data`.`StorageLocation`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`sap_product_master_mrp_area_data`.`IsMarkedForDeletion`"},
}

// SapProductMasterMRPAreaDatumRels is where relationship names are stored.
var SapProductMasterMRPAreaDatumRels = struct {
	ProductSapProductMasterGeneralDatum string
}{
	ProductSapProductMasterGeneralDatum: "ProductSapProductMasterGeneralDatum",
}

// sapProductMasterMRPAreaDatumR is where relationships are stored.
type sapProductMasterMRPAreaDatumR struct {
	ProductSapProductMasterGeneralDatum *SapProductMasterGeneralDatum `boil:"ProductSapProductMasterGeneralDatum" json:"ProductSapProductMasterGeneralDatum" toml:"ProductSapProductMasterGeneralDatum" yaml:"ProductSapProductMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterMRPAreaDatumR) NewStruct() *sapProductMasterMRPAreaDatumR {
	return &sapProductMasterMRPAreaDatumR{}
}

// sapProductMasterMRPAreaDatumL is where Load methods for each relationship are stored.
type sapProductMasterMRPAreaDatumL struct{}

var (
	sapProductMasterMRPAreaDatumAllColumns            = []string{"Product", "Plant", "MRPArea", "MRPType", "MRPResponsible", "MRPGroup", "ReorderThresholdQuantity", "PlanningTimeFence", "LotSizingProcedure", "LotSizeRoundingQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "MaximumStockQuantity", "ProcurementSubType", "DfltStorageLocationExtProcmt", "MRPPlanningCalendar", "SafetyStockQuantity", "SafetyDuration", "FixedLotSizeQuantity", "PlannedDeliveryDurationInDays", "StorageLocation", "IsMarkedForDeletion"}
	sapProductMasterMRPAreaDatumColumnsWithoutDefault = []string{"Product", "Plant", "MRPArea", "MRPType", "MRPResponsible", "MRPGroup", "ReorderThresholdQuantity", "PlanningTimeFence", "LotSizingProcedure", "LotSizeRoundingQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "MaximumStockQuantity", "ProcurementSubType", "DfltStorageLocationExtProcmt", "MRPPlanningCalendar", "SafetyStockQuantity", "SafetyDuration", "FixedLotSizeQuantity", "PlannedDeliveryDurationInDays", "StorageLocation", "IsMarkedForDeletion"}
	sapProductMasterMRPAreaDatumColumnsWithDefault    = []string{}
	sapProductMasterMRPAreaDatumPrimaryKeyColumns     = []string{"Product", "Plant", "MRPArea"}
	sapProductMasterMRPAreaDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterMRPAreaDatumSlice is an alias for a slice of pointers to SapProductMasterMRPAreaDatum.
	// This should almost always be used instead of []SapProductMasterMRPAreaDatum.
	SapProductMasterMRPAreaDatumSlice []*SapProductMasterMRPAreaDatum
	// SapProductMasterMRPAreaDatumHook is the signature for custom SapProductMasterMRPAreaDatum hook methods
	SapProductMasterMRPAreaDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterMRPAreaDatum) error

	sapProductMasterMRPAreaDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterMRPAreaDatumType                 = reflect.TypeOf(&SapProductMasterMRPAreaDatum{})
	sapProductMasterMRPAreaDatumMapping              = queries.MakeStructMapping(sapProductMasterMRPAreaDatumType)
	sapProductMasterMRPAreaDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, sapProductMasterMRPAreaDatumPrimaryKeyColumns)
	sapProductMasterMRPAreaDatumInsertCacheMut       sync.RWMutex
	sapProductMasterMRPAreaDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterMRPAreaDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterMRPAreaDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterMRPAreaDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterMRPAreaDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterMRPAreaDatumAfterSelectHooks []SapProductMasterMRPAreaDatumHook

var sapProductMasterMRPAreaDatumBeforeInsertHooks []SapProductMasterMRPAreaDatumHook
var sapProductMasterMRPAreaDatumAfterInsertHooks []SapProductMasterMRPAreaDatumHook

var sapProductMasterMRPAreaDatumBeforeUpdateHooks []SapProductMasterMRPAreaDatumHook
var sapProductMasterMRPAreaDatumAfterUpdateHooks []SapProductMasterMRPAreaDatumHook

var sapProductMasterMRPAreaDatumBeforeDeleteHooks []SapProductMasterMRPAreaDatumHook
var sapProductMasterMRPAreaDatumAfterDeleteHooks []SapProductMasterMRPAreaDatumHook

var sapProductMasterMRPAreaDatumBeforeUpsertHooks []SapProductMasterMRPAreaDatumHook
var sapProductMasterMRPAreaDatumAfterUpsertHooks []SapProductMasterMRPAreaDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterMRPAreaDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterMRPAreaDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterMRPAreaDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterMRPAreaDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterMRPAreaDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterMRPAreaDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterMRPAreaDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterMRPAreaDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterMRPAreaDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterMRPAreaDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterMRPAreaDatumHook registers your hook function for all future operations.
func AddSapProductMasterMRPAreaDatumHook(hookPoint boil.HookPoint, sapProductMasterMRPAreaDatumHook SapProductMasterMRPAreaDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterMRPAreaDatumAfterSelectHooks = append(sapProductMasterMRPAreaDatumAfterSelectHooks, sapProductMasterMRPAreaDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterMRPAreaDatumBeforeInsertHooks = append(sapProductMasterMRPAreaDatumBeforeInsertHooks, sapProductMasterMRPAreaDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterMRPAreaDatumAfterInsertHooks = append(sapProductMasterMRPAreaDatumAfterInsertHooks, sapProductMasterMRPAreaDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterMRPAreaDatumBeforeUpdateHooks = append(sapProductMasterMRPAreaDatumBeforeUpdateHooks, sapProductMasterMRPAreaDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterMRPAreaDatumAfterUpdateHooks = append(sapProductMasterMRPAreaDatumAfterUpdateHooks, sapProductMasterMRPAreaDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterMRPAreaDatumBeforeDeleteHooks = append(sapProductMasterMRPAreaDatumBeforeDeleteHooks, sapProductMasterMRPAreaDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterMRPAreaDatumAfterDeleteHooks = append(sapProductMasterMRPAreaDatumAfterDeleteHooks, sapProductMasterMRPAreaDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterMRPAreaDatumBeforeUpsertHooks = append(sapProductMasterMRPAreaDatumBeforeUpsertHooks, sapProductMasterMRPAreaDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterMRPAreaDatumAfterUpsertHooks = append(sapProductMasterMRPAreaDatumAfterUpsertHooks, sapProductMasterMRPAreaDatumHook)
	}
}

// One returns a single sapProductMasterMRPAreaDatum record from the query.
func (q sapProductMasterMRPAreaDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterMRPAreaDatum, error) {
	o := &SapProductMasterMRPAreaDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_mrp_area_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterMRPAreaDatum records from the query.
func (q sapProductMasterMRPAreaDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterMRPAreaDatumSlice, error) {
	var o []*SapProductMasterMRPAreaDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterMRPAreaDatum slice")
	}

	if len(sapProductMasterMRPAreaDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterMRPAreaDatum records in the query.
func (q sapProductMasterMRPAreaDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_mrp_area_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterMRPAreaDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_mrp_area_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterMRPAreaDatum) ProductSapProductMasterGeneralDatum(mods ...qm.QueryMod) sapProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_general_data`")

	return query
}

// LoadProductSapProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterMRPAreaDatumL) LoadProductSapProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterMRPAreaDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterMRPAreaDatum
	var object *SapProductMasterMRPAreaDatum

	if singular {
		object = maybeSapProductMasterMRPAreaDatum.(*SapProductMasterMRPAreaDatum)
	} else {
		slice = *maybeSapProductMasterMRPAreaDatum.(*[]*SapProductMasterMRPAreaDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterMRPAreaDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterMRPAreaDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_general_data`),
		qm.WhereIn(`sap_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterGeneralDatum")
	}

	var resultSlice []*SapProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_general_data")
	}

	if len(sapProductMasterMRPAreaDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterMRPAreaData = append(foreign.R.ProductSapProductMasterMRPAreaData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterMRPAreaData = append(foreign.R.ProductSapProductMasterMRPAreaData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterGeneralDatum of the sapProductMasterMRPAreaDatum to the related item.
// Sets o.R.ProductSapProductMasterGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterMRPAreaData.
func (o *SapProductMasterMRPAreaDatum) SetProductSapProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_mrp_area_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterMRPAreaDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.Plant, o.MRPArea}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterMRPAreaDatumR{
			ProductSapProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterGeneralDatumR{
			ProductSapProductMasterMRPAreaData: SapProductMasterMRPAreaDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterMRPAreaData = append(related.R.ProductSapProductMasterMRPAreaData, o)
	}

	return nil
}

// SapProductMasterMRPAreaData retrieves all the records using an executor.
func SapProductMasterMRPAreaData(mods ...qm.QueryMod) sapProductMasterMRPAreaDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_mrp_area_data`"))
	return sapProductMasterMRPAreaDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterMRPAreaDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterMRPAreaDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, mRPArea string, selectCols ...string) (*SapProductMasterMRPAreaDatum, error) {
	sapProductMasterMRPAreaDatumObj := &SapProductMasterMRPAreaDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_mrp_area_data` where `Product`=? AND `Plant`=? AND `MRPArea`=?", sel,
	)

	q := queries.Raw(query, product, plant, mRPArea)

	err := q.Bind(ctx, exec, sapProductMasterMRPAreaDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_mrp_area_data")
	}

	if err = sapProductMasterMRPAreaDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterMRPAreaDatumObj, err
	}

	return sapProductMasterMRPAreaDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterMRPAreaDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_mrp_area_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterMRPAreaDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterMRPAreaDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterMRPAreaDatumInsertCache[key]
	sapProductMasterMRPAreaDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterMRPAreaDatumAllColumns,
			sapProductMasterMRPAreaDatumColumnsWithDefault,
			sapProductMasterMRPAreaDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_mrp_area_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_mrp_area_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_mrp_area_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterMRPAreaDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_mrp_area_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
		o.MRPArea,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_mrp_area_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterMRPAreaDatumInsertCacheMut.Lock()
		sapProductMasterMRPAreaDatumInsertCache[key] = cache
		sapProductMasterMRPAreaDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterMRPAreaDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterMRPAreaDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterMRPAreaDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterMRPAreaDatumUpdateCache[key]
	sapProductMasterMRPAreaDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterMRPAreaDatumAllColumns,
			sapProductMasterMRPAreaDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_mrp_area_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_mrp_area_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterMRPAreaDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, append(wl, sapProductMasterMRPAreaDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_mrp_area_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_mrp_area_data")
	}

	if !cached {
		sapProductMasterMRPAreaDatumUpdateCacheMut.Lock()
		sapProductMasterMRPAreaDatumUpdateCache[key] = cache
		sapProductMasterMRPAreaDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterMRPAreaDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_mrp_area_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_mrp_area_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterMRPAreaDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterMRPAreaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_mrp_area_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterMRPAreaDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterMRPAreaDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterMRPAreaDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterMRPAreaDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterMRPAreaDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_mrp_area_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterMRPAreaDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterMRPAreaDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterMRPAreaDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterMRPAreaDatumUpsertCache[key]
	sapProductMasterMRPAreaDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterMRPAreaDatumAllColumns,
			sapProductMasterMRPAreaDatumColumnsWithDefault,
			sapProductMasterMRPAreaDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterMRPAreaDatumAllColumns,
			sapProductMasterMRPAreaDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_mrp_area_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_mrp_area_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_mrp_area_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_mrp_area_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterMRPAreaDatumType, sapProductMasterMRPAreaDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_mrp_area_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_mrp_area_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterMRPAreaDatumUpsertCacheMut.Lock()
		sapProductMasterMRPAreaDatumUpsertCache[key] = cache
		sapProductMasterMRPAreaDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterMRPAreaDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterMRPAreaDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterMRPAreaDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterMRPAreaDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_mrp_area_data` WHERE `Product`=? AND `Plant`=? AND `MRPArea`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_mrp_area_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_mrp_area_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterMRPAreaDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterMRPAreaDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_mrp_area_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_mrp_area_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterMRPAreaDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterMRPAreaDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterMRPAreaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_mrp_area_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterMRPAreaDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterMRPAreaDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_mrp_area_data")
	}

	if len(sapProductMasterMRPAreaDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterMRPAreaDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterMRPAreaDatum(ctx, exec, o.Product, o.Plant, o.MRPArea)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterMRPAreaDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterMRPAreaDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterMRPAreaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_mrp_area_data`.* FROM `sap_product_master_mrp_area_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterMRPAreaDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterMRPAreaDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterMRPAreaDatumExists checks if the SapProductMasterMRPAreaDatum row exists.
func SapProductMasterMRPAreaDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string, mRPArea string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_mrp_area_data` where `Product`=? AND `Plant`=? AND `MRPArea`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant, mRPArea)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant, mRPArea)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_mrp_area_data exists")
	}

	return exists, nil
}
