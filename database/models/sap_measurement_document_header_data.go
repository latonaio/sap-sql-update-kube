// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMeasurementDocumentHeaderDatum is an object representing the database table.
type SapMeasurementDocumentHeaderDatum struct {
	MeasurementDocument            string       `boil:"MeasurementDocument" json:"MeasurementDocument" toml:"MeasurementDocument" yaml:"MeasurementDocument"`
	MeasuringPoint                 null.String  `boil:"MeasuringPoint" json:"MeasuringPoint,omitempty" toml:"MeasuringPoint" yaml:"MeasuringPoint,omitempty"`
	MeasuringPointPositionNumber   null.String  `boil:"MeasuringPointPositionNumber" json:"MeasuringPointPositionNumber,omitempty" toml:"MeasuringPointPositionNumber" yaml:"MeasuringPointPositionNumber,omitempty"`
	MsmtRdngDate                   null.String  `boil:"MsmtRdngDate" json:"MsmtRdngDate,omitempty" toml:"MsmtRdngDate" yaml:"MsmtRdngDate,omitempty"`
	MsmtRdngTime                   null.String  `boil:"MsmtRdngTime" json:"MsmtRdngTime,omitempty" toml:"MsmtRdngTime" yaml:"MsmtRdngTime,omitempty"`
	Characteristic                 null.String  `boil:"Characteristic" json:"Characteristic,omitempty" toml:"Characteristic" yaml:"Characteristic,omitempty"`
	MsmtDocumentReferredOrder      null.String  `boil:"MsmtDocumentReferredOrder" json:"MsmtDocumentReferredOrder,omitempty" toml:"MsmtDocumentReferredOrder" yaml:"MsmtDocumentReferredOrder,omitempty"`
	RefdMaintOrderOpStatusObject   null.String  `boil:"RefdMaintOrderOpStatusObject" json:"RefdMaintOrderOpStatusObject,omitempty" toml:"RefdMaintOrderOpStatusObject" yaml:"RefdMaintOrderOpStatusObject,omitempty"`
	MaintenanceOrderOperation      null.String  `boil:"MaintenanceOrderOperation" json:"MaintenanceOrderOperation,omitempty" toml:"MaintenanceOrderOperation" yaml:"MaintenanceOrderOperation,omitempty"`
	MaintenanceOrderSubOperation   null.String  `boil:"MaintenanceOrderSubOperation" json:"MaintenanceOrderSubOperation,omitempty" toml:"MaintenanceOrderSubOperation" yaml:"MaintenanceOrderSubOperation,omitempty"`
	MsmtIsDoneAfterTaskCompltn     null.Bool    `boil:"MsmtIsDoneAfterTaskCompltn" json:"MsmtIsDoneAfterTaskCompltn,omitempty" toml:"MsmtIsDoneAfterTaskCompltn" yaml:"MsmtIsDoneAfterTaskCompltn,omitempty"`
	CharcValueUnit                 null.String  `boil:"CharcValueUnit" json:"CharcValueUnit,omitempty" toml:"CharcValueUnit" yaml:"CharcValueUnit,omitempty"`
	MeasurementReading             null.Float64 `boil:"MeasurementReading" json:"MeasurementReading,omitempty" toml:"MeasurementReading" yaml:"MeasurementReading,omitempty"`
	MeasurementReadingInEntryUoM   null.Float64 `boil:"MeasurementReadingInEntryUoM" json:"MeasurementReadingInEntryUoM,omitempty" toml:"MeasurementReadingInEntryUoM" yaml:"MeasurementReadingInEntryUoM,omitempty"`
	MeasurementReadingEntryUoM     null.String  `boil:"MeasurementReadingEntryUoM" json:"MeasurementReadingEntryUoM,omitempty" toml:"MeasurementReadingEntryUoM" yaml:"MeasurementReadingEntryUoM,omitempty"`
	MeasurementCounterReading      null.Float64 `boil:"MeasurementCounterReading" json:"MeasurementCounterReading,omitempty" toml:"MeasurementCounterReading" yaml:"MeasurementCounterReading,omitempty"`
	MsmtCounterReadingDifference   null.Float64 `boil:"MsmtCounterReadingDifference" json:"MsmtCounterReadingDifference,omitempty" toml:"MsmtCounterReadingDifference" yaml:"MsmtCounterReadingDifference,omitempty"`
	TotalMsmtRdngIsSetExternally   null.Bool    `boil:"TotalMsmtRdngIsSetExternally" json:"TotalMsmtRdngIsSetExternally,omitempty" toml:"TotalMsmtRdngIsSetExternally" yaml:"TotalMsmtRdngIsSetExternally,omitempty"`
	MeasuringPointTargetValue      null.Float64 `boil:"MeasuringPointTargetValue" json:"MeasuringPointTargetValue,omitempty" toml:"MeasuringPointTargetValue" yaml:"MeasuringPointTargetValue,omitempty"`
	MsmtValuationCode              null.String  `boil:"MsmtValuationCode" json:"MsmtValuationCode,omitempty" toml:"MsmtValuationCode" yaml:"MsmtValuationCode,omitempty"`
	MeasurementDocumentText        null.String  `boil:"MeasurementDocumentText" json:"MeasurementDocumentText,omitempty" toml:"MeasurementDocumentText" yaml:"MeasurementDocumentText,omitempty"`
	MeasurementDocumentHasLongText null.Bool    `boil:"MeasurementDocumentHasLongText" json:"MeasurementDocumentHasLongText,omitempty" toml:"MeasurementDocumentHasLongText" yaml:"MeasurementDocumentHasLongText,omitempty"`
	MsmtRdngByUser                 null.String  `boil:"MsmtRdngByUser" json:"MsmtRdngByUser,omitempty" toml:"MsmtRdngByUser" yaml:"MsmtRdngByUser,omitempty"`
	MsmtRdngStatus                 null.String  `boil:"MsmtRdngStatus" json:"MsmtRdngStatus,omitempty" toml:"MsmtRdngStatus" yaml:"MsmtRdngStatus,omitempty"`
	MsmtCntrReadingDiffIsEntered   null.Bool    `boil:"MsmtCntrReadingDiffIsEntered" json:"MsmtCntrReadingDiffIsEntered,omitempty" toml:"MsmtCntrReadingDiffIsEntered" yaml:"MsmtCntrReadingDiffIsEntered,omitempty"`
	MsmtRdngIsReversed             null.Bool    `boil:"MsmtRdngIsReversed" json:"MsmtRdngIsReversed,omitempty" toml:"MsmtRdngIsReversed" yaml:"MsmtRdngIsReversed,omitempty"`
	MsmtCounterReadingIsReplaced   null.Bool    `boil:"MsmtCounterReadingIsReplaced" json:"MsmtCounterReadingIsReplaced,omitempty" toml:"MsmtCounterReadingIsReplaced" yaml:"MsmtCounterReadingIsReplaced,omitempty"`

	R *sapMeasurementDocumentHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMeasurementDocumentHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMeasurementDocumentHeaderDatumColumns = struct {
	MeasurementDocument            string
	MeasuringPoint                 string
	MeasuringPointPositionNumber   string
	MsmtRdngDate                   string
	MsmtRdngTime                   string
	Characteristic                 string
	MsmtDocumentReferredOrder      string
	RefdMaintOrderOpStatusObject   string
	MaintenanceOrderOperation      string
	MaintenanceOrderSubOperation   string
	MsmtIsDoneAfterTaskCompltn     string
	CharcValueUnit                 string
	MeasurementReading             string
	MeasurementReadingInEntryUoM   string
	MeasurementReadingEntryUoM     string
	MeasurementCounterReading      string
	MsmtCounterReadingDifference   string
	TotalMsmtRdngIsSetExternally   string
	MeasuringPointTargetValue      string
	MsmtValuationCode              string
	MeasurementDocumentText        string
	MeasurementDocumentHasLongText string
	MsmtRdngByUser                 string
	MsmtRdngStatus                 string
	MsmtCntrReadingDiffIsEntered   string
	MsmtRdngIsReversed             string
	MsmtCounterReadingIsReplaced   string
}{
	MeasurementDocument:            "MeasurementDocument",
	MeasuringPoint:                 "MeasuringPoint",
	MeasuringPointPositionNumber:   "MeasuringPointPositionNumber",
	MsmtRdngDate:                   "MsmtRdngDate",
	MsmtRdngTime:                   "MsmtRdngTime",
	Characteristic:                 "Characteristic",
	MsmtDocumentReferredOrder:      "MsmtDocumentReferredOrder",
	RefdMaintOrderOpStatusObject:   "RefdMaintOrderOpStatusObject",
	MaintenanceOrderOperation:      "MaintenanceOrderOperation",
	MaintenanceOrderSubOperation:   "MaintenanceOrderSubOperation",
	MsmtIsDoneAfterTaskCompltn:     "MsmtIsDoneAfterTaskCompltn",
	CharcValueUnit:                 "CharcValueUnit",
	MeasurementReading:             "MeasurementReading",
	MeasurementReadingInEntryUoM:   "MeasurementReadingInEntryUoM",
	MeasurementReadingEntryUoM:     "MeasurementReadingEntryUoM",
	MeasurementCounterReading:      "MeasurementCounterReading",
	MsmtCounterReadingDifference:   "MsmtCounterReadingDifference",
	TotalMsmtRdngIsSetExternally:   "TotalMsmtRdngIsSetExternally",
	MeasuringPointTargetValue:      "MeasuringPointTargetValue",
	MsmtValuationCode:              "MsmtValuationCode",
	MeasurementDocumentText:        "MeasurementDocumentText",
	MeasurementDocumentHasLongText: "MeasurementDocumentHasLongText",
	MsmtRdngByUser:                 "MsmtRdngByUser",
	MsmtRdngStatus:                 "MsmtRdngStatus",
	MsmtCntrReadingDiffIsEntered:   "MsmtCntrReadingDiffIsEntered",
	MsmtRdngIsReversed:             "MsmtRdngIsReversed",
	MsmtCounterReadingIsReplaced:   "MsmtCounterReadingIsReplaced",
}

var SapMeasurementDocumentHeaderDatumTableColumns = struct {
	MeasurementDocument            string
	MeasuringPoint                 string
	MeasuringPointPositionNumber   string
	MsmtRdngDate                   string
	MsmtRdngTime                   string
	Characteristic                 string
	MsmtDocumentReferredOrder      string
	RefdMaintOrderOpStatusObject   string
	MaintenanceOrderOperation      string
	MaintenanceOrderSubOperation   string
	MsmtIsDoneAfterTaskCompltn     string
	CharcValueUnit                 string
	MeasurementReading             string
	MeasurementReadingInEntryUoM   string
	MeasurementReadingEntryUoM     string
	MeasurementCounterReading      string
	MsmtCounterReadingDifference   string
	TotalMsmtRdngIsSetExternally   string
	MeasuringPointTargetValue      string
	MsmtValuationCode              string
	MeasurementDocumentText        string
	MeasurementDocumentHasLongText string
	MsmtRdngByUser                 string
	MsmtRdngStatus                 string
	MsmtCntrReadingDiffIsEntered   string
	MsmtRdngIsReversed             string
	MsmtCounterReadingIsReplaced   string
}{
	MeasurementDocument:            "sap_measurement_document_header_data.MeasurementDocument",
	MeasuringPoint:                 "sap_measurement_document_header_data.MeasuringPoint",
	MeasuringPointPositionNumber:   "sap_measurement_document_header_data.MeasuringPointPositionNumber",
	MsmtRdngDate:                   "sap_measurement_document_header_data.MsmtRdngDate",
	MsmtRdngTime:                   "sap_measurement_document_header_data.MsmtRdngTime",
	Characteristic:                 "sap_measurement_document_header_data.Characteristic",
	MsmtDocumentReferredOrder:      "sap_measurement_document_header_data.MsmtDocumentReferredOrder",
	RefdMaintOrderOpStatusObject:   "sap_measurement_document_header_data.RefdMaintOrderOpStatusObject",
	MaintenanceOrderOperation:      "sap_measurement_document_header_data.MaintenanceOrderOperation",
	MaintenanceOrderSubOperation:   "sap_measurement_document_header_data.MaintenanceOrderSubOperation",
	MsmtIsDoneAfterTaskCompltn:     "sap_measurement_document_header_data.MsmtIsDoneAfterTaskCompltn",
	CharcValueUnit:                 "sap_measurement_document_header_data.CharcValueUnit",
	MeasurementReading:             "sap_measurement_document_header_data.MeasurementReading",
	MeasurementReadingInEntryUoM:   "sap_measurement_document_header_data.MeasurementReadingInEntryUoM",
	MeasurementReadingEntryUoM:     "sap_measurement_document_header_data.MeasurementReadingEntryUoM",
	MeasurementCounterReading:      "sap_measurement_document_header_data.MeasurementCounterReading",
	MsmtCounterReadingDifference:   "sap_measurement_document_header_data.MsmtCounterReadingDifference",
	TotalMsmtRdngIsSetExternally:   "sap_measurement_document_header_data.TotalMsmtRdngIsSetExternally",
	MeasuringPointTargetValue:      "sap_measurement_document_header_data.MeasuringPointTargetValue",
	MsmtValuationCode:              "sap_measurement_document_header_data.MsmtValuationCode",
	MeasurementDocumentText:        "sap_measurement_document_header_data.MeasurementDocumentText",
	MeasurementDocumentHasLongText: "sap_measurement_document_header_data.MeasurementDocumentHasLongText",
	MsmtRdngByUser:                 "sap_measurement_document_header_data.MsmtRdngByUser",
	MsmtRdngStatus:                 "sap_measurement_document_header_data.MsmtRdngStatus",
	MsmtCntrReadingDiffIsEntered:   "sap_measurement_document_header_data.MsmtCntrReadingDiffIsEntered",
	MsmtRdngIsReversed:             "sap_measurement_document_header_data.MsmtRdngIsReversed",
	MsmtCounterReadingIsReplaced:   "sap_measurement_document_header_data.MsmtCounterReadingIsReplaced",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SapMeasurementDocumentHeaderDatumWhere = struct {
	MeasurementDocument            whereHelperstring
	MeasuringPoint                 whereHelpernull_String
	MeasuringPointPositionNumber   whereHelpernull_String
	MsmtRdngDate                   whereHelpernull_String
	MsmtRdngTime                   whereHelpernull_String
	Characteristic                 whereHelpernull_String
	MsmtDocumentReferredOrder      whereHelpernull_String
	RefdMaintOrderOpStatusObject   whereHelpernull_String
	MaintenanceOrderOperation      whereHelpernull_String
	MaintenanceOrderSubOperation   whereHelpernull_String
	MsmtIsDoneAfterTaskCompltn     whereHelpernull_Bool
	CharcValueUnit                 whereHelpernull_String
	MeasurementReading             whereHelpernull_Float64
	MeasurementReadingInEntryUoM   whereHelpernull_Float64
	MeasurementReadingEntryUoM     whereHelpernull_String
	MeasurementCounterReading      whereHelpernull_Float64
	MsmtCounterReadingDifference   whereHelpernull_Float64
	TotalMsmtRdngIsSetExternally   whereHelpernull_Bool
	MeasuringPointTargetValue      whereHelpernull_Float64
	MsmtValuationCode              whereHelpernull_String
	MeasurementDocumentText        whereHelpernull_String
	MeasurementDocumentHasLongText whereHelpernull_Bool
	MsmtRdngByUser                 whereHelpernull_String
	MsmtRdngStatus                 whereHelpernull_String
	MsmtCntrReadingDiffIsEntered   whereHelpernull_Bool
	MsmtRdngIsReversed             whereHelpernull_Bool
	MsmtCounterReadingIsReplaced   whereHelpernull_Bool
}{
	MeasurementDocument:            whereHelperstring{field: "`sap_measurement_document_header_data`.`MeasurementDocument`"},
	MeasuringPoint:                 whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MeasuringPoint`"},
	MeasuringPointPositionNumber:   whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MeasuringPointPositionNumber`"},
	MsmtRdngDate:                   whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MsmtRdngDate`"},
	MsmtRdngTime:                   whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MsmtRdngTime`"},
	Characteristic:                 whereHelpernull_String{field: "`sap_measurement_document_header_data`.`Characteristic`"},
	MsmtDocumentReferredOrder:      whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MsmtDocumentReferredOrder`"},
	RefdMaintOrderOpStatusObject:   whereHelpernull_String{field: "`sap_measurement_document_header_data`.`RefdMaintOrderOpStatusObject`"},
	MaintenanceOrderOperation:      whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MaintenanceOrderOperation`"},
	MaintenanceOrderSubOperation:   whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MaintenanceOrderSubOperation`"},
	MsmtIsDoneAfterTaskCompltn:     whereHelpernull_Bool{field: "`sap_measurement_document_header_data`.`MsmtIsDoneAfterTaskCompltn`"},
	CharcValueUnit:                 whereHelpernull_String{field: "`sap_measurement_document_header_data`.`CharcValueUnit`"},
	MeasurementReading:             whereHelpernull_Float64{field: "`sap_measurement_document_header_data`.`MeasurementReading`"},
	MeasurementReadingInEntryUoM:   whereHelpernull_Float64{field: "`sap_measurement_document_header_data`.`MeasurementReadingInEntryUoM`"},
	MeasurementReadingEntryUoM:     whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MeasurementReadingEntryUoM`"},
	MeasurementCounterReading:      whereHelpernull_Float64{field: "`sap_measurement_document_header_data`.`MeasurementCounterReading`"},
	MsmtCounterReadingDifference:   whereHelpernull_Float64{field: "`sap_measurement_document_header_data`.`MsmtCounterReadingDifference`"},
	TotalMsmtRdngIsSetExternally:   whereHelpernull_Bool{field: "`sap_measurement_document_header_data`.`TotalMsmtRdngIsSetExternally`"},
	MeasuringPointTargetValue:      whereHelpernull_Float64{field: "`sap_measurement_document_header_data`.`MeasuringPointTargetValue`"},
	MsmtValuationCode:              whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MsmtValuationCode`"},
	MeasurementDocumentText:        whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MeasurementDocumentText`"},
	MeasurementDocumentHasLongText: whereHelpernull_Bool{field: "`sap_measurement_document_header_data`.`MeasurementDocumentHasLongText`"},
	MsmtRdngByUser:                 whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MsmtRdngByUser`"},
	MsmtRdngStatus:                 whereHelpernull_String{field: "`sap_measurement_document_header_data`.`MsmtRdngStatus`"},
	MsmtCntrReadingDiffIsEntered:   whereHelpernull_Bool{field: "`sap_measurement_document_header_data`.`MsmtCntrReadingDiffIsEntered`"},
	MsmtRdngIsReversed:             whereHelpernull_Bool{field: "`sap_measurement_document_header_data`.`MsmtRdngIsReversed`"},
	MsmtCounterReadingIsReplaced:   whereHelpernull_Bool{field: "`sap_measurement_document_header_data`.`MsmtCounterReadingIsReplaced`"},
}

// SapMeasurementDocumentHeaderDatumRels is where relationship names are stored.
var SapMeasurementDocumentHeaderDatumRels = struct {
}{}

// sapMeasurementDocumentHeaderDatumR is where relationships are stored.
type sapMeasurementDocumentHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapMeasurementDocumentHeaderDatumR) NewStruct() *sapMeasurementDocumentHeaderDatumR {
	return &sapMeasurementDocumentHeaderDatumR{}
}

// sapMeasurementDocumentHeaderDatumL is where Load methods for each relationship are stored.
type sapMeasurementDocumentHeaderDatumL struct{}

var (
	sapMeasurementDocumentHeaderDatumAllColumns            = []string{"MeasurementDocument", "MeasuringPoint", "MeasuringPointPositionNumber", "MsmtRdngDate", "MsmtRdngTime", "Characteristic", "MsmtDocumentReferredOrder", "RefdMaintOrderOpStatusObject", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "MsmtIsDoneAfterTaskCompltn", "CharcValueUnit", "MeasurementReading", "MeasurementReadingInEntryUoM", "MeasurementReadingEntryUoM", "MeasurementCounterReading", "MsmtCounterReadingDifference", "TotalMsmtRdngIsSetExternally", "MeasuringPointTargetValue", "MsmtValuationCode", "MeasurementDocumentText", "MeasurementDocumentHasLongText", "MsmtRdngByUser", "MsmtRdngStatus", "MsmtCntrReadingDiffIsEntered", "MsmtRdngIsReversed", "MsmtCounterReadingIsReplaced"}
	sapMeasurementDocumentHeaderDatumColumnsWithoutDefault = []string{"MeasurementDocument", "MeasuringPoint", "MeasuringPointPositionNumber", "MsmtRdngDate", "MsmtRdngTime", "Characteristic", "MsmtDocumentReferredOrder", "RefdMaintOrderOpStatusObject", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "MsmtIsDoneAfterTaskCompltn", "CharcValueUnit", "MeasurementReading", "MeasurementReadingInEntryUoM", "MeasurementReadingEntryUoM", "MeasurementCounterReading", "MsmtCounterReadingDifference", "TotalMsmtRdngIsSetExternally", "MeasuringPointTargetValue", "MsmtValuationCode", "MeasurementDocumentText", "MeasurementDocumentHasLongText", "MsmtRdngByUser", "MsmtRdngStatus", "MsmtCntrReadingDiffIsEntered", "MsmtRdngIsReversed", "MsmtCounterReadingIsReplaced"}
	sapMeasurementDocumentHeaderDatumColumnsWithDefault    = []string{}
	sapMeasurementDocumentHeaderDatumPrimaryKeyColumns     = []string{"MeasurementDocument"}
	sapMeasurementDocumentHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapMeasurementDocumentHeaderDatumSlice is an alias for a slice of pointers to SapMeasurementDocumentHeaderDatum.
	// This should almost always be used instead of []SapMeasurementDocumentHeaderDatum.
	SapMeasurementDocumentHeaderDatumSlice []*SapMeasurementDocumentHeaderDatum
	// SapMeasurementDocumentHeaderDatumHook is the signature for custom SapMeasurementDocumentHeaderDatum hook methods
	SapMeasurementDocumentHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapMeasurementDocumentHeaderDatum) error

	sapMeasurementDocumentHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMeasurementDocumentHeaderDatumType                 = reflect.TypeOf(&SapMeasurementDocumentHeaderDatum{})
	sapMeasurementDocumentHeaderDatumMapping              = queries.MakeStructMapping(sapMeasurementDocumentHeaderDatumType)
	sapMeasurementDocumentHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns)
	sapMeasurementDocumentHeaderDatumInsertCacheMut       sync.RWMutex
	sapMeasurementDocumentHeaderDatumInsertCache          = make(map[string]insertCache)
	sapMeasurementDocumentHeaderDatumUpdateCacheMut       sync.RWMutex
	sapMeasurementDocumentHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapMeasurementDocumentHeaderDatumUpsertCacheMut       sync.RWMutex
	sapMeasurementDocumentHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMeasurementDocumentHeaderDatumAfterSelectHooks []SapMeasurementDocumentHeaderDatumHook

var sapMeasurementDocumentHeaderDatumBeforeInsertHooks []SapMeasurementDocumentHeaderDatumHook
var sapMeasurementDocumentHeaderDatumAfterInsertHooks []SapMeasurementDocumentHeaderDatumHook

var sapMeasurementDocumentHeaderDatumBeforeUpdateHooks []SapMeasurementDocumentHeaderDatumHook
var sapMeasurementDocumentHeaderDatumAfterUpdateHooks []SapMeasurementDocumentHeaderDatumHook

var sapMeasurementDocumentHeaderDatumBeforeDeleteHooks []SapMeasurementDocumentHeaderDatumHook
var sapMeasurementDocumentHeaderDatumAfterDeleteHooks []SapMeasurementDocumentHeaderDatumHook

var sapMeasurementDocumentHeaderDatumBeforeUpsertHooks []SapMeasurementDocumentHeaderDatumHook
var sapMeasurementDocumentHeaderDatumAfterUpsertHooks []SapMeasurementDocumentHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMeasurementDocumentHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMeasurementDocumentHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMeasurementDocumentHeaderDatumHook registers your hook function for all future operations.
func AddSapMeasurementDocumentHeaderDatumHook(hookPoint boil.HookPoint, sapMeasurementDocumentHeaderDatumHook SapMeasurementDocumentHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMeasurementDocumentHeaderDatumAfterSelectHooks = append(sapMeasurementDocumentHeaderDatumAfterSelectHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapMeasurementDocumentHeaderDatumBeforeInsertHooks = append(sapMeasurementDocumentHeaderDatumBeforeInsertHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.AfterInsertHook:
		sapMeasurementDocumentHeaderDatumAfterInsertHooks = append(sapMeasurementDocumentHeaderDatumAfterInsertHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapMeasurementDocumentHeaderDatumBeforeUpdateHooks = append(sapMeasurementDocumentHeaderDatumBeforeUpdateHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapMeasurementDocumentHeaderDatumAfterUpdateHooks = append(sapMeasurementDocumentHeaderDatumAfterUpdateHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapMeasurementDocumentHeaderDatumBeforeDeleteHooks = append(sapMeasurementDocumentHeaderDatumBeforeDeleteHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapMeasurementDocumentHeaderDatumAfterDeleteHooks = append(sapMeasurementDocumentHeaderDatumAfterDeleteHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapMeasurementDocumentHeaderDatumBeforeUpsertHooks = append(sapMeasurementDocumentHeaderDatumBeforeUpsertHooks, sapMeasurementDocumentHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapMeasurementDocumentHeaderDatumAfterUpsertHooks = append(sapMeasurementDocumentHeaderDatumAfterUpsertHooks, sapMeasurementDocumentHeaderDatumHook)
	}
}

// One returns a single sapMeasurementDocumentHeaderDatum record from the query.
func (q sapMeasurementDocumentHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMeasurementDocumentHeaderDatum, error) {
	o := &SapMeasurementDocumentHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_measurement_document_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMeasurementDocumentHeaderDatum records from the query.
func (q sapMeasurementDocumentHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMeasurementDocumentHeaderDatumSlice, error) {
	var o []*SapMeasurementDocumentHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMeasurementDocumentHeaderDatum slice")
	}

	if len(sapMeasurementDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMeasurementDocumentHeaderDatum records in the query.
func (q sapMeasurementDocumentHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_measurement_document_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMeasurementDocumentHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_measurement_document_header_data exists")
	}

	return count > 0, nil
}

// SapMeasurementDocumentHeaderData retrieves all the records using an executor.
func SapMeasurementDocumentHeaderData(mods ...qm.QueryMod) sapMeasurementDocumentHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_measurement_document_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_measurement_document_header_data`.*"})
	}

	return sapMeasurementDocumentHeaderDatumQuery{q}
}

// FindSapMeasurementDocumentHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMeasurementDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, measurementDocument string, selectCols ...string) (*SapMeasurementDocumentHeaderDatum, error) {
	sapMeasurementDocumentHeaderDatumObj := &SapMeasurementDocumentHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_measurement_document_header_data` where `MeasurementDocument`=?", sel,
	)

	q := queries.Raw(query, measurementDocument)

	err := q.Bind(ctx, exec, sapMeasurementDocumentHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_measurement_document_header_data")
	}

	if err = sapMeasurementDocumentHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMeasurementDocumentHeaderDatumObj, err
	}

	return sapMeasurementDocumentHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMeasurementDocumentHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_measurement_document_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMeasurementDocumentHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMeasurementDocumentHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapMeasurementDocumentHeaderDatumInsertCache[key]
	sapMeasurementDocumentHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMeasurementDocumentHeaderDatumAllColumns,
			sapMeasurementDocumentHeaderDatumColumnsWithDefault,
			sapMeasurementDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_measurement_document_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_measurement_document_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_measurement_document_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_measurement_document_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MeasurementDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_measurement_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMeasurementDocumentHeaderDatumInsertCacheMut.Lock()
		sapMeasurementDocumentHeaderDatumInsertCache[key] = cache
		sapMeasurementDocumentHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMeasurementDocumentHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMeasurementDocumentHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMeasurementDocumentHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapMeasurementDocumentHeaderDatumUpdateCache[key]
	sapMeasurementDocumentHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMeasurementDocumentHeaderDatumAllColumns,
			sapMeasurementDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_measurement_document_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_measurement_document_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, append(wl, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_measurement_document_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_measurement_document_header_data")
	}

	if !cached {
		sapMeasurementDocumentHeaderDatumUpdateCacheMut.Lock()
		sapMeasurementDocumentHeaderDatumUpdateCache[key] = cache
		sapMeasurementDocumentHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMeasurementDocumentHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_measurement_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_measurement_document_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMeasurementDocumentHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMeasurementDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_measurement_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMeasurementDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMeasurementDocumentHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapMeasurementDocumentHeaderDatumUniqueColumns = []string{
	"MeasurementDocument",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMeasurementDocumentHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_measurement_document_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMeasurementDocumentHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMeasurementDocumentHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMeasurementDocumentHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapMeasurementDocumentHeaderDatumUpsertCache[key]
	sapMeasurementDocumentHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMeasurementDocumentHeaderDatumAllColumns,
			sapMeasurementDocumentHeaderDatumColumnsWithDefault,
			sapMeasurementDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMeasurementDocumentHeaderDatumAllColumns,
			sapMeasurementDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_measurement_document_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_measurement_document_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_measurement_document_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_measurement_document_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMeasurementDocumentHeaderDatumType, sapMeasurementDocumentHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_measurement_document_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_measurement_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMeasurementDocumentHeaderDatumUpsertCacheMut.Lock()
		sapMeasurementDocumentHeaderDatumUpsertCache[key] = cache
		sapMeasurementDocumentHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMeasurementDocumentHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMeasurementDocumentHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMeasurementDocumentHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMeasurementDocumentHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_measurement_document_header_data` WHERE `MeasurementDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_measurement_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_measurement_document_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMeasurementDocumentHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMeasurementDocumentHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_measurement_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_measurement_document_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMeasurementDocumentHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMeasurementDocumentHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMeasurementDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_measurement_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMeasurementDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_measurement_document_header_data")
	}

	if len(sapMeasurementDocumentHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMeasurementDocumentHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMeasurementDocumentHeaderDatum(ctx, exec, o.MeasurementDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMeasurementDocumentHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMeasurementDocumentHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMeasurementDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_measurement_document_header_data`.* FROM `sap_measurement_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMeasurementDocumentHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMeasurementDocumentHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapMeasurementDocumentHeaderDatumExists checks if the SapMeasurementDocumentHeaderDatum row exists.
func SapMeasurementDocumentHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, measurementDocument string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_measurement_document_header_data` where `MeasurementDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, measurementDocument)
	}
	row := exec.QueryRowContext(ctx, sql, measurementDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_measurement_document_header_data exists")
	}

	return exists, nil
}
