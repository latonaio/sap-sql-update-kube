// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesSchedulingAgreementItemScheduleLineDatum is an object representing the database table.
type SapSalesSchedulingAgreementItemScheduleLineDatum struct {
	SalesSchedulingAgreement       string      `boil:"SalesSchedulingAgreement" json:"SalesSchedulingAgreement" toml:"SalesSchedulingAgreement" yaml:"SalesSchedulingAgreement"`
	SalesSchedulingAgreementItem   string      `boil:"SalesSchedulingAgreementItem" json:"SalesSchedulingAgreementItem" toml:"SalesSchedulingAgreementItem" yaml:"SalesSchedulingAgreementItem"`
	ScheduleLine                   string      `boil:"ScheduleLine" json:"ScheduleLine" toml:"ScheduleLine" yaml:"ScheduleLine"`
	SchedulingAgreementReleaseType null.String `boil:"SchedulingAgreementReleaseType" json:"SchedulingAgreementReleaseType,omitempty" toml:"SchedulingAgreementReleaseType" yaml:"SchedulingAgreementReleaseType,omitempty"`
	ScheduleLineCategory           null.String `boil:"ScheduleLineCategory" json:"ScheduleLineCategory,omitempty" toml:"ScheduleLineCategory" yaml:"ScheduleLineCategory,omitempty"`
	OrderQuantityUnit              null.String `boil:"OrderQuantityUnit" json:"OrderQuantityUnit,omitempty" toml:"OrderQuantityUnit" yaml:"OrderQuantityUnit,omitempty"`
	SalesDelivDateCategory         null.String `boil:"SalesDelivDateCategory" json:"SalesDelivDateCategory,omitempty" toml:"SalesDelivDateCategory" yaml:"SalesDelivDateCategory,omitempty"`
	RequestedDeliveryDate          null.String `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate,omitempty" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate,omitempty"`
	RequestedDeliveryTime          null.String `boil:"RequestedDeliveryTime" json:"RequestedDeliveryTime,omitempty" toml:"RequestedDeliveryTime" yaml:"RequestedDeliveryTime,omitempty"`
	ScheduleLineOrderQuantity      null.String `boil:"ScheduleLineOrderQuantity" json:"ScheduleLineOrderQuantity,omitempty" toml:"ScheduleLineOrderQuantity" yaml:"ScheduleLineOrderQuantity,omitempty"`
	CorrectedQtyInOrderQtyUnit     null.String `boil:"CorrectedQtyInOrderQtyUnit" json:"CorrectedQtyInOrderQtyUnit,omitempty" toml:"CorrectedQtyInOrderQtyUnit" yaml:"CorrectedQtyInOrderQtyUnit,omitempty"`
	ScheduleLineOpenQuantity       null.String `boil:"ScheduleLineOpenQuantity" json:"ScheduleLineOpenQuantity,omitempty" toml:"ScheduleLineOpenQuantity" yaml:"ScheduleLineOpenQuantity,omitempty"`
	ConfdOrderQtyByMatlAvailCheck  null.String `boil:"ConfdOrderQtyByMatlAvailCheck" json:"ConfdOrderQtyByMatlAvailCheck,omitempty" toml:"ConfdOrderQtyByMatlAvailCheck" yaml:"ConfdOrderQtyByMatlAvailCheck,omitempty"`
	ProductAvailabilityDate        null.String `boil:"ProductAvailabilityDate" json:"ProductAvailabilityDate,omitempty" toml:"ProductAvailabilityDate" yaml:"ProductAvailabilityDate,omitempty"`
	ProductAvailabilityTime        null.String `boil:"ProductAvailabilityTime" json:"ProductAvailabilityTime,omitempty" toml:"ProductAvailabilityTime" yaml:"ProductAvailabilityTime,omitempty"`
	DelivBlockReasonForSchedLine   null.String `boil:"DelivBlockReasonForSchedLine" json:"DelivBlockReasonForSchedLine,omitempty" toml:"DelivBlockReasonForSchedLine" yaml:"DelivBlockReasonForSchedLine,omitempty"`
	TransportationPlanningDate     null.String `boil:"TransportationPlanningDate" json:"TransportationPlanningDate,omitempty" toml:"TransportationPlanningDate" yaml:"TransportationPlanningDate,omitempty"`
	TransportationPlanningTime     null.String `boil:"TransportationPlanningTime" json:"TransportationPlanningTime,omitempty" toml:"TransportationPlanningTime" yaml:"TransportationPlanningTime,omitempty"`
	GoodsIssueDate                 null.String `boil:"GoodsIssueDate" json:"GoodsIssueDate,omitempty" toml:"GoodsIssueDate" yaml:"GoodsIssueDate,omitempty"`
	LoadingDate                    null.String `boil:"LoadingDate" json:"LoadingDate,omitempty" toml:"LoadingDate" yaml:"LoadingDate,omitempty"`
	GoodsIssueTime                 null.String `boil:"GoodsIssueTime" json:"GoodsIssueTime,omitempty" toml:"GoodsIssueTime" yaml:"GoodsIssueTime,omitempty"`
	LoadingTime                    null.String `boil:"LoadingTime" json:"LoadingTime,omitempty" toml:"LoadingTime" yaml:"LoadingTime,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`

	R *sapSalesSchedulingAgreementItemScheduleLineDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesSchedulingAgreementItemScheduleLineDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesSchedulingAgreementItemScheduleLineDatumColumns = struct {
	SalesSchedulingAgreement       string
	SalesSchedulingAgreementItem   string
	ScheduleLine                   string
	SchedulingAgreementReleaseType string
	ScheduleLineCategory           string
	OrderQuantityUnit              string
	SalesDelivDateCategory         string
	RequestedDeliveryDate          string
	RequestedDeliveryTime          string
	ScheduleLineOrderQuantity      string
	CorrectedQtyInOrderQtyUnit     string
	ScheduleLineOpenQuantity       string
	ConfdOrderQtyByMatlAvailCheck  string
	ProductAvailabilityDate        string
	ProductAvailabilityTime        string
	DelivBlockReasonForSchedLine   string
	TransportationPlanningDate     string
	TransportationPlanningTime     string
	GoodsIssueDate                 string
	LoadingDate                    string
	GoodsIssueTime                 string
	LoadingTime                    string
	GoodsMovementType              string
}{
	SalesSchedulingAgreement:       "SalesSchedulingAgreement",
	SalesSchedulingAgreementItem:   "SalesSchedulingAgreementItem",
	ScheduleLine:                   "ScheduleLine",
	SchedulingAgreementReleaseType: "SchedulingAgreementReleaseType",
	ScheduleLineCategory:           "ScheduleLineCategory",
	OrderQuantityUnit:              "OrderQuantityUnit",
	SalesDelivDateCategory:         "SalesDelivDateCategory",
	RequestedDeliveryDate:          "RequestedDeliveryDate",
	RequestedDeliveryTime:          "RequestedDeliveryTime",
	ScheduleLineOrderQuantity:      "ScheduleLineOrderQuantity",
	CorrectedQtyInOrderQtyUnit:     "CorrectedQtyInOrderQtyUnit",
	ScheduleLineOpenQuantity:       "ScheduleLineOpenQuantity",
	ConfdOrderQtyByMatlAvailCheck:  "ConfdOrderQtyByMatlAvailCheck",
	ProductAvailabilityDate:        "ProductAvailabilityDate",
	ProductAvailabilityTime:        "ProductAvailabilityTime",
	DelivBlockReasonForSchedLine:   "DelivBlockReasonForSchedLine",
	TransportationPlanningDate:     "TransportationPlanningDate",
	TransportationPlanningTime:     "TransportationPlanningTime",
	GoodsIssueDate:                 "GoodsIssueDate",
	LoadingDate:                    "LoadingDate",
	GoodsIssueTime:                 "GoodsIssueTime",
	LoadingTime:                    "LoadingTime",
	GoodsMovementType:              "GoodsMovementType",
}

var SapSalesSchedulingAgreementItemScheduleLineDatumTableColumns = struct {
	SalesSchedulingAgreement       string
	SalesSchedulingAgreementItem   string
	ScheduleLine                   string
	SchedulingAgreementReleaseType string
	ScheduleLineCategory           string
	OrderQuantityUnit              string
	SalesDelivDateCategory         string
	RequestedDeliveryDate          string
	RequestedDeliveryTime          string
	ScheduleLineOrderQuantity      string
	CorrectedQtyInOrderQtyUnit     string
	ScheduleLineOpenQuantity       string
	ConfdOrderQtyByMatlAvailCheck  string
	ProductAvailabilityDate        string
	ProductAvailabilityTime        string
	DelivBlockReasonForSchedLine   string
	TransportationPlanningDate     string
	TransportationPlanningTime     string
	GoodsIssueDate                 string
	LoadingDate                    string
	GoodsIssueTime                 string
	LoadingTime                    string
	GoodsMovementType              string
}{
	SalesSchedulingAgreement:       "sap_sales_scheduling_agreement_item_schedule_line_data.SalesSchedulingAgreement",
	SalesSchedulingAgreementItem:   "sap_sales_scheduling_agreement_item_schedule_line_data.SalesSchedulingAgreementItem",
	ScheduleLine:                   "sap_sales_scheduling_agreement_item_schedule_line_data.ScheduleLine",
	SchedulingAgreementReleaseType: "sap_sales_scheduling_agreement_item_schedule_line_data.SchedulingAgreementReleaseType",
	ScheduleLineCategory:           "sap_sales_scheduling_agreement_item_schedule_line_data.ScheduleLineCategory",
	OrderQuantityUnit:              "sap_sales_scheduling_agreement_item_schedule_line_data.OrderQuantityUnit",
	SalesDelivDateCategory:         "sap_sales_scheduling_agreement_item_schedule_line_data.SalesDelivDateCategory",
	RequestedDeliveryDate:          "sap_sales_scheduling_agreement_item_schedule_line_data.RequestedDeliveryDate",
	RequestedDeliveryTime:          "sap_sales_scheduling_agreement_item_schedule_line_data.RequestedDeliveryTime",
	ScheduleLineOrderQuantity:      "sap_sales_scheduling_agreement_item_schedule_line_data.ScheduleLineOrderQuantity",
	CorrectedQtyInOrderQtyUnit:     "sap_sales_scheduling_agreement_item_schedule_line_data.CorrectedQtyInOrderQtyUnit",
	ScheduleLineOpenQuantity:       "sap_sales_scheduling_agreement_item_schedule_line_data.ScheduleLineOpenQuantity",
	ConfdOrderQtyByMatlAvailCheck:  "sap_sales_scheduling_agreement_item_schedule_line_data.ConfdOrderQtyByMatlAvailCheck",
	ProductAvailabilityDate:        "sap_sales_scheduling_agreement_item_schedule_line_data.ProductAvailabilityDate",
	ProductAvailabilityTime:        "sap_sales_scheduling_agreement_item_schedule_line_data.ProductAvailabilityTime",
	DelivBlockReasonForSchedLine:   "sap_sales_scheduling_agreement_item_schedule_line_data.DelivBlockReasonForSchedLine",
	TransportationPlanningDate:     "sap_sales_scheduling_agreement_item_schedule_line_data.TransportationPlanningDate",
	TransportationPlanningTime:     "sap_sales_scheduling_agreement_item_schedule_line_data.TransportationPlanningTime",
	GoodsIssueDate:                 "sap_sales_scheduling_agreement_item_schedule_line_data.GoodsIssueDate",
	LoadingDate:                    "sap_sales_scheduling_agreement_item_schedule_line_data.LoadingDate",
	GoodsIssueTime:                 "sap_sales_scheduling_agreement_item_schedule_line_data.GoodsIssueTime",
	LoadingTime:                    "sap_sales_scheduling_agreement_item_schedule_line_data.LoadingTime",
	GoodsMovementType:              "sap_sales_scheduling_agreement_item_schedule_line_data.GoodsMovementType",
}

// Generated where

var SapSalesSchedulingAgreementItemScheduleLineDatumWhere = struct {
	SalesSchedulingAgreement       whereHelperstring
	SalesSchedulingAgreementItem   whereHelperstring
	ScheduleLine                   whereHelperstring
	SchedulingAgreementReleaseType whereHelpernull_String
	ScheduleLineCategory           whereHelpernull_String
	OrderQuantityUnit              whereHelpernull_String
	SalesDelivDateCategory         whereHelpernull_String
	RequestedDeliveryDate          whereHelpernull_String
	RequestedDeliveryTime          whereHelpernull_String
	ScheduleLineOrderQuantity      whereHelpernull_String
	CorrectedQtyInOrderQtyUnit     whereHelpernull_String
	ScheduleLineOpenQuantity       whereHelpernull_String
	ConfdOrderQtyByMatlAvailCheck  whereHelpernull_String
	ProductAvailabilityDate        whereHelpernull_String
	ProductAvailabilityTime        whereHelpernull_String
	DelivBlockReasonForSchedLine   whereHelpernull_String
	TransportationPlanningDate     whereHelpernull_String
	TransportationPlanningTime     whereHelpernull_String
	GoodsIssueDate                 whereHelpernull_String
	LoadingDate                    whereHelpernull_String
	GoodsIssueTime                 whereHelpernull_String
	LoadingTime                    whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
}{
	SalesSchedulingAgreement:       whereHelperstring{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`SalesSchedulingAgreement`"},
	SalesSchedulingAgreementItem:   whereHelperstring{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`SalesSchedulingAgreementItem`"},
	ScheduleLine:                   whereHelperstring{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ScheduleLine`"},
	SchedulingAgreementReleaseType: whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`SchedulingAgreementReleaseType`"},
	ScheduleLineCategory:           whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ScheduleLineCategory`"},
	OrderQuantityUnit:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`OrderQuantityUnit`"},
	SalesDelivDateCategory:         whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`SalesDelivDateCategory`"},
	RequestedDeliveryDate:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`RequestedDeliveryDate`"},
	RequestedDeliveryTime:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`RequestedDeliveryTime`"},
	ScheduleLineOrderQuantity:      whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ScheduleLineOrderQuantity`"},
	CorrectedQtyInOrderQtyUnit:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`CorrectedQtyInOrderQtyUnit`"},
	ScheduleLineOpenQuantity:       whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ScheduleLineOpenQuantity`"},
	ConfdOrderQtyByMatlAvailCheck:  whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ConfdOrderQtyByMatlAvailCheck`"},
	ProductAvailabilityDate:        whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ProductAvailabilityDate`"},
	ProductAvailabilityTime:        whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`ProductAvailabilityTime`"},
	DelivBlockReasonForSchedLine:   whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`DelivBlockReasonForSchedLine`"},
	TransportationPlanningDate:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`TransportationPlanningDate`"},
	TransportationPlanningTime:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`TransportationPlanningTime`"},
	GoodsIssueDate:                 whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`GoodsIssueDate`"},
	LoadingDate:                    whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`LoadingDate`"},
	GoodsIssueTime:                 whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`GoodsIssueTime`"},
	LoadingTime:                    whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`LoadingTime`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_schedule_line_data`.`GoodsMovementType`"},
}

// SapSalesSchedulingAgreementItemScheduleLineDatumRels is where relationship names are stored.
var SapSalesSchedulingAgreementItemScheduleLineDatumRels = struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum string
}{
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: "SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum",
}

// sapSalesSchedulingAgreementItemScheduleLineDatumR is where relationships are stored.
type sapSalesSchedulingAgreementItemScheduleLineDatumR struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum *SapSalesSchedulingAgreementHeaderDatum `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesSchedulingAgreementItemScheduleLineDatumR) NewStruct() *sapSalesSchedulingAgreementItemScheduleLineDatumR {
	return &sapSalesSchedulingAgreementItemScheduleLineDatumR{}
}

// sapSalesSchedulingAgreementItemScheduleLineDatumL is where Load methods for each relationship are stored.
type sapSalesSchedulingAgreementItemScheduleLineDatumL struct{}

var (
	sapSalesSchedulingAgreementItemScheduleLineDatumAllColumns            = []string{"SalesSchedulingAgreement", "SalesSchedulingAgreementItem", "ScheduleLine", "SchedulingAgreementReleaseType", "ScheduleLineCategory", "OrderQuantityUnit", "SalesDelivDateCategory", "RequestedDeliveryDate", "RequestedDeliveryTime", "ScheduleLineOrderQuantity", "CorrectedQtyInOrderQtyUnit", "ScheduleLineOpenQuantity", "ConfdOrderQtyByMatlAvailCheck", "ProductAvailabilityDate", "ProductAvailabilityTime", "DelivBlockReasonForSchedLine", "TransportationPlanningDate", "TransportationPlanningTime", "GoodsIssueDate", "LoadingDate", "GoodsIssueTime", "LoadingTime", "GoodsMovementType"}
	sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithoutDefault = []string{"SalesSchedulingAgreement", "SalesSchedulingAgreementItem", "ScheduleLine", "SchedulingAgreementReleaseType", "ScheduleLineCategory", "OrderQuantityUnit", "SalesDelivDateCategory", "RequestedDeliveryDate", "RequestedDeliveryTime", "ScheduleLineOrderQuantity", "CorrectedQtyInOrderQtyUnit", "ScheduleLineOpenQuantity", "ConfdOrderQtyByMatlAvailCheck", "ProductAvailabilityDate", "ProductAvailabilityTime", "DelivBlockReasonForSchedLine", "TransportationPlanningDate", "TransportationPlanningTime", "GoodsIssueDate", "LoadingDate", "GoodsIssueTime", "LoadingTime", "GoodsMovementType"}
	sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithDefault    = []string{}
	sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns     = []string{"SalesSchedulingAgreement", "SalesSchedulingAgreementItem", "ScheduleLine"}
	sapSalesSchedulingAgreementItemScheduleLineDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesSchedulingAgreementItemScheduleLineDatumSlice is an alias for a slice of pointers to SapSalesSchedulingAgreementItemScheduleLineDatum.
	// This should almost always be used instead of []SapSalesSchedulingAgreementItemScheduleLineDatum.
	SapSalesSchedulingAgreementItemScheduleLineDatumSlice []*SapSalesSchedulingAgreementItemScheduleLineDatum
	// SapSalesSchedulingAgreementItemScheduleLineDatumHook is the signature for custom SapSalesSchedulingAgreementItemScheduleLineDatum hook methods
	SapSalesSchedulingAgreementItemScheduleLineDatumHook func(context.Context, boil.ContextExecutor, *SapSalesSchedulingAgreementItemScheduleLineDatum) error

	sapSalesSchedulingAgreementItemScheduleLineDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesSchedulingAgreementItemScheduleLineDatumType                 = reflect.TypeOf(&SapSalesSchedulingAgreementItemScheduleLineDatum{})
	sapSalesSchedulingAgreementItemScheduleLineDatumMapping              = queries.MakeStructMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType)
	sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns)
	sapSalesSchedulingAgreementItemScheduleLineDatumInsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementItemScheduleLineDatumInsertCache          = make(map[string]insertCache)
	sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCache          = make(map[string]updateCache)
	sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook

var sapSalesSchedulingAgreementItemScheduleLineDatumBeforeInsertHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook
var sapSalesSchedulingAgreementItemScheduleLineDatumAfterInsertHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook

var sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpdateHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook
var sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpdateHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook

var sapSalesSchedulingAgreementItemScheduleLineDatumBeforeDeleteHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook
var sapSalesSchedulingAgreementItemScheduleLineDatumAfterDeleteHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook

var sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpsertHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook
var sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpsertHooks []SapSalesSchedulingAgreementItemScheduleLineDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesSchedulingAgreementItemScheduleLineDatumHook registers your hook function for all future operations.
func AddSapSalesSchedulingAgreementItemScheduleLineDatumHook(hookPoint boil.HookPoint, sapSalesSchedulingAgreementItemScheduleLineDatumHook SapSalesSchedulingAgreementItemScheduleLineDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.BeforeInsertHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumBeforeInsertHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumBeforeInsertHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.AfterInsertHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumAfterInsertHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumAfterInsertHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpdateHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpdateHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.AfterUpdateHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpdateHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpdateHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumBeforeDeleteHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumBeforeDeleteHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.AfterDeleteHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumAfterDeleteHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumAfterDeleteHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpsertHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumBeforeUpsertHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	case boil.AfterUpsertHook:
		sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpsertHooks = append(sapSalesSchedulingAgreementItemScheduleLineDatumAfterUpsertHooks, sapSalesSchedulingAgreementItemScheduleLineDatumHook)
	}
}

// One returns a single sapSalesSchedulingAgreementItemScheduleLineDatum record from the query.
func (q sapSalesSchedulingAgreementItemScheduleLineDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesSchedulingAgreementItemScheduleLineDatum, error) {
	o := &SapSalesSchedulingAgreementItemScheduleLineDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesSchedulingAgreementItemScheduleLineDatum records from the query.
func (q sapSalesSchedulingAgreementItemScheduleLineDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesSchedulingAgreementItemScheduleLineDatumSlice, error) {
	var o []*SapSalesSchedulingAgreementItemScheduleLineDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesSchedulingAgreementItemScheduleLineDatum slice")
	}

	if len(sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesSchedulingAgreementItemScheduleLineDatum records in the query.
func (q sapSalesSchedulingAgreementItemScheduleLineDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_scheduling_agreement_item_schedule_line_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesSchedulingAgreementItemScheduleLineDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_scheduling_agreement_item_schedule_line_data exists")
	}

	return count > 0, nil
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum pointed to by the foreign key.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(mods ...qm.QueryMod) sapSalesSchedulingAgreementHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesSchedulingAgreement` = ?", o.SalesSchedulingAgreement),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesSchedulingAgreementHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_header_data`")

	return query
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesSchedulingAgreementItemScheduleLineDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementItemScheduleLineDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementItemScheduleLineDatum
	var object *SapSalesSchedulingAgreementItemScheduleLineDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementItemScheduleLineDatum.(*SapSalesSchedulingAgreementItemScheduleLineDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementItemScheduleLineDatum.(*[]*SapSalesSchedulingAgreementItemScheduleLineDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementItemScheduleLineDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementItemScheduleLineDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_header_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_header_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesSchedulingAgreementHeaderDatum")
	}

	var resultSlice []*SapSalesSchedulingAgreementHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesSchedulingAgreementHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_scheduling_agreement_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_header_data")
	}

	if len(sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData = append(foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementHeaderDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData = append(foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum of the sapSalesSchedulingAgreementItemScheduleLineDatum to the related item.
// Sets o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum to related.
// Adds o to related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) SetSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesSchedulingAgreementHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_scheduling_agreement_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
		strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesSchedulingAgreement, o.SalesSchedulingAgreement, o.SalesSchedulingAgreementItem, o.ScheduleLine}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesSchedulingAgreement = related.SalesSchedulingAgreement
	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementItemScheduleLineDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData: SapSalesSchedulingAgreementItemScheduleLineDatumSlice{o},
		}
	} else {
		related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData = append(related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData, o)
	}

	return nil
}

// SapSalesSchedulingAgreementItemScheduleLineData retrieves all the records using an executor.
func SapSalesSchedulingAgreementItemScheduleLineData(mods ...qm.QueryMod) sapSalesSchedulingAgreementItemScheduleLineDatumQuery {
	mods = append(mods, qm.From("`sap_sales_scheduling_agreement_item_schedule_line_data`"))
	return sapSalesSchedulingAgreementItemScheduleLineDatumQuery{NewQuery(mods...)}
}

// FindSapSalesSchedulingAgreementItemScheduleLineDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesSchedulingAgreementItemScheduleLineDatum(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, salesSchedulingAgreementItem string, scheduleLine string, selectCols ...string) (*SapSalesSchedulingAgreementItemScheduleLineDatum, error) {
	sapSalesSchedulingAgreementItemScheduleLineDatumObj := &SapSalesSchedulingAgreementItemScheduleLineDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_scheduling_agreement_item_schedule_line_data` where `SalesSchedulingAgreement`=? AND `SalesSchedulingAgreementItem`=? AND `ScheduleLine`=?", sel,
	)

	q := queries.Raw(query, salesSchedulingAgreement, salesSchedulingAgreementItem, scheduleLine)

	err := q.Bind(ctx, exec, sapSalesSchedulingAgreementItemScheduleLineDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if err = sapSalesSchedulingAgreementItemScheduleLineDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesSchedulingAgreementItemScheduleLineDatumObj, err
	}

	return sapSalesSchedulingAgreementItemScheduleLineDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_item_schedule_line_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesSchedulingAgreementItemScheduleLineDatumInsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementItemScheduleLineDatumInsertCache[key]
	sapSalesSchedulingAgreementItemScheduleLineDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesSchedulingAgreementItemScheduleLineDatumAllColumns,
			sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithDefault,
			sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_scheduling_agreement_item_schedule_line_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_scheduling_agreement_item_schedule_line_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_scheduling_agreement_item_schedule_line_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesSchedulingAgreement,
		o.SalesSchedulingAgreementItem,
		o.ScheduleLine,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementItemScheduleLineDatumInsertCacheMut.Lock()
		sapSalesSchedulingAgreementItemScheduleLineDatumInsertCache[key] = cache
		sapSalesSchedulingAgreementItemScheduleLineDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesSchedulingAgreementItemScheduleLineDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCache[key]
	sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesSchedulingAgreementItemScheduleLineDatumAllColumns,
			sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_scheduling_agreement_item_schedule_line_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_item_schedule_line_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, append(wl, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_scheduling_agreement_item_schedule_line_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if !cached {
		sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCacheMut.Lock()
		sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCache[key] = cache
		sapSalesSchedulingAgreementItemScheduleLineDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesSchedulingAgreementItemScheduleLineDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesSchedulingAgreementItemScheduleLineDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesSchedulingAgreementItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesSchedulingAgreementItemScheduleLineDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesSchedulingAgreementItemScheduleLineDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_item_schedule_line_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesSchedulingAgreementItemScheduleLineDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCache[key]
	sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesSchedulingAgreementItemScheduleLineDatumAllColumns,
			sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithDefault,
			sapSalesSchedulingAgreementItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesSchedulingAgreementItemScheduleLineDatumAllColumns,
			sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_scheduling_agreement_item_schedule_line_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_scheduling_agreement_item_schedule_line_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_scheduling_agreement_item_schedule_line_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesSchedulingAgreementItemScheduleLineDatumType, sapSalesSchedulingAgreementItemScheduleLineDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_scheduling_agreement_item_schedule_line_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCacheMut.Lock()
		sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCache[key] = cache
		sapSalesSchedulingAgreementItemScheduleLineDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesSchedulingAgreementItemScheduleLineDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesSchedulingAgreementItemScheduleLineDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_scheduling_agreement_item_schedule_line_data` WHERE `SalesSchedulingAgreement`=? AND `SalesSchedulingAgreementItem`=? AND `ScheduleLine`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesSchedulingAgreementItemScheduleLineDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesSchedulingAgreementItemScheduleLineDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesSchedulingAgreementItemScheduleLineDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesSchedulingAgreementItemScheduleLineDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_scheduling_agreement_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesSchedulingAgreementItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if len(sapSalesSchedulingAgreementItemScheduleLineDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesSchedulingAgreementItemScheduleLineDatum(ctx, exec, o.SalesSchedulingAgreement, o.SalesSchedulingAgreementItem, o.ScheduleLine)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesSchedulingAgreementItemScheduleLineDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesSchedulingAgreementItemScheduleLineDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_scheduling_agreement_item_schedule_line_data`.* FROM `sap_sales_scheduling_agreement_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesSchedulingAgreementItemScheduleLineDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesSchedulingAgreementItemScheduleLineDatumExists checks if the SapSalesSchedulingAgreementItemScheduleLineDatum row exists.
func SapSalesSchedulingAgreementItemScheduleLineDatumExists(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, salesSchedulingAgreementItem string, scheduleLine string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_scheduling_agreement_item_schedule_line_data` where `SalesSchedulingAgreement`=? AND `SalesSchedulingAgreementItem`=? AND `ScheduleLine`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesSchedulingAgreement, salesSchedulingAgreementItem, scheduleLine)
	}
	row := exec.QueryRowContext(ctx, sql, salesSchedulingAgreement, salesSchedulingAgreementItem, scheduleLine)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_scheduling_agreement_item_schedule_line_data exists")
	}

	return exists, nil
}
