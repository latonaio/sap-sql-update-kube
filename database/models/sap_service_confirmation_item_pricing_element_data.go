// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceConfirmationItemPricingElementDatum is an object representing the database table.
type SapServiceConfirmationItemPricingElementDatum struct {
	ServiceConfirmation     string      `boil:"ServiceConfirmation" json:"ServiceConfirmation" toml:"ServiceConfirmation" yaml:"ServiceConfirmation"`
	ServiceConfirmationItem string      `boil:"ServiceConfirmationItem" json:"ServiceConfirmationItem" toml:"ServiceConfirmationItem" yaml:"ServiceConfirmationItem"`
	PricingProcedureStep    string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionType           null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	ConditionRateValue      null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency       null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity       null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit   null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`

	R *sapServiceConfirmationItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceConfirmationItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceConfirmationItemPricingElementDatumColumns = struct {
	ServiceConfirmation     string
	ServiceConfirmationItem string
	PricingProcedureStep    string
	PricingProcedureCounter string
	ConditionType           string
	ConditionRateValue      string
	ConditionCurrency       string
	ConditionQuantity       string
	ConditionQuantityUnit   string
}{
	ServiceConfirmation:     "ServiceConfirmation",
	ServiceConfirmationItem: "ServiceConfirmationItem",
	PricingProcedureStep:    "PricingProcedureStep",
	PricingProcedureCounter: "PricingProcedureCounter",
	ConditionType:           "ConditionType",
	ConditionRateValue:      "ConditionRateValue",
	ConditionCurrency:       "ConditionCurrency",
	ConditionQuantity:       "ConditionQuantity",
	ConditionQuantityUnit:   "ConditionQuantityUnit",
}

var SapServiceConfirmationItemPricingElementDatumTableColumns = struct {
	ServiceConfirmation     string
	ServiceConfirmationItem string
	PricingProcedureStep    string
	PricingProcedureCounter string
	ConditionType           string
	ConditionRateValue      string
	ConditionCurrency       string
	ConditionQuantity       string
	ConditionQuantityUnit   string
}{
	ServiceConfirmation:     "sap_service_confirmation_item_pricing_element_data.ServiceConfirmation",
	ServiceConfirmationItem: "sap_service_confirmation_item_pricing_element_data.ServiceConfirmationItem",
	PricingProcedureStep:    "sap_service_confirmation_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter: "sap_service_confirmation_item_pricing_element_data.PricingProcedureCounter",
	ConditionType:           "sap_service_confirmation_item_pricing_element_data.ConditionType",
	ConditionRateValue:      "sap_service_confirmation_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:       "sap_service_confirmation_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:       "sap_service_confirmation_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:   "sap_service_confirmation_item_pricing_element_data.ConditionQuantityUnit",
}

// Generated where

var SapServiceConfirmationItemPricingElementDatumWhere = struct {
	ServiceConfirmation     whereHelperstring
	ServiceConfirmationItem whereHelperstring
	PricingProcedureStep    whereHelperstring
	PricingProcedureCounter whereHelperstring
	ConditionType           whereHelpernull_String
	ConditionRateValue      whereHelpernull_String
	ConditionCurrency       whereHelpernull_String
	ConditionQuantity       whereHelpernull_String
	ConditionQuantityUnit   whereHelpernull_String
}{
	ServiceConfirmation:     whereHelperstring{field: "`sap_service_confirmation_item_pricing_element_data`.`ServiceConfirmation`"},
	ServiceConfirmationItem: whereHelperstring{field: "`sap_service_confirmation_item_pricing_element_data`.`ServiceConfirmationItem`"},
	PricingProcedureStep:    whereHelperstring{field: "`sap_service_confirmation_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter: whereHelperstring{field: "`sap_service_confirmation_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionType:           whereHelpernull_String{field: "`sap_service_confirmation_item_pricing_element_data`.`ConditionType`"},
	ConditionRateValue:      whereHelpernull_String{field: "`sap_service_confirmation_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:       whereHelpernull_String{field: "`sap_service_confirmation_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:       whereHelpernull_String{field: "`sap_service_confirmation_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:   whereHelpernull_String{field: "`sap_service_confirmation_item_pricing_element_data`.`ConditionQuantityUnit`"},
}

// SapServiceConfirmationItemPricingElementDatumRels is where relationship names are stored.
var SapServiceConfirmationItemPricingElementDatumRels = struct {
	ServiceConfirmationSapServiceConfirmationItemDatum string
}{
	ServiceConfirmationSapServiceConfirmationItemDatum: "ServiceConfirmationSapServiceConfirmationItemDatum",
}

// sapServiceConfirmationItemPricingElementDatumR is where relationships are stored.
type sapServiceConfirmationItemPricingElementDatumR struct {
	ServiceConfirmationSapServiceConfirmationItemDatum *SapServiceConfirmationItemDatum `boil:"ServiceConfirmationSapServiceConfirmationItemDatum" json:"ServiceConfirmationSapServiceConfirmationItemDatum" toml:"ServiceConfirmationSapServiceConfirmationItemDatum" yaml:"ServiceConfirmationSapServiceConfirmationItemDatum"`
}

// NewStruct creates a new relationship struct
func (*sapServiceConfirmationItemPricingElementDatumR) NewStruct() *sapServiceConfirmationItemPricingElementDatumR {
	return &sapServiceConfirmationItemPricingElementDatumR{}
}

// sapServiceConfirmationItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapServiceConfirmationItemPricingElementDatumL struct{}

var (
	sapServiceConfirmationItemPricingElementDatumAllColumns            = []string{"ServiceConfirmation", "ServiceConfirmationItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit"}
	sapServiceConfirmationItemPricingElementDatumColumnsWithoutDefault = []string{"ServiceConfirmation", "ServiceConfirmationItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit"}
	sapServiceConfirmationItemPricingElementDatumColumnsWithDefault    = []string{}
	sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns     = []string{"ServiceConfirmation", "ServiceConfirmationItem"}
	sapServiceConfirmationItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceConfirmationItemPricingElementDatumSlice is an alias for a slice of pointers to SapServiceConfirmationItemPricingElementDatum.
	// This should almost always be used instead of []SapServiceConfirmationItemPricingElementDatum.
	SapServiceConfirmationItemPricingElementDatumSlice []*SapServiceConfirmationItemPricingElementDatum
	// SapServiceConfirmationItemPricingElementDatumHook is the signature for custom SapServiceConfirmationItemPricingElementDatum hook methods
	SapServiceConfirmationItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapServiceConfirmationItemPricingElementDatum) error

	sapServiceConfirmationItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceConfirmationItemPricingElementDatumType                 = reflect.TypeOf(&SapServiceConfirmationItemPricingElementDatum{})
	sapServiceConfirmationItemPricingElementDatumMapping              = queries.MakeStructMapping(sapServiceConfirmationItemPricingElementDatumType)
	sapServiceConfirmationItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns)
	sapServiceConfirmationItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapServiceConfirmationItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapServiceConfirmationItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapServiceConfirmationItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapServiceConfirmationItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapServiceConfirmationItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceConfirmationItemPricingElementDatumAfterSelectHooks []SapServiceConfirmationItemPricingElementDatumHook

var sapServiceConfirmationItemPricingElementDatumBeforeInsertHooks []SapServiceConfirmationItemPricingElementDatumHook
var sapServiceConfirmationItemPricingElementDatumAfterInsertHooks []SapServiceConfirmationItemPricingElementDatumHook

var sapServiceConfirmationItemPricingElementDatumBeforeUpdateHooks []SapServiceConfirmationItemPricingElementDatumHook
var sapServiceConfirmationItemPricingElementDatumAfterUpdateHooks []SapServiceConfirmationItemPricingElementDatumHook

var sapServiceConfirmationItemPricingElementDatumBeforeDeleteHooks []SapServiceConfirmationItemPricingElementDatumHook
var sapServiceConfirmationItemPricingElementDatumAfterDeleteHooks []SapServiceConfirmationItemPricingElementDatumHook

var sapServiceConfirmationItemPricingElementDatumBeforeUpsertHooks []SapServiceConfirmationItemPricingElementDatumHook
var sapServiceConfirmationItemPricingElementDatumAfterUpsertHooks []SapServiceConfirmationItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceConfirmationItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceConfirmationItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapServiceConfirmationItemPricingElementDatumHook(hookPoint boil.HookPoint, sapServiceConfirmationItemPricingElementDatumHook SapServiceConfirmationItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceConfirmationItemPricingElementDatumAfterSelectHooks = append(sapServiceConfirmationItemPricingElementDatumAfterSelectHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapServiceConfirmationItemPricingElementDatumBeforeInsertHooks = append(sapServiceConfirmationItemPricingElementDatumBeforeInsertHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapServiceConfirmationItemPricingElementDatumAfterInsertHooks = append(sapServiceConfirmationItemPricingElementDatumAfterInsertHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceConfirmationItemPricingElementDatumBeforeUpdateHooks = append(sapServiceConfirmationItemPricingElementDatumBeforeUpdateHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapServiceConfirmationItemPricingElementDatumAfterUpdateHooks = append(sapServiceConfirmationItemPricingElementDatumAfterUpdateHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceConfirmationItemPricingElementDatumBeforeDeleteHooks = append(sapServiceConfirmationItemPricingElementDatumBeforeDeleteHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapServiceConfirmationItemPricingElementDatumAfterDeleteHooks = append(sapServiceConfirmationItemPricingElementDatumAfterDeleteHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceConfirmationItemPricingElementDatumBeforeUpsertHooks = append(sapServiceConfirmationItemPricingElementDatumBeforeUpsertHooks, sapServiceConfirmationItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapServiceConfirmationItemPricingElementDatumAfterUpsertHooks = append(sapServiceConfirmationItemPricingElementDatumAfterUpsertHooks, sapServiceConfirmationItemPricingElementDatumHook)
	}
}

// One returns a single sapServiceConfirmationItemPricingElementDatum record from the query.
func (q sapServiceConfirmationItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceConfirmationItemPricingElementDatum, error) {
	o := &SapServiceConfirmationItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_confirmation_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceConfirmationItemPricingElementDatum records from the query.
func (q sapServiceConfirmationItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceConfirmationItemPricingElementDatumSlice, error) {
	var o []*SapServiceConfirmationItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceConfirmationItemPricingElementDatum slice")
	}

	if len(sapServiceConfirmationItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceConfirmationItemPricingElementDatum records in the query.
func (q sapServiceConfirmationItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_confirmation_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceConfirmationItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_confirmation_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// ServiceConfirmationSapServiceConfirmationItemDatum pointed to by the foreign key.
func (o *SapServiceConfirmationItemPricingElementDatum) ServiceConfirmationSapServiceConfirmationItemDatum(mods ...qm.QueryMod) sapServiceConfirmationItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceConfirmation` = ?", o.ServiceConfirmation),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceConfirmationItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_confirmation_item_data`")

	return query
}

// LoadServiceConfirmationSapServiceConfirmationItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceConfirmationItemPricingElementDatumL) LoadServiceConfirmationSapServiceConfirmationItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationItemPricingElementDatum
	var object *SapServiceConfirmationItemPricingElementDatum

	if singular {
		object = maybeSapServiceConfirmationItemPricingElementDatum.(*SapServiceConfirmationItemPricingElementDatum)
	} else {
		slice = *maybeSapServiceConfirmationItemPricingElementDatum.(*[]*SapServiceConfirmationItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationItemPricingElementDatumR{}
		}
		args = append(args, object.ServiceConfirmation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_item_data`),
		qm.WhereIn(`sap_service_confirmation_item_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceConfirmationItemDatum")
	}

	var resultSlice []*SapServiceConfirmationItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceConfirmationItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_confirmation_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_item_data")
	}

	if len(sapServiceConfirmationItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceConfirmationSapServiceConfirmationItemDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceConfirmationItemDatumR{}
		}
		foreign.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData = append(foreign.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationItemDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationItemDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData = append(foreign.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetServiceConfirmationSapServiceConfirmationItemDatum of the sapServiceConfirmationItemPricingElementDatum to the related item.
// Sets o.R.ServiceConfirmationSapServiceConfirmationItemDatum to related.
// Adds o to related.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData.
func (o *SapServiceConfirmationItemPricingElementDatum) SetServiceConfirmationSapServiceConfirmationItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceConfirmationItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_confirmation_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
		strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceConfirmation, o.ServiceConfirmation, o.ServiceConfirmationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceConfirmation = related.ServiceConfirmation
	if o.R == nil {
		o.R = &sapServiceConfirmationItemPricingElementDatumR{
			ServiceConfirmationSapServiceConfirmationItemDatum: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationItemDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceConfirmationItemDatumR{
			ServiceConfirmationSapServiceConfirmationItemPricingElementData: SapServiceConfirmationItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData = append(related.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData, o)
	}

	return nil
}

// SapServiceConfirmationItemPricingElementData retrieves all the records using an executor.
func SapServiceConfirmationItemPricingElementData(mods ...qm.QueryMod) sapServiceConfirmationItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_service_confirmation_item_pricing_element_data`"))
	return sapServiceConfirmationItemPricingElementDatumQuery{NewQuery(mods...)}
}

// FindSapServiceConfirmationItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceConfirmationItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string, serviceConfirmationItem string, selectCols ...string) (*SapServiceConfirmationItemPricingElementDatum, error) {
	sapServiceConfirmationItemPricingElementDatumObj := &SapServiceConfirmationItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_confirmation_item_pricing_element_data` where `ServiceConfirmation`=? AND `ServiceConfirmationItem`=?", sel,
	)

	q := queries.Raw(query, serviceConfirmation, serviceConfirmationItem)

	err := q.Bind(ctx, exec, sapServiceConfirmationItemPricingElementDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_confirmation_item_pricing_element_data")
	}

	if err = sapServiceConfirmationItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceConfirmationItemPricingElementDatumObj, err
	}

	return sapServiceConfirmationItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceConfirmationItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceConfirmationItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationItemPricingElementDatumInsertCache[key]
	sapServiceConfirmationItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceConfirmationItemPricingElementDatumAllColumns,
			sapServiceConfirmationItemPricingElementDatumColumnsWithDefault,
			sapServiceConfirmationItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_confirmation_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_confirmation_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_confirmation_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_confirmation_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceConfirmation,
		o.ServiceConfirmationItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationItemPricingElementDatumInsertCacheMut.Lock()
		sapServiceConfirmationItemPricingElementDatumInsertCache[key] = cache
		sapServiceConfirmationItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceConfirmationItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceConfirmationItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceConfirmationItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceConfirmationItemPricingElementDatumUpdateCache[key]
	sapServiceConfirmationItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceConfirmationItemPricingElementDatumAllColumns,
			sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_confirmation_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_confirmation_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, append(wl, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_confirmation_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_confirmation_item_pricing_element_data")
	}

	if !cached {
		sapServiceConfirmationItemPricingElementDatumUpdateCacheMut.Lock()
		sapServiceConfirmationItemPricingElementDatumUpdateCache[key] = cache
		sapServiceConfirmationItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceConfirmationItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_confirmation_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_confirmation_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceConfirmationItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_confirmation_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceConfirmationItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceConfirmationItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceConfirmationItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceConfirmationItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceConfirmationItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceConfirmationItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationItemPricingElementDatumUpsertCache[key]
	sapServiceConfirmationItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceConfirmationItemPricingElementDatumAllColumns,
			sapServiceConfirmationItemPricingElementDatumColumnsWithDefault,
			sapServiceConfirmationItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceConfirmationItemPricingElementDatumAllColumns,
			sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_confirmation_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_confirmation_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_confirmation_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_confirmation_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceConfirmationItemPricingElementDatumType, sapServiceConfirmationItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_confirmation_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationItemPricingElementDatumUpsertCacheMut.Lock()
		sapServiceConfirmationItemPricingElementDatumUpsertCache[key] = cache
		sapServiceConfirmationItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceConfirmationItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceConfirmationItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceConfirmationItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceConfirmationItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_confirmation_item_pricing_element_data` WHERE `ServiceConfirmation`=? AND `ServiceConfirmationItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_confirmation_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_confirmation_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceConfirmationItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceConfirmationItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_confirmation_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceConfirmationItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceConfirmationItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_confirmation_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceConfirmationItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_item_pricing_element_data")
	}

	if len(sapServiceConfirmationItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceConfirmationItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceConfirmationItemPricingElementDatum(ctx, exec, o.ServiceConfirmation, o.ServiceConfirmationItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceConfirmationItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceConfirmationItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_confirmation_item_pricing_element_data`.* FROM `sap_service_confirmation_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceConfirmationItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceConfirmationItemPricingElementDatumExists checks if the SapServiceConfirmationItemPricingElementDatum row exists.
func SapServiceConfirmationItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string, serviceConfirmationItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_confirmation_item_pricing_element_data` where `ServiceConfirmation`=? AND `ServiceConfirmationItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceConfirmation, serviceConfirmationItem)
	}
	row := exec.QueryRowContext(ctx, sql, serviceConfirmation, serviceConfirmationItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_confirmation_item_pricing_element_data exists")
	}

	return exists, nil
}
