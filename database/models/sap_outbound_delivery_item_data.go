// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapOutboundDeliveryItemDatum is an object representing the database table.
type SapOutboundDeliveryItemDatum struct {
	DeliveryDocument               string      `boil:"DeliveryDocument" json:"DeliveryDocument" toml:"DeliveryDocument" yaml:"DeliveryDocument"`
	DeliveryDocumentItem           string      `boil:"DeliveryDocumentItem" json:"DeliveryDocumentItem" toml:"DeliveryDocumentItem" yaml:"DeliveryDocumentItem"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ActualDeliveryQuantity         null.String `boil:"ActualDeliveryQuantity" json:"ActualDeliveryQuantity,omitempty" toml:"ActualDeliveryQuantity" yaml:"ActualDeliveryQuantity,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	BatchBySupplier                null.String `boil:"BatchBySupplier" json:"BatchBySupplier,omitempty" toml:"BatchBySupplier" yaml:"BatchBySupplier,omitempty"`
	CostCenter                     null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                   null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	DeliveryDocumentItemCategory   null.String `boil:"DeliveryDocumentItemCategory" json:"DeliveryDocumentItemCategory,omitempty" toml:"DeliveryDocumentItemCategory" yaml:"DeliveryDocumentItemCategory,omitempty"`
	DeliveryDocumentItemText       null.String `boil:"DeliveryDocumentItemText" json:"DeliveryDocumentItemText,omitempty" toml:"DeliveryDocumentItemText" yaml:"DeliveryDocumentItemText,omitempty"`
	DeliveryQuantityUnit           null.String `boil:"DeliveryQuantityUnit" json:"DeliveryQuantityUnit,omitempty" toml:"DeliveryQuantityUnit" yaml:"DeliveryQuantityUnit,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	Division                       null.String `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	GLAccount                      null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	GoodsMovementStatus            null.String `boil:"GoodsMovementStatus" json:"GoodsMovementStatus,omitempty" toml:"GoodsMovementStatus" yaml:"GoodsMovementStatus,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	InternationalArticleNumber     null.String `boil:"InternationalArticleNumber" json:"InternationalArticleNumber,omitempty" toml:"InternationalArticleNumber" yaml:"InternationalArticleNumber,omitempty"`
	InventorySpecialStockType      null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	IsCompletelyDelivered          null.Bool   `boil:"IsCompletelyDelivered" json:"IsCompletelyDelivered,omitempty" toml:"IsCompletelyDelivered" yaml:"IsCompletelyDelivered,omitempty"`
	ItemBillingBlockReason         null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	ItemDeliveryIncompletionStatus null.String `boil:"ItemDeliveryIncompletionStatus" json:"ItemDeliveryIncompletionStatus,omitempty" toml:"ItemDeliveryIncompletionStatus" yaml:"ItemDeliveryIncompletionStatus,omitempty"`
	ItemGdsMvtIncompletionSts      null.String `boil:"ItemGdsMvtIncompletionSts" json:"ItemGdsMvtIncompletionSts,omitempty" toml:"ItemGdsMvtIncompletionSts" yaml:"ItemGdsMvtIncompletionSts,omitempty"`
	ItemGrossWeight                null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                  null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                 null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemIsBillingRelevant          null.String `boil:"ItemIsBillingRelevant" json:"ItemIsBillingRelevant,omitempty" toml:"ItemIsBillingRelevant" yaml:"ItemIsBillingRelevant,omitempty"`
	ItemPackingIncompletionStatus  null.String `boil:"ItemPackingIncompletionStatus" json:"ItemPackingIncompletionStatus,omitempty" toml:"ItemPackingIncompletionStatus" yaml:"ItemPackingIncompletionStatus,omitempty"`
	ItemPickingIncompletionStatus  null.String `boil:"ItemPickingIncompletionStatus" json:"ItemPickingIncompletionStatus,omitempty" toml:"ItemPickingIncompletionStatus" yaml:"ItemPickingIncompletionStatus,omitempty"`
	ItemVolume                     null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LoadingGroup                   null.String `boil:"LoadingGroup" json:"LoadingGroup,omitempty" toml:"LoadingGroup" yaml:"LoadingGroup,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer             null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	MaterialFreightGroup           null.String `boil:"MaterialFreightGroup" json:"MaterialFreightGroup,omitempty" toml:"MaterialFreightGroup" yaml:"MaterialFreightGroup,omitempty"`
	NumberOfSerialNumbers          null.Int    `boil:"NumberOfSerialNumbers" json:"NumberOfSerialNumbers,omitempty" toml:"NumberOfSerialNumbers" yaml:"NumberOfSerialNumbers,omitempty"`
	OrderID                        null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                      null.String `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	OriginalDeliveryQuantity       null.String `boil:"OriginalDeliveryQuantity" json:"OriginalDeliveryQuantity,omitempty" toml:"OriginalDeliveryQuantity" yaml:"OriginalDeliveryQuantity,omitempty"`
	PackingStatus                  null.String `boil:"PackingStatus" json:"PackingStatus,omitempty" toml:"PackingStatus" yaml:"PackingStatus,omitempty"`
	PartialDeliveryIsAllowed       null.String `boil:"PartialDeliveryIsAllowed" json:"PartialDeliveryIsAllowed,omitempty" toml:"PartialDeliveryIsAllowed" yaml:"PartialDeliveryIsAllowed,omitempty"`
	PickingConfirmationStatus      null.String `boil:"PickingConfirmationStatus" json:"PickingConfirmationStatus,omitempty" toml:"PickingConfirmationStatus" yaml:"PickingConfirmationStatus,omitempty"`
	PickingStatus                  null.String `boil:"PickingStatus" json:"PickingStatus,omitempty" toml:"PickingStatus" yaml:"PickingStatus,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	ProductAvailabilityDate        null.String `boil:"ProductAvailabilityDate" json:"ProductAvailabilityDate,omitempty" toml:"ProductAvailabilityDate" yaml:"ProductAvailabilityDate,omitempty"`
	ProductAvailabilityTime        null.String `boil:"ProductAvailabilityTime" json:"ProductAvailabilityTime,omitempty" toml:"ProductAvailabilityTime" yaml:"ProductAvailabilityTime,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	TransportationGroup            null.String `boil:"TransportationGroup" json:"TransportationGroup,omitempty" toml:"TransportationGroup" yaml:"TransportationGroup,omitempty"`

	R *sapOutboundDeliveryItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapOutboundDeliveryItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapOutboundDeliveryItemDatumColumns = struct {
	DeliveryDocument               string
	DeliveryDocumentItem           string
	BaseUnit                       string
	ActualDeliveryQuantity         string
	Batch                          string
	BatchBySupplier                string
	CostCenter                     string
	CreationDate                   string
	CreationTime                   string
	DeliveryDocumentItemCategory   string
	DeliveryDocumentItemText       string
	DeliveryQuantityUnit           string
	DistributionChannel            string
	Division                       string
	GLAccount                      string
	GoodsMovementStatus            string
	GoodsMovementType              string
	InternationalArticleNumber     string
	InventorySpecialStockType      string
	IsCompletelyDelivered          string
	ItemBillingBlockReason         string
	ItemDeliveryIncompletionStatus string
	ItemGdsMvtIncompletionSts      string
	ItemGrossWeight                string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	ItemIsBillingRelevant          string
	ItemPackingIncompletionStatus  string
	ItemPickingIncompletionStatus  string
	ItemVolume                     string
	LastChangeDate                 string
	LoadingGroup                   string
	Material                       string
	MaterialByCustomer             string
	MaterialFreightGroup           string
	NumberOfSerialNumbers          string
	OrderID                        string
	OrderItem                      string
	OriginalDeliveryQuantity       string
	PackingStatus                  string
	PartialDeliveryIsAllowed       string
	PickingConfirmationStatus      string
	PickingStatus                  string
	Plant                          string
	ProductAvailabilityDate        string
	ProductAvailabilityTime        string
	ProfitCenter                   string
	StorageLocation                string
	TransportationGroup            string
}{
	DeliveryDocument:               "DeliveryDocument",
	DeliveryDocumentItem:           "DeliveryDocumentItem",
	BaseUnit:                       "BaseUnit",
	ActualDeliveryQuantity:         "ActualDeliveryQuantity",
	Batch:                          "Batch",
	BatchBySupplier:                "BatchBySupplier",
	CostCenter:                     "CostCenter",
	CreationDate:                   "CreationDate",
	CreationTime:                   "CreationTime",
	DeliveryDocumentItemCategory:   "DeliveryDocumentItemCategory",
	DeliveryDocumentItemText:       "DeliveryDocumentItemText",
	DeliveryQuantityUnit:           "DeliveryQuantityUnit",
	DistributionChannel:            "DistributionChannel",
	Division:                       "Division",
	GLAccount:                      "GLAccount",
	GoodsMovementStatus:            "GoodsMovementStatus",
	GoodsMovementType:              "GoodsMovementType",
	InternationalArticleNumber:     "InternationalArticleNumber",
	InventorySpecialStockType:      "InventorySpecialStockType",
	IsCompletelyDelivered:          "IsCompletelyDelivered",
	ItemBillingBlockReason:         "ItemBillingBlockReason",
	ItemDeliveryIncompletionStatus: "ItemDeliveryIncompletionStatus",
	ItemGdsMvtIncompletionSts:      "ItemGdsMvtIncompletionSts",
	ItemGrossWeight:                "ItemGrossWeight",
	ItemNetWeight:                  "ItemNetWeight",
	ItemWeightUnit:                 "ItemWeightUnit",
	ItemIsBillingRelevant:          "ItemIsBillingRelevant",
	ItemPackingIncompletionStatus:  "ItemPackingIncompletionStatus",
	ItemPickingIncompletionStatus:  "ItemPickingIncompletionStatus",
	ItemVolume:                     "ItemVolume",
	LastChangeDate:                 "LastChangeDate",
	LoadingGroup:                   "LoadingGroup",
	Material:                       "Material",
	MaterialByCustomer:             "MaterialByCustomer",
	MaterialFreightGroup:           "MaterialFreightGroup",
	NumberOfSerialNumbers:          "NumberOfSerialNumbers",
	OrderID:                        "OrderID",
	OrderItem:                      "OrderItem",
	OriginalDeliveryQuantity:       "OriginalDeliveryQuantity",
	PackingStatus:                  "PackingStatus",
	PartialDeliveryIsAllowed:       "PartialDeliveryIsAllowed",
	PickingConfirmationStatus:      "PickingConfirmationStatus",
	PickingStatus:                  "PickingStatus",
	Plant:                          "Plant",
	ProductAvailabilityDate:        "ProductAvailabilityDate",
	ProductAvailabilityTime:        "ProductAvailabilityTime",
	ProfitCenter:                   "ProfitCenter",
	StorageLocation:                "StorageLocation",
	TransportationGroup:            "TransportationGroup",
}

var SapOutboundDeliveryItemDatumTableColumns = struct {
	DeliveryDocument               string
	DeliveryDocumentItem           string
	BaseUnit                       string
	ActualDeliveryQuantity         string
	Batch                          string
	BatchBySupplier                string
	CostCenter                     string
	CreationDate                   string
	CreationTime                   string
	DeliveryDocumentItemCategory   string
	DeliveryDocumentItemText       string
	DeliveryQuantityUnit           string
	DistributionChannel            string
	Division                       string
	GLAccount                      string
	GoodsMovementStatus            string
	GoodsMovementType              string
	InternationalArticleNumber     string
	InventorySpecialStockType      string
	IsCompletelyDelivered          string
	ItemBillingBlockReason         string
	ItemDeliveryIncompletionStatus string
	ItemGdsMvtIncompletionSts      string
	ItemGrossWeight                string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	ItemIsBillingRelevant          string
	ItemPackingIncompletionStatus  string
	ItemPickingIncompletionStatus  string
	ItemVolume                     string
	LastChangeDate                 string
	LoadingGroup                   string
	Material                       string
	MaterialByCustomer             string
	MaterialFreightGroup           string
	NumberOfSerialNumbers          string
	OrderID                        string
	OrderItem                      string
	OriginalDeliveryQuantity       string
	PackingStatus                  string
	PartialDeliveryIsAllowed       string
	PickingConfirmationStatus      string
	PickingStatus                  string
	Plant                          string
	ProductAvailabilityDate        string
	ProductAvailabilityTime        string
	ProfitCenter                   string
	StorageLocation                string
	TransportationGroup            string
}{
	DeliveryDocument:               "sap_outbound_delivery_item_data.DeliveryDocument",
	DeliveryDocumentItem:           "sap_outbound_delivery_item_data.DeliveryDocumentItem",
	BaseUnit:                       "sap_outbound_delivery_item_data.BaseUnit",
	ActualDeliveryQuantity:         "sap_outbound_delivery_item_data.ActualDeliveryQuantity",
	Batch:                          "sap_outbound_delivery_item_data.Batch",
	BatchBySupplier:                "sap_outbound_delivery_item_data.BatchBySupplier",
	CostCenter:                     "sap_outbound_delivery_item_data.CostCenter",
	CreationDate:                   "sap_outbound_delivery_item_data.CreationDate",
	CreationTime:                   "sap_outbound_delivery_item_data.CreationTime",
	DeliveryDocumentItemCategory:   "sap_outbound_delivery_item_data.DeliveryDocumentItemCategory",
	DeliveryDocumentItemText:       "sap_outbound_delivery_item_data.DeliveryDocumentItemText",
	DeliveryQuantityUnit:           "sap_outbound_delivery_item_data.DeliveryQuantityUnit",
	DistributionChannel:            "sap_outbound_delivery_item_data.DistributionChannel",
	Division:                       "sap_outbound_delivery_item_data.Division",
	GLAccount:                      "sap_outbound_delivery_item_data.GLAccount",
	GoodsMovementStatus:            "sap_outbound_delivery_item_data.GoodsMovementStatus",
	GoodsMovementType:              "sap_outbound_delivery_item_data.GoodsMovementType",
	InternationalArticleNumber:     "sap_outbound_delivery_item_data.InternationalArticleNumber",
	InventorySpecialStockType:      "sap_outbound_delivery_item_data.InventorySpecialStockType",
	IsCompletelyDelivered:          "sap_outbound_delivery_item_data.IsCompletelyDelivered",
	ItemBillingBlockReason:         "sap_outbound_delivery_item_data.ItemBillingBlockReason",
	ItemDeliveryIncompletionStatus: "sap_outbound_delivery_item_data.ItemDeliveryIncompletionStatus",
	ItemGdsMvtIncompletionSts:      "sap_outbound_delivery_item_data.ItemGdsMvtIncompletionSts",
	ItemGrossWeight:                "sap_outbound_delivery_item_data.ItemGrossWeight",
	ItemNetWeight:                  "sap_outbound_delivery_item_data.ItemNetWeight",
	ItemWeightUnit:                 "sap_outbound_delivery_item_data.ItemWeightUnit",
	ItemIsBillingRelevant:          "sap_outbound_delivery_item_data.ItemIsBillingRelevant",
	ItemPackingIncompletionStatus:  "sap_outbound_delivery_item_data.ItemPackingIncompletionStatus",
	ItemPickingIncompletionStatus:  "sap_outbound_delivery_item_data.ItemPickingIncompletionStatus",
	ItemVolume:                     "sap_outbound_delivery_item_data.ItemVolume",
	LastChangeDate:                 "sap_outbound_delivery_item_data.LastChangeDate",
	LoadingGroup:                   "sap_outbound_delivery_item_data.LoadingGroup",
	Material:                       "sap_outbound_delivery_item_data.Material",
	MaterialByCustomer:             "sap_outbound_delivery_item_data.MaterialByCustomer",
	MaterialFreightGroup:           "sap_outbound_delivery_item_data.MaterialFreightGroup",
	NumberOfSerialNumbers:          "sap_outbound_delivery_item_data.NumberOfSerialNumbers",
	OrderID:                        "sap_outbound_delivery_item_data.OrderID",
	OrderItem:                      "sap_outbound_delivery_item_data.OrderItem",
	OriginalDeliveryQuantity:       "sap_outbound_delivery_item_data.OriginalDeliveryQuantity",
	PackingStatus:                  "sap_outbound_delivery_item_data.PackingStatus",
	PartialDeliveryIsAllowed:       "sap_outbound_delivery_item_data.PartialDeliveryIsAllowed",
	PickingConfirmationStatus:      "sap_outbound_delivery_item_data.PickingConfirmationStatus",
	PickingStatus:                  "sap_outbound_delivery_item_data.PickingStatus",
	Plant:                          "sap_outbound_delivery_item_data.Plant",
	ProductAvailabilityDate:        "sap_outbound_delivery_item_data.ProductAvailabilityDate",
	ProductAvailabilityTime:        "sap_outbound_delivery_item_data.ProductAvailabilityTime",
	ProfitCenter:                   "sap_outbound_delivery_item_data.ProfitCenter",
	StorageLocation:                "sap_outbound_delivery_item_data.StorageLocation",
	TransportationGroup:            "sap_outbound_delivery_item_data.TransportationGroup",
}

// Generated where

var SapOutboundDeliveryItemDatumWhere = struct {
	DeliveryDocument               whereHelperstring
	DeliveryDocumentItem           whereHelperstring
	BaseUnit                       whereHelpernull_String
	ActualDeliveryQuantity         whereHelpernull_String
	Batch                          whereHelpernull_String
	BatchBySupplier                whereHelpernull_String
	CostCenter                     whereHelpernull_String
	CreationDate                   whereHelpernull_String
	CreationTime                   whereHelpernull_String
	DeliveryDocumentItemCategory   whereHelpernull_String
	DeliveryDocumentItemText       whereHelpernull_String
	DeliveryQuantityUnit           whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	Division                       whereHelpernull_String
	GLAccount                      whereHelpernull_String
	GoodsMovementStatus            whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
	InternationalArticleNumber     whereHelpernull_String
	InventorySpecialStockType      whereHelpernull_String
	IsCompletelyDelivered          whereHelpernull_Bool
	ItemBillingBlockReason         whereHelpernull_String
	ItemDeliveryIncompletionStatus whereHelpernull_String
	ItemGdsMvtIncompletionSts      whereHelpernull_String
	ItemGrossWeight                whereHelpernull_String
	ItemNetWeight                  whereHelpernull_String
	ItemWeightUnit                 whereHelpernull_String
	ItemIsBillingRelevant          whereHelpernull_String
	ItemPackingIncompletionStatus  whereHelpernull_String
	ItemPickingIncompletionStatus  whereHelpernull_String
	ItemVolume                     whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	LoadingGroup                   whereHelpernull_String
	Material                       whereHelpernull_String
	MaterialByCustomer             whereHelpernull_String
	MaterialFreightGroup           whereHelpernull_String
	NumberOfSerialNumbers          whereHelpernull_Int
	OrderID                        whereHelpernull_String
	OrderItem                      whereHelpernull_String
	OriginalDeliveryQuantity       whereHelpernull_String
	PackingStatus                  whereHelpernull_String
	PartialDeliveryIsAllowed       whereHelpernull_String
	PickingConfirmationStatus      whereHelpernull_String
	PickingStatus                  whereHelpernull_String
	Plant                          whereHelpernull_String
	ProductAvailabilityDate        whereHelpernull_String
	ProductAvailabilityTime        whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	StorageLocation                whereHelpernull_String
	TransportationGroup            whereHelpernull_String
}{
	DeliveryDocument:               whereHelperstring{field: "`sap_outbound_delivery_item_data`.`DeliveryDocument`"},
	DeliveryDocumentItem:           whereHelperstring{field: "`sap_outbound_delivery_item_data`.`DeliveryDocumentItem`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`BaseUnit`"},
	ActualDeliveryQuantity:         whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ActualDeliveryQuantity`"},
	Batch:                          whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`Batch`"},
	BatchBySupplier:                whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`BatchBySupplier`"},
	CostCenter:                     whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`CostCenter`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`CreationDate`"},
	CreationTime:                   whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`CreationTime`"},
	DeliveryDocumentItemCategory:   whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`DeliveryDocumentItemCategory`"},
	DeliveryDocumentItemText:       whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`DeliveryDocumentItemText`"},
	DeliveryQuantityUnit:           whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`DeliveryQuantityUnit`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`DistributionChannel`"},
	Division:                       whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`Division`"},
	GLAccount:                      whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`GLAccount`"},
	GoodsMovementStatus:            whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`GoodsMovementStatus`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`GoodsMovementType`"},
	InternationalArticleNumber:     whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`InternationalArticleNumber`"},
	InventorySpecialStockType:      whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`InventorySpecialStockType`"},
	IsCompletelyDelivered:          whereHelpernull_Bool{field: "`sap_outbound_delivery_item_data`.`IsCompletelyDelivered`"},
	ItemBillingBlockReason:         whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemBillingBlockReason`"},
	ItemDeliveryIncompletionStatus: whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemDeliveryIncompletionStatus`"},
	ItemGdsMvtIncompletionSts:      whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemGdsMvtIncompletionSts`"},
	ItemGrossWeight:                whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                  whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                 whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemWeightUnit`"},
	ItemIsBillingRelevant:          whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemIsBillingRelevant`"},
	ItemPackingIncompletionStatus:  whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemPackingIncompletionStatus`"},
	ItemPickingIncompletionStatus:  whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemPickingIncompletionStatus`"},
	ItemVolume:                     whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ItemVolume`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`LastChangeDate`"},
	LoadingGroup:                   whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`LoadingGroup`"},
	Material:                       whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`Material`"},
	MaterialByCustomer:             whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`MaterialByCustomer`"},
	MaterialFreightGroup:           whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`MaterialFreightGroup`"},
	NumberOfSerialNumbers:          whereHelpernull_Int{field: "`sap_outbound_delivery_item_data`.`NumberOfSerialNumbers`"},
	OrderID:                        whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`OrderID`"},
	OrderItem:                      whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`OrderItem`"},
	OriginalDeliveryQuantity:       whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`OriginalDeliveryQuantity`"},
	PackingStatus:                  whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`PackingStatus`"},
	PartialDeliveryIsAllowed:       whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`PartialDeliveryIsAllowed`"},
	PickingConfirmationStatus:      whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`PickingConfirmationStatus`"},
	PickingStatus:                  whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`PickingStatus`"},
	Plant:                          whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`Plant`"},
	ProductAvailabilityDate:        whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ProductAvailabilityDate`"},
	ProductAvailabilityTime:        whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ProductAvailabilityTime`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`ProfitCenter`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`StorageLocation`"},
	TransportationGroup:            whereHelpernull_String{field: "`sap_outbound_delivery_item_data`.`TransportationGroup`"},
}

// SapOutboundDeliveryItemDatumRels is where relationship names are stored.
var SapOutboundDeliveryItemDatumRels = struct {
	DeliveryDocumentSapOutboundDeliveryHeaderDatum string
}{
	DeliveryDocumentSapOutboundDeliveryHeaderDatum: "DeliveryDocumentSapOutboundDeliveryHeaderDatum",
}

// sapOutboundDeliveryItemDatumR is where relationships are stored.
type sapOutboundDeliveryItemDatumR struct {
	DeliveryDocumentSapOutboundDeliveryHeaderDatum *SapOutboundDeliveryHeaderDatum `boil:"DeliveryDocumentSapOutboundDeliveryHeaderDatum" json:"DeliveryDocumentSapOutboundDeliveryHeaderDatum" toml:"DeliveryDocumentSapOutboundDeliveryHeaderDatum" yaml:"DeliveryDocumentSapOutboundDeliveryHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapOutboundDeliveryItemDatumR) NewStruct() *sapOutboundDeliveryItemDatumR {
	return &sapOutboundDeliveryItemDatumR{}
}

// sapOutboundDeliveryItemDatumL is where Load methods for each relationship are stored.
type sapOutboundDeliveryItemDatumL struct{}

var (
	sapOutboundDeliveryItemDatumAllColumns            = []string{"DeliveryDocument", "DeliveryDocumentItem", "BaseUnit", "ActualDeliveryQuantity", "Batch", "BatchBySupplier", "CostCenter", "CreationDate", "CreationTime", "DeliveryDocumentItemCategory", "DeliveryDocumentItemText", "DeliveryQuantityUnit", "DistributionChannel", "Division", "GLAccount", "GoodsMovementStatus", "GoodsMovementType", "InternationalArticleNumber", "InventorySpecialStockType", "IsCompletelyDelivered", "ItemBillingBlockReason", "ItemDeliveryIncompletionStatus", "ItemGdsMvtIncompletionSts", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemIsBillingRelevant", "ItemPackingIncompletionStatus", "ItemPickingIncompletionStatus", "ItemVolume", "LastChangeDate", "LoadingGroup", "Material", "MaterialByCustomer", "MaterialFreightGroup", "NumberOfSerialNumbers", "OrderID", "OrderItem", "OriginalDeliveryQuantity", "PackingStatus", "PartialDeliveryIsAllowed", "PickingConfirmationStatus", "PickingStatus", "Plant", "ProductAvailabilityDate", "ProductAvailabilityTime", "ProfitCenter", "StorageLocation", "TransportationGroup"}
	sapOutboundDeliveryItemDatumColumnsWithoutDefault = []string{"DeliveryDocument", "DeliveryDocumentItem", "BaseUnit", "ActualDeliveryQuantity", "Batch", "BatchBySupplier", "CostCenter", "CreationDate", "CreationTime", "DeliveryDocumentItemCategory", "DeliveryDocumentItemText", "DeliveryQuantityUnit", "DistributionChannel", "Division", "GLAccount", "GoodsMovementStatus", "GoodsMovementType", "InternationalArticleNumber", "InventorySpecialStockType", "IsCompletelyDelivered", "ItemBillingBlockReason", "ItemDeliveryIncompletionStatus", "ItemGdsMvtIncompletionSts", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemIsBillingRelevant", "ItemPackingIncompletionStatus", "ItemPickingIncompletionStatus", "ItemVolume", "LastChangeDate", "LoadingGroup", "Material", "MaterialByCustomer", "MaterialFreightGroup", "NumberOfSerialNumbers", "OrderID", "OrderItem", "OriginalDeliveryQuantity", "PackingStatus", "PartialDeliveryIsAllowed", "PickingConfirmationStatus", "PickingStatus", "Plant", "ProductAvailabilityDate", "ProductAvailabilityTime", "ProfitCenter", "StorageLocation", "TransportationGroup"}
	sapOutboundDeliveryItemDatumColumnsWithDefault    = []string{}
	sapOutboundDeliveryItemDatumPrimaryKeyColumns     = []string{"DeliveryDocument", "DeliveryDocumentItem"}
	sapOutboundDeliveryItemDatumGeneratedColumns      = []string{}
)

type (
	// SapOutboundDeliveryItemDatumSlice is an alias for a slice of pointers to SapOutboundDeliveryItemDatum.
	// This should almost always be used instead of []SapOutboundDeliveryItemDatum.
	SapOutboundDeliveryItemDatumSlice []*SapOutboundDeliveryItemDatum
	// SapOutboundDeliveryItemDatumHook is the signature for custom SapOutboundDeliveryItemDatum hook methods
	SapOutboundDeliveryItemDatumHook func(context.Context, boil.ContextExecutor, *SapOutboundDeliveryItemDatum) error

	sapOutboundDeliveryItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapOutboundDeliveryItemDatumType                 = reflect.TypeOf(&SapOutboundDeliveryItemDatum{})
	sapOutboundDeliveryItemDatumMapping              = queries.MakeStructMapping(sapOutboundDeliveryItemDatumType)
	sapOutboundDeliveryItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, sapOutboundDeliveryItemDatumPrimaryKeyColumns)
	sapOutboundDeliveryItemDatumInsertCacheMut       sync.RWMutex
	sapOutboundDeliveryItemDatumInsertCache          = make(map[string]insertCache)
	sapOutboundDeliveryItemDatumUpdateCacheMut       sync.RWMutex
	sapOutboundDeliveryItemDatumUpdateCache          = make(map[string]updateCache)
	sapOutboundDeliveryItemDatumUpsertCacheMut       sync.RWMutex
	sapOutboundDeliveryItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapOutboundDeliveryItemDatumAfterSelectHooks []SapOutboundDeliveryItemDatumHook

var sapOutboundDeliveryItemDatumBeforeInsertHooks []SapOutboundDeliveryItemDatumHook
var sapOutboundDeliveryItemDatumAfterInsertHooks []SapOutboundDeliveryItemDatumHook

var sapOutboundDeliveryItemDatumBeforeUpdateHooks []SapOutboundDeliveryItemDatumHook
var sapOutboundDeliveryItemDatumAfterUpdateHooks []SapOutboundDeliveryItemDatumHook

var sapOutboundDeliveryItemDatumBeforeDeleteHooks []SapOutboundDeliveryItemDatumHook
var sapOutboundDeliveryItemDatumAfterDeleteHooks []SapOutboundDeliveryItemDatumHook

var sapOutboundDeliveryItemDatumBeforeUpsertHooks []SapOutboundDeliveryItemDatumHook
var sapOutboundDeliveryItemDatumAfterUpsertHooks []SapOutboundDeliveryItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapOutboundDeliveryItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapOutboundDeliveryItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapOutboundDeliveryItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapOutboundDeliveryItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapOutboundDeliveryItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapOutboundDeliveryItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapOutboundDeliveryItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapOutboundDeliveryItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapOutboundDeliveryItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapOutboundDeliveryItemDatumHook registers your hook function for all future operations.
func AddSapOutboundDeliveryItemDatumHook(hookPoint boil.HookPoint, sapOutboundDeliveryItemDatumHook SapOutboundDeliveryItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapOutboundDeliveryItemDatumAfterSelectHooks = append(sapOutboundDeliveryItemDatumAfterSelectHooks, sapOutboundDeliveryItemDatumHook)
	case boil.BeforeInsertHook:
		sapOutboundDeliveryItemDatumBeforeInsertHooks = append(sapOutboundDeliveryItemDatumBeforeInsertHooks, sapOutboundDeliveryItemDatumHook)
	case boil.AfterInsertHook:
		sapOutboundDeliveryItemDatumAfterInsertHooks = append(sapOutboundDeliveryItemDatumAfterInsertHooks, sapOutboundDeliveryItemDatumHook)
	case boil.BeforeUpdateHook:
		sapOutboundDeliveryItemDatumBeforeUpdateHooks = append(sapOutboundDeliveryItemDatumBeforeUpdateHooks, sapOutboundDeliveryItemDatumHook)
	case boil.AfterUpdateHook:
		sapOutboundDeliveryItemDatumAfterUpdateHooks = append(sapOutboundDeliveryItemDatumAfterUpdateHooks, sapOutboundDeliveryItemDatumHook)
	case boil.BeforeDeleteHook:
		sapOutboundDeliveryItemDatumBeforeDeleteHooks = append(sapOutboundDeliveryItemDatumBeforeDeleteHooks, sapOutboundDeliveryItemDatumHook)
	case boil.AfterDeleteHook:
		sapOutboundDeliveryItemDatumAfterDeleteHooks = append(sapOutboundDeliveryItemDatumAfterDeleteHooks, sapOutboundDeliveryItemDatumHook)
	case boil.BeforeUpsertHook:
		sapOutboundDeliveryItemDatumBeforeUpsertHooks = append(sapOutboundDeliveryItemDatumBeforeUpsertHooks, sapOutboundDeliveryItemDatumHook)
	case boil.AfterUpsertHook:
		sapOutboundDeliveryItemDatumAfterUpsertHooks = append(sapOutboundDeliveryItemDatumAfterUpsertHooks, sapOutboundDeliveryItemDatumHook)
	}
}

// One returns a single sapOutboundDeliveryItemDatum record from the query.
func (q sapOutboundDeliveryItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapOutboundDeliveryItemDatum, error) {
	o := &SapOutboundDeliveryItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_outbound_delivery_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapOutboundDeliveryItemDatum records from the query.
func (q sapOutboundDeliveryItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapOutboundDeliveryItemDatumSlice, error) {
	var o []*SapOutboundDeliveryItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapOutboundDeliveryItemDatum slice")
	}

	if len(sapOutboundDeliveryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapOutboundDeliveryItemDatum records in the query.
func (q sapOutboundDeliveryItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_outbound_delivery_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapOutboundDeliveryItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_outbound_delivery_item_data exists")
	}

	return count > 0, nil
}

// DeliveryDocumentSapOutboundDeliveryHeaderDatum pointed to by the foreign key.
func (o *SapOutboundDeliveryItemDatum) DeliveryDocumentSapOutboundDeliveryHeaderDatum(mods ...qm.QueryMod) sapOutboundDeliveryHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DeliveryDocument` = ?", o.DeliveryDocument),
	}

	queryMods = append(queryMods, mods...)

	query := SapOutboundDeliveryHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_outbound_delivery_header_data`")

	return query
}

// LoadDeliveryDocumentSapOutboundDeliveryHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapOutboundDeliveryItemDatumL) LoadDeliveryDocumentSapOutboundDeliveryHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapOutboundDeliveryItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapOutboundDeliveryItemDatum
	var object *SapOutboundDeliveryItemDatum

	if singular {
		object = maybeSapOutboundDeliveryItemDatum.(*SapOutboundDeliveryItemDatum)
	} else {
		slice = *maybeSapOutboundDeliveryItemDatum.(*[]*SapOutboundDeliveryItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapOutboundDeliveryItemDatumR{}
		}
		args = append(args, object.DeliveryDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapOutboundDeliveryItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryDocument {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_outbound_delivery_header_data`),
		qm.WhereIn(`sap_outbound_delivery_header_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapOutboundDeliveryHeaderDatum")
	}

	var resultSlice []*SapOutboundDeliveryHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapOutboundDeliveryHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_outbound_delivery_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_outbound_delivery_header_data")
	}

	if len(sapOutboundDeliveryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryDocumentSapOutboundDeliveryHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapOutboundDeliveryHeaderDatumR{}
		}
		foreign.R.DeliveryDocumentSapOutboundDeliveryItemData = append(foreign.R.DeliveryDocumentSapOutboundDeliveryItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryDocument == foreign.DeliveryDocument {
				local.R.DeliveryDocumentSapOutboundDeliveryHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapOutboundDeliveryHeaderDatumR{}
				}
				foreign.R.DeliveryDocumentSapOutboundDeliveryItemData = append(foreign.R.DeliveryDocumentSapOutboundDeliveryItemData, local)
				break
			}
		}
	}

	return nil
}

// SetDeliveryDocumentSapOutboundDeliveryHeaderDatum of the sapOutboundDeliveryItemDatum to the related item.
// Sets o.R.DeliveryDocumentSapOutboundDeliveryHeaderDatum to related.
// Adds o to related.R.DeliveryDocumentSapOutboundDeliveryItemData.
func (o *SapOutboundDeliveryItemDatum) SetDeliveryDocumentSapOutboundDeliveryHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapOutboundDeliveryHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_outbound_delivery_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
		strmangle.WhereClause("`", "`", 0, sapOutboundDeliveryItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DeliveryDocument, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryDocument = related.DeliveryDocument
	if o.R == nil {
		o.R = &sapOutboundDeliveryItemDatumR{
			DeliveryDocumentSapOutboundDeliveryHeaderDatum: related,
		}
	} else {
		o.R.DeliveryDocumentSapOutboundDeliveryHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapOutboundDeliveryHeaderDatumR{
			DeliveryDocumentSapOutboundDeliveryItemData: SapOutboundDeliveryItemDatumSlice{o},
		}
	} else {
		related.R.DeliveryDocumentSapOutboundDeliveryItemData = append(related.R.DeliveryDocumentSapOutboundDeliveryItemData, o)
	}

	return nil
}

// SapOutboundDeliveryItemData retrieves all the records using an executor.
func SapOutboundDeliveryItemData(mods ...qm.QueryMod) sapOutboundDeliveryItemDatumQuery {
	mods = append(mods, qm.From("`sap_outbound_delivery_item_data`"))
	return sapOutboundDeliveryItemDatumQuery{NewQuery(mods...)}
}

// FindSapOutboundDeliveryItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapOutboundDeliveryItemDatum(ctx context.Context, exec boil.ContextExecutor, deliveryDocument string, deliveryDocumentItem string, selectCols ...string) (*SapOutboundDeliveryItemDatum, error) {
	sapOutboundDeliveryItemDatumObj := &SapOutboundDeliveryItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_outbound_delivery_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=?", sel,
	)

	q := queries.Raw(query, deliveryDocument, deliveryDocumentItem)

	err := q.Bind(ctx, exec, sapOutboundDeliveryItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_outbound_delivery_item_data")
	}

	if err = sapOutboundDeliveryItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapOutboundDeliveryItemDatumObj, err
	}

	return sapOutboundDeliveryItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapOutboundDeliveryItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_outbound_delivery_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapOutboundDeliveryItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapOutboundDeliveryItemDatumInsertCacheMut.RLock()
	cache, cached := sapOutboundDeliveryItemDatumInsertCache[key]
	sapOutboundDeliveryItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapOutboundDeliveryItemDatumAllColumns,
			sapOutboundDeliveryItemDatumColumnsWithDefault,
			sapOutboundDeliveryItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_outbound_delivery_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_outbound_delivery_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_outbound_delivery_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapOutboundDeliveryItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_outbound_delivery_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DeliveryDocument,
		o.DeliveryDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_outbound_delivery_item_data")
	}

CacheNoHooks:
	if !cached {
		sapOutboundDeliveryItemDatumInsertCacheMut.Lock()
		sapOutboundDeliveryItemDatumInsertCache[key] = cache
		sapOutboundDeliveryItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapOutboundDeliveryItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapOutboundDeliveryItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapOutboundDeliveryItemDatumUpdateCacheMut.RLock()
	cache, cached := sapOutboundDeliveryItemDatumUpdateCache[key]
	sapOutboundDeliveryItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapOutboundDeliveryItemDatumAllColumns,
			sapOutboundDeliveryItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_outbound_delivery_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_outbound_delivery_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapOutboundDeliveryItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, append(wl, sapOutboundDeliveryItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_outbound_delivery_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_outbound_delivery_item_data")
	}

	if !cached {
		sapOutboundDeliveryItemDatumUpdateCacheMut.Lock()
		sapOutboundDeliveryItemDatumUpdateCache[key] = cache
		sapOutboundDeliveryItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapOutboundDeliveryItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_outbound_delivery_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_outbound_delivery_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapOutboundDeliveryItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapOutboundDeliveryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_outbound_delivery_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapOutboundDeliveryItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapOutboundDeliveryItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapOutboundDeliveryItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapOutboundDeliveryItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapOutboundDeliveryItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_outbound_delivery_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapOutboundDeliveryItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapOutboundDeliveryItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapOutboundDeliveryItemDatumUpsertCacheMut.RLock()
	cache, cached := sapOutboundDeliveryItemDatumUpsertCache[key]
	sapOutboundDeliveryItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapOutboundDeliveryItemDatumAllColumns,
			sapOutboundDeliveryItemDatumColumnsWithDefault,
			sapOutboundDeliveryItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapOutboundDeliveryItemDatumAllColumns,
			sapOutboundDeliveryItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_outbound_delivery_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_outbound_delivery_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_outbound_delivery_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_outbound_delivery_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapOutboundDeliveryItemDatumType, sapOutboundDeliveryItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_outbound_delivery_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_outbound_delivery_item_data")
	}

CacheNoHooks:
	if !cached {
		sapOutboundDeliveryItemDatumUpsertCacheMut.Lock()
		sapOutboundDeliveryItemDatumUpsertCache[key] = cache
		sapOutboundDeliveryItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapOutboundDeliveryItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapOutboundDeliveryItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapOutboundDeliveryItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapOutboundDeliveryItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_outbound_delivery_item_data` WHERE `DeliveryDocument`=? AND `DeliveryDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_outbound_delivery_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_outbound_delivery_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapOutboundDeliveryItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapOutboundDeliveryItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_outbound_delivery_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_outbound_delivery_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapOutboundDeliveryItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapOutboundDeliveryItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapOutboundDeliveryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_outbound_delivery_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapOutboundDeliveryItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapOutboundDeliveryItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_outbound_delivery_item_data")
	}

	if len(sapOutboundDeliveryItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapOutboundDeliveryItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapOutboundDeliveryItemDatum(ctx, exec, o.DeliveryDocument, o.DeliveryDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapOutboundDeliveryItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapOutboundDeliveryItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapOutboundDeliveryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_outbound_delivery_item_data`.* FROM `sap_outbound_delivery_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapOutboundDeliveryItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapOutboundDeliveryItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapOutboundDeliveryItemDatumExists checks if the SapOutboundDeliveryItemDatum row exists.
func SapOutboundDeliveryItemDatumExists(ctx context.Context, exec boil.ContextExecutor, deliveryDocument string, deliveryDocumentItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_outbound_delivery_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deliveryDocument, deliveryDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, deliveryDocument, deliveryDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_outbound_delivery_item_data exists")
	}

	return exists, nil
}
