// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBankMasterBankDatum is an object representing the database table.
type SapBankMasterBankDatum struct {
	BankCountry         string      `boil:"BankCountry" json:"BankCountry" toml:"BankCountry" yaml:"BankCountry"`
	Bank                string      `boil:"Bank" json:"Bank" toml:"Bank" yaml:"Bank"`
	BankInternalID      null.String `boil:"BankInternalID" json:"BankInternalID,omitempty" toml:"BankInternalID" yaml:"BankInternalID,omitempty"`
	BankName            null.String `boil:"BankName" json:"BankName,omitempty" toml:"BankName" yaml:"BankName,omitempty"`
	BankBranch          null.String `boil:"BankBranch" json:"BankBranch,omitempty" toml:"BankBranch" yaml:"BankBranch,omitempty"`
	Region              null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	ShortStreetName     null.String `boil:"ShortStreetName" json:"ShortStreetName,omitempty" toml:"ShortStreetName" yaml:"ShortStreetName,omitempty"`
	ShortCityName       null.String `boil:"ShortCityName" json:"ShortCityName,omitempty" toml:"ShortCityName" yaml:"ShortCityName,omitempty"`
	SWIFTCode           null.String `boil:"SWIFTCode" json:"SWIFTCode,omitempty" toml:"SWIFTCode" yaml:"SWIFTCode,omitempty"`
	BankNetworkGrouping null.String `boil:"BankNetworkGrouping" json:"BankNetworkGrouping,omitempty" toml:"BankNetworkGrouping" yaml:"BankNetworkGrouping,omitempty"`
	IsMarkedForDeletion null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	BankCategory        null.String `boil:"BankCategory" json:"BankCategory,omitempty" toml:"BankCategory" yaml:"BankCategory,omitempty"`

	R *sapBankMasterBankDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBankMasterBankDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBankMasterBankDatumColumns = struct {
	BankCountry         string
	Bank                string
	BankInternalID      string
	BankName            string
	BankBranch          string
	Region              string
	ShortStreetName     string
	ShortCityName       string
	SWIFTCode           string
	BankNetworkGrouping string
	IsMarkedForDeletion string
	BankCategory        string
}{
	BankCountry:         "BankCountry",
	Bank:                "Bank",
	BankInternalID:      "BankInternalID",
	BankName:            "BankName",
	BankBranch:          "BankBranch",
	Region:              "Region",
	ShortStreetName:     "ShortStreetName",
	ShortCityName:       "ShortCityName",
	SWIFTCode:           "SWIFTCode",
	BankNetworkGrouping: "BankNetworkGrouping",
	IsMarkedForDeletion: "IsMarkedForDeletion",
	BankCategory:        "BankCategory",
}

var SapBankMasterBankDatumTableColumns = struct {
	BankCountry         string
	Bank                string
	BankInternalID      string
	BankName            string
	BankBranch          string
	Region              string
	ShortStreetName     string
	ShortCityName       string
	SWIFTCode           string
	BankNetworkGrouping string
	IsMarkedForDeletion string
	BankCategory        string
}{
	BankCountry:         "sap_bank_master_bank_data.BankCountry",
	Bank:                "sap_bank_master_bank_data.Bank",
	BankInternalID:      "sap_bank_master_bank_data.BankInternalID",
	BankName:            "sap_bank_master_bank_data.BankName",
	BankBranch:          "sap_bank_master_bank_data.BankBranch",
	Region:              "sap_bank_master_bank_data.Region",
	ShortStreetName:     "sap_bank_master_bank_data.ShortStreetName",
	ShortCityName:       "sap_bank_master_bank_data.ShortCityName",
	SWIFTCode:           "sap_bank_master_bank_data.SWIFTCode",
	BankNetworkGrouping: "sap_bank_master_bank_data.BankNetworkGrouping",
	IsMarkedForDeletion: "sap_bank_master_bank_data.IsMarkedForDeletion",
	BankCategory:        "sap_bank_master_bank_data.BankCategory",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SapBankMasterBankDatumWhere = struct {
	BankCountry         whereHelperstring
	Bank                whereHelperstring
	BankInternalID      whereHelpernull_String
	BankName            whereHelpernull_String
	BankBranch          whereHelpernull_String
	Region              whereHelpernull_String
	ShortStreetName     whereHelpernull_String
	ShortCityName       whereHelpernull_String
	SWIFTCode           whereHelpernull_String
	BankNetworkGrouping whereHelpernull_String
	IsMarkedForDeletion whereHelpernull_Bool
	BankCategory        whereHelpernull_String
}{
	BankCountry:         whereHelperstring{field: "`sap_bank_master_bank_data`.`BankCountry`"},
	Bank:                whereHelperstring{field: "`sap_bank_master_bank_data`.`Bank`"},
	BankInternalID:      whereHelpernull_String{field: "`sap_bank_master_bank_data`.`BankInternalID`"},
	BankName:            whereHelpernull_String{field: "`sap_bank_master_bank_data`.`BankName`"},
	BankBranch:          whereHelpernull_String{field: "`sap_bank_master_bank_data`.`BankBranch`"},
	Region:              whereHelpernull_String{field: "`sap_bank_master_bank_data`.`Region`"},
	ShortStreetName:     whereHelpernull_String{field: "`sap_bank_master_bank_data`.`ShortStreetName`"},
	ShortCityName:       whereHelpernull_String{field: "`sap_bank_master_bank_data`.`ShortCityName`"},
	SWIFTCode:           whereHelpernull_String{field: "`sap_bank_master_bank_data`.`SWIFTCode`"},
	BankNetworkGrouping: whereHelpernull_String{field: "`sap_bank_master_bank_data`.`BankNetworkGrouping`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`sap_bank_master_bank_data`.`IsMarkedForDeletion`"},
	BankCategory:        whereHelpernull_String{field: "`sap_bank_master_bank_data`.`BankCategory`"},
}

// SapBankMasterBankDatumRels is where relationship names are stored.
var SapBankMasterBankDatumRels = struct {
}{}

// sapBankMasterBankDatumR is where relationships are stored.
type sapBankMasterBankDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapBankMasterBankDatumR) NewStruct() *sapBankMasterBankDatumR {
	return &sapBankMasterBankDatumR{}
}

// sapBankMasterBankDatumL is where Load methods for each relationship are stored.
type sapBankMasterBankDatumL struct{}

var (
	sapBankMasterBankDatumAllColumns            = []string{"BankCountry", "Bank", "BankInternalID", "BankName", "BankBranch", "Region", "ShortStreetName", "ShortCityName", "SWIFTCode", "BankNetworkGrouping", "IsMarkedForDeletion", "BankCategory"}
	sapBankMasterBankDatumColumnsWithoutDefault = []string{"BankCountry", "Bank", "BankInternalID", "BankName", "BankBranch", "Region", "ShortStreetName", "ShortCityName", "SWIFTCode", "BankNetworkGrouping", "IsMarkedForDeletion", "BankCategory"}
	sapBankMasterBankDatumColumnsWithDefault    = []string{}
	sapBankMasterBankDatumPrimaryKeyColumns     = []string{"BankCountry", "Bank"}
	sapBankMasterBankDatumGeneratedColumns      = []string{}
)

type (
	// SapBankMasterBankDatumSlice is an alias for a slice of pointers to SapBankMasterBankDatum.
	// This should almost always be used instead of []SapBankMasterBankDatum.
	SapBankMasterBankDatumSlice []*SapBankMasterBankDatum
	// SapBankMasterBankDatumHook is the signature for custom SapBankMasterBankDatum hook methods
	SapBankMasterBankDatumHook func(context.Context, boil.ContextExecutor, *SapBankMasterBankDatum) error

	sapBankMasterBankDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBankMasterBankDatumType                 = reflect.TypeOf(&SapBankMasterBankDatum{})
	sapBankMasterBankDatumMapping              = queries.MakeStructMapping(sapBankMasterBankDatumType)
	sapBankMasterBankDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, sapBankMasterBankDatumPrimaryKeyColumns)
	sapBankMasterBankDatumInsertCacheMut       sync.RWMutex
	sapBankMasterBankDatumInsertCache          = make(map[string]insertCache)
	sapBankMasterBankDatumUpdateCacheMut       sync.RWMutex
	sapBankMasterBankDatumUpdateCache          = make(map[string]updateCache)
	sapBankMasterBankDatumUpsertCacheMut       sync.RWMutex
	sapBankMasterBankDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBankMasterBankDatumAfterSelectHooks []SapBankMasterBankDatumHook

var sapBankMasterBankDatumBeforeInsertHooks []SapBankMasterBankDatumHook
var sapBankMasterBankDatumAfterInsertHooks []SapBankMasterBankDatumHook

var sapBankMasterBankDatumBeforeUpdateHooks []SapBankMasterBankDatumHook
var sapBankMasterBankDatumAfterUpdateHooks []SapBankMasterBankDatumHook

var sapBankMasterBankDatumBeforeDeleteHooks []SapBankMasterBankDatumHook
var sapBankMasterBankDatumAfterDeleteHooks []SapBankMasterBankDatumHook

var sapBankMasterBankDatumBeforeUpsertHooks []SapBankMasterBankDatumHook
var sapBankMasterBankDatumAfterUpsertHooks []SapBankMasterBankDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBankMasterBankDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBankMasterBankDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBankMasterBankDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBankMasterBankDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBankMasterBankDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBankMasterBankDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBankMasterBankDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBankMasterBankDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBankMasterBankDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBankMasterBankDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBankMasterBankDatumHook registers your hook function for all future operations.
func AddSapBankMasterBankDatumHook(hookPoint boil.HookPoint, sapBankMasterBankDatumHook SapBankMasterBankDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBankMasterBankDatumAfterSelectHooks = append(sapBankMasterBankDatumAfterSelectHooks, sapBankMasterBankDatumHook)
	case boil.BeforeInsertHook:
		sapBankMasterBankDatumBeforeInsertHooks = append(sapBankMasterBankDatumBeforeInsertHooks, sapBankMasterBankDatumHook)
	case boil.AfterInsertHook:
		sapBankMasterBankDatumAfterInsertHooks = append(sapBankMasterBankDatumAfterInsertHooks, sapBankMasterBankDatumHook)
	case boil.BeforeUpdateHook:
		sapBankMasterBankDatumBeforeUpdateHooks = append(sapBankMasterBankDatumBeforeUpdateHooks, sapBankMasterBankDatumHook)
	case boil.AfterUpdateHook:
		sapBankMasterBankDatumAfterUpdateHooks = append(sapBankMasterBankDatumAfterUpdateHooks, sapBankMasterBankDatumHook)
	case boil.BeforeDeleteHook:
		sapBankMasterBankDatumBeforeDeleteHooks = append(sapBankMasterBankDatumBeforeDeleteHooks, sapBankMasterBankDatumHook)
	case boil.AfterDeleteHook:
		sapBankMasterBankDatumAfterDeleteHooks = append(sapBankMasterBankDatumAfterDeleteHooks, sapBankMasterBankDatumHook)
	case boil.BeforeUpsertHook:
		sapBankMasterBankDatumBeforeUpsertHooks = append(sapBankMasterBankDatumBeforeUpsertHooks, sapBankMasterBankDatumHook)
	case boil.AfterUpsertHook:
		sapBankMasterBankDatumAfterUpsertHooks = append(sapBankMasterBankDatumAfterUpsertHooks, sapBankMasterBankDatumHook)
	}
}

// One returns a single sapBankMasterBankDatum record from the query.
func (q sapBankMasterBankDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBankMasterBankDatum, error) {
	o := &SapBankMasterBankDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_bank_master_bank_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBankMasterBankDatum records from the query.
func (q sapBankMasterBankDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBankMasterBankDatumSlice, error) {
	var o []*SapBankMasterBankDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBankMasterBankDatum slice")
	}

	if len(sapBankMasterBankDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBankMasterBankDatum records in the query.
func (q sapBankMasterBankDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_bank_master_bank_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBankMasterBankDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_bank_master_bank_data exists")
	}

	return count > 0, nil
}

// SapBankMasterBankData retrieves all the records using an executor.
func SapBankMasterBankData(mods ...qm.QueryMod) sapBankMasterBankDatumQuery {
	mods = append(mods, qm.From("`sap_bank_master_bank_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_bank_master_bank_data`.*"})
	}

	return sapBankMasterBankDatumQuery{q}
}

// FindSapBankMasterBankDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBankMasterBankDatum(ctx context.Context, exec boil.ContextExecutor, bankCountry string, bank string, selectCols ...string) (*SapBankMasterBankDatum, error) {
	sapBankMasterBankDatumObj := &SapBankMasterBankDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_bank_master_bank_data` where `BankCountry`=? AND `Bank`=?", sel,
	)

	q := queries.Raw(query, bankCountry, bank)

	err := q.Bind(ctx, exec, sapBankMasterBankDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_bank_master_bank_data")
	}

	if err = sapBankMasterBankDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBankMasterBankDatumObj, err
	}

	return sapBankMasterBankDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBankMasterBankDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_bank_master_bank_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBankMasterBankDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBankMasterBankDatumInsertCacheMut.RLock()
	cache, cached := sapBankMasterBankDatumInsertCache[key]
	sapBankMasterBankDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBankMasterBankDatumAllColumns,
			sapBankMasterBankDatumColumnsWithDefault,
			sapBankMasterBankDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_bank_master_bank_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_bank_master_bank_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_bank_master_bank_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBankMasterBankDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_bank_master_bank_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BankCountry,
		o.Bank,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_bank_master_bank_data")
	}

CacheNoHooks:
	if !cached {
		sapBankMasterBankDatumInsertCacheMut.Lock()
		sapBankMasterBankDatumInsertCache[key] = cache
		sapBankMasterBankDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBankMasterBankDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBankMasterBankDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBankMasterBankDatumUpdateCacheMut.RLock()
	cache, cached := sapBankMasterBankDatumUpdateCache[key]
	sapBankMasterBankDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBankMasterBankDatumAllColumns,
			sapBankMasterBankDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_bank_master_bank_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_bank_master_bank_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBankMasterBankDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, append(wl, sapBankMasterBankDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_bank_master_bank_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_bank_master_bank_data")
	}

	if !cached {
		sapBankMasterBankDatumUpdateCacheMut.Lock()
		sapBankMasterBankDatumUpdateCache[key] = cache
		sapBankMasterBankDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBankMasterBankDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_bank_master_bank_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_bank_master_bank_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBankMasterBankDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBankMasterBankDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_bank_master_bank_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBankMasterBankDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBankMasterBankDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBankMasterBankDatum")
	}
	return rowsAff, nil
}

var mySQLSapBankMasterBankDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBankMasterBankDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_bank_master_bank_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBankMasterBankDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBankMasterBankDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBankMasterBankDatumUpsertCacheMut.RLock()
	cache, cached := sapBankMasterBankDatumUpsertCache[key]
	sapBankMasterBankDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBankMasterBankDatumAllColumns,
			sapBankMasterBankDatumColumnsWithDefault,
			sapBankMasterBankDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBankMasterBankDatumAllColumns,
			sapBankMasterBankDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_bank_master_bank_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_bank_master_bank_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_bank_master_bank_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_bank_master_bank_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBankMasterBankDatumType, sapBankMasterBankDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_bank_master_bank_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_bank_master_bank_data")
	}

CacheNoHooks:
	if !cached {
		sapBankMasterBankDatumUpsertCacheMut.Lock()
		sapBankMasterBankDatumUpsertCache[key] = cache
		sapBankMasterBankDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBankMasterBankDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBankMasterBankDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBankMasterBankDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBankMasterBankDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_bank_master_bank_data` WHERE `BankCountry`=? AND `Bank`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_bank_master_bank_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_bank_master_bank_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBankMasterBankDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBankMasterBankDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_bank_master_bank_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_bank_master_bank_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBankMasterBankDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBankMasterBankDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBankMasterBankDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_bank_master_bank_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBankMasterBankDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBankMasterBankDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_bank_master_bank_data")
	}

	if len(sapBankMasterBankDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBankMasterBankDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBankMasterBankDatum(ctx, exec, o.BankCountry, o.Bank)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBankMasterBankDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBankMasterBankDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBankMasterBankDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_bank_master_bank_data`.* FROM `sap_bank_master_bank_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBankMasterBankDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBankMasterBankDatumSlice")
	}

	*o = slice

	return nil
}

// SapBankMasterBankDatumExists checks if the SapBankMasterBankDatum row exists.
func SapBankMasterBankDatumExists(ctx context.Context, exec boil.ContextExecutor, bankCountry string, bank string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_bank_master_bank_data` where `BankCountry`=? AND `Bank`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bankCountry, bank)
	}
	row := exec.QueryRowContext(ctx, sql, bankCountry, bank)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_bank_master_bank_data exists")
	}

	return exists, nil
}
