// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapFunctionalLocationHeaderDatum is an object representing the database table.
type SapFunctionalLocationHeaderDatum struct {
	FunctionalLocation             string      `boil:"FunctionalLocation" json:"FunctionalLocation" toml:"FunctionalLocation" yaml:"FunctionalLocation"`
	FunctionalLocationLabelName    null.String `boil:"FunctionalLocationLabelName" json:"FunctionalLocationLabelName,omitempty" toml:"FunctionalLocationLabelName" yaml:"FunctionalLocationLabelName,omitempty"`
	FunctionalLocationName         null.String `boil:"FunctionalLocationName" json:"FunctionalLocationName,omitempty" toml:"FunctionalLocationName" yaml:"FunctionalLocationName,omitempty"`
	FuncLocationStructure          null.String `boil:"FuncLocationStructure" json:"FuncLocationStructure,omitempty" toml:"FuncLocationStructure" yaml:"FuncLocationStructure,omitempty"`
	FunctionalLocationCategory     null.String `boil:"FunctionalLocationCategory" json:"FunctionalLocationCategory,omitempty" toml:"FunctionalLocationCategory" yaml:"FunctionalLocationCategory,omitempty"`
	SuperiorFunctionalLocation     null.String `boil:"SuperiorFunctionalLocation" json:"SuperiorFunctionalLocation,omitempty" toml:"SuperiorFunctionalLocation" yaml:"SuperiorFunctionalLocation,omitempty"`
	SuperiorFuncnlLocLabelName     null.String `boil:"SuperiorFuncnlLocLabelName" json:"SuperiorFuncnlLocLabelName,omitempty" toml:"SuperiorFuncnlLocLabelName" yaml:"SuperiorFuncnlLocLabelName,omitempty"`
	TechnicalObjectType            null.String `boil:"TechnicalObjectType" json:"TechnicalObjectType,omitempty" toml:"TechnicalObjectType" yaml:"TechnicalObjectType,omitempty"`
	GrossWeight                    null.String `boil:"GrossWeight" json:"GrossWeight,omitempty" toml:"GrossWeight" yaml:"GrossWeight,omitempty"`
	GrossWeightUnit                null.String `boil:"GrossWeightUnit" json:"GrossWeightUnit,omitempty" toml:"GrossWeightUnit" yaml:"GrossWeightUnit,omitempty"`
	OperationStartDate             null.String `boil:"OperationStartDate" json:"OperationStartDate,omitempty" toml:"OperationStartDate" yaml:"OperationStartDate,omitempty"`
	InventoryNumber                null.String `boil:"InventoryNumber" json:"InventoryNumber,omitempty" toml:"InventoryNumber" yaml:"InventoryNumber,omitempty"`
	AcquisitionValue               null.String `boil:"AcquisitionValue" json:"AcquisitionValue,omitempty" toml:"AcquisitionValue" yaml:"AcquisitionValue,omitempty"`
	Currency                       null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	AcquisitionDate                null.String `boil:"AcquisitionDate" json:"AcquisitionDate,omitempty" toml:"AcquisitionDate" yaml:"AcquisitionDate,omitempty"`
	AssetManufacturerName          null.String `boil:"AssetManufacturerName" json:"AssetManufacturerName,omitempty" toml:"AssetManufacturerName" yaml:"AssetManufacturerName,omitempty"`
	ManufacturerPartNmbr           null.String `boil:"ManufacturerPartNmbr" json:"ManufacturerPartNmbr,omitempty" toml:"ManufacturerPartNmbr" yaml:"ManufacturerPartNmbr,omitempty"`
	ManufacturerCountry            null.String `boil:"ManufacturerCountry" json:"ManufacturerCountry,omitempty" toml:"ManufacturerCountry" yaml:"ManufacturerCountry,omitempty"`
	ManufacturerPartTypeName       null.String `boil:"ManufacturerPartTypeName" json:"ManufacturerPartTypeName,omitempty" toml:"ManufacturerPartTypeName" yaml:"ManufacturerPartTypeName,omitempty"`
	ConstructionMonth              null.String `boil:"ConstructionMonth" json:"ConstructionMonth,omitempty" toml:"ConstructionMonth" yaml:"ConstructionMonth,omitempty"`
	ConstructionYear               null.String `boil:"ConstructionYear" json:"ConstructionYear,omitempty" toml:"ConstructionYear" yaml:"ConstructionYear,omitempty"`
	ManufacturerSerialNumber       null.String `boil:"ManufacturerSerialNumber" json:"ManufacturerSerialNumber,omitempty" toml:"ManufacturerSerialNumber" yaml:"ManufacturerSerialNumber,omitempty"`
	MaintenancePlant               null.String `boil:"MaintenancePlant" json:"MaintenancePlant,omitempty" toml:"MaintenancePlant" yaml:"MaintenancePlant,omitempty"`
	AssetLocation                  null.String `boil:"AssetLocation" json:"AssetLocation,omitempty" toml:"AssetLocation" yaml:"AssetLocation,omitempty"`
	AssetRoom                      null.String `boil:"AssetRoom" json:"AssetRoom,omitempty" toml:"AssetRoom" yaml:"AssetRoom,omitempty"`
	PlantSection                   null.String `boil:"PlantSection" json:"PlantSection,omitempty" toml:"PlantSection" yaml:"PlantSection,omitempty"`
	WorkCenter                     null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	WorkCenterInternalID           null.String `boil:"WorkCenterInternalID" json:"WorkCenterInternalID,omitempty" toml:"WorkCenterInternalID" yaml:"WorkCenterInternalID,omitempty"`
	WorkCenterPlant                null.String `boil:"WorkCenterPlant" json:"WorkCenterPlant,omitempty" toml:"WorkCenterPlant" yaml:"WorkCenterPlant,omitempty"`
	ABCIndicator                   null.String `boil:"ABCIndicator" json:"ABCIndicator,omitempty" toml:"ABCIndicator" yaml:"ABCIndicator,omitempty"`
	MaintObjectFreeDefinedAttrib   null.String `boil:"MaintObjectFreeDefinedAttrib" json:"MaintObjectFreeDefinedAttrib,omitempty" toml:"MaintObjectFreeDefinedAttrib" yaml:"MaintObjectFreeDefinedAttrib,omitempty"`
	FormOfAddress                  null.String `boil:"FormOfAddress" json:"FormOfAddress,omitempty" toml:"FormOfAddress" yaml:"FormOfAddress,omitempty"`
	BusinessPartnerName1           null.String `boil:"BusinessPartnerName1" json:"BusinessPartnerName1,omitempty" toml:"BusinessPartnerName1" yaml:"BusinessPartnerName1,omitempty"`
	BusinessPartnerName2           null.String `boil:"BusinessPartnerName2" json:"BusinessPartnerName2,omitempty" toml:"BusinessPartnerName2" yaml:"BusinessPartnerName2,omitempty"`
	CityName                       null.String `boil:"CityName" json:"CityName,omitempty" toml:"CityName" yaml:"CityName,omitempty"`
	PostalCode                     null.String `boil:"PostalCode" json:"PostalCode,omitempty" toml:"PostalCode" yaml:"PostalCode,omitempty"`
	StreetName                     null.String `boil:"StreetName" json:"StreetName,omitempty" toml:"StreetName" yaml:"StreetName,omitempty"`
	Region                         null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	Country                        null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	PhoneNumber                    null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	FaxNumber                      null.String `boil:"FaxNumber" json:"FaxNumber,omitempty" toml:"FaxNumber" yaml:"FaxNumber,omitempty"`
	CompanyCode                    null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	BusinessArea                   null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	MasterFixedAsset               null.String `boil:"MasterFixedAsset" json:"MasterFixedAsset,omitempty" toml:"MasterFixedAsset" yaml:"MasterFixedAsset,omitempty"`
	FixedAsset                     null.String `boil:"FixedAsset" json:"FixedAsset,omitempty" toml:"FixedAsset" yaml:"FixedAsset,omitempty"`
	CostCenter                     null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	ControllingArea                null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	WBSElementExternalID           null.String `boil:"WBSElementExternalID" json:"WBSElementExternalID,omitempty" toml:"WBSElementExternalID" yaml:"WBSElementExternalID,omitempty"`
	SettlementOrder                null.String `boil:"SettlementOrder" json:"SettlementOrder,omitempty" toml:"SettlementOrder" yaml:"SettlementOrder,omitempty"`
	ConstructionMaterial           null.String `boil:"ConstructionMaterial" json:"ConstructionMaterial,omitempty" toml:"ConstructionMaterial" yaml:"ConstructionMaterial,omitempty"`
	MaintenancePlannerGroup        null.String `boil:"MaintenancePlannerGroup" json:"MaintenancePlannerGroup,omitempty" toml:"MaintenancePlannerGroup" yaml:"MaintenancePlannerGroup,omitempty"`
	MaintenancePlanningPlant       null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	MainWorkCenterPlant            null.String `boil:"MainWorkCenterPlant" json:"MainWorkCenterPlant,omitempty" toml:"MainWorkCenterPlant" yaml:"MainWorkCenterPlant,omitempty"`
	MainWorkCenter                 null.String `boil:"MainWorkCenter" json:"MainWorkCenter,omitempty" toml:"MainWorkCenter" yaml:"MainWorkCenter,omitempty"`
	MainWorkCenterInternalID       null.String `boil:"MainWorkCenterInternalID" json:"MainWorkCenterInternalID,omitempty" toml:"MainWorkCenterInternalID" yaml:"MainWorkCenterInternalID,omitempty"`
	CatalogProfile                 null.String `boil:"CatalogProfile" json:"CatalogProfile,omitempty" toml:"CatalogProfile" yaml:"CatalogProfile,omitempty"`
	EquipmentInstallationIsAllowed null.Bool   `boil:"EquipmentInstallationIsAllowed" json:"EquipmentInstallationIsAllowed,omitempty" toml:"EquipmentInstallationIsAllowed" yaml:"EquipmentInstallationIsAllowed,omitempty"`
	OnePieceOfEquipmentIsAllowed   null.Bool   `boil:"OnePieceOfEquipmentIsAllowed" json:"OnePieceOfEquipmentIsAllowed,omitempty" toml:"OnePieceOfEquipmentIsAllowed" yaml:"OnePieceOfEquipmentIsAllowed,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	OrganizationDivision           null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	FunctionalLocationHasEquipment null.String `boil:"FunctionalLocationHasEquipment" json:"FunctionalLocationHasEquipment,omitempty" toml:"FunctionalLocationHasEquipment" yaml:"FunctionalLocationHasEquipment,omitempty"`
	FuncnlLocHasSubOrdinateFuncLoc null.String `boil:"FuncnlLocHasSubOrdinateFuncLoc" json:"FuncnlLocHasSubOrdinateFuncLoc,omitempty" toml:"FuncnlLocHasSubOrdinateFuncLoc" yaml:"FuncnlLocHasSubOrdinateFuncLoc,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	FuncnlLocIsMarkedForDeletion   null.Bool   `boil:"FuncnlLocIsMarkedForDeletion" json:"FuncnlLocIsMarkedForDeletion,omitempty" toml:"FuncnlLocIsMarkedForDeletion" yaml:"FuncnlLocIsMarkedForDeletion,omitempty"`
	FuncnlLocIsDeleted             null.Bool   `boil:"FuncnlLocIsDeleted" json:"FuncnlLocIsDeleted,omitempty" toml:"FuncnlLocIsDeleted" yaml:"FuncnlLocIsDeleted,omitempty"`
	FunctionalLocationIsActive     null.Bool   `boil:"FunctionalLocationIsActive" json:"FunctionalLocationIsActive,omitempty" toml:"FunctionalLocationIsActive" yaml:"FunctionalLocationIsActive,omitempty"`
	FuncnlLocIsDeactivated         null.Bool   `boil:"FuncnlLocIsDeactivated" json:"FuncnlLocIsDeactivated,omitempty" toml:"FuncnlLocIsDeactivated" yaml:"FuncnlLocIsDeactivated,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`

	R *sapFunctionalLocationHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapFunctionalLocationHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapFunctionalLocationHeaderDatumColumns = struct {
	FunctionalLocation             string
	FunctionalLocationLabelName    string
	FunctionalLocationName         string
	FuncLocationStructure          string
	FunctionalLocationCategory     string
	SuperiorFunctionalLocation     string
	SuperiorFuncnlLocLabelName     string
	TechnicalObjectType            string
	GrossWeight                    string
	GrossWeightUnit                string
	OperationStartDate             string
	InventoryNumber                string
	AcquisitionValue               string
	Currency                       string
	AcquisitionDate                string
	AssetManufacturerName          string
	ManufacturerPartNmbr           string
	ManufacturerCountry            string
	ManufacturerPartTypeName       string
	ConstructionMonth              string
	ConstructionYear               string
	ManufacturerSerialNumber       string
	MaintenancePlant               string
	AssetLocation                  string
	AssetRoom                      string
	PlantSection                   string
	WorkCenter                     string
	WorkCenterInternalID           string
	WorkCenterPlant                string
	ABCIndicator                   string
	MaintObjectFreeDefinedAttrib   string
	FormOfAddress                  string
	BusinessPartnerName1           string
	BusinessPartnerName2           string
	CityName                       string
	PostalCode                     string
	StreetName                     string
	Region                         string
	Country                        string
	PhoneNumber                    string
	FaxNumber                      string
	CompanyCode                    string
	BusinessArea                   string
	MasterFixedAsset               string
	FixedAsset                     string
	CostCenter                     string
	ControllingArea                string
	WBSElementExternalID           string
	SettlementOrder                string
	ConstructionMaterial           string
	MaintenancePlannerGroup        string
	MaintenancePlanningPlant       string
	MainWorkCenterPlant            string
	MainWorkCenter                 string
	MainWorkCenterInternalID       string
	CatalogProfile                 string
	EquipmentInstallationIsAllowed string
	OnePieceOfEquipmentIsAllowed   string
	SalesOrganization              string
	DistributionChannel            string
	SalesOffice                    string
	OrganizationDivision           string
	SalesGroup                     string
	FunctionalLocationHasEquipment string
	FuncnlLocHasSubOrdinateFuncLoc string
	LastChangeDateTime             string
	FuncnlLocIsMarkedForDeletion   string
	FuncnlLocIsDeleted             string
	FunctionalLocationIsActive     string
	FuncnlLocIsDeactivated         string
	CreationDate                   string
}{
	FunctionalLocation:             "FunctionalLocation",
	FunctionalLocationLabelName:    "FunctionalLocationLabelName",
	FunctionalLocationName:         "FunctionalLocationName",
	FuncLocationStructure:          "FuncLocationStructure",
	FunctionalLocationCategory:     "FunctionalLocationCategory",
	SuperiorFunctionalLocation:     "SuperiorFunctionalLocation",
	SuperiorFuncnlLocLabelName:     "SuperiorFuncnlLocLabelName",
	TechnicalObjectType:            "TechnicalObjectType",
	GrossWeight:                    "GrossWeight",
	GrossWeightUnit:                "GrossWeightUnit",
	OperationStartDate:             "OperationStartDate",
	InventoryNumber:                "InventoryNumber",
	AcquisitionValue:               "AcquisitionValue",
	Currency:                       "Currency",
	AcquisitionDate:                "AcquisitionDate",
	AssetManufacturerName:          "AssetManufacturerName",
	ManufacturerPartNmbr:           "ManufacturerPartNmbr",
	ManufacturerCountry:            "ManufacturerCountry",
	ManufacturerPartTypeName:       "ManufacturerPartTypeName",
	ConstructionMonth:              "ConstructionMonth",
	ConstructionYear:               "ConstructionYear",
	ManufacturerSerialNumber:       "ManufacturerSerialNumber",
	MaintenancePlant:               "MaintenancePlant",
	AssetLocation:                  "AssetLocation",
	AssetRoom:                      "AssetRoom",
	PlantSection:                   "PlantSection",
	WorkCenter:                     "WorkCenter",
	WorkCenterInternalID:           "WorkCenterInternalID",
	WorkCenterPlant:                "WorkCenterPlant",
	ABCIndicator:                   "ABCIndicator",
	MaintObjectFreeDefinedAttrib:   "MaintObjectFreeDefinedAttrib",
	FormOfAddress:                  "FormOfAddress",
	BusinessPartnerName1:           "BusinessPartnerName1",
	BusinessPartnerName2:           "BusinessPartnerName2",
	CityName:                       "CityName",
	PostalCode:                     "PostalCode",
	StreetName:                     "StreetName",
	Region:                         "Region",
	Country:                        "Country",
	PhoneNumber:                    "PhoneNumber",
	FaxNumber:                      "FaxNumber",
	CompanyCode:                    "CompanyCode",
	BusinessArea:                   "BusinessArea",
	MasterFixedAsset:               "MasterFixedAsset",
	FixedAsset:                     "FixedAsset",
	CostCenter:                     "CostCenter",
	ControllingArea:                "ControllingArea",
	WBSElementExternalID:           "WBSElementExternalID",
	SettlementOrder:                "SettlementOrder",
	ConstructionMaterial:           "ConstructionMaterial",
	MaintenancePlannerGroup:        "MaintenancePlannerGroup",
	MaintenancePlanningPlant:       "MaintenancePlanningPlant",
	MainWorkCenterPlant:            "MainWorkCenterPlant",
	MainWorkCenter:                 "MainWorkCenter",
	MainWorkCenterInternalID:       "MainWorkCenterInternalID",
	CatalogProfile:                 "CatalogProfile",
	EquipmentInstallationIsAllowed: "EquipmentInstallationIsAllowed",
	OnePieceOfEquipmentIsAllowed:   "OnePieceOfEquipmentIsAllowed",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	SalesOffice:                    "SalesOffice",
	OrganizationDivision:           "OrganizationDivision",
	SalesGroup:                     "SalesGroup",
	FunctionalLocationHasEquipment: "FunctionalLocationHasEquipment",
	FuncnlLocHasSubOrdinateFuncLoc: "FuncnlLocHasSubOrdinateFuncLoc",
	LastChangeDateTime:             "LastChangeDateTime",
	FuncnlLocIsMarkedForDeletion:   "FuncnlLocIsMarkedForDeletion",
	FuncnlLocIsDeleted:             "FuncnlLocIsDeleted",
	FunctionalLocationIsActive:     "FunctionalLocationIsActive",
	FuncnlLocIsDeactivated:         "FuncnlLocIsDeactivated",
	CreationDate:                   "CreationDate",
}

var SapFunctionalLocationHeaderDatumTableColumns = struct {
	FunctionalLocation             string
	FunctionalLocationLabelName    string
	FunctionalLocationName         string
	FuncLocationStructure          string
	FunctionalLocationCategory     string
	SuperiorFunctionalLocation     string
	SuperiorFuncnlLocLabelName     string
	TechnicalObjectType            string
	GrossWeight                    string
	GrossWeightUnit                string
	OperationStartDate             string
	InventoryNumber                string
	AcquisitionValue               string
	Currency                       string
	AcquisitionDate                string
	AssetManufacturerName          string
	ManufacturerPartNmbr           string
	ManufacturerCountry            string
	ManufacturerPartTypeName       string
	ConstructionMonth              string
	ConstructionYear               string
	ManufacturerSerialNumber       string
	MaintenancePlant               string
	AssetLocation                  string
	AssetRoom                      string
	PlantSection                   string
	WorkCenter                     string
	WorkCenterInternalID           string
	WorkCenterPlant                string
	ABCIndicator                   string
	MaintObjectFreeDefinedAttrib   string
	FormOfAddress                  string
	BusinessPartnerName1           string
	BusinessPartnerName2           string
	CityName                       string
	PostalCode                     string
	StreetName                     string
	Region                         string
	Country                        string
	PhoneNumber                    string
	FaxNumber                      string
	CompanyCode                    string
	BusinessArea                   string
	MasterFixedAsset               string
	FixedAsset                     string
	CostCenter                     string
	ControllingArea                string
	WBSElementExternalID           string
	SettlementOrder                string
	ConstructionMaterial           string
	MaintenancePlannerGroup        string
	MaintenancePlanningPlant       string
	MainWorkCenterPlant            string
	MainWorkCenter                 string
	MainWorkCenterInternalID       string
	CatalogProfile                 string
	EquipmentInstallationIsAllowed string
	OnePieceOfEquipmentIsAllowed   string
	SalesOrganization              string
	DistributionChannel            string
	SalesOffice                    string
	OrganizationDivision           string
	SalesGroup                     string
	FunctionalLocationHasEquipment string
	FuncnlLocHasSubOrdinateFuncLoc string
	LastChangeDateTime             string
	FuncnlLocIsMarkedForDeletion   string
	FuncnlLocIsDeleted             string
	FunctionalLocationIsActive     string
	FuncnlLocIsDeactivated         string
	CreationDate                   string
}{
	FunctionalLocation:             "sap_functional_location_header_data.FunctionalLocation",
	FunctionalLocationLabelName:    "sap_functional_location_header_data.FunctionalLocationLabelName",
	FunctionalLocationName:         "sap_functional_location_header_data.FunctionalLocationName",
	FuncLocationStructure:          "sap_functional_location_header_data.FuncLocationStructure",
	FunctionalLocationCategory:     "sap_functional_location_header_data.FunctionalLocationCategory",
	SuperiorFunctionalLocation:     "sap_functional_location_header_data.SuperiorFunctionalLocation",
	SuperiorFuncnlLocLabelName:     "sap_functional_location_header_data.SuperiorFuncnlLocLabelName",
	TechnicalObjectType:            "sap_functional_location_header_data.TechnicalObjectType",
	GrossWeight:                    "sap_functional_location_header_data.GrossWeight",
	GrossWeightUnit:                "sap_functional_location_header_data.GrossWeightUnit",
	OperationStartDate:             "sap_functional_location_header_data.OperationStartDate",
	InventoryNumber:                "sap_functional_location_header_data.InventoryNumber",
	AcquisitionValue:               "sap_functional_location_header_data.AcquisitionValue",
	Currency:                       "sap_functional_location_header_data.Currency",
	AcquisitionDate:                "sap_functional_location_header_data.AcquisitionDate",
	AssetManufacturerName:          "sap_functional_location_header_data.AssetManufacturerName",
	ManufacturerPartNmbr:           "sap_functional_location_header_data.ManufacturerPartNmbr",
	ManufacturerCountry:            "sap_functional_location_header_data.ManufacturerCountry",
	ManufacturerPartTypeName:       "sap_functional_location_header_data.ManufacturerPartTypeName",
	ConstructionMonth:              "sap_functional_location_header_data.ConstructionMonth",
	ConstructionYear:               "sap_functional_location_header_data.ConstructionYear",
	ManufacturerSerialNumber:       "sap_functional_location_header_data.ManufacturerSerialNumber",
	MaintenancePlant:               "sap_functional_location_header_data.MaintenancePlant",
	AssetLocation:                  "sap_functional_location_header_data.AssetLocation",
	AssetRoom:                      "sap_functional_location_header_data.AssetRoom",
	PlantSection:                   "sap_functional_location_header_data.PlantSection",
	WorkCenter:                     "sap_functional_location_header_data.WorkCenter",
	WorkCenterInternalID:           "sap_functional_location_header_data.WorkCenterInternalID",
	WorkCenterPlant:                "sap_functional_location_header_data.WorkCenterPlant",
	ABCIndicator:                   "sap_functional_location_header_data.ABCIndicator",
	MaintObjectFreeDefinedAttrib:   "sap_functional_location_header_data.MaintObjectFreeDefinedAttrib",
	FormOfAddress:                  "sap_functional_location_header_data.FormOfAddress",
	BusinessPartnerName1:           "sap_functional_location_header_data.BusinessPartnerName1",
	BusinessPartnerName2:           "sap_functional_location_header_data.BusinessPartnerName2",
	CityName:                       "sap_functional_location_header_data.CityName",
	PostalCode:                     "sap_functional_location_header_data.PostalCode",
	StreetName:                     "sap_functional_location_header_data.StreetName",
	Region:                         "sap_functional_location_header_data.Region",
	Country:                        "sap_functional_location_header_data.Country",
	PhoneNumber:                    "sap_functional_location_header_data.PhoneNumber",
	FaxNumber:                      "sap_functional_location_header_data.FaxNumber",
	CompanyCode:                    "sap_functional_location_header_data.CompanyCode",
	BusinessArea:                   "sap_functional_location_header_data.BusinessArea",
	MasterFixedAsset:               "sap_functional_location_header_data.MasterFixedAsset",
	FixedAsset:                     "sap_functional_location_header_data.FixedAsset",
	CostCenter:                     "sap_functional_location_header_data.CostCenter",
	ControllingArea:                "sap_functional_location_header_data.ControllingArea",
	WBSElementExternalID:           "sap_functional_location_header_data.WBSElementExternalID",
	SettlementOrder:                "sap_functional_location_header_data.SettlementOrder",
	ConstructionMaterial:           "sap_functional_location_header_data.ConstructionMaterial",
	MaintenancePlannerGroup:        "sap_functional_location_header_data.MaintenancePlannerGroup",
	MaintenancePlanningPlant:       "sap_functional_location_header_data.MaintenancePlanningPlant",
	MainWorkCenterPlant:            "sap_functional_location_header_data.MainWorkCenterPlant",
	MainWorkCenter:                 "sap_functional_location_header_data.MainWorkCenter",
	MainWorkCenterInternalID:       "sap_functional_location_header_data.MainWorkCenterInternalID",
	CatalogProfile:                 "sap_functional_location_header_data.CatalogProfile",
	EquipmentInstallationIsAllowed: "sap_functional_location_header_data.EquipmentInstallationIsAllowed",
	OnePieceOfEquipmentIsAllowed:   "sap_functional_location_header_data.OnePieceOfEquipmentIsAllowed",
	SalesOrganization:              "sap_functional_location_header_data.SalesOrganization",
	DistributionChannel:            "sap_functional_location_header_data.DistributionChannel",
	SalesOffice:                    "sap_functional_location_header_data.SalesOffice",
	OrganizationDivision:           "sap_functional_location_header_data.OrganizationDivision",
	SalesGroup:                     "sap_functional_location_header_data.SalesGroup",
	FunctionalLocationHasEquipment: "sap_functional_location_header_data.FunctionalLocationHasEquipment",
	FuncnlLocHasSubOrdinateFuncLoc: "sap_functional_location_header_data.FuncnlLocHasSubOrdinateFuncLoc",
	LastChangeDateTime:             "sap_functional_location_header_data.LastChangeDateTime",
	FuncnlLocIsMarkedForDeletion:   "sap_functional_location_header_data.FuncnlLocIsMarkedForDeletion",
	FuncnlLocIsDeleted:             "sap_functional_location_header_data.FuncnlLocIsDeleted",
	FunctionalLocationIsActive:     "sap_functional_location_header_data.FunctionalLocationIsActive",
	FuncnlLocIsDeactivated:         "sap_functional_location_header_data.FuncnlLocIsDeactivated",
	CreationDate:                   "sap_functional_location_header_data.CreationDate",
}

// Generated where

var SapFunctionalLocationHeaderDatumWhere = struct {
	FunctionalLocation             whereHelperstring
	FunctionalLocationLabelName    whereHelpernull_String
	FunctionalLocationName         whereHelpernull_String
	FuncLocationStructure          whereHelpernull_String
	FunctionalLocationCategory     whereHelpernull_String
	SuperiorFunctionalLocation     whereHelpernull_String
	SuperiorFuncnlLocLabelName     whereHelpernull_String
	TechnicalObjectType            whereHelpernull_String
	GrossWeight                    whereHelpernull_String
	GrossWeightUnit                whereHelpernull_String
	OperationStartDate             whereHelpernull_String
	InventoryNumber                whereHelpernull_String
	AcquisitionValue               whereHelpernull_String
	Currency                       whereHelpernull_String
	AcquisitionDate                whereHelpernull_String
	AssetManufacturerName          whereHelpernull_String
	ManufacturerPartNmbr           whereHelpernull_String
	ManufacturerCountry            whereHelpernull_String
	ManufacturerPartTypeName       whereHelpernull_String
	ConstructionMonth              whereHelpernull_String
	ConstructionYear               whereHelpernull_String
	ManufacturerSerialNumber       whereHelpernull_String
	MaintenancePlant               whereHelpernull_String
	AssetLocation                  whereHelpernull_String
	AssetRoom                      whereHelpernull_String
	PlantSection                   whereHelpernull_String
	WorkCenter                     whereHelpernull_String
	WorkCenterInternalID           whereHelpernull_String
	WorkCenterPlant                whereHelpernull_String
	ABCIndicator                   whereHelpernull_String
	MaintObjectFreeDefinedAttrib   whereHelpernull_String
	FormOfAddress                  whereHelpernull_String
	BusinessPartnerName1           whereHelpernull_String
	BusinessPartnerName2           whereHelpernull_String
	CityName                       whereHelpernull_String
	PostalCode                     whereHelpernull_String
	StreetName                     whereHelpernull_String
	Region                         whereHelpernull_String
	Country                        whereHelpernull_String
	PhoneNumber                    whereHelpernull_String
	FaxNumber                      whereHelpernull_String
	CompanyCode                    whereHelpernull_String
	BusinessArea                   whereHelpernull_String
	MasterFixedAsset               whereHelpernull_String
	FixedAsset                     whereHelpernull_String
	CostCenter                     whereHelpernull_String
	ControllingArea                whereHelpernull_String
	WBSElementExternalID           whereHelpernull_String
	SettlementOrder                whereHelpernull_String
	ConstructionMaterial           whereHelpernull_String
	MaintenancePlannerGroup        whereHelpernull_String
	MaintenancePlanningPlant       whereHelpernull_String
	MainWorkCenterPlant            whereHelpernull_String
	MainWorkCenter                 whereHelpernull_String
	MainWorkCenterInternalID       whereHelpernull_String
	CatalogProfile                 whereHelpernull_String
	EquipmentInstallationIsAllowed whereHelpernull_Bool
	OnePieceOfEquipmentIsAllowed   whereHelpernull_Bool
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	OrganizationDivision           whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	FunctionalLocationHasEquipment whereHelpernull_String
	FuncnlLocHasSubOrdinateFuncLoc whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
	FuncnlLocIsMarkedForDeletion   whereHelpernull_Bool
	FuncnlLocIsDeleted             whereHelpernull_Bool
	FunctionalLocationIsActive     whereHelpernull_Bool
	FuncnlLocIsDeactivated         whereHelpernull_Bool
	CreationDate                   whereHelpernull_String
}{
	FunctionalLocation:             whereHelperstring{field: "`sap_functional_location_header_data`.`FunctionalLocation`"},
	FunctionalLocationLabelName:    whereHelpernull_String{field: "`sap_functional_location_header_data`.`FunctionalLocationLabelName`"},
	FunctionalLocationName:         whereHelpernull_String{field: "`sap_functional_location_header_data`.`FunctionalLocationName`"},
	FuncLocationStructure:          whereHelpernull_String{field: "`sap_functional_location_header_data`.`FuncLocationStructure`"},
	FunctionalLocationCategory:     whereHelpernull_String{field: "`sap_functional_location_header_data`.`FunctionalLocationCategory`"},
	SuperiorFunctionalLocation:     whereHelpernull_String{field: "`sap_functional_location_header_data`.`SuperiorFunctionalLocation`"},
	SuperiorFuncnlLocLabelName:     whereHelpernull_String{field: "`sap_functional_location_header_data`.`SuperiorFuncnlLocLabelName`"},
	TechnicalObjectType:            whereHelpernull_String{field: "`sap_functional_location_header_data`.`TechnicalObjectType`"},
	GrossWeight:                    whereHelpernull_String{field: "`sap_functional_location_header_data`.`GrossWeight`"},
	GrossWeightUnit:                whereHelpernull_String{field: "`sap_functional_location_header_data`.`GrossWeightUnit`"},
	OperationStartDate:             whereHelpernull_String{field: "`sap_functional_location_header_data`.`OperationStartDate`"},
	InventoryNumber:                whereHelpernull_String{field: "`sap_functional_location_header_data`.`InventoryNumber`"},
	AcquisitionValue:               whereHelpernull_String{field: "`sap_functional_location_header_data`.`AcquisitionValue`"},
	Currency:                       whereHelpernull_String{field: "`sap_functional_location_header_data`.`Currency`"},
	AcquisitionDate:                whereHelpernull_String{field: "`sap_functional_location_header_data`.`AcquisitionDate`"},
	AssetManufacturerName:          whereHelpernull_String{field: "`sap_functional_location_header_data`.`AssetManufacturerName`"},
	ManufacturerPartNmbr:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`ManufacturerPartNmbr`"},
	ManufacturerCountry:            whereHelpernull_String{field: "`sap_functional_location_header_data`.`ManufacturerCountry`"},
	ManufacturerPartTypeName:       whereHelpernull_String{field: "`sap_functional_location_header_data`.`ManufacturerPartTypeName`"},
	ConstructionMonth:              whereHelpernull_String{field: "`sap_functional_location_header_data`.`ConstructionMonth`"},
	ConstructionYear:               whereHelpernull_String{field: "`sap_functional_location_header_data`.`ConstructionYear`"},
	ManufacturerSerialNumber:       whereHelpernull_String{field: "`sap_functional_location_header_data`.`ManufacturerSerialNumber`"},
	MaintenancePlant:               whereHelpernull_String{field: "`sap_functional_location_header_data`.`MaintenancePlant`"},
	AssetLocation:                  whereHelpernull_String{field: "`sap_functional_location_header_data`.`AssetLocation`"},
	AssetRoom:                      whereHelpernull_String{field: "`sap_functional_location_header_data`.`AssetRoom`"},
	PlantSection:                   whereHelpernull_String{field: "`sap_functional_location_header_data`.`PlantSection`"},
	WorkCenter:                     whereHelpernull_String{field: "`sap_functional_location_header_data`.`WorkCenter`"},
	WorkCenterInternalID:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`WorkCenterInternalID`"},
	WorkCenterPlant:                whereHelpernull_String{field: "`sap_functional_location_header_data`.`WorkCenterPlant`"},
	ABCIndicator:                   whereHelpernull_String{field: "`sap_functional_location_header_data`.`ABCIndicator`"},
	MaintObjectFreeDefinedAttrib:   whereHelpernull_String{field: "`sap_functional_location_header_data`.`MaintObjectFreeDefinedAttrib`"},
	FormOfAddress:                  whereHelpernull_String{field: "`sap_functional_location_header_data`.`FormOfAddress`"},
	BusinessPartnerName1:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`BusinessPartnerName1`"},
	BusinessPartnerName2:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`BusinessPartnerName2`"},
	CityName:                       whereHelpernull_String{field: "`sap_functional_location_header_data`.`CityName`"},
	PostalCode:                     whereHelpernull_String{field: "`sap_functional_location_header_data`.`PostalCode`"},
	StreetName:                     whereHelpernull_String{field: "`sap_functional_location_header_data`.`StreetName`"},
	Region:                         whereHelpernull_String{field: "`sap_functional_location_header_data`.`Region`"},
	Country:                        whereHelpernull_String{field: "`sap_functional_location_header_data`.`Country`"},
	PhoneNumber:                    whereHelpernull_String{field: "`sap_functional_location_header_data`.`PhoneNumber`"},
	FaxNumber:                      whereHelpernull_String{field: "`sap_functional_location_header_data`.`FaxNumber`"},
	CompanyCode:                    whereHelpernull_String{field: "`sap_functional_location_header_data`.`CompanyCode`"},
	BusinessArea:                   whereHelpernull_String{field: "`sap_functional_location_header_data`.`BusinessArea`"},
	MasterFixedAsset:               whereHelpernull_String{field: "`sap_functional_location_header_data`.`MasterFixedAsset`"},
	FixedAsset:                     whereHelpernull_String{field: "`sap_functional_location_header_data`.`FixedAsset`"},
	CostCenter:                     whereHelpernull_String{field: "`sap_functional_location_header_data`.`CostCenter`"},
	ControllingArea:                whereHelpernull_String{field: "`sap_functional_location_header_data`.`ControllingArea`"},
	WBSElementExternalID:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`WBSElementExternalID`"},
	SettlementOrder:                whereHelpernull_String{field: "`sap_functional_location_header_data`.`SettlementOrder`"},
	ConstructionMaterial:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`ConstructionMaterial`"},
	MaintenancePlannerGroup:        whereHelpernull_String{field: "`sap_functional_location_header_data`.`MaintenancePlannerGroup`"},
	MaintenancePlanningPlant:       whereHelpernull_String{field: "`sap_functional_location_header_data`.`MaintenancePlanningPlant`"},
	MainWorkCenterPlant:            whereHelpernull_String{field: "`sap_functional_location_header_data`.`MainWorkCenterPlant`"},
	MainWorkCenter:                 whereHelpernull_String{field: "`sap_functional_location_header_data`.`MainWorkCenter`"},
	MainWorkCenterInternalID:       whereHelpernull_String{field: "`sap_functional_location_header_data`.`MainWorkCenterInternalID`"},
	CatalogProfile:                 whereHelpernull_String{field: "`sap_functional_location_header_data`.`CatalogProfile`"},
	EquipmentInstallationIsAllowed: whereHelpernull_Bool{field: "`sap_functional_location_header_data`.`EquipmentInstallationIsAllowed`"},
	OnePieceOfEquipmentIsAllowed:   whereHelpernull_Bool{field: "`sap_functional_location_header_data`.`OnePieceOfEquipmentIsAllowed`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_functional_location_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_functional_location_header_data`.`DistributionChannel`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_functional_location_header_data`.`SalesOffice`"},
	OrganizationDivision:           whereHelpernull_String{field: "`sap_functional_location_header_data`.`OrganizationDivision`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_functional_location_header_data`.`SalesGroup`"},
	FunctionalLocationHasEquipment: whereHelpernull_String{field: "`sap_functional_location_header_data`.`FunctionalLocationHasEquipment`"},
	FuncnlLocHasSubOrdinateFuncLoc: whereHelpernull_String{field: "`sap_functional_location_header_data`.`FuncnlLocHasSubOrdinateFuncLoc`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_functional_location_header_data`.`LastChangeDateTime`"},
	FuncnlLocIsMarkedForDeletion:   whereHelpernull_Bool{field: "`sap_functional_location_header_data`.`FuncnlLocIsMarkedForDeletion`"},
	FuncnlLocIsDeleted:             whereHelpernull_Bool{field: "`sap_functional_location_header_data`.`FuncnlLocIsDeleted`"},
	FunctionalLocationIsActive:     whereHelpernull_Bool{field: "`sap_functional_location_header_data`.`FunctionalLocationIsActive`"},
	FuncnlLocIsDeactivated:         whereHelpernull_Bool{field: "`sap_functional_location_header_data`.`FuncnlLocIsDeactivated`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_functional_location_header_data`.`CreationDate`"},
}

// SapFunctionalLocationHeaderDatumRels is where relationship names are stored.
var SapFunctionalLocationHeaderDatumRels = struct {
}{}

// sapFunctionalLocationHeaderDatumR is where relationships are stored.
type sapFunctionalLocationHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapFunctionalLocationHeaderDatumR) NewStruct() *sapFunctionalLocationHeaderDatumR {
	return &sapFunctionalLocationHeaderDatumR{}
}

// sapFunctionalLocationHeaderDatumL is where Load methods for each relationship are stored.
type sapFunctionalLocationHeaderDatumL struct{}

var (
	sapFunctionalLocationHeaderDatumAllColumns            = []string{"FunctionalLocation", "FunctionalLocationLabelName", "FunctionalLocationName", "FuncLocationStructure", "FunctionalLocationCategory", "SuperiorFunctionalLocation", "SuperiorFuncnlLocLabelName", "TechnicalObjectType", "GrossWeight", "GrossWeightUnit", "OperationStartDate", "InventoryNumber", "AcquisitionValue", "Currency", "AcquisitionDate", "AssetManufacturerName", "ManufacturerPartNmbr", "ManufacturerCountry", "ManufacturerPartTypeName", "ConstructionMonth", "ConstructionYear", "ManufacturerSerialNumber", "MaintenancePlant", "AssetLocation", "AssetRoom", "PlantSection", "WorkCenter", "WorkCenterInternalID", "WorkCenterPlant", "ABCIndicator", "MaintObjectFreeDefinedAttrib", "FormOfAddress", "BusinessPartnerName1", "BusinessPartnerName2", "CityName", "PostalCode", "StreetName", "Region", "Country", "PhoneNumber", "FaxNumber", "CompanyCode", "BusinessArea", "MasterFixedAsset", "FixedAsset", "CostCenter", "ControllingArea", "WBSElementExternalID", "SettlementOrder", "ConstructionMaterial", "MaintenancePlannerGroup", "MaintenancePlanningPlant", "MainWorkCenterPlant", "MainWorkCenter", "MainWorkCenterInternalID", "CatalogProfile", "EquipmentInstallationIsAllowed", "OnePieceOfEquipmentIsAllowed", "SalesOrganization", "DistributionChannel", "SalesOffice", "OrganizationDivision", "SalesGroup", "FunctionalLocationHasEquipment", "FuncnlLocHasSubOrdinateFuncLoc", "LastChangeDateTime", "FuncnlLocIsMarkedForDeletion", "FuncnlLocIsDeleted", "FunctionalLocationIsActive", "FuncnlLocIsDeactivated", "CreationDate"}
	sapFunctionalLocationHeaderDatumColumnsWithoutDefault = []string{"FunctionalLocation", "FunctionalLocationLabelName", "FunctionalLocationName", "FuncLocationStructure", "FunctionalLocationCategory", "SuperiorFunctionalLocation", "SuperiorFuncnlLocLabelName", "TechnicalObjectType", "GrossWeight", "GrossWeightUnit", "OperationStartDate", "InventoryNumber", "AcquisitionValue", "Currency", "AcquisitionDate", "AssetManufacturerName", "ManufacturerPartNmbr", "ManufacturerCountry", "ManufacturerPartTypeName", "ConstructionMonth", "ConstructionYear", "ManufacturerSerialNumber", "MaintenancePlant", "AssetLocation", "AssetRoom", "PlantSection", "WorkCenter", "WorkCenterInternalID", "WorkCenterPlant", "ABCIndicator", "MaintObjectFreeDefinedAttrib", "FormOfAddress", "BusinessPartnerName1", "BusinessPartnerName2", "CityName", "PostalCode", "StreetName", "Region", "Country", "PhoneNumber", "FaxNumber", "CompanyCode", "BusinessArea", "MasterFixedAsset", "FixedAsset", "CostCenter", "ControllingArea", "WBSElementExternalID", "SettlementOrder", "ConstructionMaterial", "MaintenancePlannerGroup", "MaintenancePlanningPlant", "MainWorkCenterPlant", "MainWorkCenter", "MainWorkCenterInternalID", "CatalogProfile", "EquipmentInstallationIsAllowed", "OnePieceOfEquipmentIsAllowed", "SalesOrganization", "DistributionChannel", "SalesOffice", "OrganizationDivision", "SalesGroup", "FunctionalLocationHasEquipment", "FuncnlLocHasSubOrdinateFuncLoc", "LastChangeDateTime", "FuncnlLocIsMarkedForDeletion", "FuncnlLocIsDeleted", "FunctionalLocationIsActive", "FuncnlLocIsDeactivated", "CreationDate"}
	sapFunctionalLocationHeaderDatumColumnsWithDefault    = []string{}
	sapFunctionalLocationHeaderDatumPrimaryKeyColumns     = []string{"FunctionalLocation"}
	sapFunctionalLocationHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapFunctionalLocationHeaderDatumSlice is an alias for a slice of pointers to SapFunctionalLocationHeaderDatum.
	// This should almost always be used instead of []SapFunctionalLocationHeaderDatum.
	SapFunctionalLocationHeaderDatumSlice []*SapFunctionalLocationHeaderDatum
	// SapFunctionalLocationHeaderDatumHook is the signature for custom SapFunctionalLocationHeaderDatum hook methods
	SapFunctionalLocationHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapFunctionalLocationHeaderDatum) error

	sapFunctionalLocationHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapFunctionalLocationHeaderDatumType                 = reflect.TypeOf(&SapFunctionalLocationHeaderDatum{})
	sapFunctionalLocationHeaderDatumMapping              = queries.MakeStructMapping(sapFunctionalLocationHeaderDatumType)
	sapFunctionalLocationHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, sapFunctionalLocationHeaderDatumPrimaryKeyColumns)
	sapFunctionalLocationHeaderDatumInsertCacheMut       sync.RWMutex
	sapFunctionalLocationHeaderDatumInsertCache          = make(map[string]insertCache)
	sapFunctionalLocationHeaderDatumUpdateCacheMut       sync.RWMutex
	sapFunctionalLocationHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapFunctionalLocationHeaderDatumUpsertCacheMut       sync.RWMutex
	sapFunctionalLocationHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapFunctionalLocationHeaderDatumAfterSelectHooks []SapFunctionalLocationHeaderDatumHook

var sapFunctionalLocationHeaderDatumBeforeInsertHooks []SapFunctionalLocationHeaderDatumHook
var sapFunctionalLocationHeaderDatumAfterInsertHooks []SapFunctionalLocationHeaderDatumHook

var sapFunctionalLocationHeaderDatumBeforeUpdateHooks []SapFunctionalLocationHeaderDatumHook
var sapFunctionalLocationHeaderDatumAfterUpdateHooks []SapFunctionalLocationHeaderDatumHook

var sapFunctionalLocationHeaderDatumBeforeDeleteHooks []SapFunctionalLocationHeaderDatumHook
var sapFunctionalLocationHeaderDatumAfterDeleteHooks []SapFunctionalLocationHeaderDatumHook

var sapFunctionalLocationHeaderDatumBeforeUpsertHooks []SapFunctionalLocationHeaderDatumHook
var sapFunctionalLocationHeaderDatumAfterUpsertHooks []SapFunctionalLocationHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapFunctionalLocationHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapFunctionalLocationHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapFunctionalLocationHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapFunctionalLocationHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapFunctionalLocationHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapFunctionalLocationHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapFunctionalLocationHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapFunctionalLocationHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapFunctionalLocationHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapFunctionalLocationHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapFunctionalLocationHeaderDatumHook registers your hook function for all future operations.
func AddSapFunctionalLocationHeaderDatumHook(hookPoint boil.HookPoint, sapFunctionalLocationHeaderDatumHook SapFunctionalLocationHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapFunctionalLocationHeaderDatumAfterSelectHooks = append(sapFunctionalLocationHeaderDatumAfterSelectHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapFunctionalLocationHeaderDatumBeforeInsertHooks = append(sapFunctionalLocationHeaderDatumBeforeInsertHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.AfterInsertHook:
		sapFunctionalLocationHeaderDatumAfterInsertHooks = append(sapFunctionalLocationHeaderDatumAfterInsertHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapFunctionalLocationHeaderDatumBeforeUpdateHooks = append(sapFunctionalLocationHeaderDatumBeforeUpdateHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapFunctionalLocationHeaderDatumAfterUpdateHooks = append(sapFunctionalLocationHeaderDatumAfterUpdateHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapFunctionalLocationHeaderDatumBeforeDeleteHooks = append(sapFunctionalLocationHeaderDatumBeforeDeleteHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapFunctionalLocationHeaderDatumAfterDeleteHooks = append(sapFunctionalLocationHeaderDatumAfterDeleteHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapFunctionalLocationHeaderDatumBeforeUpsertHooks = append(sapFunctionalLocationHeaderDatumBeforeUpsertHooks, sapFunctionalLocationHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapFunctionalLocationHeaderDatumAfterUpsertHooks = append(sapFunctionalLocationHeaderDatumAfterUpsertHooks, sapFunctionalLocationHeaderDatumHook)
	}
}

// One returns a single sapFunctionalLocationHeaderDatum record from the query.
func (q sapFunctionalLocationHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapFunctionalLocationHeaderDatum, error) {
	o := &SapFunctionalLocationHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_functional_location_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapFunctionalLocationHeaderDatum records from the query.
func (q sapFunctionalLocationHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapFunctionalLocationHeaderDatumSlice, error) {
	var o []*SapFunctionalLocationHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapFunctionalLocationHeaderDatum slice")
	}

	if len(sapFunctionalLocationHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapFunctionalLocationHeaderDatum records in the query.
func (q sapFunctionalLocationHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_functional_location_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapFunctionalLocationHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_functional_location_header_data exists")
	}

	return count > 0, nil
}

// SapFunctionalLocationHeaderData retrieves all the records using an executor.
func SapFunctionalLocationHeaderData(mods ...qm.QueryMod) sapFunctionalLocationHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_functional_location_header_data`"))
	return sapFunctionalLocationHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapFunctionalLocationHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapFunctionalLocationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, functionalLocation string, selectCols ...string) (*SapFunctionalLocationHeaderDatum, error) {
	sapFunctionalLocationHeaderDatumObj := &SapFunctionalLocationHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_functional_location_header_data` where `FunctionalLocation`=?", sel,
	)

	q := queries.Raw(query, functionalLocation)

	err := q.Bind(ctx, exec, sapFunctionalLocationHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_functional_location_header_data")
	}

	if err = sapFunctionalLocationHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapFunctionalLocationHeaderDatumObj, err
	}

	return sapFunctionalLocationHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapFunctionalLocationHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_functional_location_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapFunctionalLocationHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapFunctionalLocationHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapFunctionalLocationHeaderDatumInsertCache[key]
	sapFunctionalLocationHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapFunctionalLocationHeaderDatumAllColumns,
			sapFunctionalLocationHeaderDatumColumnsWithDefault,
			sapFunctionalLocationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_functional_location_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_functional_location_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_functional_location_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapFunctionalLocationHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_functional_location_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FunctionalLocation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_functional_location_header_data")
	}

CacheNoHooks:
	if !cached {
		sapFunctionalLocationHeaderDatumInsertCacheMut.Lock()
		sapFunctionalLocationHeaderDatumInsertCache[key] = cache
		sapFunctionalLocationHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapFunctionalLocationHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapFunctionalLocationHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapFunctionalLocationHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapFunctionalLocationHeaderDatumUpdateCache[key]
	sapFunctionalLocationHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapFunctionalLocationHeaderDatumAllColumns,
			sapFunctionalLocationHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_functional_location_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_functional_location_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapFunctionalLocationHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, append(wl, sapFunctionalLocationHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_functional_location_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_functional_location_header_data")
	}

	if !cached {
		sapFunctionalLocationHeaderDatumUpdateCacheMut.Lock()
		sapFunctionalLocationHeaderDatumUpdateCache[key] = cache
		sapFunctionalLocationHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapFunctionalLocationHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_functional_location_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_functional_location_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapFunctionalLocationHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapFunctionalLocationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_functional_location_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapFunctionalLocationHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapFunctionalLocationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapFunctionalLocationHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapFunctionalLocationHeaderDatumUniqueColumns = []string{
	"FunctionalLocation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapFunctionalLocationHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_functional_location_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapFunctionalLocationHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapFunctionalLocationHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapFunctionalLocationHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapFunctionalLocationHeaderDatumUpsertCache[key]
	sapFunctionalLocationHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapFunctionalLocationHeaderDatumAllColumns,
			sapFunctionalLocationHeaderDatumColumnsWithDefault,
			sapFunctionalLocationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapFunctionalLocationHeaderDatumAllColumns,
			sapFunctionalLocationHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_functional_location_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_functional_location_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_functional_location_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_functional_location_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapFunctionalLocationHeaderDatumType, sapFunctionalLocationHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_functional_location_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_functional_location_header_data")
	}

CacheNoHooks:
	if !cached {
		sapFunctionalLocationHeaderDatumUpsertCacheMut.Lock()
		sapFunctionalLocationHeaderDatumUpsertCache[key] = cache
		sapFunctionalLocationHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapFunctionalLocationHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapFunctionalLocationHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapFunctionalLocationHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapFunctionalLocationHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_functional_location_header_data` WHERE `FunctionalLocation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_functional_location_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_functional_location_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapFunctionalLocationHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapFunctionalLocationHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_functional_location_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_functional_location_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapFunctionalLocationHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapFunctionalLocationHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapFunctionalLocationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_functional_location_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapFunctionalLocationHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapFunctionalLocationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_functional_location_header_data")
	}

	if len(sapFunctionalLocationHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapFunctionalLocationHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapFunctionalLocationHeaderDatum(ctx, exec, o.FunctionalLocation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapFunctionalLocationHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapFunctionalLocationHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapFunctionalLocationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_functional_location_header_data`.* FROM `sap_functional_location_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapFunctionalLocationHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapFunctionalLocationHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapFunctionalLocationHeaderDatumExists checks if the SapFunctionalLocationHeaderDatum row exists.
func SapFunctionalLocationHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, functionalLocation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_functional_location_header_data` where `FunctionalLocation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, functionalLocation)
	}
	row := exec.QueryRowContext(ctx, sql, functionalLocation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_functional_location_header_data exists")
	}

	return exists, nil
}
