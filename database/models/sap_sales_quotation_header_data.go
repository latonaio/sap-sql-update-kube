// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesQuotationHeaderDatum is an object representing the database table.
type SapSalesQuotationHeaderDatum struct {
	SalesQuotation                 string      `boil:"SalesQuotation" json:"SalesQuotation" toml:"SalesQuotation" yaml:"SalesQuotation"`
	SalesQuotationType             null.String `boil:"SalesQuotationType" json:"SalesQuotationType,omitempty" toml:"SalesQuotationType" yaml:"SalesQuotationType,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision           null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                  null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderDate      null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	SalesQuotationDate             null.String `boil:"SalesQuotationDate" json:"SalesQuotationDate,omitempty" toml:"SalesQuotationDate" yaml:"SalesQuotationDate,omitempty"`
	TotalNetAmount                 null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	SDDocumentReason               null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PricingDate                    null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	RequestedDeliveryDate          null.String `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate,omitempty" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate,omitempty"`
	ShippingCondition              null.String `boil:"ShippingCondition" json:"ShippingCondition,omitempty" toml:"ShippingCondition" yaml:"ShippingCondition,omitempty"`
	CompleteDeliveryIsDefined      null.Bool   `boil:"CompleteDeliveryIsDefined" json:"CompleteDeliveryIsDefined,omitempty" toml:"CompleteDeliveryIsDefined" yaml:"CompleteDeliveryIsDefined,omitempty"`
	ShippingType                   null.String `boil:"ShippingType" json:"ShippingType,omitempty" toml:"ShippingType" yaml:"ShippingType,omitempty"`
	HeaderBillingBlockReason       null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	DeliveryBlockReason            null.String `boil:"DeliveryBlockReason" json:"DeliveryBlockReason,omitempty" toml:"DeliveryBlockReason" yaml:"DeliveryBlockReason,omitempty"`
	BindingPeriodValidityStartDate null.String `boil:"BindingPeriodValidityStartDate" json:"BindingPeriodValidityStartDate,omitempty" toml:"BindingPeriodValidityStartDate" yaml:"BindingPeriodValidityStartDate,omitempty"`
	BindingPeriodValidityEndDate   null.String `boil:"BindingPeriodValidityEndDate" json:"BindingPeriodValidityEndDate,omitempty" toml:"BindingPeriodValidityEndDate" yaml:"BindingPeriodValidityEndDate,omitempty"`
	HdrOrderProbabilityInPercent   null.String `boil:"HdrOrderProbabilityInPercent" json:"HdrOrderProbabilityInPercent,omitempty" toml:"HdrOrderProbabilityInPercent" yaml:"HdrOrderProbabilityInPercent,omitempty"`
	ExpectedOrderNetAmount         null.String `boil:"ExpectedOrderNetAmount" json:"ExpectedOrderNetAmount,omitempty" toml:"ExpectedOrderNetAmount" yaml:"ExpectedOrderNetAmount,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	CustomerPriceGroup             null.String `boil:"CustomerPriceGroup" json:"CustomerPriceGroup,omitempty" toml:"CustomerPriceGroup" yaml:"CustomerPriceGroup,omitempty"`
	PriceListType                  null.String `boil:"PriceListType" json:"PriceListType,omitempty" toml:"PriceListType" yaml:"PriceListType,omitempty"`
	PaymentMethod                  null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	CustomerTaxClassification1     null.String `boil:"CustomerTaxClassification1" json:"CustomerTaxClassification1,omitempty" toml:"CustomerTaxClassification1" yaml:"CustomerTaxClassification1,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentCategory    null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	SalesQuotationApprovalReason   null.String `boil:"SalesQuotationApprovalReason" json:"SalesQuotationApprovalReason,omitempty" toml:"SalesQuotationApprovalReason" yaml:"SalesQuotationApprovalReason,omitempty"`
	SalesDocApprovalStatus         null.String `boil:"SalesDocApprovalStatus" json:"SalesDocApprovalStatus,omitempty" toml:"SalesDocApprovalStatus" yaml:"SalesDocApprovalStatus,omitempty"`
	OverallSDProcessStatus         null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	TotalCreditCheckStatus         null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	OverallSDDocumentRejectionSts  null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`

	R *sapSalesQuotationHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesQuotationHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesQuotationHeaderDatumColumns = struct {
	SalesQuotation                 string
	SalesQuotationType             string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	SalesQuotationDate             string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	RequestedDeliveryDate          string
	ShippingCondition              string
	CompleteDeliveryIsDefined      string
	ShippingType                   string
	HeaderBillingBlockReason       string
	DeliveryBlockReason            string
	BindingPeriodValidityStartDate string
	BindingPeriodValidityEndDate   string
	HdrOrderProbabilityInPercent   string
	ExpectedOrderNetAmount         string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	CustomerPriceGroup             string
	PriceListType                  string
	PaymentMethod                  string
	CustomerTaxClassification1     string
	ReferenceSDDocument            string
	ReferenceSDDocumentCategory    string
	SalesQuotationApprovalReason   string
	SalesDocApprovalStatus         string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
}{
	SalesQuotation:                 "SalesQuotation",
	SalesQuotationType:             "SalesQuotationType",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	OrganizationDivision:           "OrganizationDivision",
	SalesGroup:                     "SalesGroup",
	SalesOffice:                    "SalesOffice",
	SalesDistrict:                  "SalesDistrict",
	SoldToParty:                    "SoldToParty",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "CustomerPurchaseOrderDate",
	SalesQuotationDate:             "SalesQuotationDate",
	TotalNetAmount:                 "TotalNetAmount",
	TransactionCurrency:            "TransactionCurrency",
	SDDocumentReason:               "SDDocumentReason",
	PricingDate:                    "PricingDate",
	RequestedDeliveryDate:          "RequestedDeliveryDate",
	ShippingCondition:              "ShippingCondition",
	CompleteDeliveryIsDefined:      "CompleteDeliveryIsDefined",
	ShippingType:                   "ShippingType",
	HeaderBillingBlockReason:       "HeaderBillingBlockReason",
	DeliveryBlockReason:            "DeliveryBlockReason",
	BindingPeriodValidityStartDate: "BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:   "BindingPeriodValidityEndDate",
	HdrOrderProbabilityInPercent:   "HdrOrderProbabilityInPercent",
	ExpectedOrderNetAmount:         "ExpectedOrderNetAmount",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	CustomerPriceGroup:             "CustomerPriceGroup",
	PriceListType:                  "PriceListType",
	PaymentMethod:                  "PaymentMethod",
	CustomerTaxClassification1:     "CustomerTaxClassification1",
	ReferenceSDDocument:            "ReferenceSDDocument",
	ReferenceSDDocumentCategory:    "ReferenceSDDocumentCategory",
	SalesQuotationApprovalReason:   "SalesQuotationApprovalReason",
	SalesDocApprovalStatus:         "SalesDocApprovalStatus",
	OverallSDProcessStatus:         "OverallSDProcessStatus",
	TotalCreditCheckStatus:         "TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "OverallSDDocumentRejectionSts",
}

var SapSalesQuotationHeaderDatumTableColumns = struct {
	SalesQuotation                 string
	SalesQuotationType             string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	SalesQuotationDate             string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	RequestedDeliveryDate          string
	ShippingCondition              string
	CompleteDeliveryIsDefined      string
	ShippingType                   string
	HeaderBillingBlockReason       string
	DeliveryBlockReason            string
	BindingPeriodValidityStartDate string
	BindingPeriodValidityEndDate   string
	HdrOrderProbabilityInPercent   string
	ExpectedOrderNetAmount         string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	CustomerPriceGroup             string
	PriceListType                  string
	PaymentMethod                  string
	CustomerTaxClassification1     string
	ReferenceSDDocument            string
	ReferenceSDDocumentCategory    string
	SalesQuotationApprovalReason   string
	SalesDocApprovalStatus         string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
}{
	SalesQuotation:                 "sap_sales_quotation_header_data.SalesQuotation",
	SalesQuotationType:             "sap_sales_quotation_header_data.SalesQuotationType",
	SalesOrganization:              "sap_sales_quotation_header_data.SalesOrganization",
	DistributionChannel:            "sap_sales_quotation_header_data.DistributionChannel",
	OrganizationDivision:           "sap_sales_quotation_header_data.OrganizationDivision",
	SalesGroup:                     "sap_sales_quotation_header_data.SalesGroup",
	SalesOffice:                    "sap_sales_quotation_header_data.SalesOffice",
	SalesDistrict:                  "sap_sales_quotation_header_data.SalesDistrict",
	SoldToParty:                    "sap_sales_quotation_header_data.SoldToParty",
	CreationDate:                   "sap_sales_quotation_header_data.CreationDate",
	LastChangeDate:                 "sap_sales_quotation_header_data.LastChangeDate",
	PurchaseOrderByCustomer:        "sap_sales_quotation_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "sap_sales_quotation_header_data.CustomerPurchaseOrderDate",
	SalesQuotationDate:             "sap_sales_quotation_header_data.SalesQuotationDate",
	TotalNetAmount:                 "sap_sales_quotation_header_data.TotalNetAmount",
	TransactionCurrency:            "sap_sales_quotation_header_data.TransactionCurrency",
	SDDocumentReason:               "sap_sales_quotation_header_data.SDDocumentReason",
	PricingDate:                    "sap_sales_quotation_header_data.PricingDate",
	RequestedDeliveryDate:          "sap_sales_quotation_header_data.RequestedDeliveryDate",
	ShippingCondition:              "sap_sales_quotation_header_data.ShippingCondition",
	CompleteDeliveryIsDefined:      "sap_sales_quotation_header_data.CompleteDeliveryIsDefined",
	ShippingType:                   "sap_sales_quotation_header_data.ShippingType",
	HeaderBillingBlockReason:       "sap_sales_quotation_header_data.HeaderBillingBlockReason",
	DeliveryBlockReason:            "sap_sales_quotation_header_data.DeliveryBlockReason",
	BindingPeriodValidityStartDate: "sap_sales_quotation_header_data.BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:   "sap_sales_quotation_header_data.BindingPeriodValidityEndDate",
	HdrOrderProbabilityInPercent:   "sap_sales_quotation_header_data.HdrOrderProbabilityInPercent",
	ExpectedOrderNetAmount:         "sap_sales_quotation_header_data.ExpectedOrderNetAmount",
	IncotermsClassification:        "sap_sales_quotation_header_data.IncotermsClassification",
	CustomerPaymentTerms:           "sap_sales_quotation_header_data.CustomerPaymentTerms",
	CustomerPriceGroup:             "sap_sales_quotation_header_data.CustomerPriceGroup",
	PriceListType:                  "sap_sales_quotation_header_data.PriceListType",
	PaymentMethod:                  "sap_sales_quotation_header_data.PaymentMethod",
	CustomerTaxClassification1:     "sap_sales_quotation_header_data.CustomerTaxClassification1",
	ReferenceSDDocument:            "sap_sales_quotation_header_data.ReferenceSDDocument",
	ReferenceSDDocumentCategory:    "sap_sales_quotation_header_data.ReferenceSDDocumentCategory",
	SalesQuotationApprovalReason:   "sap_sales_quotation_header_data.SalesQuotationApprovalReason",
	SalesDocApprovalStatus:         "sap_sales_quotation_header_data.SalesDocApprovalStatus",
	OverallSDProcessStatus:         "sap_sales_quotation_header_data.OverallSDProcessStatus",
	TotalCreditCheckStatus:         "sap_sales_quotation_header_data.TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "sap_sales_quotation_header_data.OverallSDDocumentRejectionSts",
}

// Generated where

var SapSalesQuotationHeaderDatumWhere = struct {
	SalesQuotation                 whereHelperstring
	SalesQuotationType             whereHelpernull_String
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	OrganizationDivision           whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SalesDistrict                  whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	CustomerPurchaseOrderDate      whereHelpernull_String
	SalesQuotationDate             whereHelpernull_String
	TotalNetAmount                 whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	SDDocumentReason               whereHelpernull_String
	PricingDate                    whereHelpernull_String
	RequestedDeliveryDate          whereHelpernull_String
	ShippingCondition              whereHelpernull_String
	CompleteDeliveryIsDefined      whereHelpernull_Bool
	ShippingType                   whereHelpernull_String
	HeaderBillingBlockReason       whereHelpernull_String
	DeliveryBlockReason            whereHelpernull_String
	BindingPeriodValidityStartDate whereHelpernull_String
	BindingPeriodValidityEndDate   whereHelpernull_String
	HdrOrderProbabilityInPercent   whereHelpernull_String
	ExpectedOrderNetAmount         whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	CustomerPriceGroup             whereHelpernull_String
	PriceListType                  whereHelpernull_String
	PaymentMethod                  whereHelpernull_String
	CustomerTaxClassification1     whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	ReferenceSDDocumentCategory    whereHelpernull_String
	SalesQuotationApprovalReason   whereHelpernull_String
	SalesDocApprovalStatus         whereHelpernull_String
	OverallSDProcessStatus         whereHelpernull_String
	TotalCreditCheckStatus         whereHelpernull_String
	OverallSDDocumentRejectionSts  whereHelpernull_String
}{
	SalesQuotation:                 whereHelperstring{field: "`sap_sales_quotation_header_data`.`SalesQuotation`"},
	SalesQuotationType:             whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesQuotationType`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`DistributionChannel`"},
	OrganizationDivision:           whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`OrganizationDivision`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesGroup`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesOffice`"},
	SalesDistrict:                  whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesDistrict`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SoldToParty`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`LastChangeDate`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderDate:      whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`CustomerPurchaseOrderDate`"},
	SalesQuotationDate:             whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesQuotationDate`"},
	TotalNetAmount:                 whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`TotalNetAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`TransactionCurrency`"},
	SDDocumentReason:               whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SDDocumentReason`"},
	PricingDate:                    whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`PricingDate`"},
	RequestedDeliveryDate:          whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`RequestedDeliveryDate`"},
	ShippingCondition:              whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`ShippingCondition`"},
	CompleteDeliveryIsDefined:      whereHelpernull_Bool{field: "`sap_sales_quotation_header_data`.`CompleteDeliveryIsDefined`"},
	ShippingType:                   whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`ShippingType`"},
	HeaderBillingBlockReason:       whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`HeaderBillingBlockReason`"},
	DeliveryBlockReason:            whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`DeliveryBlockReason`"},
	BindingPeriodValidityStartDate: whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`BindingPeriodValidityStartDate`"},
	BindingPeriodValidityEndDate:   whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`BindingPeriodValidityEndDate`"},
	HdrOrderProbabilityInPercent:   whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`HdrOrderProbabilityInPercent`"},
	ExpectedOrderNetAmount:         whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`ExpectedOrderNetAmount`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`CustomerPaymentTerms`"},
	CustomerPriceGroup:             whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`CustomerPriceGroup`"},
	PriceListType:                  whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`PriceListType`"},
	PaymentMethod:                  whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`PaymentMethod`"},
	CustomerTaxClassification1:     whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`CustomerTaxClassification1`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentCategory:    whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`ReferenceSDDocumentCategory`"},
	SalesQuotationApprovalReason:   whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesQuotationApprovalReason`"},
	SalesDocApprovalStatus:         whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`SalesDocApprovalStatus`"},
	OverallSDProcessStatus:         whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`OverallSDProcessStatus`"},
	TotalCreditCheckStatus:         whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`TotalCreditCheckStatus`"},
	OverallSDDocumentRejectionSts:  whereHelpernull_String{field: "`sap_sales_quotation_header_data`.`OverallSDDocumentRejectionSts`"},
}

// SapSalesQuotationHeaderDatumRels is where relationship names are stored.
var SapSalesQuotationHeaderDatumRels = struct {
	SalesQuotationSapSalesQuotationHeaderPartnerData string
	SalesQuotationSapSalesQuotationItemData          string
}{
	SalesQuotationSapSalesQuotationHeaderPartnerData: "SalesQuotationSapSalesQuotationHeaderPartnerData",
	SalesQuotationSapSalesQuotationItemData:          "SalesQuotationSapSalesQuotationItemData",
}

// sapSalesQuotationHeaderDatumR is where relationships are stored.
type sapSalesQuotationHeaderDatumR struct {
	SalesQuotationSapSalesQuotationHeaderPartnerData SapSalesQuotationHeaderPartnerDatumSlice `boil:"SalesQuotationSapSalesQuotationHeaderPartnerData" json:"SalesQuotationSapSalesQuotationHeaderPartnerData" toml:"SalesQuotationSapSalesQuotationHeaderPartnerData" yaml:"SalesQuotationSapSalesQuotationHeaderPartnerData"`
	SalesQuotationSapSalesQuotationItemData          SapSalesQuotationItemDatumSlice          `boil:"SalesQuotationSapSalesQuotationItemData" json:"SalesQuotationSapSalesQuotationItemData" toml:"SalesQuotationSapSalesQuotationItemData" yaml:"SalesQuotationSapSalesQuotationItemData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesQuotationHeaderDatumR) NewStruct() *sapSalesQuotationHeaderDatumR {
	return &sapSalesQuotationHeaderDatumR{}
}

// sapSalesQuotationHeaderDatumL is where Load methods for each relationship are stored.
type sapSalesQuotationHeaderDatumL struct{}

var (
	sapSalesQuotationHeaderDatumAllColumns            = []string{"SalesQuotation", "SalesQuotationType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "SalesQuotationDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "RequestedDeliveryDate", "ShippingCondition", "CompleteDeliveryIsDefined", "ShippingType", "HeaderBillingBlockReason", "DeliveryBlockReason", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "HdrOrderProbabilityInPercent", "ExpectedOrderNetAmount", "IncotermsClassification", "CustomerPaymentTerms", "CustomerPriceGroup", "PriceListType", "PaymentMethod", "CustomerTaxClassification1", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "SalesQuotationApprovalReason", "SalesDocApprovalStatus", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapSalesQuotationHeaderDatumColumnsWithoutDefault = []string{"SalesQuotation", "SalesQuotationType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "SalesQuotationDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "RequestedDeliveryDate", "ShippingCondition", "CompleteDeliveryIsDefined", "ShippingType", "HeaderBillingBlockReason", "DeliveryBlockReason", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "HdrOrderProbabilityInPercent", "ExpectedOrderNetAmount", "IncotermsClassification", "CustomerPaymentTerms", "CustomerPriceGroup", "PriceListType", "PaymentMethod", "CustomerTaxClassification1", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "SalesQuotationApprovalReason", "SalesDocApprovalStatus", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapSalesQuotationHeaderDatumColumnsWithDefault    = []string{}
	sapSalesQuotationHeaderDatumPrimaryKeyColumns     = []string{"SalesQuotation"}
	sapSalesQuotationHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesQuotationHeaderDatumSlice is an alias for a slice of pointers to SapSalesQuotationHeaderDatum.
	// This should almost always be used instead of []SapSalesQuotationHeaderDatum.
	SapSalesQuotationHeaderDatumSlice []*SapSalesQuotationHeaderDatum
	// SapSalesQuotationHeaderDatumHook is the signature for custom SapSalesQuotationHeaderDatum hook methods
	SapSalesQuotationHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapSalesQuotationHeaderDatum) error

	sapSalesQuotationHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesQuotationHeaderDatumType                 = reflect.TypeOf(&SapSalesQuotationHeaderDatum{})
	sapSalesQuotationHeaderDatumMapping              = queries.MakeStructMapping(sapSalesQuotationHeaderDatumType)
	sapSalesQuotationHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, sapSalesQuotationHeaderDatumPrimaryKeyColumns)
	sapSalesQuotationHeaderDatumInsertCacheMut       sync.RWMutex
	sapSalesQuotationHeaderDatumInsertCache          = make(map[string]insertCache)
	sapSalesQuotationHeaderDatumUpdateCacheMut       sync.RWMutex
	sapSalesQuotationHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapSalesQuotationHeaderDatumUpsertCacheMut       sync.RWMutex
	sapSalesQuotationHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesQuotationHeaderDatumAfterSelectHooks []SapSalesQuotationHeaderDatumHook

var sapSalesQuotationHeaderDatumBeforeInsertHooks []SapSalesQuotationHeaderDatumHook
var sapSalesQuotationHeaderDatumAfterInsertHooks []SapSalesQuotationHeaderDatumHook

var sapSalesQuotationHeaderDatumBeforeUpdateHooks []SapSalesQuotationHeaderDatumHook
var sapSalesQuotationHeaderDatumAfterUpdateHooks []SapSalesQuotationHeaderDatumHook

var sapSalesQuotationHeaderDatumBeforeDeleteHooks []SapSalesQuotationHeaderDatumHook
var sapSalesQuotationHeaderDatumAfterDeleteHooks []SapSalesQuotationHeaderDatumHook

var sapSalesQuotationHeaderDatumBeforeUpsertHooks []SapSalesQuotationHeaderDatumHook
var sapSalesQuotationHeaderDatumAfterUpsertHooks []SapSalesQuotationHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesQuotationHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesQuotationHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesQuotationHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesQuotationHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesQuotationHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesQuotationHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesQuotationHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesQuotationHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesQuotationHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesQuotationHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesQuotationHeaderDatumHook registers your hook function for all future operations.
func AddSapSalesQuotationHeaderDatumHook(hookPoint boil.HookPoint, sapSalesQuotationHeaderDatumHook SapSalesQuotationHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesQuotationHeaderDatumAfterSelectHooks = append(sapSalesQuotationHeaderDatumAfterSelectHooks, sapSalesQuotationHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapSalesQuotationHeaderDatumBeforeInsertHooks = append(sapSalesQuotationHeaderDatumBeforeInsertHooks, sapSalesQuotationHeaderDatumHook)
	case boil.AfterInsertHook:
		sapSalesQuotationHeaderDatumAfterInsertHooks = append(sapSalesQuotationHeaderDatumAfterInsertHooks, sapSalesQuotationHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesQuotationHeaderDatumBeforeUpdateHooks = append(sapSalesQuotationHeaderDatumBeforeUpdateHooks, sapSalesQuotationHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapSalesQuotationHeaderDatumAfterUpdateHooks = append(sapSalesQuotationHeaderDatumAfterUpdateHooks, sapSalesQuotationHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesQuotationHeaderDatumBeforeDeleteHooks = append(sapSalesQuotationHeaderDatumBeforeDeleteHooks, sapSalesQuotationHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapSalesQuotationHeaderDatumAfterDeleteHooks = append(sapSalesQuotationHeaderDatumAfterDeleteHooks, sapSalesQuotationHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesQuotationHeaderDatumBeforeUpsertHooks = append(sapSalesQuotationHeaderDatumBeforeUpsertHooks, sapSalesQuotationHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapSalesQuotationHeaderDatumAfterUpsertHooks = append(sapSalesQuotationHeaderDatumAfterUpsertHooks, sapSalesQuotationHeaderDatumHook)
	}
}

// One returns a single sapSalesQuotationHeaderDatum record from the query.
func (q sapSalesQuotationHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesQuotationHeaderDatum, error) {
	o := &SapSalesQuotationHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_quotation_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesQuotationHeaderDatum records from the query.
func (q sapSalesQuotationHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesQuotationHeaderDatumSlice, error) {
	var o []*SapSalesQuotationHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesQuotationHeaderDatum slice")
	}

	if len(sapSalesQuotationHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesQuotationHeaderDatum records in the query.
func (q sapSalesQuotationHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_quotation_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesQuotationHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_quotation_header_data exists")
	}

	return count > 0, nil
}

// SalesQuotationSapSalesQuotationHeaderPartnerData retrieves all the sap_sales_quotation_header_partner_datum's SapSalesQuotationHeaderPartnerData with an executor via SalesQuotation column.
func (o *SapSalesQuotationHeaderDatum) SalesQuotationSapSalesQuotationHeaderPartnerData(mods ...qm.QueryMod) sapSalesQuotationHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_quotation_header_partner_data`.`SalesQuotation`=?", o.SalesQuotation),
	)

	query := SapSalesQuotationHeaderPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_quotation_header_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_quotation_header_partner_data`.*"})
	}

	return query
}

// SalesQuotationSapSalesQuotationItemData retrieves all the sap_sales_quotation_item_datum's SapSalesQuotationItemData with an executor via SalesQuotation column.
func (o *SapSalesQuotationHeaderDatum) SalesQuotationSapSalesQuotationItemData(mods ...qm.QueryMod) sapSalesQuotationItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_quotation_item_data`.`SalesQuotation`=?", o.SalesQuotation),
	)

	query := SapSalesQuotationItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_quotation_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_quotation_item_data`.*"})
	}

	return query
}

// LoadSalesQuotationSapSalesQuotationHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesQuotationHeaderDatumL) LoadSalesQuotationSapSalesQuotationHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesQuotationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesQuotationHeaderDatum
	var object *SapSalesQuotationHeaderDatum

	if singular {
		object = maybeSapSalesQuotationHeaderDatum.(*SapSalesQuotationHeaderDatum)
	} else {
		slice = *maybeSapSalesQuotationHeaderDatum.(*[]*SapSalesQuotationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesQuotationHeaderDatumR{}
		}
		args = append(args, object.SalesQuotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesQuotationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesQuotation {
					continue Outer
				}
			}

			args = append(args, obj.SalesQuotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_quotation_header_partner_data`),
		qm.WhereIn(`sap_sales_quotation_header_partner_data.SalesQuotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_quotation_header_partner_data")
	}

	var resultSlice []*SapSalesQuotationHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_quotation_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_quotation_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_quotation_header_partner_data")
	}

	if len(sapSalesQuotationHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesQuotationSapSalesQuotationHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesQuotationHeaderPartnerDatumR{}
			}
			foreign.R.SalesQuotationSapSalesQuotationHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesQuotation == foreign.SalesQuotation {
				local.R.SalesQuotationSapSalesQuotationHeaderPartnerData = append(local.R.SalesQuotationSapSalesQuotationHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesQuotationHeaderPartnerDatumR{}
				}
				foreign.R.SalesQuotationSapSalesQuotationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesQuotationSapSalesQuotationItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesQuotationHeaderDatumL) LoadSalesQuotationSapSalesQuotationItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesQuotationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesQuotationHeaderDatum
	var object *SapSalesQuotationHeaderDatum

	if singular {
		object = maybeSapSalesQuotationHeaderDatum.(*SapSalesQuotationHeaderDatum)
	} else {
		slice = *maybeSapSalesQuotationHeaderDatum.(*[]*SapSalesQuotationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesQuotationHeaderDatumR{}
		}
		args = append(args, object.SalesQuotation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesQuotationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesQuotation {
					continue Outer
				}
			}

			args = append(args, obj.SalesQuotation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_quotation_item_data`),
		qm.WhereIn(`sap_sales_quotation_item_data.SalesQuotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_quotation_item_data")
	}

	var resultSlice []*SapSalesQuotationItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_quotation_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_quotation_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_quotation_item_data")
	}

	if len(sapSalesQuotationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesQuotationSapSalesQuotationItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesQuotationItemDatumR{}
			}
			foreign.R.SalesQuotationSapSalesQuotationHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesQuotation == foreign.SalesQuotation {
				local.R.SalesQuotationSapSalesQuotationItemData = append(local.R.SalesQuotationSapSalesQuotationItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesQuotationItemDatumR{}
				}
				foreign.R.SalesQuotationSapSalesQuotationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddSalesQuotationSapSalesQuotationHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_sales_quotation_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesQuotationSapSalesQuotationHeaderPartnerData.
// Sets related.R.SalesQuotationSapSalesQuotationHeaderDatum appropriately.
func (o *SapSalesQuotationHeaderDatum) AddSalesQuotationSapSalesQuotationHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesQuotationHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesQuotation = o.SalesQuotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_quotation_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesQuotation"}),
				strmangle.WhereClause("`", "`", 0, sapSalesQuotationHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesQuotation, rel.SalesQuotation, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesQuotation = o.SalesQuotation
		}
	}

	if o.R == nil {
		o.R = &sapSalesQuotationHeaderDatumR{
			SalesQuotationSapSalesQuotationHeaderPartnerData: related,
		}
	} else {
		o.R.SalesQuotationSapSalesQuotationHeaderPartnerData = append(o.R.SalesQuotationSapSalesQuotationHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesQuotationHeaderPartnerDatumR{
				SalesQuotationSapSalesQuotationHeaderDatum: o,
			}
		} else {
			rel.R.SalesQuotationSapSalesQuotationHeaderDatum = o
		}
	}
	return nil
}

// AddSalesQuotationSapSalesQuotationItemData adds the given related objects to the existing relationships
// of the sap_sales_quotation_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesQuotationSapSalesQuotationItemData.
// Sets related.R.SalesQuotationSapSalesQuotationHeaderDatum appropriately.
func (o *SapSalesQuotationHeaderDatum) AddSalesQuotationSapSalesQuotationItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesQuotationItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesQuotation = o.SalesQuotation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_quotation_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesQuotation"}),
				strmangle.WhereClause("`", "`", 0, sapSalesQuotationItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesQuotation, rel.SalesQuotation, rel.SalesQuotationItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesQuotation = o.SalesQuotation
		}
	}

	if o.R == nil {
		o.R = &sapSalesQuotationHeaderDatumR{
			SalesQuotationSapSalesQuotationItemData: related,
		}
	} else {
		o.R.SalesQuotationSapSalesQuotationItemData = append(o.R.SalesQuotationSapSalesQuotationItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesQuotationItemDatumR{
				SalesQuotationSapSalesQuotationHeaderDatum: o,
			}
		} else {
			rel.R.SalesQuotationSapSalesQuotationHeaderDatum = o
		}
	}
	return nil
}

// SapSalesQuotationHeaderData retrieves all the records using an executor.
func SapSalesQuotationHeaderData(mods ...qm.QueryMod) sapSalesQuotationHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_sales_quotation_header_data`"))
	return sapSalesQuotationHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapSalesQuotationHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesQuotationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, salesQuotation string, selectCols ...string) (*SapSalesQuotationHeaderDatum, error) {
	sapSalesQuotationHeaderDatumObj := &SapSalesQuotationHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_quotation_header_data` where `SalesQuotation`=?", sel,
	)

	q := queries.Raw(query, salesQuotation)

	err := q.Bind(ctx, exec, sapSalesQuotationHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_quotation_header_data")
	}

	if err = sapSalesQuotationHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesQuotationHeaderDatumObj, err
	}

	return sapSalesQuotationHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesQuotationHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_quotation_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesQuotationHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesQuotationHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapSalesQuotationHeaderDatumInsertCache[key]
	sapSalesQuotationHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesQuotationHeaderDatumAllColumns,
			sapSalesQuotationHeaderDatumColumnsWithDefault,
			sapSalesQuotationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_quotation_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_quotation_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_quotation_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesQuotationHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_quotation_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesQuotation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_quotation_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesQuotationHeaderDatumInsertCacheMut.Lock()
		sapSalesQuotationHeaderDatumInsertCache[key] = cache
		sapSalesQuotationHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesQuotationHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesQuotationHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesQuotationHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesQuotationHeaderDatumUpdateCache[key]
	sapSalesQuotationHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesQuotationHeaderDatumAllColumns,
			sapSalesQuotationHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_quotation_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_quotation_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesQuotationHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, append(wl, sapSalesQuotationHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_quotation_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_quotation_header_data")
	}

	if !cached {
		sapSalesQuotationHeaderDatumUpdateCacheMut.Lock()
		sapSalesQuotationHeaderDatumUpdateCache[key] = cache
		sapSalesQuotationHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesQuotationHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_quotation_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_quotation_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesQuotationHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesQuotationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_quotation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesQuotationHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesQuotationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesQuotationHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesQuotationHeaderDatumUniqueColumns = []string{
	"SalesQuotation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesQuotationHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_quotation_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesQuotationHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesQuotationHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesQuotationHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesQuotationHeaderDatumUpsertCache[key]
	sapSalesQuotationHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesQuotationHeaderDatumAllColumns,
			sapSalesQuotationHeaderDatumColumnsWithDefault,
			sapSalesQuotationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesQuotationHeaderDatumAllColumns,
			sapSalesQuotationHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_quotation_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_quotation_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_quotation_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_quotation_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesQuotationHeaderDatumType, sapSalesQuotationHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_quotation_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_quotation_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesQuotationHeaderDatumUpsertCacheMut.Lock()
		sapSalesQuotationHeaderDatumUpsertCache[key] = cache
		sapSalesQuotationHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesQuotationHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesQuotationHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesQuotationHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesQuotationHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_quotation_header_data` WHERE `SalesQuotation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_quotation_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_quotation_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesQuotationHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesQuotationHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_quotation_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_quotation_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesQuotationHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesQuotationHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesQuotationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_quotation_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesQuotationHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesQuotationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_quotation_header_data")
	}

	if len(sapSalesQuotationHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesQuotationHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesQuotationHeaderDatum(ctx, exec, o.SalesQuotation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesQuotationHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesQuotationHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesQuotationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_quotation_header_data`.* FROM `sap_sales_quotation_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesQuotationHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesQuotationHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesQuotationHeaderDatumExists checks if the SapSalesQuotationHeaderDatum row exists.
func SapSalesQuotationHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, salesQuotation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_quotation_header_data` where `SalesQuotation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesQuotation)
	}
	row := exec.QueryRowContext(ctx, sql, salesQuotation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_quotation_header_data exists")
	}

	return exists, nil
}
