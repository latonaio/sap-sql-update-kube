// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionRoutingOperationDatum is an object representing the database table.
type SapProductionRoutingOperationDatum struct {
	ProductionRoutingGroup        string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting             string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingSequence     string      `boil:"ProductionRoutingSequence" json:"ProductionRoutingSequence" toml:"ProductionRoutingSequence" yaml:"ProductionRoutingSequence"`
	ProductionRoutingOpIntID      string      `boil:"ProductionRoutingOpIntID" json:"ProductionRoutingOpIntID" toml:"ProductionRoutingOpIntID" yaml:"ProductionRoutingOpIntID"`
	ProductionRoutingOpIntVersion string      `boil:"ProductionRoutingOpIntVersion" json:"ProductionRoutingOpIntVersion" toml:"ProductionRoutingOpIntVersion" yaml:"ProductionRoutingOpIntVersion"`
	Operation                     null.String `boil:"Operation" json:"Operation,omitempty" toml:"Operation" yaml:"Operation,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ChangeNumber                  null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ValidityStartDate             null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate               null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	OperationText                 null.String `boil:"OperationText" json:"OperationText,omitempty" toml:"OperationText" yaml:"OperationText,omitempty"`
	LongTextLanguageCode          null.String `boil:"LongTextLanguageCode" json:"LongTextLanguageCode,omitempty" toml:"LongTextLanguageCode" yaml:"LongTextLanguageCode,omitempty"`
	Plant                         null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	OperationControlProfile       null.String `boil:"OperationControlProfile" json:"OperationControlProfile,omitempty" toml:"OperationControlProfile" yaml:"OperationControlProfile,omitempty"`
	OperationStandardTextCode     null.String `boil:"OperationStandardTextCode" json:"OperationStandardTextCode,omitempty" toml:"OperationStandardTextCode" yaml:"OperationStandardTextCode,omitempty"`
	WorkCenterTypeCode            null.String `boil:"WorkCenterTypeCode" json:"WorkCenterTypeCode,omitempty" toml:"WorkCenterTypeCode" yaml:"WorkCenterTypeCode,omitempty"`
	WorkCenterInternalID          null.String `boil:"WorkCenterInternalID" json:"WorkCenterInternalID,omitempty" toml:"WorkCenterInternalID" yaml:"WorkCenterInternalID,omitempty"`
	CapacityCategoryCode          null.String `boil:"CapacityCategoryCode" json:"CapacityCategoryCode,omitempty" toml:"CapacityCategoryCode" yaml:"CapacityCategoryCode,omitempty"`
	OperationCostingRelevancyType null.String `boil:"OperationCostingRelevancyType" json:"OperationCostingRelevancyType,omitempty" toml:"OperationCostingRelevancyType" yaml:"OperationCostingRelevancyType,omitempty"`
	NumberOfTimeTickets           null.String `boil:"NumberOfTimeTickets" json:"NumberOfTimeTickets,omitempty" toml:"NumberOfTimeTickets" yaml:"NumberOfTimeTickets,omitempty"`
	NumberOfConfirmationSlips     null.String `boil:"NumberOfConfirmationSlips" json:"NumberOfConfirmationSlips,omitempty" toml:"NumberOfConfirmationSlips" yaml:"NumberOfConfirmationSlips,omitempty"`
	OperationSetupType            null.String `boil:"OperationSetupType" json:"OperationSetupType,omitempty" toml:"OperationSetupType" yaml:"OperationSetupType,omitempty"`
	OperationSetupGroupCategory   null.String `boil:"OperationSetupGroupCategory" json:"OperationSetupGroupCategory,omitempty" toml:"OperationSetupGroupCategory" yaml:"OperationSetupGroupCategory,omitempty"`
	OperationSetupGroup           null.String `boil:"OperationSetupGroup" json:"OperationSetupGroup,omitempty" toml:"OperationSetupGroup" yaml:"OperationSetupGroup,omitempty"`
	OperationReferenceQuantity    null.String `boil:"OperationReferenceQuantity" json:"OperationReferenceQuantity,omitempty" toml:"OperationReferenceQuantity" yaml:"OperationReferenceQuantity,omitempty"`
	OperationUnit                 null.String `boil:"OperationUnit" json:"OperationUnit,omitempty" toml:"OperationUnit" yaml:"OperationUnit,omitempty"`
	OpQtyToBaseQtyNmrtr           null.String `boil:"OpQtyToBaseQtyNmrtr" json:"OpQtyToBaseQtyNmrtr,omitempty" toml:"OpQtyToBaseQtyNmrtr" yaml:"OpQtyToBaseQtyNmrtr,omitempty"`
	OpQtyToBaseQtyDnmntr          null.String `boil:"OpQtyToBaseQtyDnmntr" json:"OpQtyToBaseQtyDnmntr,omitempty" toml:"OpQtyToBaseQtyDnmntr" yaml:"OpQtyToBaseQtyDnmntr,omitempty"`
	MaximumWaitDuration           null.String `boil:"MaximumWaitDuration" json:"MaximumWaitDuration,omitempty" toml:"MaximumWaitDuration" yaml:"MaximumWaitDuration,omitempty"`
	MaximumWaitDurationUnit       null.String `boil:"MaximumWaitDurationUnit" json:"MaximumWaitDurationUnit,omitempty" toml:"MaximumWaitDurationUnit" yaml:"MaximumWaitDurationUnit,omitempty"`
	MinimumWaitDuration           null.String `boil:"MinimumWaitDuration" json:"MinimumWaitDuration,omitempty" toml:"MinimumWaitDuration" yaml:"MinimumWaitDuration,omitempty"`
	MinimumWaitDurationUnit       null.String `boil:"MinimumWaitDurationUnit" json:"MinimumWaitDurationUnit,omitempty" toml:"MinimumWaitDurationUnit" yaml:"MinimumWaitDurationUnit,omitempty"`
	StandardQueueDuration         null.String `boil:"StandardQueueDuration" json:"StandardQueueDuration,omitempty" toml:"StandardQueueDuration" yaml:"StandardQueueDuration,omitempty"`
	StandardQueueDurationUnit     null.String `boil:"StandardQueueDurationUnit" json:"StandardQueueDurationUnit,omitempty" toml:"StandardQueueDurationUnit" yaml:"StandardQueueDurationUnit,omitempty"`
	MinimumQueueDuration          null.String `boil:"MinimumQueueDuration" json:"MinimumQueueDuration,omitempty" toml:"MinimumQueueDuration" yaml:"MinimumQueueDuration,omitempty"`
	MinimumQueueDurationUnit      null.String `boil:"MinimumQueueDurationUnit" json:"MinimumQueueDurationUnit,omitempty" toml:"MinimumQueueDurationUnit" yaml:"MinimumQueueDurationUnit,omitempty"`
	StandardMoveDuration          null.String `boil:"StandardMoveDuration" json:"StandardMoveDuration,omitempty" toml:"StandardMoveDuration" yaml:"StandardMoveDuration,omitempty"`
	StandardMoveDurationUnit      null.String `boil:"StandardMoveDurationUnit" json:"StandardMoveDurationUnit,omitempty" toml:"StandardMoveDurationUnit" yaml:"StandardMoveDurationUnit,omitempty"`
	MinimumMoveDuration           null.String `boil:"MinimumMoveDuration" json:"MinimumMoveDuration,omitempty" toml:"MinimumMoveDuration" yaml:"MinimumMoveDuration,omitempty"`
	MinimumMoveDurationUnit       null.String `boil:"MinimumMoveDurationUnit" json:"MinimumMoveDurationUnit,omitempty" toml:"MinimumMoveDurationUnit" yaml:"MinimumMoveDurationUnit,omitempty"`
	OpIsExtlyProcdWithSubcontrg   null.Bool   `boil:"OpIsExtlyProcdWithSubcontrg" json:"OpIsExtlyProcdWithSubcontrg,omitempty" toml:"OpIsExtlyProcdWithSubcontrg" yaml:"OpIsExtlyProcdWithSubcontrg,omitempty"`
	PurchasingInfoRecord          null.String `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord,omitempty" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord,omitempty"`
	PurchasingOrganization        null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	PlannedDeliveryDuration       null.String `boil:"PlannedDeliveryDuration" json:"PlannedDeliveryDuration,omitempty" toml:"PlannedDeliveryDuration" yaml:"PlannedDeliveryDuration,omitempty"`
	MaterialGroup                 null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	PurchasingGroup               null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	Supplier                      null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	NumberOfOperationPriceUnits   null.String `boil:"NumberOfOperationPriceUnits" json:"NumberOfOperationPriceUnits,omitempty" toml:"NumberOfOperationPriceUnits" yaml:"NumberOfOperationPriceUnits,omitempty"`
	CostElement                   null.String `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	OpExternalProcessingPrice     null.String `boil:"OpExternalProcessingPrice" json:"OpExternalProcessingPrice,omitempty" toml:"OpExternalProcessingPrice" yaml:"OpExternalProcessingPrice,omitempty"`
	OpExternalProcessingCurrency  null.String `boil:"OpExternalProcessingCurrency" json:"OpExternalProcessingCurrency,omitempty" toml:"OpExternalProcessingCurrency" yaml:"OpExternalProcessingCurrency,omitempty"`
	OperationScrapPercent         null.String `boil:"OperationScrapPercent" json:"OperationScrapPercent,omitempty" toml:"OperationScrapPercent" yaml:"OperationScrapPercent,omitempty"`
	ChangedDateTime               null.String `boil:"ChangedDateTime" json:"ChangedDateTime,omitempty" toml:"ChangedDateTime" yaml:"ChangedDateTime,omitempty"`
	PlainLongText                 null.String `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`

	R *sapProductionRoutingOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionRoutingOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionRoutingOperationDatumColumns = struct {
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingSequence     string
	ProductionRoutingOpIntID      string
	ProductionRoutingOpIntVersion string
	Operation                     string
	CreationDate                  string
	LastChangeDate                string
	ChangeNumber                  string
	ValidityStartDate             string
	ValidityEndDate               string
	OperationText                 string
	LongTextLanguageCode          string
	Plant                         string
	OperationControlProfile       string
	OperationStandardTextCode     string
	WorkCenterTypeCode            string
	WorkCenterInternalID          string
	CapacityCategoryCode          string
	OperationCostingRelevancyType string
	NumberOfTimeTickets           string
	NumberOfConfirmationSlips     string
	OperationSetupType            string
	OperationSetupGroupCategory   string
	OperationSetupGroup           string
	OperationReferenceQuantity    string
	OperationUnit                 string
	OpQtyToBaseQtyNmrtr           string
	OpQtyToBaseQtyDnmntr          string
	MaximumWaitDuration           string
	MaximumWaitDurationUnit       string
	MinimumWaitDuration           string
	MinimumWaitDurationUnit       string
	StandardQueueDuration         string
	StandardQueueDurationUnit     string
	MinimumQueueDuration          string
	MinimumQueueDurationUnit      string
	StandardMoveDuration          string
	StandardMoveDurationUnit      string
	MinimumMoveDuration           string
	MinimumMoveDurationUnit       string
	OpIsExtlyProcdWithSubcontrg   string
	PurchasingInfoRecord          string
	PurchasingOrganization        string
	PlannedDeliveryDuration       string
	MaterialGroup                 string
	PurchasingGroup               string
	Supplier                      string
	NumberOfOperationPriceUnits   string
	CostElement                   string
	OpExternalProcessingPrice     string
	OpExternalProcessingCurrency  string
	OperationScrapPercent         string
	ChangedDateTime               string
	PlainLongText                 string
}{
	ProductionRoutingGroup:        "ProductionRoutingGroup",
	ProductionRouting:             "ProductionRouting",
	ProductionRoutingSequence:     "ProductionRoutingSequence",
	ProductionRoutingOpIntID:      "ProductionRoutingOpIntID",
	ProductionRoutingOpIntVersion: "ProductionRoutingOpIntVersion",
	Operation:                     "Operation",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	ChangeNumber:                  "ChangeNumber",
	ValidityStartDate:             "ValidityStartDate",
	ValidityEndDate:               "ValidityEndDate",
	OperationText:                 "OperationText",
	LongTextLanguageCode:          "LongTextLanguageCode",
	Plant:                         "Plant",
	OperationControlProfile:       "OperationControlProfile",
	OperationStandardTextCode:     "OperationStandardTextCode",
	WorkCenterTypeCode:            "WorkCenterTypeCode",
	WorkCenterInternalID:          "WorkCenterInternalID",
	CapacityCategoryCode:          "CapacityCategoryCode",
	OperationCostingRelevancyType: "OperationCostingRelevancyType",
	NumberOfTimeTickets:           "NumberOfTimeTickets",
	NumberOfConfirmationSlips:     "NumberOfConfirmationSlips",
	OperationSetupType:            "OperationSetupType",
	OperationSetupGroupCategory:   "OperationSetupGroupCategory",
	OperationSetupGroup:           "OperationSetupGroup",
	OperationReferenceQuantity:    "OperationReferenceQuantity",
	OperationUnit:                 "OperationUnit",
	OpQtyToBaseQtyNmrtr:           "OpQtyToBaseQtyNmrtr",
	OpQtyToBaseQtyDnmntr:          "OpQtyToBaseQtyDnmntr",
	MaximumWaitDuration:           "MaximumWaitDuration",
	MaximumWaitDurationUnit:       "MaximumWaitDurationUnit",
	MinimumWaitDuration:           "MinimumWaitDuration",
	MinimumWaitDurationUnit:       "MinimumWaitDurationUnit",
	StandardQueueDuration:         "StandardQueueDuration",
	StandardQueueDurationUnit:     "StandardQueueDurationUnit",
	MinimumQueueDuration:          "MinimumQueueDuration",
	MinimumQueueDurationUnit:      "MinimumQueueDurationUnit",
	StandardMoveDuration:          "StandardMoveDuration",
	StandardMoveDurationUnit:      "StandardMoveDurationUnit",
	MinimumMoveDuration:           "MinimumMoveDuration",
	MinimumMoveDurationUnit:       "MinimumMoveDurationUnit",
	OpIsExtlyProcdWithSubcontrg:   "OpIsExtlyProcdWithSubcontrg",
	PurchasingInfoRecord:          "PurchasingInfoRecord",
	PurchasingOrganization:        "PurchasingOrganization",
	PlannedDeliveryDuration:       "PlannedDeliveryDuration",
	MaterialGroup:                 "MaterialGroup",
	PurchasingGroup:               "PurchasingGroup",
	Supplier:                      "Supplier",
	NumberOfOperationPriceUnits:   "NumberOfOperationPriceUnits",
	CostElement:                   "CostElement",
	OpExternalProcessingPrice:     "OpExternalProcessingPrice",
	OpExternalProcessingCurrency:  "OpExternalProcessingCurrency",
	OperationScrapPercent:         "OperationScrapPercent",
	ChangedDateTime:               "ChangedDateTime",
	PlainLongText:                 "PlainLongText",
}

var SapProductionRoutingOperationDatumTableColumns = struct {
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingSequence     string
	ProductionRoutingOpIntID      string
	ProductionRoutingOpIntVersion string
	Operation                     string
	CreationDate                  string
	LastChangeDate                string
	ChangeNumber                  string
	ValidityStartDate             string
	ValidityEndDate               string
	OperationText                 string
	LongTextLanguageCode          string
	Plant                         string
	OperationControlProfile       string
	OperationStandardTextCode     string
	WorkCenterTypeCode            string
	WorkCenterInternalID          string
	CapacityCategoryCode          string
	OperationCostingRelevancyType string
	NumberOfTimeTickets           string
	NumberOfConfirmationSlips     string
	OperationSetupType            string
	OperationSetupGroupCategory   string
	OperationSetupGroup           string
	OperationReferenceQuantity    string
	OperationUnit                 string
	OpQtyToBaseQtyNmrtr           string
	OpQtyToBaseQtyDnmntr          string
	MaximumWaitDuration           string
	MaximumWaitDurationUnit       string
	MinimumWaitDuration           string
	MinimumWaitDurationUnit       string
	StandardQueueDuration         string
	StandardQueueDurationUnit     string
	MinimumQueueDuration          string
	MinimumQueueDurationUnit      string
	StandardMoveDuration          string
	StandardMoveDurationUnit      string
	MinimumMoveDuration           string
	MinimumMoveDurationUnit       string
	OpIsExtlyProcdWithSubcontrg   string
	PurchasingInfoRecord          string
	PurchasingOrganization        string
	PlannedDeliveryDuration       string
	MaterialGroup                 string
	PurchasingGroup               string
	Supplier                      string
	NumberOfOperationPriceUnits   string
	CostElement                   string
	OpExternalProcessingPrice     string
	OpExternalProcessingCurrency  string
	OperationScrapPercent         string
	ChangedDateTime               string
	PlainLongText                 string
}{
	ProductionRoutingGroup:        "sap_production_routing_operation_data.ProductionRoutingGroup",
	ProductionRouting:             "sap_production_routing_operation_data.ProductionRouting",
	ProductionRoutingSequence:     "sap_production_routing_operation_data.ProductionRoutingSequence",
	ProductionRoutingOpIntID:      "sap_production_routing_operation_data.ProductionRoutingOpIntID",
	ProductionRoutingOpIntVersion: "sap_production_routing_operation_data.ProductionRoutingOpIntVersion",
	Operation:                     "sap_production_routing_operation_data.Operation",
	CreationDate:                  "sap_production_routing_operation_data.CreationDate",
	LastChangeDate:                "sap_production_routing_operation_data.LastChangeDate",
	ChangeNumber:                  "sap_production_routing_operation_data.ChangeNumber",
	ValidityStartDate:             "sap_production_routing_operation_data.ValidityStartDate",
	ValidityEndDate:               "sap_production_routing_operation_data.ValidityEndDate",
	OperationText:                 "sap_production_routing_operation_data.OperationText",
	LongTextLanguageCode:          "sap_production_routing_operation_data.LongTextLanguageCode",
	Plant:                         "sap_production_routing_operation_data.Plant",
	OperationControlProfile:       "sap_production_routing_operation_data.OperationControlProfile",
	OperationStandardTextCode:     "sap_production_routing_operation_data.OperationStandardTextCode",
	WorkCenterTypeCode:            "sap_production_routing_operation_data.WorkCenterTypeCode",
	WorkCenterInternalID:          "sap_production_routing_operation_data.WorkCenterInternalID",
	CapacityCategoryCode:          "sap_production_routing_operation_data.CapacityCategoryCode",
	OperationCostingRelevancyType: "sap_production_routing_operation_data.OperationCostingRelevancyType",
	NumberOfTimeTickets:           "sap_production_routing_operation_data.NumberOfTimeTickets",
	NumberOfConfirmationSlips:     "sap_production_routing_operation_data.NumberOfConfirmationSlips",
	OperationSetupType:            "sap_production_routing_operation_data.OperationSetupType",
	OperationSetupGroupCategory:   "sap_production_routing_operation_data.OperationSetupGroupCategory",
	OperationSetupGroup:           "sap_production_routing_operation_data.OperationSetupGroup",
	OperationReferenceQuantity:    "sap_production_routing_operation_data.OperationReferenceQuantity",
	OperationUnit:                 "sap_production_routing_operation_data.OperationUnit",
	OpQtyToBaseQtyNmrtr:           "sap_production_routing_operation_data.OpQtyToBaseQtyNmrtr",
	OpQtyToBaseQtyDnmntr:          "sap_production_routing_operation_data.OpQtyToBaseQtyDnmntr",
	MaximumWaitDuration:           "sap_production_routing_operation_data.MaximumWaitDuration",
	MaximumWaitDurationUnit:       "sap_production_routing_operation_data.MaximumWaitDurationUnit",
	MinimumWaitDuration:           "sap_production_routing_operation_data.MinimumWaitDuration",
	MinimumWaitDurationUnit:       "sap_production_routing_operation_data.MinimumWaitDurationUnit",
	StandardQueueDuration:         "sap_production_routing_operation_data.StandardQueueDuration",
	StandardQueueDurationUnit:     "sap_production_routing_operation_data.StandardQueueDurationUnit",
	MinimumQueueDuration:          "sap_production_routing_operation_data.MinimumQueueDuration",
	MinimumQueueDurationUnit:      "sap_production_routing_operation_data.MinimumQueueDurationUnit",
	StandardMoveDuration:          "sap_production_routing_operation_data.StandardMoveDuration",
	StandardMoveDurationUnit:      "sap_production_routing_operation_data.StandardMoveDurationUnit",
	MinimumMoveDuration:           "sap_production_routing_operation_data.MinimumMoveDuration",
	MinimumMoveDurationUnit:       "sap_production_routing_operation_data.MinimumMoveDurationUnit",
	OpIsExtlyProcdWithSubcontrg:   "sap_production_routing_operation_data.OpIsExtlyProcdWithSubcontrg",
	PurchasingInfoRecord:          "sap_production_routing_operation_data.PurchasingInfoRecord",
	PurchasingOrganization:        "sap_production_routing_operation_data.PurchasingOrganization",
	PlannedDeliveryDuration:       "sap_production_routing_operation_data.PlannedDeliveryDuration",
	MaterialGroup:                 "sap_production_routing_operation_data.MaterialGroup",
	PurchasingGroup:               "sap_production_routing_operation_data.PurchasingGroup",
	Supplier:                      "sap_production_routing_operation_data.Supplier",
	NumberOfOperationPriceUnits:   "sap_production_routing_operation_data.NumberOfOperationPriceUnits",
	CostElement:                   "sap_production_routing_operation_data.CostElement",
	OpExternalProcessingPrice:     "sap_production_routing_operation_data.OpExternalProcessingPrice",
	OpExternalProcessingCurrency:  "sap_production_routing_operation_data.OpExternalProcessingCurrency",
	OperationScrapPercent:         "sap_production_routing_operation_data.OperationScrapPercent",
	ChangedDateTime:               "sap_production_routing_operation_data.ChangedDateTime",
	PlainLongText:                 "sap_production_routing_operation_data.PlainLongText",
}

// Generated where

var SapProductionRoutingOperationDatumWhere = struct {
	ProductionRoutingGroup        whereHelperstring
	ProductionRouting             whereHelperstring
	ProductionRoutingSequence     whereHelperstring
	ProductionRoutingOpIntID      whereHelperstring
	ProductionRoutingOpIntVersion whereHelperstring
	Operation                     whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	ChangeNumber                  whereHelpernull_String
	ValidityStartDate             whereHelpernull_String
	ValidityEndDate               whereHelpernull_String
	OperationText                 whereHelpernull_String
	LongTextLanguageCode          whereHelpernull_String
	Plant                         whereHelpernull_String
	OperationControlProfile       whereHelpernull_String
	OperationStandardTextCode     whereHelpernull_String
	WorkCenterTypeCode            whereHelpernull_String
	WorkCenterInternalID          whereHelpernull_String
	CapacityCategoryCode          whereHelpernull_String
	OperationCostingRelevancyType whereHelpernull_String
	NumberOfTimeTickets           whereHelpernull_String
	NumberOfConfirmationSlips     whereHelpernull_String
	OperationSetupType            whereHelpernull_String
	OperationSetupGroupCategory   whereHelpernull_String
	OperationSetupGroup           whereHelpernull_String
	OperationReferenceQuantity    whereHelpernull_String
	OperationUnit                 whereHelpernull_String
	OpQtyToBaseQtyNmrtr           whereHelpernull_String
	OpQtyToBaseQtyDnmntr          whereHelpernull_String
	MaximumWaitDuration           whereHelpernull_String
	MaximumWaitDurationUnit       whereHelpernull_String
	MinimumWaitDuration           whereHelpernull_String
	MinimumWaitDurationUnit       whereHelpernull_String
	StandardQueueDuration         whereHelpernull_String
	StandardQueueDurationUnit     whereHelpernull_String
	MinimumQueueDuration          whereHelpernull_String
	MinimumQueueDurationUnit      whereHelpernull_String
	StandardMoveDuration          whereHelpernull_String
	StandardMoveDurationUnit      whereHelpernull_String
	MinimumMoveDuration           whereHelpernull_String
	MinimumMoveDurationUnit       whereHelpernull_String
	OpIsExtlyProcdWithSubcontrg   whereHelpernull_Bool
	PurchasingInfoRecord          whereHelpernull_String
	PurchasingOrganization        whereHelpernull_String
	PlannedDeliveryDuration       whereHelpernull_String
	MaterialGroup                 whereHelpernull_String
	PurchasingGroup               whereHelpernull_String
	Supplier                      whereHelpernull_String
	NumberOfOperationPriceUnits   whereHelpernull_String
	CostElement                   whereHelpernull_String
	OpExternalProcessingPrice     whereHelpernull_String
	OpExternalProcessingCurrency  whereHelpernull_String
	OperationScrapPercent         whereHelpernull_String
	ChangedDateTime               whereHelpernull_String
	PlainLongText                 whereHelpernull_String
}{
	ProductionRoutingGroup:        whereHelperstring{field: "`sap_production_routing_operation_data`.`ProductionRoutingGroup`"},
	ProductionRouting:             whereHelperstring{field: "`sap_production_routing_operation_data`.`ProductionRouting`"},
	ProductionRoutingSequence:     whereHelperstring{field: "`sap_production_routing_operation_data`.`ProductionRoutingSequence`"},
	ProductionRoutingOpIntID:      whereHelperstring{field: "`sap_production_routing_operation_data`.`ProductionRoutingOpIntID`"},
	ProductionRoutingOpIntVersion: whereHelperstring{field: "`sap_production_routing_operation_data`.`ProductionRoutingOpIntVersion`"},
	Operation:                     whereHelpernull_String{field: "`sap_production_routing_operation_data`.`Operation`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_production_routing_operation_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_production_routing_operation_data`.`LastChangeDate`"},
	ChangeNumber:                  whereHelpernull_String{field: "`sap_production_routing_operation_data`.`ChangeNumber`"},
	ValidityStartDate:             whereHelpernull_String{field: "`sap_production_routing_operation_data`.`ValidityStartDate`"},
	ValidityEndDate:               whereHelpernull_String{field: "`sap_production_routing_operation_data`.`ValidityEndDate`"},
	OperationText:                 whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationText`"},
	LongTextLanguageCode:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`LongTextLanguageCode`"},
	Plant:                         whereHelpernull_String{field: "`sap_production_routing_operation_data`.`Plant`"},
	OperationControlProfile:       whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationControlProfile`"},
	OperationStandardTextCode:     whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationStandardTextCode`"},
	WorkCenterTypeCode:            whereHelpernull_String{field: "`sap_production_routing_operation_data`.`WorkCenterTypeCode`"},
	WorkCenterInternalID:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`WorkCenterInternalID`"},
	CapacityCategoryCode:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`CapacityCategoryCode`"},
	OperationCostingRelevancyType: whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationCostingRelevancyType`"},
	NumberOfTimeTickets:           whereHelpernull_String{field: "`sap_production_routing_operation_data`.`NumberOfTimeTickets`"},
	NumberOfConfirmationSlips:     whereHelpernull_String{field: "`sap_production_routing_operation_data`.`NumberOfConfirmationSlips`"},
	OperationSetupType:            whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationSetupType`"},
	OperationSetupGroupCategory:   whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationSetupGroupCategory`"},
	OperationSetupGroup:           whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationSetupGroup`"},
	OperationReferenceQuantity:    whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationReferenceQuantity`"},
	OperationUnit:                 whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationUnit`"},
	OpQtyToBaseQtyNmrtr:           whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OpQtyToBaseQtyNmrtr`"},
	OpQtyToBaseQtyDnmntr:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OpQtyToBaseQtyDnmntr`"},
	MaximumWaitDuration:           whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MaximumWaitDuration`"},
	MaximumWaitDurationUnit:       whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MaximumWaitDurationUnit`"},
	MinimumWaitDuration:           whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MinimumWaitDuration`"},
	MinimumWaitDurationUnit:       whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MinimumWaitDurationUnit`"},
	StandardQueueDuration:         whereHelpernull_String{field: "`sap_production_routing_operation_data`.`StandardQueueDuration`"},
	StandardQueueDurationUnit:     whereHelpernull_String{field: "`sap_production_routing_operation_data`.`StandardQueueDurationUnit`"},
	MinimumQueueDuration:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MinimumQueueDuration`"},
	MinimumQueueDurationUnit:      whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MinimumQueueDurationUnit`"},
	StandardMoveDuration:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`StandardMoveDuration`"},
	StandardMoveDurationUnit:      whereHelpernull_String{field: "`sap_production_routing_operation_data`.`StandardMoveDurationUnit`"},
	MinimumMoveDuration:           whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MinimumMoveDuration`"},
	MinimumMoveDurationUnit:       whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MinimumMoveDurationUnit`"},
	OpIsExtlyProcdWithSubcontrg:   whereHelpernull_Bool{field: "`sap_production_routing_operation_data`.`OpIsExtlyProcdWithSubcontrg`"},
	PurchasingInfoRecord:          whereHelpernull_String{field: "`sap_production_routing_operation_data`.`PurchasingInfoRecord`"},
	PurchasingOrganization:        whereHelpernull_String{field: "`sap_production_routing_operation_data`.`PurchasingOrganization`"},
	PlannedDeliveryDuration:       whereHelpernull_String{field: "`sap_production_routing_operation_data`.`PlannedDeliveryDuration`"},
	MaterialGroup:                 whereHelpernull_String{field: "`sap_production_routing_operation_data`.`MaterialGroup`"},
	PurchasingGroup:               whereHelpernull_String{field: "`sap_production_routing_operation_data`.`PurchasingGroup`"},
	Supplier:                      whereHelpernull_String{field: "`sap_production_routing_operation_data`.`Supplier`"},
	NumberOfOperationPriceUnits:   whereHelpernull_String{field: "`sap_production_routing_operation_data`.`NumberOfOperationPriceUnits`"},
	CostElement:                   whereHelpernull_String{field: "`sap_production_routing_operation_data`.`CostElement`"},
	OpExternalProcessingPrice:     whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OpExternalProcessingPrice`"},
	OpExternalProcessingCurrency:  whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OpExternalProcessingCurrency`"},
	OperationScrapPercent:         whereHelpernull_String{field: "`sap_production_routing_operation_data`.`OperationScrapPercent`"},
	ChangedDateTime:               whereHelpernull_String{field: "`sap_production_routing_operation_data`.`ChangedDateTime`"},
	PlainLongText:                 whereHelpernull_String{field: "`sap_production_routing_operation_data`.`PlainLongText`"},
}

// SapProductionRoutingOperationDatumRels is where relationship names are stored.
var SapProductionRoutingOperationDatumRels = struct {
}{}

// sapProductionRoutingOperationDatumR is where relationships are stored.
type sapProductionRoutingOperationDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapProductionRoutingOperationDatumR) NewStruct() *sapProductionRoutingOperationDatumR {
	return &sapProductionRoutingOperationDatumR{}
}

// sapProductionRoutingOperationDatumL is where Load methods for each relationship are stored.
type sapProductionRoutingOperationDatumL struct{}

var (
	sapProductionRoutingOperationDatumAllColumns            = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProductionRoutingOpIntVersion", "Operation", "CreationDate", "LastChangeDate", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "OperationText", "LongTextLanguageCode", "Plant", "OperationControlProfile", "OperationStandardTextCode", "WorkCenterTypeCode", "WorkCenterInternalID", "CapacityCategoryCode", "OperationCostingRelevancyType", "NumberOfTimeTickets", "NumberOfConfirmationSlips", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "OperationUnit", "OpQtyToBaseQtyNmrtr", "OpQtyToBaseQtyDnmntr", "MaximumWaitDuration", "MaximumWaitDurationUnit", "MinimumWaitDuration", "MinimumWaitDurationUnit", "StandardQueueDuration", "StandardQueueDurationUnit", "MinimumQueueDuration", "MinimumQueueDurationUnit", "StandardMoveDuration", "StandardMoveDurationUnit", "MinimumMoveDuration", "MinimumMoveDurationUnit", "OpIsExtlyProcdWithSubcontrg", "PurchasingInfoRecord", "PurchasingOrganization", "PlannedDeliveryDuration", "MaterialGroup", "PurchasingGroup", "Supplier", "NumberOfOperationPriceUnits", "CostElement", "OpExternalProcessingPrice", "OpExternalProcessingCurrency", "OperationScrapPercent", "ChangedDateTime", "PlainLongText"}
	sapProductionRoutingOperationDatumColumnsWithoutDefault = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProductionRoutingOpIntVersion", "Operation", "CreationDate", "LastChangeDate", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "OperationText", "LongTextLanguageCode", "Plant", "OperationControlProfile", "OperationStandardTextCode", "WorkCenterTypeCode", "WorkCenterInternalID", "CapacityCategoryCode", "OperationCostingRelevancyType", "NumberOfTimeTickets", "NumberOfConfirmationSlips", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "OperationUnit", "OpQtyToBaseQtyNmrtr", "OpQtyToBaseQtyDnmntr", "MaximumWaitDuration", "MaximumWaitDurationUnit", "MinimumWaitDuration", "MinimumWaitDurationUnit", "StandardQueueDuration", "StandardQueueDurationUnit", "MinimumQueueDuration", "MinimumQueueDurationUnit", "StandardMoveDuration", "StandardMoveDurationUnit", "MinimumMoveDuration", "MinimumMoveDurationUnit", "OpIsExtlyProcdWithSubcontrg", "PurchasingInfoRecord", "PurchasingOrganization", "PlannedDeliveryDuration", "MaterialGroup", "PurchasingGroup", "Supplier", "NumberOfOperationPriceUnits", "CostElement", "OpExternalProcessingPrice", "OpExternalProcessingCurrency", "OperationScrapPercent", "ChangedDateTime", "PlainLongText"}
	sapProductionRoutingOperationDatumColumnsWithDefault    = []string{}
	sapProductionRoutingOperationDatumPrimaryKeyColumns     = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProductionRoutingOpIntVersion"}
	sapProductionRoutingOperationDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionRoutingOperationDatumSlice is an alias for a slice of pointers to SapProductionRoutingOperationDatum.
	// This should almost always be used instead of []SapProductionRoutingOperationDatum.
	SapProductionRoutingOperationDatumSlice []*SapProductionRoutingOperationDatum
	// SapProductionRoutingOperationDatumHook is the signature for custom SapProductionRoutingOperationDatum hook methods
	SapProductionRoutingOperationDatumHook func(context.Context, boil.ContextExecutor, *SapProductionRoutingOperationDatum) error

	sapProductionRoutingOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionRoutingOperationDatumType                 = reflect.TypeOf(&SapProductionRoutingOperationDatum{})
	sapProductionRoutingOperationDatumMapping              = queries.MakeStructMapping(sapProductionRoutingOperationDatumType)
	sapProductionRoutingOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, sapProductionRoutingOperationDatumPrimaryKeyColumns)
	sapProductionRoutingOperationDatumInsertCacheMut       sync.RWMutex
	sapProductionRoutingOperationDatumInsertCache          = make(map[string]insertCache)
	sapProductionRoutingOperationDatumUpdateCacheMut       sync.RWMutex
	sapProductionRoutingOperationDatumUpdateCache          = make(map[string]updateCache)
	sapProductionRoutingOperationDatumUpsertCacheMut       sync.RWMutex
	sapProductionRoutingOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionRoutingOperationDatumAfterSelectHooks []SapProductionRoutingOperationDatumHook

var sapProductionRoutingOperationDatumBeforeInsertHooks []SapProductionRoutingOperationDatumHook
var sapProductionRoutingOperationDatumAfterInsertHooks []SapProductionRoutingOperationDatumHook

var sapProductionRoutingOperationDatumBeforeUpdateHooks []SapProductionRoutingOperationDatumHook
var sapProductionRoutingOperationDatumAfterUpdateHooks []SapProductionRoutingOperationDatumHook

var sapProductionRoutingOperationDatumBeforeDeleteHooks []SapProductionRoutingOperationDatumHook
var sapProductionRoutingOperationDatumAfterDeleteHooks []SapProductionRoutingOperationDatumHook

var sapProductionRoutingOperationDatumBeforeUpsertHooks []SapProductionRoutingOperationDatumHook
var sapProductionRoutingOperationDatumAfterUpsertHooks []SapProductionRoutingOperationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionRoutingOperationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionRoutingOperationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionRoutingOperationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionRoutingOperationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionRoutingOperationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionRoutingOperationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionRoutingOperationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionRoutingOperationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionRoutingOperationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingOperationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionRoutingOperationDatumHook registers your hook function for all future operations.
func AddSapProductionRoutingOperationDatumHook(hookPoint boil.HookPoint, sapProductionRoutingOperationDatumHook SapProductionRoutingOperationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionRoutingOperationDatumAfterSelectHooks = append(sapProductionRoutingOperationDatumAfterSelectHooks, sapProductionRoutingOperationDatumHook)
	case boil.BeforeInsertHook:
		sapProductionRoutingOperationDatumBeforeInsertHooks = append(sapProductionRoutingOperationDatumBeforeInsertHooks, sapProductionRoutingOperationDatumHook)
	case boil.AfterInsertHook:
		sapProductionRoutingOperationDatumAfterInsertHooks = append(sapProductionRoutingOperationDatumAfterInsertHooks, sapProductionRoutingOperationDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionRoutingOperationDatumBeforeUpdateHooks = append(sapProductionRoutingOperationDatumBeforeUpdateHooks, sapProductionRoutingOperationDatumHook)
	case boil.AfterUpdateHook:
		sapProductionRoutingOperationDatumAfterUpdateHooks = append(sapProductionRoutingOperationDatumAfterUpdateHooks, sapProductionRoutingOperationDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionRoutingOperationDatumBeforeDeleteHooks = append(sapProductionRoutingOperationDatumBeforeDeleteHooks, sapProductionRoutingOperationDatumHook)
	case boil.AfterDeleteHook:
		sapProductionRoutingOperationDatumAfterDeleteHooks = append(sapProductionRoutingOperationDatumAfterDeleteHooks, sapProductionRoutingOperationDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionRoutingOperationDatumBeforeUpsertHooks = append(sapProductionRoutingOperationDatumBeforeUpsertHooks, sapProductionRoutingOperationDatumHook)
	case boil.AfterUpsertHook:
		sapProductionRoutingOperationDatumAfterUpsertHooks = append(sapProductionRoutingOperationDatumAfterUpsertHooks, sapProductionRoutingOperationDatumHook)
	}
}

// One returns a single sapProductionRoutingOperationDatum record from the query.
func (q sapProductionRoutingOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionRoutingOperationDatum, error) {
	o := &SapProductionRoutingOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_routing_operation_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionRoutingOperationDatum records from the query.
func (q sapProductionRoutingOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionRoutingOperationDatumSlice, error) {
	var o []*SapProductionRoutingOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionRoutingOperationDatum slice")
	}

	if len(sapProductionRoutingOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionRoutingOperationDatum records in the query.
func (q sapProductionRoutingOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_routing_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionRoutingOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_routing_operation_data exists")
	}

	return count > 0, nil
}

// SapProductionRoutingOperationData retrieves all the records using an executor.
func SapProductionRoutingOperationData(mods ...qm.QueryMod) sapProductionRoutingOperationDatumQuery {
	mods = append(mods, qm.From("`sap_production_routing_operation_data`"))
	return sapProductionRoutingOperationDatumQuery{NewQuery(mods...)}
}

// FindSapProductionRoutingOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionRoutingOperationDatum(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingOpIntID string, productionRoutingOpIntVersion string, selectCols ...string) (*SapProductionRoutingOperationDatum, error) {
	sapProductionRoutingOperationDatumObj := &SapProductionRoutingOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_routing_operation_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? AND `ProductionRoutingOpIntVersion`=?", sel,
	)

	q := queries.Raw(query, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID, productionRoutingOpIntVersion)

	err := q.Bind(ctx, exec, sapProductionRoutingOperationDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_routing_operation_data")
	}

	if err = sapProductionRoutingOperationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionRoutingOperationDatumObj, err
	}

	return sapProductionRoutingOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionRoutingOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_operation_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionRoutingOperationDatumInsertCacheMut.RLock()
	cache, cached := sapProductionRoutingOperationDatumInsertCache[key]
	sapProductionRoutingOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionRoutingOperationDatumAllColumns,
			sapProductionRoutingOperationDatumColumnsWithDefault,
			sapProductionRoutingOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_routing_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_routing_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_routing_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionRoutingOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_routing_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingSequence,
		o.ProductionRoutingOpIntID,
		o.ProductionRoutingOpIntVersion,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingOperationDatumInsertCacheMut.Lock()
		sapProductionRoutingOperationDatumInsertCache[key] = cache
		sapProductionRoutingOperationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionRoutingOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionRoutingOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionRoutingOperationDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionRoutingOperationDatumUpdateCache[key]
	sapProductionRoutingOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionRoutingOperationDatumAllColumns,
			sapProductionRoutingOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_routing_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_routing_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionRoutingOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, append(wl, sapProductionRoutingOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_routing_operation_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_routing_operation_data")
	}

	if !cached {
		sapProductionRoutingOperationDatumUpdateCacheMut.Lock()
		sapProductionRoutingOperationDatumUpdateCache[key] = cache
		sapProductionRoutingOperationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionRoutingOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_routing_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_routing_operation_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionRoutingOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_routing_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionRoutingOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionRoutingOperationDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionRoutingOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionRoutingOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_operation_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionRoutingOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionRoutingOperationDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionRoutingOperationDatumUpsertCache[key]
	sapProductionRoutingOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionRoutingOperationDatumAllColumns,
			sapProductionRoutingOperationDatumColumnsWithDefault,
			sapProductionRoutingOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionRoutingOperationDatumAllColumns,
			sapProductionRoutingOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_routing_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_routing_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_routing_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_routing_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionRoutingOperationDatumType, sapProductionRoutingOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_routing_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingOperationDatumUpsertCacheMut.Lock()
		sapProductionRoutingOperationDatumUpsertCache[key] = cache
		sapProductionRoutingOperationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionRoutingOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionRoutingOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionRoutingOperationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionRoutingOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_routing_operation_data` WHERE `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? AND `ProductionRoutingOpIntVersion`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_routing_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_routing_operation_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionRoutingOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionRoutingOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_routing_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_operation_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionRoutingOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionRoutingOperationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_routing_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionRoutingOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_operation_data")
	}

	if len(sapProductionRoutingOperationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionRoutingOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionRoutingOperationDatum(ctx, exec, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingSequence, o.ProductionRoutingOpIntID, o.ProductionRoutingOpIntVersion)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionRoutingOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionRoutingOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_routing_operation_data`.* FROM `sap_production_routing_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionRoutingOperationDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionRoutingOperationDatumExists checks if the SapProductionRoutingOperationDatum row exists.
func SapProductionRoutingOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingOpIntID string, productionRoutingOpIntVersion string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_routing_operation_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? AND `ProductionRoutingOpIntVersion`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID, productionRoutingOpIntVersion)
	}
	row := exec.QueryRowContext(ctx, sql, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID, productionRoutingOpIntVersion)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_routing_operation_data exists")
	}

	return exists, nil
}
