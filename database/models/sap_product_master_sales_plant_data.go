// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterSalesPlantDatum is an object representing the database table.
type SapProductMasterSalesPlantDatum struct {
	Product               string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                 string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	LoadingGroup          null.String `boil:"LoadingGroup" json:"LoadingGroup,omitempty" toml:"LoadingGroup" yaml:"LoadingGroup,omitempty"`
	AvailabilityCheckType null.String `boil:"AvailabilityCheckType" json:"AvailabilityCheckType,omitempty" toml:"AvailabilityCheckType" yaml:"AvailabilityCheckType,omitempty"`

	R *sapProductMasterSalesPlantDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterSalesPlantDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterSalesPlantDatumColumns = struct {
	Product               string
	Plant                 string
	LoadingGroup          string
	AvailabilityCheckType string
}{
	Product:               "Product",
	Plant:                 "Plant",
	LoadingGroup:          "LoadingGroup",
	AvailabilityCheckType: "AvailabilityCheckType",
}

var SapProductMasterSalesPlantDatumTableColumns = struct {
	Product               string
	Plant                 string
	LoadingGroup          string
	AvailabilityCheckType string
}{
	Product:               "sap_product_master_sales_plant_data.Product",
	Plant:                 "sap_product_master_sales_plant_data.Plant",
	LoadingGroup:          "sap_product_master_sales_plant_data.LoadingGroup",
	AvailabilityCheckType: "sap_product_master_sales_plant_data.AvailabilityCheckType",
}

// Generated where

var SapProductMasterSalesPlantDatumWhere = struct {
	Product               whereHelperstring
	Plant                 whereHelperstring
	LoadingGroup          whereHelpernull_String
	AvailabilityCheckType whereHelpernull_String
}{
	Product:               whereHelperstring{field: "`sap_product_master_sales_plant_data`.`Product`"},
	Plant:                 whereHelperstring{field: "`sap_product_master_sales_plant_data`.`Plant`"},
	LoadingGroup:          whereHelpernull_String{field: "`sap_product_master_sales_plant_data`.`LoadingGroup`"},
	AvailabilityCheckType: whereHelpernull_String{field: "`sap_product_master_sales_plant_data`.`AvailabilityCheckType`"},
}

// SapProductMasterSalesPlantDatumRels is where relationship names are stored.
var SapProductMasterSalesPlantDatumRels = struct {
	ProductSapProductMasterGeneralDatum string
}{
	ProductSapProductMasterGeneralDatum: "ProductSapProductMasterGeneralDatum",
}

// sapProductMasterSalesPlantDatumR is where relationships are stored.
type sapProductMasterSalesPlantDatumR struct {
	ProductSapProductMasterGeneralDatum *SapProductMasterGeneralDatum `boil:"ProductSapProductMasterGeneralDatum" json:"ProductSapProductMasterGeneralDatum" toml:"ProductSapProductMasterGeneralDatum" yaml:"ProductSapProductMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterSalesPlantDatumR) NewStruct() *sapProductMasterSalesPlantDatumR {
	return &sapProductMasterSalesPlantDatumR{}
}

// sapProductMasterSalesPlantDatumL is where Load methods for each relationship are stored.
type sapProductMasterSalesPlantDatumL struct{}

var (
	sapProductMasterSalesPlantDatumAllColumns            = []string{"Product", "Plant", "LoadingGroup", "AvailabilityCheckType"}
	sapProductMasterSalesPlantDatumColumnsWithoutDefault = []string{"Product", "Plant", "LoadingGroup", "AvailabilityCheckType"}
	sapProductMasterSalesPlantDatumColumnsWithDefault    = []string{}
	sapProductMasterSalesPlantDatumPrimaryKeyColumns     = []string{"Product", "Plant"}
)

type (
	// SapProductMasterSalesPlantDatumSlice is an alias for a slice of pointers to SapProductMasterSalesPlantDatum.
	// This should almost always be used instead of []SapProductMasterSalesPlantDatum.
	SapProductMasterSalesPlantDatumSlice []*SapProductMasterSalesPlantDatum
	// SapProductMasterSalesPlantDatumHook is the signature for custom SapProductMasterSalesPlantDatum hook methods
	SapProductMasterSalesPlantDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterSalesPlantDatum) error

	sapProductMasterSalesPlantDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterSalesPlantDatumType                 = reflect.TypeOf(&SapProductMasterSalesPlantDatum{})
	sapProductMasterSalesPlantDatumMapping              = queries.MakeStructMapping(sapProductMasterSalesPlantDatumType)
	sapProductMasterSalesPlantDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, sapProductMasterSalesPlantDatumPrimaryKeyColumns)
	sapProductMasterSalesPlantDatumInsertCacheMut       sync.RWMutex
	sapProductMasterSalesPlantDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterSalesPlantDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterSalesPlantDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterSalesPlantDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterSalesPlantDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterSalesPlantDatumBeforeInsertHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumBeforeUpdateHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumBeforeDeleteHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumBeforeUpsertHooks []SapProductMasterSalesPlantDatumHook

var sapProductMasterSalesPlantDatumAfterInsertHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumAfterSelectHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumAfterUpdateHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumAfterDeleteHooks []SapProductMasterSalesPlantDatumHook
var sapProductMasterSalesPlantDatumAfterUpsertHooks []SapProductMasterSalesPlantDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterSalesPlantDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterSalesPlantDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterSalesPlantDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterSalesPlantDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterSalesPlantDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterSalesPlantDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterSalesPlantDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterSalesPlantDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterSalesPlantDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesPlantDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterSalesPlantDatumHook registers your hook function for all future operations.
func AddSapProductMasterSalesPlantDatumHook(hookPoint boil.HookPoint, sapProductMasterSalesPlantDatumHook SapProductMasterSalesPlantDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapProductMasterSalesPlantDatumBeforeInsertHooks = append(sapProductMasterSalesPlantDatumBeforeInsertHooks, sapProductMasterSalesPlantDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterSalesPlantDatumBeforeUpdateHooks = append(sapProductMasterSalesPlantDatumBeforeUpdateHooks, sapProductMasterSalesPlantDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterSalesPlantDatumBeforeDeleteHooks = append(sapProductMasterSalesPlantDatumBeforeDeleteHooks, sapProductMasterSalesPlantDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterSalesPlantDatumBeforeUpsertHooks = append(sapProductMasterSalesPlantDatumBeforeUpsertHooks, sapProductMasterSalesPlantDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterSalesPlantDatumAfterInsertHooks = append(sapProductMasterSalesPlantDatumAfterInsertHooks, sapProductMasterSalesPlantDatumHook)
	case boil.AfterSelectHook:
		sapProductMasterSalesPlantDatumAfterSelectHooks = append(sapProductMasterSalesPlantDatumAfterSelectHooks, sapProductMasterSalesPlantDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterSalesPlantDatumAfterUpdateHooks = append(sapProductMasterSalesPlantDatumAfterUpdateHooks, sapProductMasterSalesPlantDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterSalesPlantDatumAfterDeleteHooks = append(sapProductMasterSalesPlantDatumAfterDeleteHooks, sapProductMasterSalesPlantDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterSalesPlantDatumAfterUpsertHooks = append(sapProductMasterSalesPlantDatumAfterUpsertHooks, sapProductMasterSalesPlantDatumHook)
	}
}

// One returns a single sapProductMasterSalesPlantDatum record from the query.
func (q sapProductMasterSalesPlantDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterSalesPlantDatum, error) {
	o := &SapProductMasterSalesPlantDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_sales_plant_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterSalesPlantDatum records from the query.
func (q sapProductMasterSalesPlantDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterSalesPlantDatumSlice, error) {
	var o []*SapProductMasterSalesPlantDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterSalesPlantDatum slice")
	}

	if len(sapProductMasterSalesPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterSalesPlantDatum records in the query.
func (q sapProductMasterSalesPlantDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_sales_plant_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterSalesPlantDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_sales_plant_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterSalesPlantDatum) ProductSapProductMasterGeneralDatum(mods ...qm.QueryMod) sapProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_general_data`")

	return query
}

// LoadProductSapProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterSalesPlantDatumL) LoadProductSapProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterSalesPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterSalesPlantDatum
	var object *SapProductMasterSalesPlantDatum

	if singular {
		object = maybeSapProductMasterSalesPlantDatum.(*SapProductMasterSalesPlantDatum)
	} else {
		slice = *maybeSapProductMasterSalesPlantDatum.(*[]*SapProductMasterSalesPlantDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterSalesPlantDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterSalesPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_general_data`),
		qm.WhereIn(`sap_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterGeneralDatum")
	}

	var resultSlice []*SapProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_general_data")
	}

	if len(sapProductMasterSalesPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterSalesPlantData = append(foreign.R.ProductSapProductMasterSalesPlantData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterSalesPlantData = append(foreign.R.ProductSapProductMasterSalesPlantData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterGeneralDatum of the sapProductMasterSalesPlantDatum to the related item.
// Sets o.R.ProductSapProductMasterGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterSalesPlantData.
func (o *SapProductMasterSalesPlantDatum) SetProductSapProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_sales_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterSalesPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterSalesPlantDatumR{
			ProductSapProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterGeneralDatumR{
			ProductSapProductMasterSalesPlantData: SapProductMasterSalesPlantDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterSalesPlantData = append(related.R.ProductSapProductMasterSalesPlantData, o)
	}

	return nil
}

// SapProductMasterSalesPlantData retrieves all the records using an executor.
func SapProductMasterSalesPlantData(mods ...qm.QueryMod) sapProductMasterSalesPlantDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_sales_plant_data`"))
	return sapProductMasterSalesPlantDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterSalesPlantDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterSalesPlantDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, selectCols ...string) (*SapProductMasterSalesPlantDatum, error) {
	sapProductMasterSalesPlantDatumObj := &SapProductMasterSalesPlantDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_sales_plant_data` where `Product`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, plant)

	err := q.Bind(ctx, exec, sapProductMasterSalesPlantDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_sales_plant_data")
	}

	if err = sapProductMasterSalesPlantDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterSalesPlantDatumObj, err
	}

	return sapProductMasterSalesPlantDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterSalesPlantDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_sales_plant_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterSalesPlantDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterSalesPlantDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterSalesPlantDatumInsertCache[key]
	sapProductMasterSalesPlantDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterSalesPlantDatumAllColumns,
			sapProductMasterSalesPlantDatumColumnsWithDefault,
			sapProductMasterSalesPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_sales_plant_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_sales_plant_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_sales_plant_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterSalesPlantDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_sales_plant_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_sales_plant_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterSalesPlantDatumInsertCacheMut.Lock()
		sapProductMasterSalesPlantDatumInsertCache[key] = cache
		sapProductMasterSalesPlantDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterSalesPlantDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterSalesPlantDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterSalesPlantDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterSalesPlantDatumUpdateCache[key]
	sapProductMasterSalesPlantDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterSalesPlantDatumAllColumns,
			sapProductMasterSalesPlantDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_sales_plant_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_sales_plant_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterSalesPlantDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, append(wl, sapProductMasterSalesPlantDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_sales_plant_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_sales_plant_data")
	}

	if !cached {
		sapProductMasterSalesPlantDatumUpdateCacheMut.Lock()
		sapProductMasterSalesPlantDatumUpdateCache[key] = cache
		sapProductMasterSalesPlantDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterSalesPlantDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_sales_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_sales_plant_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterSalesPlantDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterSalesPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_sales_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterSalesPlantDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterSalesPlantDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterSalesPlantDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterSalesPlantDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterSalesPlantDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_sales_plant_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterSalesPlantDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterSalesPlantDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterSalesPlantDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterSalesPlantDatumUpsertCache[key]
	sapProductMasterSalesPlantDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterSalesPlantDatumAllColumns,
			sapProductMasterSalesPlantDatumColumnsWithDefault,
			sapProductMasterSalesPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapProductMasterSalesPlantDatumAllColumns,
			sapProductMasterSalesPlantDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_sales_plant_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_sales_plant_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_sales_plant_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_sales_plant_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterSalesPlantDatumType, sapProductMasterSalesPlantDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_sales_plant_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_sales_plant_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterSalesPlantDatumUpsertCacheMut.Lock()
		sapProductMasterSalesPlantDatumUpsertCache[key] = cache
		sapProductMasterSalesPlantDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterSalesPlantDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterSalesPlantDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterSalesPlantDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterSalesPlantDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_sales_plant_data` WHERE `Product`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_sales_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_sales_plant_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterSalesPlantDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterSalesPlantDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_sales_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_sales_plant_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterSalesPlantDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterSalesPlantDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterSalesPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_sales_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterSalesPlantDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterSalesPlantDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_sales_plant_data")
	}

	if len(sapProductMasterSalesPlantDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterSalesPlantDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterSalesPlantDatum(ctx, exec, o.Product, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterSalesPlantDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterSalesPlantDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterSalesPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_sales_plant_data`.* FROM `sap_product_master_sales_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterSalesPlantDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterSalesPlantDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterSalesPlantDatumExists checks if the SapProductMasterSalesPlantDatum row exists.
func SapProductMasterSalesPlantDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_sales_plant_data` where `Product`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_sales_plant_data exists")
	}

	return exists, nil
}
