// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceBillOfMaterialHeaderDatum is an object representing the database table.
type SapMaintenanceBillOfMaterialHeaderDatum struct {
	BillOfMaterial               string      `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialCategory       string      `boil:"BillOfMaterialCategory" json:"BillOfMaterialCategory" toml:"BillOfMaterialCategory" yaml:"BillOfMaterialCategory"`
	BillOfMaterialVariant        string      `boil:"BillOfMaterialVariant" json:"BillOfMaterialVariant" toml:"BillOfMaterialVariant" yaml:"BillOfMaterialVariant"`
	BillOfMaterialVersion        string      `boil:"BillOfMaterialVersion" json:"BillOfMaterialVersion" toml:"BillOfMaterialVersion" yaml:"BillOfMaterialVersion"`
	EngineeringChangeDocument    string      `boil:"EngineeringChangeDocument" json:"EngineeringChangeDocument" toml:"EngineeringChangeDocument" yaml:"EngineeringChangeDocument"`
	TechnicalObject              null.String `boil:"TechnicalObject" json:"TechnicalObject,omitempty" toml:"TechnicalObject" yaml:"TechnicalObject,omitempty"`
	Plant                        null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	BillOfMaterialVariantUsage   null.String `boil:"BillOfMaterialVariantUsage" json:"BillOfMaterialVariantUsage,omitempty" toml:"BillOfMaterialVariantUsage" yaml:"BillOfMaterialVariantUsage,omitempty"`
	BillOfMaterialHeaderUUID     null.String `boil:"BillOfMaterialHeaderUUID" json:"BillOfMaterialHeaderUUID,omitempty" toml:"BillOfMaterialHeaderUUID" yaml:"BillOfMaterialHeaderUUID,omitempty"`
	IsMultipleBOMAlt             null.Bool   `boil:"IsMultipleBOMAlt" json:"IsMultipleBOMAlt,omitempty" toml:"IsMultipleBOMAlt" yaml:"IsMultipleBOMAlt,omitempty"`
	BOMHeaderInternalChangeCount null.String `boil:"BOMHeaderInternalChangeCount" json:"BOMHeaderInternalChangeCount,omitempty" toml:"BOMHeaderInternalChangeCount" yaml:"BOMHeaderInternalChangeCount,omitempty"`
	BOMUsagePriority             null.String `boil:"BOMUsagePriority" json:"BOMUsagePriority,omitempty" toml:"BOMUsagePriority" yaml:"BOMUsagePriority,omitempty"`
	BillOfMaterialAuthsnGrp      null.String `boil:"BillOfMaterialAuthsnGrp" json:"BillOfMaterialAuthsnGrp,omitempty" toml:"BillOfMaterialAuthsnGrp" yaml:"BillOfMaterialAuthsnGrp,omitempty"`
	BOMVersionStatus             null.String `boil:"BOMVersionStatus" json:"BOMVersionStatus,omitempty" toml:"BOMVersionStatus" yaml:"BOMVersionStatus,omitempty"`
	IsVersionBillOfMaterial      null.Bool   `boil:"IsVersionBillOfMaterial" json:"IsVersionBillOfMaterial,omitempty" toml:"IsVersionBillOfMaterial" yaml:"IsVersionBillOfMaterial,omitempty"`
	IsLatestBOMVersion           null.Bool   `boil:"IsLatestBOMVersion" json:"IsLatestBOMVersion,omitempty" toml:"IsLatestBOMVersion" yaml:"IsLatestBOMVersion,omitempty"`
	IsConfiguredMaterial         null.Bool   `boil:"IsConfiguredMaterial" json:"IsConfiguredMaterial,omitempty" toml:"IsConfiguredMaterial" yaml:"IsConfiguredMaterial,omitempty"`
	BOMTechnicalType             null.String `boil:"BOMTechnicalType" json:"BOMTechnicalType,omitempty" toml:"BOMTechnicalType" yaml:"BOMTechnicalType,omitempty"`
	BOMGroup                     null.String `boil:"BOMGroup" json:"BOMGroup,omitempty" toml:"BOMGroup" yaml:"BOMGroup,omitempty"`
	BOMHeaderText                null.String `boil:"BOMHeaderText" json:"BOMHeaderText,omitempty" toml:"BOMHeaderText" yaml:"BOMHeaderText,omitempty"`
	BOMAlternativeText           null.String `boil:"BOMAlternativeText" json:"BOMAlternativeText,omitempty" toml:"BOMAlternativeText" yaml:"BOMAlternativeText,omitempty"`
	BillOfMaterialStatus         null.String `boil:"BillOfMaterialStatus" json:"BillOfMaterialStatus,omitempty" toml:"BillOfMaterialStatus" yaml:"BillOfMaterialStatus,omitempty"`
	HeaderValidityStartDate      null.String `boil:"HeaderValidityStartDate" json:"HeaderValidityStartDate,omitempty" toml:"HeaderValidityStartDate" yaml:"HeaderValidityStartDate,omitempty"`
	HeaderValidityEndDate        null.String `boil:"HeaderValidityEndDate" json:"HeaderValidityEndDate,omitempty" toml:"HeaderValidityEndDate" yaml:"HeaderValidityEndDate,omitempty"`
	ChgToEngineeringChgDocument  null.String `boil:"ChgToEngineeringChgDocument" json:"ChgToEngineeringChgDocument,omitempty" toml:"ChgToEngineeringChgDocument" yaml:"ChgToEngineeringChgDocument,omitempty"`
	IsMarkedForDeletion          null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	BOMHeaderBaseUnit            null.String `boil:"BOMHeaderBaseUnit" json:"BOMHeaderBaseUnit,omitempty" toml:"BOMHeaderBaseUnit" yaml:"BOMHeaderBaseUnit,omitempty"`
	BOMHeaderQuantityInBaseUnit  null.String `boil:"BOMHeaderQuantityInBaseUnit" json:"BOMHeaderQuantityInBaseUnit,omitempty" toml:"BOMHeaderQuantityInBaseUnit" yaml:"BOMHeaderQuantityInBaseUnit,omitempty"`
	RecordCreationDate           null.String `boil:"RecordCreationDate" json:"RecordCreationDate,omitempty" toml:"RecordCreationDate" yaml:"RecordCreationDate,omitempty"`
	LastChangeDate               null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	BOMIsToBeDeleted             null.String `boil:"BOMIsToBeDeleted" json:"BOMIsToBeDeleted,omitempty" toml:"BOMIsToBeDeleted" yaml:"BOMIsToBeDeleted,omitempty"`

	R *sapMaintenanceBillOfMaterialHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceBillOfMaterialHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceBillOfMaterialHeaderDatumColumns = struct {
	BillOfMaterial               string
	BillOfMaterialCategory       string
	BillOfMaterialVariant        string
	BillOfMaterialVersion        string
	EngineeringChangeDocument    string
	TechnicalObject              string
	Plant                        string
	BillOfMaterialVariantUsage   string
	BillOfMaterialHeaderUUID     string
	IsMultipleBOMAlt             string
	BOMHeaderInternalChangeCount string
	BOMUsagePriority             string
	BillOfMaterialAuthsnGrp      string
	BOMVersionStatus             string
	IsVersionBillOfMaterial      string
	IsLatestBOMVersion           string
	IsConfiguredMaterial         string
	BOMTechnicalType             string
	BOMGroup                     string
	BOMHeaderText                string
	BOMAlternativeText           string
	BillOfMaterialStatus         string
	HeaderValidityStartDate      string
	HeaderValidityEndDate        string
	ChgToEngineeringChgDocument  string
	IsMarkedForDeletion          string
	BOMHeaderBaseUnit            string
	BOMHeaderQuantityInBaseUnit  string
	RecordCreationDate           string
	LastChangeDate               string
	BOMIsToBeDeleted             string
}{
	BillOfMaterial:               "BillOfMaterial",
	BillOfMaterialCategory:       "BillOfMaterialCategory",
	BillOfMaterialVariant:        "BillOfMaterialVariant",
	BillOfMaterialVersion:        "BillOfMaterialVersion",
	EngineeringChangeDocument:    "EngineeringChangeDocument",
	TechnicalObject:              "TechnicalObject",
	Plant:                        "Plant",
	BillOfMaterialVariantUsage:   "BillOfMaterialVariantUsage",
	BillOfMaterialHeaderUUID:     "BillOfMaterialHeaderUUID",
	IsMultipleBOMAlt:             "IsMultipleBOMAlt",
	BOMHeaderInternalChangeCount: "BOMHeaderInternalChangeCount",
	BOMUsagePriority:             "BOMUsagePriority",
	BillOfMaterialAuthsnGrp:      "BillOfMaterialAuthsnGrp",
	BOMVersionStatus:             "BOMVersionStatus",
	IsVersionBillOfMaterial:      "IsVersionBillOfMaterial",
	IsLatestBOMVersion:           "IsLatestBOMVersion",
	IsConfiguredMaterial:         "IsConfiguredMaterial",
	BOMTechnicalType:             "BOMTechnicalType",
	BOMGroup:                     "BOMGroup",
	BOMHeaderText:                "BOMHeaderText",
	BOMAlternativeText:           "BOMAlternativeText",
	BillOfMaterialStatus:         "BillOfMaterialStatus",
	HeaderValidityStartDate:      "HeaderValidityStartDate",
	HeaderValidityEndDate:        "HeaderValidityEndDate",
	ChgToEngineeringChgDocument:  "ChgToEngineeringChgDocument",
	IsMarkedForDeletion:          "IsMarkedForDeletion",
	BOMHeaderBaseUnit:            "BOMHeaderBaseUnit",
	BOMHeaderQuantityInBaseUnit:  "BOMHeaderQuantityInBaseUnit",
	RecordCreationDate:           "RecordCreationDate",
	LastChangeDate:               "LastChangeDate",
	BOMIsToBeDeleted:             "BOMIsToBeDeleted",
}

var SapMaintenanceBillOfMaterialHeaderDatumTableColumns = struct {
	BillOfMaterial               string
	BillOfMaterialCategory       string
	BillOfMaterialVariant        string
	BillOfMaterialVersion        string
	EngineeringChangeDocument    string
	TechnicalObject              string
	Plant                        string
	BillOfMaterialVariantUsage   string
	BillOfMaterialHeaderUUID     string
	IsMultipleBOMAlt             string
	BOMHeaderInternalChangeCount string
	BOMUsagePriority             string
	BillOfMaterialAuthsnGrp      string
	BOMVersionStatus             string
	IsVersionBillOfMaterial      string
	IsLatestBOMVersion           string
	IsConfiguredMaterial         string
	BOMTechnicalType             string
	BOMGroup                     string
	BOMHeaderText                string
	BOMAlternativeText           string
	BillOfMaterialStatus         string
	HeaderValidityStartDate      string
	HeaderValidityEndDate        string
	ChgToEngineeringChgDocument  string
	IsMarkedForDeletion          string
	BOMHeaderBaseUnit            string
	BOMHeaderQuantityInBaseUnit  string
	RecordCreationDate           string
	LastChangeDate               string
	BOMIsToBeDeleted             string
}{
	BillOfMaterial:               "sap_maintenance_bill_of_material_header_data.BillOfMaterial",
	BillOfMaterialCategory:       "sap_maintenance_bill_of_material_header_data.BillOfMaterialCategory",
	BillOfMaterialVariant:        "sap_maintenance_bill_of_material_header_data.BillOfMaterialVariant",
	BillOfMaterialVersion:        "sap_maintenance_bill_of_material_header_data.BillOfMaterialVersion",
	EngineeringChangeDocument:    "sap_maintenance_bill_of_material_header_data.EngineeringChangeDocument",
	TechnicalObject:              "sap_maintenance_bill_of_material_header_data.TechnicalObject",
	Plant:                        "sap_maintenance_bill_of_material_header_data.Plant",
	BillOfMaterialVariantUsage:   "sap_maintenance_bill_of_material_header_data.BillOfMaterialVariantUsage",
	BillOfMaterialHeaderUUID:     "sap_maintenance_bill_of_material_header_data.BillOfMaterialHeaderUUID",
	IsMultipleBOMAlt:             "sap_maintenance_bill_of_material_header_data.IsMultipleBOMAlt",
	BOMHeaderInternalChangeCount: "sap_maintenance_bill_of_material_header_data.BOMHeaderInternalChangeCount",
	BOMUsagePriority:             "sap_maintenance_bill_of_material_header_data.BOMUsagePriority",
	BillOfMaterialAuthsnGrp:      "sap_maintenance_bill_of_material_header_data.BillOfMaterialAuthsnGrp",
	BOMVersionStatus:             "sap_maintenance_bill_of_material_header_data.BOMVersionStatus",
	IsVersionBillOfMaterial:      "sap_maintenance_bill_of_material_header_data.IsVersionBillOfMaterial",
	IsLatestBOMVersion:           "sap_maintenance_bill_of_material_header_data.IsLatestBOMVersion",
	IsConfiguredMaterial:         "sap_maintenance_bill_of_material_header_data.IsConfiguredMaterial",
	BOMTechnicalType:             "sap_maintenance_bill_of_material_header_data.BOMTechnicalType",
	BOMGroup:                     "sap_maintenance_bill_of_material_header_data.BOMGroup",
	BOMHeaderText:                "sap_maintenance_bill_of_material_header_data.BOMHeaderText",
	BOMAlternativeText:           "sap_maintenance_bill_of_material_header_data.BOMAlternativeText",
	BillOfMaterialStatus:         "sap_maintenance_bill_of_material_header_data.BillOfMaterialStatus",
	HeaderValidityStartDate:      "sap_maintenance_bill_of_material_header_data.HeaderValidityStartDate",
	HeaderValidityEndDate:        "sap_maintenance_bill_of_material_header_data.HeaderValidityEndDate",
	ChgToEngineeringChgDocument:  "sap_maintenance_bill_of_material_header_data.ChgToEngineeringChgDocument",
	IsMarkedForDeletion:          "sap_maintenance_bill_of_material_header_data.IsMarkedForDeletion",
	BOMHeaderBaseUnit:            "sap_maintenance_bill_of_material_header_data.BOMHeaderBaseUnit",
	BOMHeaderQuantityInBaseUnit:  "sap_maintenance_bill_of_material_header_data.BOMHeaderQuantityInBaseUnit",
	RecordCreationDate:           "sap_maintenance_bill_of_material_header_data.RecordCreationDate",
	LastChangeDate:               "sap_maintenance_bill_of_material_header_data.LastChangeDate",
	BOMIsToBeDeleted:             "sap_maintenance_bill_of_material_header_data.BOMIsToBeDeleted",
}

// Generated where

var SapMaintenanceBillOfMaterialHeaderDatumWhere = struct {
	BillOfMaterial               whereHelperstring
	BillOfMaterialCategory       whereHelperstring
	BillOfMaterialVariant        whereHelperstring
	BillOfMaterialVersion        whereHelperstring
	EngineeringChangeDocument    whereHelperstring
	TechnicalObject              whereHelpernull_String
	Plant                        whereHelpernull_String
	BillOfMaterialVariantUsage   whereHelpernull_String
	BillOfMaterialHeaderUUID     whereHelpernull_String
	IsMultipleBOMAlt             whereHelpernull_Bool
	BOMHeaderInternalChangeCount whereHelpernull_String
	BOMUsagePriority             whereHelpernull_String
	BillOfMaterialAuthsnGrp      whereHelpernull_String
	BOMVersionStatus             whereHelpernull_String
	IsVersionBillOfMaterial      whereHelpernull_Bool
	IsLatestBOMVersion           whereHelpernull_Bool
	IsConfiguredMaterial         whereHelpernull_Bool
	BOMTechnicalType             whereHelpernull_String
	BOMGroup                     whereHelpernull_String
	BOMHeaderText                whereHelpernull_String
	BOMAlternativeText           whereHelpernull_String
	BillOfMaterialStatus         whereHelpernull_String
	HeaderValidityStartDate      whereHelpernull_String
	HeaderValidityEndDate        whereHelpernull_String
	ChgToEngineeringChgDocument  whereHelpernull_String
	IsMarkedForDeletion          whereHelpernull_Bool
	BOMHeaderBaseUnit            whereHelpernull_String
	BOMHeaderQuantityInBaseUnit  whereHelpernull_String
	RecordCreationDate           whereHelpernull_String
	LastChangeDate               whereHelpernull_String
	BOMIsToBeDeleted             whereHelpernull_String
}{
	BillOfMaterial:               whereHelperstring{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterial`"},
	BillOfMaterialCategory:       whereHelperstring{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialCategory`"},
	BillOfMaterialVariant:        whereHelperstring{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialVariant`"},
	BillOfMaterialVersion:        whereHelperstring{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialVersion`"},
	EngineeringChangeDocument:    whereHelperstring{field: "`sap_maintenance_bill_of_material_header_data`.`EngineeringChangeDocument`"},
	TechnicalObject:              whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`TechnicalObject`"},
	Plant:                        whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`Plant`"},
	BillOfMaterialVariantUsage:   whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialVariantUsage`"},
	BillOfMaterialHeaderUUID:     whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialHeaderUUID`"},
	IsMultipleBOMAlt:             whereHelpernull_Bool{field: "`sap_maintenance_bill_of_material_header_data`.`IsMultipleBOMAlt`"},
	BOMHeaderInternalChangeCount: whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMHeaderInternalChangeCount`"},
	BOMUsagePriority:             whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMUsagePriority`"},
	BillOfMaterialAuthsnGrp:      whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialAuthsnGrp`"},
	BOMVersionStatus:             whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMVersionStatus`"},
	IsVersionBillOfMaterial:      whereHelpernull_Bool{field: "`sap_maintenance_bill_of_material_header_data`.`IsVersionBillOfMaterial`"},
	IsLatestBOMVersion:           whereHelpernull_Bool{field: "`sap_maintenance_bill_of_material_header_data`.`IsLatestBOMVersion`"},
	IsConfiguredMaterial:         whereHelpernull_Bool{field: "`sap_maintenance_bill_of_material_header_data`.`IsConfiguredMaterial`"},
	BOMTechnicalType:             whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMTechnicalType`"},
	BOMGroup:                     whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMGroup`"},
	BOMHeaderText:                whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMHeaderText`"},
	BOMAlternativeText:           whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMAlternativeText`"},
	BillOfMaterialStatus:         whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BillOfMaterialStatus`"},
	HeaderValidityStartDate:      whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`HeaderValidityStartDate`"},
	HeaderValidityEndDate:        whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`HeaderValidityEndDate`"},
	ChgToEngineeringChgDocument:  whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`ChgToEngineeringChgDocument`"},
	IsMarkedForDeletion:          whereHelpernull_Bool{field: "`sap_maintenance_bill_of_material_header_data`.`IsMarkedForDeletion`"},
	BOMHeaderBaseUnit:            whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMHeaderBaseUnit`"},
	BOMHeaderQuantityInBaseUnit:  whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMHeaderQuantityInBaseUnit`"},
	RecordCreationDate:           whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`RecordCreationDate`"},
	LastChangeDate:               whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`LastChangeDate`"},
	BOMIsToBeDeleted:             whereHelpernull_String{field: "`sap_maintenance_bill_of_material_header_data`.`BOMIsToBeDeleted`"},
}

// SapMaintenanceBillOfMaterialHeaderDatumRels is where relationship names are stored.
var SapMaintenanceBillOfMaterialHeaderDatumRels = struct {
}{}

// sapMaintenanceBillOfMaterialHeaderDatumR is where relationships are stored.
type sapMaintenanceBillOfMaterialHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceBillOfMaterialHeaderDatumR) NewStruct() *sapMaintenanceBillOfMaterialHeaderDatumR {
	return &sapMaintenanceBillOfMaterialHeaderDatumR{}
}

// sapMaintenanceBillOfMaterialHeaderDatumL is where Load methods for each relationship are stored.
type sapMaintenanceBillOfMaterialHeaderDatumL struct{}

var (
	sapMaintenanceBillOfMaterialHeaderDatumAllColumns            = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "EngineeringChangeDocument", "TechnicalObject", "Plant", "BillOfMaterialVariantUsage", "BillOfMaterialHeaderUUID", "IsMultipleBOMAlt", "BOMHeaderInternalChangeCount", "BOMUsagePriority", "BillOfMaterialAuthsnGrp", "BOMVersionStatus", "IsVersionBillOfMaterial", "IsLatestBOMVersion", "IsConfiguredMaterial", "BOMTechnicalType", "BOMGroup", "BOMHeaderText", "BOMAlternativeText", "BillOfMaterialStatus", "HeaderValidityStartDate", "HeaderValidityEndDate", "ChgToEngineeringChgDocument", "IsMarkedForDeletion", "BOMHeaderBaseUnit", "BOMHeaderQuantityInBaseUnit", "RecordCreationDate", "LastChangeDate", "BOMIsToBeDeleted"}
	sapMaintenanceBillOfMaterialHeaderDatumColumnsWithoutDefault = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "EngineeringChangeDocument", "TechnicalObject", "Plant", "BillOfMaterialVariantUsage", "BillOfMaterialHeaderUUID", "IsMultipleBOMAlt", "BOMHeaderInternalChangeCount", "BOMUsagePriority", "BillOfMaterialAuthsnGrp", "BOMVersionStatus", "IsVersionBillOfMaterial", "IsLatestBOMVersion", "IsConfiguredMaterial", "BOMTechnicalType", "BOMGroup", "BOMHeaderText", "BOMAlternativeText", "BillOfMaterialStatus", "HeaderValidityStartDate", "HeaderValidityEndDate", "ChgToEngineeringChgDocument", "IsMarkedForDeletion", "BOMHeaderBaseUnit", "BOMHeaderQuantityInBaseUnit", "RecordCreationDate", "LastChangeDate", "BOMIsToBeDeleted"}
	sapMaintenanceBillOfMaterialHeaderDatumColumnsWithDefault    = []string{}
	sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns     = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "EngineeringChangeDocument"}
	sapMaintenanceBillOfMaterialHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceBillOfMaterialHeaderDatumSlice is an alias for a slice of pointers to SapMaintenanceBillOfMaterialHeaderDatum.
	// This should almost always be used instead of []SapMaintenanceBillOfMaterialHeaderDatum.
	SapMaintenanceBillOfMaterialHeaderDatumSlice []*SapMaintenanceBillOfMaterialHeaderDatum
	// SapMaintenanceBillOfMaterialHeaderDatumHook is the signature for custom SapMaintenanceBillOfMaterialHeaderDatum hook methods
	SapMaintenanceBillOfMaterialHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceBillOfMaterialHeaderDatum) error

	sapMaintenanceBillOfMaterialHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceBillOfMaterialHeaderDatumType                 = reflect.TypeOf(&SapMaintenanceBillOfMaterialHeaderDatum{})
	sapMaintenanceBillOfMaterialHeaderDatumMapping              = queries.MakeStructMapping(sapMaintenanceBillOfMaterialHeaderDatumType)
	sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns)
	sapMaintenanceBillOfMaterialHeaderDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceBillOfMaterialHeaderDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceBillOfMaterialHeaderDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceBillOfMaterialHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceBillOfMaterialHeaderDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceBillOfMaterialHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceBillOfMaterialHeaderDatumAfterSelectHooks []SapMaintenanceBillOfMaterialHeaderDatumHook

var sapMaintenanceBillOfMaterialHeaderDatumBeforeInsertHooks []SapMaintenanceBillOfMaterialHeaderDatumHook
var sapMaintenanceBillOfMaterialHeaderDatumAfterInsertHooks []SapMaintenanceBillOfMaterialHeaderDatumHook

var sapMaintenanceBillOfMaterialHeaderDatumBeforeUpdateHooks []SapMaintenanceBillOfMaterialHeaderDatumHook
var sapMaintenanceBillOfMaterialHeaderDatumAfterUpdateHooks []SapMaintenanceBillOfMaterialHeaderDatumHook

var sapMaintenanceBillOfMaterialHeaderDatumBeforeDeleteHooks []SapMaintenanceBillOfMaterialHeaderDatumHook
var sapMaintenanceBillOfMaterialHeaderDatumAfterDeleteHooks []SapMaintenanceBillOfMaterialHeaderDatumHook

var sapMaintenanceBillOfMaterialHeaderDatumBeforeUpsertHooks []SapMaintenanceBillOfMaterialHeaderDatumHook
var sapMaintenanceBillOfMaterialHeaderDatumAfterUpsertHooks []SapMaintenanceBillOfMaterialHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceBillOfMaterialHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceBillOfMaterialHeaderDatumHook registers your hook function for all future operations.
func AddSapMaintenanceBillOfMaterialHeaderDatumHook(hookPoint boil.HookPoint, sapMaintenanceBillOfMaterialHeaderDatumHook SapMaintenanceBillOfMaterialHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceBillOfMaterialHeaderDatumAfterSelectHooks = append(sapMaintenanceBillOfMaterialHeaderDatumAfterSelectHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceBillOfMaterialHeaderDatumBeforeInsertHooks = append(sapMaintenanceBillOfMaterialHeaderDatumBeforeInsertHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceBillOfMaterialHeaderDatumAfterInsertHooks = append(sapMaintenanceBillOfMaterialHeaderDatumAfterInsertHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceBillOfMaterialHeaderDatumBeforeUpdateHooks = append(sapMaintenanceBillOfMaterialHeaderDatumBeforeUpdateHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceBillOfMaterialHeaderDatumAfterUpdateHooks = append(sapMaintenanceBillOfMaterialHeaderDatumAfterUpdateHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceBillOfMaterialHeaderDatumBeforeDeleteHooks = append(sapMaintenanceBillOfMaterialHeaderDatumBeforeDeleteHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceBillOfMaterialHeaderDatumAfterDeleteHooks = append(sapMaintenanceBillOfMaterialHeaderDatumAfterDeleteHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceBillOfMaterialHeaderDatumBeforeUpsertHooks = append(sapMaintenanceBillOfMaterialHeaderDatumBeforeUpsertHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceBillOfMaterialHeaderDatumAfterUpsertHooks = append(sapMaintenanceBillOfMaterialHeaderDatumAfterUpsertHooks, sapMaintenanceBillOfMaterialHeaderDatumHook)
	}
}

// One returns a single sapMaintenanceBillOfMaterialHeaderDatum record from the query.
func (q sapMaintenanceBillOfMaterialHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceBillOfMaterialHeaderDatum, error) {
	o := &SapMaintenanceBillOfMaterialHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_bill_of_material_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceBillOfMaterialHeaderDatum records from the query.
func (q sapMaintenanceBillOfMaterialHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceBillOfMaterialHeaderDatumSlice, error) {
	var o []*SapMaintenanceBillOfMaterialHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceBillOfMaterialHeaderDatum slice")
	}

	if len(sapMaintenanceBillOfMaterialHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceBillOfMaterialHeaderDatum records in the query.
func (q sapMaintenanceBillOfMaterialHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_bill_of_material_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceBillOfMaterialHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_bill_of_material_header_data exists")
	}

	return count > 0, nil
}

// SapMaintenanceBillOfMaterialHeaderData retrieves all the records using an executor.
func SapMaintenanceBillOfMaterialHeaderData(mods ...qm.QueryMod) sapMaintenanceBillOfMaterialHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_bill_of_material_header_data`"))
	return sapMaintenanceBillOfMaterialHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceBillOfMaterialHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, billOfMaterial string, billOfMaterialCategory string, billOfMaterialVariant string, billOfMaterialVersion string, engineeringChangeDocument string, selectCols ...string) (*SapMaintenanceBillOfMaterialHeaderDatum, error) {
	sapMaintenanceBillOfMaterialHeaderDatumObj := &SapMaintenanceBillOfMaterialHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_bill_of_material_header_data` where `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `EngineeringChangeDocument`=?", sel,
	)

	q := queries.Raw(query, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, engineeringChangeDocument)

	err := q.Bind(ctx, exec, sapMaintenanceBillOfMaterialHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_bill_of_material_header_data")
	}

	if err = sapMaintenanceBillOfMaterialHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceBillOfMaterialHeaderDatumObj, err
	}

	return sapMaintenanceBillOfMaterialHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_bill_of_material_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceBillOfMaterialHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceBillOfMaterialHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceBillOfMaterialHeaderDatumInsertCache[key]
	sapMaintenanceBillOfMaterialHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceBillOfMaterialHeaderDatumAllColumns,
			sapMaintenanceBillOfMaterialHeaderDatumColumnsWithDefault,
			sapMaintenanceBillOfMaterialHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_bill_of_material_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_bill_of_material_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_bill_of_material_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_bill_of_material_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillOfMaterial,
		o.BillOfMaterialCategory,
		o.BillOfMaterialVariant,
		o.BillOfMaterialVersion,
		o.EngineeringChangeDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_bill_of_material_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceBillOfMaterialHeaderDatumInsertCacheMut.Lock()
		sapMaintenanceBillOfMaterialHeaderDatumInsertCache[key] = cache
		sapMaintenanceBillOfMaterialHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceBillOfMaterialHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceBillOfMaterialHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceBillOfMaterialHeaderDatumUpdateCache[key]
	sapMaintenanceBillOfMaterialHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceBillOfMaterialHeaderDatumAllColumns,
			sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_bill_of_material_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_bill_of_material_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, append(wl, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_bill_of_material_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_bill_of_material_header_data")
	}

	if !cached {
		sapMaintenanceBillOfMaterialHeaderDatumUpdateCacheMut.Lock()
		sapMaintenanceBillOfMaterialHeaderDatumUpdateCache[key] = cache
		sapMaintenanceBillOfMaterialHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceBillOfMaterialHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_bill_of_material_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_bill_of_material_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceBillOfMaterialHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceBillOfMaterialHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceBillOfMaterialHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceBillOfMaterialHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_bill_of_material_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceBillOfMaterialHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceBillOfMaterialHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceBillOfMaterialHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceBillOfMaterialHeaderDatumUpsertCache[key]
	sapMaintenanceBillOfMaterialHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceBillOfMaterialHeaderDatumAllColumns,
			sapMaintenanceBillOfMaterialHeaderDatumColumnsWithDefault,
			sapMaintenanceBillOfMaterialHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceBillOfMaterialHeaderDatumAllColumns,
			sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_bill_of_material_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_bill_of_material_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_bill_of_material_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_bill_of_material_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceBillOfMaterialHeaderDatumType, sapMaintenanceBillOfMaterialHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_bill_of_material_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_bill_of_material_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceBillOfMaterialHeaderDatumUpsertCacheMut.Lock()
		sapMaintenanceBillOfMaterialHeaderDatumUpsertCache[key] = cache
		sapMaintenanceBillOfMaterialHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceBillOfMaterialHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceBillOfMaterialHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_bill_of_material_header_data` WHERE `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `EngineeringChangeDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_bill_of_material_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_bill_of_material_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceBillOfMaterialHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceBillOfMaterialHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_bill_of_material_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_bill_of_material_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceBillOfMaterialHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceBillOfMaterialHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_bill_of_material_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceBillOfMaterialHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_bill_of_material_header_data")
	}

	if len(sapMaintenanceBillOfMaterialHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceBillOfMaterialHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceBillOfMaterialHeaderDatum(ctx, exec, o.BillOfMaterial, o.BillOfMaterialCategory, o.BillOfMaterialVariant, o.BillOfMaterialVersion, o.EngineeringChangeDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceBillOfMaterialHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceBillOfMaterialHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_bill_of_material_header_data`.* FROM `sap_maintenance_bill_of_material_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceBillOfMaterialHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceBillOfMaterialHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceBillOfMaterialHeaderDatumExists checks if the SapMaintenanceBillOfMaterialHeaderDatum row exists.
func SapMaintenanceBillOfMaterialHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, billOfMaterial string, billOfMaterialCategory string, billOfMaterialVariant string, billOfMaterialVersion string, engineeringChangeDocument string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_bill_of_material_header_data` where `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `EngineeringChangeDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, engineeringChangeDocument)
	}
	row := exec.QueryRowContext(ctx, sql, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, engineeringChangeDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_bill_of_material_header_data exists")
	}

	return exists, nil
}
