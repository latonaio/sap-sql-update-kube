// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenancePlanItemDatum is an object representing the database table.
type SapMaintenancePlanItemDatum struct {
	MaintenancePlan              string      `boil:"MaintenancePlan" json:"MaintenancePlan" toml:"MaintenancePlan" yaml:"MaintenancePlan"`
	MaintenanceItem              string      `boil:"MaintenanceItem" json:"MaintenanceItem" toml:"MaintenanceItem" yaml:"MaintenanceItem"`
	MaintenanceItemDescription   null.String `boil:"MaintenanceItemDescription" json:"MaintenanceItemDescription,omitempty" toml:"MaintenanceItemDescription" yaml:"MaintenanceItemDescription,omitempty"`
	MaintenanceStrategy          null.String `boil:"MaintenanceStrategy" json:"MaintenanceStrategy,omitempty" toml:"MaintenanceStrategy" yaml:"MaintenanceStrategy,omitempty"`
	MaintenancePlanCategory      null.String `boil:"MaintenancePlanCategory" json:"MaintenancePlanCategory,omitempty" toml:"MaintenancePlanCategory" yaml:"MaintenancePlanCategory,omitempty"`
	MaintenancePlanCallObject    null.String `boil:"MaintenancePlanCallObject" json:"MaintenancePlanCallObject,omitempty" toml:"MaintenancePlanCallObject" yaml:"MaintenancePlanCallObject,omitempty"`
	MaintenancePlanItemPosition  null.String `boil:"MaintenancePlanItemPosition" json:"MaintenancePlanItemPosition,omitempty" toml:"MaintenancePlanItemPosition" yaml:"MaintenancePlanItemPosition,omitempty"`
	MaintenanceItemObjectList    null.String `boil:"MaintenanceItemObjectList" json:"MaintenanceItemObjectList,omitempty" toml:"MaintenanceItemObjectList" yaml:"MaintenanceItemObjectList,omitempty"`
	FunctionalLocationLabelName  null.String `boil:"FunctionalLocationLabelName" json:"FunctionalLocationLabelName,omitempty" toml:"FunctionalLocationLabelName" yaml:"FunctionalLocationLabelName,omitempty"`
	Equipment                    null.String `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	Assembly                     null.String `boil:"Assembly" json:"Assembly,omitempty" toml:"Assembly" yaml:"Assembly,omitempty"`
	AdditionalDeviceData         null.String `boil:"AdditionalDeviceData" json:"AdditionalDeviceData,omitempty" toml:"AdditionalDeviceData" yaml:"AdditionalDeviceData,omitempty"`
	TaskListType                 null.String `boil:"TaskListType" json:"TaskListType,omitempty" toml:"TaskListType" yaml:"TaskListType,omitempty"`
	TaskListGroup                null.String `boil:"TaskListGroup" json:"TaskListGroup,omitempty" toml:"TaskListGroup" yaml:"TaskListGroup,omitempty"`
	TaskListGroupCounter         null.String `boil:"TaskListGroupCounter" json:"TaskListGroupCounter,omitempty" toml:"TaskListGroupCounter" yaml:"TaskListGroupCounter,omitempty"`
	OperationSystemCondition     null.String `boil:"OperationSystemCondition" json:"OperationSystemCondition,omitempty" toml:"OperationSystemCondition" yaml:"OperationSystemCondition,omitempty"`
	NumberOfTaskListExecutions   null.String `boil:"NumberOfTaskListExecutions" json:"NumberOfTaskListExecutions,omitempty" toml:"NumberOfTaskListExecutions" yaml:"NumberOfTaskListExecutions,omitempty"`
	MaintNotifTskIsAutomlyDtmnd  null.String `boil:"MaintNotifTskIsAutomlyDtmnd" json:"MaintNotifTskIsAutomlyDtmnd,omitempty" toml:"MaintNotifTskIsAutomlyDtmnd" yaml:"MaintNotifTskIsAutomlyDtmnd,omitempty"`
	MaintenancePlanningPlant     null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	MaintenancePlannerGroup      null.String `boil:"MaintenancePlannerGroup" json:"MaintenancePlannerGroup,omitempty" toml:"MaintenancePlannerGroup" yaml:"MaintenancePlannerGroup,omitempty"`
	MaintenanceOrderType         null.String `boil:"MaintenanceOrderType" json:"MaintenanceOrderType,omitempty" toml:"MaintenanceOrderType" yaml:"MaintenanceOrderType,omitempty"`
	NotificationType             null.String `boil:"NotificationType" json:"NotificationType,omitempty" toml:"NotificationType" yaml:"NotificationType,omitempty"`
	MaintenanceActivityType      null.String `boil:"MaintenanceActivityType" json:"MaintenanceActivityType,omitempty" toml:"MaintenanceActivityType" yaml:"MaintenanceActivityType,omitempty"`
	MainWorkCenter               null.String `boil:"MainWorkCenter" json:"MainWorkCenter,omitempty" toml:"MainWorkCenter" yaml:"MainWorkCenter,omitempty"`
	MainWorkCenterPlant          null.String `boil:"MainWorkCenterPlant" json:"MainWorkCenterPlant,omitempty" toml:"MainWorkCenterPlant" yaml:"MainWorkCenterPlant,omitempty"`
	MaintPriority                null.String `boil:"MaintPriority" json:"MaintPriority,omitempty" toml:"MaintPriority" yaml:"MaintPriority,omitempty"`
	MaintPriorityType            null.String `boil:"MaintPriorityType" json:"MaintPriorityType,omitempty" toml:"MaintPriorityType" yaml:"MaintPriorityType,omitempty"`
	BusinessArea                 null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	ImmediateReleaseIsBlocked    null.Bool   `boil:"ImmediateReleaseIsBlocked" json:"ImmediateReleaseIsBlocked,omitempty" toml:"ImmediateReleaseIsBlocked" yaml:"ImmediateReleaseIsBlocked,omitempty"`
	Material                     null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	SerialNumber                 null.String `boil:"SerialNumber" json:"SerialNumber,omitempty" toml:"SerialNumber" yaml:"SerialNumber,omitempty"`
	ServiceDocumentType          null.String `boil:"ServiceDocumentType" json:"ServiceDocumentType,omitempty" toml:"ServiceDocumentType" yaml:"ServiceDocumentType,omitempty"`
	ServiceContract              null.String `boil:"ServiceContract" json:"ServiceContract,omitempty" toml:"ServiceContract" yaml:"ServiceContract,omitempty"`
	ServiceContractItem          null.String `boil:"ServiceContractItem" json:"ServiceContractItem,omitempty" toml:"ServiceContractItem" yaml:"ServiceContractItem,omitempty"`
	ServiceOrderTemplate         null.String `boil:"ServiceOrderTemplate" json:"ServiceOrderTemplate,omitempty" toml:"ServiceOrderTemplate" yaml:"ServiceOrderTemplate,omitempty"`
	ServiceDocumentPriority      null.String `boil:"ServiceDocumentPriority" json:"ServiceDocumentPriority,omitempty" toml:"ServiceDocumentPriority" yaml:"ServiceDocumentPriority,omitempty"`
	Product                      null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	MaintenancePlant             null.String `boil:"MaintenancePlant" json:"MaintenancePlant,omitempty" toml:"MaintenancePlant" yaml:"MaintenancePlant,omitempty"`
	AssetLocation                null.String `boil:"AssetLocation" json:"AssetLocation,omitempty" toml:"AssetLocation" yaml:"AssetLocation,omitempty"`
	AssetRoom                    null.String `boil:"AssetRoom" json:"AssetRoom,omitempty" toml:"AssetRoom" yaml:"AssetRoom,omitempty"`
	PlantSection                 null.String `boil:"PlantSection" json:"PlantSection,omitempty" toml:"PlantSection" yaml:"PlantSection,omitempty"`
	WorkCenter                   null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	ABCIndicator                 null.String `boil:"ABCIndicator" json:"ABCIndicator,omitempty" toml:"ABCIndicator" yaml:"ABCIndicator,omitempty"`
	MaintObjectFreeDefinedAttrib null.String `boil:"MaintObjectFreeDefinedAttrib" json:"MaintObjectFreeDefinedAttrib,omitempty" toml:"MaintObjectFreeDefinedAttrib" yaml:"MaintObjectFreeDefinedAttrib,omitempty"`
	CompanyCode                  null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	MasterFixedAsset             null.String `boil:"MasterFixedAsset" json:"MasterFixedAsset,omitempty" toml:"MasterFixedAsset" yaml:"MasterFixedAsset,omitempty"`
	FixedAsset                   null.String `boil:"FixedAsset" json:"FixedAsset,omitempty" toml:"FixedAsset" yaml:"FixedAsset,omitempty"`
	LocAcctAssgmtBusinessArea    null.String `boil:"LocAcctAssgmtBusinessArea" json:"LocAcctAssgmtBusinessArea,omitempty" toml:"LocAcctAssgmtBusinessArea" yaml:"LocAcctAssgmtBusinessArea,omitempty"`
	CostCenter                   null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	ControllingArea              null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	WBSElement                   null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	SettlementOrder              null.String `boil:"SettlementOrder" json:"SettlementOrder,omitempty" toml:"SettlementOrder" yaml:"SettlementOrder,omitempty"`
	CycleSetSequence             null.String `boil:"CycleSetSequence" json:"CycleSetSequence,omitempty" toml:"CycleSetSequence" yaml:"CycleSetSequence,omitempty"`
	StandingOrderNumber          null.String `boil:"StandingOrderNumber" json:"StandingOrderNumber,omitempty" toml:"StandingOrderNumber" yaml:"StandingOrderNumber,omitempty"`
	CreationDate                 null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate               null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeDateTime           null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`

	R *sapMaintenancePlanItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenancePlanItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenancePlanItemDatumColumns = struct {
	MaintenancePlan              string
	MaintenanceItem              string
	MaintenanceItemDescription   string
	MaintenanceStrategy          string
	MaintenancePlanCategory      string
	MaintenancePlanCallObject    string
	MaintenancePlanItemPosition  string
	MaintenanceItemObjectList    string
	FunctionalLocationLabelName  string
	Equipment                    string
	Assembly                     string
	AdditionalDeviceData         string
	TaskListType                 string
	TaskListGroup                string
	TaskListGroupCounter         string
	OperationSystemCondition     string
	NumberOfTaskListExecutions   string
	MaintNotifTskIsAutomlyDtmnd  string
	MaintenancePlanningPlant     string
	MaintenancePlannerGroup      string
	MaintenanceOrderType         string
	NotificationType             string
	MaintenanceActivityType      string
	MainWorkCenter               string
	MainWorkCenterPlant          string
	MaintPriority                string
	MaintPriorityType            string
	BusinessArea                 string
	ImmediateReleaseIsBlocked    string
	Material                     string
	SerialNumber                 string
	ServiceDocumentType          string
	ServiceContract              string
	ServiceContractItem          string
	ServiceOrderTemplate         string
	ServiceDocumentPriority      string
	Product                      string
	MaintenancePlant             string
	AssetLocation                string
	AssetRoom                    string
	PlantSection                 string
	WorkCenter                   string
	ABCIndicator                 string
	MaintObjectFreeDefinedAttrib string
	CompanyCode                  string
	MasterFixedAsset             string
	FixedAsset                   string
	LocAcctAssgmtBusinessArea    string
	CostCenter                   string
	ControllingArea              string
	WBSElement                   string
	SettlementOrder              string
	CycleSetSequence             string
	StandingOrderNumber          string
	CreationDate                 string
	LastChangeDate               string
	LastChangeDateTime           string
}{
	MaintenancePlan:              "MaintenancePlan",
	MaintenanceItem:              "MaintenanceItem",
	MaintenanceItemDescription:   "MaintenanceItemDescription",
	MaintenanceStrategy:          "MaintenanceStrategy",
	MaintenancePlanCategory:      "MaintenancePlanCategory",
	MaintenancePlanCallObject:    "MaintenancePlanCallObject",
	MaintenancePlanItemPosition:  "MaintenancePlanItemPosition",
	MaintenanceItemObjectList:    "MaintenanceItemObjectList",
	FunctionalLocationLabelName:  "FunctionalLocationLabelName",
	Equipment:                    "Equipment",
	Assembly:                     "Assembly",
	AdditionalDeviceData:         "AdditionalDeviceData",
	TaskListType:                 "TaskListType",
	TaskListGroup:                "TaskListGroup",
	TaskListGroupCounter:         "TaskListGroupCounter",
	OperationSystemCondition:     "OperationSystemCondition",
	NumberOfTaskListExecutions:   "NumberOfTaskListExecutions",
	MaintNotifTskIsAutomlyDtmnd:  "MaintNotifTskIsAutomlyDtmnd",
	MaintenancePlanningPlant:     "MaintenancePlanningPlant",
	MaintenancePlannerGroup:      "MaintenancePlannerGroup",
	MaintenanceOrderType:         "MaintenanceOrderType",
	NotificationType:             "NotificationType",
	MaintenanceActivityType:      "MaintenanceActivityType",
	MainWorkCenter:               "MainWorkCenter",
	MainWorkCenterPlant:          "MainWorkCenterPlant",
	MaintPriority:                "MaintPriority",
	MaintPriorityType:            "MaintPriorityType",
	BusinessArea:                 "BusinessArea",
	ImmediateReleaseIsBlocked:    "ImmediateReleaseIsBlocked",
	Material:                     "Material",
	SerialNumber:                 "SerialNumber",
	ServiceDocumentType:          "ServiceDocumentType",
	ServiceContract:              "ServiceContract",
	ServiceContractItem:          "ServiceContractItem",
	ServiceOrderTemplate:         "ServiceOrderTemplate",
	ServiceDocumentPriority:      "ServiceDocumentPriority",
	Product:                      "Product",
	MaintenancePlant:             "MaintenancePlant",
	AssetLocation:                "AssetLocation",
	AssetRoom:                    "AssetRoom",
	PlantSection:                 "PlantSection",
	WorkCenter:                   "WorkCenter",
	ABCIndicator:                 "ABCIndicator",
	MaintObjectFreeDefinedAttrib: "MaintObjectFreeDefinedAttrib",
	CompanyCode:                  "CompanyCode",
	MasterFixedAsset:             "MasterFixedAsset",
	FixedAsset:                   "FixedAsset",
	LocAcctAssgmtBusinessArea:    "LocAcctAssgmtBusinessArea",
	CostCenter:                   "CostCenter",
	ControllingArea:              "ControllingArea",
	WBSElement:                   "WBSElement",
	SettlementOrder:              "SettlementOrder",
	CycleSetSequence:             "CycleSetSequence",
	StandingOrderNumber:          "StandingOrderNumber",
	CreationDate:                 "CreationDate",
	LastChangeDate:               "LastChangeDate",
	LastChangeDateTime:           "LastChangeDateTime",
}

var SapMaintenancePlanItemDatumTableColumns = struct {
	MaintenancePlan              string
	MaintenanceItem              string
	MaintenanceItemDescription   string
	MaintenanceStrategy          string
	MaintenancePlanCategory      string
	MaintenancePlanCallObject    string
	MaintenancePlanItemPosition  string
	MaintenanceItemObjectList    string
	FunctionalLocationLabelName  string
	Equipment                    string
	Assembly                     string
	AdditionalDeviceData         string
	TaskListType                 string
	TaskListGroup                string
	TaskListGroupCounter         string
	OperationSystemCondition     string
	NumberOfTaskListExecutions   string
	MaintNotifTskIsAutomlyDtmnd  string
	MaintenancePlanningPlant     string
	MaintenancePlannerGroup      string
	MaintenanceOrderType         string
	NotificationType             string
	MaintenanceActivityType      string
	MainWorkCenter               string
	MainWorkCenterPlant          string
	MaintPriority                string
	MaintPriorityType            string
	BusinessArea                 string
	ImmediateReleaseIsBlocked    string
	Material                     string
	SerialNumber                 string
	ServiceDocumentType          string
	ServiceContract              string
	ServiceContractItem          string
	ServiceOrderTemplate         string
	ServiceDocumentPriority      string
	Product                      string
	MaintenancePlant             string
	AssetLocation                string
	AssetRoom                    string
	PlantSection                 string
	WorkCenter                   string
	ABCIndicator                 string
	MaintObjectFreeDefinedAttrib string
	CompanyCode                  string
	MasterFixedAsset             string
	FixedAsset                   string
	LocAcctAssgmtBusinessArea    string
	CostCenter                   string
	ControllingArea              string
	WBSElement                   string
	SettlementOrder              string
	CycleSetSequence             string
	StandingOrderNumber          string
	CreationDate                 string
	LastChangeDate               string
	LastChangeDateTime           string
}{
	MaintenancePlan:              "sap_maintenance_plan_item_data.MaintenancePlan",
	MaintenanceItem:              "sap_maintenance_plan_item_data.MaintenanceItem",
	MaintenanceItemDescription:   "sap_maintenance_plan_item_data.MaintenanceItemDescription",
	MaintenanceStrategy:          "sap_maintenance_plan_item_data.MaintenanceStrategy",
	MaintenancePlanCategory:      "sap_maintenance_plan_item_data.MaintenancePlanCategory",
	MaintenancePlanCallObject:    "sap_maintenance_plan_item_data.MaintenancePlanCallObject",
	MaintenancePlanItemPosition:  "sap_maintenance_plan_item_data.MaintenancePlanItemPosition",
	MaintenanceItemObjectList:    "sap_maintenance_plan_item_data.MaintenanceItemObjectList",
	FunctionalLocationLabelName:  "sap_maintenance_plan_item_data.FunctionalLocationLabelName",
	Equipment:                    "sap_maintenance_plan_item_data.Equipment",
	Assembly:                     "sap_maintenance_plan_item_data.Assembly",
	AdditionalDeviceData:         "sap_maintenance_plan_item_data.AdditionalDeviceData",
	TaskListType:                 "sap_maintenance_plan_item_data.TaskListType",
	TaskListGroup:                "sap_maintenance_plan_item_data.TaskListGroup",
	TaskListGroupCounter:         "sap_maintenance_plan_item_data.TaskListGroupCounter",
	OperationSystemCondition:     "sap_maintenance_plan_item_data.OperationSystemCondition",
	NumberOfTaskListExecutions:   "sap_maintenance_plan_item_data.NumberOfTaskListExecutions",
	MaintNotifTskIsAutomlyDtmnd:  "sap_maintenance_plan_item_data.MaintNotifTskIsAutomlyDtmnd",
	MaintenancePlanningPlant:     "sap_maintenance_plan_item_data.MaintenancePlanningPlant",
	MaintenancePlannerGroup:      "sap_maintenance_plan_item_data.MaintenancePlannerGroup",
	MaintenanceOrderType:         "sap_maintenance_plan_item_data.MaintenanceOrderType",
	NotificationType:             "sap_maintenance_plan_item_data.NotificationType",
	MaintenanceActivityType:      "sap_maintenance_plan_item_data.MaintenanceActivityType",
	MainWorkCenter:               "sap_maintenance_plan_item_data.MainWorkCenter",
	MainWorkCenterPlant:          "sap_maintenance_plan_item_data.MainWorkCenterPlant",
	MaintPriority:                "sap_maintenance_plan_item_data.MaintPriority",
	MaintPriorityType:            "sap_maintenance_plan_item_data.MaintPriorityType",
	BusinessArea:                 "sap_maintenance_plan_item_data.BusinessArea",
	ImmediateReleaseIsBlocked:    "sap_maintenance_plan_item_data.ImmediateReleaseIsBlocked",
	Material:                     "sap_maintenance_plan_item_data.Material",
	SerialNumber:                 "sap_maintenance_plan_item_data.SerialNumber",
	ServiceDocumentType:          "sap_maintenance_plan_item_data.ServiceDocumentType",
	ServiceContract:              "sap_maintenance_plan_item_data.ServiceContract",
	ServiceContractItem:          "sap_maintenance_plan_item_data.ServiceContractItem",
	ServiceOrderTemplate:         "sap_maintenance_plan_item_data.ServiceOrderTemplate",
	ServiceDocumentPriority:      "sap_maintenance_plan_item_data.ServiceDocumentPriority",
	Product:                      "sap_maintenance_plan_item_data.Product",
	MaintenancePlant:             "sap_maintenance_plan_item_data.MaintenancePlant",
	AssetLocation:                "sap_maintenance_plan_item_data.AssetLocation",
	AssetRoom:                    "sap_maintenance_plan_item_data.AssetRoom",
	PlantSection:                 "sap_maintenance_plan_item_data.PlantSection",
	WorkCenter:                   "sap_maintenance_plan_item_data.WorkCenter",
	ABCIndicator:                 "sap_maintenance_plan_item_data.ABCIndicator",
	MaintObjectFreeDefinedAttrib: "sap_maintenance_plan_item_data.MaintObjectFreeDefinedAttrib",
	CompanyCode:                  "sap_maintenance_plan_item_data.CompanyCode",
	MasterFixedAsset:             "sap_maintenance_plan_item_data.MasterFixedAsset",
	FixedAsset:                   "sap_maintenance_plan_item_data.FixedAsset",
	LocAcctAssgmtBusinessArea:    "sap_maintenance_plan_item_data.LocAcctAssgmtBusinessArea",
	CostCenter:                   "sap_maintenance_plan_item_data.CostCenter",
	ControllingArea:              "sap_maintenance_plan_item_data.ControllingArea",
	WBSElement:                   "sap_maintenance_plan_item_data.WBSElement",
	SettlementOrder:              "sap_maintenance_plan_item_data.SettlementOrder",
	CycleSetSequence:             "sap_maintenance_plan_item_data.CycleSetSequence",
	StandingOrderNumber:          "sap_maintenance_plan_item_data.StandingOrderNumber",
	CreationDate:                 "sap_maintenance_plan_item_data.CreationDate",
	LastChangeDate:               "sap_maintenance_plan_item_data.LastChangeDate",
	LastChangeDateTime:           "sap_maintenance_plan_item_data.LastChangeDateTime",
}

// Generated where

var SapMaintenancePlanItemDatumWhere = struct {
	MaintenancePlan              whereHelperstring
	MaintenanceItem              whereHelperstring
	MaintenanceItemDescription   whereHelpernull_String
	MaintenanceStrategy          whereHelpernull_String
	MaintenancePlanCategory      whereHelpernull_String
	MaintenancePlanCallObject    whereHelpernull_String
	MaintenancePlanItemPosition  whereHelpernull_String
	MaintenanceItemObjectList    whereHelpernull_String
	FunctionalLocationLabelName  whereHelpernull_String
	Equipment                    whereHelpernull_String
	Assembly                     whereHelpernull_String
	AdditionalDeviceData         whereHelpernull_String
	TaskListType                 whereHelpernull_String
	TaskListGroup                whereHelpernull_String
	TaskListGroupCounter         whereHelpernull_String
	OperationSystemCondition     whereHelpernull_String
	NumberOfTaskListExecutions   whereHelpernull_String
	MaintNotifTskIsAutomlyDtmnd  whereHelpernull_String
	MaintenancePlanningPlant     whereHelpernull_String
	MaintenancePlannerGroup      whereHelpernull_String
	MaintenanceOrderType         whereHelpernull_String
	NotificationType             whereHelpernull_String
	MaintenanceActivityType      whereHelpernull_String
	MainWorkCenter               whereHelpernull_String
	MainWorkCenterPlant          whereHelpernull_String
	MaintPriority                whereHelpernull_String
	MaintPriorityType            whereHelpernull_String
	BusinessArea                 whereHelpernull_String
	ImmediateReleaseIsBlocked    whereHelpernull_Bool
	Material                     whereHelpernull_String
	SerialNumber                 whereHelpernull_String
	ServiceDocumentType          whereHelpernull_String
	ServiceContract              whereHelpernull_String
	ServiceContractItem          whereHelpernull_String
	ServiceOrderTemplate         whereHelpernull_String
	ServiceDocumentPriority      whereHelpernull_String
	Product                      whereHelpernull_String
	MaintenancePlant             whereHelpernull_String
	AssetLocation                whereHelpernull_String
	AssetRoom                    whereHelpernull_String
	PlantSection                 whereHelpernull_String
	WorkCenter                   whereHelpernull_String
	ABCIndicator                 whereHelpernull_String
	MaintObjectFreeDefinedAttrib whereHelpernull_String
	CompanyCode                  whereHelpernull_String
	MasterFixedAsset             whereHelpernull_String
	FixedAsset                   whereHelpernull_String
	LocAcctAssgmtBusinessArea    whereHelpernull_String
	CostCenter                   whereHelpernull_String
	ControllingArea              whereHelpernull_String
	WBSElement                   whereHelpernull_String
	SettlementOrder              whereHelpernull_String
	CycleSetSequence             whereHelpernull_String
	StandingOrderNumber          whereHelpernull_String
	CreationDate                 whereHelpernull_String
	LastChangeDate               whereHelpernull_String
	LastChangeDateTime           whereHelpernull_String
}{
	MaintenancePlan:              whereHelperstring{field: "`sap_maintenance_plan_item_data`.`MaintenancePlan`"},
	MaintenanceItem:              whereHelperstring{field: "`sap_maintenance_plan_item_data`.`MaintenanceItem`"},
	MaintenanceItemDescription:   whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenanceItemDescription`"},
	MaintenanceStrategy:          whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenanceStrategy`"},
	MaintenancePlanCategory:      whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenancePlanCategory`"},
	MaintenancePlanCallObject:    whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenancePlanCallObject`"},
	MaintenancePlanItemPosition:  whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenancePlanItemPosition`"},
	MaintenanceItemObjectList:    whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenanceItemObjectList`"},
	FunctionalLocationLabelName:  whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`FunctionalLocationLabelName`"},
	Equipment:                    whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`Equipment`"},
	Assembly:                     whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`Assembly`"},
	AdditionalDeviceData:         whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`AdditionalDeviceData`"},
	TaskListType:                 whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`TaskListType`"},
	TaskListGroup:                whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`TaskListGroup`"},
	TaskListGroupCounter:         whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`TaskListGroupCounter`"},
	OperationSystemCondition:     whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`OperationSystemCondition`"},
	NumberOfTaskListExecutions:   whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`NumberOfTaskListExecutions`"},
	MaintNotifTskIsAutomlyDtmnd:  whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintNotifTskIsAutomlyDtmnd`"},
	MaintenancePlanningPlant:     whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenancePlanningPlant`"},
	MaintenancePlannerGroup:      whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenancePlannerGroup`"},
	MaintenanceOrderType:         whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenanceOrderType`"},
	NotificationType:             whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`NotificationType`"},
	MaintenanceActivityType:      whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenanceActivityType`"},
	MainWorkCenter:               whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MainWorkCenter`"},
	MainWorkCenterPlant:          whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MainWorkCenterPlant`"},
	MaintPriority:                whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintPriority`"},
	MaintPriorityType:            whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintPriorityType`"},
	BusinessArea:                 whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`BusinessArea`"},
	ImmediateReleaseIsBlocked:    whereHelpernull_Bool{field: "`sap_maintenance_plan_item_data`.`ImmediateReleaseIsBlocked`"},
	Material:                     whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`Material`"},
	SerialNumber:                 whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`SerialNumber`"},
	ServiceDocumentType:          whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ServiceDocumentType`"},
	ServiceContract:              whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ServiceContract`"},
	ServiceContractItem:          whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ServiceContractItem`"},
	ServiceOrderTemplate:         whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ServiceOrderTemplate`"},
	ServiceDocumentPriority:      whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ServiceDocumentPriority`"},
	Product:                      whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`Product`"},
	MaintenancePlant:             whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintenancePlant`"},
	AssetLocation:                whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`AssetLocation`"},
	AssetRoom:                    whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`AssetRoom`"},
	PlantSection:                 whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`PlantSection`"},
	WorkCenter:                   whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`WorkCenter`"},
	ABCIndicator:                 whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ABCIndicator`"},
	MaintObjectFreeDefinedAttrib: whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MaintObjectFreeDefinedAttrib`"},
	CompanyCode:                  whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`CompanyCode`"},
	MasterFixedAsset:             whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`MasterFixedAsset`"},
	FixedAsset:                   whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`FixedAsset`"},
	LocAcctAssgmtBusinessArea:    whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`LocAcctAssgmtBusinessArea`"},
	CostCenter:                   whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`CostCenter`"},
	ControllingArea:              whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`ControllingArea`"},
	WBSElement:                   whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`WBSElement`"},
	SettlementOrder:              whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`SettlementOrder`"},
	CycleSetSequence:             whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`CycleSetSequence`"},
	StandingOrderNumber:          whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`StandingOrderNumber`"},
	CreationDate:                 whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`CreationDate`"},
	LastChangeDate:               whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`LastChangeDate`"},
	LastChangeDateTime:           whereHelpernull_String{field: "`sap_maintenance_plan_item_data`.`LastChangeDateTime`"},
}

// SapMaintenancePlanItemDatumRels is where relationship names are stored.
var SapMaintenancePlanItemDatumRels = struct {
	MaintenancePlanSapMaintenancePlanHeaderDatum string
}{
	MaintenancePlanSapMaintenancePlanHeaderDatum: "MaintenancePlanSapMaintenancePlanHeaderDatum",
}

// sapMaintenancePlanItemDatumR is where relationships are stored.
type sapMaintenancePlanItemDatumR struct {
	MaintenancePlanSapMaintenancePlanHeaderDatum *SapMaintenancePlanHeaderDatum `boil:"MaintenancePlanSapMaintenancePlanHeaderDatum" json:"MaintenancePlanSapMaintenancePlanHeaderDatum" toml:"MaintenancePlanSapMaintenancePlanHeaderDatum" yaml:"MaintenancePlanSapMaintenancePlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenancePlanItemDatumR) NewStruct() *sapMaintenancePlanItemDatumR {
	return &sapMaintenancePlanItemDatumR{}
}

// sapMaintenancePlanItemDatumL is where Load methods for each relationship are stored.
type sapMaintenancePlanItemDatumL struct{}

var (
	sapMaintenancePlanItemDatumAllColumns            = []string{"MaintenancePlan", "MaintenanceItem", "MaintenanceItemDescription", "MaintenanceStrategy", "MaintenancePlanCategory", "MaintenancePlanCallObject", "MaintenancePlanItemPosition", "MaintenanceItemObjectList", "FunctionalLocationLabelName", "Equipment", "Assembly", "AdditionalDeviceData", "TaskListType", "TaskListGroup", "TaskListGroupCounter", "OperationSystemCondition", "NumberOfTaskListExecutions", "MaintNotifTskIsAutomlyDtmnd", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "MaintenanceOrderType", "NotificationType", "MaintenanceActivityType", "MainWorkCenter", "MainWorkCenterPlant", "MaintPriority", "MaintPriorityType", "BusinessArea", "ImmediateReleaseIsBlocked", "Material", "SerialNumber", "ServiceDocumentType", "ServiceContract", "ServiceContractItem", "ServiceOrderTemplate", "ServiceDocumentPriority", "Product", "MaintenancePlant", "AssetLocation", "AssetRoom", "PlantSection", "WorkCenter", "ABCIndicator", "MaintObjectFreeDefinedAttrib", "CompanyCode", "MasterFixedAsset", "FixedAsset", "LocAcctAssgmtBusinessArea", "CostCenter", "ControllingArea", "WBSElement", "SettlementOrder", "CycleSetSequence", "StandingOrderNumber", "CreationDate", "LastChangeDate", "LastChangeDateTime"}
	sapMaintenancePlanItemDatumColumnsWithoutDefault = []string{"MaintenancePlan", "MaintenanceItem", "MaintenanceItemDescription", "MaintenanceStrategy", "MaintenancePlanCategory", "MaintenancePlanCallObject", "MaintenancePlanItemPosition", "MaintenanceItemObjectList", "FunctionalLocationLabelName", "Equipment", "Assembly", "AdditionalDeviceData", "TaskListType", "TaskListGroup", "TaskListGroupCounter", "OperationSystemCondition", "NumberOfTaskListExecutions", "MaintNotifTskIsAutomlyDtmnd", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "MaintenanceOrderType", "NotificationType", "MaintenanceActivityType", "MainWorkCenter", "MainWorkCenterPlant", "MaintPriority", "MaintPriorityType", "BusinessArea", "ImmediateReleaseIsBlocked", "Material", "SerialNumber", "ServiceDocumentType", "ServiceContract", "ServiceContractItem", "ServiceOrderTemplate", "ServiceDocumentPriority", "Product", "MaintenancePlant", "AssetLocation", "AssetRoom", "PlantSection", "WorkCenter", "ABCIndicator", "MaintObjectFreeDefinedAttrib", "CompanyCode", "MasterFixedAsset", "FixedAsset", "LocAcctAssgmtBusinessArea", "CostCenter", "ControllingArea", "WBSElement", "SettlementOrder", "CycleSetSequence", "StandingOrderNumber", "CreationDate", "LastChangeDate", "LastChangeDateTime"}
	sapMaintenancePlanItemDatumColumnsWithDefault    = []string{}
	sapMaintenancePlanItemDatumPrimaryKeyColumns     = []string{"MaintenancePlan", "MaintenanceItem"}
	sapMaintenancePlanItemDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenancePlanItemDatumSlice is an alias for a slice of pointers to SapMaintenancePlanItemDatum.
	// This should almost always be used instead of []SapMaintenancePlanItemDatum.
	SapMaintenancePlanItemDatumSlice []*SapMaintenancePlanItemDatum
	// SapMaintenancePlanItemDatumHook is the signature for custom SapMaintenancePlanItemDatum hook methods
	SapMaintenancePlanItemDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenancePlanItemDatum) error

	sapMaintenancePlanItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenancePlanItemDatumType                 = reflect.TypeOf(&SapMaintenancePlanItemDatum{})
	sapMaintenancePlanItemDatumMapping              = queries.MakeStructMapping(sapMaintenancePlanItemDatumType)
	sapMaintenancePlanItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, sapMaintenancePlanItemDatumPrimaryKeyColumns)
	sapMaintenancePlanItemDatumInsertCacheMut       sync.RWMutex
	sapMaintenancePlanItemDatumInsertCache          = make(map[string]insertCache)
	sapMaintenancePlanItemDatumUpdateCacheMut       sync.RWMutex
	sapMaintenancePlanItemDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenancePlanItemDatumUpsertCacheMut       sync.RWMutex
	sapMaintenancePlanItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenancePlanItemDatumAfterSelectHooks []SapMaintenancePlanItemDatumHook

var sapMaintenancePlanItemDatumBeforeInsertHooks []SapMaintenancePlanItemDatumHook
var sapMaintenancePlanItemDatumAfterInsertHooks []SapMaintenancePlanItemDatumHook

var sapMaintenancePlanItemDatumBeforeUpdateHooks []SapMaintenancePlanItemDatumHook
var sapMaintenancePlanItemDatumAfterUpdateHooks []SapMaintenancePlanItemDatumHook

var sapMaintenancePlanItemDatumBeforeDeleteHooks []SapMaintenancePlanItemDatumHook
var sapMaintenancePlanItemDatumAfterDeleteHooks []SapMaintenancePlanItemDatumHook

var sapMaintenancePlanItemDatumBeforeUpsertHooks []SapMaintenancePlanItemDatumHook
var sapMaintenancePlanItemDatumAfterUpsertHooks []SapMaintenancePlanItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenancePlanItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenancePlanItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenancePlanItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenancePlanItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenancePlanItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenancePlanItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenancePlanItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenancePlanItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenancePlanItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenancePlanItemDatumHook registers your hook function for all future operations.
func AddSapMaintenancePlanItemDatumHook(hookPoint boil.HookPoint, sapMaintenancePlanItemDatumHook SapMaintenancePlanItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenancePlanItemDatumAfterSelectHooks = append(sapMaintenancePlanItemDatumAfterSelectHooks, sapMaintenancePlanItemDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenancePlanItemDatumBeforeInsertHooks = append(sapMaintenancePlanItemDatumBeforeInsertHooks, sapMaintenancePlanItemDatumHook)
	case boil.AfterInsertHook:
		sapMaintenancePlanItemDatumAfterInsertHooks = append(sapMaintenancePlanItemDatumAfterInsertHooks, sapMaintenancePlanItemDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenancePlanItemDatumBeforeUpdateHooks = append(sapMaintenancePlanItemDatumBeforeUpdateHooks, sapMaintenancePlanItemDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenancePlanItemDatumAfterUpdateHooks = append(sapMaintenancePlanItemDatumAfterUpdateHooks, sapMaintenancePlanItemDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenancePlanItemDatumBeforeDeleteHooks = append(sapMaintenancePlanItemDatumBeforeDeleteHooks, sapMaintenancePlanItemDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenancePlanItemDatumAfterDeleteHooks = append(sapMaintenancePlanItemDatumAfterDeleteHooks, sapMaintenancePlanItemDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenancePlanItemDatumBeforeUpsertHooks = append(sapMaintenancePlanItemDatumBeforeUpsertHooks, sapMaintenancePlanItemDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenancePlanItemDatumAfterUpsertHooks = append(sapMaintenancePlanItemDatumAfterUpsertHooks, sapMaintenancePlanItemDatumHook)
	}
}

// One returns a single sapMaintenancePlanItemDatum record from the query.
func (q sapMaintenancePlanItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenancePlanItemDatum, error) {
	o := &SapMaintenancePlanItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_plan_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenancePlanItemDatum records from the query.
func (q sapMaintenancePlanItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenancePlanItemDatumSlice, error) {
	var o []*SapMaintenancePlanItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenancePlanItemDatum slice")
	}

	if len(sapMaintenancePlanItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenancePlanItemDatum records in the query.
func (q sapMaintenancePlanItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_plan_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenancePlanItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_plan_item_data exists")
	}

	return count > 0, nil
}

// MaintenancePlanSapMaintenancePlanHeaderDatum pointed to by the foreign key.
func (o *SapMaintenancePlanItemDatum) MaintenancePlanSapMaintenancePlanHeaderDatum(mods ...qm.QueryMod) sapMaintenancePlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenancePlan` = ?", o.MaintenancePlan),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenancePlanHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_plan_header_data`")

	return query
}

// LoadMaintenancePlanSapMaintenancePlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenancePlanItemDatumL) LoadMaintenancePlanSapMaintenancePlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenancePlanItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenancePlanItemDatum
	var object *SapMaintenancePlanItemDatum

	if singular {
		object = maybeSapMaintenancePlanItemDatum.(*SapMaintenancePlanItemDatum)
	} else {
		slice = *maybeSapMaintenancePlanItemDatum.(*[]*SapMaintenancePlanItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenancePlanItemDatumR{}
		}
		args = append(args, object.MaintenancePlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenancePlanItemDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenancePlan {
					continue Outer
				}
			}

			args = append(args, obj.MaintenancePlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_plan_header_data`),
		qm.WhereIn(`sap_maintenance_plan_header_data.MaintenancePlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenancePlanHeaderDatum")
	}

	var resultSlice []*SapMaintenancePlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenancePlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_plan_header_data")
	}

	if len(sapMaintenancePlanItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenancePlanSapMaintenancePlanHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenancePlanHeaderDatumR{}
		}
		foreign.R.MaintenancePlanSapMaintenancePlanItemData = append(foreign.R.MaintenancePlanSapMaintenancePlanItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenancePlan == foreign.MaintenancePlan {
				local.R.MaintenancePlanSapMaintenancePlanHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenancePlanHeaderDatumR{}
				}
				foreign.R.MaintenancePlanSapMaintenancePlanItemData = append(foreign.R.MaintenancePlanSapMaintenancePlanItemData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenancePlanSapMaintenancePlanHeaderDatum of the sapMaintenancePlanItemDatum to the related item.
// Sets o.R.MaintenancePlanSapMaintenancePlanHeaderDatum to related.
// Adds o to related.R.MaintenancePlanSapMaintenancePlanItemData.
func (o *SapMaintenancePlanItemDatum) SetMaintenancePlanSapMaintenancePlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenancePlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_plan_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenancePlan"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenancePlanItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenancePlan, o.MaintenancePlan, o.MaintenanceItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenancePlan = related.MaintenancePlan
	if o.R == nil {
		o.R = &sapMaintenancePlanItemDatumR{
			MaintenancePlanSapMaintenancePlanHeaderDatum: related,
		}
	} else {
		o.R.MaintenancePlanSapMaintenancePlanHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenancePlanHeaderDatumR{
			MaintenancePlanSapMaintenancePlanItemData: SapMaintenancePlanItemDatumSlice{o},
		}
	} else {
		related.R.MaintenancePlanSapMaintenancePlanItemData = append(related.R.MaintenancePlanSapMaintenancePlanItemData, o)
	}

	return nil
}

// SapMaintenancePlanItemData retrieves all the records using an executor.
func SapMaintenancePlanItemData(mods ...qm.QueryMod) sapMaintenancePlanItemDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_plan_item_data`"))
	return sapMaintenancePlanItemDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenancePlanItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenancePlanItemDatum(ctx context.Context, exec boil.ContextExecutor, maintenancePlan string, maintenanceItem string, selectCols ...string) (*SapMaintenancePlanItemDatum, error) {
	sapMaintenancePlanItemDatumObj := &SapMaintenancePlanItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_plan_item_data` where `MaintenancePlan`=? AND `MaintenanceItem`=?", sel,
	)

	q := queries.Raw(query, maintenancePlan, maintenanceItem)

	err := q.Bind(ctx, exec, sapMaintenancePlanItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_plan_item_data")
	}

	if err = sapMaintenancePlanItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenancePlanItemDatumObj, err
	}

	return sapMaintenancePlanItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenancePlanItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_plan_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenancePlanItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenancePlanItemDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenancePlanItemDatumInsertCache[key]
	sapMaintenancePlanItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenancePlanItemDatumAllColumns,
			sapMaintenancePlanItemDatumColumnsWithDefault,
			sapMaintenancePlanItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_plan_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_plan_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_plan_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenancePlanItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_plan_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenancePlan,
		o.MaintenanceItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_plan_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenancePlanItemDatumInsertCacheMut.Lock()
		sapMaintenancePlanItemDatumInsertCache[key] = cache
		sapMaintenancePlanItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenancePlanItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenancePlanItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenancePlanItemDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenancePlanItemDatumUpdateCache[key]
	sapMaintenancePlanItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenancePlanItemDatumAllColumns,
			sapMaintenancePlanItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_plan_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_plan_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenancePlanItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, append(wl, sapMaintenancePlanItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_plan_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_plan_item_data")
	}

	if !cached {
		sapMaintenancePlanItemDatumUpdateCacheMut.Lock()
		sapMaintenancePlanItemDatumUpdateCache[key] = cache
		sapMaintenancePlanItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenancePlanItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_plan_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_plan_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenancePlanItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_plan_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenancePlanItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenancePlanItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenancePlanItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenancePlanItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_plan_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenancePlanItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenancePlanItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenancePlanItemDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenancePlanItemDatumUpsertCache[key]
	sapMaintenancePlanItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenancePlanItemDatumAllColumns,
			sapMaintenancePlanItemDatumColumnsWithDefault,
			sapMaintenancePlanItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenancePlanItemDatumAllColumns,
			sapMaintenancePlanItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_plan_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_plan_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_plan_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_plan_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenancePlanItemDatumType, sapMaintenancePlanItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_plan_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_plan_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenancePlanItemDatumUpsertCacheMut.Lock()
		sapMaintenancePlanItemDatumUpsertCache[key] = cache
		sapMaintenancePlanItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenancePlanItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenancePlanItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenancePlanItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenancePlanItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_plan_item_data` WHERE `MaintenancePlan`=? AND `MaintenanceItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_plan_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_plan_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenancePlanItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenancePlanItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_plan_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_plan_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenancePlanItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenancePlanItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_plan_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenancePlanItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_plan_item_data")
	}

	if len(sapMaintenancePlanItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenancePlanItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenancePlanItemDatum(ctx, exec, o.MaintenancePlan, o.MaintenanceItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenancePlanItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenancePlanItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_plan_item_data`.* FROM `sap_maintenance_plan_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenancePlanItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenancePlanItemDatumExists checks if the SapMaintenancePlanItemDatum row exists.
func SapMaintenancePlanItemDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenancePlan string, maintenanceItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_plan_item_data` where `MaintenancePlan`=? AND `MaintenanceItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenancePlan, maintenanceItem)
	}
	row := exec.QueryRowContext(ctx, sql, maintenancePlan, maintenanceItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_plan_item_data exists")
	}

	return exists, nil
}
