// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchasingSourceListDatum is an object representing the database table.
type SapPurchasingSourceListDatum struct {
	Material                   string      `boil:"Material" json:"Material" toml:"Material" yaml:"Material"`
	Plant                      string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	SourceListRecord           string      `boil:"SourceListRecord" json:"SourceListRecord" toml:"SourceListRecord" yaml:"SourceListRecord"`
	ValidityEndDate            string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate          null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	Supplier                   null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	PurchasingOrganization     null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	SupplyingPlant             null.String `boil:"SupplyingPlant" json:"SupplyingPlant,omitempty" toml:"SupplyingPlant" yaml:"SupplyingPlant,omitempty"`
	OrderQuantityUnit          null.String `boil:"OrderQuantityUnit" json:"OrderQuantityUnit,omitempty" toml:"OrderQuantityUnit" yaml:"OrderQuantityUnit,omitempty"`
	PurchaseOutlineAgreement   null.String `boil:"PurchaseOutlineAgreement" json:"PurchaseOutlineAgreement,omitempty" toml:"PurchaseOutlineAgreement" yaml:"PurchaseOutlineAgreement,omitempty"`
	SupplierIsFixed            null.Bool   `boil:"SupplierIsFixed" json:"SupplierIsFixed,omitempty" toml:"SupplierIsFixed" yaml:"SupplierIsFixed,omitempty"`
	SourceOfSupplyIsBlocked    null.Bool   `boil:"SourceOfSupplyIsBlocked" json:"SourceOfSupplyIsBlocked,omitempty" toml:"SourceOfSupplyIsBlocked" yaml:"SourceOfSupplyIsBlocked,omitempty"`
	MRPSourcingControl         null.String `boil:"MRPSourcingControl" json:"MRPSourcingControl,omitempty" toml:"MRPSourcingControl" yaml:"MRPSourcingControl,omitempty"`
	LastChangeDateTime         null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	IssgPlantIsFixed           null.Bool   `boil:"IssgPlantIsFixed" json:"IssgPlantIsFixed,omitempty" toml:"IssgPlantIsFixed" yaml:"IssgPlantIsFixed,omitempty"`
	PurOutlineAgreementIsFixed null.Bool   `boil:"PurOutlineAgreementIsFixed" json:"PurOutlineAgreementIsFixed,omitempty" toml:"PurOutlineAgreementIsFixed" yaml:"PurOutlineAgreementIsFixed,omitempty"`
	SourceOfSupplyIsFixed      null.Bool   `boil:"SourceOfSupplyIsFixed" json:"SourceOfSupplyIsFixed,omitempty" toml:"SourceOfSupplyIsFixed" yaml:"SourceOfSupplyIsFixed,omitempty"`

	R *sapPurchasingSourceListDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchasingSourceListDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchasingSourceListDatumColumns = struct {
	Material                   string
	Plant                      string
	SourceListRecord           string
	ValidityEndDate            string
	ValidityStartDate          string
	Supplier                   string
	PurchasingOrganization     string
	SupplyingPlant             string
	OrderQuantityUnit          string
	PurchaseOutlineAgreement   string
	SupplierIsFixed            string
	SourceOfSupplyIsBlocked    string
	MRPSourcingControl         string
	LastChangeDateTime         string
	IssgPlantIsFixed           string
	PurOutlineAgreementIsFixed string
	SourceOfSupplyIsFixed      string
}{
	Material:                   "Material",
	Plant:                      "Plant",
	SourceListRecord:           "SourceListRecord",
	ValidityEndDate:            "ValidityEndDate",
	ValidityStartDate:          "ValidityStartDate",
	Supplier:                   "Supplier",
	PurchasingOrganization:     "PurchasingOrganization",
	SupplyingPlant:             "SupplyingPlant",
	OrderQuantityUnit:          "OrderQuantityUnit",
	PurchaseOutlineAgreement:   "PurchaseOutlineAgreement",
	SupplierIsFixed:            "SupplierIsFixed",
	SourceOfSupplyIsBlocked:    "SourceOfSupplyIsBlocked",
	MRPSourcingControl:         "MRPSourcingControl",
	LastChangeDateTime:         "LastChangeDateTime",
	IssgPlantIsFixed:           "IssgPlantIsFixed",
	PurOutlineAgreementIsFixed: "PurOutlineAgreementIsFixed",
	SourceOfSupplyIsFixed:      "SourceOfSupplyIsFixed",
}

var SapPurchasingSourceListDatumTableColumns = struct {
	Material                   string
	Plant                      string
	SourceListRecord           string
	ValidityEndDate            string
	ValidityStartDate          string
	Supplier                   string
	PurchasingOrganization     string
	SupplyingPlant             string
	OrderQuantityUnit          string
	PurchaseOutlineAgreement   string
	SupplierIsFixed            string
	SourceOfSupplyIsBlocked    string
	MRPSourcingControl         string
	LastChangeDateTime         string
	IssgPlantIsFixed           string
	PurOutlineAgreementIsFixed string
	SourceOfSupplyIsFixed      string
}{
	Material:                   "sap_purchasing_source_list_data.Material",
	Plant:                      "sap_purchasing_source_list_data.Plant",
	SourceListRecord:           "sap_purchasing_source_list_data.SourceListRecord",
	ValidityEndDate:            "sap_purchasing_source_list_data.ValidityEndDate",
	ValidityStartDate:          "sap_purchasing_source_list_data.ValidityStartDate",
	Supplier:                   "sap_purchasing_source_list_data.Supplier",
	PurchasingOrganization:     "sap_purchasing_source_list_data.PurchasingOrganization",
	SupplyingPlant:             "sap_purchasing_source_list_data.SupplyingPlant",
	OrderQuantityUnit:          "sap_purchasing_source_list_data.OrderQuantityUnit",
	PurchaseOutlineAgreement:   "sap_purchasing_source_list_data.PurchaseOutlineAgreement",
	SupplierIsFixed:            "sap_purchasing_source_list_data.SupplierIsFixed",
	SourceOfSupplyIsBlocked:    "sap_purchasing_source_list_data.SourceOfSupplyIsBlocked",
	MRPSourcingControl:         "sap_purchasing_source_list_data.MRPSourcingControl",
	LastChangeDateTime:         "sap_purchasing_source_list_data.LastChangeDateTime",
	IssgPlantIsFixed:           "sap_purchasing_source_list_data.IssgPlantIsFixed",
	PurOutlineAgreementIsFixed: "sap_purchasing_source_list_data.PurOutlineAgreementIsFixed",
	SourceOfSupplyIsFixed:      "sap_purchasing_source_list_data.SourceOfSupplyIsFixed",
}

// Generated where

var SapPurchasingSourceListDatumWhere = struct {
	Material                   whereHelperstring
	Plant                      whereHelperstring
	SourceListRecord           whereHelperstring
	ValidityEndDate            whereHelperstring
	ValidityStartDate          whereHelpernull_String
	Supplier                   whereHelpernull_String
	PurchasingOrganization     whereHelpernull_String
	SupplyingPlant             whereHelpernull_String
	OrderQuantityUnit          whereHelpernull_String
	PurchaseOutlineAgreement   whereHelpernull_String
	SupplierIsFixed            whereHelpernull_Bool
	SourceOfSupplyIsBlocked    whereHelpernull_Bool
	MRPSourcingControl         whereHelpernull_String
	LastChangeDateTime         whereHelpernull_String
	IssgPlantIsFixed           whereHelpernull_Bool
	PurOutlineAgreementIsFixed whereHelpernull_Bool
	SourceOfSupplyIsFixed      whereHelpernull_Bool
}{
	Material:                   whereHelperstring{field: "`sap_purchasing_source_list_data`.`Material`"},
	Plant:                      whereHelperstring{field: "`sap_purchasing_source_list_data`.`Plant`"},
	SourceListRecord:           whereHelperstring{field: "`sap_purchasing_source_list_data`.`SourceListRecord`"},
	ValidityEndDate:            whereHelperstring{field: "`sap_purchasing_source_list_data`.`ValidityEndDate`"},
	ValidityStartDate:          whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`ValidityStartDate`"},
	Supplier:                   whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`Supplier`"},
	PurchasingOrganization:     whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`PurchasingOrganization`"},
	SupplyingPlant:             whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`SupplyingPlant`"},
	OrderQuantityUnit:          whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`OrderQuantityUnit`"},
	PurchaseOutlineAgreement:   whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`PurchaseOutlineAgreement`"},
	SupplierIsFixed:            whereHelpernull_Bool{field: "`sap_purchasing_source_list_data`.`SupplierIsFixed`"},
	SourceOfSupplyIsBlocked:    whereHelpernull_Bool{field: "`sap_purchasing_source_list_data`.`SourceOfSupplyIsBlocked`"},
	MRPSourcingControl:         whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`MRPSourcingControl`"},
	LastChangeDateTime:         whereHelpernull_String{field: "`sap_purchasing_source_list_data`.`LastChangeDateTime`"},
	IssgPlantIsFixed:           whereHelpernull_Bool{field: "`sap_purchasing_source_list_data`.`IssgPlantIsFixed`"},
	PurOutlineAgreementIsFixed: whereHelpernull_Bool{field: "`sap_purchasing_source_list_data`.`PurOutlineAgreementIsFixed`"},
	SourceOfSupplyIsFixed:      whereHelpernull_Bool{field: "`sap_purchasing_source_list_data`.`SourceOfSupplyIsFixed`"},
}

// SapPurchasingSourceListDatumRels is where relationship names are stored.
var SapPurchasingSourceListDatumRels = struct {
}{}

// sapPurchasingSourceListDatumR is where relationships are stored.
type sapPurchasingSourceListDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapPurchasingSourceListDatumR) NewStruct() *sapPurchasingSourceListDatumR {
	return &sapPurchasingSourceListDatumR{}
}

// sapPurchasingSourceListDatumL is where Load methods for each relationship are stored.
type sapPurchasingSourceListDatumL struct{}

var (
	sapPurchasingSourceListDatumAllColumns            = []string{"Material", "Plant", "SourceListRecord", "ValidityEndDate", "ValidityStartDate", "Supplier", "PurchasingOrganization", "SupplyingPlant", "OrderQuantityUnit", "PurchaseOutlineAgreement", "SupplierIsFixed", "SourceOfSupplyIsBlocked", "MRPSourcingControl", "LastChangeDateTime", "IssgPlantIsFixed", "PurOutlineAgreementIsFixed", "SourceOfSupplyIsFixed"}
	sapPurchasingSourceListDatumColumnsWithoutDefault = []string{"Material", "Plant", "SourceListRecord", "ValidityEndDate", "ValidityStartDate", "Supplier", "PurchasingOrganization", "SupplyingPlant", "OrderQuantityUnit", "PurchaseOutlineAgreement", "SupplierIsFixed", "SourceOfSupplyIsBlocked", "MRPSourcingControl", "LastChangeDateTime", "IssgPlantIsFixed", "PurOutlineAgreementIsFixed", "SourceOfSupplyIsFixed"}
	sapPurchasingSourceListDatumColumnsWithDefault    = []string{}
	sapPurchasingSourceListDatumPrimaryKeyColumns     = []string{"Material", "Plant", "SourceListRecord", "ValidityEndDate"}
	sapPurchasingSourceListDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchasingSourceListDatumSlice is an alias for a slice of pointers to SapPurchasingSourceListDatum.
	// This should almost always be used instead of []SapPurchasingSourceListDatum.
	SapPurchasingSourceListDatumSlice []*SapPurchasingSourceListDatum
	// SapPurchasingSourceListDatumHook is the signature for custom SapPurchasingSourceListDatum hook methods
	SapPurchasingSourceListDatumHook func(context.Context, boil.ContextExecutor, *SapPurchasingSourceListDatum) error

	sapPurchasingSourceListDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchasingSourceListDatumType                 = reflect.TypeOf(&SapPurchasingSourceListDatum{})
	sapPurchasingSourceListDatumMapping              = queries.MakeStructMapping(sapPurchasingSourceListDatumType)
	sapPurchasingSourceListDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, sapPurchasingSourceListDatumPrimaryKeyColumns)
	sapPurchasingSourceListDatumInsertCacheMut       sync.RWMutex
	sapPurchasingSourceListDatumInsertCache          = make(map[string]insertCache)
	sapPurchasingSourceListDatumUpdateCacheMut       sync.RWMutex
	sapPurchasingSourceListDatumUpdateCache          = make(map[string]updateCache)
	sapPurchasingSourceListDatumUpsertCacheMut       sync.RWMutex
	sapPurchasingSourceListDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchasingSourceListDatumAfterSelectHooks []SapPurchasingSourceListDatumHook

var sapPurchasingSourceListDatumBeforeInsertHooks []SapPurchasingSourceListDatumHook
var sapPurchasingSourceListDatumAfterInsertHooks []SapPurchasingSourceListDatumHook

var sapPurchasingSourceListDatumBeforeUpdateHooks []SapPurchasingSourceListDatumHook
var sapPurchasingSourceListDatumAfterUpdateHooks []SapPurchasingSourceListDatumHook

var sapPurchasingSourceListDatumBeforeDeleteHooks []SapPurchasingSourceListDatumHook
var sapPurchasingSourceListDatumAfterDeleteHooks []SapPurchasingSourceListDatumHook

var sapPurchasingSourceListDatumBeforeUpsertHooks []SapPurchasingSourceListDatumHook
var sapPurchasingSourceListDatumAfterUpsertHooks []SapPurchasingSourceListDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchasingSourceListDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchasingSourceListDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchasingSourceListDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchasingSourceListDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchasingSourceListDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchasingSourceListDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchasingSourceListDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchasingSourceListDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchasingSourceListDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingSourceListDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchasingSourceListDatumHook registers your hook function for all future operations.
func AddSapPurchasingSourceListDatumHook(hookPoint boil.HookPoint, sapPurchasingSourceListDatumHook SapPurchasingSourceListDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchasingSourceListDatumAfterSelectHooks = append(sapPurchasingSourceListDatumAfterSelectHooks, sapPurchasingSourceListDatumHook)
	case boil.BeforeInsertHook:
		sapPurchasingSourceListDatumBeforeInsertHooks = append(sapPurchasingSourceListDatumBeforeInsertHooks, sapPurchasingSourceListDatumHook)
	case boil.AfterInsertHook:
		sapPurchasingSourceListDatumAfterInsertHooks = append(sapPurchasingSourceListDatumAfterInsertHooks, sapPurchasingSourceListDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchasingSourceListDatumBeforeUpdateHooks = append(sapPurchasingSourceListDatumBeforeUpdateHooks, sapPurchasingSourceListDatumHook)
	case boil.AfterUpdateHook:
		sapPurchasingSourceListDatumAfterUpdateHooks = append(sapPurchasingSourceListDatumAfterUpdateHooks, sapPurchasingSourceListDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchasingSourceListDatumBeforeDeleteHooks = append(sapPurchasingSourceListDatumBeforeDeleteHooks, sapPurchasingSourceListDatumHook)
	case boil.AfterDeleteHook:
		sapPurchasingSourceListDatumAfterDeleteHooks = append(sapPurchasingSourceListDatumAfterDeleteHooks, sapPurchasingSourceListDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchasingSourceListDatumBeforeUpsertHooks = append(sapPurchasingSourceListDatumBeforeUpsertHooks, sapPurchasingSourceListDatumHook)
	case boil.AfterUpsertHook:
		sapPurchasingSourceListDatumAfterUpsertHooks = append(sapPurchasingSourceListDatumAfterUpsertHooks, sapPurchasingSourceListDatumHook)
	}
}

// One returns a single sapPurchasingSourceListDatum record from the query.
func (q sapPurchasingSourceListDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchasingSourceListDatum, error) {
	o := &SapPurchasingSourceListDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchasing_source_list_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchasingSourceListDatum records from the query.
func (q sapPurchasingSourceListDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchasingSourceListDatumSlice, error) {
	var o []*SapPurchasingSourceListDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchasingSourceListDatum slice")
	}

	if len(sapPurchasingSourceListDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchasingSourceListDatum records in the query.
func (q sapPurchasingSourceListDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchasing_source_list_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchasingSourceListDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchasing_source_list_data exists")
	}

	return count > 0, nil
}

// SapPurchasingSourceListData retrieves all the records using an executor.
func SapPurchasingSourceListData(mods ...qm.QueryMod) sapPurchasingSourceListDatumQuery {
	mods = append(mods, qm.From("`sap_purchasing_source_list_data`"))
	return sapPurchasingSourceListDatumQuery{NewQuery(mods...)}
}

// FindSapPurchasingSourceListDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchasingSourceListDatum(ctx context.Context, exec boil.ContextExecutor, material string, plant string, sourceListRecord string, validityEndDate string, selectCols ...string) (*SapPurchasingSourceListDatum, error) {
	sapPurchasingSourceListDatumObj := &SapPurchasingSourceListDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchasing_source_list_data` where `Material`=? AND `Plant`=? AND `SourceListRecord`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, material, plant, sourceListRecord, validityEndDate)

	err := q.Bind(ctx, exec, sapPurchasingSourceListDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchasing_source_list_data")
	}

	if err = sapPurchasingSourceListDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchasingSourceListDatumObj, err
	}

	return sapPurchasingSourceListDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchasingSourceListDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_source_list_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingSourceListDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchasingSourceListDatumInsertCacheMut.RLock()
	cache, cached := sapPurchasingSourceListDatumInsertCache[key]
	sapPurchasingSourceListDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchasingSourceListDatumAllColumns,
			sapPurchasingSourceListDatumColumnsWithDefault,
			sapPurchasingSourceListDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchasing_source_list_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchasing_source_list_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchasing_source_list_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchasingSourceListDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchasing_source_list_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Material,
		o.Plant,
		o.SourceListRecord,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_source_list_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingSourceListDatumInsertCacheMut.Lock()
		sapPurchasingSourceListDatumInsertCache[key] = cache
		sapPurchasingSourceListDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchasingSourceListDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchasingSourceListDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchasingSourceListDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchasingSourceListDatumUpdateCache[key]
	sapPurchasingSourceListDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchasingSourceListDatumAllColumns,
			sapPurchasingSourceListDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchasing_source_list_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchasing_source_list_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchasingSourceListDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, append(wl, sapPurchasingSourceListDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchasing_source_list_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchasing_source_list_data")
	}

	if !cached {
		sapPurchasingSourceListDatumUpdateCacheMut.Lock()
		sapPurchasingSourceListDatumUpdateCache[key] = cache
		sapPurchasingSourceListDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchasingSourceListDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchasing_source_list_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchasing_source_list_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchasingSourceListDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingSourceListDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchasing_source_list_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingSourceListDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchasingSourceListDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchasingSourceListDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchasingSourceListDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchasingSourceListDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_source_list_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingSourceListDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchasingSourceListDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchasingSourceListDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchasingSourceListDatumUpsertCache[key]
	sapPurchasingSourceListDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchasingSourceListDatumAllColumns,
			sapPurchasingSourceListDatumColumnsWithDefault,
			sapPurchasingSourceListDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchasingSourceListDatumAllColumns,
			sapPurchasingSourceListDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchasing_source_list_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchasing_source_list_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchasing_source_list_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchasing_source_list_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchasingSourceListDatumType, sapPurchasingSourceListDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchasing_source_list_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_source_list_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingSourceListDatumUpsertCacheMut.Lock()
		sapPurchasingSourceListDatumUpsertCache[key] = cache
		sapPurchasingSourceListDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchasingSourceListDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchasingSourceListDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchasingSourceListDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchasingSourceListDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchasing_source_list_data` WHERE `Material`=? AND `Plant`=? AND `SourceListRecord`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchasing_source_list_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchasing_source_list_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchasingSourceListDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchasingSourceListDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchasing_source_list_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_source_list_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchasingSourceListDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchasingSourceListDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingSourceListDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchasing_source_list_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingSourceListDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchasingSourceListDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_source_list_data")
	}

	if len(sapPurchasingSourceListDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchasingSourceListDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchasingSourceListDatum(ctx, exec, o.Material, o.Plant, o.SourceListRecord, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchasingSourceListDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchasingSourceListDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingSourceListDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchasing_source_list_data`.* FROM `sap_purchasing_source_list_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingSourceListDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchasingSourceListDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchasingSourceListDatumExists checks if the SapPurchasingSourceListDatum row exists.
func SapPurchasingSourceListDatumExists(ctx context.Context, exec boil.ContextExecutor, material string, plant string, sourceListRecord string, validityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchasing_source_list_data` where `Material`=? AND `Plant`=? AND `SourceListRecord`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, material, plant, sourceListRecord, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, material, plant, sourceListRecord, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchasing_source_list_data exists")
	}

	return exists, nil
}
