// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionRoutingComponentAllocationDatum is an object representing the database table.
type SapProductionRoutingComponentAllocationDatum struct {
	ProductionRoutingGroup       string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting            string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingSequence    string      `boil:"ProductionRoutingSequence" json:"ProductionRoutingSequence" toml:"ProductionRoutingSequence" yaml:"ProductionRoutingSequence"`
	ProductionRoutingOpIntID     string      `boil:"ProductionRoutingOpIntID" json:"ProductionRoutingOpIntID" toml:"ProductionRoutingOpIntID" yaml:"ProductionRoutingOpIntID"`
	ProdnRtgOpBOMItemInternalID  null.String `boil:"ProdnRtgOpBOMItemInternalID" json:"ProdnRtgOpBOMItemInternalID,omitempty" toml:"ProdnRtgOpBOMItemInternalID" yaml:"ProdnRtgOpBOMItemInternalID,omitempty"`
	ProdnRtgOpBOMItemIntVersion  null.String `boil:"ProdnRtgOpBOMItemIntVersion" json:"ProdnRtgOpBOMItemIntVersion,omitempty" toml:"ProdnRtgOpBOMItemIntVersion" yaml:"ProdnRtgOpBOMItemIntVersion,omitempty"`
	BillOfMaterialCategory       null.String `boil:"BillOfMaterialCategory" json:"BillOfMaterialCategory,omitempty" toml:"BillOfMaterialCategory" yaml:"BillOfMaterialCategory,omitempty"`
	BillOfMaterial               null.String `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	BillOfMaterialVariant        null.String `boil:"BillOfMaterialVariant" json:"BillOfMaterialVariant,omitempty" toml:"BillOfMaterialVariant" yaml:"BillOfMaterialVariant,omitempty"`
	BillOfMaterialItemNodeNumber null.String `boil:"BillOfMaterialItemNodeNumber" json:"BillOfMaterialItemNodeNumber,omitempty" toml:"BillOfMaterialItemNodeNumber" yaml:"BillOfMaterialItemNodeNumber,omitempty"`
	MatlCompIsMarkedForBackflush null.Bool   `boil:"MatlCompIsMarkedForBackflush" json:"MatlCompIsMarkedForBackflush,omitempty" toml:"MatlCompIsMarkedForBackflush" yaml:"MatlCompIsMarkedForBackflush,omitempty"`
	CreationDate                 null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate               null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ValidityStartDate            null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate              null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ChangeNumber                 null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ChangedDateTime              null.String `boil:"ChangedDateTime" json:"ChangedDateTime,omitempty" toml:"ChangedDateTime" yaml:"ChangedDateTime,omitempty"`

	R *sapProductionRoutingComponentAllocationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionRoutingComponentAllocationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionRoutingComponentAllocationDatumColumns = struct {
	ProductionRoutingGroup       string
	ProductionRouting            string
	ProductionRoutingSequence    string
	ProductionRoutingOpIntID     string
	ProdnRtgOpBOMItemInternalID  string
	ProdnRtgOpBOMItemIntVersion  string
	BillOfMaterialCategory       string
	BillOfMaterial               string
	BillOfMaterialVariant        string
	BillOfMaterialItemNodeNumber string
	MatlCompIsMarkedForBackflush string
	CreationDate                 string
	LastChangeDate               string
	ValidityStartDate            string
	ValidityEndDate              string
	ChangeNumber                 string
	ChangedDateTime              string
}{
	ProductionRoutingGroup:       "ProductionRoutingGroup",
	ProductionRouting:            "ProductionRouting",
	ProductionRoutingSequence:    "ProductionRoutingSequence",
	ProductionRoutingOpIntID:     "ProductionRoutingOpIntID",
	ProdnRtgOpBOMItemInternalID:  "ProdnRtgOpBOMItemInternalID",
	ProdnRtgOpBOMItemIntVersion:  "ProdnRtgOpBOMItemIntVersion",
	BillOfMaterialCategory:       "BillOfMaterialCategory",
	BillOfMaterial:               "BillOfMaterial",
	BillOfMaterialVariant:        "BillOfMaterialVariant",
	BillOfMaterialItemNodeNumber: "BillOfMaterialItemNodeNumber",
	MatlCompIsMarkedForBackflush: "MatlCompIsMarkedForBackflush",
	CreationDate:                 "CreationDate",
	LastChangeDate:               "LastChangeDate",
	ValidityStartDate:            "ValidityStartDate",
	ValidityEndDate:              "ValidityEndDate",
	ChangeNumber:                 "ChangeNumber",
	ChangedDateTime:              "ChangedDateTime",
}

var SapProductionRoutingComponentAllocationDatumTableColumns = struct {
	ProductionRoutingGroup       string
	ProductionRouting            string
	ProductionRoutingSequence    string
	ProductionRoutingOpIntID     string
	ProdnRtgOpBOMItemInternalID  string
	ProdnRtgOpBOMItemIntVersion  string
	BillOfMaterialCategory       string
	BillOfMaterial               string
	BillOfMaterialVariant        string
	BillOfMaterialItemNodeNumber string
	MatlCompIsMarkedForBackflush string
	CreationDate                 string
	LastChangeDate               string
	ValidityStartDate            string
	ValidityEndDate              string
	ChangeNumber                 string
	ChangedDateTime              string
}{
	ProductionRoutingGroup:       "sap_production_routing_component_allocation_data.ProductionRoutingGroup",
	ProductionRouting:            "sap_production_routing_component_allocation_data.ProductionRouting",
	ProductionRoutingSequence:    "sap_production_routing_component_allocation_data.ProductionRoutingSequence",
	ProductionRoutingOpIntID:     "sap_production_routing_component_allocation_data.ProductionRoutingOpIntID",
	ProdnRtgOpBOMItemInternalID:  "sap_production_routing_component_allocation_data.ProdnRtgOpBOMItemInternalID",
	ProdnRtgOpBOMItemIntVersion:  "sap_production_routing_component_allocation_data.ProdnRtgOpBOMItemIntVersion",
	BillOfMaterialCategory:       "sap_production_routing_component_allocation_data.BillOfMaterialCategory",
	BillOfMaterial:               "sap_production_routing_component_allocation_data.BillOfMaterial",
	BillOfMaterialVariant:        "sap_production_routing_component_allocation_data.BillOfMaterialVariant",
	BillOfMaterialItemNodeNumber: "sap_production_routing_component_allocation_data.BillOfMaterialItemNodeNumber",
	MatlCompIsMarkedForBackflush: "sap_production_routing_component_allocation_data.MatlCompIsMarkedForBackflush",
	CreationDate:                 "sap_production_routing_component_allocation_data.CreationDate",
	LastChangeDate:               "sap_production_routing_component_allocation_data.LastChangeDate",
	ValidityStartDate:            "sap_production_routing_component_allocation_data.ValidityStartDate",
	ValidityEndDate:              "sap_production_routing_component_allocation_data.ValidityEndDate",
	ChangeNumber:                 "sap_production_routing_component_allocation_data.ChangeNumber",
	ChangedDateTime:              "sap_production_routing_component_allocation_data.ChangedDateTime",
}

// Generated where

var SapProductionRoutingComponentAllocationDatumWhere = struct {
	ProductionRoutingGroup       whereHelperstring
	ProductionRouting            whereHelperstring
	ProductionRoutingSequence    whereHelperstring
	ProductionRoutingOpIntID     whereHelperstring
	ProdnRtgOpBOMItemInternalID  whereHelpernull_String
	ProdnRtgOpBOMItemIntVersion  whereHelpernull_String
	BillOfMaterialCategory       whereHelpernull_String
	BillOfMaterial               whereHelpernull_String
	BillOfMaterialVariant        whereHelpernull_String
	BillOfMaterialItemNodeNumber whereHelpernull_String
	MatlCompIsMarkedForBackflush whereHelpernull_Bool
	CreationDate                 whereHelpernull_String
	LastChangeDate               whereHelpernull_String
	ValidityStartDate            whereHelpernull_String
	ValidityEndDate              whereHelpernull_String
	ChangeNumber                 whereHelpernull_String
	ChangedDateTime              whereHelpernull_String
}{
	ProductionRoutingGroup:       whereHelperstring{field: "`sap_production_routing_component_allocation_data`.`ProductionRoutingGroup`"},
	ProductionRouting:            whereHelperstring{field: "`sap_production_routing_component_allocation_data`.`ProductionRouting`"},
	ProductionRoutingSequence:    whereHelperstring{field: "`sap_production_routing_component_allocation_data`.`ProductionRoutingSequence`"},
	ProductionRoutingOpIntID:     whereHelperstring{field: "`sap_production_routing_component_allocation_data`.`ProductionRoutingOpIntID`"},
	ProdnRtgOpBOMItemInternalID:  whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`ProdnRtgOpBOMItemInternalID`"},
	ProdnRtgOpBOMItemIntVersion:  whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`ProdnRtgOpBOMItemIntVersion`"},
	BillOfMaterialCategory:       whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`BillOfMaterialCategory`"},
	BillOfMaterial:               whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`BillOfMaterial`"},
	BillOfMaterialVariant:        whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`BillOfMaterialVariant`"},
	BillOfMaterialItemNodeNumber: whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`BillOfMaterialItemNodeNumber`"},
	MatlCompIsMarkedForBackflush: whereHelpernull_Bool{field: "`sap_production_routing_component_allocation_data`.`MatlCompIsMarkedForBackflush`"},
	CreationDate:                 whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`CreationDate`"},
	LastChangeDate:               whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`LastChangeDate`"},
	ValidityStartDate:            whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`ValidityStartDate`"},
	ValidityEndDate:              whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`ValidityEndDate`"},
	ChangeNumber:                 whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`ChangeNumber`"},
	ChangedDateTime:              whereHelpernull_String{field: "`sap_production_routing_component_allocation_data`.`ChangedDateTime`"},
}

// SapProductionRoutingComponentAllocationDatumRels is where relationship names are stored.
var SapProductionRoutingComponentAllocationDatumRels = struct {
}{}

// sapProductionRoutingComponentAllocationDatumR is where relationships are stored.
type sapProductionRoutingComponentAllocationDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapProductionRoutingComponentAllocationDatumR) NewStruct() *sapProductionRoutingComponentAllocationDatumR {
	return &sapProductionRoutingComponentAllocationDatumR{}
}

// sapProductionRoutingComponentAllocationDatumL is where Load methods for each relationship are stored.
type sapProductionRoutingComponentAllocationDatumL struct{}

var (
	sapProductionRoutingComponentAllocationDatumAllColumns            = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProdnRtgOpBOMItemInternalID", "ProdnRtgOpBOMItemIntVersion", "BillOfMaterialCategory", "BillOfMaterial", "BillOfMaterialVariant", "BillOfMaterialItemNodeNumber", "MatlCompIsMarkedForBackflush", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber", "ChangedDateTime"}
	sapProductionRoutingComponentAllocationDatumColumnsWithoutDefault = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProdnRtgOpBOMItemInternalID", "ProdnRtgOpBOMItemIntVersion", "BillOfMaterialCategory", "BillOfMaterial", "BillOfMaterialVariant", "BillOfMaterialItemNodeNumber", "MatlCompIsMarkedForBackflush", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber", "ChangedDateTime"}
	sapProductionRoutingComponentAllocationDatumColumnsWithDefault    = []string{}
	sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns     = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID"}
)

type (
	// SapProductionRoutingComponentAllocationDatumSlice is an alias for a slice of pointers to SapProductionRoutingComponentAllocationDatum.
	// This should almost always be used instead of []SapProductionRoutingComponentAllocationDatum.
	SapProductionRoutingComponentAllocationDatumSlice []*SapProductionRoutingComponentAllocationDatum
	// SapProductionRoutingComponentAllocationDatumHook is the signature for custom SapProductionRoutingComponentAllocationDatum hook methods
	SapProductionRoutingComponentAllocationDatumHook func(context.Context, boil.ContextExecutor, *SapProductionRoutingComponentAllocationDatum) error

	sapProductionRoutingComponentAllocationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionRoutingComponentAllocationDatumType                 = reflect.TypeOf(&SapProductionRoutingComponentAllocationDatum{})
	sapProductionRoutingComponentAllocationDatumMapping              = queries.MakeStructMapping(sapProductionRoutingComponentAllocationDatumType)
	sapProductionRoutingComponentAllocationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns)
	sapProductionRoutingComponentAllocationDatumInsertCacheMut       sync.RWMutex
	sapProductionRoutingComponentAllocationDatumInsertCache          = make(map[string]insertCache)
	sapProductionRoutingComponentAllocationDatumUpdateCacheMut       sync.RWMutex
	sapProductionRoutingComponentAllocationDatumUpdateCache          = make(map[string]updateCache)
	sapProductionRoutingComponentAllocationDatumUpsertCacheMut       sync.RWMutex
	sapProductionRoutingComponentAllocationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionRoutingComponentAllocationDatumBeforeInsertHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumBeforeUpdateHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumBeforeDeleteHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumBeforeUpsertHooks []SapProductionRoutingComponentAllocationDatumHook

var sapProductionRoutingComponentAllocationDatumAfterInsertHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumAfterSelectHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumAfterUpdateHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumAfterDeleteHooks []SapProductionRoutingComponentAllocationDatumHook
var sapProductionRoutingComponentAllocationDatumAfterUpsertHooks []SapProductionRoutingComponentAllocationDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionRoutingComponentAllocationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingComponentAllocationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionRoutingComponentAllocationDatumHook registers your hook function for all future operations.
func AddSapProductionRoutingComponentAllocationDatumHook(hookPoint boil.HookPoint, sapProductionRoutingComponentAllocationDatumHook SapProductionRoutingComponentAllocationDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapProductionRoutingComponentAllocationDatumBeforeInsertHooks = append(sapProductionRoutingComponentAllocationDatumBeforeInsertHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionRoutingComponentAllocationDatumBeforeUpdateHooks = append(sapProductionRoutingComponentAllocationDatumBeforeUpdateHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionRoutingComponentAllocationDatumBeforeDeleteHooks = append(sapProductionRoutingComponentAllocationDatumBeforeDeleteHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionRoutingComponentAllocationDatumBeforeUpsertHooks = append(sapProductionRoutingComponentAllocationDatumBeforeUpsertHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.AfterInsertHook:
		sapProductionRoutingComponentAllocationDatumAfterInsertHooks = append(sapProductionRoutingComponentAllocationDatumAfterInsertHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.AfterSelectHook:
		sapProductionRoutingComponentAllocationDatumAfterSelectHooks = append(sapProductionRoutingComponentAllocationDatumAfterSelectHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.AfterUpdateHook:
		sapProductionRoutingComponentAllocationDatumAfterUpdateHooks = append(sapProductionRoutingComponentAllocationDatumAfterUpdateHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.AfterDeleteHook:
		sapProductionRoutingComponentAllocationDatumAfterDeleteHooks = append(sapProductionRoutingComponentAllocationDatumAfterDeleteHooks, sapProductionRoutingComponentAllocationDatumHook)
	case boil.AfterUpsertHook:
		sapProductionRoutingComponentAllocationDatumAfterUpsertHooks = append(sapProductionRoutingComponentAllocationDatumAfterUpsertHooks, sapProductionRoutingComponentAllocationDatumHook)
	}
}

// One returns a single sapProductionRoutingComponentAllocationDatum record from the query.
func (q sapProductionRoutingComponentAllocationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionRoutingComponentAllocationDatum, error) {
	o := &SapProductionRoutingComponentAllocationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_routing_component_allocation_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionRoutingComponentAllocationDatum records from the query.
func (q sapProductionRoutingComponentAllocationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionRoutingComponentAllocationDatumSlice, error) {
	var o []*SapProductionRoutingComponentAllocationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionRoutingComponentAllocationDatum slice")
	}

	if len(sapProductionRoutingComponentAllocationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionRoutingComponentAllocationDatum records in the query.
func (q sapProductionRoutingComponentAllocationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_routing_component_allocation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionRoutingComponentAllocationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_routing_component_allocation_data exists")
	}

	return count > 0, nil
}

// SapProductionRoutingComponentAllocationData retrieves all the records using an executor.
func SapProductionRoutingComponentAllocationData(mods ...qm.QueryMod) sapProductionRoutingComponentAllocationDatumQuery {
	mods = append(mods, qm.From("`sap_production_routing_component_allocation_data`"))
	return sapProductionRoutingComponentAllocationDatumQuery{NewQuery(mods...)}
}

// FindSapProductionRoutingComponentAllocationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionRoutingComponentAllocationDatum(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingOpIntID string, selectCols ...string) (*SapProductionRoutingComponentAllocationDatum, error) {
	sapProductionRoutingComponentAllocationDatumObj := &SapProductionRoutingComponentAllocationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_routing_component_allocation_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=?", sel,
	)

	q := queries.Raw(query, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID)

	err := q.Bind(ctx, exec, sapProductionRoutingComponentAllocationDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_routing_component_allocation_data")
	}

	if err = sapProductionRoutingComponentAllocationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionRoutingComponentAllocationDatumObj, err
	}

	return sapProductionRoutingComponentAllocationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionRoutingComponentAllocationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_component_allocation_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingComponentAllocationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionRoutingComponentAllocationDatumInsertCacheMut.RLock()
	cache, cached := sapProductionRoutingComponentAllocationDatumInsertCache[key]
	sapProductionRoutingComponentAllocationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionRoutingComponentAllocationDatumAllColumns,
			sapProductionRoutingComponentAllocationDatumColumnsWithDefault,
			sapProductionRoutingComponentAllocationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_routing_component_allocation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_routing_component_allocation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_routing_component_allocation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_routing_component_allocation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingSequence,
		o.ProductionRoutingOpIntID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_component_allocation_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingComponentAllocationDatumInsertCacheMut.Lock()
		sapProductionRoutingComponentAllocationDatumInsertCache[key] = cache
		sapProductionRoutingComponentAllocationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionRoutingComponentAllocationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionRoutingComponentAllocationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionRoutingComponentAllocationDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionRoutingComponentAllocationDatumUpdateCache[key]
	sapProductionRoutingComponentAllocationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionRoutingComponentAllocationDatumAllColumns,
			sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_routing_component_allocation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_routing_component_allocation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, append(wl, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_routing_component_allocation_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_routing_component_allocation_data")
	}

	if !cached {
		sapProductionRoutingComponentAllocationDatumUpdateCacheMut.Lock()
		sapProductionRoutingComponentAllocationDatumUpdateCache[key] = cache
		sapProductionRoutingComponentAllocationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionRoutingComponentAllocationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_routing_component_allocation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_routing_component_allocation_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionRoutingComponentAllocationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingComponentAllocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_routing_component_allocation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionRoutingComponentAllocationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionRoutingComponentAllocationDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionRoutingComponentAllocationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionRoutingComponentAllocationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_component_allocation_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingComponentAllocationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionRoutingComponentAllocationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionRoutingComponentAllocationDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionRoutingComponentAllocationDatumUpsertCache[key]
	sapProductionRoutingComponentAllocationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionRoutingComponentAllocationDatumAllColumns,
			sapProductionRoutingComponentAllocationDatumColumnsWithDefault,
			sapProductionRoutingComponentAllocationDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapProductionRoutingComponentAllocationDatumAllColumns,
			sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_routing_component_allocation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_routing_component_allocation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_routing_component_allocation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_routing_component_allocation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionRoutingComponentAllocationDatumType, sapProductionRoutingComponentAllocationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_routing_component_allocation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_component_allocation_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingComponentAllocationDatumUpsertCacheMut.Lock()
		sapProductionRoutingComponentAllocationDatumUpsertCache[key] = cache
		sapProductionRoutingComponentAllocationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionRoutingComponentAllocationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionRoutingComponentAllocationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionRoutingComponentAllocationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionRoutingComponentAllocationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_routing_component_allocation_data` WHERE `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_routing_component_allocation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_routing_component_allocation_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionRoutingComponentAllocationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionRoutingComponentAllocationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_routing_component_allocation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_component_allocation_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionRoutingComponentAllocationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionRoutingComponentAllocationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingComponentAllocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_routing_component_allocation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionRoutingComponentAllocationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_component_allocation_data")
	}

	if len(sapProductionRoutingComponentAllocationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionRoutingComponentAllocationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionRoutingComponentAllocationDatum(ctx, exec, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingSequence, o.ProductionRoutingOpIntID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionRoutingComponentAllocationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionRoutingComponentAllocationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingComponentAllocationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_routing_component_allocation_data`.* FROM `sap_production_routing_component_allocation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingComponentAllocationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionRoutingComponentAllocationDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionRoutingComponentAllocationDatumExists checks if the SapProductionRoutingComponentAllocationDatum row exists.
func SapProductionRoutingComponentAllocationDatumExists(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingOpIntID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_routing_component_allocation_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID)
	}
	row := exec.QueryRowContext(ctx, sql, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_routing_component_allocation_data exists")
	}

	return exists, nil
}
