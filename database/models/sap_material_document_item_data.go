// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaterialDocumentItemDatum is an object representing the database table.
type SapMaterialDocumentItemDatum struct {
	MaterialDocumentYear           string      `boil:"MaterialDocumentYear" json:"MaterialDocumentYear" toml:"MaterialDocumentYear" yaml:"MaterialDocumentYear"`
	MaterialDocument               string      `boil:"MaterialDocument" json:"MaterialDocument" toml:"MaterialDocument" yaml:"MaterialDocument"`
	MaterialDocumentItem           string      `boil:"MaterialDocumentItem" json:"MaterialDocumentItem" toml:"MaterialDocumentItem" yaml:"MaterialDocumentItem"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	InventoryStockType             null.String `boil:"InventoryStockType" json:"InventoryStockType,omitempty" toml:"InventoryStockType" yaml:"InventoryStockType,omitempty"`
	InventoryValuationType         null.String `boil:"InventoryValuationType" json:"InventoryValuationType,omitempty" toml:"InventoryValuationType" yaml:"InventoryValuationType,omitempty"`
	InventorySpecialStockType      null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	Customer                       null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	SalesOrder                     null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem                 null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	SalesOrderScheduleLine         null.String `boil:"SalesOrderScheduleLine" json:"SalesOrderScheduleLine,omitempty" toml:"SalesOrderScheduleLine" yaml:"SalesOrderScheduleLine,omitempty"`
	PurchaseOrder                  null.String `boil:"PurchaseOrder" json:"PurchaseOrder,omitempty" toml:"PurchaseOrder" yaml:"PurchaseOrder,omitempty"`
	PurchaseOrderItem              null.String `boil:"PurchaseOrderItem" json:"PurchaseOrderItem,omitempty" toml:"PurchaseOrderItem" yaml:"PurchaseOrderItem,omitempty"`
	WBSElement                     null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ManufacturingOrder             null.String `boil:"ManufacturingOrder" json:"ManufacturingOrder,omitempty" toml:"ManufacturingOrder" yaml:"ManufacturingOrder,omitempty"`
	ManufacturingOrderItem         null.String `boil:"ManufacturingOrderItem" json:"ManufacturingOrderItem,omitempty" toml:"ManufacturingOrderItem" yaml:"ManufacturingOrderItem,omitempty"`
	GoodsMovementRefDocType        null.String `boil:"GoodsMovementRefDocType" json:"GoodsMovementRefDocType,omitempty" toml:"GoodsMovementRefDocType" yaml:"GoodsMovementRefDocType,omitempty"`
	GoodsMovementReasonCode        null.String `boil:"GoodsMovementReasonCode" json:"GoodsMovementReasonCode,omitempty" toml:"GoodsMovementReasonCode" yaml:"GoodsMovementReasonCode,omitempty"`
	Delivery                       null.String `boil:"Delivery" json:"Delivery,omitempty" toml:"Delivery" yaml:"Delivery,omitempty"`
	DeliveryItem                   null.String `boil:"DeliveryItem" json:"DeliveryItem,omitempty" toml:"DeliveryItem" yaml:"DeliveryItem,omitempty"`
	AccountAssignmentCategory      null.String `boil:"AccountAssignmentCategory" json:"AccountAssignmentCategory,omitempty" toml:"AccountAssignmentCategory" yaml:"AccountAssignmentCategory,omitempty"`
	CostCenter                     null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	ControllingArea                null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	CostObject                     null.String `boil:"CostObject" json:"CostObject,omitempty" toml:"CostObject" yaml:"CostObject,omitempty"`
	ProfitabilitySegment           null.String `boil:"ProfitabilitySegment" json:"ProfitabilitySegment,omitempty" toml:"ProfitabilitySegment" yaml:"ProfitabilitySegment,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	GLAccount                      null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	FunctionalArea                 null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	MaterialBaseUnit               null.String `boil:"MaterialBaseUnit" json:"MaterialBaseUnit,omitempty" toml:"MaterialBaseUnit" yaml:"MaterialBaseUnit,omitempty"`
	QuantityInBaseUnit             null.String `boil:"QuantityInBaseUnit" json:"QuantityInBaseUnit,omitempty" toml:"QuantityInBaseUnit" yaml:"QuantityInBaseUnit,omitempty"`
	EntryUnit                      null.String `boil:"EntryUnit" json:"EntryUnit,omitempty" toml:"EntryUnit" yaml:"EntryUnit,omitempty"`
	QuantityInEntryUnit            null.String `boil:"QuantityInEntryUnit" json:"QuantityInEntryUnit,omitempty" toml:"QuantityInEntryUnit" yaml:"QuantityInEntryUnit,omitempty"`
	CompanyCodeCurrency            null.String `boil:"CompanyCodeCurrency" json:"CompanyCodeCurrency,omitempty" toml:"CompanyCodeCurrency" yaml:"CompanyCodeCurrency,omitempty"`
	FiscalYear                     null.String `boil:"FiscalYear" json:"FiscalYear,omitempty" toml:"FiscalYear" yaml:"FiscalYear,omitempty"`
	FiscalYearPeriod               null.String `boil:"FiscalYearPeriod" json:"FiscalYearPeriod,omitempty" toml:"FiscalYearPeriod" yaml:"FiscalYearPeriod,omitempty"`
	IssgOrRcvgMaterial             null.String `boil:"IssgOrRcvgMaterial" json:"IssgOrRcvgMaterial,omitempty" toml:"IssgOrRcvgMaterial" yaml:"IssgOrRcvgMaterial,omitempty"`
	IssgOrRcvgBatch                null.String `boil:"IssgOrRcvgBatch" json:"IssgOrRcvgBatch,omitempty" toml:"IssgOrRcvgBatch" yaml:"IssgOrRcvgBatch,omitempty"`
	IssuingOrReceivingPlant        null.String `boil:"IssuingOrReceivingPlant" json:"IssuingOrReceivingPlant,omitempty" toml:"IssuingOrReceivingPlant" yaml:"IssuingOrReceivingPlant,omitempty"`
	IssuingOrReceivingStorageLoc   null.String `boil:"IssuingOrReceivingStorageLoc" json:"IssuingOrReceivingStorageLoc,omitempty" toml:"IssuingOrReceivingStorageLoc" yaml:"IssuingOrReceivingStorageLoc,omitempty"`
	IssuingOrReceivingStockType    null.String `boil:"IssuingOrReceivingStockType" json:"IssuingOrReceivingStockType,omitempty" toml:"IssuingOrReceivingStockType" yaml:"IssuingOrReceivingStockType,omitempty"`
	IssgOrRcvgSpclStockInd         null.String `boil:"IssgOrRcvgSpclStockInd" json:"IssgOrRcvgSpclStockInd,omitempty" toml:"IssgOrRcvgSpclStockInd" yaml:"IssgOrRcvgSpclStockInd,omitempty"`
	IssuingOrReceivingValType      null.String `boil:"IssuingOrReceivingValType" json:"IssuingOrReceivingValType,omitempty" toml:"IssuingOrReceivingValType" yaml:"IssuingOrReceivingValType,omitempty"`
	IsCompletelyDelivered          null.Bool   `boil:"IsCompletelyDelivered" json:"IsCompletelyDelivered,omitempty" toml:"IsCompletelyDelivered" yaml:"IsCompletelyDelivered,omitempty"`
	MaterialDocumentItemText       null.String `boil:"MaterialDocumentItemText" json:"MaterialDocumentItemText,omitempty" toml:"MaterialDocumentItemText" yaml:"MaterialDocumentItemText,omitempty"`
	UnloadingPointName             null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	ShelfLifeExpirationDate        null.String `boil:"ShelfLifeExpirationDate" json:"ShelfLifeExpirationDate,omitempty" toml:"ShelfLifeExpirationDate" yaml:"ShelfLifeExpirationDate,omitempty"`
	ManufactureDate                null.String `boil:"ManufactureDate" json:"ManufactureDate,omitempty" toml:"ManufactureDate" yaml:"ManufactureDate,omitempty"`
	SerialNumbersAreCreatedAutomly null.Bool   `boil:"SerialNumbersAreCreatedAutomly" json:"SerialNumbersAreCreatedAutomly,omitempty" toml:"SerialNumbersAreCreatedAutomly" yaml:"SerialNumbersAreCreatedAutomly,omitempty"`
	Reservation                    null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                null.String `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	ReservationIsFinallyIssued     null.Bool   `boil:"ReservationIsFinallyIssued" json:"ReservationIsFinallyIssued,omitempty" toml:"ReservationIsFinallyIssued" yaml:"ReservationIsFinallyIssued,omitempty"`
	IsAutomaticallyCreated         null.String `boil:"IsAutomaticallyCreated" json:"IsAutomaticallyCreated,omitempty" toml:"IsAutomaticallyCreated" yaml:"IsAutomaticallyCreated,omitempty"`
	GoodsMovementIsCancelled       null.Bool   `boil:"GoodsMovementIsCancelled" json:"GoodsMovementIsCancelled,omitempty" toml:"GoodsMovementIsCancelled" yaml:"GoodsMovementIsCancelled,omitempty"`
	ReversedMaterialDocumentYear   null.String `boil:"ReversedMaterialDocumentYear" json:"ReversedMaterialDocumentYear,omitempty" toml:"ReversedMaterialDocumentYear" yaml:"ReversedMaterialDocumentYear,omitempty"`
	ReversedMaterialDocument       null.String `boil:"ReversedMaterialDocument" json:"ReversedMaterialDocument,omitempty" toml:"ReversedMaterialDocument" yaml:"ReversedMaterialDocument,omitempty"`
	ReversedMaterialDocumentItem   null.String `boil:"ReversedMaterialDocumentItem" json:"ReversedMaterialDocumentItem,omitempty" toml:"ReversedMaterialDocumentItem" yaml:"ReversedMaterialDocumentItem,omitempty"`
	ReferenceDocumentFiscalYear    null.String `boil:"ReferenceDocumentFiscalYear" json:"ReferenceDocumentFiscalYear,omitempty" toml:"ReferenceDocumentFiscalYear" yaml:"ReferenceDocumentFiscalYear,omitempty"`
	InvtryMgmtRefDocumentItem      null.String `boil:"InvtryMgmtRefDocumentItem" json:"InvtryMgmtRefDocumentItem,omitempty" toml:"InvtryMgmtRefDocumentItem" yaml:"InvtryMgmtRefDocumentItem,omitempty"`
	InvtryMgmtReferenceDocument    null.String `boil:"InvtryMgmtReferenceDocument" json:"InvtryMgmtReferenceDocument,omitempty" toml:"InvtryMgmtReferenceDocument" yaml:"InvtryMgmtReferenceDocument,omitempty"`
	MaterialDocumentPostingType    null.String `boil:"MaterialDocumentPostingType" json:"MaterialDocumentPostingType,omitempty" toml:"MaterialDocumentPostingType" yaml:"MaterialDocumentPostingType,omitempty"`

	R *sapMaterialDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaterialDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaterialDocumentItemDatumColumns = struct {
	MaterialDocumentYear           string
	MaterialDocument               string
	MaterialDocumentItem           string
	Material                       string
	Plant                          string
	StorageLocation                string
	Batch                          string
	GoodsMovementType              string
	InventoryStockType             string
	InventoryValuationType         string
	InventorySpecialStockType      string
	Supplier                       string
	Customer                       string
	SalesOrder                     string
	SalesOrderItem                 string
	SalesOrderScheduleLine         string
	PurchaseOrder                  string
	PurchaseOrderItem              string
	WBSElement                     string
	ManufacturingOrder             string
	ManufacturingOrderItem         string
	GoodsMovementRefDocType        string
	GoodsMovementReasonCode        string
	Delivery                       string
	DeliveryItem                   string
	AccountAssignmentCategory      string
	CostCenter                     string
	ControllingArea                string
	CostObject                     string
	ProfitabilitySegment           string
	ProfitCenter                   string
	GLAccount                      string
	FunctionalArea                 string
	MaterialBaseUnit               string
	QuantityInBaseUnit             string
	EntryUnit                      string
	QuantityInEntryUnit            string
	CompanyCodeCurrency            string
	FiscalYear                     string
	FiscalYearPeriod               string
	IssgOrRcvgMaterial             string
	IssgOrRcvgBatch                string
	IssuingOrReceivingPlant        string
	IssuingOrReceivingStorageLoc   string
	IssuingOrReceivingStockType    string
	IssgOrRcvgSpclStockInd         string
	IssuingOrReceivingValType      string
	IsCompletelyDelivered          string
	MaterialDocumentItemText       string
	UnloadingPointName             string
	ShelfLifeExpirationDate        string
	ManufactureDate                string
	SerialNumbersAreCreatedAutomly string
	Reservation                    string
	ReservationItem                string
	ReservationIsFinallyIssued     string
	IsAutomaticallyCreated         string
	GoodsMovementIsCancelled       string
	ReversedMaterialDocumentYear   string
	ReversedMaterialDocument       string
	ReversedMaterialDocumentItem   string
	ReferenceDocumentFiscalYear    string
	InvtryMgmtRefDocumentItem      string
	InvtryMgmtReferenceDocument    string
	MaterialDocumentPostingType    string
}{
	MaterialDocumentYear:           "MaterialDocumentYear",
	MaterialDocument:               "MaterialDocument",
	MaterialDocumentItem:           "MaterialDocumentItem",
	Material:                       "Material",
	Plant:                          "Plant",
	StorageLocation:                "StorageLocation",
	Batch:                          "Batch",
	GoodsMovementType:              "GoodsMovementType",
	InventoryStockType:             "InventoryStockType",
	InventoryValuationType:         "InventoryValuationType",
	InventorySpecialStockType:      "InventorySpecialStockType",
	Supplier:                       "Supplier",
	Customer:                       "Customer",
	SalesOrder:                     "SalesOrder",
	SalesOrderItem:                 "SalesOrderItem",
	SalesOrderScheduleLine:         "SalesOrderScheduleLine",
	PurchaseOrder:                  "PurchaseOrder",
	PurchaseOrderItem:              "PurchaseOrderItem",
	WBSElement:                     "WBSElement",
	ManufacturingOrder:             "ManufacturingOrder",
	ManufacturingOrderItem:         "ManufacturingOrderItem",
	GoodsMovementRefDocType:        "GoodsMovementRefDocType",
	GoodsMovementReasonCode:        "GoodsMovementReasonCode",
	Delivery:                       "Delivery",
	DeliveryItem:                   "DeliveryItem",
	AccountAssignmentCategory:      "AccountAssignmentCategory",
	CostCenter:                     "CostCenter",
	ControllingArea:                "ControllingArea",
	CostObject:                     "CostObject",
	ProfitabilitySegment:           "ProfitabilitySegment",
	ProfitCenter:                   "ProfitCenter",
	GLAccount:                      "GLAccount",
	FunctionalArea:                 "FunctionalArea",
	MaterialBaseUnit:               "MaterialBaseUnit",
	QuantityInBaseUnit:             "QuantityInBaseUnit",
	EntryUnit:                      "EntryUnit",
	QuantityInEntryUnit:            "QuantityInEntryUnit",
	CompanyCodeCurrency:            "CompanyCodeCurrency",
	FiscalYear:                     "FiscalYear",
	FiscalYearPeriod:               "FiscalYearPeriod",
	IssgOrRcvgMaterial:             "IssgOrRcvgMaterial",
	IssgOrRcvgBatch:                "IssgOrRcvgBatch",
	IssuingOrReceivingPlant:        "IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc:   "IssuingOrReceivingStorageLoc",
	IssuingOrReceivingStockType:    "IssuingOrReceivingStockType",
	IssgOrRcvgSpclStockInd:         "IssgOrRcvgSpclStockInd",
	IssuingOrReceivingValType:      "IssuingOrReceivingValType",
	IsCompletelyDelivered:          "IsCompletelyDelivered",
	MaterialDocumentItemText:       "MaterialDocumentItemText",
	UnloadingPointName:             "UnloadingPointName",
	ShelfLifeExpirationDate:        "ShelfLifeExpirationDate",
	ManufactureDate:                "ManufactureDate",
	SerialNumbersAreCreatedAutomly: "SerialNumbersAreCreatedAutomly",
	Reservation:                    "Reservation",
	ReservationItem:                "ReservationItem",
	ReservationIsFinallyIssued:     "ReservationIsFinallyIssued",
	IsAutomaticallyCreated:         "IsAutomaticallyCreated",
	GoodsMovementIsCancelled:       "GoodsMovementIsCancelled",
	ReversedMaterialDocumentYear:   "ReversedMaterialDocumentYear",
	ReversedMaterialDocument:       "ReversedMaterialDocument",
	ReversedMaterialDocumentItem:   "ReversedMaterialDocumentItem",
	ReferenceDocumentFiscalYear:    "ReferenceDocumentFiscalYear",
	InvtryMgmtRefDocumentItem:      "InvtryMgmtRefDocumentItem",
	InvtryMgmtReferenceDocument:    "InvtryMgmtReferenceDocument",
	MaterialDocumentPostingType:    "MaterialDocumentPostingType",
}

var SapMaterialDocumentItemDatumTableColumns = struct {
	MaterialDocumentYear           string
	MaterialDocument               string
	MaterialDocumentItem           string
	Material                       string
	Plant                          string
	StorageLocation                string
	Batch                          string
	GoodsMovementType              string
	InventoryStockType             string
	InventoryValuationType         string
	InventorySpecialStockType      string
	Supplier                       string
	Customer                       string
	SalesOrder                     string
	SalesOrderItem                 string
	SalesOrderScheduleLine         string
	PurchaseOrder                  string
	PurchaseOrderItem              string
	WBSElement                     string
	ManufacturingOrder             string
	ManufacturingOrderItem         string
	GoodsMovementRefDocType        string
	GoodsMovementReasonCode        string
	Delivery                       string
	DeliveryItem                   string
	AccountAssignmentCategory      string
	CostCenter                     string
	ControllingArea                string
	CostObject                     string
	ProfitabilitySegment           string
	ProfitCenter                   string
	GLAccount                      string
	FunctionalArea                 string
	MaterialBaseUnit               string
	QuantityInBaseUnit             string
	EntryUnit                      string
	QuantityInEntryUnit            string
	CompanyCodeCurrency            string
	FiscalYear                     string
	FiscalYearPeriod               string
	IssgOrRcvgMaterial             string
	IssgOrRcvgBatch                string
	IssuingOrReceivingPlant        string
	IssuingOrReceivingStorageLoc   string
	IssuingOrReceivingStockType    string
	IssgOrRcvgSpclStockInd         string
	IssuingOrReceivingValType      string
	IsCompletelyDelivered          string
	MaterialDocumentItemText       string
	UnloadingPointName             string
	ShelfLifeExpirationDate        string
	ManufactureDate                string
	SerialNumbersAreCreatedAutomly string
	Reservation                    string
	ReservationItem                string
	ReservationIsFinallyIssued     string
	IsAutomaticallyCreated         string
	GoodsMovementIsCancelled       string
	ReversedMaterialDocumentYear   string
	ReversedMaterialDocument       string
	ReversedMaterialDocumentItem   string
	ReferenceDocumentFiscalYear    string
	InvtryMgmtRefDocumentItem      string
	InvtryMgmtReferenceDocument    string
	MaterialDocumentPostingType    string
}{
	MaterialDocumentYear:           "sap_material_document_item_data.MaterialDocumentYear",
	MaterialDocument:               "sap_material_document_item_data.MaterialDocument",
	MaterialDocumentItem:           "sap_material_document_item_data.MaterialDocumentItem",
	Material:                       "sap_material_document_item_data.Material",
	Plant:                          "sap_material_document_item_data.Plant",
	StorageLocation:                "sap_material_document_item_data.StorageLocation",
	Batch:                          "sap_material_document_item_data.Batch",
	GoodsMovementType:              "sap_material_document_item_data.GoodsMovementType",
	InventoryStockType:             "sap_material_document_item_data.InventoryStockType",
	InventoryValuationType:         "sap_material_document_item_data.InventoryValuationType",
	InventorySpecialStockType:      "sap_material_document_item_data.InventorySpecialStockType",
	Supplier:                       "sap_material_document_item_data.Supplier",
	Customer:                       "sap_material_document_item_data.Customer",
	SalesOrder:                     "sap_material_document_item_data.SalesOrder",
	SalesOrderItem:                 "sap_material_document_item_data.SalesOrderItem",
	SalesOrderScheduleLine:         "sap_material_document_item_data.SalesOrderScheduleLine",
	PurchaseOrder:                  "sap_material_document_item_data.PurchaseOrder",
	PurchaseOrderItem:              "sap_material_document_item_data.PurchaseOrderItem",
	WBSElement:                     "sap_material_document_item_data.WBSElement",
	ManufacturingOrder:             "sap_material_document_item_data.ManufacturingOrder",
	ManufacturingOrderItem:         "sap_material_document_item_data.ManufacturingOrderItem",
	GoodsMovementRefDocType:        "sap_material_document_item_data.GoodsMovementRefDocType",
	GoodsMovementReasonCode:        "sap_material_document_item_data.GoodsMovementReasonCode",
	Delivery:                       "sap_material_document_item_data.Delivery",
	DeliveryItem:                   "sap_material_document_item_data.DeliveryItem",
	AccountAssignmentCategory:      "sap_material_document_item_data.AccountAssignmentCategory",
	CostCenter:                     "sap_material_document_item_data.CostCenter",
	ControllingArea:                "sap_material_document_item_data.ControllingArea",
	CostObject:                     "sap_material_document_item_data.CostObject",
	ProfitabilitySegment:           "sap_material_document_item_data.ProfitabilitySegment",
	ProfitCenter:                   "sap_material_document_item_data.ProfitCenter",
	GLAccount:                      "sap_material_document_item_data.GLAccount",
	FunctionalArea:                 "sap_material_document_item_data.FunctionalArea",
	MaterialBaseUnit:               "sap_material_document_item_data.MaterialBaseUnit",
	QuantityInBaseUnit:             "sap_material_document_item_data.QuantityInBaseUnit",
	EntryUnit:                      "sap_material_document_item_data.EntryUnit",
	QuantityInEntryUnit:            "sap_material_document_item_data.QuantityInEntryUnit",
	CompanyCodeCurrency:            "sap_material_document_item_data.CompanyCodeCurrency",
	FiscalYear:                     "sap_material_document_item_data.FiscalYear",
	FiscalYearPeriod:               "sap_material_document_item_data.FiscalYearPeriod",
	IssgOrRcvgMaterial:             "sap_material_document_item_data.IssgOrRcvgMaterial",
	IssgOrRcvgBatch:                "sap_material_document_item_data.IssgOrRcvgBatch",
	IssuingOrReceivingPlant:        "sap_material_document_item_data.IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc:   "sap_material_document_item_data.IssuingOrReceivingStorageLoc",
	IssuingOrReceivingStockType:    "sap_material_document_item_data.IssuingOrReceivingStockType",
	IssgOrRcvgSpclStockInd:         "sap_material_document_item_data.IssgOrRcvgSpclStockInd",
	IssuingOrReceivingValType:      "sap_material_document_item_data.IssuingOrReceivingValType",
	IsCompletelyDelivered:          "sap_material_document_item_data.IsCompletelyDelivered",
	MaterialDocumentItemText:       "sap_material_document_item_data.MaterialDocumentItemText",
	UnloadingPointName:             "sap_material_document_item_data.UnloadingPointName",
	ShelfLifeExpirationDate:        "sap_material_document_item_data.ShelfLifeExpirationDate",
	ManufactureDate:                "sap_material_document_item_data.ManufactureDate",
	SerialNumbersAreCreatedAutomly: "sap_material_document_item_data.SerialNumbersAreCreatedAutomly",
	Reservation:                    "sap_material_document_item_data.Reservation",
	ReservationItem:                "sap_material_document_item_data.ReservationItem",
	ReservationIsFinallyIssued:     "sap_material_document_item_data.ReservationIsFinallyIssued",
	IsAutomaticallyCreated:         "sap_material_document_item_data.IsAutomaticallyCreated",
	GoodsMovementIsCancelled:       "sap_material_document_item_data.GoodsMovementIsCancelled",
	ReversedMaterialDocumentYear:   "sap_material_document_item_data.ReversedMaterialDocumentYear",
	ReversedMaterialDocument:       "sap_material_document_item_data.ReversedMaterialDocument",
	ReversedMaterialDocumentItem:   "sap_material_document_item_data.ReversedMaterialDocumentItem",
	ReferenceDocumentFiscalYear:    "sap_material_document_item_data.ReferenceDocumentFiscalYear",
	InvtryMgmtRefDocumentItem:      "sap_material_document_item_data.InvtryMgmtRefDocumentItem",
	InvtryMgmtReferenceDocument:    "sap_material_document_item_data.InvtryMgmtReferenceDocument",
	MaterialDocumentPostingType:    "sap_material_document_item_data.MaterialDocumentPostingType",
}

// Generated where

var SapMaterialDocumentItemDatumWhere = struct {
	MaterialDocumentYear           whereHelperstring
	MaterialDocument               whereHelperstring
	MaterialDocumentItem           whereHelperstring
	Material                       whereHelpernull_String
	Plant                          whereHelpernull_String
	StorageLocation                whereHelpernull_String
	Batch                          whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
	InventoryStockType             whereHelpernull_String
	InventoryValuationType         whereHelpernull_String
	InventorySpecialStockType      whereHelpernull_String
	Supplier                       whereHelpernull_String
	Customer                       whereHelpernull_String
	SalesOrder                     whereHelpernull_String
	SalesOrderItem                 whereHelpernull_String
	SalesOrderScheduleLine         whereHelpernull_String
	PurchaseOrder                  whereHelpernull_String
	PurchaseOrderItem              whereHelpernull_String
	WBSElement                     whereHelpernull_String
	ManufacturingOrder             whereHelpernull_String
	ManufacturingOrderItem         whereHelpernull_String
	GoodsMovementRefDocType        whereHelpernull_String
	GoodsMovementReasonCode        whereHelpernull_String
	Delivery                       whereHelpernull_String
	DeliveryItem                   whereHelpernull_String
	AccountAssignmentCategory      whereHelpernull_String
	CostCenter                     whereHelpernull_String
	ControllingArea                whereHelpernull_String
	CostObject                     whereHelpernull_String
	ProfitabilitySegment           whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	GLAccount                      whereHelpernull_String
	FunctionalArea                 whereHelpernull_String
	MaterialBaseUnit               whereHelpernull_String
	QuantityInBaseUnit             whereHelpernull_String
	EntryUnit                      whereHelpernull_String
	QuantityInEntryUnit            whereHelpernull_String
	CompanyCodeCurrency            whereHelpernull_String
	FiscalYear                     whereHelpernull_String
	FiscalYearPeriod               whereHelpernull_String
	IssgOrRcvgMaterial             whereHelpernull_String
	IssgOrRcvgBatch                whereHelpernull_String
	IssuingOrReceivingPlant        whereHelpernull_String
	IssuingOrReceivingStorageLoc   whereHelpernull_String
	IssuingOrReceivingStockType    whereHelpernull_String
	IssgOrRcvgSpclStockInd         whereHelpernull_String
	IssuingOrReceivingValType      whereHelpernull_String
	IsCompletelyDelivered          whereHelpernull_Bool
	MaterialDocumentItemText       whereHelpernull_String
	UnloadingPointName             whereHelpernull_String
	ShelfLifeExpirationDate        whereHelpernull_String
	ManufactureDate                whereHelpernull_String
	SerialNumbersAreCreatedAutomly whereHelpernull_Bool
	Reservation                    whereHelpernull_String
	ReservationItem                whereHelpernull_String
	ReservationIsFinallyIssued     whereHelpernull_Bool
	IsAutomaticallyCreated         whereHelpernull_String
	GoodsMovementIsCancelled       whereHelpernull_Bool
	ReversedMaterialDocumentYear   whereHelpernull_String
	ReversedMaterialDocument       whereHelpernull_String
	ReversedMaterialDocumentItem   whereHelpernull_String
	ReferenceDocumentFiscalYear    whereHelpernull_String
	InvtryMgmtRefDocumentItem      whereHelpernull_String
	InvtryMgmtReferenceDocument    whereHelpernull_String
	MaterialDocumentPostingType    whereHelpernull_String
}{
	MaterialDocumentYear:           whereHelperstring{field: "`sap_material_document_item_data`.`MaterialDocumentYear`"},
	MaterialDocument:               whereHelperstring{field: "`sap_material_document_item_data`.`MaterialDocument`"},
	MaterialDocumentItem:           whereHelperstring{field: "`sap_material_document_item_data`.`MaterialDocumentItem`"},
	Material:                       whereHelpernull_String{field: "`sap_material_document_item_data`.`Material`"},
	Plant:                          whereHelpernull_String{field: "`sap_material_document_item_data`.`Plant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_material_document_item_data`.`StorageLocation`"},
	Batch:                          whereHelpernull_String{field: "`sap_material_document_item_data`.`Batch`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_material_document_item_data`.`GoodsMovementType`"},
	InventoryStockType:             whereHelpernull_String{field: "`sap_material_document_item_data`.`InventoryStockType`"},
	InventoryValuationType:         whereHelpernull_String{field: "`sap_material_document_item_data`.`InventoryValuationType`"},
	InventorySpecialStockType:      whereHelpernull_String{field: "`sap_material_document_item_data`.`InventorySpecialStockType`"},
	Supplier:                       whereHelpernull_String{field: "`sap_material_document_item_data`.`Supplier`"},
	Customer:                       whereHelpernull_String{field: "`sap_material_document_item_data`.`Customer`"},
	SalesOrder:                     whereHelpernull_String{field: "`sap_material_document_item_data`.`SalesOrder`"},
	SalesOrderItem:                 whereHelpernull_String{field: "`sap_material_document_item_data`.`SalesOrderItem`"},
	SalesOrderScheduleLine:         whereHelpernull_String{field: "`sap_material_document_item_data`.`SalesOrderScheduleLine`"},
	PurchaseOrder:                  whereHelpernull_String{field: "`sap_material_document_item_data`.`PurchaseOrder`"},
	PurchaseOrderItem:              whereHelpernull_String{field: "`sap_material_document_item_data`.`PurchaseOrderItem`"},
	WBSElement:                     whereHelpernull_String{field: "`sap_material_document_item_data`.`WBSElement`"},
	ManufacturingOrder:             whereHelpernull_String{field: "`sap_material_document_item_data`.`ManufacturingOrder`"},
	ManufacturingOrderItem:         whereHelpernull_String{field: "`sap_material_document_item_data`.`ManufacturingOrderItem`"},
	GoodsMovementRefDocType:        whereHelpernull_String{field: "`sap_material_document_item_data`.`GoodsMovementRefDocType`"},
	GoodsMovementReasonCode:        whereHelpernull_String{field: "`sap_material_document_item_data`.`GoodsMovementReasonCode`"},
	Delivery:                       whereHelpernull_String{field: "`sap_material_document_item_data`.`Delivery`"},
	DeliveryItem:                   whereHelpernull_String{field: "`sap_material_document_item_data`.`DeliveryItem`"},
	AccountAssignmentCategory:      whereHelpernull_String{field: "`sap_material_document_item_data`.`AccountAssignmentCategory`"},
	CostCenter:                     whereHelpernull_String{field: "`sap_material_document_item_data`.`CostCenter`"},
	ControllingArea:                whereHelpernull_String{field: "`sap_material_document_item_data`.`ControllingArea`"},
	CostObject:                     whereHelpernull_String{field: "`sap_material_document_item_data`.`CostObject`"},
	ProfitabilitySegment:           whereHelpernull_String{field: "`sap_material_document_item_data`.`ProfitabilitySegment`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_material_document_item_data`.`ProfitCenter`"},
	GLAccount:                      whereHelpernull_String{field: "`sap_material_document_item_data`.`GLAccount`"},
	FunctionalArea:                 whereHelpernull_String{field: "`sap_material_document_item_data`.`FunctionalArea`"},
	MaterialBaseUnit:               whereHelpernull_String{field: "`sap_material_document_item_data`.`MaterialBaseUnit`"},
	QuantityInBaseUnit:             whereHelpernull_String{field: "`sap_material_document_item_data`.`QuantityInBaseUnit`"},
	EntryUnit:                      whereHelpernull_String{field: "`sap_material_document_item_data`.`EntryUnit`"},
	QuantityInEntryUnit:            whereHelpernull_String{field: "`sap_material_document_item_data`.`QuantityInEntryUnit`"},
	CompanyCodeCurrency:            whereHelpernull_String{field: "`sap_material_document_item_data`.`CompanyCodeCurrency`"},
	FiscalYear:                     whereHelpernull_String{field: "`sap_material_document_item_data`.`FiscalYear`"},
	FiscalYearPeriod:               whereHelpernull_String{field: "`sap_material_document_item_data`.`FiscalYearPeriod`"},
	IssgOrRcvgMaterial:             whereHelpernull_String{field: "`sap_material_document_item_data`.`IssgOrRcvgMaterial`"},
	IssgOrRcvgBatch:                whereHelpernull_String{field: "`sap_material_document_item_data`.`IssgOrRcvgBatch`"},
	IssuingOrReceivingPlant:        whereHelpernull_String{field: "`sap_material_document_item_data`.`IssuingOrReceivingPlant`"},
	IssuingOrReceivingStorageLoc:   whereHelpernull_String{field: "`sap_material_document_item_data`.`IssuingOrReceivingStorageLoc`"},
	IssuingOrReceivingStockType:    whereHelpernull_String{field: "`sap_material_document_item_data`.`IssuingOrReceivingStockType`"},
	IssgOrRcvgSpclStockInd:         whereHelpernull_String{field: "`sap_material_document_item_data`.`IssgOrRcvgSpclStockInd`"},
	IssuingOrReceivingValType:      whereHelpernull_String{field: "`sap_material_document_item_data`.`IssuingOrReceivingValType`"},
	IsCompletelyDelivered:          whereHelpernull_Bool{field: "`sap_material_document_item_data`.`IsCompletelyDelivered`"},
	MaterialDocumentItemText:       whereHelpernull_String{field: "`sap_material_document_item_data`.`MaterialDocumentItemText`"},
	UnloadingPointName:             whereHelpernull_String{field: "`sap_material_document_item_data`.`UnloadingPointName`"},
	ShelfLifeExpirationDate:        whereHelpernull_String{field: "`sap_material_document_item_data`.`ShelfLifeExpirationDate`"},
	ManufactureDate:                whereHelpernull_String{field: "`sap_material_document_item_data`.`ManufactureDate`"},
	SerialNumbersAreCreatedAutomly: whereHelpernull_Bool{field: "`sap_material_document_item_data`.`SerialNumbersAreCreatedAutomly`"},
	Reservation:                    whereHelpernull_String{field: "`sap_material_document_item_data`.`Reservation`"},
	ReservationItem:                whereHelpernull_String{field: "`sap_material_document_item_data`.`ReservationItem`"},
	ReservationIsFinallyIssued:     whereHelpernull_Bool{field: "`sap_material_document_item_data`.`ReservationIsFinallyIssued`"},
	IsAutomaticallyCreated:         whereHelpernull_String{field: "`sap_material_document_item_data`.`IsAutomaticallyCreated`"},
	GoodsMovementIsCancelled:       whereHelpernull_Bool{field: "`sap_material_document_item_data`.`GoodsMovementIsCancelled`"},
	ReversedMaterialDocumentYear:   whereHelpernull_String{field: "`sap_material_document_item_data`.`ReversedMaterialDocumentYear`"},
	ReversedMaterialDocument:       whereHelpernull_String{field: "`sap_material_document_item_data`.`ReversedMaterialDocument`"},
	ReversedMaterialDocumentItem:   whereHelpernull_String{field: "`sap_material_document_item_data`.`ReversedMaterialDocumentItem`"},
	ReferenceDocumentFiscalYear:    whereHelpernull_String{field: "`sap_material_document_item_data`.`ReferenceDocumentFiscalYear`"},
	InvtryMgmtRefDocumentItem:      whereHelpernull_String{field: "`sap_material_document_item_data`.`InvtryMgmtRefDocumentItem`"},
	InvtryMgmtReferenceDocument:    whereHelpernull_String{field: "`sap_material_document_item_data`.`InvtryMgmtReferenceDocument`"},
	MaterialDocumentPostingType:    whereHelpernull_String{field: "`sap_material_document_item_data`.`MaterialDocumentPostingType`"},
}

// SapMaterialDocumentItemDatumRels is where relationship names are stored.
var SapMaterialDocumentItemDatumRels = struct {
}{}

// sapMaterialDocumentItemDatumR is where relationships are stored.
type sapMaterialDocumentItemDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapMaterialDocumentItemDatumR) NewStruct() *sapMaterialDocumentItemDatumR {
	return &sapMaterialDocumentItemDatumR{}
}

// sapMaterialDocumentItemDatumL is where Load methods for each relationship are stored.
type sapMaterialDocumentItemDatumL struct{}

var (
	sapMaterialDocumentItemDatumAllColumns            = []string{"MaterialDocumentYear", "MaterialDocument", "MaterialDocumentItem", "Material", "Plant", "StorageLocation", "Batch", "GoodsMovementType", "InventoryStockType", "InventoryValuationType", "InventorySpecialStockType", "Supplier", "Customer", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "PurchaseOrder", "PurchaseOrderItem", "WBSElement", "ManufacturingOrder", "ManufacturingOrderItem", "GoodsMovementRefDocType", "GoodsMovementReasonCode", "Delivery", "DeliveryItem", "AccountAssignmentCategory", "CostCenter", "ControllingArea", "CostObject", "ProfitabilitySegment", "ProfitCenter", "GLAccount", "FunctionalArea", "MaterialBaseUnit", "QuantityInBaseUnit", "EntryUnit", "QuantityInEntryUnit", "CompanyCodeCurrency", "FiscalYear", "FiscalYearPeriod", "IssgOrRcvgMaterial", "IssgOrRcvgBatch", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc", "IssuingOrReceivingStockType", "IssgOrRcvgSpclStockInd", "IssuingOrReceivingValType", "IsCompletelyDelivered", "MaterialDocumentItemText", "UnloadingPointName", "ShelfLifeExpirationDate", "ManufactureDate", "SerialNumbersAreCreatedAutomly", "Reservation", "ReservationItem", "ReservationIsFinallyIssued", "IsAutomaticallyCreated", "GoodsMovementIsCancelled", "ReversedMaterialDocumentYear", "ReversedMaterialDocument", "ReversedMaterialDocumentItem", "ReferenceDocumentFiscalYear", "InvtryMgmtRefDocumentItem", "InvtryMgmtReferenceDocument", "MaterialDocumentPostingType"}
	sapMaterialDocumentItemDatumColumnsWithoutDefault = []string{"MaterialDocumentYear", "MaterialDocument", "MaterialDocumentItem", "Material", "Plant", "StorageLocation", "Batch", "GoodsMovementType", "InventoryStockType", "InventoryValuationType", "InventorySpecialStockType", "Supplier", "Customer", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "PurchaseOrder", "PurchaseOrderItem", "WBSElement", "ManufacturingOrder", "ManufacturingOrderItem", "GoodsMovementRefDocType", "GoodsMovementReasonCode", "Delivery", "DeliveryItem", "AccountAssignmentCategory", "CostCenter", "ControllingArea", "CostObject", "ProfitabilitySegment", "ProfitCenter", "GLAccount", "FunctionalArea", "MaterialBaseUnit", "QuantityInBaseUnit", "EntryUnit", "QuantityInEntryUnit", "CompanyCodeCurrency", "FiscalYear", "FiscalYearPeriod", "IssgOrRcvgMaterial", "IssgOrRcvgBatch", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc", "IssuingOrReceivingStockType", "IssgOrRcvgSpclStockInd", "IssuingOrReceivingValType", "IsCompletelyDelivered", "MaterialDocumentItemText", "UnloadingPointName", "ShelfLifeExpirationDate", "ManufactureDate", "SerialNumbersAreCreatedAutomly", "Reservation", "ReservationItem", "ReservationIsFinallyIssued", "IsAutomaticallyCreated", "GoodsMovementIsCancelled", "ReversedMaterialDocumentYear", "ReversedMaterialDocument", "ReversedMaterialDocumentItem", "ReferenceDocumentFiscalYear", "InvtryMgmtRefDocumentItem", "InvtryMgmtReferenceDocument", "MaterialDocumentPostingType"}
	sapMaterialDocumentItemDatumColumnsWithDefault    = []string{}
	sapMaterialDocumentItemDatumPrimaryKeyColumns     = []string{"MaterialDocumentYear", "MaterialDocument", "MaterialDocumentItem"}
	sapMaterialDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// SapMaterialDocumentItemDatumSlice is an alias for a slice of pointers to SapMaterialDocumentItemDatum.
	// This should almost always be used instead of []SapMaterialDocumentItemDatum.
	SapMaterialDocumentItemDatumSlice []*SapMaterialDocumentItemDatum
	// SapMaterialDocumentItemDatumHook is the signature for custom SapMaterialDocumentItemDatum hook methods
	SapMaterialDocumentItemDatumHook func(context.Context, boil.ContextExecutor, *SapMaterialDocumentItemDatum) error

	sapMaterialDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaterialDocumentItemDatumType                 = reflect.TypeOf(&SapMaterialDocumentItemDatum{})
	sapMaterialDocumentItemDatumMapping              = queries.MakeStructMapping(sapMaterialDocumentItemDatumType)
	sapMaterialDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, sapMaterialDocumentItemDatumPrimaryKeyColumns)
	sapMaterialDocumentItemDatumInsertCacheMut       sync.RWMutex
	sapMaterialDocumentItemDatumInsertCache          = make(map[string]insertCache)
	sapMaterialDocumentItemDatumUpdateCacheMut       sync.RWMutex
	sapMaterialDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	sapMaterialDocumentItemDatumUpsertCacheMut       sync.RWMutex
	sapMaterialDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaterialDocumentItemDatumAfterSelectHooks []SapMaterialDocumentItemDatumHook

var sapMaterialDocumentItemDatumBeforeInsertHooks []SapMaterialDocumentItemDatumHook
var sapMaterialDocumentItemDatumAfterInsertHooks []SapMaterialDocumentItemDatumHook

var sapMaterialDocumentItemDatumBeforeUpdateHooks []SapMaterialDocumentItemDatumHook
var sapMaterialDocumentItemDatumAfterUpdateHooks []SapMaterialDocumentItemDatumHook

var sapMaterialDocumentItemDatumBeforeDeleteHooks []SapMaterialDocumentItemDatumHook
var sapMaterialDocumentItemDatumAfterDeleteHooks []SapMaterialDocumentItemDatumHook

var sapMaterialDocumentItemDatumBeforeUpsertHooks []SapMaterialDocumentItemDatumHook
var sapMaterialDocumentItemDatumAfterUpsertHooks []SapMaterialDocumentItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaterialDocumentItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaterialDocumentItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaterialDocumentItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaterialDocumentItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaterialDocumentItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaterialDocumentItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaterialDocumentItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaterialDocumentItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaterialDocumentItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaterialDocumentItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaterialDocumentItemDatumHook registers your hook function for all future operations.
func AddSapMaterialDocumentItemDatumHook(hookPoint boil.HookPoint, sapMaterialDocumentItemDatumHook SapMaterialDocumentItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaterialDocumentItemDatumAfterSelectHooks = append(sapMaterialDocumentItemDatumAfterSelectHooks, sapMaterialDocumentItemDatumHook)
	case boil.BeforeInsertHook:
		sapMaterialDocumentItemDatumBeforeInsertHooks = append(sapMaterialDocumentItemDatumBeforeInsertHooks, sapMaterialDocumentItemDatumHook)
	case boil.AfterInsertHook:
		sapMaterialDocumentItemDatumAfterInsertHooks = append(sapMaterialDocumentItemDatumAfterInsertHooks, sapMaterialDocumentItemDatumHook)
	case boil.BeforeUpdateHook:
		sapMaterialDocumentItemDatumBeforeUpdateHooks = append(sapMaterialDocumentItemDatumBeforeUpdateHooks, sapMaterialDocumentItemDatumHook)
	case boil.AfterUpdateHook:
		sapMaterialDocumentItemDatumAfterUpdateHooks = append(sapMaterialDocumentItemDatumAfterUpdateHooks, sapMaterialDocumentItemDatumHook)
	case boil.BeforeDeleteHook:
		sapMaterialDocumentItemDatumBeforeDeleteHooks = append(sapMaterialDocumentItemDatumBeforeDeleteHooks, sapMaterialDocumentItemDatumHook)
	case boil.AfterDeleteHook:
		sapMaterialDocumentItemDatumAfterDeleteHooks = append(sapMaterialDocumentItemDatumAfterDeleteHooks, sapMaterialDocumentItemDatumHook)
	case boil.BeforeUpsertHook:
		sapMaterialDocumentItemDatumBeforeUpsertHooks = append(sapMaterialDocumentItemDatumBeforeUpsertHooks, sapMaterialDocumentItemDatumHook)
	case boil.AfterUpsertHook:
		sapMaterialDocumentItemDatumAfterUpsertHooks = append(sapMaterialDocumentItemDatumAfterUpsertHooks, sapMaterialDocumentItemDatumHook)
	}
}

// One returns a single sapMaterialDocumentItemDatum record from the query.
func (q sapMaterialDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaterialDocumentItemDatum, error) {
	o := &SapMaterialDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_material_document_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaterialDocumentItemDatum records from the query.
func (q sapMaterialDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaterialDocumentItemDatumSlice, error) {
	var o []*SapMaterialDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaterialDocumentItemDatum slice")
	}

	if len(sapMaterialDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaterialDocumentItemDatum records in the query.
func (q sapMaterialDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_material_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaterialDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_material_document_item_data exists")
	}

	return count > 0, nil
}

// SapMaterialDocumentItemData retrieves all the records using an executor.
func SapMaterialDocumentItemData(mods ...qm.QueryMod) sapMaterialDocumentItemDatumQuery {
	mods = append(mods, qm.From("`sap_material_document_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_material_document_item_data`.*"})
	}

	return sapMaterialDocumentItemDatumQuery{q}
}

// FindSapMaterialDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaterialDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, materialDocumentYear string, materialDocument string, materialDocumentItem string, selectCols ...string) (*SapMaterialDocumentItemDatum, error) {
	sapMaterialDocumentItemDatumObj := &SapMaterialDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_material_document_item_data` where `MaterialDocumentYear`=? AND `MaterialDocument`=? AND `MaterialDocumentItem`=?", sel,
	)

	q := queries.Raw(query, materialDocumentYear, materialDocument, materialDocumentItem)

	err := q.Bind(ctx, exec, sapMaterialDocumentItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_material_document_item_data")
	}

	if err = sapMaterialDocumentItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaterialDocumentItemDatumObj, err
	}

	return sapMaterialDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaterialDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_material_document_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaterialDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaterialDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := sapMaterialDocumentItemDatumInsertCache[key]
	sapMaterialDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaterialDocumentItemDatumAllColumns,
			sapMaterialDocumentItemDatumColumnsWithDefault,
			sapMaterialDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_material_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_material_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_material_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaterialDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_material_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaterialDocumentYear,
		o.MaterialDocument,
		o.MaterialDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_material_document_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaterialDocumentItemDatumInsertCacheMut.Lock()
		sapMaterialDocumentItemDatumInsertCache[key] = cache
		sapMaterialDocumentItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaterialDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaterialDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaterialDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := sapMaterialDocumentItemDatumUpdateCache[key]
	sapMaterialDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaterialDocumentItemDatumAllColumns,
			sapMaterialDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_material_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_material_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaterialDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, append(wl, sapMaterialDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_material_document_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_material_document_item_data")
	}

	if !cached {
		sapMaterialDocumentItemDatumUpdateCacheMut.Lock()
		sapMaterialDocumentItemDatumUpdateCache[key] = cache
		sapMaterialDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaterialDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_material_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_material_document_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaterialDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaterialDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_material_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaterialDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaterialDocumentItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaterialDocumentItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaterialDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaterialDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_material_document_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaterialDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaterialDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaterialDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := sapMaterialDocumentItemDatumUpsertCache[key]
	sapMaterialDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaterialDocumentItemDatumAllColumns,
			sapMaterialDocumentItemDatumColumnsWithDefault,
			sapMaterialDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaterialDocumentItemDatumAllColumns,
			sapMaterialDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_material_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_material_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_material_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_material_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaterialDocumentItemDatumType, sapMaterialDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_material_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_material_document_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaterialDocumentItemDatumUpsertCacheMut.Lock()
		sapMaterialDocumentItemDatumUpsertCache[key] = cache
		sapMaterialDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaterialDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaterialDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaterialDocumentItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaterialDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_material_document_item_data` WHERE `MaterialDocumentYear`=? AND `MaterialDocument`=? AND `MaterialDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_material_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_material_document_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaterialDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaterialDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_material_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_material_document_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaterialDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaterialDocumentItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaterialDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_material_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaterialDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaterialDocumentItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_material_document_item_data")
	}

	if len(sapMaterialDocumentItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaterialDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaterialDocumentItemDatum(ctx, exec, o.MaterialDocumentYear, o.MaterialDocument, o.MaterialDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaterialDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaterialDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaterialDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_material_document_item_data`.* FROM `sap_material_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaterialDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaterialDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaterialDocumentItemDatumExists checks if the SapMaterialDocumentItemDatum row exists.
func SapMaterialDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, materialDocumentYear string, materialDocument string, materialDocumentItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_material_document_item_data` where `MaterialDocumentYear`=? AND `MaterialDocument`=? AND `MaterialDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, materialDocumentYear, materialDocument, materialDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, materialDocumentYear, materialDocument, materialDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_material_document_item_data exists")
	}

	return exists, nil
}
