// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapInboundDeliveryItemDatum is an object representing the database table.
type SapInboundDeliveryItemDatum struct {
	DeliveryDocument               string      `boil:"DeliveryDocument" json:"DeliveryDocument" toml:"DeliveryDocument" yaml:"DeliveryDocument"`
	DeliveryDocumentItem           string      `boil:"DeliveryDocumentItem" json:"DeliveryDocumentItem" toml:"DeliveryDocumentItem" yaml:"DeliveryDocumentItem"`
	ActualDeliveredQtyInBaseUnit   null.String `boil:"ActualDeliveredQtyInBaseUnit" json:"ActualDeliveredQtyInBaseUnit,omitempty" toml:"ActualDeliveredQtyInBaseUnit" yaml:"ActualDeliveredQtyInBaseUnit,omitempty"`
	ActualDeliveryQuantity         null.String `boil:"ActualDeliveryQuantity" json:"ActualDeliveryQuantity,omitempty" toml:"ActualDeliveryQuantity" yaml:"ActualDeliveryQuantity,omitempty"`
	AdditionalCustomerGroup1       null.String `boil:"AdditionalCustomerGroup1" json:"AdditionalCustomerGroup1,omitempty" toml:"AdditionalCustomerGroup1" yaml:"AdditionalCustomerGroup1,omitempty"`
	AdditionalCustomerGroup2       null.String `boil:"AdditionalCustomerGroup2" json:"AdditionalCustomerGroup2,omitempty" toml:"AdditionalCustomerGroup2" yaml:"AdditionalCustomerGroup2,omitempty"`
	AdditionalCustomerGroup3       null.String `boil:"AdditionalCustomerGroup3" json:"AdditionalCustomerGroup3,omitempty" toml:"AdditionalCustomerGroup3" yaml:"AdditionalCustomerGroup3,omitempty"`
	AdditionalCustomerGroup4       null.String `boil:"AdditionalCustomerGroup4" json:"AdditionalCustomerGroup4,omitempty" toml:"AdditionalCustomerGroup4" yaml:"AdditionalCustomerGroup4,omitempty"`
	AdditionalCustomerGroup5       null.String `boil:"AdditionalCustomerGroup5" json:"AdditionalCustomerGroup5,omitempty" toml:"AdditionalCustomerGroup5" yaml:"AdditionalCustomerGroup5,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	BatchBySupplier                null.String `boil:"BatchBySupplier" json:"BatchBySupplier,omitempty" toml:"BatchBySupplier" yaml:"BatchBySupplier,omitempty"`
	BOMExplosion                   null.String `boil:"BOMExplosion" json:"BOMExplosion,omitempty" toml:"BOMExplosion" yaml:"BOMExplosion,omitempty"`
	BusinessArea                   null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	ControllingArea                null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	CostCenter                     null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                   null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	DeliveryDocumentItemCategory   null.String `boil:"DeliveryDocumentItemCategory" json:"DeliveryDocumentItemCategory,omitempty" toml:"DeliveryDocumentItemCategory" yaml:"DeliveryDocumentItemCategory,omitempty"`
	DeliveryDocumentItemText       null.String `boil:"DeliveryDocumentItemText" json:"DeliveryDocumentItemText,omitempty" toml:"DeliveryDocumentItemText" yaml:"DeliveryDocumentItemText,omitempty"`
	DeliveryGroup                  null.String `boil:"DeliveryGroup" json:"DeliveryGroup,omitempty" toml:"DeliveryGroup" yaml:"DeliveryGroup,omitempty"`
	DeliveryQuantityUnit           null.String `boil:"DeliveryQuantityUnit" json:"DeliveryQuantityUnit,omitempty" toml:"DeliveryQuantityUnit" yaml:"DeliveryQuantityUnit,omitempty"`
	DeliveryRelatedBillingStatus   null.String `boil:"DeliveryRelatedBillingStatus" json:"DeliveryRelatedBillingStatus,omitempty" toml:"DeliveryRelatedBillingStatus" yaml:"DeliveryRelatedBillingStatus,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	Division                       null.String `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	GLAccount                      null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	GoodsMovementReasonCode        null.String `boil:"GoodsMovementReasonCode" json:"GoodsMovementReasonCode,omitempty" toml:"GoodsMovementReasonCode" yaml:"GoodsMovementReasonCode,omitempty"`
	GoodsMovementStatus            null.String `boil:"GoodsMovementStatus" json:"GoodsMovementStatus,omitempty" toml:"GoodsMovementStatus" yaml:"GoodsMovementStatus,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	InternationalArticleNumber     null.String `boil:"InternationalArticleNumber" json:"InternationalArticleNumber,omitempty" toml:"InternationalArticleNumber" yaml:"InternationalArticleNumber,omitempty"`
	InventorySpecialStockType      null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	IsCompletelyDelivered          null.Bool   `boil:"IsCompletelyDelivered" json:"IsCompletelyDelivered,omitempty" toml:"IsCompletelyDelivered" yaml:"IsCompletelyDelivered,omitempty"`
	IsNotGoodsMovementsRelevant    null.String `boil:"IsNotGoodsMovementsRelevant" json:"IsNotGoodsMovementsRelevant,omitempty" toml:"IsNotGoodsMovementsRelevant" yaml:"IsNotGoodsMovementsRelevant,omitempty"`
	IssuingOrReceivingPlant        null.String `boil:"IssuingOrReceivingPlant" json:"IssuingOrReceivingPlant,omitempty" toml:"IssuingOrReceivingPlant" yaml:"IssuingOrReceivingPlant,omitempty"`
	IssuingOrReceivingStorageLoc   null.String `boil:"IssuingOrReceivingStorageLoc" json:"IssuingOrReceivingStorageLoc,omitempty" toml:"IssuingOrReceivingStorageLoc" yaml:"IssuingOrReceivingStorageLoc,omitempty"`
	ItemBillingBlockReason         null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	ItemBillingIncompletionStatus  null.String `boil:"ItemBillingIncompletionStatus" json:"ItemBillingIncompletionStatus,omitempty" toml:"ItemBillingIncompletionStatus" yaml:"ItemBillingIncompletionStatus,omitempty"`
	ItemDeliveryIncompletionStatus null.String `boil:"ItemDeliveryIncompletionStatus" json:"ItemDeliveryIncompletionStatus,omitempty" toml:"ItemDeliveryIncompletionStatus" yaml:"ItemDeliveryIncompletionStatus,omitempty"`
	ItemGdsMvtIncompletionSts      null.String `boil:"ItemGdsMvtIncompletionSts" json:"ItemGdsMvtIncompletionSts,omitempty" toml:"ItemGdsMvtIncompletionSts" yaml:"ItemGdsMvtIncompletionSts,omitempty"`
	ItemGeneralIncompletionStatus  null.String `boil:"ItemGeneralIncompletionStatus" json:"ItemGeneralIncompletionStatus,omitempty" toml:"ItemGeneralIncompletionStatus" yaml:"ItemGeneralIncompletionStatus,omitempty"`
	ItemGrossWeight                null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemIsBillingRelevant          null.String `boil:"ItemIsBillingRelevant" json:"ItemIsBillingRelevant,omitempty" toml:"ItemIsBillingRelevant" yaml:"ItemIsBillingRelevant,omitempty"`
	ItemNetWeight                  null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemPackingIncompletionStatus  null.String `boil:"ItemPackingIncompletionStatus" json:"ItemPackingIncompletionStatus,omitempty" toml:"ItemPackingIncompletionStatus" yaml:"ItemPackingIncompletionStatus,omitempty"`
	ItemPickingIncompletionStatus  null.String `boil:"ItemPickingIncompletionStatus" json:"ItemPickingIncompletionStatus,omitempty" toml:"ItemPickingIncompletionStatus" yaml:"ItemPickingIncompletionStatus,omitempty"`
	ItemVolume                     null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit                 null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	ItemWeightUnit                 null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LoadingGroup                   null.String `boil:"LoadingGroup" json:"LoadingGroup,omitempty" toml:"LoadingGroup" yaml:"LoadingGroup,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer             null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	MaterialFreightGroup           null.String `boil:"MaterialFreightGroup" json:"MaterialFreightGroup,omitempty" toml:"MaterialFreightGroup" yaml:"MaterialFreightGroup,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	MaterialIsBatchManaged         null.Bool   `boil:"MaterialIsBatchManaged" json:"MaterialIsBatchManaged,omitempty" toml:"MaterialIsBatchManaged" yaml:"MaterialIsBatchManaged,omitempty"`
	OrderID                        null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                      null.String `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	OriginalDeliveryQuantity       null.String `boil:"OriginalDeliveryQuantity" json:"OriginalDeliveryQuantity,omitempty" toml:"OriginalDeliveryQuantity" yaml:"OriginalDeliveryQuantity,omitempty"`
	PackingStatus                  null.String `boil:"PackingStatus" json:"PackingStatus,omitempty" toml:"PackingStatus" yaml:"PackingStatus,omitempty"`
	PartialDeliveryIsAllowed       null.String `boil:"PartialDeliveryIsAllowed" json:"PartialDeliveryIsAllowed,omitempty" toml:"PartialDeliveryIsAllowed" yaml:"PartialDeliveryIsAllowed,omitempty"`
	PickingConfirmationStatus      null.String `boil:"PickingConfirmationStatus" json:"PickingConfirmationStatus,omitempty" toml:"PickingConfirmationStatus" yaml:"PickingConfirmationStatus,omitempty"`
	PickingStatus                  null.String `boil:"PickingStatus" json:"PickingStatus,omitempty" toml:"PickingStatus" yaml:"PickingStatus,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	ProductAvailabilityDate        null.String `boil:"ProductAvailabilityDate" json:"ProductAvailabilityDate,omitempty" toml:"ProductAvailabilityDate" yaml:"ProductAvailabilityDate,omitempty"`
	ProductAvailabilityTime        null.String `boil:"ProductAvailabilityTime" json:"ProductAvailabilityTime,omitempty" toml:"ProductAvailabilityTime" yaml:"ProductAvailabilityTime,omitempty"`
	ProfitabilitySegment           null.String `boil:"ProfitabilitySegment" json:"ProfitabilitySegment,omitempty" toml:"ProfitabilitySegment" yaml:"ProfitabilitySegment,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	QuantityIsFixed                null.Bool   `boil:"QuantityIsFixed" json:"QuantityIsFixed,omitempty" toml:"QuantityIsFixed" yaml:"QuantityIsFixed,omitempty"`
	ReceivingPoint                 null.String `boil:"ReceivingPoint" json:"ReceivingPoint,omitempty" toml:"ReceivingPoint" yaml:"ReceivingPoint,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem        null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	SalesDocumentItemType          null.String `boil:"SalesDocumentItemType" json:"SalesDocumentItemType,omitempty" toml:"SalesDocumentItemType" yaml:"SalesDocumentItemType,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SDDocumentCategory             null.String `boil:"SDDocumentCategory" json:"SDDocumentCategory,omitempty" toml:"SDDocumentCategory" yaml:"SDDocumentCategory,omitempty"`
	SDProcessStatus                null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`
	ShelfLifeExpirationDate        null.String `boil:"ShelfLifeExpirationDate" json:"ShelfLifeExpirationDate,omitempty" toml:"ShelfLifeExpirationDate" yaml:"ShelfLifeExpirationDate,omitempty"`
	StockType                      null.String `boil:"StockType" json:"StockType,omitempty" toml:"StockType" yaml:"StockType,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	TransportationGroup            null.String `boil:"TransportationGroup" json:"TransportationGroup,omitempty" toml:"TransportationGroup" yaml:"TransportationGroup,omitempty"`
	UnlimitedOverdeliveryIsAllowed null.Bool   `boil:"UnlimitedOverdeliveryIsAllowed" json:"UnlimitedOverdeliveryIsAllowed,omitempty" toml:"UnlimitedOverdeliveryIsAllowed" yaml:"UnlimitedOverdeliveryIsAllowed,omitempty"`

	R *sapInboundDeliveryItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapInboundDeliveryItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapInboundDeliveryItemDatumColumns = struct {
	DeliveryDocument               string
	DeliveryDocumentItem           string
	ActualDeliveredQtyInBaseUnit   string
	ActualDeliveryQuantity         string
	AdditionalCustomerGroup1       string
	AdditionalCustomerGroup2       string
	AdditionalCustomerGroup3       string
	AdditionalCustomerGroup4       string
	AdditionalCustomerGroup5       string
	BaseUnit                       string
	Batch                          string
	BatchBySupplier                string
	BOMExplosion                   string
	BusinessArea                   string
	ControllingArea                string
	CostCenter                     string
	CreationDate                   string
	CreationTime                   string
	DeliveryDocumentItemCategory   string
	DeliveryDocumentItemText       string
	DeliveryGroup                  string
	DeliveryQuantityUnit           string
	DeliveryRelatedBillingStatus   string
	DistributionChannel            string
	Division                       string
	GLAccount                      string
	GoodsMovementReasonCode        string
	GoodsMovementStatus            string
	GoodsMovementType              string
	InternationalArticleNumber     string
	InventorySpecialStockType      string
	IsCompletelyDelivered          string
	IsNotGoodsMovementsRelevant    string
	IssuingOrReceivingPlant        string
	IssuingOrReceivingStorageLoc   string
	ItemBillingBlockReason         string
	ItemBillingIncompletionStatus  string
	ItemDeliveryIncompletionStatus string
	ItemGdsMvtIncompletionSts      string
	ItemGeneralIncompletionStatus  string
	ItemGrossWeight                string
	ItemIsBillingRelevant          string
	ItemNetWeight                  string
	ItemPackingIncompletionStatus  string
	ItemPickingIncompletionStatus  string
	ItemVolume                     string
	ItemVolumeUnit                 string
	ItemWeightUnit                 string
	LastChangeDate                 string
	LoadingGroup                   string
	Material                       string
	MaterialByCustomer             string
	MaterialFreightGroup           string
	MaterialGroup                  string
	MaterialIsBatchManaged         string
	OrderID                        string
	OrderItem                      string
	OriginalDeliveryQuantity       string
	PackingStatus                  string
	PartialDeliveryIsAllowed       string
	PickingConfirmationStatus      string
	PickingStatus                  string
	Plant                          string
	ProductAvailabilityDate        string
	ProductAvailabilityTime        string
	ProfitabilitySegment           string
	ProfitCenter                   string
	QuantityIsFixed                string
	ReceivingPoint                 string
	ReferenceSDDocument            string
	ReferenceSDDocumentItem        string
	SalesDocumentItemType          string
	SalesGroup                     string
	SalesOffice                    string
	SDDocumentCategory             string
	SDProcessStatus                string
	ShelfLifeExpirationDate        string
	StockType                      string
	StorageLocation                string
	TransportationGroup            string
	UnlimitedOverdeliveryIsAllowed string
}{
	DeliveryDocument:               "DeliveryDocument",
	DeliveryDocumentItem:           "DeliveryDocumentItem",
	ActualDeliveredQtyInBaseUnit:   "ActualDeliveredQtyInBaseUnit",
	ActualDeliveryQuantity:         "ActualDeliveryQuantity",
	AdditionalCustomerGroup1:       "AdditionalCustomerGroup1",
	AdditionalCustomerGroup2:       "AdditionalCustomerGroup2",
	AdditionalCustomerGroup3:       "AdditionalCustomerGroup3",
	AdditionalCustomerGroup4:       "AdditionalCustomerGroup4",
	AdditionalCustomerGroup5:       "AdditionalCustomerGroup5",
	BaseUnit:                       "BaseUnit",
	Batch:                          "Batch",
	BatchBySupplier:                "BatchBySupplier",
	BOMExplosion:                   "BOMExplosion",
	BusinessArea:                   "BusinessArea",
	ControllingArea:                "ControllingArea",
	CostCenter:                     "CostCenter",
	CreationDate:                   "CreationDate",
	CreationTime:                   "CreationTime",
	DeliveryDocumentItemCategory:   "DeliveryDocumentItemCategory",
	DeliveryDocumentItemText:       "DeliveryDocumentItemText",
	DeliveryGroup:                  "DeliveryGroup",
	DeliveryQuantityUnit:           "DeliveryQuantityUnit",
	DeliveryRelatedBillingStatus:   "DeliveryRelatedBillingStatus",
	DistributionChannel:            "DistributionChannel",
	Division:                       "Division",
	GLAccount:                      "GLAccount",
	GoodsMovementReasonCode:        "GoodsMovementReasonCode",
	GoodsMovementStatus:            "GoodsMovementStatus",
	GoodsMovementType:              "GoodsMovementType",
	InternationalArticleNumber:     "InternationalArticleNumber",
	InventorySpecialStockType:      "InventorySpecialStockType",
	IsCompletelyDelivered:          "IsCompletelyDelivered",
	IsNotGoodsMovementsRelevant:    "IsNotGoodsMovementsRelevant",
	IssuingOrReceivingPlant:        "IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc:   "IssuingOrReceivingStorageLoc",
	ItemBillingBlockReason:         "ItemBillingBlockReason",
	ItemBillingIncompletionStatus:  "ItemBillingIncompletionStatus",
	ItemDeliveryIncompletionStatus: "ItemDeliveryIncompletionStatus",
	ItemGdsMvtIncompletionSts:      "ItemGdsMvtIncompletionSts",
	ItemGeneralIncompletionStatus:  "ItemGeneralIncompletionStatus",
	ItemGrossWeight:                "ItemGrossWeight",
	ItemIsBillingRelevant:          "ItemIsBillingRelevant",
	ItemNetWeight:                  "ItemNetWeight",
	ItemPackingIncompletionStatus:  "ItemPackingIncompletionStatus",
	ItemPickingIncompletionStatus:  "ItemPickingIncompletionStatus",
	ItemVolume:                     "ItemVolume",
	ItemVolumeUnit:                 "ItemVolumeUnit",
	ItemWeightUnit:                 "ItemWeightUnit",
	LastChangeDate:                 "LastChangeDate",
	LoadingGroup:                   "LoadingGroup",
	Material:                       "Material",
	MaterialByCustomer:             "MaterialByCustomer",
	MaterialFreightGroup:           "MaterialFreightGroup",
	MaterialGroup:                  "MaterialGroup",
	MaterialIsBatchManaged:         "MaterialIsBatchManaged",
	OrderID:                        "OrderID",
	OrderItem:                      "OrderItem",
	OriginalDeliveryQuantity:       "OriginalDeliveryQuantity",
	PackingStatus:                  "PackingStatus",
	PartialDeliveryIsAllowed:       "PartialDeliveryIsAllowed",
	PickingConfirmationStatus:      "PickingConfirmationStatus",
	PickingStatus:                  "PickingStatus",
	Plant:                          "Plant",
	ProductAvailabilityDate:        "ProductAvailabilityDate",
	ProductAvailabilityTime:        "ProductAvailabilityTime",
	ProfitabilitySegment:           "ProfitabilitySegment",
	ProfitCenter:                   "ProfitCenter",
	QuantityIsFixed:                "QuantityIsFixed",
	ReceivingPoint:                 "ReceivingPoint",
	ReferenceSDDocument:            "ReferenceSDDocument",
	ReferenceSDDocumentItem:        "ReferenceSDDocumentItem",
	SalesDocumentItemType:          "SalesDocumentItemType",
	SalesGroup:                     "SalesGroup",
	SalesOffice:                    "SalesOffice",
	SDDocumentCategory:             "SDDocumentCategory",
	SDProcessStatus:                "SDProcessStatus",
	ShelfLifeExpirationDate:        "ShelfLifeExpirationDate",
	StockType:                      "StockType",
	StorageLocation:                "StorageLocation",
	TransportationGroup:            "TransportationGroup",
	UnlimitedOverdeliveryIsAllowed: "UnlimitedOverdeliveryIsAllowed",
}

var SapInboundDeliveryItemDatumTableColumns = struct {
	DeliveryDocument               string
	DeliveryDocumentItem           string
	ActualDeliveredQtyInBaseUnit   string
	ActualDeliveryQuantity         string
	AdditionalCustomerGroup1       string
	AdditionalCustomerGroup2       string
	AdditionalCustomerGroup3       string
	AdditionalCustomerGroup4       string
	AdditionalCustomerGroup5       string
	BaseUnit                       string
	Batch                          string
	BatchBySupplier                string
	BOMExplosion                   string
	BusinessArea                   string
	ControllingArea                string
	CostCenter                     string
	CreationDate                   string
	CreationTime                   string
	DeliveryDocumentItemCategory   string
	DeliveryDocumentItemText       string
	DeliveryGroup                  string
	DeliveryQuantityUnit           string
	DeliveryRelatedBillingStatus   string
	DistributionChannel            string
	Division                       string
	GLAccount                      string
	GoodsMovementReasonCode        string
	GoodsMovementStatus            string
	GoodsMovementType              string
	InternationalArticleNumber     string
	InventorySpecialStockType      string
	IsCompletelyDelivered          string
	IsNotGoodsMovementsRelevant    string
	IssuingOrReceivingPlant        string
	IssuingOrReceivingStorageLoc   string
	ItemBillingBlockReason         string
	ItemBillingIncompletionStatus  string
	ItemDeliveryIncompletionStatus string
	ItemGdsMvtIncompletionSts      string
	ItemGeneralIncompletionStatus  string
	ItemGrossWeight                string
	ItemIsBillingRelevant          string
	ItemNetWeight                  string
	ItemPackingIncompletionStatus  string
	ItemPickingIncompletionStatus  string
	ItemVolume                     string
	ItemVolumeUnit                 string
	ItemWeightUnit                 string
	LastChangeDate                 string
	LoadingGroup                   string
	Material                       string
	MaterialByCustomer             string
	MaterialFreightGroup           string
	MaterialGroup                  string
	MaterialIsBatchManaged         string
	OrderID                        string
	OrderItem                      string
	OriginalDeliveryQuantity       string
	PackingStatus                  string
	PartialDeliveryIsAllowed       string
	PickingConfirmationStatus      string
	PickingStatus                  string
	Plant                          string
	ProductAvailabilityDate        string
	ProductAvailabilityTime        string
	ProfitabilitySegment           string
	ProfitCenter                   string
	QuantityIsFixed                string
	ReceivingPoint                 string
	ReferenceSDDocument            string
	ReferenceSDDocumentItem        string
	SalesDocumentItemType          string
	SalesGroup                     string
	SalesOffice                    string
	SDDocumentCategory             string
	SDProcessStatus                string
	ShelfLifeExpirationDate        string
	StockType                      string
	StorageLocation                string
	TransportationGroup            string
	UnlimitedOverdeliveryIsAllowed string
}{
	DeliveryDocument:               "sap_inbound_delivery_item_data.DeliveryDocument",
	DeliveryDocumentItem:           "sap_inbound_delivery_item_data.DeliveryDocumentItem",
	ActualDeliveredQtyInBaseUnit:   "sap_inbound_delivery_item_data.ActualDeliveredQtyInBaseUnit",
	ActualDeliveryQuantity:         "sap_inbound_delivery_item_data.ActualDeliveryQuantity",
	AdditionalCustomerGroup1:       "sap_inbound_delivery_item_data.AdditionalCustomerGroup1",
	AdditionalCustomerGroup2:       "sap_inbound_delivery_item_data.AdditionalCustomerGroup2",
	AdditionalCustomerGroup3:       "sap_inbound_delivery_item_data.AdditionalCustomerGroup3",
	AdditionalCustomerGroup4:       "sap_inbound_delivery_item_data.AdditionalCustomerGroup4",
	AdditionalCustomerGroup5:       "sap_inbound_delivery_item_data.AdditionalCustomerGroup5",
	BaseUnit:                       "sap_inbound_delivery_item_data.BaseUnit",
	Batch:                          "sap_inbound_delivery_item_data.Batch",
	BatchBySupplier:                "sap_inbound_delivery_item_data.BatchBySupplier",
	BOMExplosion:                   "sap_inbound_delivery_item_data.BOMExplosion",
	BusinessArea:                   "sap_inbound_delivery_item_data.BusinessArea",
	ControllingArea:                "sap_inbound_delivery_item_data.ControllingArea",
	CostCenter:                     "sap_inbound_delivery_item_data.CostCenter",
	CreationDate:                   "sap_inbound_delivery_item_data.CreationDate",
	CreationTime:                   "sap_inbound_delivery_item_data.CreationTime",
	DeliveryDocumentItemCategory:   "sap_inbound_delivery_item_data.DeliveryDocumentItemCategory",
	DeliveryDocumentItemText:       "sap_inbound_delivery_item_data.DeliveryDocumentItemText",
	DeliveryGroup:                  "sap_inbound_delivery_item_data.DeliveryGroup",
	DeliveryQuantityUnit:           "sap_inbound_delivery_item_data.DeliveryQuantityUnit",
	DeliveryRelatedBillingStatus:   "sap_inbound_delivery_item_data.DeliveryRelatedBillingStatus",
	DistributionChannel:            "sap_inbound_delivery_item_data.DistributionChannel",
	Division:                       "sap_inbound_delivery_item_data.Division",
	GLAccount:                      "sap_inbound_delivery_item_data.GLAccount",
	GoodsMovementReasonCode:        "sap_inbound_delivery_item_data.GoodsMovementReasonCode",
	GoodsMovementStatus:            "sap_inbound_delivery_item_data.GoodsMovementStatus",
	GoodsMovementType:              "sap_inbound_delivery_item_data.GoodsMovementType",
	InternationalArticleNumber:     "sap_inbound_delivery_item_data.InternationalArticleNumber",
	InventorySpecialStockType:      "sap_inbound_delivery_item_data.InventorySpecialStockType",
	IsCompletelyDelivered:          "sap_inbound_delivery_item_data.IsCompletelyDelivered",
	IsNotGoodsMovementsRelevant:    "sap_inbound_delivery_item_data.IsNotGoodsMovementsRelevant",
	IssuingOrReceivingPlant:        "sap_inbound_delivery_item_data.IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc:   "sap_inbound_delivery_item_data.IssuingOrReceivingStorageLoc",
	ItemBillingBlockReason:         "sap_inbound_delivery_item_data.ItemBillingBlockReason",
	ItemBillingIncompletionStatus:  "sap_inbound_delivery_item_data.ItemBillingIncompletionStatus",
	ItemDeliveryIncompletionStatus: "sap_inbound_delivery_item_data.ItemDeliveryIncompletionStatus",
	ItemGdsMvtIncompletionSts:      "sap_inbound_delivery_item_data.ItemGdsMvtIncompletionSts",
	ItemGeneralIncompletionStatus:  "sap_inbound_delivery_item_data.ItemGeneralIncompletionStatus",
	ItemGrossWeight:                "sap_inbound_delivery_item_data.ItemGrossWeight",
	ItemIsBillingRelevant:          "sap_inbound_delivery_item_data.ItemIsBillingRelevant",
	ItemNetWeight:                  "sap_inbound_delivery_item_data.ItemNetWeight",
	ItemPackingIncompletionStatus:  "sap_inbound_delivery_item_data.ItemPackingIncompletionStatus",
	ItemPickingIncompletionStatus:  "sap_inbound_delivery_item_data.ItemPickingIncompletionStatus",
	ItemVolume:                     "sap_inbound_delivery_item_data.ItemVolume",
	ItemVolumeUnit:                 "sap_inbound_delivery_item_data.ItemVolumeUnit",
	ItemWeightUnit:                 "sap_inbound_delivery_item_data.ItemWeightUnit",
	LastChangeDate:                 "sap_inbound_delivery_item_data.LastChangeDate",
	LoadingGroup:                   "sap_inbound_delivery_item_data.LoadingGroup",
	Material:                       "sap_inbound_delivery_item_data.Material",
	MaterialByCustomer:             "sap_inbound_delivery_item_data.MaterialByCustomer",
	MaterialFreightGroup:           "sap_inbound_delivery_item_data.MaterialFreightGroup",
	MaterialGroup:                  "sap_inbound_delivery_item_data.MaterialGroup",
	MaterialIsBatchManaged:         "sap_inbound_delivery_item_data.MaterialIsBatchManaged",
	OrderID:                        "sap_inbound_delivery_item_data.OrderID",
	OrderItem:                      "sap_inbound_delivery_item_data.OrderItem",
	OriginalDeliveryQuantity:       "sap_inbound_delivery_item_data.OriginalDeliveryQuantity",
	PackingStatus:                  "sap_inbound_delivery_item_data.PackingStatus",
	PartialDeliveryIsAllowed:       "sap_inbound_delivery_item_data.PartialDeliveryIsAllowed",
	PickingConfirmationStatus:      "sap_inbound_delivery_item_data.PickingConfirmationStatus",
	PickingStatus:                  "sap_inbound_delivery_item_data.PickingStatus",
	Plant:                          "sap_inbound_delivery_item_data.Plant",
	ProductAvailabilityDate:        "sap_inbound_delivery_item_data.ProductAvailabilityDate",
	ProductAvailabilityTime:        "sap_inbound_delivery_item_data.ProductAvailabilityTime",
	ProfitabilitySegment:           "sap_inbound_delivery_item_data.ProfitabilitySegment",
	ProfitCenter:                   "sap_inbound_delivery_item_data.ProfitCenter",
	QuantityIsFixed:                "sap_inbound_delivery_item_data.QuantityIsFixed",
	ReceivingPoint:                 "sap_inbound_delivery_item_data.ReceivingPoint",
	ReferenceSDDocument:            "sap_inbound_delivery_item_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:        "sap_inbound_delivery_item_data.ReferenceSDDocumentItem",
	SalesDocumentItemType:          "sap_inbound_delivery_item_data.SalesDocumentItemType",
	SalesGroup:                     "sap_inbound_delivery_item_data.SalesGroup",
	SalesOffice:                    "sap_inbound_delivery_item_data.SalesOffice",
	SDDocumentCategory:             "sap_inbound_delivery_item_data.SDDocumentCategory",
	SDProcessStatus:                "sap_inbound_delivery_item_data.SDProcessStatus",
	ShelfLifeExpirationDate:        "sap_inbound_delivery_item_data.ShelfLifeExpirationDate",
	StockType:                      "sap_inbound_delivery_item_data.StockType",
	StorageLocation:                "sap_inbound_delivery_item_data.StorageLocation",
	TransportationGroup:            "sap_inbound_delivery_item_data.TransportationGroup",
	UnlimitedOverdeliveryIsAllowed: "sap_inbound_delivery_item_data.UnlimitedOverdeliveryIsAllowed",
}

// Generated where

var SapInboundDeliveryItemDatumWhere = struct {
	DeliveryDocument               whereHelperstring
	DeliveryDocumentItem           whereHelperstring
	ActualDeliveredQtyInBaseUnit   whereHelpernull_String
	ActualDeliveryQuantity         whereHelpernull_String
	AdditionalCustomerGroup1       whereHelpernull_String
	AdditionalCustomerGroup2       whereHelpernull_String
	AdditionalCustomerGroup3       whereHelpernull_String
	AdditionalCustomerGroup4       whereHelpernull_String
	AdditionalCustomerGroup5       whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	Batch                          whereHelpernull_String
	BatchBySupplier                whereHelpernull_String
	BOMExplosion                   whereHelpernull_String
	BusinessArea                   whereHelpernull_String
	ControllingArea                whereHelpernull_String
	CostCenter                     whereHelpernull_String
	CreationDate                   whereHelpernull_String
	CreationTime                   whereHelpernull_String
	DeliveryDocumentItemCategory   whereHelpernull_String
	DeliveryDocumentItemText       whereHelpernull_String
	DeliveryGroup                  whereHelpernull_String
	DeliveryQuantityUnit           whereHelpernull_String
	DeliveryRelatedBillingStatus   whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	Division                       whereHelpernull_String
	GLAccount                      whereHelpernull_String
	GoodsMovementReasonCode        whereHelpernull_String
	GoodsMovementStatus            whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
	InternationalArticleNumber     whereHelpernull_String
	InventorySpecialStockType      whereHelpernull_String
	IsCompletelyDelivered          whereHelpernull_Bool
	IsNotGoodsMovementsRelevant    whereHelpernull_String
	IssuingOrReceivingPlant        whereHelpernull_String
	IssuingOrReceivingStorageLoc   whereHelpernull_String
	ItemBillingBlockReason         whereHelpernull_String
	ItemBillingIncompletionStatus  whereHelpernull_String
	ItemDeliveryIncompletionStatus whereHelpernull_String
	ItemGdsMvtIncompletionSts      whereHelpernull_String
	ItemGeneralIncompletionStatus  whereHelpernull_String
	ItemGrossWeight                whereHelpernull_String
	ItemIsBillingRelevant          whereHelpernull_String
	ItemNetWeight                  whereHelpernull_String
	ItemPackingIncompletionStatus  whereHelpernull_String
	ItemPickingIncompletionStatus  whereHelpernull_String
	ItemVolume                     whereHelpernull_String
	ItemVolumeUnit                 whereHelpernull_String
	ItemWeightUnit                 whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	LoadingGroup                   whereHelpernull_String
	Material                       whereHelpernull_String
	MaterialByCustomer             whereHelpernull_String
	MaterialFreightGroup           whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	MaterialIsBatchManaged         whereHelpernull_Bool
	OrderID                        whereHelpernull_String
	OrderItem                      whereHelpernull_String
	OriginalDeliveryQuantity       whereHelpernull_String
	PackingStatus                  whereHelpernull_String
	PartialDeliveryIsAllowed       whereHelpernull_String
	PickingConfirmationStatus      whereHelpernull_String
	PickingStatus                  whereHelpernull_String
	Plant                          whereHelpernull_String
	ProductAvailabilityDate        whereHelpernull_String
	ProductAvailabilityTime        whereHelpernull_String
	ProfitabilitySegment           whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	QuantityIsFixed                whereHelpernull_Bool
	ReceivingPoint                 whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	ReferenceSDDocumentItem        whereHelpernull_String
	SalesDocumentItemType          whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SDDocumentCategory             whereHelpernull_String
	SDProcessStatus                whereHelpernull_String
	ShelfLifeExpirationDate        whereHelpernull_String
	StockType                      whereHelpernull_String
	StorageLocation                whereHelpernull_String
	TransportationGroup            whereHelpernull_String
	UnlimitedOverdeliveryIsAllowed whereHelpernull_Bool
}{
	DeliveryDocument:               whereHelperstring{field: "`sap_inbound_delivery_item_data`.`DeliveryDocument`"},
	DeliveryDocumentItem:           whereHelperstring{field: "`sap_inbound_delivery_item_data`.`DeliveryDocumentItem`"},
	ActualDeliveredQtyInBaseUnit:   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ActualDeliveredQtyInBaseUnit`"},
	ActualDeliveryQuantity:         whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ActualDeliveryQuantity`"},
	AdditionalCustomerGroup1:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`AdditionalCustomerGroup1`"},
	AdditionalCustomerGroup2:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`AdditionalCustomerGroup2`"},
	AdditionalCustomerGroup3:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`AdditionalCustomerGroup3`"},
	AdditionalCustomerGroup4:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`AdditionalCustomerGroup4`"},
	AdditionalCustomerGroup5:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`AdditionalCustomerGroup5`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`BaseUnit`"},
	Batch:                          whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`Batch`"},
	BatchBySupplier:                whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`BatchBySupplier`"},
	BOMExplosion:                   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`BOMExplosion`"},
	BusinessArea:                   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`BusinessArea`"},
	ControllingArea:                whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ControllingArea`"},
	CostCenter:                     whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`CostCenter`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`CreationDate`"},
	CreationTime:                   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`CreationTime`"},
	DeliveryDocumentItemCategory:   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`DeliveryDocumentItemCategory`"},
	DeliveryDocumentItemText:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`DeliveryDocumentItemText`"},
	DeliveryGroup:                  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`DeliveryGroup`"},
	DeliveryQuantityUnit:           whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`DeliveryQuantityUnit`"},
	DeliveryRelatedBillingStatus:   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`DeliveryRelatedBillingStatus`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`DistributionChannel`"},
	Division:                       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`Division`"},
	GLAccount:                      whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`GLAccount`"},
	GoodsMovementReasonCode:        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`GoodsMovementReasonCode`"},
	GoodsMovementStatus:            whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`GoodsMovementStatus`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`GoodsMovementType`"},
	InternationalArticleNumber:     whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`InternationalArticleNumber`"},
	InventorySpecialStockType:      whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`InventorySpecialStockType`"},
	IsCompletelyDelivered:          whereHelpernull_Bool{field: "`sap_inbound_delivery_item_data`.`IsCompletelyDelivered`"},
	IsNotGoodsMovementsRelevant:    whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`IsNotGoodsMovementsRelevant`"},
	IssuingOrReceivingPlant:        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`IssuingOrReceivingPlant`"},
	IssuingOrReceivingStorageLoc:   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`IssuingOrReceivingStorageLoc`"},
	ItemBillingBlockReason:         whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemBillingBlockReason`"},
	ItemBillingIncompletionStatus:  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemBillingIncompletionStatus`"},
	ItemDeliveryIncompletionStatus: whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemDeliveryIncompletionStatus`"},
	ItemGdsMvtIncompletionSts:      whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemGdsMvtIncompletionSts`"},
	ItemGeneralIncompletionStatus:  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemGeneralIncompletionStatus`"},
	ItemGrossWeight:                whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemGrossWeight`"},
	ItemIsBillingRelevant:          whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemIsBillingRelevant`"},
	ItemNetWeight:                  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemNetWeight`"},
	ItemPackingIncompletionStatus:  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemPackingIncompletionStatus`"},
	ItemPickingIncompletionStatus:  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemPickingIncompletionStatus`"},
	ItemVolume:                     whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemVolume`"},
	ItemVolumeUnit:                 whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemVolumeUnit`"},
	ItemWeightUnit:                 whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ItemWeightUnit`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`LastChangeDate`"},
	LoadingGroup:                   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`LoadingGroup`"},
	Material:                       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`Material`"},
	MaterialByCustomer:             whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`MaterialByCustomer`"},
	MaterialFreightGroup:           whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`MaterialFreightGroup`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`MaterialGroup`"},
	MaterialIsBatchManaged:         whereHelpernull_Bool{field: "`sap_inbound_delivery_item_data`.`MaterialIsBatchManaged`"},
	OrderID:                        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`OrderID`"},
	OrderItem:                      whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`OrderItem`"},
	OriginalDeliveryQuantity:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`OriginalDeliveryQuantity`"},
	PackingStatus:                  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`PackingStatus`"},
	PartialDeliveryIsAllowed:       whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`PartialDeliveryIsAllowed`"},
	PickingConfirmationStatus:      whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`PickingConfirmationStatus`"},
	PickingStatus:                  whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`PickingStatus`"},
	Plant:                          whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`Plant`"},
	ProductAvailabilityDate:        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ProductAvailabilityDate`"},
	ProductAvailabilityTime:        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ProductAvailabilityTime`"},
	ProfitabilitySegment:           whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ProfitabilitySegment`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ProfitCenter`"},
	QuantityIsFixed:                whereHelpernull_Bool{field: "`sap_inbound_delivery_item_data`.`QuantityIsFixed`"},
	ReceivingPoint:                 whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ReceivingPoint`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ReferenceSDDocumentItem`"},
	SalesDocumentItemType:          whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`SalesDocumentItemType`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`SalesGroup`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`SalesOffice`"},
	SDDocumentCategory:             whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`SDDocumentCategory`"},
	SDProcessStatus:                whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`SDProcessStatus`"},
	ShelfLifeExpirationDate:        whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`ShelfLifeExpirationDate`"},
	StockType:                      whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`StockType`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`StorageLocation`"},
	TransportationGroup:            whereHelpernull_String{field: "`sap_inbound_delivery_item_data`.`TransportationGroup`"},
	UnlimitedOverdeliveryIsAllowed: whereHelpernull_Bool{field: "`sap_inbound_delivery_item_data`.`UnlimitedOverdeliveryIsAllowed`"},
}

// SapInboundDeliveryItemDatumRels is where relationship names are stored.
var SapInboundDeliveryItemDatumRels = struct {
	DeliveryDocumentSapInboundDeliveryHeaderDatum string
}{
	DeliveryDocumentSapInboundDeliveryHeaderDatum: "DeliveryDocumentSapInboundDeliveryHeaderDatum",
}

// sapInboundDeliveryItemDatumR is where relationships are stored.
type sapInboundDeliveryItemDatumR struct {
	DeliveryDocumentSapInboundDeliveryHeaderDatum *SapInboundDeliveryHeaderDatum `boil:"DeliveryDocumentSapInboundDeliveryHeaderDatum" json:"DeliveryDocumentSapInboundDeliveryHeaderDatum" toml:"DeliveryDocumentSapInboundDeliveryHeaderDatum" yaml:"DeliveryDocumentSapInboundDeliveryHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapInboundDeliveryItemDatumR) NewStruct() *sapInboundDeliveryItemDatumR {
	return &sapInboundDeliveryItemDatumR{}
}

func (r *sapInboundDeliveryItemDatumR) GetDeliveryDocumentSapInboundDeliveryHeaderDatum() *SapInboundDeliveryHeaderDatum {
	if r == nil {
		return nil
	}
	return r.DeliveryDocumentSapInboundDeliveryHeaderDatum
}

// sapInboundDeliveryItemDatumL is where Load methods for each relationship are stored.
type sapInboundDeliveryItemDatumL struct{}

var (
	sapInboundDeliveryItemDatumAllColumns            = []string{"DeliveryDocument", "DeliveryDocumentItem", "ActualDeliveredQtyInBaseUnit", "ActualDeliveryQuantity", "AdditionalCustomerGroup1", "AdditionalCustomerGroup2", "AdditionalCustomerGroup3", "AdditionalCustomerGroup4", "AdditionalCustomerGroup5", "BaseUnit", "Batch", "BatchBySupplier", "BOMExplosion", "BusinessArea", "ControllingArea", "CostCenter", "CreationDate", "CreationTime", "DeliveryDocumentItemCategory", "DeliveryDocumentItemText", "DeliveryGroup", "DeliveryQuantityUnit", "DeliveryRelatedBillingStatus", "DistributionChannel", "Division", "GLAccount", "GoodsMovementReasonCode", "GoodsMovementStatus", "GoodsMovementType", "InternationalArticleNumber", "InventorySpecialStockType", "IsCompletelyDelivered", "IsNotGoodsMovementsRelevant", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc", "ItemBillingBlockReason", "ItemBillingIncompletionStatus", "ItemDeliveryIncompletionStatus", "ItemGdsMvtIncompletionSts", "ItemGeneralIncompletionStatus", "ItemGrossWeight", "ItemIsBillingRelevant", "ItemNetWeight", "ItemPackingIncompletionStatus", "ItemPickingIncompletionStatus", "ItemVolume", "ItemVolumeUnit", "ItemWeightUnit", "LastChangeDate", "LoadingGroup", "Material", "MaterialByCustomer", "MaterialFreightGroup", "MaterialGroup", "MaterialIsBatchManaged", "OrderID", "OrderItem", "OriginalDeliveryQuantity", "PackingStatus", "PartialDeliveryIsAllowed", "PickingConfirmationStatus", "PickingStatus", "Plant", "ProductAvailabilityDate", "ProductAvailabilityTime", "ProfitabilitySegment", "ProfitCenter", "QuantityIsFixed", "ReceivingPoint", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SalesDocumentItemType", "SalesGroup", "SalesOffice", "SDDocumentCategory", "SDProcessStatus", "ShelfLifeExpirationDate", "StockType", "StorageLocation", "TransportationGroup", "UnlimitedOverdeliveryIsAllowed"}
	sapInboundDeliveryItemDatumColumnsWithoutDefault = []string{"DeliveryDocument", "DeliveryDocumentItem", "ActualDeliveredQtyInBaseUnit", "ActualDeliveryQuantity", "AdditionalCustomerGroup1", "AdditionalCustomerGroup2", "AdditionalCustomerGroup3", "AdditionalCustomerGroup4", "AdditionalCustomerGroup5", "BaseUnit", "Batch", "BatchBySupplier", "BOMExplosion", "BusinessArea", "ControllingArea", "CostCenter", "CreationDate", "CreationTime", "DeliveryDocumentItemCategory", "DeliveryDocumentItemText", "DeliveryGroup", "DeliveryQuantityUnit", "DeliveryRelatedBillingStatus", "DistributionChannel", "Division", "GLAccount", "GoodsMovementReasonCode", "GoodsMovementStatus", "GoodsMovementType", "InternationalArticleNumber", "InventorySpecialStockType", "IsCompletelyDelivered", "IsNotGoodsMovementsRelevant", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc", "ItemBillingBlockReason", "ItemBillingIncompletionStatus", "ItemDeliveryIncompletionStatus", "ItemGdsMvtIncompletionSts", "ItemGeneralIncompletionStatus", "ItemGrossWeight", "ItemIsBillingRelevant", "ItemNetWeight", "ItemPackingIncompletionStatus", "ItemPickingIncompletionStatus", "ItemVolume", "ItemVolumeUnit", "ItemWeightUnit", "LastChangeDate", "LoadingGroup", "Material", "MaterialByCustomer", "MaterialFreightGroup", "MaterialGroup", "MaterialIsBatchManaged", "OrderID", "OrderItem", "OriginalDeliveryQuantity", "PackingStatus", "PartialDeliveryIsAllowed", "PickingConfirmationStatus", "PickingStatus", "Plant", "ProductAvailabilityDate", "ProductAvailabilityTime", "ProfitabilitySegment", "ProfitCenter", "QuantityIsFixed", "ReceivingPoint", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SalesDocumentItemType", "SalesGroup", "SalesOffice", "SDDocumentCategory", "SDProcessStatus", "ShelfLifeExpirationDate", "StockType", "StorageLocation", "TransportationGroup", "UnlimitedOverdeliveryIsAllowed"}
	sapInboundDeliveryItemDatumColumnsWithDefault    = []string{}
	sapInboundDeliveryItemDatumPrimaryKeyColumns     = []string{"DeliveryDocument", "DeliveryDocumentItem"}
	sapInboundDeliveryItemDatumGeneratedColumns      = []string{}
)

type (
	// SapInboundDeliveryItemDatumSlice is an alias for a slice of pointers to SapInboundDeliveryItemDatum.
	// This should almost always be used instead of []SapInboundDeliveryItemDatum.
	SapInboundDeliveryItemDatumSlice []*SapInboundDeliveryItemDatum
	// SapInboundDeliveryItemDatumHook is the signature for custom SapInboundDeliveryItemDatum hook methods
	SapInboundDeliveryItemDatumHook func(context.Context, boil.ContextExecutor, *SapInboundDeliveryItemDatum) error

	sapInboundDeliveryItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapInboundDeliveryItemDatumType                 = reflect.TypeOf(&SapInboundDeliveryItemDatum{})
	sapInboundDeliveryItemDatumMapping              = queries.MakeStructMapping(sapInboundDeliveryItemDatumType)
	sapInboundDeliveryItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, sapInboundDeliveryItemDatumPrimaryKeyColumns)
	sapInboundDeliveryItemDatumInsertCacheMut       sync.RWMutex
	sapInboundDeliveryItemDatumInsertCache          = make(map[string]insertCache)
	sapInboundDeliveryItemDatumUpdateCacheMut       sync.RWMutex
	sapInboundDeliveryItemDatumUpdateCache          = make(map[string]updateCache)
	sapInboundDeliveryItemDatumUpsertCacheMut       sync.RWMutex
	sapInboundDeliveryItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapInboundDeliveryItemDatumAfterSelectHooks []SapInboundDeliveryItemDatumHook

var sapInboundDeliveryItemDatumBeforeInsertHooks []SapInboundDeliveryItemDatumHook
var sapInboundDeliveryItemDatumAfterInsertHooks []SapInboundDeliveryItemDatumHook

var sapInboundDeliveryItemDatumBeforeUpdateHooks []SapInboundDeliveryItemDatumHook
var sapInboundDeliveryItemDatumAfterUpdateHooks []SapInboundDeliveryItemDatumHook

var sapInboundDeliveryItemDatumBeforeDeleteHooks []SapInboundDeliveryItemDatumHook
var sapInboundDeliveryItemDatumAfterDeleteHooks []SapInboundDeliveryItemDatumHook

var sapInboundDeliveryItemDatumBeforeUpsertHooks []SapInboundDeliveryItemDatumHook
var sapInboundDeliveryItemDatumAfterUpsertHooks []SapInboundDeliveryItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapInboundDeliveryItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapInboundDeliveryItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapInboundDeliveryItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapInboundDeliveryItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapInboundDeliveryItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapInboundDeliveryItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapInboundDeliveryItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapInboundDeliveryItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapInboundDeliveryItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapInboundDeliveryItemDatumHook registers your hook function for all future operations.
func AddSapInboundDeliveryItemDatumHook(hookPoint boil.HookPoint, sapInboundDeliveryItemDatumHook SapInboundDeliveryItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapInboundDeliveryItemDatumAfterSelectHooks = append(sapInboundDeliveryItemDatumAfterSelectHooks, sapInboundDeliveryItemDatumHook)
	case boil.BeforeInsertHook:
		sapInboundDeliveryItemDatumBeforeInsertHooks = append(sapInboundDeliveryItemDatumBeforeInsertHooks, sapInboundDeliveryItemDatumHook)
	case boil.AfterInsertHook:
		sapInboundDeliveryItemDatumAfterInsertHooks = append(sapInboundDeliveryItemDatumAfterInsertHooks, sapInboundDeliveryItemDatumHook)
	case boil.BeforeUpdateHook:
		sapInboundDeliveryItemDatumBeforeUpdateHooks = append(sapInboundDeliveryItemDatumBeforeUpdateHooks, sapInboundDeliveryItemDatumHook)
	case boil.AfterUpdateHook:
		sapInboundDeliveryItemDatumAfterUpdateHooks = append(sapInboundDeliveryItemDatumAfterUpdateHooks, sapInboundDeliveryItemDatumHook)
	case boil.BeforeDeleteHook:
		sapInboundDeliveryItemDatumBeforeDeleteHooks = append(sapInboundDeliveryItemDatumBeforeDeleteHooks, sapInboundDeliveryItemDatumHook)
	case boil.AfterDeleteHook:
		sapInboundDeliveryItemDatumAfterDeleteHooks = append(sapInboundDeliveryItemDatumAfterDeleteHooks, sapInboundDeliveryItemDatumHook)
	case boil.BeforeUpsertHook:
		sapInboundDeliveryItemDatumBeforeUpsertHooks = append(sapInboundDeliveryItemDatumBeforeUpsertHooks, sapInboundDeliveryItemDatumHook)
	case boil.AfterUpsertHook:
		sapInboundDeliveryItemDatumAfterUpsertHooks = append(sapInboundDeliveryItemDatumAfterUpsertHooks, sapInboundDeliveryItemDatumHook)
	}
}

// One returns a single sapInboundDeliveryItemDatum record from the query.
func (q sapInboundDeliveryItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapInboundDeliveryItemDatum, error) {
	o := &SapInboundDeliveryItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_inbound_delivery_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapInboundDeliveryItemDatum records from the query.
func (q sapInboundDeliveryItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapInboundDeliveryItemDatumSlice, error) {
	var o []*SapInboundDeliveryItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapInboundDeliveryItemDatum slice")
	}

	if len(sapInboundDeliveryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapInboundDeliveryItemDatum records in the query.
func (q sapInboundDeliveryItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_inbound_delivery_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapInboundDeliveryItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_inbound_delivery_item_data exists")
	}

	return count > 0, nil
}

// DeliveryDocumentSapInboundDeliveryHeaderDatum pointed to by the foreign key.
func (o *SapInboundDeliveryItemDatum) DeliveryDocumentSapInboundDeliveryHeaderDatum(mods ...qm.QueryMod) sapInboundDeliveryHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DeliveryDocument` = ?", o.DeliveryDocument),
	}

	queryMods = append(queryMods, mods...)

	return SapInboundDeliveryHeaderData(queryMods...)
}

// LoadDeliveryDocumentSapInboundDeliveryHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapInboundDeliveryItemDatumL) LoadDeliveryDocumentSapInboundDeliveryHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapInboundDeliveryItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapInboundDeliveryItemDatum
	var object *SapInboundDeliveryItemDatum

	if singular {
		object = maybeSapInboundDeliveryItemDatum.(*SapInboundDeliveryItemDatum)
	} else {
		slice = *maybeSapInboundDeliveryItemDatum.(*[]*SapInboundDeliveryItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapInboundDeliveryItemDatumR{}
		}
		args = append(args, object.DeliveryDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapInboundDeliveryItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryDocument {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_inbound_delivery_header_data`),
		qm.WhereIn(`sap_inbound_delivery_header_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapInboundDeliveryHeaderDatum")
	}

	var resultSlice []*SapInboundDeliveryHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapInboundDeliveryHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_inbound_delivery_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_inbound_delivery_header_data")
	}

	if len(sapInboundDeliveryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryDocumentSapInboundDeliveryHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapInboundDeliveryHeaderDatumR{}
		}
		foreign.R.DeliveryDocumentSapInboundDeliveryItemData = append(foreign.R.DeliveryDocumentSapInboundDeliveryItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryDocument == foreign.DeliveryDocument {
				local.R.DeliveryDocumentSapInboundDeliveryHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapInboundDeliveryHeaderDatumR{}
				}
				foreign.R.DeliveryDocumentSapInboundDeliveryItemData = append(foreign.R.DeliveryDocumentSapInboundDeliveryItemData, local)
				break
			}
		}
	}

	return nil
}

// SetDeliveryDocumentSapInboundDeliveryHeaderDatum of the sapInboundDeliveryItemDatum to the related item.
// Sets o.R.DeliveryDocumentSapInboundDeliveryHeaderDatum to related.
// Adds o to related.R.DeliveryDocumentSapInboundDeliveryItemData.
func (o *SapInboundDeliveryItemDatum) SetDeliveryDocumentSapInboundDeliveryHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapInboundDeliveryHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_inbound_delivery_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
		strmangle.WhereClause("`", "`", 0, sapInboundDeliveryItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DeliveryDocument, o.DeliveryDocument, o.DeliveryDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryDocument = related.DeliveryDocument
	if o.R == nil {
		o.R = &sapInboundDeliveryItemDatumR{
			DeliveryDocumentSapInboundDeliveryHeaderDatum: related,
		}
	} else {
		o.R.DeliveryDocumentSapInboundDeliveryHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapInboundDeliveryHeaderDatumR{
			DeliveryDocumentSapInboundDeliveryItemData: SapInboundDeliveryItemDatumSlice{o},
		}
	} else {
		related.R.DeliveryDocumentSapInboundDeliveryItemData = append(related.R.DeliveryDocumentSapInboundDeliveryItemData, o)
	}

	return nil
}

// SapInboundDeliveryItemData retrieves all the records using an executor.
func SapInboundDeliveryItemData(mods ...qm.QueryMod) sapInboundDeliveryItemDatumQuery {
	mods = append(mods, qm.From("`sap_inbound_delivery_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_inbound_delivery_item_data`.*"})
	}

	return sapInboundDeliveryItemDatumQuery{q}
}

// FindSapInboundDeliveryItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapInboundDeliveryItemDatum(ctx context.Context, exec boil.ContextExecutor, deliveryDocument string, deliveryDocumentItem string, selectCols ...string) (*SapInboundDeliveryItemDatum, error) {
	sapInboundDeliveryItemDatumObj := &SapInboundDeliveryItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_inbound_delivery_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=?", sel,
	)

	q := queries.Raw(query, deliveryDocument, deliveryDocumentItem)

	err := q.Bind(ctx, exec, sapInboundDeliveryItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_inbound_delivery_item_data")
	}

	if err = sapInboundDeliveryItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapInboundDeliveryItemDatumObj, err
	}

	return sapInboundDeliveryItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapInboundDeliveryItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_inbound_delivery_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapInboundDeliveryItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapInboundDeliveryItemDatumInsertCacheMut.RLock()
	cache, cached := sapInboundDeliveryItemDatumInsertCache[key]
	sapInboundDeliveryItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapInboundDeliveryItemDatumAllColumns,
			sapInboundDeliveryItemDatumColumnsWithDefault,
			sapInboundDeliveryItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_inbound_delivery_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_inbound_delivery_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_inbound_delivery_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapInboundDeliveryItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_inbound_delivery_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DeliveryDocument,
		o.DeliveryDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_inbound_delivery_item_data")
	}

CacheNoHooks:
	if !cached {
		sapInboundDeliveryItemDatumInsertCacheMut.Lock()
		sapInboundDeliveryItemDatumInsertCache[key] = cache
		sapInboundDeliveryItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapInboundDeliveryItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapInboundDeliveryItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapInboundDeliveryItemDatumUpdateCacheMut.RLock()
	cache, cached := sapInboundDeliveryItemDatumUpdateCache[key]
	sapInboundDeliveryItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapInboundDeliveryItemDatumAllColumns,
			sapInboundDeliveryItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_inbound_delivery_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_inbound_delivery_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapInboundDeliveryItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, append(wl, sapInboundDeliveryItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_inbound_delivery_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_inbound_delivery_item_data")
	}

	if !cached {
		sapInboundDeliveryItemDatumUpdateCacheMut.Lock()
		sapInboundDeliveryItemDatumUpdateCache[key] = cache
		sapInboundDeliveryItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapInboundDeliveryItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_inbound_delivery_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_inbound_delivery_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapInboundDeliveryItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_inbound_delivery_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapInboundDeliveryItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapInboundDeliveryItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapInboundDeliveryItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapInboundDeliveryItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_inbound_delivery_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapInboundDeliveryItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapInboundDeliveryItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapInboundDeliveryItemDatumUpsertCacheMut.RLock()
	cache, cached := sapInboundDeliveryItemDatumUpsertCache[key]
	sapInboundDeliveryItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapInboundDeliveryItemDatumAllColumns,
			sapInboundDeliveryItemDatumColumnsWithDefault,
			sapInboundDeliveryItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapInboundDeliveryItemDatumAllColumns,
			sapInboundDeliveryItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_inbound_delivery_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_inbound_delivery_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_inbound_delivery_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_inbound_delivery_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapInboundDeliveryItemDatumType, sapInboundDeliveryItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_inbound_delivery_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_inbound_delivery_item_data")
	}

CacheNoHooks:
	if !cached {
		sapInboundDeliveryItemDatumUpsertCacheMut.Lock()
		sapInboundDeliveryItemDatumUpsertCache[key] = cache
		sapInboundDeliveryItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapInboundDeliveryItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapInboundDeliveryItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapInboundDeliveryItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapInboundDeliveryItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_inbound_delivery_item_data` WHERE `DeliveryDocument`=? AND `DeliveryDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_inbound_delivery_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_inbound_delivery_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapInboundDeliveryItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapInboundDeliveryItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_inbound_delivery_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_inbound_delivery_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapInboundDeliveryItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapInboundDeliveryItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_inbound_delivery_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapInboundDeliveryItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_inbound_delivery_item_data")
	}

	if len(sapInboundDeliveryItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapInboundDeliveryItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapInboundDeliveryItemDatum(ctx, exec, o.DeliveryDocument, o.DeliveryDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapInboundDeliveryItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapInboundDeliveryItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_inbound_delivery_item_data`.* FROM `sap_inbound_delivery_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapInboundDeliveryItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapInboundDeliveryItemDatumExists checks if the SapInboundDeliveryItemDatum row exists.
func SapInboundDeliveryItemDatumExists(ctx context.Context, exec boil.ContextExecutor, deliveryDocument string, deliveryDocumentItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_inbound_delivery_item_data` where `DeliveryDocument`=? AND `DeliveryDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, deliveryDocument, deliveryDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, deliveryDocument, deliveryDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_inbound_delivery_item_data exists")
	}

	return exists, nil
}
