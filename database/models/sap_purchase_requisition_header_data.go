// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseRequisitionHeaderDatum is an object representing the database table.
type SapPurchaseRequisitionHeaderDatum struct {
	PurchaseRequisition     string      `boil:"PurchaseRequisition" json:"PurchaseRequisition" toml:"PurchaseRequisition" yaml:"PurchaseRequisition"`
	PurchaseRequisitionType null.String `boil:"PurchaseRequisitionType" json:"PurchaseRequisitionType,omitempty" toml:"PurchaseRequisitionType" yaml:"PurchaseRequisitionType,omitempty"`
	SourceDetermination     null.Bool   `boil:"SourceDetermination" json:"SourceDetermination,omitempty" toml:"SourceDetermination" yaml:"SourceDetermination,omitempty"`

	R *sapPurchaseRequisitionHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseRequisitionHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseRequisitionHeaderDatumColumns = struct {
	PurchaseRequisition     string
	PurchaseRequisitionType string
	SourceDetermination     string
}{
	PurchaseRequisition:     "PurchaseRequisition",
	PurchaseRequisitionType: "PurchaseRequisitionType",
	SourceDetermination:     "SourceDetermination",
}

var SapPurchaseRequisitionHeaderDatumTableColumns = struct {
	PurchaseRequisition     string
	PurchaseRequisitionType string
	SourceDetermination     string
}{
	PurchaseRequisition:     "sap_purchase_requisition_header_data.PurchaseRequisition",
	PurchaseRequisitionType: "sap_purchase_requisition_header_data.PurchaseRequisitionType",
	SourceDetermination:     "sap_purchase_requisition_header_data.SourceDetermination",
}

// Generated where

var SapPurchaseRequisitionHeaderDatumWhere = struct {
	PurchaseRequisition     whereHelperstring
	PurchaseRequisitionType whereHelpernull_String
	SourceDetermination     whereHelpernull_Bool
}{
	PurchaseRequisition:     whereHelperstring{field: "`sap_purchase_requisition_header_data`.`PurchaseRequisition`"},
	PurchaseRequisitionType: whereHelpernull_String{field: "`sap_purchase_requisition_header_data`.`PurchaseRequisitionType`"},
	SourceDetermination:     whereHelpernull_Bool{field: "`sap_purchase_requisition_header_data`.`SourceDetermination`"},
}

// SapPurchaseRequisitionHeaderDatumRels is where relationship names are stored.
var SapPurchaseRequisitionHeaderDatumRels = struct {
	PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData string
	PurchaseRequisitionSapPurchaseRequisitionItemData                  string
	PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData   string
}{
	PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData: "PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData",
	PurchaseRequisitionSapPurchaseRequisitionItemData:                  "PurchaseRequisitionSapPurchaseRequisitionItemData",
	PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData:   "PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData",
}

// sapPurchaseRequisitionHeaderDatumR is where relationships are stored.
type sapPurchaseRequisitionHeaderDatumR struct {
	PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData SapPurchaseRequisitionItemAccountAssignmentDatumSlice `boil:"PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData" json:"PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData" toml:"PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData" yaml:"PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData"`
	PurchaseRequisitionSapPurchaseRequisitionItemData                  SapPurchaseRequisitionItemDatumSlice                  `boil:"PurchaseRequisitionSapPurchaseRequisitionItemData" json:"PurchaseRequisitionSapPurchaseRequisitionItemData" toml:"PurchaseRequisitionSapPurchaseRequisitionItemData" yaml:"PurchaseRequisitionSapPurchaseRequisitionItemData"`
	PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData   SapPurchaseRequisitionItemDeliveryAddressDatumSlice   `boil:"PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData" json:"PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData" toml:"PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData" yaml:"PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseRequisitionHeaderDatumR) NewStruct() *sapPurchaseRequisitionHeaderDatumR {
	return &sapPurchaseRequisitionHeaderDatumR{}
}

// sapPurchaseRequisitionHeaderDatumL is where Load methods for each relationship are stored.
type sapPurchaseRequisitionHeaderDatumL struct{}

var (
	sapPurchaseRequisitionHeaderDatumAllColumns            = []string{"PurchaseRequisition", "PurchaseRequisitionType", "SourceDetermination"}
	sapPurchaseRequisitionHeaderDatumColumnsWithoutDefault = []string{"PurchaseRequisition", "PurchaseRequisitionType", "SourceDetermination"}
	sapPurchaseRequisitionHeaderDatumColumnsWithDefault    = []string{}
	sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns     = []string{"PurchaseRequisition"}
)

type (
	// SapPurchaseRequisitionHeaderDatumSlice is an alias for a slice of pointers to SapPurchaseRequisitionHeaderDatum.
	// This should almost always be used instead of []SapPurchaseRequisitionHeaderDatum.
	SapPurchaseRequisitionHeaderDatumSlice []*SapPurchaseRequisitionHeaderDatum
	// SapPurchaseRequisitionHeaderDatumHook is the signature for custom SapPurchaseRequisitionHeaderDatum hook methods
	SapPurchaseRequisitionHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseRequisitionHeaderDatum) error

	sapPurchaseRequisitionHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseRequisitionHeaderDatumType                 = reflect.TypeOf(&SapPurchaseRequisitionHeaderDatum{})
	sapPurchaseRequisitionHeaderDatumMapping              = queries.MakeStructMapping(sapPurchaseRequisitionHeaderDatumType)
	sapPurchaseRequisitionHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns)
	sapPurchaseRequisitionHeaderDatumInsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionHeaderDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseRequisitionHeaderDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseRequisitionHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseRequisitionHeaderDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseRequisitionHeaderDatumBeforeInsertHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumBeforeUpdateHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumBeforeDeleteHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumBeforeUpsertHooks []SapPurchaseRequisitionHeaderDatumHook

var sapPurchaseRequisitionHeaderDatumAfterInsertHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumAfterSelectHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumAfterUpdateHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumAfterDeleteHooks []SapPurchaseRequisitionHeaderDatumHook
var sapPurchaseRequisitionHeaderDatumAfterUpsertHooks []SapPurchaseRequisitionHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseRequisitionHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseRequisitionHeaderDatumHook registers your hook function for all future operations.
func AddSapPurchaseRequisitionHeaderDatumHook(hookPoint boil.HookPoint, sapPurchaseRequisitionHeaderDatumHook SapPurchaseRequisitionHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapPurchaseRequisitionHeaderDatumBeforeInsertHooks = append(sapPurchaseRequisitionHeaderDatumBeforeInsertHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseRequisitionHeaderDatumBeforeUpdateHooks = append(sapPurchaseRequisitionHeaderDatumBeforeUpdateHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseRequisitionHeaderDatumBeforeDeleteHooks = append(sapPurchaseRequisitionHeaderDatumBeforeDeleteHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseRequisitionHeaderDatumBeforeUpsertHooks = append(sapPurchaseRequisitionHeaderDatumBeforeUpsertHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseRequisitionHeaderDatumAfterInsertHooks = append(sapPurchaseRequisitionHeaderDatumAfterInsertHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.AfterSelectHook:
		sapPurchaseRequisitionHeaderDatumAfterSelectHooks = append(sapPurchaseRequisitionHeaderDatumAfterSelectHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseRequisitionHeaderDatumAfterUpdateHooks = append(sapPurchaseRequisitionHeaderDatumAfterUpdateHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseRequisitionHeaderDatumAfterDeleteHooks = append(sapPurchaseRequisitionHeaderDatumAfterDeleteHooks, sapPurchaseRequisitionHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseRequisitionHeaderDatumAfterUpsertHooks = append(sapPurchaseRequisitionHeaderDatumAfterUpsertHooks, sapPurchaseRequisitionHeaderDatumHook)
	}
}

// One returns a single sapPurchaseRequisitionHeaderDatum record from the query.
func (q sapPurchaseRequisitionHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseRequisitionHeaderDatum, error) {
	o := &SapPurchaseRequisitionHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_requisition_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseRequisitionHeaderDatum records from the query.
func (q sapPurchaseRequisitionHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseRequisitionHeaderDatumSlice, error) {
	var o []*SapPurchaseRequisitionHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseRequisitionHeaderDatum slice")
	}

	if len(sapPurchaseRequisitionHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseRequisitionHeaderDatum records in the query.
func (q sapPurchaseRequisitionHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_requisition_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseRequisitionHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_requisition_header_data exists")
	}

	return count > 0, nil
}

// PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData retrieves all the sap_purchase_requisition_item_account_assignment_datum's SapPurchaseRequisitionItemAccountAssignmentData with an executor via PurchaseRequisition column.
func (o *SapPurchaseRequisitionHeaderDatum) PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData(mods ...qm.QueryMod) sapPurchaseRequisitionItemAccountAssignmentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_requisition_item_account_assignment_data`.`PurchaseRequisition`=?", o.PurchaseRequisition),
	)

	query := SapPurchaseRequisitionItemAccountAssignmentData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_requisition_item_account_assignment_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_requisition_item_account_assignment_data`.*"})
	}

	return query
}

// PurchaseRequisitionSapPurchaseRequisitionItemData retrieves all the sap_purchase_requisition_item_datum's SapPurchaseRequisitionItemData with an executor via PurchaseRequisition column.
func (o *SapPurchaseRequisitionHeaderDatum) PurchaseRequisitionSapPurchaseRequisitionItemData(mods ...qm.QueryMod) sapPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_requisition_item_data`.`PurchaseRequisition`=?", o.PurchaseRequisition),
	)

	query := SapPurchaseRequisitionItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_requisition_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_requisition_item_data`.*"})
	}

	return query
}

// PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData retrieves all the sap_purchase_requisition_item_delivery_address_datum's SapPurchaseRequisitionItemDeliveryAddressData with an executor via PurchaseRequisition column.
func (o *SapPurchaseRequisitionHeaderDatum) PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData(mods ...qm.QueryMod) sapPurchaseRequisitionItemDeliveryAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_requisition_item_delivery_address_data`.`PurchaseRequisition`=?", o.PurchaseRequisition),
	)

	query := SapPurchaseRequisitionItemDeliveryAddressData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_requisition_item_delivery_address_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_requisition_item_delivery_address_data`.*"})
	}

	return query
}

// LoadPurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseRequisitionHeaderDatumL) LoadPurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseRequisitionHeaderDatum
	var object *SapPurchaseRequisitionHeaderDatum

	if singular {
		object = maybeSapPurchaseRequisitionHeaderDatum.(*SapPurchaseRequisitionHeaderDatum)
	} else {
		slice = *maybeSapPurchaseRequisitionHeaderDatum.(*[]*SapPurchaseRequisitionHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseRequisitionHeaderDatumR{}
		}
		args = append(args, object.PurchaseRequisition)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseRequisition {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseRequisition)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_requisition_item_account_assignment_data`),
		qm.WhereIn(`sap_purchase_requisition_item_account_assignment_data.PurchaseRequisition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_requisition_item_account_assignment_data")
	}

	var resultSlice []*SapPurchaseRequisitionItemAccountAssignmentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_requisition_item_account_assignment_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_requisition_item_account_assignment_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_requisition_item_account_assignment_data")
	}

	if len(sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseRequisitionItemAccountAssignmentDatumR{}
			}
			foreign.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseRequisition == foreign.PurchaseRequisition {
				local.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData = append(local.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseRequisitionItemAccountAssignmentDatumR{}
				}
				foreign.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPurchaseRequisitionSapPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseRequisitionHeaderDatumL) LoadPurchaseRequisitionSapPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseRequisitionHeaderDatum
	var object *SapPurchaseRequisitionHeaderDatum

	if singular {
		object = maybeSapPurchaseRequisitionHeaderDatum.(*SapPurchaseRequisitionHeaderDatum)
	} else {
		slice = *maybeSapPurchaseRequisitionHeaderDatum.(*[]*SapPurchaseRequisitionHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseRequisitionHeaderDatumR{}
		}
		args = append(args, object.PurchaseRequisition)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseRequisition {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseRequisition)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_requisition_item_data`),
		qm.WhereIn(`sap_purchase_requisition_item_data.PurchaseRequisition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_requisition_item_data")
	}

	var resultSlice []*SapPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_requisition_item_data")
	}

	if len(sapPurchaseRequisitionItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseRequisitionSapPurchaseRequisitionItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseRequisitionItemDatumR{}
			}
			foreign.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseRequisition == foreign.PurchaseRequisition {
				local.R.PurchaseRequisitionSapPurchaseRequisitionItemData = append(local.R.PurchaseRequisitionSapPurchaseRequisitionItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseRequisitionItemDatumR{}
				}
				foreign.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseRequisitionHeaderDatumL) LoadPurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseRequisitionHeaderDatum
	var object *SapPurchaseRequisitionHeaderDatum

	if singular {
		object = maybeSapPurchaseRequisitionHeaderDatum.(*SapPurchaseRequisitionHeaderDatum)
	} else {
		slice = *maybeSapPurchaseRequisitionHeaderDatum.(*[]*SapPurchaseRequisitionHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseRequisitionHeaderDatumR{}
		}
		args = append(args, object.PurchaseRequisition)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseRequisition {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseRequisition)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_requisition_item_delivery_address_data`),
		qm.WhereIn(`sap_purchase_requisition_item_delivery_address_data.PurchaseRequisition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_requisition_item_delivery_address_data")
	}

	var resultSlice []*SapPurchaseRequisitionItemDeliveryAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_requisition_item_delivery_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_requisition_item_delivery_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_requisition_item_delivery_address_data")
	}

	if len(sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseRequisitionItemDeliveryAddressDatumR{}
			}
			foreign.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseRequisition == foreign.PurchaseRequisition {
				local.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData = append(local.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseRequisitionItemDeliveryAddressDatumR{}
				}
				foreign.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddPurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData adds the given related objects to the existing relationships
// of the sap_purchase_requisition_header_datum, optionally inserting them as new records.
// Appends related to o.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData.
// Sets related.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum appropriately.
func (o *SapPurchaseRequisitionHeaderDatum) AddPurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseRequisitionItemAccountAssignmentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseRequisition = o.PurchaseRequisition
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_requisition_item_account_assignment_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchaseRequisition"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseRequisition, rel.PurchaseRequisition, rel.PurchaseRequisitionItem, rel.PurchaseReqnAcctAssgmtNumber}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseRequisition = o.PurchaseRequisition
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseRequisitionHeaderDatumR{
			PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData: related,
		}
	} else {
		o.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData = append(o.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseRequisitionItemAccountAssignmentDatumR{
				PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: o,
			}
		} else {
			rel.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = o
		}
	}
	return nil
}

// AddPurchaseRequisitionSapPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the sap_purchase_requisition_header_datum, optionally inserting them as new records.
// Appends related to o.R.PurchaseRequisitionSapPurchaseRequisitionItemData.
// Sets related.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum appropriately.
func (o *SapPurchaseRequisitionHeaderDatum) AddPurchaseRequisitionSapPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseRequisition = o.PurchaseRequisition
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchaseRequisition"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseRequisition, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseRequisition = o.PurchaseRequisition
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseRequisitionHeaderDatumR{
			PurchaseRequisitionSapPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.PurchaseRequisitionSapPurchaseRequisitionItemData = append(o.R.PurchaseRequisitionSapPurchaseRequisitionItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseRequisitionItemDatumR{
				PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: o,
			}
		} else {
			rel.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = o
		}
	}
	return nil
}

// AddPurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData adds the given related objects to the existing relationships
// of the sap_purchase_requisition_header_datum, optionally inserting them as new records.
// Appends related to o.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData.
// Sets related.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum appropriately.
func (o *SapPurchaseRequisitionHeaderDatum) AddPurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseRequisitionItemDeliveryAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseRequisition = o.PurchaseRequisition
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_requisition_item_delivery_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchaseRequisition"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseRequisition, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseRequisition = o.PurchaseRequisition
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseRequisitionHeaderDatumR{
			PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData: related,
		}
	} else {
		o.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData = append(o.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseRequisitionItemDeliveryAddressDatumR{
				PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: o,
			}
		} else {
			rel.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = o
		}
	}
	return nil
}

// SapPurchaseRequisitionHeaderData retrieves all the records using an executor.
func SapPurchaseRequisitionHeaderData(mods ...qm.QueryMod) sapPurchaseRequisitionHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_requisition_header_data`"))
	return sapPurchaseRequisitionHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseRequisitionHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseRequisitionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, selectCols ...string) (*SapPurchaseRequisitionHeaderDatum, error) {
	sapPurchaseRequisitionHeaderDatumObj := &SapPurchaseRequisitionHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_requisition_header_data` where `PurchaseRequisition`=?", sel,
	)

	q := queries.Raw(query, purchaseRequisition)

	err := q.Bind(ctx, exec, sapPurchaseRequisitionHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_requisition_header_data")
	}

	if err = sapPurchaseRequisitionHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseRequisitionHeaderDatumObj, err
	}

	return sapPurchaseRequisitionHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseRequisitionHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseRequisitionHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionHeaderDatumInsertCache[key]
	sapPurchaseRequisitionHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseRequisitionHeaderDatumAllColumns,
			sapPurchaseRequisitionHeaderDatumColumnsWithDefault,
			sapPurchaseRequisitionHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_requisition_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_requisition_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_requisition_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_requisition_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseRequisition,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionHeaderDatumInsertCacheMut.Lock()
		sapPurchaseRequisitionHeaderDatumInsertCache[key] = cache
		sapPurchaseRequisitionHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseRequisitionHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseRequisitionHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseRequisitionHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionHeaderDatumUpdateCache[key]
	sapPurchaseRequisitionHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseRequisitionHeaderDatumAllColumns,
			sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_requisition_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_requisition_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, append(wl, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_requisition_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_requisition_header_data")
	}

	if !cached {
		sapPurchaseRequisitionHeaderDatumUpdateCacheMut.Lock()
		sapPurchaseRequisitionHeaderDatumUpdateCache[key] = cache
		sapPurchaseRequisitionHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseRequisitionHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_requisition_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_requisition_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseRequisitionHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseRequisitionHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseRequisitionHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseRequisitionHeaderDatumUniqueColumns = []string{
	"PurchaseRequisition",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseRequisitionHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseRequisitionHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseRequisitionHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionHeaderDatumUpsertCache[key]
	sapPurchaseRequisitionHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseRequisitionHeaderDatumAllColumns,
			sapPurchaseRequisitionHeaderDatumColumnsWithDefault,
			sapPurchaseRequisitionHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapPurchaseRequisitionHeaderDatumAllColumns,
			sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_requisition_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_requisition_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_requisition_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_requisition_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseRequisitionHeaderDatumType, sapPurchaseRequisitionHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_requisition_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionHeaderDatumUpsertCacheMut.Lock()
		sapPurchaseRequisitionHeaderDatumUpsertCache[key] = cache
		sapPurchaseRequisitionHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseRequisitionHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseRequisitionHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseRequisitionHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_requisition_header_data` WHERE `PurchaseRequisition`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_requisition_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_requisition_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseRequisitionHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseRequisitionHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_requisition_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseRequisitionHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseRequisitionHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_requisition_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseRequisitionHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_header_data")
	}

	if len(sapPurchaseRequisitionHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseRequisitionHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseRequisitionHeaderDatum(ctx, exec, o.PurchaseRequisition)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseRequisitionHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseRequisitionHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_requisition_header_data`.* FROM `sap_purchase_requisition_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseRequisitionHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseRequisitionHeaderDatumExists checks if the SapPurchaseRequisitionHeaderDatum row exists.
func SapPurchaseRequisitionHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_requisition_header_data` where `PurchaseRequisition`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseRequisition)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseRequisition)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_requisition_header_data exists")
	}

	return exists, nil
}
