// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionOrderStatusDatum is an object representing the database table.
type SapProductionOrderStatusDatum struct {
	ManufacturingOrder string      `boil:"ManufacturingOrder" json:"ManufacturingOrder" toml:"ManufacturingOrder" yaml:"ManufacturingOrder"`
	StatusCode         string      `boil:"StatusCode" json:"StatusCode" toml:"StatusCode" yaml:"StatusCode"`
	IsUserStatus       null.Bool   `boil:"IsUserStatus" json:"IsUserStatus,omitempty" toml:"IsUserStatus" yaml:"IsUserStatus,omitempty"`
	StatusShortName    null.String `boil:"StatusShortName" json:"StatusShortName,omitempty" toml:"StatusShortName" yaml:"StatusShortName,omitempty"`
	StatusName         null.String `boil:"StatusName" json:"StatusName,omitempty" toml:"StatusName" yaml:"StatusName,omitempty"`

	R *sapProductionOrderStatusDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionOrderStatusDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionOrderStatusDatumColumns = struct {
	ManufacturingOrder string
	StatusCode         string
	IsUserStatus       string
	StatusShortName    string
	StatusName         string
}{
	ManufacturingOrder: "ManufacturingOrder",
	StatusCode:         "StatusCode",
	IsUserStatus:       "IsUserStatus",
	StatusShortName:    "StatusShortName",
	StatusName:         "StatusName",
}

var SapProductionOrderStatusDatumTableColumns = struct {
	ManufacturingOrder string
	StatusCode         string
	IsUserStatus       string
	StatusShortName    string
	StatusName         string
}{
	ManufacturingOrder: "sap_production_order_status_data.ManufacturingOrder",
	StatusCode:         "sap_production_order_status_data.StatusCode",
	IsUserStatus:       "sap_production_order_status_data.IsUserStatus",
	StatusShortName:    "sap_production_order_status_data.StatusShortName",
	StatusName:         "sap_production_order_status_data.StatusName",
}

// Generated where

var SapProductionOrderStatusDatumWhere = struct {
	ManufacturingOrder whereHelperstring
	StatusCode         whereHelperstring
	IsUserStatus       whereHelpernull_Bool
	StatusShortName    whereHelpernull_String
	StatusName         whereHelpernull_String
}{
	ManufacturingOrder: whereHelperstring{field: "`sap_production_order_status_data`.`ManufacturingOrder`"},
	StatusCode:         whereHelperstring{field: "`sap_production_order_status_data`.`StatusCode`"},
	IsUserStatus:       whereHelpernull_Bool{field: "`sap_production_order_status_data`.`IsUserStatus`"},
	StatusShortName:    whereHelpernull_String{field: "`sap_production_order_status_data`.`StatusShortName`"},
	StatusName:         whereHelpernull_String{field: "`sap_production_order_status_data`.`StatusName`"},
}

// SapProductionOrderStatusDatumRels is where relationship names are stored.
var SapProductionOrderStatusDatumRels = struct {
	ManufacturingOrderSapProductionOrderGeneralDatum string
}{
	ManufacturingOrderSapProductionOrderGeneralDatum: "ManufacturingOrderSapProductionOrderGeneralDatum",
}

// sapProductionOrderStatusDatumR is where relationships are stored.
type sapProductionOrderStatusDatumR struct {
	ManufacturingOrderSapProductionOrderGeneralDatum *SapProductionOrderGeneralDatum `boil:"ManufacturingOrderSapProductionOrderGeneralDatum" json:"ManufacturingOrderSapProductionOrderGeneralDatum" toml:"ManufacturingOrderSapProductionOrderGeneralDatum" yaml:"ManufacturingOrderSapProductionOrderGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductionOrderStatusDatumR) NewStruct() *sapProductionOrderStatusDatumR {
	return &sapProductionOrderStatusDatumR{}
}

func (r *sapProductionOrderStatusDatumR) GetManufacturingOrderSapProductionOrderGeneralDatum() *SapProductionOrderGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ManufacturingOrderSapProductionOrderGeneralDatum
}

// sapProductionOrderStatusDatumL is where Load methods for each relationship are stored.
type sapProductionOrderStatusDatumL struct{}

var (
	sapProductionOrderStatusDatumAllColumns            = []string{"ManufacturingOrder", "StatusCode", "IsUserStatus", "StatusShortName", "StatusName"}
	sapProductionOrderStatusDatumColumnsWithoutDefault = []string{"ManufacturingOrder", "StatusCode", "IsUserStatus", "StatusShortName", "StatusName"}
	sapProductionOrderStatusDatumColumnsWithDefault    = []string{}
	sapProductionOrderStatusDatumPrimaryKeyColumns     = []string{"ManufacturingOrder", "StatusCode"}
	sapProductionOrderStatusDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionOrderStatusDatumSlice is an alias for a slice of pointers to SapProductionOrderStatusDatum.
	// This should almost always be used instead of []SapProductionOrderStatusDatum.
	SapProductionOrderStatusDatumSlice []*SapProductionOrderStatusDatum
	// SapProductionOrderStatusDatumHook is the signature for custom SapProductionOrderStatusDatum hook methods
	SapProductionOrderStatusDatumHook func(context.Context, boil.ContextExecutor, *SapProductionOrderStatusDatum) error

	sapProductionOrderStatusDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionOrderStatusDatumType                 = reflect.TypeOf(&SapProductionOrderStatusDatum{})
	sapProductionOrderStatusDatumMapping              = queries.MakeStructMapping(sapProductionOrderStatusDatumType)
	sapProductionOrderStatusDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, sapProductionOrderStatusDatumPrimaryKeyColumns)
	sapProductionOrderStatusDatumInsertCacheMut       sync.RWMutex
	sapProductionOrderStatusDatumInsertCache          = make(map[string]insertCache)
	sapProductionOrderStatusDatumUpdateCacheMut       sync.RWMutex
	sapProductionOrderStatusDatumUpdateCache          = make(map[string]updateCache)
	sapProductionOrderStatusDatumUpsertCacheMut       sync.RWMutex
	sapProductionOrderStatusDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionOrderStatusDatumAfterSelectHooks []SapProductionOrderStatusDatumHook

var sapProductionOrderStatusDatumBeforeInsertHooks []SapProductionOrderStatusDatumHook
var sapProductionOrderStatusDatumAfterInsertHooks []SapProductionOrderStatusDatumHook

var sapProductionOrderStatusDatumBeforeUpdateHooks []SapProductionOrderStatusDatumHook
var sapProductionOrderStatusDatumAfterUpdateHooks []SapProductionOrderStatusDatumHook

var sapProductionOrderStatusDatumBeforeDeleteHooks []SapProductionOrderStatusDatumHook
var sapProductionOrderStatusDatumAfterDeleteHooks []SapProductionOrderStatusDatumHook

var sapProductionOrderStatusDatumBeforeUpsertHooks []SapProductionOrderStatusDatumHook
var sapProductionOrderStatusDatumAfterUpsertHooks []SapProductionOrderStatusDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionOrderStatusDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionOrderStatusDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionOrderStatusDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionOrderStatusDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionOrderStatusDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionOrderStatusDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionOrderStatusDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionOrderStatusDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionOrderStatusDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderStatusDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionOrderStatusDatumHook registers your hook function for all future operations.
func AddSapProductionOrderStatusDatumHook(hookPoint boil.HookPoint, sapProductionOrderStatusDatumHook SapProductionOrderStatusDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionOrderStatusDatumAfterSelectHooks = append(sapProductionOrderStatusDatumAfterSelectHooks, sapProductionOrderStatusDatumHook)
	case boil.BeforeInsertHook:
		sapProductionOrderStatusDatumBeforeInsertHooks = append(sapProductionOrderStatusDatumBeforeInsertHooks, sapProductionOrderStatusDatumHook)
	case boil.AfterInsertHook:
		sapProductionOrderStatusDatumAfterInsertHooks = append(sapProductionOrderStatusDatumAfterInsertHooks, sapProductionOrderStatusDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionOrderStatusDatumBeforeUpdateHooks = append(sapProductionOrderStatusDatumBeforeUpdateHooks, sapProductionOrderStatusDatumHook)
	case boil.AfterUpdateHook:
		sapProductionOrderStatusDatumAfterUpdateHooks = append(sapProductionOrderStatusDatumAfterUpdateHooks, sapProductionOrderStatusDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionOrderStatusDatumBeforeDeleteHooks = append(sapProductionOrderStatusDatumBeforeDeleteHooks, sapProductionOrderStatusDatumHook)
	case boil.AfterDeleteHook:
		sapProductionOrderStatusDatumAfterDeleteHooks = append(sapProductionOrderStatusDatumAfterDeleteHooks, sapProductionOrderStatusDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionOrderStatusDatumBeforeUpsertHooks = append(sapProductionOrderStatusDatumBeforeUpsertHooks, sapProductionOrderStatusDatumHook)
	case boil.AfterUpsertHook:
		sapProductionOrderStatusDatumAfterUpsertHooks = append(sapProductionOrderStatusDatumAfterUpsertHooks, sapProductionOrderStatusDatumHook)
	}
}

// One returns a single sapProductionOrderStatusDatum record from the query.
func (q sapProductionOrderStatusDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionOrderStatusDatum, error) {
	o := &SapProductionOrderStatusDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_order_status_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionOrderStatusDatum records from the query.
func (q sapProductionOrderStatusDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionOrderStatusDatumSlice, error) {
	var o []*SapProductionOrderStatusDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionOrderStatusDatum slice")
	}

	if len(sapProductionOrderStatusDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionOrderStatusDatum records in the query.
func (q sapProductionOrderStatusDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_order_status_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionOrderStatusDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_order_status_data exists")
	}

	return count > 0, nil
}

// ManufacturingOrderSapProductionOrderGeneralDatum pointed to by the foreign key.
func (o *SapProductionOrderStatusDatum) ManufacturingOrderSapProductionOrderGeneralDatum(mods ...qm.QueryMod) sapProductionOrderGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ManufacturingOrder` = ?", o.ManufacturingOrder),
	}

	queryMods = append(queryMods, mods...)

	return SapProductionOrderGeneralData(queryMods...)
}

// LoadManufacturingOrderSapProductionOrderGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductionOrderStatusDatumL) LoadManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderStatusDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderStatusDatum
	var object *SapProductionOrderStatusDatum

	if singular {
		object = maybeSapProductionOrderStatusDatum.(*SapProductionOrderStatusDatum)
	} else {
		slice = *maybeSapProductionOrderStatusDatum.(*[]*SapProductionOrderStatusDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderStatusDatumR{}
		}
		args = append(args, object.ManufacturingOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderStatusDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_general_data`),
		qm.WhereIn(`sap_production_order_general_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductionOrderGeneralDatum")
	}

	var resultSlice []*SapProductionOrderGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductionOrderGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_production_order_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_general_data")
	}

	if len(sapProductionOrderStatusDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductionOrderGeneralDatumR{}
		}
		foreign.R.ManufacturingOrderSapProductionOrderStatusData = append(foreign.R.ManufacturingOrderSapProductionOrderStatusData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductionOrderGeneralDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderStatusData = append(foreign.R.ManufacturingOrderSapProductionOrderStatusData, local)
				break
			}
		}
	}

	return nil
}

// SetManufacturingOrderSapProductionOrderGeneralDatum of the sapProductionOrderStatusDatum to the related item.
// Sets o.R.ManufacturingOrderSapProductionOrderGeneralDatum to related.
// Adds o to related.R.ManufacturingOrderSapProductionOrderStatusData.
func (o *SapProductionOrderStatusDatum) SetManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductionOrderGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_production_order_status_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
		strmangle.WhereClause("`", "`", 0, sapProductionOrderStatusDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ManufacturingOrder, o.ManufacturingOrder, o.StatusCode}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManufacturingOrder = related.ManufacturingOrder
	if o.R == nil {
		o.R = &sapProductionOrderStatusDatumR{
			ManufacturingOrderSapProductionOrderGeneralDatum: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderStatusData: SapProductionOrderStatusDatumSlice{o},
		}
	} else {
		related.R.ManufacturingOrderSapProductionOrderStatusData = append(related.R.ManufacturingOrderSapProductionOrderStatusData, o)
	}

	return nil
}

// SapProductionOrderStatusData retrieves all the records using an executor.
func SapProductionOrderStatusData(mods ...qm.QueryMod) sapProductionOrderStatusDatumQuery {
	mods = append(mods, qm.From("`sap_production_order_status_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_production_order_status_data`.*"})
	}

	return sapProductionOrderStatusDatumQuery{q}
}

// FindSapProductionOrderStatusDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionOrderStatusDatum(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, statusCode string, selectCols ...string) (*SapProductionOrderStatusDatum, error) {
	sapProductionOrderStatusDatumObj := &SapProductionOrderStatusDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_order_status_data` where `ManufacturingOrder`=? AND `StatusCode`=?", sel,
	)

	q := queries.Raw(query, manufacturingOrder, statusCode)

	err := q.Bind(ctx, exec, sapProductionOrderStatusDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_order_status_data")
	}

	if err = sapProductionOrderStatusDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionOrderStatusDatumObj, err
	}

	return sapProductionOrderStatusDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionOrderStatusDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_status_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderStatusDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionOrderStatusDatumInsertCacheMut.RLock()
	cache, cached := sapProductionOrderStatusDatumInsertCache[key]
	sapProductionOrderStatusDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionOrderStatusDatumAllColumns,
			sapProductionOrderStatusDatumColumnsWithDefault,
			sapProductionOrderStatusDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_order_status_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_order_status_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_order_status_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionOrderStatusDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_order_status_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ManufacturingOrder,
		o.StatusCode,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_status_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderStatusDatumInsertCacheMut.Lock()
		sapProductionOrderStatusDatumInsertCache[key] = cache
		sapProductionOrderStatusDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionOrderStatusDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionOrderStatusDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionOrderStatusDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionOrderStatusDatumUpdateCache[key]
	sapProductionOrderStatusDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionOrderStatusDatumAllColumns,
			sapProductionOrderStatusDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_order_status_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_order_status_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionOrderStatusDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, append(wl, sapProductionOrderStatusDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_order_status_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_order_status_data")
	}

	if !cached {
		sapProductionOrderStatusDatumUpdateCacheMut.Lock()
		sapProductionOrderStatusDatumUpdateCache[key] = cache
		sapProductionOrderStatusDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionOrderStatusDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_order_status_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_order_status_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionOrderStatusDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderStatusDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_order_status_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderStatusDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionOrderStatusDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionOrderStatusDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionOrderStatusDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionOrderStatusDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_status_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderStatusDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionOrderStatusDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionOrderStatusDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionOrderStatusDatumUpsertCache[key]
	sapProductionOrderStatusDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionOrderStatusDatumAllColumns,
			sapProductionOrderStatusDatumColumnsWithDefault,
			sapProductionOrderStatusDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionOrderStatusDatumAllColumns,
			sapProductionOrderStatusDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_order_status_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_order_status_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_order_status_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_order_status_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionOrderStatusDatumType, sapProductionOrderStatusDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_order_status_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_status_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderStatusDatumUpsertCacheMut.Lock()
		sapProductionOrderStatusDatumUpsertCache[key] = cache
		sapProductionOrderStatusDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionOrderStatusDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionOrderStatusDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionOrderStatusDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionOrderStatusDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_order_status_data` WHERE `ManufacturingOrder`=? AND `StatusCode`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_order_status_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_order_status_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionOrderStatusDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionOrderStatusDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_order_status_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_status_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionOrderStatusDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionOrderStatusDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderStatusDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_order_status_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderStatusDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionOrderStatusDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_status_data")
	}

	if len(sapProductionOrderStatusDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionOrderStatusDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionOrderStatusDatum(ctx, exec, o.ManufacturingOrder, o.StatusCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionOrderStatusDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionOrderStatusDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderStatusDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_order_status_data`.* FROM `sap_production_order_status_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderStatusDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionOrderStatusDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionOrderStatusDatumExists checks if the SapProductionOrderStatusDatum row exists.
func SapProductionOrderStatusDatumExists(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, statusCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_order_status_data` where `ManufacturingOrder`=? AND `StatusCode`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, manufacturingOrder, statusCode)
	}
	row := exec.QueryRowContext(ctx, sql, manufacturingOrder, statusCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_order_status_data exists")
	}

	return exists, nil
}
