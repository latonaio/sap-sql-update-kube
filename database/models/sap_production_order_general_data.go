// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionOrderGeneralDatum is an object representing the database table.
type SapProductionOrderGeneralDatum struct {
	ManufacturingOrder            string      `boil:"ManufacturingOrder" json:"ManufacturingOrder" toml:"ManufacturingOrder" yaml:"ManufacturingOrder"`
	ManufacturingOrderCategory    null.String `boil:"ManufacturingOrderCategory" json:"ManufacturingOrderCategory,omitempty" toml:"ManufacturingOrderCategory" yaml:"ManufacturingOrderCategory,omitempty"`
	ManufacturingOrderType        null.String `boil:"ManufacturingOrderType" json:"ManufacturingOrderType,omitempty" toml:"ManufacturingOrderType" yaml:"ManufacturingOrderType,omitempty"`
	OrderIsCreated                null.String `boil:"OrderIsCreated" json:"OrderIsCreated,omitempty" toml:"OrderIsCreated" yaml:"OrderIsCreated,omitempty"`
	OrderIsReleased               null.String `boil:"OrderIsReleased" json:"OrderIsReleased,omitempty" toml:"OrderIsReleased" yaml:"OrderIsReleased,omitempty"`
	OrderIsPrinted                null.String `boil:"OrderIsPrinted" json:"OrderIsPrinted,omitempty" toml:"OrderIsPrinted" yaml:"OrderIsPrinted,omitempty"`
	OrderIsConfirmed              null.String `boil:"OrderIsConfirmed" json:"OrderIsConfirmed,omitempty" toml:"OrderIsConfirmed" yaml:"OrderIsConfirmed,omitempty"`
	OrderIsPartiallyConfirmed     null.String `boil:"OrderIsPartiallyConfirmed" json:"OrderIsPartiallyConfirmed,omitempty" toml:"OrderIsPartiallyConfirmed" yaml:"OrderIsPartiallyConfirmed,omitempty"`
	OrderIsDelivered              null.String `boil:"OrderIsDelivered" json:"OrderIsDelivered,omitempty" toml:"OrderIsDelivered" yaml:"OrderIsDelivered,omitempty"`
	OrderIsDeleted                null.String `boil:"OrderIsDeleted" json:"OrderIsDeleted,omitempty" toml:"OrderIsDeleted" yaml:"OrderIsDeleted,omitempty"`
	OrderIsPreCosted              null.String `boil:"OrderIsPreCosted" json:"OrderIsPreCosted,omitempty" toml:"OrderIsPreCosted" yaml:"OrderIsPreCosted,omitempty"`
	SettlementRuleIsCreated       null.String `boil:"SettlementRuleIsCreated" json:"SettlementRuleIsCreated,omitempty" toml:"SettlementRuleIsCreated" yaml:"SettlementRuleIsCreated,omitempty"`
	OrderIsPartiallyReleased      null.String `boil:"OrderIsPartiallyReleased" json:"OrderIsPartiallyReleased,omitempty" toml:"OrderIsPartiallyReleased" yaml:"OrderIsPartiallyReleased,omitempty"`
	OrderIsLocked                 null.String `boil:"OrderIsLocked" json:"OrderIsLocked,omitempty" toml:"OrderIsLocked" yaml:"OrderIsLocked,omitempty"`
	OrderIsTechnicallyCompleted   null.String `boil:"OrderIsTechnicallyCompleted" json:"OrderIsTechnicallyCompleted,omitempty" toml:"OrderIsTechnicallyCompleted" yaml:"OrderIsTechnicallyCompleted,omitempty"`
	OrderIsClosed                 null.String `boil:"OrderIsClosed" json:"OrderIsClosed,omitempty" toml:"OrderIsClosed" yaml:"OrderIsClosed,omitempty"`
	OrderIsPartiallyDelivered     null.String `boil:"OrderIsPartiallyDelivered" json:"OrderIsPartiallyDelivered,omitempty" toml:"OrderIsPartiallyDelivered" yaml:"OrderIsPartiallyDelivered,omitempty"`
	OrderIsMarkedForDeletion      null.String `boil:"OrderIsMarkedForDeletion" json:"OrderIsMarkedForDeletion,omitempty" toml:"OrderIsMarkedForDeletion" yaml:"OrderIsMarkedForDeletion,omitempty"`
	OrderIsScheduled              null.String `boil:"OrderIsScheduled" json:"OrderIsScheduled,omitempty" toml:"OrderIsScheduled" yaml:"OrderIsScheduled,omitempty"`
	OrderHasGeneratedOperations   null.String `boil:"OrderHasGeneratedOperations" json:"OrderHasGeneratedOperations,omitempty" toml:"OrderHasGeneratedOperations" yaml:"OrderHasGeneratedOperations,omitempty"`
	MaterialAvailyIsNotChecked    null.String `boil:"MaterialAvailyIsNotChecked" json:"MaterialAvailyIsNotChecked,omitempty" toml:"MaterialAvailyIsNotChecked" yaml:"MaterialAvailyIsNotChecked,omitempty"`
	MfgOrderCreationDate          null.String `boil:"MfgOrderCreationDate" json:"MfgOrderCreationDate,omitempty" toml:"MfgOrderCreationDate" yaml:"MfgOrderCreationDate,omitempty"`
	MfgOrderCreationTime          null.String `boil:"MfgOrderCreationTime" json:"MfgOrderCreationTime,omitempty" toml:"MfgOrderCreationTime" yaml:"MfgOrderCreationTime,omitempty"`
	LastChangeDateTime            null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	Material                      null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	StorageLocation               null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	GoodsRecipientName            null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	UnloadingPointName            null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	MaterialGoodsReceiptDuration  null.String `boil:"MaterialGoodsReceiptDuration" json:"MaterialGoodsReceiptDuration,omitempty" toml:"MaterialGoodsReceiptDuration" yaml:"MaterialGoodsReceiptDuration,omitempty"`
	OrderInternalBillOfOperations null.String `boil:"OrderInternalBillOfOperations" json:"OrderInternalBillOfOperations,omitempty" toml:"OrderInternalBillOfOperations" yaml:"OrderInternalBillOfOperations,omitempty"`
	ProductionPlant               null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	Plant                         null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	MRPArea                       null.String `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                 null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionSupervisor          null.String `boil:"ProductionSupervisor" json:"ProductionSupervisor,omitempty" toml:"ProductionSupervisor" yaml:"ProductionSupervisor,omitempty"`
	ProductionVersion             null.String `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	PlannedOrder                  null.String `boil:"PlannedOrder" json:"PlannedOrder,omitempty" toml:"PlannedOrder" yaml:"PlannedOrder,omitempty"`
	SalesOrder                    null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem                null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	BasicSchedulingType           null.String `boil:"BasicSchedulingType" json:"BasicSchedulingType,omitempty" toml:"BasicSchedulingType" yaml:"BasicSchedulingType,omitempty"`
	BusinessArea                  null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	CompanyCode                   null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	ProfitCenter                  null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	FunctionalArea                null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	MfgOrderPlannedStartDate      null.String `boil:"MfgOrderPlannedStartDate" json:"MfgOrderPlannedStartDate,omitempty" toml:"MfgOrderPlannedStartDate" yaml:"MfgOrderPlannedStartDate,omitempty"`
	MfgOrderPlannedStartTime      null.String `boil:"MfgOrderPlannedStartTime" json:"MfgOrderPlannedStartTime,omitempty" toml:"MfgOrderPlannedStartTime" yaml:"MfgOrderPlannedStartTime,omitempty"`
	MfgOrderPlannedEndDate        null.String `boil:"MfgOrderPlannedEndDate" json:"MfgOrderPlannedEndDate,omitempty" toml:"MfgOrderPlannedEndDate" yaml:"MfgOrderPlannedEndDate,omitempty"`
	MfgOrderPlannedEndTime        null.String `boil:"MfgOrderPlannedEndTime" json:"MfgOrderPlannedEndTime,omitempty" toml:"MfgOrderPlannedEndTime" yaml:"MfgOrderPlannedEndTime,omitempty"`
	MfgOrderScheduledStartDate    null.String `boil:"MfgOrderScheduledStartDate" json:"MfgOrderScheduledStartDate,omitempty" toml:"MfgOrderScheduledStartDate" yaml:"MfgOrderScheduledStartDate,omitempty"`
	MfgOrderScheduledStartTime    null.String `boil:"MfgOrderScheduledStartTime" json:"MfgOrderScheduledStartTime,omitempty" toml:"MfgOrderScheduledStartTime" yaml:"MfgOrderScheduledStartTime,omitempty"`
	MfgOrderScheduledEndDate      null.String `boil:"MfgOrderScheduledEndDate" json:"MfgOrderScheduledEndDate,omitempty" toml:"MfgOrderScheduledEndDate" yaml:"MfgOrderScheduledEndDate,omitempty"`
	MfgOrderScheduledEndTime      null.String `boil:"MfgOrderScheduledEndTime" json:"MfgOrderScheduledEndTime,omitempty" toml:"MfgOrderScheduledEndTime" yaml:"MfgOrderScheduledEndTime,omitempty"`
	MfgOrderActualReleaseDate     null.String `boil:"MfgOrderActualReleaseDate" json:"MfgOrderActualReleaseDate,omitempty" toml:"MfgOrderActualReleaseDate" yaml:"MfgOrderActualReleaseDate,omitempty"`
	ProductionUnit                null.String `boil:"ProductionUnit" json:"ProductionUnit,omitempty" toml:"ProductionUnit" yaml:"ProductionUnit,omitempty"`
	TotalQuantity                 null.String `boil:"TotalQuantity" json:"TotalQuantity,omitempty" toml:"TotalQuantity" yaml:"TotalQuantity,omitempty"`
	MfgOrderPlannedScrapQty       null.String `boil:"MfgOrderPlannedScrapQty" json:"MfgOrderPlannedScrapQty,omitempty" toml:"MfgOrderPlannedScrapQty" yaml:"MfgOrderPlannedScrapQty,omitempty"`
	MfgOrderConfirmedYieldQty     null.String `boil:"MfgOrderConfirmedYieldQty" json:"MfgOrderConfirmedYieldQty,omitempty" toml:"MfgOrderConfirmedYieldQty" yaml:"MfgOrderConfirmedYieldQty,omitempty"`
	WBSElementExternalID          null.String `boil:"WBSElementExternalID" json:"WBSElementExternalID,omitempty" toml:"WBSElementExternalID" yaml:"WBSElementExternalID,omitempty"`
	OrderLongText                 null.String `boil:"OrderLongText" json:"OrderLongText,omitempty" toml:"OrderLongText" yaml:"OrderLongText,omitempty"`

	R *sapProductionOrderGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionOrderGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionOrderGeneralDatumColumns = struct {
	ManufacturingOrder            string
	ManufacturingOrderCategory    string
	ManufacturingOrderType        string
	OrderIsCreated                string
	OrderIsReleased               string
	OrderIsPrinted                string
	OrderIsConfirmed              string
	OrderIsPartiallyConfirmed     string
	OrderIsDelivered              string
	OrderIsDeleted                string
	OrderIsPreCosted              string
	SettlementRuleIsCreated       string
	OrderIsPartiallyReleased      string
	OrderIsLocked                 string
	OrderIsTechnicallyCompleted   string
	OrderIsClosed                 string
	OrderIsPartiallyDelivered     string
	OrderIsMarkedForDeletion      string
	OrderIsScheduled              string
	OrderHasGeneratedOperations   string
	MaterialAvailyIsNotChecked    string
	MfgOrderCreationDate          string
	MfgOrderCreationTime          string
	LastChangeDateTime            string
	Material                      string
	StorageLocation               string
	GoodsRecipientName            string
	UnloadingPointName            string
	MaterialGoodsReceiptDuration  string
	OrderInternalBillOfOperations string
	ProductionPlant               string
	Plant                         string
	MRPArea                       string
	MRPController                 string
	ProductionSupervisor          string
	ProductionVersion             string
	PlannedOrder                  string
	SalesOrder                    string
	SalesOrderItem                string
	BasicSchedulingType           string
	BusinessArea                  string
	CompanyCode                   string
	ProfitCenter                  string
	FunctionalArea                string
	MfgOrderPlannedStartDate      string
	MfgOrderPlannedStartTime      string
	MfgOrderPlannedEndDate        string
	MfgOrderPlannedEndTime        string
	MfgOrderScheduledStartDate    string
	MfgOrderScheduledStartTime    string
	MfgOrderScheduledEndDate      string
	MfgOrderScheduledEndTime      string
	MfgOrderActualReleaseDate     string
	ProductionUnit                string
	TotalQuantity                 string
	MfgOrderPlannedScrapQty       string
	MfgOrderConfirmedYieldQty     string
	WBSElementExternalID          string
	OrderLongText                 string
}{
	ManufacturingOrder:            "ManufacturingOrder",
	ManufacturingOrderCategory:    "ManufacturingOrderCategory",
	ManufacturingOrderType:        "ManufacturingOrderType",
	OrderIsCreated:                "OrderIsCreated",
	OrderIsReleased:               "OrderIsReleased",
	OrderIsPrinted:                "OrderIsPrinted",
	OrderIsConfirmed:              "OrderIsConfirmed",
	OrderIsPartiallyConfirmed:     "OrderIsPartiallyConfirmed",
	OrderIsDelivered:              "OrderIsDelivered",
	OrderIsDeleted:                "OrderIsDeleted",
	OrderIsPreCosted:              "OrderIsPreCosted",
	SettlementRuleIsCreated:       "SettlementRuleIsCreated",
	OrderIsPartiallyReleased:      "OrderIsPartiallyReleased",
	OrderIsLocked:                 "OrderIsLocked",
	OrderIsTechnicallyCompleted:   "OrderIsTechnicallyCompleted",
	OrderIsClosed:                 "OrderIsClosed",
	OrderIsPartiallyDelivered:     "OrderIsPartiallyDelivered",
	OrderIsMarkedForDeletion:      "OrderIsMarkedForDeletion",
	OrderIsScheduled:              "OrderIsScheduled",
	OrderHasGeneratedOperations:   "OrderHasGeneratedOperations",
	MaterialAvailyIsNotChecked:    "MaterialAvailyIsNotChecked",
	MfgOrderCreationDate:          "MfgOrderCreationDate",
	MfgOrderCreationTime:          "MfgOrderCreationTime",
	LastChangeDateTime:            "LastChangeDateTime",
	Material:                      "Material",
	StorageLocation:               "StorageLocation",
	GoodsRecipientName:            "GoodsRecipientName",
	UnloadingPointName:            "UnloadingPointName",
	MaterialGoodsReceiptDuration:  "MaterialGoodsReceiptDuration",
	OrderInternalBillOfOperations: "OrderInternalBillOfOperations",
	ProductionPlant:               "ProductionPlant",
	Plant:                         "Plant",
	MRPArea:                       "MRPArea",
	MRPController:                 "MRPController",
	ProductionSupervisor:          "ProductionSupervisor",
	ProductionVersion:             "ProductionVersion",
	PlannedOrder:                  "PlannedOrder",
	SalesOrder:                    "SalesOrder",
	SalesOrderItem:                "SalesOrderItem",
	BasicSchedulingType:           "BasicSchedulingType",
	BusinessArea:                  "BusinessArea",
	CompanyCode:                   "CompanyCode",
	ProfitCenter:                  "ProfitCenter",
	FunctionalArea:                "FunctionalArea",
	MfgOrderPlannedStartDate:      "MfgOrderPlannedStartDate",
	MfgOrderPlannedStartTime:      "MfgOrderPlannedStartTime",
	MfgOrderPlannedEndDate:        "MfgOrderPlannedEndDate",
	MfgOrderPlannedEndTime:        "MfgOrderPlannedEndTime",
	MfgOrderScheduledStartDate:    "MfgOrderScheduledStartDate",
	MfgOrderScheduledStartTime:    "MfgOrderScheduledStartTime",
	MfgOrderScheduledEndDate:      "MfgOrderScheduledEndDate",
	MfgOrderScheduledEndTime:      "MfgOrderScheduledEndTime",
	MfgOrderActualReleaseDate:     "MfgOrderActualReleaseDate",
	ProductionUnit:                "ProductionUnit",
	TotalQuantity:                 "TotalQuantity",
	MfgOrderPlannedScrapQty:       "MfgOrderPlannedScrapQty",
	MfgOrderConfirmedYieldQty:     "MfgOrderConfirmedYieldQty",
	WBSElementExternalID:          "WBSElementExternalID",
	OrderLongText:                 "OrderLongText",
}

var SapProductionOrderGeneralDatumTableColumns = struct {
	ManufacturingOrder            string
	ManufacturingOrderCategory    string
	ManufacturingOrderType        string
	OrderIsCreated                string
	OrderIsReleased               string
	OrderIsPrinted                string
	OrderIsConfirmed              string
	OrderIsPartiallyConfirmed     string
	OrderIsDelivered              string
	OrderIsDeleted                string
	OrderIsPreCosted              string
	SettlementRuleIsCreated       string
	OrderIsPartiallyReleased      string
	OrderIsLocked                 string
	OrderIsTechnicallyCompleted   string
	OrderIsClosed                 string
	OrderIsPartiallyDelivered     string
	OrderIsMarkedForDeletion      string
	OrderIsScheduled              string
	OrderHasGeneratedOperations   string
	MaterialAvailyIsNotChecked    string
	MfgOrderCreationDate          string
	MfgOrderCreationTime          string
	LastChangeDateTime            string
	Material                      string
	StorageLocation               string
	GoodsRecipientName            string
	UnloadingPointName            string
	MaterialGoodsReceiptDuration  string
	OrderInternalBillOfOperations string
	ProductionPlant               string
	Plant                         string
	MRPArea                       string
	MRPController                 string
	ProductionSupervisor          string
	ProductionVersion             string
	PlannedOrder                  string
	SalesOrder                    string
	SalesOrderItem                string
	BasicSchedulingType           string
	BusinessArea                  string
	CompanyCode                   string
	ProfitCenter                  string
	FunctionalArea                string
	MfgOrderPlannedStartDate      string
	MfgOrderPlannedStartTime      string
	MfgOrderPlannedEndDate        string
	MfgOrderPlannedEndTime        string
	MfgOrderScheduledStartDate    string
	MfgOrderScheduledStartTime    string
	MfgOrderScheduledEndDate      string
	MfgOrderScheduledEndTime      string
	MfgOrderActualReleaseDate     string
	ProductionUnit                string
	TotalQuantity                 string
	MfgOrderPlannedScrapQty       string
	MfgOrderConfirmedYieldQty     string
	WBSElementExternalID          string
	OrderLongText                 string
}{
	ManufacturingOrder:            "sap_production_order_general_data.ManufacturingOrder",
	ManufacturingOrderCategory:    "sap_production_order_general_data.ManufacturingOrderCategory",
	ManufacturingOrderType:        "sap_production_order_general_data.ManufacturingOrderType",
	OrderIsCreated:                "sap_production_order_general_data.OrderIsCreated",
	OrderIsReleased:               "sap_production_order_general_data.OrderIsReleased",
	OrderIsPrinted:                "sap_production_order_general_data.OrderIsPrinted",
	OrderIsConfirmed:              "sap_production_order_general_data.OrderIsConfirmed",
	OrderIsPartiallyConfirmed:     "sap_production_order_general_data.OrderIsPartiallyConfirmed",
	OrderIsDelivered:              "sap_production_order_general_data.OrderIsDelivered",
	OrderIsDeleted:                "sap_production_order_general_data.OrderIsDeleted",
	OrderIsPreCosted:              "sap_production_order_general_data.OrderIsPreCosted",
	SettlementRuleIsCreated:       "sap_production_order_general_data.SettlementRuleIsCreated",
	OrderIsPartiallyReleased:      "sap_production_order_general_data.OrderIsPartiallyReleased",
	OrderIsLocked:                 "sap_production_order_general_data.OrderIsLocked",
	OrderIsTechnicallyCompleted:   "sap_production_order_general_data.OrderIsTechnicallyCompleted",
	OrderIsClosed:                 "sap_production_order_general_data.OrderIsClosed",
	OrderIsPartiallyDelivered:     "sap_production_order_general_data.OrderIsPartiallyDelivered",
	OrderIsMarkedForDeletion:      "sap_production_order_general_data.OrderIsMarkedForDeletion",
	OrderIsScheduled:              "sap_production_order_general_data.OrderIsScheduled",
	OrderHasGeneratedOperations:   "sap_production_order_general_data.OrderHasGeneratedOperations",
	MaterialAvailyIsNotChecked:    "sap_production_order_general_data.MaterialAvailyIsNotChecked",
	MfgOrderCreationDate:          "sap_production_order_general_data.MfgOrderCreationDate",
	MfgOrderCreationTime:          "sap_production_order_general_data.MfgOrderCreationTime",
	LastChangeDateTime:            "sap_production_order_general_data.LastChangeDateTime",
	Material:                      "sap_production_order_general_data.Material",
	StorageLocation:               "sap_production_order_general_data.StorageLocation",
	GoodsRecipientName:            "sap_production_order_general_data.GoodsRecipientName",
	UnloadingPointName:            "sap_production_order_general_data.UnloadingPointName",
	MaterialGoodsReceiptDuration:  "sap_production_order_general_data.MaterialGoodsReceiptDuration",
	OrderInternalBillOfOperations: "sap_production_order_general_data.OrderInternalBillOfOperations",
	ProductionPlant:               "sap_production_order_general_data.ProductionPlant",
	Plant:                         "sap_production_order_general_data.Plant",
	MRPArea:                       "sap_production_order_general_data.MRPArea",
	MRPController:                 "sap_production_order_general_data.MRPController",
	ProductionSupervisor:          "sap_production_order_general_data.ProductionSupervisor",
	ProductionVersion:             "sap_production_order_general_data.ProductionVersion",
	PlannedOrder:                  "sap_production_order_general_data.PlannedOrder",
	SalesOrder:                    "sap_production_order_general_data.SalesOrder",
	SalesOrderItem:                "sap_production_order_general_data.SalesOrderItem",
	BasicSchedulingType:           "sap_production_order_general_data.BasicSchedulingType",
	BusinessArea:                  "sap_production_order_general_data.BusinessArea",
	CompanyCode:                   "sap_production_order_general_data.CompanyCode",
	ProfitCenter:                  "sap_production_order_general_data.ProfitCenter",
	FunctionalArea:                "sap_production_order_general_data.FunctionalArea",
	MfgOrderPlannedStartDate:      "sap_production_order_general_data.MfgOrderPlannedStartDate",
	MfgOrderPlannedStartTime:      "sap_production_order_general_data.MfgOrderPlannedStartTime",
	MfgOrderPlannedEndDate:        "sap_production_order_general_data.MfgOrderPlannedEndDate",
	MfgOrderPlannedEndTime:        "sap_production_order_general_data.MfgOrderPlannedEndTime",
	MfgOrderScheduledStartDate:    "sap_production_order_general_data.MfgOrderScheduledStartDate",
	MfgOrderScheduledStartTime:    "sap_production_order_general_data.MfgOrderScheduledStartTime",
	MfgOrderScheduledEndDate:      "sap_production_order_general_data.MfgOrderScheduledEndDate",
	MfgOrderScheduledEndTime:      "sap_production_order_general_data.MfgOrderScheduledEndTime",
	MfgOrderActualReleaseDate:     "sap_production_order_general_data.MfgOrderActualReleaseDate",
	ProductionUnit:                "sap_production_order_general_data.ProductionUnit",
	TotalQuantity:                 "sap_production_order_general_data.TotalQuantity",
	MfgOrderPlannedScrapQty:       "sap_production_order_general_data.MfgOrderPlannedScrapQty",
	MfgOrderConfirmedYieldQty:     "sap_production_order_general_data.MfgOrderConfirmedYieldQty",
	WBSElementExternalID:          "sap_production_order_general_data.WBSElementExternalID",
	OrderLongText:                 "sap_production_order_general_data.OrderLongText",
}

// Generated where

var SapProductionOrderGeneralDatumWhere = struct {
	ManufacturingOrder            whereHelperstring
	ManufacturingOrderCategory    whereHelpernull_String
	ManufacturingOrderType        whereHelpernull_String
	OrderIsCreated                whereHelpernull_String
	OrderIsReleased               whereHelpernull_String
	OrderIsPrinted                whereHelpernull_String
	OrderIsConfirmed              whereHelpernull_String
	OrderIsPartiallyConfirmed     whereHelpernull_String
	OrderIsDelivered              whereHelpernull_String
	OrderIsDeleted                whereHelpernull_String
	OrderIsPreCosted              whereHelpernull_String
	SettlementRuleIsCreated       whereHelpernull_String
	OrderIsPartiallyReleased      whereHelpernull_String
	OrderIsLocked                 whereHelpernull_String
	OrderIsTechnicallyCompleted   whereHelpernull_String
	OrderIsClosed                 whereHelpernull_String
	OrderIsPartiallyDelivered     whereHelpernull_String
	OrderIsMarkedForDeletion      whereHelpernull_String
	OrderIsScheduled              whereHelpernull_String
	OrderHasGeneratedOperations   whereHelpernull_String
	MaterialAvailyIsNotChecked    whereHelpernull_String
	MfgOrderCreationDate          whereHelpernull_String
	MfgOrderCreationTime          whereHelpernull_String
	LastChangeDateTime            whereHelpernull_String
	Material                      whereHelpernull_String
	StorageLocation               whereHelpernull_String
	GoodsRecipientName            whereHelpernull_String
	UnloadingPointName            whereHelpernull_String
	MaterialGoodsReceiptDuration  whereHelpernull_String
	OrderInternalBillOfOperations whereHelpernull_String
	ProductionPlant               whereHelpernull_String
	Plant                         whereHelpernull_String
	MRPArea                       whereHelpernull_String
	MRPController                 whereHelpernull_String
	ProductionSupervisor          whereHelpernull_String
	ProductionVersion             whereHelpernull_String
	PlannedOrder                  whereHelpernull_String
	SalesOrder                    whereHelpernull_String
	SalesOrderItem                whereHelpernull_String
	BasicSchedulingType           whereHelpernull_String
	BusinessArea                  whereHelpernull_String
	CompanyCode                   whereHelpernull_String
	ProfitCenter                  whereHelpernull_String
	FunctionalArea                whereHelpernull_String
	MfgOrderPlannedStartDate      whereHelpernull_String
	MfgOrderPlannedStartTime      whereHelpernull_String
	MfgOrderPlannedEndDate        whereHelpernull_String
	MfgOrderPlannedEndTime        whereHelpernull_String
	MfgOrderScheduledStartDate    whereHelpernull_String
	MfgOrderScheduledStartTime    whereHelpernull_String
	MfgOrderScheduledEndDate      whereHelpernull_String
	MfgOrderScheduledEndTime      whereHelpernull_String
	MfgOrderActualReleaseDate     whereHelpernull_String
	ProductionUnit                whereHelpernull_String
	TotalQuantity                 whereHelpernull_String
	MfgOrderPlannedScrapQty       whereHelpernull_String
	MfgOrderConfirmedYieldQty     whereHelpernull_String
	WBSElementExternalID          whereHelpernull_String
	OrderLongText                 whereHelpernull_String
}{
	ManufacturingOrder:            whereHelperstring{field: "`sap_production_order_general_data`.`ManufacturingOrder`"},
	ManufacturingOrderCategory:    whereHelpernull_String{field: "`sap_production_order_general_data`.`ManufacturingOrderCategory`"},
	ManufacturingOrderType:        whereHelpernull_String{field: "`sap_production_order_general_data`.`ManufacturingOrderType`"},
	OrderIsCreated:                whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsCreated`"},
	OrderIsReleased:               whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsReleased`"},
	OrderIsPrinted:                whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsPrinted`"},
	OrderIsConfirmed:              whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsConfirmed`"},
	OrderIsPartiallyConfirmed:     whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsPartiallyConfirmed`"},
	OrderIsDelivered:              whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsDelivered`"},
	OrderIsDeleted:                whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsDeleted`"},
	OrderIsPreCosted:              whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsPreCosted`"},
	SettlementRuleIsCreated:       whereHelpernull_String{field: "`sap_production_order_general_data`.`SettlementRuleIsCreated`"},
	OrderIsPartiallyReleased:      whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsPartiallyReleased`"},
	OrderIsLocked:                 whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsLocked`"},
	OrderIsTechnicallyCompleted:   whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsTechnicallyCompleted`"},
	OrderIsClosed:                 whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsClosed`"},
	OrderIsPartiallyDelivered:     whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsPartiallyDelivered`"},
	OrderIsMarkedForDeletion:      whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsMarkedForDeletion`"},
	OrderIsScheduled:              whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderIsScheduled`"},
	OrderHasGeneratedOperations:   whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderHasGeneratedOperations`"},
	MaterialAvailyIsNotChecked:    whereHelpernull_String{field: "`sap_production_order_general_data`.`MaterialAvailyIsNotChecked`"},
	MfgOrderCreationDate:          whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderCreationDate`"},
	MfgOrderCreationTime:          whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderCreationTime`"},
	LastChangeDateTime:            whereHelpernull_String{field: "`sap_production_order_general_data`.`LastChangeDateTime`"},
	Material:                      whereHelpernull_String{field: "`sap_production_order_general_data`.`Material`"},
	StorageLocation:               whereHelpernull_String{field: "`sap_production_order_general_data`.`StorageLocation`"},
	GoodsRecipientName:            whereHelpernull_String{field: "`sap_production_order_general_data`.`GoodsRecipientName`"},
	UnloadingPointName:            whereHelpernull_String{field: "`sap_production_order_general_data`.`UnloadingPointName`"},
	MaterialGoodsReceiptDuration:  whereHelpernull_String{field: "`sap_production_order_general_data`.`MaterialGoodsReceiptDuration`"},
	OrderInternalBillOfOperations: whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderInternalBillOfOperations`"},
	ProductionPlant:               whereHelpernull_String{field: "`sap_production_order_general_data`.`ProductionPlant`"},
	Plant:                         whereHelpernull_String{field: "`sap_production_order_general_data`.`Plant`"},
	MRPArea:                       whereHelpernull_String{field: "`sap_production_order_general_data`.`MRPArea`"},
	MRPController:                 whereHelpernull_String{field: "`sap_production_order_general_data`.`MRPController`"},
	ProductionSupervisor:          whereHelpernull_String{field: "`sap_production_order_general_data`.`ProductionSupervisor`"},
	ProductionVersion:             whereHelpernull_String{field: "`sap_production_order_general_data`.`ProductionVersion`"},
	PlannedOrder:                  whereHelpernull_String{field: "`sap_production_order_general_data`.`PlannedOrder`"},
	SalesOrder:                    whereHelpernull_String{field: "`sap_production_order_general_data`.`SalesOrder`"},
	SalesOrderItem:                whereHelpernull_String{field: "`sap_production_order_general_data`.`SalesOrderItem`"},
	BasicSchedulingType:           whereHelpernull_String{field: "`sap_production_order_general_data`.`BasicSchedulingType`"},
	BusinessArea:                  whereHelpernull_String{field: "`sap_production_order_general_data`.`BusinessArea`"},
	CompanyCode:                   whereHelpernull_String{field: "`sap_production_order_general_data`.`CompanyCode`"},
	ProfitCenter:                  whereHelpernull_String{field: "`sap_production_order_general_data`.`ProfitCenter`"},
	FunctionalArea:                whereHelpernull_String{field: "`sap_production_order_general_data`.`FunctionalArea`"},
	MfgOrderPlannedStartDate:      whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderPlannedStartDate`"},
	MfgOrderPlannedStartTime:      whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderPlannedStartTime`"},
	MfgOrderPlannedEndDate:        whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderPlannedEndDate`"},
	MfgOrderPlannedEndTime:        whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderPlannedEndTime`"},
	MfgOrderScheduledStartDate:    whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderScheduledStartDate`"},
	MfgOrderScheduledStartTime:    whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderScheduledStartTime`"},
	MfgOrderScheduledEndDate:      whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderScheduledEndDate`"},
	MfgOrderScheduledEndTime:      whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderScheduledEndTime`"},
	MfgOrderActualReleaseDate:     whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderActualReleaseDate`"},
	ProductionUnit:                whereHelpernull_String{field: "`sap_production_order_general_data`.`ProductionUnit`"},
	TotalQuantity:                 whereHelpernull_String{field: "`sap_production_order_general_data`.`TotalQuantity`"},
	MfgOrderPlannedScrapQty:       whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderPlannedScrapQty`"},
	MfgOrderConfirmedYieldQty:     whereHelpernull_String{field: "`sap_production_order_general_data`.`MfgOrderConfirmedYieldQty`"},
	WBSElementExternalID:          whereHelpernull_String{field: "`sap_production_order_general_data`.`WBSElementExternalID`"},
	OrderLongText:                 whereHelpernull_String{field: "`sap_production_order_general_data`.`OrderLongText`"},
}

// SapProductionOrderGeneralDatumRels is where relationship names are stored.
var SapProductionOrderGeneralDatumRels = struct {
	ManufacturingOrderSapProductionOrderComponentData string
	ManufacturingOrderSapProductionOrderItemData      string
	ManufacturingOrderSapProductionOrderOperationData string
	ManufacturingOrderSapProductionOrderStatusData    string
}{
	ManufacturingOrderSapProductionOrderComponentData: "ManufacturingOrderSapProductionOrderComponentData",
	ManufacturingOrderSapProductionOrderItemData:      "ManufacturingOrderSapProductionOrderItemData",
	ManufacturingOrderSapProductionOrderOperationData: "ManufacturingOrderSapProductionOrderOperationData",
	ManufacturingOrderSapProductionOrderStatusData:    "ManufacturingOrderSapProductionOrderStatusData",
}

// sapProductionOrderGeneralDatumR is where relationships are stored.
type sapProductionOrderGeneralDatumR struct {
	ManufacturingOrderSapProductionOrderComponentData SapProductionOrderComponentDatumSlice `boil:"ManufacturingOrderSapProductionOrderComponentData" json:"ManufacturingOrderSapProductionOrderComponentData" toml:"ManufacturingOrderSapProductionOrderComponentData" yaml:"ManufacturingOrderSapProductionOrderComponentData"`
	ManufacturingOrderSapProductionOrderItemData      SapProductionOrderItemDatumSlice      `boil:"ManufacturingOrderSapProductionOrderItemData" json:"ManufacturingOrderSapProductionOrderItemData" toml:"ManufacturingOrderSapProductionOrderItemData" yaml:"ManufacturingOrderSapProductionOrderItemData"`
	ManufacturingOrderSapProductionOrderOperationData SapProductionOrderOperationDatumSlice `boil:"ManufacturingOrderSapProductionOrderOperationData" json:"ManufacturingOrderSapProductionOrderOperationData" toml:"ManufacturingOrderSapProductionOrderOperationData" yaml:"ManufacturingOrderSapProductionOrderOperationData"`
	ManufacturingOrderSapProductionOrderStatusData    SapProductionOrderStatusDatumSlice    `boil:"ManufacturingOrderSapProductionOrderStatusData" json:"ManufacturingOrderSapProductionOrderStatusData" toml:"ManufacturingOrderSapProductionOrderStatusData" yaml:"ManufacturingOrderSapProductionOrderStatusData"`
}

// NewStruct creates a new relationship struct
func (*sapProductionOrderGeneralDatumR) NewStruct() *sapProductionOrderGeneralDatumR {
	return &sapProductionOrderGeneralDatumR{}
}

// sapProductionOrderGeneralDatumL is where Load methods for each relationship are stored.
type sapProductionOrderGeneralDatumL struct{}

var (
	sapProductionOrderGeneralDatumAllColumns            = []string{"ManufacturingOrder", "ManufacturingOrderCategory", "ManufacturingOrderType", "OrderIsCreated", "OrderIsReleased", "OrderIsPrinted", "OrderIsConfirmed", "OrderIsPartiallyConfirmed", "OrderIsDelivered", "OrderIsDeleted", "OrderIsPreCosted", "SettlementRuleIsCreated", "OrderIsPartiallyReleased", "OrderIsLocked", "OrderIsTechnicallyCompleted", "OrderIsClosed", "OrderIsPartiallyDelivered", "OrderIsMarkedForDeletion", "OrderIsScheduled", "OrderHasGeneratedOperations", "MaterialAvailyIsNotChecked", "MfgOrderCreationDate", "MfgOrderCreationTime", "LastChangeDateTime", "Material", "StorageLocation", "GoodsRecipientName", "UnloadingPointName", "MaterialGoodsReceiptDuration", "OrderInternalBillOfOperations", "ProductionPlant", "Plant", "MRPArea", "MRPController", "ProductionSupervisor", "ProductionVersion", "PlannedOrder", "SalesOrder", "SalesOrderItem", "BasicSchedulingType", "BusinessArea", "CompanyCode", "ProfitCenter", "FunctionalArea", "MfgOrderPlannedStartDate", "MfgOrderPlannedStartTime", "MfgOrderPlannedEndDate", "MfgOrderPlannedEndTime", "MfgOrderScheduledStartDate", "MfgOrderScheduledStartTime", "MfgOrderScheduledEndDate", "MfgOrderScheduledEndTime", "MfgOrderActualReleaseDate", "ProductionUnit", "TotalQuantity", "MfgOrderPlannedScrapQty", "MfgOrderConfirmedYieldQty", "WBSElementExternalID", "OrderLongText"}
	sapProductionOrderGeneralDatumColumnsWithoutDefault = []string{"ManufacturingOrder", "ManufacturingOrderCategory", "ManufacturingOrderType", "OrderIsCreated", "OrderIsReleased", "OrderIsPrinted", "OrderIsConfirmed", "OrderIsPartiallyConfirmed", "OrderIsDelivered", "OrderIsDeleted", "OrderIsPreCosted", "SettlementRuleIsCreated", "OrderIsPartiallyReleased", "OrderIsLocked", "OrderIsTechnicallyCompleted", "OrderIsClosed", "OrderIsPartiallyDelivered", "OrderIsMarkedForDeletion", "OrderIsScheduled", "OrderHasGeneratedOperations", "MaterialAvailyIsNotChecked", "MfgOrderCreationDate", "MfgOrderCreationTime", "LastChangeDateTime", "Material", "StorageLocation", "GoodsRecipientName", "UnloadingPointName", "MaterialGoodsReceiptDuration", "OrderInternalBillOfOperations", "ProductionPlant", "Plant", "MRPArea", "MRPController", "ProductionSupervisor", "ProductionVersion", "PlannedOrder", "SalesOrder", "SalesOrderItem", "BasicSchedulingType", "BusinessArea", "CompanyCode", "ProfitCenter", "FunctionalArea", "MfgOrderPlannedStartDate", "MfgOrderPlannedStartTime", "MfgOrderPlannedEndDate", "MfgOrderPlannedEndTime", "MfgOrderScheduledStartDate", "MfgOrderScheduledStartTime", "MfgOrderScheduledEndDate", "MfgOrderScheduledEndTime", "MfgOrderActualReleaseDate", "ProductionUnit", "TotalQuantity", "MfgOrderPlannedScrapQty", "MfgOrderConfirmedYieldQty", "WBSElementExternalID", "OrderLongText"}
	sapProductionOrderGeneralDatumColumnsWithDefault    = []string{}
	sapProductionOrderGeneralDatumPrimaryKeyColumns     = []string{"ManufacturingOrder"}
	sapProductionOrderGeneralDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionOrderGeneralDatumSlice is an alias for a slice of pointers to SapProductionOrderGeneralDatum.
	// This should almost always be used instead of []SapProductionOrderGeneralDatum.
	SapProductionOrderGeneralDatumSlice []*SapProductionOrderGeneralDatum
	// SapProductionOrderGeneralDatumHook is the signature for custom SapProductionOrderGeneralDatum hook methods
	SapProductionOrderGeneralDatumHook func(context.Context, boil.ContextExecutor, *SapProductionOrderGeneralDatum) error

	sapProductionOrderGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionOrderGeneralDatumType                 = reflect.TypeOf(&SapProductionOrderGeneralDatum{})
	sapProductionOrderGeneralDatumMapping              = queries.MakeStructMapping(sapProductionOrderGeneralDatumType)
	sapProductionOrderGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, sapProductionOrderGeneralDatumPrimaryKeyColumns)
	sapProductionOrderGeneralDatumInsertCacheMut       sync.RWMutex
	sapProductionOrderGeneralDatumInsertCache          = make(map[string]insertCache)
	sapProductionOrderGeneralDatumUpdateCacheMut       sync.RWMutex
	sapProductionOrderGeneralDatumUpdateCache          = make(map[string]updateCache)
	sapProductionOrderGeneralDatumUpsertCacheMut       sync.RWMutex
	sapProductionOrderGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionOrderGeneralDatumAfterSelectHooks []SapProductionOrderGeneralDatumHook

var sapProductionOrderGeneralDatumBeforeInsertHooks []SapProductionOrderGeneralDatumHook
var sapProductionOrderGeneralDatumAfterInsertHooks []SapProductionOrderGeneralDatumHook

var sapProductionOrderGeneralDatumBeforeUpdateHooks []SapProductionOrderGeneralDatumHook
var sapProductionOrderGeneralDatumAfterUpdateHooks []SapProductionOrderGeneralDatumHook

var sapProductionOrderGeneralDatumBeforeDeleteHooks []SapProductionOrderGeneralDatumHook
var sapProductionOrderGeneralDatumAfterDeleteHooks []SapProductionOrderGeneralDatumHook

var sapProductionOrderGeneralDatumBeforeUpsertHooks []SapProductionOrderGeneralDatumHook
var sapProductionOrderGeneralDatumAfterUpsertHooks []SapProductionOrderGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionOrderGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionOrderGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionOrderGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionOrderGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionOrderGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionOrderGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionOrderGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionOrderGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionOrderGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionOrderGeneralDatumHook registers your hook function for all future operations.
func AddSapProductionOrderGeneralDatumHook(hookPoint boil.HookPoint, sapProductionOrderGeneralDatumHook SapProductionOrderGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionOrderGeneralDatumAfterSelectHooks = append(sapProductionOrderGeneralDatumAfterSelectHooks, sapProductionOrderGeneralDatumHook)
	case boil.BeforeInsertHook:
		sapProductionOrderGeneralDatumBeforeInsertHooks = append(sapProductionOrderGeneralDatumBeforeInsertHooks, sapProductionOrderGeneralDatumHook)
	case boil.AfterInsertHook:
		sapProductionOrderGeneralDatumAfterInsertHooks = append(sapProductionOrderGeneralDatumAfterInsertHooks, sapProductionOrderGeneralDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionOrderGeneralDatumBeforeUpdateHooks = append(sapProductionOrderGeneralDatumBeforeUpdateHooks, sapProductionOrderGeneralDatumHook)
	case boil.AfterUpdateHook:
		sapProductionOrderGeneralDatumAfterUpdateHooks = append(sapProductionOrderGeneralDatumAfterUpdateHooks, sapProductionOrderGeneralDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionOrderGeneralDatumBeforeDeleteHooks = append(sapProductionOrderGeneralDatumBeforeDeleteHooks, sapProductionOrderGeneralDatumHook)
	case boil.AfterDeleteHook:
		sapProductionOrderGeneralDatumAfterDeleteHooks = append(sapProductionOrderGeneralDatumAfterDeleteHooks, sapProductionOrderGeneralDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionOrderGeneralDatumBeforeUpsertHooks = append(sapProductionOrderGeneralDatumBeforeUpsertHooks, sapProductionOrderGeneralDatumHook)
	case boil.AfterUpsertHook:
		sapProductionOrderGeneralDatumAfterUpsertHooks = append(sapProductionOrderGeneralDatumAfterUpsertHooks, sapProductionOrderGeneralDatumHook)
	}
}

// One returns a single sapProductionOrderGeneralDatum record from the query.
func (q sapProductionOrderGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionOrderGeneralDatum, error) {
	o := &SapProductionOrderGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_order_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionOrderGeneralDatum records from the query.
func (q sapProductionOrderGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionOrderGeneralDatumSlice, error) {
	var o []*SapProductionOrderGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionOrderGeneralDatum slice")
	}

	if len(sapProductionOrderGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionOrderGeneralDatum records in the query.
func (q sapProductionOrderGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_order_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionOrderGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_order_general_data exists")
	}

	return count > 0, nil
}

// ManufacturingOrderSapProductionOrderComponentData retrieves all the sap_production_order_component_datum's SapProductionOrderComponentData with an executor via ManufacturingOrder column.
func (o *SapProductionOrderGeneralDatum) ManufacturingOrderSapProductionOrderComponentData(mods ...qm.QueryMod) sapProductionOrderComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_production_order_component_data`.`ManufacturingOrder`=?", o.ManufacturingOrder),
	)

	query := SapProductionOrderComponentData(queryMods...)
	queries.SetFrom(query.Query, "`sap_production_order_component_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_production_order_component_data`.*"})
	}

	return query
}

// ManufacturingOrderSapProductionOrderItemData retrieves all the sap_production_order_item_datum's SapProductionOrderItemData with an executor via ManufacturingOrder column.
func (o *SapProductionOrderGeneralDatum) ManufacturingOrderSapProductionOrderItemData(mods ...qm.QueryMod) sapProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_production_order_item_data`.`ManufacturingOrder`=?", o.ManufacturingOrder),
	)

	query := SapProductionOrderItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_production_order_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_production_order_item_data`.*"})
	}

	return query
}

// ManufacturingOrderSapProductionOrderOperationData retrieves all the sap_production_order_operation_datum's SapProductionOrderOperationData with an executor via ManufacturingOrder column.
func (o *SapProductionOrderGeneralDatum) ManufacturingOrderSapProductionOrderOperationData(mods ...qm.QueryMod) sapProductionOrderOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_production_order_operation_data`.`ManufacturingOrder`=?", o.ManufacturingOrder),
	)

	query := SapProductionOrderOperationData(queryMods...)
	queries.SetFrom(query.Query, "`sap_production_order_operation_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_production_order_operation_data`.*"})
	}

	return query
}

// ManufacturingOrderSapProductionOrderStatusData retrieves all the sap_production_order_status_datum's SapProductionOrderStatusData with an executor via ManufacturingOrder column.
func (o *SapProductionOrderGeneralDatum) ManufacturingOrderSapProductionOrderStatusData(mods ...qm.QueryMod) sapProductionOrderStatusDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_production_order_status_data`.`ManufacturingOrder`=?", o.ManufacturingOrder),
	)

	query := SapProductionOrderStatusData(queryMods...)
	queries.SetFrom(query.Query, "`sap_production_order_status_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_production_order_status_data`.*"})
	}

	return query
}

// LoadManufacturingOrderSapProductionOrderComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProductionOrderGeneralDatumL) LoadManufacturingOrderSapProductionOrderComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderGeneralDatum
	var object *SapProductionOrderGeneralDatum

	if singular {
		object = maybeSapProductionOrderGeneralDatum.(*SapProductionOrderGeneralDatum)
	} else {
		slice = *maybeSapProductionOrderGeneralDatum.(*[]*SapProductionOrderGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderGeneralDatumR{}
		}
		args = append(args, object.ManufacturingOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_component_data`),
		qm.WhereIn(`sap_production_order_component_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_production_order_component_data")
	}

	var resultSlice []*SapProductionOrderComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_production_order_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_production_order_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_component_data")
	}

	if len(sapProductionOrderComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ManufacturingOrderSapProductionOrderComponentData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProductionOrderComponentDatumR{}
			}
			foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderComponentData = append(local.R.ManufacturingOrderSapProductionOrderComponentData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProductionOrderComponentDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadManufacturingOrderSapProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProductionOrderGeneralDatumL) LoadManufacturingOrderSapProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderGeneralDatum
	var object *SapProductionOrderGeneralDatum

	if singular {
		object = maybeSapProductionOrderGeneralDatum.(*SapProductionOrderGeneralDatum)
	} else {
		slice = *maybeSapProductionOrderGeneralDatum.(*[]*SapProductionOrderGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderGeneralDatumR{}
		}
		args = append(args, object.ManufacturingOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_item_data`),
		qm.WhereIn(`sap_production_order_item_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_production_order_item_data")
	}

	var resultSlice []*SapProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_item_data")
	}

	if len(sapProductionOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ManufacturingOrderSapProductionOrderItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProductionOrderItemDatumR{}
			}
			foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderItemData = append(local.R.ManufacturingOrderSapProductionOrderItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProductionOrderItemDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadManufacturingOrderSapProductionOrderOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProductionOrderGeneralDatumL) LoadManufacturingOrderSapProductionOrderOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderGeneralDatum
	var object *SapProductionOrderGeneralDatum

	if singular {
		object = maybeSapProductionOrderGeneralDatum.(*SapProductionOrderGeneralDatum)
	} else {
		slice = *maybeSapProductionOrderGeneralDatum.(*[]*SapProductionOrderGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderGeneralDatumR{}
		}
		args = append(args, object.ManufacturingOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_operation_data`),
		qm.WhereIn(`sap_production_order_operation_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_production_order_operation_data")
	}

	var resultSlice []*SapProductionOrderOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_production_order_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_production_order_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_operation_data")
	}

	if len(sapProductionOrderOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ManufacturingOrderSapProductionOrderOperationData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProductionOrderOperationDatumR{}
			}
			foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderOperationData = append(local.R.ManufacturingOrderSapProductionOrderOperationData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProductionOrderOperationDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadManufacturingOrderSapProductionOrderStatusData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProductionOrderGeneralDatumL) LoadManufacturingOrderSapProductionOrderStatusData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderGeneralDatum
	var object *SapProductionOrderGeneralDatum

	if singular {
		object = maybeSapProductionOrderGeneralDatum.(*SapProductionOrderGeneralDatum)
	} else {
		slice = *maybeSapProductionOrderGeneralDatum.(*[]*SapProductionOrderGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderGeneralDatumR{}
		}
		args = append(args, object.ManufacturingOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_status_data`),
		qm.WhereIn(`sap_production_order_status_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_production_order_status_data")
	}

	var resultSlice []*SapProductionOrderStatusDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_production_order_status_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_production_order_status_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_status_data")
	}

	if len(sapProductionOrderStatusDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ManufacturingOrderSapProductionOrderStatusData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProductionOrderStatusDatumR{}
			}
			foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderStatusData = append(local.R.ManufacturingOrderSapProductionOrderStatusData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProductionOrderStatusDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// AddManufacturingOrderSapProductionOrderComponentData adds the given related objects to the existing relationships
// of the sap_production_order_general_datum, optionally inserting them as new records.
// Appends related to o.R.ManufacturingOrderSapProductionOrderComponentData.
// Sets related.R.ManufacturingOrderSapProductionOrderGeneralDatum appropriately.
func (o *SapProductionOrderGeneralDatum) AddManufacturingOrderSapProductionOrderComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProductionOrderComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturingOrder = o.ManufacturingOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_production_order_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
				strmangle.WhereClause("`", "`", 0, sapProductionOrderComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ManufacturingOrder, rel.ManufacturingOrder, rel.ManufacturingOrderSequence, rel.ManufacturingOrderOperation, rel.OrderInternalBillOfOperations, rel.BOMItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturingOrder = o.ManufacturingOrder
		}
	}

	if o.R == nil {
		o.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderComponentData: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderComponentData = append(o.R.ManufacturingOrderSapProductionOrderComponentData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProductionOrderComponentDatumR{
				ManufacturingOrderSapProductionOrderGeneralDatum: o,
			}
		} else {
			rel.R.ManufacturingOrderSapProductionOrderGeneralDatum = o
		}
	}
	return nil
}

// AddManufacturingOrderSapProductionOrderItemData adds the given related objects to the existing relationships
// of the sap_production_order_general_datum, optionally inserting them as new records.
// Appends related to o.R.ManufacturingOrderSapProductionOrderItemData.
// Sets related.R.ManufacturingOrderSapProductionOrderGeneralDatum appropriately.
func (o *SapProductionOrderGeneralDatum) AddManufacturingOrderSapProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturingOrder = o.ManufacturingOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
				strmangle.WhereClause("`", "`", 0, sapProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ManufacturingOrder, rel.ManufacturingOrder, rel.ManufacturingOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturingOrder = o.ManufacturingOrder
		}
	}

	if o.R == nil {
		o.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderItemData: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderItemData = append(o.R.ManufacturingOrderSapProductionOrderItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProductionOrderItemDatumR{
				ManufacturingOrderSapProductionOrderGeneralDatum: o,
			}
		} else {
			rel.R.ManufacturingOrderSapProductionOrderGeneralDatum = o
		}
	}
	return nil
}

// AddManufacturingOrderSapProductionOrderOperationData adds the given related objects to the existing relationships
// of the sap_production_order_general_datum, optionally inserting them as new records.
// Appends related to o.R.ManufacturingOrderSapProductionOrderOperationData.
// Sets related.R.ManufacturingOrderSapProductionOrderGeneralDatum appropriately.
func (o *SapProductionOrderGeneralDatum) AddManufacturingOrderSapProductionOrderOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProductionOrderOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturingOrder = o.ManufacturingOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_production_order_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
				strmangle.WhereClause("`", "`", 0, sapProductionOrderOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ManufacturingOrder, rel.ManufacturingOrder, rel.ManufacturingOrderSequence, rel.OrderInternalBillOfOperations, rel.OrderIntBillOfOperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturingOrder = o.ManufacturingOrder
		}
	}

	if o.R == nil {
		o.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderOperationData: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderOperationData = append(o.R.ManufacturingOrderSapProductionOrderOperationData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProductionOrderOperationDatumR{
				ManufacturingOrderSapProductionOrderGeneralDatum: o,
			}
		} else {
			rel.R.ManufacturingOrderSapProductionOrderGeneralDatum = o
		}
	}
	return nil
}

// AddManufacturingOrderSapProductionOrderStatusData adds the given related objects to the existing relationships
// of the sap_production_order_general_datum, optionally inserting them as new records.
// Appends related to o.R.ManufacturingOrderSapProductionOrderStatusData.
// Sets related.R.ManufacturingOrderSapProductionOrderGeneralDatum appropriately.
func (o *SapProductionOrderGeneralDatum) AddManufacturingOrderSapProductionOrderStatusData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProductionOrderStatusDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturingOrder = o.ManufacturingOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_production_order_status_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
				strmangle.WhereClause("`", "`", 0, sapProductionOrderStatusDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ManufacturingOrder, rel.ManufacturingOrder, rel.StatusCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturingOrder = o.ManufacturingOrder
		}
	}

	if o.R == nil {
		o.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderStatusData: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderStatusData = append(o.R.ManufacturingOrderSapProductionOrderStatusData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProductionOrderStatusDatumR{
				ManufacturingOrderSapProductionOrderGeneralDatum: o,
			}
		} else {
			rel.R.ManufacturingOrderSapProductionOrderGeneralDatum = o
		}
	}
	return nil
}

// SapProductionOrderGeneralData retrieves all the records using an executor.
func SapProductionOrderGeneralData(mods ...qm.QueryMod) sapProductionOrderGeneralDatumQuery {
	mods = append(mods, qm.From("`sap_production_order_general_data`"))
	return sapProductionOrderGeneralDatumQuery{NewQuery(mods...)}
}

// FindSapProductionOrderGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionOrderGeneralDatum(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, selectCols ...string) (*SapProductionOrderGeneralDatum, error) {
	sapProductionOrderGeneralDatumObj := &SapProductionOrderGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_order_general_data` where `ManufacturingOrder`=?", sel,
	)

	q := queries.Raw(query, manufacturingOrder)

	err := q.Bind(ctx, exec, sapProductionOrderGeneralDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_order_general_data")
	}

	if err = sapProductionOrderGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionOrderGeneralDatumObj, err
	}

	return sapProductionOrderGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionOrderGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionOrderGeneralDatumInsertCacheMut.RLock()
	cache, cached := sapProductionOrderGeneralDatumInsertCache[key]
	sapProductionOrderGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionOrderGeneralDatumAllColumns,
			sapProductionOrderGeneralDatumColumnsWithDefault,
			sapProductionOrderGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_order_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_order_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_order_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionOrderGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_order_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ManufacturingOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_general_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderGeneralDatumInsertCacheMut.Lock()
		sapProductionOrderGeneralDatumInsertCache[key] = cache
		sapProductionOrderGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionOrderGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionOrderGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionOrderGeneralDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionOrderGeneralDatumUpdateCache[key]
	sapProductionOrderGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionOrderGeneralDatumAllColumns,
			sapProductionOrderGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_order_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_order_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionOrderGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, append(wl, sapProductionOrderGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_order_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_order_general_data")
	}

	if !cached {
		sapProductionOrderGeneralDatumUpdateCacheMut.Lock()
		sapProductionOrderGeneralDatumUpdateCache[key] = cache
		sapProductionOrderGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionOrderGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_order_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_order_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionOrderGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_order_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionOrderGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionOrderGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionOrderGeneralDatumUniqueColumns = []string{
	"ManufacturingOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionOrderGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionOrderGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionOrderGeneralDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionOrderGeneralDatumUpsertCache[key]
	sapProductionOrderGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionOrderGeneralDatumAllColumns,
			sapProductionOrderGeneralDatumColumnsWithDefault,
			sapProductionOrderGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionOrderGeneralDatumAllColumns,
			sapProductionOrderGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_order_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_order_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_order_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_order_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionOrderGeneralDatumType, sapProductionOrderGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_order_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_general_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderGeneralDatumUpsertCacheMut.Lock()
		sapProductionOrderGeneralDatumUpsertCache[key] = cache
		sapProductionOrderGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionOrderGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionOrderGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionOrderGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionOrderGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_order_general_data` WHERE `ManufacturingOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_order_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_order_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionOrderGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionOrderGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_order_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionOrderGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionOrderGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_order_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionOrderGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_general_data")
	}

	if len(sapProductionOrderGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionOrderGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionOrderGeneralDatum(ctx, exec, o.ManufacturingOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionOrderGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionOrderGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_order_general_data`.* FROM `sap_production_order_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionOrderGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionOrderGeneralDatumExists checks if the SapProductionOrderGeneralDatum row exists.
func SapProductionOrderGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_order_general_data` where `ManufacturingOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, manufacturingOrder)
	}
	row := exec.QueryRowContext(ctx, sql, manufacturingOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_order_general_data exists")
	}

	return exists, nil
}
