// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesSchedulingAgreementHeaderDatum is an object representing the database table.
type SapSalesSchedulingAgreementHeaderDatum struct {
	SalesSchedulingAgreement      string      `boil:"SalesSchedulingAgreement" json:"SalesSchedulingAgreement" toml:"SalesSchedulingAgreement" yaml:"SalesSchedulingAgreement"`
	SalesSchedgAgrmtType          null.String `boil:"SalesSchedgAgrmtType" json:"SalesSchedgAgrmtType,omitempty" toml:"SalesSchedgAgrmtType" yaml:"SalesSchedgAgrmtType,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	SalesOrganization             null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel           null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision          null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                    null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                   null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SoldToParty                   null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	SalesSchedgAgrmtDate          null.String `boil:"SalesSchedgAgrmtDate" json:"SalesSchedgAgrmtDate,omitempty" toml:"SalesSchedgAgrmtDate" yaml:"SalesSchedgAgrmtDate,omitempty"`
	SDDocumentReason              null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PurchaseOrderByCustomer       null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderType     null.String `boil:"CustomerPurchaseOrderType" json:"CustomerPurchaseOrderType,omitempty" toml:"CustomerPurchaseOrderType" yaml:"CustomerPurchaseOrderType,omitempty"`
	CustomerPurchaseOrderDate     null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	SalesDistrict                 null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	TotalNetAmount                null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency           null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingDate                   null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	ShippingType                  null.String `boil:"ShippingType" json:"ShippingType,omitempty" toml:"ShippingType" yaml:"ShippingType,omitempty"`
	ShippingCondition             null.String `boil:"ShippingCondition" json:"ShippingCondition,omitempty" toml:"ShippingCondition" yaml:"ShippingCondition,omitempty"`
	DeliveryBlockReason           null.String `boil:"DeliveryBlockReason" json:"DeliveryBlockReason,omitempty" toml:"DeliveryBlockReason" yaml:"DeliveryBlockReason,omitempty"`
	DelivSchedTypeMRPRlvnceCode   null.String `boil:"DelivSchedTypeMRPRlvnceCode" json:"DelivSchedTypeMRPRlvnceCode,omitempty" toml:"DelivSchedTypeMRPRlvnceCode" yaml:"DelivSchedTypeMRPRlvnceCode,omitempty"`
	AgrmtValdtyStartDate          null.String `boil:"AgrmtValdtyStartDate" json:"AgrmtValdtyStartDate,omitempty" toml:"AgrmtValdtyStartDate" yaml:"AgrmtValdtyStartDate,omitempty"`
	AgrmtValdtyEndDate            null.String `boil:"AgrmtValdtyEndDate" json:"AgrmtValdtyEndDate,omitempty" toml:"AgrmtValdtyEndDate" yaml:"AgrmtValdtyEndDate,omitempty"`
	HeaderBillingBlockReason      null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	CustomerPaymentTerms          null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                 null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	OverallSDProcessStatus        null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	OverallSDDocumentRejectionSts null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`
	TotalBlockStatus              null.String `boil:"TotalBlockStatus" json:"TotalBlockStatus,omitempty" toml:"TotalBlockStatus" yaml:"TotalBlockStatus,omitempty"`
	OverallDeliveryStatus         null.String `boil:"OverallDeliveryStatus" json:"OverallDeliveryStatus,omitempty" toml:"OverallDeliveryStatus" yaml:"OverallDeliveryStatus,omitempty"`
	OverallDeliveryBlockStatus    null.String `boil:"OverallDeliveryBlockStatus" json:"OverallDeliveryBlockStatus,omitempty" toml:"OverallDeliveryBlockStatus" yaml:"OverallDeliveryBlockStatus,omitempty"`
	OverallBillingBlockStatus     null.String `boil:"OverallBillingBlockStatus" json:"OverallBillingBlockStatus,omitempty" toml:"OverallBillingBlockStatus" yaml:"OverallBillingBlockStatus,omitempty"`
	TotalCreditCheckStatus        null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`

	R *sapSalesSchedulingAgreementHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesSchedulingAgreementHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesSchedulingAgreementHeaderDatumColumns = struct {
	SalesSchedulingAgreement      string
	SalesSchedgAgrmtType          string
	CreationDate                  string
	LastChangeDate                string
	SalesOrganization             string
	DistributionChannel           string
	OrganizationDivision          string
	SalesGroup                    string
	SalesOffice                   string
	SoldToParty                   string
	SalesSchedgAgrmtDate          string
	SDDocumentReason              string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderType     string
	CustomerPurchaseOrderDate     string
	SalesDistrict                 string
	TotalNetAmount                string
	TransactionCurrency           string
	PricingDate                   string
	ShippingType                  string
	ShippingCondition             string
	DeliveryBlockReason           string
	DelivSchedTypeMRPRlvnceCode   string
	AgrmtValdtyStartDate          string
	AgrmtValdtyEndDate            string
	HeaderBillingBlockReason      string
	CustomerPaymentTerms          string
	PaymentMethod                 string
	OverallSDProcessStatus        string
	OverallSDDocumentRejectionSts string
	TotalBlockStatus              string
	OverallDeliveryStatus         string
	OverallDeliveryBlockStatus    string
	OverallBillingBlockStatus     string
	TotalCreditCheckStatus        string
}{
	SalesSchedulingAgreement:      "SalesSchedulingAgreement",
	SalesSchedgAgrmtType:          "SalesSchedgAgrmtType",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	SalesOrganization:             "SalesOrganization",
	DistributionChannel:           "DistributionChannel",
	OrganizationDivision:          "OrganizationDivision",
	SalesGroup:                    "SalesGroup",
	SalesOffice:                   "SalesOffice",
	SoldToParty:                   "SoldToParty",
	SalesSchedgAgrmtDate:          "SalesSchedgAgrmtDate",
	SDDocumentReason:              "SDDocumentReason",
	PurchaseOrderByCustomer:       "PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:     "CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:     "CustomerPurchaseOrderDate",
	SalesDistrict:                 "SalesDistrict",
	TotalNetAmount:                "TotalNetAmount",
	TransactionCurrency:           "TransactionCurrency",
	PricingDate:                   "PricingDate",
	ShippingType:                  "ShippingType",
	ShippingCondition:             "ShippingCondition",
	DeliveryBlockReason:           "DeliveryBlockReason",
	DelivSchedTypeMRPRlvnceCode:   "DelivSchedTypeMRPRlvnceCode",
	AgrmtValdtyStartDate:          "AgrmtValdtyStartDate",
	AgrmtValdtyEndDate:            "AgrmtValdtyEndDate",
	HeaderBillingBlockReason:      "HeaderBillingBlockReason",
	CustomerPaymentTerms:          "CustomerPaymentTerms",
	PaymentMethod:                 "PaymentMethod",
	OverallSDProcessStatus:        "OverallSDProcessStatus",
	OverallSDDocumentRejectionSts: "OverallSDDocumentRejectionSts",
	TotalBlockStatus:              "TotalBlockStatus",
	OverallDeliveryStatus:         "OverallDeliveryStatus",
	OverallDeliveryBlockStatus:    "OverallDeliveryBlockStatus",
	OverallBillingBlockStatus:     "OverallBillingBlockStatus",
	TotalCreditCheckStatus:        "TotalCreditCheckStatus",
}

var SapSalesSchedulingAgreementHeaderDatumTableColumns = struct {
	SalesSchedulingAgreement      string
	SalesSchedgAgrmtType          string
	CreationDate                  string
	LastChangeDate                string
	SalesOrganization             string
	DistributionChannel           string
	OrganizationDivision          string
	SalesGroup                    string
	SalesOffice                   string
	SoldToParty                   string
	SalesSchedgAgrmtDate          string
	SDDocumentReason              string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderType     string
	CustomerPurchaseOrderDate     string
	SalesDistrict                 string
	TotalNetAmount                string
	TransactionCurrency           string
	PricingDate                   string
	ShippingType                  string
	ShippingCondition             string
	DeliveryBlockReason           string
	DelivSchedTypeMRPRlvnceCode   string
	AgrmtValdtyStartDate          string
	AgrmtValdtyEndDate            string
	HeaderBillingBlockReason      string
	CustomerPaymentTerms          string
	PaymentMethod                 string
	OverallSDProcessStatus        string
	OverallSDDocumentRejectionSts string
	TotalBlockStatus              string
	OverallDeliveryStatus         string
	OverallDeliveryBlockStatus    string
	OverallBillingBlockStatus     string
	TotalCreditCheckStatus        string
}{
	SalesSchedulingAgreement:      "sap_sales_scheduling_agreement_header_data.SalesSchedulingAgreement",
	SalesSchedgAgrmtType:          "sap_sales_scheduling_agreement_header_data.SalesSchedgAgrmtType",
	CreationDate:                  "sap_sales_scheduling_agreement_header_data.CreationDate",
	LastChangeDate:                "sap_sales_scheduling_agreement_header_data.LastChangeDate",
	SalesOrganization:             "sap_sales_scheduling_agreement_header_data.SalesOrganization",
	DistributionChannel:           "sap_sales_scheduling_agreement_header_data.DistributionChannel",
	OrganizationDivision:          "sap_sales_scheduling_agreement_header_data.OrganizationDivision",
	SalesGroup:                    "sap_sales_scheduling_agreement_header_data.SalesGroup",
	SalesOffice:                   "sap_sales_scheduling_agreement_header_data.SalesOffice",
	SoldToParty:                   "sap_sales_scheduling_agreement_header_data.SoldToParty",
	SalesSchedgAgrmtDate:          "sap_sales_scheduling_agreement_header_data.SalesSchedgAgrmtDate",
	SDDocumentReason:              "sap_sales_scheduling_agreement_header_data.SDDocumentReason",
	PurchaseOrderByCustomer:       "sap_sales_scheduling_agreement_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:     "sap_sales_scheduling_agreement_header_data.CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:     "sap_sales_scheduling_agreement_header_data.CustomerPurchaseOrderDate",
	SalesDistrict:                 "sap_sales_scheduling_agreement_header_data.SalesDistrict",
	TotalNetAmount:                "sap_sales_scheduling_agreement_header_data.TotalNetAmount",
	TransactionCurrency:           "sap_sales_scheduling_agreement_header_data.TransactionCurrency",
	PricingDate:                   "sap_sales_scheduling_agreement_header_data.PricingDate",
	ShippingType:                  "sap_sales_scheduling_agreement_header_data.ShippingType",
	ShippingCondition:             "sap_sales_scheduling_agreement_header_data.ShippingCondition",
	DeliveryBlockReason:           "sap_sales_scheduling_agreement_header_data.DeliveryBlockReason",
	DelivSchedTypeMRPRlvnceCode:   "sap_sales_scheduling_agreement_header_data.DelivSchedTypeMRPRlvnceCode",
	AgrmtValdtyStartDate:          "sap_sales_scheduling_agreement_header_data.AgrmtValdtyStartDate",
	AgrmtValdtyEndDate:            "sap_sales_scheduling_agreement_header_data.AgrmtValdtyEndDate",
	HeaderBillingBlockReason:      "sap_sales_scheduling_agreement_header_data.HeaderBillingBlockReason",
	CustomerPaymentTerms:          "sap_sales_scheduling_agreement_header_data.CustomerPaymentTerms",
	PaymentMethod:                 "sap_sales_scheduling_agreement_header_data.PaymentMethod",
	OverallSDProcessStatus:        "sap_sales_scheduling_agreement_header_data.OverallSDProcessStatus",
	OverallSDDocumentRejectionSts: "sap_sales_scheduling_agreement_header_data.OverallSDDocumentRejectionSts",
	TotalBlockStatus:              "sap_sales_scheduling_agreement_header_data.TotalBlockStatus",
	OverallDeliveryStatus:         "sap_sales_scheduling_agreement_header_data.OverallDeliveryStatus",
	OverallDeliveryBlockStatus:    "sap_sales_scheduling_agreement_header_data.OverallDeliveryBlockStatus",
	OverallBillingBlockStatus:     "sap_sales_scheduling_agreement_header_data.OverallBillingBlockStatus",
	TotalCreditCheckStatus:        "sap_sales_scheduling_agreement_header_data.TotalCreditCheckStatus",
}

// Generated where

var SapSalesSchedulingAgreementHeaderDatumWhere = struct {
	SalesSchedulingAgreement      whereHelperstring
	SalesSchedgAgrmtType          whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	SalesOrganization             whereHelpernull_String
	DistributionChannel           whereHelpernull_String
	OrganizationDivision          whereHelpernull_String
	SalesGroup                    whereHelpernull_String
	SalesOffice                   whereHelpernull_String
	SoldToParty                   whereHelpernull_String
	SalesSchedgAgrmtDate          whereHelpernull_String
	SDDocumentReason              whereHelpernull_String
	PurchaseOrderByCustomer       whereHelpernull_String
	CustomerPurchaseOrderType     whereHelpernull_String
	CustomerPurchaseOrderDate     whereHelpernull_String
	SalesDistrict                 whereHelpernull_String
	TotalNetAmount                whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	PricingDate                   whereHelpernull_String
	ShippingType                  whereHelpernull_String
	ShippingCondition             whereHelpernull_String
	DeliveryBlockReason           whereHelpernull_String
	DelivSchedTypeMRPRlvnceCode   whereHelpernull_String
	AgrmtValdtyStartDate          whereHelpernull_String
	AgrmtValdtyEndDate            whereHelpernull_String
	HeaderBillingBlockReason      whereHelpernull_String
	CustomerPaymentTerms          whereHelpernull_String
	PaymentMethod                 whereHelpernull_String
	OverallSDProcessStatus        whereHelpernull_String
	OverallSDDocumentRejectionSts whereHelpernull_String
	TotalBlockStatus              whereHelpernull_String
	OverallDeliveryStatus         whereHelpernull_String
	OverallDeliveryBlockStatus    whereHelpernull_String
	OverallBillingBlockStatus     whereHelpernull_String
	TotalCreditCheckStatus        whereHelpernull_String
}{
	SalesSchedulingAgreement:      whereHelperstring{field: "`sap_sales_scheduling_agreement_header_data`.`SalesSchedulingAgreement`"},
	SalesSchedgAgrmtType:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SalesSchedgAgrmtType`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`LastChangeDate`"},
	SalesOrganization:             whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SalesOrganization`"},
	DistributionChannel:           whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`DistributionChannel`"},
	OrganizationDivision:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`OrganizationDivision`"},
	SalesGroup:                    whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SalesGroup`"},
	SalesOffice:                   whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SalesOffice`"},
	SoldToParty:                   whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SoldToParty`"},
	SalesSchedgAgrmtDate:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SalesSchedgAgrmtDate`"},
	SDDocumentReason:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SDDocumentReason`"},
	PurchaseOrderByCustomer:       whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderType:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`CustomerPurchaseOrderType`"},
	CustomerPurchaseOrderDate:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`CustomerPurchaseOrderDate`"},
	SalesDistrict:                 whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`SalesDistrict`"},
	TotalNetAmount:                whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`TotalNetAmount`"},
	TransactionCurrency:           whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`TransactionCurrency`"},
	PricingDate:                   whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`PricingDate`"},
	ShippingType:                  whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`ShippingType`"},
	ShippingCondition:             whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`ShippingCondition`"},
	DeliveryBlockReason:           whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`DeliveryBlockReason`"},
	DelivSchedTypeMRPRlvnceCode:   whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`DelivSchedTypeMRPRlvnceCode`"},
	AgrmtValdtyStartDate:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`AgrmtValdtyStartDate`"},
	AgrmtValdtyEndDate:            whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`AgrmtValdtyEndDate`"},
	HeaderBillingBlockReason:      whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`HeaderBillingBlockReason`"},
	CustomerPaymentTerms:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                 whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`PaymentMethod`"},
	OverallSDProcessStatus:        whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`OverallSDProcessStatus`"},
	OverallSDDocumentRejectionSts: whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`OverallSDDocumentRejectionSts`"},
	TotalBlockStatus:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`TotalBlockStatus`"},
	OverallDeliveryStatus:         whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`OverallDeliveryStatus`"},
	OverallDeliveryBlockStatus:    whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`OverallDeliveryBlockStatus`"},
	OverallBillingBlockStatus:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`OverallBillingBlockStatus`"},
	TotalCreditCheckStatus:        whereHelpernull_String{field: "`sap_sales_scheduling_agreement_header_data`.`TotalCreditCheckStatus`"},
}

// SapSalesSchedulingAgreementHeaderDatumRels is where relationship names are stored.
var SapSalesSchedulingAgreementHeaderDatumRels = struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemData                 string
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData string
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData   string
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData     string
	SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData              string
}{
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemData:                 "SalesSchedulingAgreementSapSalesSchedulingAgreementItemData",
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData: "SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData",
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData:   "SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData",
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData:     "SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData",
	SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData:              "SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData",
}

// sapSalesSchedulingAgreementHeaderDatumR is where relationships are stored.
type sapSalesSchedulingAgreementHeaderDatumR struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemData                 SapSalesSchedulingAgreementItemDatumSlice                 `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemData" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemData" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemData" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemData"`
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData SapSalesSchedulingAgreementItemDeliveryScheduleDatumSlice `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData"`
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData   SapSalesSchedulingAgreementItemPricingElementDatumSlice   `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData"`
	SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData     SapSalesSchedulingAgreementItemScheduleLineDatumSlice     `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData"`
	SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData              SapSalesSchedulingAgreementPartnerDatumSlice              `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesSchedulingAgreementHeaderDatumR) NewStruct() *sapSalesSchedulingAgreementHeaderDatumR {
	return &sapSalesSchedulingAgreementHeaderDatumR{}
}

// sapSalesSchedulingAgreementHeaderDatumL is where Load methods for each relationship are stored.
type sapSalesSchedulingAgreementHeaderDatumL struct{}

var (
	sapSalesSchedulingAgreementHeaderDatumAllColumns            = []string{"SalesSchedulingAgreement", "SalesSchedgAgrmtType", "CreationDate", "LastChangeDate", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SoldToParty", "SalesSchedgAgrmtDate", "SDDocumentReason", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "SalesDistrict", "TotalNetAmount", "TransactionCurrency", "PricingDate", "ShippingType", "ShippingCondition", "DeliveryBlockReason", "DelivSchedTypeMRPRlvnceCode", "AgrmtValdtyStartDate", "AgrmtValdtyEndDate", "HeaderBillingBlockReason", "CustomerPaymentTerms", "PaymentMethod", "OverallSDProcessStatus", "OverallSDDocumentRejectionSts", "TotalBlockStatus", "OverallDeliveryStatus", "OverallDeliveryBlockStatus", "OverallBillingBlockStatus", "TotalCreditCheckStatus"}
	sapSalesSchedulingAgreementHeaderDatumColumnsWithoutDefault = []string{"SalesSchedulingAgreement", "SalesSchedgAgrmtType", "CreationDate", "LastChangeDate", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SoldToParty", "SalesSchedgAgrmtDate", "SDDocumentReason", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "SalesDistrict", "TotalNetAmount", "TransactionCurrency", "PricingDate", "ShippingType", "ShippingCondition", "DeliveryBlockReason", "DelivSchedTypeMRPRlvnceCode", "AgrmtValdtyStartDate", "AgrmtValdtyEndDate", "HeaderBillingBlockReason", "CustomerPaymentTerms", "PaymentMethod", "OverallSDProcessStatus", "OverallSDDocumentRejectionSts", "TotalBlockStatus", "OverallDeliveryStatus", "OverallDeliveryBlockStatus", "OverallBillingBlockStatus", "TotalCreditCheckStatus"}
	sapSalesSchedulingAgreementHeaderDatumColumnsWithDefault    = []string{}
	sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns     = []string{"SalesSchedulingAgreement"}
	sapSalesSchedulingAgreementHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesSchedulingAgreementHeaderDatumSlice is an alias for a slice of pointers to SapSalesSchedulingAgreementHeaderDatum.
	// This should almost always be used instead of []SapSalesSchedulingAgreementHeaderDatum.
	SapSalesSchedulingAgreementHeaderDatumSlice []*SapSalesSchedulingAgreementHeaderDatum
	// SapSalesSchedulingAgreementHeaderDatumHook is the signature for custom SapSalesSchedulingAgreementHeaderDatum hook methods
	SapSalesSchedulingAgreementHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapSalesSchedulingAgreementHeaderDatum) error

	sapSalesSchedulingAgreementHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesSchedulingAgreementHeaderDatumType                 = reflect.TypeOf(&SapSalesSchedulingAgreementHeaderDatum{})
	sapSalesSchedulingAgreementHeaderDatumMapping              = queries.MakeStructMapping(sapSalesSchedulingAgreementHeaderDatumType)
	sapSalesSchedulingAgreementHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns)
	sapSalesSchedulingAgreementHeaderDatumInsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementHeaderDatumInsertCache          = make(map[string]insertCache)
	sapSalesSchedulingAgreementHeaderDatumUpdateCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapSalesSchedulingAgreementHeaderDatumUpsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesSchedulingAgreementHeaderDatumAfterSelectHooks []SapSalesSchedulingAgreementHeaderDatumHook

var sapSalesSchedulingAgreementHeaderDatumBeforeInsertHooks []SapSalesSchedulingAgreementHeaderDatumHook
var sapSalesSchedulingAgreementHeaderDatumAfterInsertHooks []SapSalesSchedulingAgreementHeaderDatumHook

var sapSalesSchedulingAgreementHeaderDatumBeforeUpdateHooks []SapSalesSchedulingAgreementHeaderDatumHook
var sapSalesSchedulingAgreementHeaderDatumAfterUpdateHooks []SapSalesSchedulingAgreementHeaderDatumHook

var sapSalesSchedulingAgreementHeaderDatumBeforeDeleteHooks []SapSalesSchedulingAgreementHeaderDatumHook
var sapSalesSchedulingAgreementHeaderDatumAfterDeleteHooks []SapSalesSchedulingAgreementHeaderDatumHook

var sapSalesSchedulingAgreementHeaderDatumBeforeUpsertHooks []SapSalesSchedulingAgreementHeaderDatumHook
var sapSalesSchedulingAgreementHeaderDatumAfterUpsertHooks []SapSalesSchedulingAgreementHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesSchedulingAgreementHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesSchedulingAgreementHeaderDatumHook registers your hook function for all future operations.
func AddSapSalesSchedulingAgreementHeaderDatumHook(hookPoint boil.HookPoint, sapSalesSchedulingAgreementHeaderDatumHook SapSalesSchedulingAgreementHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesSchedulingAgreementHeaderDatumAfterSelectHooks = append(sapSalesSchedulingAgreementHeaderDatumAfterSelectHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapSalesSchedulingAgreementHeaderDatumBeforeInsertHooks = append(sapSalesSchedulingAgreementHeaderDatumBeforeInsertHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.AfterInsertHook:
		sapSalesSchedulingAgreementHeaderDatumAfterInsertHooks = append(sapSalesSchedulingAgreementHeaderDatumAfterInsertHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesSchedulingAgreementHeaderDatumBeforeUpdateHooks = append(sapSalesSchedulingAgreementHeaderDatumBeforeUpdateHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapSalesSchedulingAgreementHeaderDatumAfterUpdateHooks = append(sapSalesSchedulingAgreementHeaderDatumAfterUpdateHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesSchedulingAgreementHeaderDatumBeforeDeleteHooks = append(sapSalesSchedulingAgreementHeaderDatumBeforeDeleteHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapSalesSchedulingAgreementHeaderDatumAfterDeleteHooks = append(sapSalesSchedulingAgreementHeaderDatumAfterDeleteHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesSchedulingAgreementHeaderDatumBeforeUpsertHooks = append(sapSalesSchedulingAgreementHeaderDatumBeforeUpsertHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapSalesSchedulingAgreementHeaderDatumAfterUpsertHooks = append(sapSalesSchedulingAgreementHeaderDatumAfterUpsertHooks, sapSalesSchedulingAgreementHeaderDatumHook)
	}
}

// One returns a single sapSalesSchedulingAgreementHeaderDatum record from the query.
func (q sapSalesSchedulingAgreementHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesSchedulingAgreementHeaderDatum, error) {
	o := &SapSalesSchedulingAgreementHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_scheduling_agreement_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesSchedulingAgreementHeaderDatum records from the query.
func (q sapSalesSchedulingAgreementHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesSchedulingAgreementHeaderDatumSlice, error) {
	var o []*SapSalesSchedulingAgreementHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesSchedulingAgreementHeaderDatum slice")
	}

	if len(sapSalesSchedulingAgreementHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesSchedulingAgreementHeaderDatum records in the query.
func (q sapSalesSchedulingAgreementHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_scheduling_agreement_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesSchedulingAgreementHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_scheduling_agreement_header_data exists")
	}

	return count > 0, nil
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementItemData retrieves all the sap_sales_scheduling_agreement_item_datum's SapSalesSchedulingAgreementItemData with an executor via SalesSchedulingAgreement column.
func (o *SapSalesSchedulingAgreementHeaderDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementItemData(mods ...qm.QueryMod) sapSalesSchedulingAgreementItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_scheduling_agreement_item_data`.`SalesSchedulingAgreement`=?", o.SalesSchedulingAgreement),
	)

	query := SapSalesSchedulingAgreementItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_scheduling_agreement_item_data`.*"})
	}

	return query
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData retrieves all the sap_sales_scheduling_agreement_item_delivery_schedule_datum's SapSalesSchedulingAgreementItemDeliveryScheduleData with an executor via SalesSchedulingAgreement column.
func (o *SapSalesSchedulingAgreementHeaderDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData(mods ...qm.QueryMod) sapSalesSchedulingAgreementItemDeliveryScheduleDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_scheduling_agreement_item_delivery_schedule_data`.`SalesSchedulingAgreement`=?", o.SalesSchedulingAgreement),
	)

	query := SapSalesSchedulingAgreementItemDeliveryScheduleData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_item_delivery_schedule_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_scheduling_agreement_item_delivery_schedule_data`.*"})
	}

	return query
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData retrieves all the sap_sales_scheduling_agreement_item_pricing_element_datum's SapSalesSchedulingAgreementItemPricingElementData with an executor via SalesSchedulingAgreement column.
func (o *SapSalesSchedulingAgreementHeaderDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData(mods ...qm.QueryMod) sapSalesSchedulingAgreementItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_scheduling_agreement_item_pricing_element_data`.`SalesSchedulingAgreement`=?", o.SalesSchedulingAgreement),
	)

	query := SapSalesSchedulingAgreementItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_scheduling_agreement_item_pricing_element_data`.*"})
	}

	return query
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData retrieves all the sap_sales_scheduling_agreement_item_schedule_line_datum's SapSalesSchedulingAgreementItemScheduleLineData with an executor via SalesSchedulingAgreement column.
func (o *SapSalesSchedulingAgreementHeaderDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData(mods ...qm.QueryMod) sapSalesSchedulingAgreementItemScheduleLineDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_scheduling_agreement_item_schedule_line_data`.`SalesSchedulingAgreement`=?", o.SalesSchedulingAgreement),
	)

	query := SapSalesSchedulingAgreementItemScheduleLineData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_item_schedule_line_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_scheduling_agreement_item_schedule_line_data`.*"})
	}

	return query
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData retrieves all the sap_sales_scheduling_agreement_partner_datum's SapSalesSchedulingAgreementPartnerData with an executor via SalesSchedulingAgreement column.
func (o *SapSalesSchedulingAgreementHeaderDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData(mods ...qm.QueryMod) sapSalesSchedulingAgreementPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_scheduling_agreement_partner_data`.`SalesSchedulingAgreement`=?", o.SalesSchedulingAgreement),
	)

	query := SapSalesSchedulingAgreementPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_scheduling_agreement_partner_data`.*"})
	}

	return query
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesSchedulingAgreementHeaderDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementHeaderDatum
	var object *SapSalesSchedulingAgreementHeaderDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementHeaderDatum.(*SapSalesSchedulingAgreementHeaderDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementHeaderDatum.(*[]*SapSalesSchedulingAgreementHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_item_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_item_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_scheduling_agreement_item_data")
	}

	var resultSlice []*SapSalesSchedulingAgreementItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_scheduling_agreement_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_scheduling_agreement_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_item_data")
	}

	if len(sapSalesSchedulingAgreementItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesSchedulingAgreementItemDatumR{}
			}
			foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemData = append(local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementItemDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesSchedulingAgreementHeaderDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementHeaderDatum
	var object *SapSalesSchedulingAgreementHeaderDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementHeaderDatum.(*SapSalesSchedulingAgreementHeaderDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementHeaderDatum.(*[]*SapSalesSchedulingAgreementHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_item_delivery_schedule_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_item_delivery_schedule_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_scheduling_agreement_item_delivery_schedule_data")
	}

	var resultSlice []*SapSalesSchedulingAgreementItemDeliveryScheduleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_scheduling_agreement_item_delivery_schedule_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_scheduling_agreement_item_delivery_schedule_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_item_delivery_schedule_data")
	}

	if len(sapSalesSchedulingAgreementItemDeliveryScheduleDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesSchedulingAgreementItemDeliveryScheduleDatumR{}
			}
			foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData = append(local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementItemDeliveryScheduleDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesSchedulingAgreementHeaderDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementHeaderDatum
	var object *SapSalesSchedulingAgreementHeaderDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementHeaderDatum.(*SapSalesSchedulingAgreementHeaderDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementHeaderDatum.(*[]*SapSalesSchedulingAgreementHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_item_pricing_element_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_item_pricing_element_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	var resultSlice []*SapSalesSchedulingAgreementItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_scheduling_agreement_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if len(sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesSchedulingAgreementItemPricingElementDatumR{}
			}
			foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData = append(local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementItemPricingElementDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesSchedulingAgreementHeaderDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementHeaderDatum
	var object *SapSalesSchedulingAgreementHeaderDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementHeaderDatum.(*SapSalesSchedulingAgreementHeaderDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementHeaderDatum.(*[]*SapSalesSchedulingAgreementHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_item_schedule_line_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_item_schedule_line_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	var resultSlice []*SapSalesSchedulingAgreementItemScheduleLineDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_scheduling_agreement_item_schedule_line_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_item_schedule_line_data")
	}

	if len(sapSalesSchedulingAgreementItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesSchedulingAgreementItemScheduleLineDatumR{}
			}
			foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData = append(local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementItemScheduleLineDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesSchedulingAgreementHeaderDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementHeaderDatum
	var object *SapSalesSchedulingAgreementHeaderDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementHeaderDatum.(*SapSalesSchedulingAgreementHeaderDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementHeaderDatum.(*[]*SapSalesSchedulingAgreementHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_partner_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_partner_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_scheduling_agreement_partner_data")
	}

	var resultSlice []*SapSalesSchedulingAgreementPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_scheduling_agreement_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_scheduling_agreement_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_partner_data")
	}

	if len(sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesSchedulingAgreementPartnerDatumR{}
			}
			foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData = append(local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementPartnerDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemData adds the given related objects to the existing relationships
// of the sap_sales_scheduling_agreement_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemData.
// Sets related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum appropriately.
func (o *SapSalesSchedulingAgreementHeaderDatum) AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesSchedulingAgreementItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_scheduling_agreement_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
				strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesSchedulingAgreement, rel.SalesSchedulingAgreement, rel.SalesSchedulingAgreementItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
		}
	}

	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementItemData: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemData = append(o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesSchedulingAgreementItemDatumR{
				SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: o,
			}
		} else {
			rel.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = o
		}
	}
	return nil
}

// AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData adds the given related objects to the existing relationships
// of the sap_sales_scheduling_agreement_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData.
// Sets related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum appropriately.
func (o *SapSalesSchedulingAgreementHeaderDatum) AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesSchedulingAgreementItemDeliveryScheduleDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_scheduling_agreement_item_delivery_schedule_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
				strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemDeliveryScheduleDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesSchedulingAgreement, rel.SalesSchedulingAgreement, rel.SalesSchedulingAgreementItem, rel.IntDeliveryScheduleNumber}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
		}
	}

	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData = append(o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemDeliveryScheduleData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesSchedulingAgreementItemDeliveryScheduleDatumR{
				SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: o,
			}
		} else {
			rel.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = o
		}
	}
	return nil
}

// AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData adds the given related objects to the existing relationships
// of the sap_sales_scheduling_agreement_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData.
// Sets related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum appropriately.
func (o *SapSalesSchedulingAgreementHeaderDatum) AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesSchedulingAgreementItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_scheduling_agreement_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
				strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesSchedulingAgreement, rel.SalesSchedulingAgreement, rel.SalesSchedulingAgreementItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
		}
	}

	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData = append(o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesSchedulingAgreementItemPricingElementDatumR{
				SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: o,
			}
		} else {
			rel.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = o
		}
	}
	return nil
}

// AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData adds the given related objects to the existing relationships
// of the sap_sales_scheduling_agreement_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData.
// Sets related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum appropriately.
func (o *SapSalesSchedulingAgreementHeaderDatum) AddSalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesSchedulingAgreementItemScheduleLineDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_scheduling_agreement_item_schedule_line_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
				strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemScheduleLineDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesSchedulingAgreement, rel.SalesSchedulingAgreement, rel.SalesSchedulingAgreementItem, rel.ScheduleLine}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
		}
	}

	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData = append(o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemScheduleLineData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesSchedulingAgreementItemScheduleLineDatumR{
				SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: o,
			}
		} else {
			rel.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = o
		}
	}
	return nil
}

// AddSalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData adds the given related objects to the existing relationships
// of the sap_sales_scheduling_agreement_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData.
// Sets related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum appropriately.
func (o *SapSalesSchedulingAgreementHeaderDatum) AddSalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesSchedulingAgreementPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_scheduling_agreement_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
				strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesSchedulingAgreement, rel.SalesSchedulingAgreement, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesSchedulingAgreement = o.SalesSchedulingAgreement
		}
	}

	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData = append(o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesSchedulingAgreementPartnerDatumR{
				SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: o,
			}
		} else {
			rel.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = o
		}
	}
	return nil
}

// SapSalesSchedulingAgreementHeaderData retrieves all the records using an executor.
func SapSalesSchedulingAgreementHeaderData(mods ...qm.QueryMod) sapSalesSchedulingAgreementHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_sales_scheduling_agreement_header_data`"))
	return sapSalesSchedulingAgreementHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapSalesSchedulingAgreementHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, selectCols ...string) (*SapSalesSchedulingAgreementHeaderDatum, error) {
	sapSalesSchedulingAgreementHeaderDatumObj := &SapSalesSchedulingAgreementHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_scheduling_agreement_header_data` where `SalesSchedulingAgreement`=?", sel,
	)

	q := queries.Raw(query, salesSchedulingAgreement)

	err := q.Bind(ctx, exec, sapSalesSchedulingAgreementHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_scheduling_agreement_header_data")
	}

	if err = sapSalesSchedulingAgreementHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesSchedulingAgreementHeaderDatumObj, err
	}

	return sapSalesSchedulingAgreementHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesSchedulingAgreementHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesSchedulingAgreementHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementHeaderDatumInsertCache[key]
	sapSalesSchedulingAgreementHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesSchedulingAgreementHeaderDatumAllColumns,
			sapSalesSchedulingAgreementHeaderDatumColumnsWithDefault,
			sapSalesSchedulingAgreementHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_scheduling_agreement_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_scheduling_agreement_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_scheduling_agreement_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_scheduling_agreement_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesSchedulingAgreement,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementHeaderDatumInsertCacheMut.Lock()
		sapSalesSchedulingAgreementHeaderDatumInsertCache[key] = cache
		sapSalesSchedulingAgreementHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesSchedulingAgreementHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesSchedulingAgreementHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesSchedulingAgreementHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementHeaderDatumUpdateCache[key]
	sapSalesSchedulingAgreementHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesSchedulingAgreementHeaderDatumAllColumns,
			sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_scheduling_agreement_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, append(wl, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_scheduling_agreement_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_scheduling_agreement_header_data")
	}

	if !cached {
		sapSalesSchedulingAgreementHeaderDatumUpdateCacheMut.Lock()
		sapSalesSchedulingAgreementHeaderDatumUpdateCache[key] = cache
		sapSalesSchedulingAgreementHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesSchedulingAgreementHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_scheduling_agreement_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_scheduling_agreement_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesSchedulingAgreementHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesSchedulingAgreementHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesSchedulingAgreementHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesSchedulingAgreementHeaderDatumUniqueColumns = []string{
	"SalesSchedulingAgreement",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesSchedulingAgreementHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesSchedulingAgreementHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesSchedulingAgreementHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementHeaderDatumUpsertCache[key]
	sapSalesSchedulingAgreementHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesSchedulingAgreementHeaderDatumAllColumns,
			sapSalesSchedulingAgreementHeaderDatumColumnsWithDefault,
			sapSalesSchedulingAgreementHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesSchedulingAgreementHeaderDatumAllColumns,
			sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_scheduling_agreement_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_scheduling_agreement_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_scheduling_agreement_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_scheduling_agreement_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesSchedulingAgreementHeaderDatumType, sapSalesSchedulingAgreementHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_scheduling_agreement_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementHeaderDatumUpsertCacheMut.Lock()
		sapSalesSchedulingAgreementHeaderDatumUpsertCache[key] = cache
		sapSalesSchedulingAgreementHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesSchedulingAgreementHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesSchedulingAgreementHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesSchedulingAgreementHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesSchedulingAgreementHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_scheduling_agreement_header_data` WHERE `SalesSchedulingAgreement`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_scheduling_agreement_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_scheduling_agreement_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesSchedulingAgreementHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesSchedulingAgreementHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_scheduling_agreement_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesSchedulingAgreementHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesSchedulingAgreementHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_scheduling_agreement_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesSchedulingAgreementHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_header_data")
	}

	if len(sapSalesSchedulingAgreementHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesSchedulingAgreementHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesSchedulingAgreementHeaderDatum(ctx, exec, o.SalesSchedulingAgreement)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesSchedulingAgreementHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesSchedulingAgreementHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_scheduling_agreement_header_data`.* FROM `sap_sales_scheduling_agreement_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesSchedulingAgreementHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesSchedulingAgreementHeaderDatumExists checks if the SapSalesSchedulingAgreementHeaderDatum row exists.
func SapSalesSchedulingAgreementHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_scheduling_agreement_header_data` where `SalesSchedulingAgreement`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesSchedulingAgreement)
	}
	row := exec.QueryRowContext(ctx, sql, salesSchedulingAgreement)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_scheduling_agreement_header_data exists")
	}

	return exists, nil
}
