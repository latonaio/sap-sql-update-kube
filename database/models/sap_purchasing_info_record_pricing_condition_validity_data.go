// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchasingInfoRecordPricingConditionValidityDatum is an object representing the database table.
type SapPurchasingInfoRecordPricingConditionValidityDatum struct {
	PurchasingInfoRecord         string      `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord"`
	ConditionRecord              string      `boil:"ConditionRecord" json:"ConditionRecord" toml:"ConditionRecord" yaml:"ConditionRecord"`
	ConditionValidityEndDate     null.String `boil:"ConditionValidityEndDate" json:"ConditionValidityEndDate,omitempty" toml:"ConditionValidityEndDate" yaml:"ConditionValidityEndDate,omitempty"`
	ConditionValidityStartDate   null.String `boil:"ConditionValidityStartDate" json:"ConditionValidityStartDate,omitempty" toml:"ConditionValidityStartDate" yaml:"ConditionValidityStartDate,omitempty"`
	ConditionApplication         null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	ConditionType                null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PurgDocOrderQuantityUnit     null.String `boil:"PurgDocOrderQuantityUnit" json:"PurgDocOrderQuantityUnit,omitempty" toml:"PurgDocOrderQuantityUnit" yaml:"PurgDocOrderQuantityUnit,omitempty"`
	PurchasingOrganization       null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	PurchasingInfoRecordCategory null.String `boil:"PurchasingInfoRecordCategory" json:"PurchasingInfoRecordCategory,omitempty" toml:"PurchasingInfoRecordCategory" yaml:"PurchasingInfoRecordCategory,omitempty"`
	Supplier                     null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	MaterialGroup                null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	Material                     null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                        null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`

	R *sapPurchasingInfoRecordPricingConditionValidityDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchasingInfoRecordPricingConditionValidityDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchasingInfoRecordPricingConditionValidityDatumColumns = struct {
	PurchasingInfoRecord         string
	ConditionRecord              string
	ConditionValidityEndDate     string
	ConditionValidityStartDate   string
	ConditionApplication         string
	ConditionType                string
	PurgDocOrderQuantityUnit     string
	PurchasingOrganization       string
	PurchasingInfoRecordCategory string
	Supplier                     string
	MaterialGroup                string
	Material                     string
	Plant                        string
}{
	PurchasingInfoRecord:         "PurchasingInfoRecord",
	ConditionRecord:              "ConditionRecord",
	ConditionValidityEndDate:     "ConditionValidityEndDate",
	ConditionValidityStartDate:   "ConditionValidityStartDate",
	ConditionApplication:         "ConditionApplication",
	ConditionType:                "ConditionType",
	PurgDocOrderQuantityUnit:     "PurgDocOrderQuantityUnit",
	PurchasingOrganization:       "PurchasingOrganization",
	PurchasingInfoRecordCategory: "PurchasingInfoRecordCategory",
	Supplier:                     "Supplier",
	MaterialGroup:                "MaterialGroup",
	Material:                     "Material",
	Plant:                        "Plant",
}

var SapPurchasingInfoRecordPricingConditionValidityDatumTableColumns = struct {
	PurchasingInfoRecord         string
	ConditionRecord              string
	ConditionValidityEndDate     string
	ConditionValidityStartDate   string
	ConditionApplication         string
	ConditionType                string
	PurgDocOrderQuantityUnit     string
	PurchasingOrganization       string
	PurchasingInfoRecordCategory string
	Supplier                     string
	MaterialGroup                string
	Material                     string
	Plant                        string
}{
	PurchasingInfoRecord:         "sap_purchasing_info_record_pricing_condition_validity_data.PurchasingInfoRecord",
	ConditionRecord:              "sap_purchasing_info_record_pricing_condition_validity_data.ConditionRecord",
	ConditionValidityEndDate:     "sap_purchasing_info_record_pricing_condition_validity_data.ConditionValidityEndDate",
	ConditionValidityStartDate:   "sap_purchasing_info_record_pricing_condition_validity_data.ConditionValidityStartDate",
	ConditionApplication:         "sap_purchasing_info_record_pricing_condition_validity_data.ConditionApplication",
	ConditionType:                "sap_purchasing_info_record_pricing_condition_validity_data.ConditionType",
	PurgDocOrderQuantityUnit:     "sap_purchasing_info_record_pricing_condition_validity_data.PurgDocOrderQuantityUnit",
	PurchasingOrganization:       "sap_purchasing_info_record_pricing_condition_validity_data.PurchasingOrganization",
	PurchasingInfoRecordCategory: "sap_purchasing_info_record_pricing_condition_validity_data.PurchasingInfoRecordCategory",
	Supplier:                     "sap_purchasing_info_record_pricing_condition_validity_data.Supplier",
	MaterialGroup:                "sap_purchasing_info_record_pricing_condition_validity_data.MaterialGroup",
	Material:                     "sap_purchasing_info_record_pricing_condition_validity_data.Material",
	Plant:                        "sap_purchasing_info_record_pricing_condition_validity_data.Plant",
}

// Generated where

var SapPurchasingInfoRecordPricingConditionValidityDatumWhere = struct {
	PurchasingInfoRecord         whereHelperstring
	ConditionRecord              whereHelperstring
	ConditionValidityEndDate     whereHelpernull_String
	ConditionValidityStartDate   whereHelpernull_String
	ConditionApplication         whereHelpernull_String
	ConditionType                whereHelpernull_String
	PurgDocOrderQuantityUnit     whereHelpernull_String
	PurchasingOrganization       whereHelpernull_String
	PurchasingInfoRecordCategory whereHelpernull_String
	Supplier                     whereHelpernull_String
	MaterialGroup                whereHelpernull_String
	Material                     whereHelpernull_String
	Plant                        whereHelpernull_String
}{
	PurchasingInfoRecord:         whereHelperstring{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`PurchasingInfoRecord`"},
	ConditionRecord:              whereHelperstring{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`ConditionRecord`"},
	ConditionValidityEndDate:     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`ConditionValidityEndDate`"},
	ConditionValidityStartDate:   whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`ConditionValidityStartDate`"},
	ConditionApplication:         whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`ConditionApplication`"},
	ConditionType:                whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`ConditionType`"},
	PurgDocOrderQuantityUnit:     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`PurgDocOrderQuantityUnit`"},
	PurchasingOrganization:       whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`PurchasingOrganization`"},
	PurchasingInfoRecordCategory: whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`PurchasingInfoRecordCategory`"},
	Supplier:                     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`Supplier`"},
	MaterialGroup:                whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`MaterialGroup`"},
	Material:                     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`Material`"},
	Plant:                        whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_validity_data`.`Plant`"},
}

// SapPurchasingInfoRecordPricingConditionValidityDatumRels is where relationship names are stored.
var SapPurchasingInfoRecordPricingConditionValidityDatumRels = struct {
	PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum string
}{
	PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: "PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum",
}

// sapPurchasingInfoRecordPricingConditionValidityDatumR is where relationships are stored.
type sapPurchasingInfoRecordPricingConditionValidityDatumR struct {
	PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum *SapPurchasingInfoRecordGeneralDatum `boil:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum" json:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum" toml:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum" yaml:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchasingInfoRecordPricingConditionValidityDatumR) NewStruct() *sapPurchasingInfoRecordPricingConditionValidityDatumR {
	return &sapPurchasingInfoRecordPricingConditionValidityDatumR{}
}

// sapPurchasingInfoRecordPricingConditionValidityDatumL is where Load methods for each relationship are stored.
type sapPurchasingInfoRecordPricingConditionValidityDatumL struct{}

var (
	sapPurchasingInfoRecordPricingConditionValidityDatumAllColumns            = []string{"PurchasingInfoRecord", "ConditionRecord", "ConditionValidityEndDate", "ConditionValidityStartDate", "ConditionApplication", "ConditionType", "PurgDocOrderQuantityUnit", "PurchasingOrganization", "PurchasingInfoRecordCategory", "Supplier", "MaterialGroup", "Material", "Plant"}
	sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithoutDefault = []string{"PurchasingInfoRecord", "ConditionRecord", "ConditionValidityEndDate", "ConditionValidityStartDate", "ConditionApplication", "ConditionType", "PurgDocOrderQuantityUnit", "PurchasingOrganization", "PurchasingInfoRecordCategory", "Supplier", "MaterialGroup", "Material", "Plant"}
	sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithDefault    = []string{}
	sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns     = []string{"PurchasingInfoRecord", "ConditionRecord"}
	sapPurchasingInfoRecordPricingConditionValidityDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchasingInfoRecordPricingConditionValidityDatumSlice is an alias for a slice of pointers to SapPurchasingInfoRecordPricingConditionValidityDatum.
	// This should almost always be used instead of []SapPurchasingInfoRecordPricingConditionValidityDatum.
	SapPurchasingInfoRecordPricingConditionValidityDatumSlice []*SapPurchasingInfoRecordPricingConditionValidityDatum
	// SapPurchasingInfoRecordPricingConditionValidityDatumHook is the signature for custom SapPurchasingInfoRecordPricingConditionValidityDatum hook methods
	SapPurchasingInfoRecordPricingConditionValidityDatumHook func(context.Context, boil.ContextExecutor, *SapPurchasingInfoRecordPricingConditionValidityDatum) error

	sapPurchasingInfoRecordPricingConditionValidityDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchasingInfoRecordPricingConditionValidityDatumType                 = reflect.TypeOf(&SapPurchasingInfoRecordPricingConditionValidityDatum{})
	sapPurchasingInfoRecordPricingConditionValidityDatumMapping              = queries.MakeStructMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType)
	sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns)
	sapPurchasingInfoRecordPricingConditionValidityDatumInsertCacheMut       sync.RWMutex
	sapPurchasingInfoRecordPricingConditionValidityDatumInsertCache          = make(map[string]insertCache)
	sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCacheMut       sync.RWMutex
	sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCache          = make(map[string]updateCache)
	sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCacheMut       sync.RWMutex
	sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook

var sapPurchasingInfoRecordPricingConditionValidityDatumBeforeInsertHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook
var sapPurchasingInfoRecordPricingConditionValidityDatumAfterInsertHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook

var sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpdateHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook
var sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpdateHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook

var sapPurchasingInfoRecordPricingConditionValidityDatumBeforeDeleteHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook
var sapPurchasingInfoRecordPricingConditionValidityDatumAfterDeleteHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook

var sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpsertHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook
var sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpsertHooks []SapPurchasingInfoRecordPricingConditionValidityDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchasingInfoRecordPricingConditionValidityDatumHook registers your hook function for all future operations.
func AddSapPurchasingInfoRecordPricingConditionValidityDatumHook(hookPoint boil.HookPoint, sapPurchasingInfoRecordPricingConditionValidityDatumHook SapPurchasingInfoRecordPricingConditionValidityDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.BeforeInsertHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumBeforeInsertHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumBeforeInsertHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.AfterInsertHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumAfterInsertHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumAfterInsertHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpdateHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpdateHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.AfterUpdateHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpdateHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpdateHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumBeforeDeleteHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumBeforeDeleteHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.AfterDeleteHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumAfterDeleteHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumAfterDeleteHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpsertHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumBeforeUpsertHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	case boil.AfterUpsertHook:
		sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpsertHooks = append(sapPurchasingInfoRecordPricingConditionValidityDatumAfterUpsertHooks, sapPurchasingInfoRecordPricingConditionValidityDatumHook)
	}
}

// One returns a single sapPurchasingInfoRecordPricingConditionValidityDatum record from the query.
func (q sapPurchasingInfoRecordPricingConditionValidityDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchasingInfoRecordPricingConditionValidityDatum, error) {
	o := &SapPurchasingInfoRecordPricingConditionValidityDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchasingInfoRecordPricingConditionValidityDatum records from the query.
func (q sapPurchasingInfoRecordPricingConditionValidityDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchasingInfoRecordPricingConditionValidityDatumSlice, error) {
	var o []*SapPurchasingInfoRecordPricingConditionValidityDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchasingInfoRecordPricingConditionValidityDatum slice")
	}

	if len(sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchasingInfoRecordPricingConditionValidityDatum records in the query.
func (q sapPurchasingInfoRecordPricingConditionValidityDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchasing_info_record_pricing_condition_validity_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchasingInfoRecordPricingConditionValidityDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchasing_info_record_pricing_condition_validity_data exists")
	}

	return count > 0, nil
}

// PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum pointed to by the foreign key.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum(mods ...qm.QueryMod) sapPurchasingInfoRecordGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchasingInfoRecord` = ?", o.PurchasingInfoRecord),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchasingInfoRecordGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchasing_info_record_general_data`")

	return query
}

// LoadPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchasingInfoRecordPricingConditionValidityDatumL) LoadPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchasingInfoRecordPricingConditionValidityDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchasingInfoRecordPricingConditionValidityDatum
	var object *SapPurchasingInfoRecordPricingConditionValidityDatum

	if singular {
		object = maybeSapPurchasingInfoRecordPricingConditionValidityDatum.(*SapPurchasingInfoRecordPricingConditionValidityDatum)
	} else {
		slice = *maybeSapPurchasingInfoRecordPricingConditionValidityDatum.(*[]*SapPurchasingInfoRecordPricingConditionValidityDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchasingInfoRecordPricingConditionValidityDatumR{}
		}
		args = append(args, object.PurchasingInfoRecord)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchasingInfoRecordPricingConditionValidityDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchasingInfoRecord {
					continue Outer
				}
			}

			args = append(args, obj.PurchasingInfoRecord)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchasing_info_record_general_data`),
		qm.WhereIn(`sap_purchasing_info_record_general_data.PurchasingInfoRecord in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchasingInfoRecordGeneralDatum")
	}

	var resultSlice []*SapPurchasingInfoRecordGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchasingInfoRecordGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchasing_info_record_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchasing_info_record_general_data")
	}

	if len(sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchasingInfoRecordGeneralDatumR{}
		}
		foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData = append(foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchasingInfoRecord == foreign.PurchasingInfoRecord {
				local.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchasingInfoRecordGeneralDatumR{}
				}
				foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData = append(foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum of the sapPurchasingInfoRecordPricingConditionValidityDatum to the related item.
// Sets o.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum to related.
// Adds o to related.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) SetPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchasingInfoRecordGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchasing_info_record_pricing_condition_validity_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchasingInfoRecord"}),
		strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchasingInfoRecord, o.PurchasingInfoRecord, o.ConditionRecord}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchasingInfoRecord = related.PurchasingInfoRecord
	if o.R == nil {
		o.R = &sapPurchasingInfoRecordPricingConditionValidityDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: related,
		}
	} else {
		o.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchasingInfoRecordGeneralDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData: SapPurchasingInfoRecordPricingConditionValidityDatumSlice{o},
		}
	} else {
		related.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData = append(related.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData, o)
	}

	return nil
}

// SapPurchasingInfoRecordPricingConditionValidityData retrieves all the records using an executor.
func SapPurchasingInfoRecordPricingConditionValidityData(mods ...qm.QueryMod) sapPurchasingInfoRecordPricingConditionValidityDatumQuery {
	mods = append(mods, qm.From("`sap_purchasing_info_record_pricing_condition_validity_data`"))
	return sapPurchasingInfoRecordPricingConditionValidityDatumQuery{NewQuery(mods...)}
}

// FindSapPurchasingInfoRecordPricingConditionValidityDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchasingInfoRecordPricingConditionValidityDatum(ctx context.Context, exec boil.ContextExecutor, purchasingInfoRecord string, conditionRecord string, selectCols ...string) (*SapPurchasingInfoRecordPricingConditionValidityDatum, error) {
	sapPurchasingInfoRecordPricingConditionValidityDatumObj := &SapPurchasingInfoRecordPricingConditionValidityDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchasing_info_record_pricing_condition_validity_data` where `PurchasingInfoRecord`=? AND `ConditionRecord`=?", sel,
	)

	q := queries.Raw(query, purchasingInfoRecord, conditionRecord)

	err := q.Bind(ctx, exec, sapPurchasingInfoRecordPricingConditionValidityDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if err = sapPurchasingInfoRecordPricingConditionValidityDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchasingInfoRecordPricingConditionValidityDatumObj, err
	}

	return sapPurchasingInfoRecordPricingConditionValidityDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_info_record_pricing_condition_validity_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchasingInfoRecordPricingConditionValidityDatumInsertCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordPricingConditionValidityDatumInsertCache[key]
	sapPurchasingInfoRecordPricingConditionValidityDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchasingInfoRecordPricingConditionValidityDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithDefault,
			sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchasing_info_record_pricing_condition_validity_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchasing_info_record_pricing_condition_validity_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchasing_info_record_pricing_condition_validity_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchasing_info_record_pricing_condition_validity_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchasingInfoRecord,
		o.ConditionRecord,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_info_record_pricing_condition_validity_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingInfoRecordPricingConditionValidityDatumInsertCacheMut.Lock()
		sapPurchasingInfoRecordPricingConditionValidityDatumInsertCache[key] = cache
		sapPurchasingInfoRecordPricingConditionValidityDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchasingInfoRecordPricingConditionValidityDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCache[key]
	sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchasingInfoRecordPricingConditionValidityDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchasing_info_record_pricing_condition_validity_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchasing_info_record_pricing_condition_validity_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, append(wl, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchasing_info_record_pricing_condition_validity_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if !cached {
		sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCacheMut.Lock()
		sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCache[key] = cache
		sapPurchasingInfoRecordPricingConditionValidityDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchasingInfoRecordPricingConditionValidityDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchasingInfoRecordPricingConditionValidityDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchasing_info_record_pricing_condition_validity_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchasingInfoRecordPricingConditionValidityDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchasingInfoRecordPricingConditionValidityDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchasingInfoRecordPricingConditionValidityDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_info_record_pricing_condition_validity_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchasingInfoRecordPricingConditionValidityDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCache[key]
	sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchasingInfoRecordPricingConditionValidityDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithDefault,
			sapPurchasingInfoRecordPricingConditionValidityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchasingInfoRecordPricingConditionValidityDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchasing_info_record_pricing_condition_validity_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchasing_info_record_pricing_condition_validity_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchasing_info_record_pricing_condition_validity_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionValidityDatumType, sapPurchasingInfoRecordPricingConditionValidityDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchasing_info_record_pricing_condition_validity_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_info_record_pricing_condition_validity_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCacheMut.Lock()
		sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCache[key] = cache
		sapPurchasingInfoRecordPricingConditionValidityDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchasingInfoRecordPricingConditionValidityDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchasingInfoRecordPricingConditionValidityDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchasing_info_record_pricing_condition_validity_data` WHERE `PurchasingInfoRecord`=? AND `ConditionRecord`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchasing_info_record_pricing_condition_validity_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchasingInfoRecordPricingConditionValidityDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchasingInfoRecordPricingConditionValidityDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchasing_info_record_pricing_condition_validity_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchasingInfoRecordPricingConditionValidityDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchasingInfoRecordPricingConditionValidityDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchasing_info_record_pricing_condition_validity_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchasingInfoRecordPricingConditionValidityDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if len(sapPurchasingInfoRecordPricingConditionValidityDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchasingInfoRecordPricingConditionValidityDatum(ctx, exec, o.PurchasingInfoRecord, o.ConditionRecord)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchasingInfoRecordPricingConditionValidityDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchasingInfoRecordPricingConditionValidityDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchasing_info_record_pricing_condition_validity_data`.* FROM `sap_purchasing_info_record_pricing_condition_validity_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchasingInfoRecordPricingConditionValidityDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchasingInfoRecordPricingConditionValidityDatumExists checks if the SapPurchasingInfoRecordPricingConditionValidityDatum row exists.
func SapPurchasingInfoRecordPricingConditionValidityDatumExists(ctx context.Context, exec boil.ContextExecutor, purchasingInfoRecord string, conditionRecord string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchasing_info_record_pricing_condition_validity_data` where `PurchasingInfoRecord`=? AND `ConditionRecord`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchasingInfoRecord, conditionRecord)
	}
	row := exec.QueryRowContext(ctx, sql, purchasingInfoRecord, conditionRecord)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchasing_info_record_pricing_condition_validity_data exists")
	}

	return exists, nil
}
