// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesPricingConditionRecordDatum is an object representing the database table.
type SapSalesPricingConditionRecordDatum struct {
	ConditionRecord              string      `boil:"ConditionRecord" json:"ConditionRecord" toml:"ConditionRecord" yaml:"ConditionRecord"`
	ConditionValidityEndDate     string      `boil:"ConditionValidityEndDate" json:"ConditionValidityEndDate" toml:"ConditionValidityEndDate" yaml:"ConditionValidityEndDate"`
	ConditionSequentialNumber    string      `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber"`
	ConditionTable               null.String `boil:"ConditionTable" json:"ConditionTable,omitempty" toml:"ConditionTable" yaml:"ConditionTable,omitempty"`
	ConditionApplication         null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	ConditionType                null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	ConditionValidityStartDate   null.String `boil:"ConditionValidityStartDate" json:"ConditionValidityStartDate,omitempty" toml:"ConditionValidityStartDate" yaml:"ConditionValidityStartDate,omitempty"`
	CreationDate                 null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	PricingScaleType             null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	PricingScaleBasis            null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleQuantity       null.String `boil:"ConditionScaleQuantity" json:"ConditionScaleQuantity,omitempty" toml:"ConditionScaleQuantity" yaml:"ConditionScaleQuantity,omitempty"`
	ConditionScaleQuantityUnit   null.String `boil:"ConditionScaleQuantityUnit" json:"ConditionScaleQuantityUnit,omitempty" toml:"ConditionScaleQuantityUnit" yaml:"ConditionScaleQuantityUnit,omitempty"`
	ConditionScaleAmount         null.String `boil:"ConditionScaleAmount" json:"ConditionScaleAmount,omitempty" toml:"ConditionScaleAmount" yaml:"ConditionScaleAmount,omitempty"`
	ConditionScaleAmountCurrency null.String `boil:"ConditionScaleAmountCurrency" json:"ConditionScaleAmountCurrency,omitempty" toml:"ConditionScaleAmountCurrency" yaml:"ConditionScaleAmountCurrency,omitempty"`
	ConditionCalculationType     null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionRateValue           null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionRateValueUnit       null.String `boil:"ConditionRateValueUnit" json:"ConditionRateValueUnit,omitempty" toml:"ConditionRateValueUnit" yaml:"ConditionRateValueUnit,omitempty"`
	ConditionQuantity            null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit        null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	BaseUnit                     null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ConditionIsDeleted           null.Bool   `boil:"ConditionIsDeleted" json:"ConditionIsDeleted,omitempty" toml:"ConditionIsDeleted" yaml:"ConditionIsDeleted,omitempty"`
	PaymentTerms                 null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	IncrementalScale             null.String `boil:"IncrementalScale" json:"IncrementalScale,omitempty" toml:"IncrementalScale" yaml:"IncrementalScale,omitempty"`
	PricingScaleLine             null.String `boil:"PricingScaleLine" json:"PricingScaleLine,omitempty" toml:"PricingScaleLine" yaml:"PricingScaleLine,omitempty"`
	ConditionReleaseStatus       null.String `boil:"ConditionReleaseStatus" json:"ConditionReleaseStatus,omitempty" toml:"ConditionReleaseStatus" yaml:"ConditionReleaseStatus,omitempty"`

	R *sapSalesPricingConditionRecordDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesPricingConditionRecordDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesPricingConditionRecordDatumColumns = struct {
	ConditionRecord              string
	ConditionValidityEndDate     string
	ConditionSequentialNumber    string
	ConditionTable               string
	ConditionApplication         string
	ConditionType                string
	ConditionValidityStartDate   string
	CreationDate                 string
	PricingScaleType             string
	PricingScaleBasis            string
	ConditionScaleQuantity       string
	ConditionScaleQuantityUnit   string
	ConditionScaleAmount         string
	ConditionScaleAmountCurrency string
	ConditionCalculationType     string
	ConditionRateValue           string
	ConditionRateValueUnit       string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	BaseUnit                     string
	ConditionIsDeleted           string
	PaymentTerms                 string
	IncrementalScale             string
	PricingScaleLine             string
	ConditionReleaseStatus       string
}{
	ConditionRecord:              "ConditionRecord",
	ConditionValidityEndDate:     "ConditionValidityEndDate",
	ConditionSequentialNumber:    "ConditionSequentialNumber",
	ConditionTable:               "ConditionTable",
	ConditionApplication:         "ConditionApplication",
	ConditionType:                "ConditionType",
	ConditionValidityStartDate:   "ConditionValidityStartDate",
	CreationDate:                 "CreationDate",
	PricingScaleType:             "PricingScaleType",
	PricingScaleBasis:            "PricingScaleBasis",
	ConditionScaleQuantity:       "ConditionScaleQuantity",
	ConditionScaleQuantityUnit:   "ConditionScaleQuantityUnit",
	ConditionScaleAmount:         "ConditionScaleAmount",
	ConditionScaleAmountCurrency: "ConditionScaleAmountCurrency",
	ConditionCalculationType:     "ConditionCalculationType",
	ConditionRateValue:           "ConditionRateValue",
	ConditionRateValueUnit:       "ConditionRateValueUnit",
	ConditionQuantity:            "ConditionQuantity",
	ConditionQuantityUnit:        "ConditionQuantityUnit",
	BaseUnit:                     "BaseUnit",
	ConditionIsDeleted:           "ConditionIsDeleted",
	PaymentTerms:                 "PaymentTerms",
	IncrementalScale:             "IncrementalScale",
	PricingScaleLine:             "PricingScaleLine",
	ConditionReleaseStatus:       "ConditionReleaseStatus",
}

var SapSalesPricingConditionRecordDatumTableColumns = struct {
	ConditionRecord              string
	ConditionValidityEndDate     string
	ConditionSequentialNumber    string
	ConditionTable               string
	ConditionApplication         string
	ConditionType                string
	ConditionValidityStartDate   string
	CreationDate                 string
	PricingScaleType             string
	PricingScaleBasis            string
	ConditionScaleQuantity       string
	ConditionScaleQuantityUnit   string
	ConditionScaleAmount         string
	ConditionScaleAmountCurrency string
	ConditionCalculationType     string
	ConditionRateValue           string
	ConditionRateValueUnit       string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	BaseUnit                     string
	ConditionIsDeleted           string
	PaymentTerms                 string
	IncrementalScale             string
	PricingScaleLine             string
	ConditionReleaseStatus       string
}{
	ConditionRecord:              "sap_sales_pricing_condition_record_data.ConditionRecord",
	ConditionValidityEndDate:     "sap_sales_pricing_condition_record_data.ConditionValidityEndDate",
	ConditionSequentialNumber:    "sap_sales_pricing_condition_record_data.ConditionSequentialNumber",
	ConditionTable:               "sap_sales_pricing_condition_record_data.ConditionTable",
	ConditionApplication:         "sap_sales_pricing_condition_record_data.ConditionApplication",
	ConditionType:                "sap_sales_pricing_condition_record_data.ConditionType",
	ConditionValidityStartDate:   "sap_sales_pricing_condition_record_data.ConditionValidityStartDate",
	CreationDate:                 "sap_sales_pricing_condition_record_data.CreationDate",
	PricingScaleType:             "sap_sales_pricing_condition_record_data.PricingScaleType",
	PricingScaleBasis:            "sap_sales_pricing_condition_record_data.PricingScaleBasis",
	ConditionScaleQuantity:       "sap_sales_pricing_condition_record_data.ConditionScaleQuantity",
	ConditionScaleQuantityUnit:   "sap_sales_pricing_condition_record_data.ConditionScaleQuantityUnit",
	ConditionScaleAmount:         "sap_sales_pricing_condition_record_data.ConditionScaleAmount",
	ConditionScaleAmountCurrency: "sap_sales_pricing_condition_record_data.ConditionScaleAmountCurrency",
	ConditionCalculationType:     "sap_sales_pricing_condition_record_data.ConditionCalculationType",
	ConditionRateValue:           "sap_sales_pricing_condition_record_data.ConditionRateValue",
	ConditionRateValueUnit:       "sap_sales_pricing_condition_record_data.ConditionRateValueUnit",
	ConditionQuantity:            "sap_sales_pricing_condition_record_data.ConditionQuantity",
	ConditionQuantityUnit:        "sap_sales_pricing_condition_record_data.ConditionQuantityUnit",
	BaseUnit:                     "sap_sales_pricing_condition_record_data.BaseUnit",
	ConditionIsDeleted:           "sap_sales_pricing_condition_record_data.ConditionIsDeleted",
	PaymentTerms:                 "sap_sales_pricing_condition_record_data.PaymentTerms",
	IncrementalScale:             "sap_sales_pricing_condition_record_data.IncrementalScale",
	PricingScaleLine:             "sap_sales_pricing_condition_record_data.PricingScaleLine",
	ConditionReleaseStatus:       "sap_sales_pricing_condition_record_data.ConditionReleaseStatus",
}

// Generated where

var SapSalesPricingConditionRecordDatumWhere = struct {
	ConditionRecord              whereHelperstring
	ConditionValidityEndDate     whereHelperstring
	ConditionSequentialNumber    whereHelperstring
	ConditionTable               whereHelpernull_String
	ConditionApplication         whereHelpernull_String
	ConditionType                whereHelpernull_String
	ConditionValidityStartDate   whereHelpernull_String
	CreationDate                 whereHelpernull_String
	PricingScaleType             whereHelpernull_String
	PricingScaleBasis            whereHelpernull_String
	ConditionScaleQuantity       whereHelpernull_String
	ConditionScaleQuantityUnit   whereHelpernull_String
	ConditionScaleAmount         whereHelpernull_String
	ConditionScaleAmountCurrency whereHelpernull_String
	ConditionCalculationType     whereHelpernull_String
	ConditionRateValue           whereHelpernull_String
	ConditionRateValueUnit       whereHelpernull_String
	ConditionQuantity            whereHelpernull_String
	ConditionQuantityUnit        whereHelpernull_String
	BaseUnit                     whereHelpernull_String
	ConditionIsDeleted           whereHelpernull_Bool
	PaymentTerms                 whereHelpernull_String
	IncrementalScale             whereHelpernull_String
	PricingScaleLine             whereHelpernull_String
	ConditionReleaseStatus       whereHelpernull_String
}{
	ConditionRecord:              whereHelperstring{field: "`sap_sales_pricing_condition_record_data`.`ConditionRecord`"},
	ConditionValidityEndDate:     whereHelperstring{field: "`sap_sales_pricing_condition_record_data`.`ConditionValidityEndDate`"},
	ConditionSequentialNumber:    whereHelperstring{field: "`sap_sales_pricing_condition_record_data`.`ConditionSequentialNumber`"},
	ConditionTable:               whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionTable`"},
	ConditionApplication:         whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionApplication`"},
	ConditionType:                whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionType`"},
	ConditionValidityStartDate:   whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionValidityStartDate`"},
	CreationDate:                 whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`CreationDate`"},
	PricingScaleType:             whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`PricingScaleType`"},
	PricingScaleBasis:            whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`PricingScaleBasis`"},
	ConditionScaleQuantity:       whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionScaleQuantity`"},
	ConditionScaleQuantityUnit:   whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionScaleQuantityUnit`"},
	ConditionScaleAmount:         whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionScaleAmount`"},
	ConditionScaleAmountCurrency: whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionScaleAmountCurrency`"},
	ConditionCalculationType:     whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionCalculationType`"},
	ConditionRateValue:           whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionRateValue`"},
	ConditionRateValueUnit:       whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionRateValueUnit`"},
	ConditionQuantity:            whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:        whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionQuantityUnit`"},
	BaseUnit:                     whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`BaseUnit`"},
	ConditionIsDeleted:           whereHelpernull_Bool{field: "`sap_sales_pricing_condition_record_data`.`ConditionIsDeleted`"},
	PaymentTerms:                 whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`PaymentTerms`"},
	IncrementalScale:             whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`IncrementalScale`"},
	PricingScaleLine:             whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`PricingScaleLine`"},
	ConditionReleaseStatus:       whereHelpernull_String{field: "`sap_sales_pricing_condition_record_data`.`ConditionReleaseStatus`"},
}

// SapSalesPricingConditionRecordDatumRels is where relationship names are stored.
var SapSalesPricingConditionRecordDatumRels = struct {
}{}

// sapSalesPricingConditionRecordDatumR is where relationships are stored.
type sapSalesPricingConditionRecordDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapSalesPricingConditionRecordDatumR) NewStruct() *sapSalesPricingConditionRecordDatumR {
	return &sapSalesPricingConditionRecordDatumR{}
}

// sapSalesPricingConditionRecordDatumL is where Load methods for each relationship are stored.
type sapSalesPricingConditionRecordDatumL struct{}

var (
	sapSalesPricingConditionRecordDatumAllColumns            = []string{"ConditionRecord", "ConditionValidityEndDate", "ConditionSequentialNumber", "ConditionTable", "ConditionApplication", "ConditionType", "ConditionValidityStartDate", "CreationDate", "PricingScaleType", "PricingScaleBasis", "ConditionScaleQuantity", "ConditionScaleQuantityUnit", "ConditionScaleAmount", "ConditionScaleAmountCurrency", "ConditionCalculationType", "ConditionRateValue", "ConditionRateValueUnit", "ConditionQuantity", "ConditionQuantityUnit", "BaseUnit", "ConditionIsDeleted", "PaymentTerms", "IncrementalScale", "PricingScaleLine", "ConditionReleaseStatus"}
	sapSalesPricingConditionRecordDatumColumnsWithoutDefault = []string{"ConditionRecord", "ConditionValidityEndDate", "ConditionSequentialNumber", "ConditionTable", "ConditionApplication", "ConditionType", "ConditionValidityStartDate", "CreationDate", "PricingScaleType", "PricingScaleBasis", "ConditionScaleQuantity", "ConditionScaleQuantityUnit", "ConditionScaleAmount", "ConditionScaleAmountCurrency", "ConditionCalculationType", "ConditionRateValue", "ConditionRateValueUnit", "ConditionQuantity", "ConditionQuantityUnit", "BaseUnit", "ConditionIsDeleted", "PaymentTerms", "IncrementalScale", "PricingScaleLine", "ConditionReleaseStatus"}
	sapSalesPricingConditionRecordDatumColumnsWithDefault    = []string{}
	sapSalesPricingConditionRecordDatumPrimaryKeyColumns     = []string{"ConditionRecord", "ConditionValidityEndDate", "ConditionSequentialNumber"}
	sapSalesPricingConditionRecordDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesPricingConditionRecordDatumSlice is an alias for a slice of pointers to SapSalesPricingConditionRecordDatum.
	// This should almost always be used instead of []SapSalesPricingConditionRecordDatum.
	SapSalesPricingConditionRecordDatumSlice []*SapSalesPricingConditionRecordDatum
	// SapSalesPricingConditionRecordDatumHook is the signature for custom SapSalesPricingConditionRecordDatum hook methods
	SapSalesPricingConditionRecordDatumHook func(context.Context, boil.ContextExecutor, *SapSalesPricingConditionRecordDatum) error

	sapSalesPricingConditionRecordDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesPricingConditionRecordDatumType                 = reflect.TypeOf(&SapSalesPricingConditionRecordDatum{})
	sapSalesPricingConditionRecordDatumMapping              = queries.MakeStructMapping(sapSalesPricingConditionRecordDatumType)
	sapSalesPricingConditionRecordDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, sapSalesPricingConditionRecordDatumPrimaryKeyColumns)
	sapSalesPricingConditionRecordDatumInsertCacheMut       sync.RWMutex
	sapSalesPricingConditionRecordDatumInsertCache          = make(map[string]insertCache)
	sapSalesPricingConditionRecordDatumUpdateCacheMut       sync.RWMutex
	sapSalesPricingConditionRecordDatumUpdateCache          = make(map[string]updateCache)
	sapSalesPricingConditionRecordDatumUpsertCacheMut       sync.RWMutex
	sapSalesPricingConditionRecordDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesPricingConditionRecordDatumAfterSelectHooks []SapSalesPricingConditionRecordDatumHook

var sapSalesPricingConditionRecordDatumBeforeInsertHooks []SapSalesPricingConditionRecordDatumHook
var sapSalesPricingConditionRecordDatumAfterInsertHooks []SapSalesPricingConditionRecordDatumHook

var sapSalesPricingConditionRecordDatumBeforeUpdateHooks []SapSalesPricingConditionRecordDatumHook
var sapSalesPricingConditionRecordDatumAfterUpdateHooks []SapSalesPricingConditionRecordDatumHook

var sapSalesPricingConditionRecordDatumBeforeDeleteHooks []SapSalesPricingConditionRecordDatumHook
var sapSalesPricingConditionRecordDatumAfterDeleteHooks []SapSalesPricingConditionRecordDatumHook

var sapSalesPricingConditionRecordDatumBeforeUpsertHooks []SapSalesPricingConditionRecordDatumHook
var sapSalesPricingConditionRecordDatumAfterUpsertHooks []SapSalesPricingConditionRecordDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesPricingConditionRecordDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesPricingConditionRecordDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesPricingConditionRecordDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesPricingConditionRecordDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesPricingConditionRecordDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesPricingConditionRecordDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesPricingConditionRecordDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesPricingConditionRecordDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesPricingConditionRecordDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionRecordDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesPricingConditionRecordDatumHook registers your hook function for all future operations.
func AddSapSalesPricingConditionRecordDatumHook(hookPoint boil.HookPoint, sapSalesPricingConditionRecordDatumHook SapSalesPricingConditionRecordDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesPricingConditionRecordDatumAfterSelectHooks = append(sapSalesPricingConditionRecordDatumAfterSelectHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.BeforeInsertHook:
		sapSalesPricingConditionRecordDatumBeforeInsertHooks = append(sapSalesPricingConditionRecordDatumBeforeInsertHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.AfterInsertHook:
		sapSalesPricingConditionRecordDatumAfterInsertHooks = append(sapSalesPricingConditionRecordDatumAfterInsertHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesPricingConditionRecordDatumBeforeUpdateHooks = append(sapSalesPricingConditionRecordDatumBeforeUpdateHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.AfterUpdateHook:
		sapSalesPricingConditionRecordDatumAfterUpdateHooks = append(sapSalesPricingConditionRecordDatumAfterUpdateHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesPricingConditionRecordDatumBeforeDeleteHooks = append(sapSalesPricingConditionRecordDatumBeforeDeleteHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.AfterDeleteHook:
		sapSalesPricingConditionRecordDatumAfterDeleteHooks = append(sapSalesPricingConditionRecordDatumAfterDeleteHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesPricingConditionRecordDatumBeforeUpsertHooks = append(sapSalesPricingConditionRecordDatumBeforeUpsertHooks, sapSalesPricingConditionRecordDatumHook)
	case boil.AfterUpsertHook:
		sapSalesPricingConditionRecordDatumAfterUpsertHooks = append(sapSalesPricingConditionRecordDatumAfterUpsertHooks, sapSalesPricingConditionRecordDatumHook)
	}
}

// One returns a single sapSalesPricingConditionRecordDatum record from the query.
func (q sapSalesPricingConditionRecordDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesPricingConditionRecordDatum, error) {
	o := &SapSalesPricingConditionRecordDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_pricing_condition_record_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesPricingConditionRecordDatum records from the query.
func (q sapSalesPricingConditionRecordDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesPricingConditionRecordDatumSlice, error) {
	var o []*SapSalesPricingConditionRecordDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesPricingConditionRecordDatum slice")
	}

	if len(sapSalesPricingConditionRecordDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesPricingConditionRecordDatum records in the query.
func (q sapSalesPricingConditionRecordDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_pricing_condition_record_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesPricingConditionRecordDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_pricing_condition_record_data exists")
	}

	return count > 0, nil
}

// SapSalesPricingConditionRecordData retrieves all the records using an executor.
func SapSalesPricingConditionRecordData(mods ...qm.QueryMod) sapSalesPricingConditionRecordDatumQuery {
	mods = append(mods, qm.From("`sap_sales_pricing_condition_record_data`"))
	return sapSalesPricingConditionRecordDatumQuery{NewQuery(mods...)}
}

// FindSapSalesPricingConditionRecordDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesPricingConditionRecordDatum(ctx context.Context, exec boil.ContextExecutor, conditionRecord string, conditionValidityEndDate string, conditionSequentialNumber string, selectCols ...string) (*SapSalesPricingConditionRecordDatum, error) {
	sapSalesPricingConditionRecordDatumObj := &SapSalesPricingConditionRecordDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_pricing_condition_record_data` where `ConditionRecord`=? AND `ConditionValidityEndDate`=? AND `ConditionSequentialNumber`=?", sel,
	)

	q := queries.Raw(query, conditionRecord, conditionValidityEndDate, conditionSequentialNumber)

	err := q.Bind(ctx, exec, sapSalesPricingConditionRecordDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_pricing_condition_record_data")
	}

	if err = sapSalesPricingConditionRecordDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesPricingConditionRecordDatumObj, err
	}

	return sapSalesPricingConditionRecordDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesPricingConditionRecordDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_pricing_condition_record_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesPricingConditionRecordDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesPricingConditionRecordDatumInsertCacheMut.RLock()
	cache, cached := sapSalesPricingConditionRecordDatumInsertCache[key]
	sapSalesPricingConditionRecordDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesPricingConditionRecordDatumAllColumns,
			sapSalesPricingConditionRecordDatumColumnsWithDefault,
			sapSalesPricingConditionRecordDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_pricing_condition_record_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_pricing_condition_record_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_pricing_condition_record_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesPricingConditionRecordDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_pricing_condition_record_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ConditionRecord,
		o.ConditionValidityEndDate,
		o.ConditionSequentialNumber,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_pricing_condition_record_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesPricingConditionRecordDatumInsertCacheMut.Lock()
		sapSalesPricingConditionRecordDatumInsertCache[key] = cache
		sapSalesPricingConditionRecordDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesPricingConditionRecordDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesPricingConditionRecordDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesPricingConditionRecordDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesPricingConditionRecordDatumUpdateCache[key]
	sapSalesPricingConditionRecordDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesPricingConditionRecordDatumAllColumns,
			sapSalesPricingConditionRecordDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_pricing_condition_record_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_pricing_condition_record_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesPricingConditionRecordDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, append(wl, sapSalesPricingConditionRecordDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_pricing_condition_record_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_pricing_condition_record_data")
	}

	if !cached {
		sapSalesPricingConditionRecordDatumUpdateCacheMut.Lock()
		sapSalesPricingConditionRecordDatumUpdateCache[key] = cache
		sapSalesPricingConditionRecordDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesPricingConditionRecordDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_pricing_condition_record_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_pricing_condition_record_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesPricingConditionRecordDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesPricingConditionRecordDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_pricing_condition_record_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesPricingConditionRecordDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesPricingConditionRecordDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesPricingConditionRecordDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesPricingConditionRecordDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesPricingConditionRecordDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_pricing_condition_record_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesPricingConditionRecordDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesPricingConditionRecordDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesPricingConditionRecordDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesPricingConditionRecordDatumUpsertCache[key]
	sapSalesPricingConditionRecordDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesPricingConditionRecordDatumAllColumns,
			sapSalesPricingConditionRecordDatumColumnsWithDefault,
			sapSalesPricingConditionRecordDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesPricingConditionRecordDatumAllColumns,
			sapSalesPricingConditionRecordDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_pricing_condition_record_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_pricing_condition_record_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_pricing_condition_record_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_pricing_condition_record_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesPricingConditionRecordDatumType, sapSalesPricingConditionRecordDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_pricing_condition_record_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_pricing_condition_record_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesPricingConditionRecordDatumUpsertCacheMut.Lock()
		sapSalesPricingConditionRecordDatumUpsertCache[key] = cache
		sapSalesPricingConditionRecordDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesPricingConditionRecordDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesPricingConditionRecordDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesPricingConditionRecordDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesPricingConditionRecordDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_pricing_condition_record_data` WHERE `ConditionRecord`=? AND `ConditionValidityEndDate`=? AND `ConditionSequentialNumber`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_pricing_condition_record_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_pricing_condition_record_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesPricingConditionRecordDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesPricingConditionRecordDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_pricing_condition_record_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_pricing_condition_record_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesPricingConditionRecordDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesPricingConditionRecordDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesPricingConditionRecordDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_pricing_condition_record_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesPricingConditionRecordDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesPricingConditionRecordDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_pricing_condition_record_data")
	}

	if len(sapSalesPricingConditionRecordDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesPricingConditionRecordDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesPricingConditionRecordDatum(ctx, exec, o.ConditionRecord, o.ConditionValidityEndDate, o.ConditionSequentialNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesPricingConditionRecordDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesPricingConditionRecordDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesPricingConditionRecordDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_pricing_condition_record_data`.* FROM `sap_sales_pricing_condition_record_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesPricingConditionRecordDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesPricingConditionRecordDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesPricingConditionRecordDatumExists checks if the SapSalesPricingConditionRecordDatum row exists.
func SapSalesPricingConditionRecordDatumExists(ctx context.Context, exec boil.ContextExecutor, conditionRecord string, conditionValidityEndDate string, conditionSequentialNumber string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_pricing_condition_record_data` where `ConditionRecord`=? AND `ConditionValidityEndDate`=? AND `ConditionSequentialNumber`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, conditionRecord, conditionValidityEndDate, conditionSequentialNumber)
	}
	row := exec.QueryRowContext(ctx, sql, conditionRecord, conditionValidityEndDate, conditionSequentialNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_pricing_condition_record_data exists")
	}

	return exists, nil
}
