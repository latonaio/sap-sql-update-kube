// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenancePlanCallObjectsDatum is an object representing the database table.
type SapMaintenancePlanCallObjectsDatum struct {
	MaintenancePlan              string      `boil:"MaintenancePlan" json:"MaintenancePlan" toml:"MaintenancePlan" yaml:"MaintenancePlan"`
	MaintenanceItem              string      `boil:"MaintenanceItem" json:"MaintenanceItem" toml:"MaintenanceItem" yaml:"MaintenanceItem"`
	MaintenancePlanCallNumber    int         `boil:"MaintenancePlanCallNumber" json:"MaintenancePlanCallNumber" toml:"MaintenancePlanCallNumber" yaml:"MaintenancePlanCallNumber"`
	MaintenanceOrder             null.String `boil:"MaintenanceOrder" json:"MaintenanceOrder,omitempty" toml:"MaintenanceOrder" yaml:"MaintenanceOrder,omitempty"`
	MaintenanceNotification      null.String `boil:"MaintenanceNotification" json:"MaintenanceNotification,omitempty" toml:"MaintenanceNotification" yaml:"MaintenanceNotification,omitempty"`
	ServiceOrder                 null.String `boil:"ServiceOrder" json:"ServiceOrder,omitempty" toml:"ServiceOrder" yaml:"ServiceOrder,omitempty"`
	MaintCallHorizonIsNotReached null.Bool   `boil:"MaintCallHorizonIsNotReached" json:"MaintCallHorizonIsNotReached,omitempty" toml:"MaintCallHorizonIsNotReached" yaml:"MaintCallHorizonIsNotReached,omitempty"`
	SchedulingStatus             null.String `boil:"SchedulingStatus" json:"SchedulingStatus,omitempty" toml:"SchedulingStatus" yaml:"SchedulingStatus,omitempty"`
	PlannedStartDate             null.String `boil:"PlannedStartDate" json:"PlannedStartDate,omitempty" toml:"PlannedStartDate" yaml:"PlannedStartDate,omitempty"`

	R *sapMaintenancePlanCallObjectsDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenancePlanCallObjectsDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenancePlanCallObjectsDatumColumns = struct {
	MaintenancePlan              string
	MaintenanceItem              string
	MaintenancePlanCallNumber    string
	MaintenanceOrder             string
	MaintenanceNotification      string
	ServiceOrder                 string
	MaintCallHorizonIsNotReached string
	SchedulingStatus             string
	PlannedStartDate             string
}{
	MaintenancePlan:              "MaintenancePlan",
	MaintenanceItem:              "MaintenanceItem",
	MaintenancePlanCallNumber:    "MaintenancePlanCallNumber",
	MaintenanceOrder:             "MaintenanceOrder",
	MaintenanceNotification:      "MaintenanceNotification",
	ServiceOrder:                 "ServiceOrder",
	MaintCallHorizonIsNotReached: "MaintCallHorizonIsNotReached",
	SchedulingStatus:             "SchedulingStatus",
	PlannedStartDate:             "PlannedStartDate",
}

var SapMaintenancePlanCallObjectsDatumTableColumns = struct {
	MaintenancePlan              string
	MaintenanceItem              string
	MaintenancePlanCallNumber    string
	MaintenanceOrder             string
	MaintenanceNotification      string
	ServiceOrder                 string
	MaintCallHorizonIsNotReached string
	SchedulingStatus             string
	PlannedStartDate             string
}{
	MaintenancePlan:              "sap_maintenance_plan_call_objects_data.MaintenancePlan",
	MaintenanceItem:              "sap_maintenance_plan_call_objects_data.MaintenanceItem",
	MaintenancePlanCallNumber:    "sap_maintenance_plan_call_objects_data.MaintenancePlanCallNumber",
	MaintenanceOrder:             "sap_maintenance_plan_call_objects_data.MaintenanceOrder",
	MaintenanceNotification:      "sap_maintenance_plan_call_objects_data.MaintenanceNotification",
	ServiceOrder:                 "sap_maintenance_plan_call_objects_data.ServiceOrder",
	MaintCallHorizonIsNotReached: "sap_maintenance_plan_call_objects_data.MaintCallHorizonIsNotReached",
	SchedulingStatus:             "sap_maintenance_plan_call_objects_data.SchedulingStatus",
	PlannedStartDate:             "sap_maintenance_plan_call_objects_data.PlannedStartDate",
}

// Generated where

var SapMaintenancePlanCallObjectsDatumWhere = struct {
	MaintenancePlan              whereHelperstring
	MaintenanceItem              whereHelperstring
	MaintenancePlanCallNumber    whereHelperint
	MaintenanceOrder             whereHelpernull_String
	MaintenanceNotification      whereHelpernull_String
	ServiceOrder                 whereHelpernull_String
	MaintCallHorizonIsNotReached whereHelpernull_Bool
	SchedulingStatus             whereHelpernull_String
	PlannedStartDate             whereHelpernull_String
}{
	MaintenancePlan:              whereHelperstring{field: "`sap_maintenance_plan_call_objects_data`.`MaintenancePlan`"},
	MaintenanceItem:              whereHelperstring{field: "`sap_maintenance_plan_call_objects_data`.`MaintenanceItem`"},
	MaintenancePlanCallNumber:    whereHelperint{field: "`sap_maintenance_plan_call_objects_data`.`MaintenancePlanCallNumber`"},
	MaintenanceOrder:             whereHelpernull_String{field: "`sap_maintenance_plan_call_objects_data`.`MaintenanceOrder`"},
	MaintenanceNotification:      whereHelpernull_String{field: "`sap_maintenance_plan_call_objects_data`.`MaintenanceNotification`"},
	ServiceOrder:                 whereHelpernull_String{field: "`sap_maintenance_plan_call_objects_data`.`ServiceOrder`"},
	MaintCallHorizonIsNotReached: whereHelpernull_Bool{field: "`sap_maintenance_plan_call_objects_data`.`MaintCallHorizonIsNotReached`"},
	SchedulingStatus:             whereHelpernull_String{field: "`sap_maintenance_plan_call_objects_data`.`SchedulingStatus`"},
	PlannedStartDate:             whereHelpernull_String{field: "`sap_maintenance_plan_call_objects_data`.`PlannedStartDate`"},
}

// SapMaintenancePlanCallObjectsDatumRels is where relationship names are stored.
var SapMaintenancePlanCallObjectsDatumRels = struct {
	MaintenancePlanSapMaintenancePlanHeaderDatum string
}{
	MaintenancePlanSapMaintenancePlanHeaderDatum: "MaintenancePlanSapMaintenancePlanHeaderDatum",
}

// sapMaintenancePlanCallObjectsDatumR is where relationships are stored.
type sapMaintenancePlanCallObjectsDatumR struct {
	MaintenancePlanSapMaintenancePlanHeaderDatum *SapMaintenancePlanHeaderDatum `boil:"MaintenancePlanSapMaintenancePlanHeaderDatum" json:"MaintenancePlanSapMaintenancePlanHeaderDatum" toml:"MaintenancePlanSapMaintenancePlanHeaderDatum" yaml:"MaintenancePlanSapMaintenancePlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenancePlanCallObjectsDatumR) NewStruct() *sapMaintenancePlanCallObjectsDatumR {
	return &sapMaintenancePlanCallObjectsDatumR{}
}

// sapMaintenancePlanCallObjectsDatumL is where Load methods for each relationship are stored.
type sapMaintenancePlanCallObjectsDatumL struct{}

var (
	sapMaintenancePlanCallObjectsDatumAllColumns            = []string{"MaintenancePlan", "MaintenanceItem", "MaintenancePlanCallNumber", "MaintenanceOrder", "MaintenanceNotification", "ServiceOrder", "MaintCallHorizonIsNotReached", "SchedulingStatus", "PlannedStartDate"}
	sapMaintenancePlanCallObjectsDatumColumnsWithoutDefault = []string{"MaintenancePlan", "MaintenanceItem", "MaintenancePlanCallNumber", "MaintenanceOrder", "MaintenanceNotification", "ServiceOrder", "MaintCallHorizonIsNotReached", "SchedulingStatus", "PlannedStartDate"}
	sapMaintenancePlanCallObjectsDatumColumnsWithDefault    = []string{}
	sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns     = []string{"MaintenancePlan", "MaintenanceItem", "MaintenancePlanCallNumber"}
)

type (
	// SapMaintenancePlanCallObjectsDatumSlice is an alias for a slice of pointers to SapMaintenancePlanCallObjectsDatum.
	// This should almost always be used instead of []SapMaintenancePlanCallObjectsDatum.
	SapMaintenancePlanCallObjectsDatumSlice []*SapMaintenancePlanCallObjectsDatum
	// SapMaintenancePlanCallObjectsDatumHook is the signature for custom SapMaintenancePlanCallObjectsDatum hook methods
	SapMaintenancePlanCallObjectsDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenancePlanCallObjectsDatum) error

	sapMaintenancePlanCallObjectsDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenancePlanCallObjectsDatumType                 = reflect.TypeOf(&SapMaintenancePlanCallObjectsDatum{})
	sapMaintenancePlanCallObjectsDatumMapping              = queries.MakeStructMapping(sapMaintenancePlanCallObjectsDatumType)
	sapMaintenancePlanCallObjectsDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns)
	sapMaintenancePlanCallObjectsDatumInsertCacheMut       sync.RWMutex
	sapMaintenancePlanCallObjectsDatumInsertCache          = make(map[string]insertCache)
	sapMaintenancePlanCallObjectsDatumUpdateCacheMut       sync.RWMutex
	sapMaintenancePlanCallObjectsDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenancePlanCallObjectsDatumUpsertCacheMut       sync.RWMutex
	sapMaintenancePlanCallObjectsDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenancePlanCallObjectsDatumBeforeInsertHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumBeforeUpdateHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumBeforeDeleteHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumBeforeUpsertHooks []SapMaintenancePlanCallObjectsDatumHook

var sapMaintenancePlanCallObjectsDatumAfterInsertHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumAfterSelectHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumAfterUpdateHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumAfterDeleteHooks []SapMaintenancePlanCallObjectsDatumHook
var sapMaintenancePlanCallObjectsDatumAfterUpsertHooks []SapMaintenancePlanCallObjectsDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenancePlanCallObjectsDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanCallObjectsDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenancePlanCallObjectsDatumHook registers your hook function for all future operations.
func AddSapMaintenancePlanCallObjectsDatumHook(hookPoint boil.HookPoint, sapMaintenancePlanCallObjectsDatumHook SapMaintenancePlanCallObjectsDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapMaintenancePlanCallObjectsDatumBeforeInsertHooks = append(sapMaintenancePlanCallObjectsDatumBeforeInsertHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenancePlanCallObjectsDatumBeforeUpdateHooks = append(sapMaintenancePlanCallObjectsDatumBeforeUpdateHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenancePlanCallObjectsDatumBeforeDeleteHooks = append(sapMaintenancePlanCallObjectsDatumBeforeDeleteHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenancePlanCallObjectsDatumBeforeUpsertHooks = append(sapMaintenancePlanCallObjectsDatumBeforeUpsertHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.AfterInsertHook:
		sapMaintenancePlanCallObjectsDatumAfterInsertHooks = append(sapMaintenancePlanCallObjectsDatumAfterInsertHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.AfterSelectHook:
		sapMaintenancePlanCallObjectsDatumAfterSelectHooks = append(sapMaintenancePlanCallObjectsDatumAfterSelectHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenancePlanCallObjectsDatumAfterUpdateHooks = append(sapMaintenancePlanCallObjectsDatumAfterUpdateHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenancePlanCallObjectsDatumAfterDeleteHooks = append(sapMaintenancePlanCallObjectsDatumAfterDeleteHooks, sapMaintenancePlanCallObjectsDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenancePlanCallObjectsDatumAfterUpsertHooks = append(sapMaintenancePlanCallObjectsDatumAfterUpsertHooks, sapMaintenancePlanCallObjectsDatumHook)
	}
}

// One returns a single sapMaintenancePlanCallObjectsDatum record from the query.
func (q sapMaintenancePlanCallObjectsDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenancePlanCallObjectsDatum, error) {
	o := &SapMaintenancePlanCallObjectsDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_plan_call_objects_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenancePlanCallObjectsDatum records from the query.
func (q sapMaintenancePlanCallObjectsDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenancePlanCallObjectsDatumSlice, error) {
	var o []*SapMaintenancePlanCallObjectsDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenancePlanCallObjectsDatum slice")
	}

	if len(sapMaintenancePlanCallObjectsDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenancePlanCallObjectsDatum records in the query.
func (q sapMaintenancePlanCallObjectsDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_plan_call_objects_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenancePlanCallObjectsDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_plan_call_objects_data exists")
	}

	return count > 0, nil
}

// MaintenancePlanSapMaintenancePlanHeaderDatum pointed to by the foreign key.
func (o *SapMaintenancePlanCallObjectsDatum) MaintenancePlanSapMaintenancePlanHeaderDatum(mods ...qm.QueryMod) sapMaintenancePlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenancePlan` = ?", o.MaintenancePlan),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenancePlanHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_plan_header_data`")

	return query
}

// LoadMaintenancePlanSapMaintenancePlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenancePlanCallObjectsDatumL) LoadMaintenancePlanSapMaintenancePlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenancePlanCallObjectsDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenancePlanCallObjectsDatum
	var object *SapMaintenancePlanCallObjectsDatum

	if singular {
		object = maybeSapMaintenancePlanCallObjectsDatum.(*SapMaintenancePlanCallObjectsDatum)
	} else {
		slice = *maybeSapMaintenancePlanCallObjectsDatum.(*[]*SapMaintenancePlanCallObjectsDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenancePlanCallObjectsDatumR{}
		}
		args = append(args, object.MaintenancePlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenancePlanCallObjectsDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenancePlan {
					continue Outer
				}
			}

			args = append(args, obj.MaintenancePlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_plan_header_data`),
		qm.WhereIn(`sap_maintenance_plan_header_data.MaintenancePlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenancePlanHeaderDatum")
	}

	var resultSlice []*SapMaintenancePlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenancePlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_plan_header_data")
	}

	if len(sapMaintenancePlanCallObjectsDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenancePlanSapMaintenancePlanHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenancePlanHeaderDatumR{}
		}
		foreign.R.MaintenancePlanSapMaintenancePlanCallObjectsData = append(foreign.R.MaintenancePlanSapMaintenancePlanCallObjectsData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenancePlan == foreign.MaintenancePlan {
				local.R.MaintenancePlanSapMaintenancePlanHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenancePlanHeaderDatumR{}
				}
				foreign.R.MaintenancePlanSapMaintenancePlanCallObjectsData = append(foreign.R.MaintenancePlanSapMaintenancePlanCallObjectsData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenancePlanSapMaintenancePlanHeaderDatum of the sapMaintenancePlanCallObjectsDatum to the related item.
// Sets o.R.MaintenancePlanSapMaintenancePlanHeaderDatum to related.
// Adds o to related.R.MaintenancePlanSapMaintenancePlanCallObjectsData.
func (o *SapMaintenancePlanCallObjectsDatum) SetMaintenancePlanSapMaintenancePlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenancePlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_plan_call_objects_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenancePlan"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenancePlan, o.MaintenancePlan, o.MaintenanceItem, o.MaintenancePlanCallNumber}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenancePlan = related.MaintenancePlan
	if o.R == nil {
		o.R = &sapMaintenancePlanCallObjectsDatumR{
			MaintenancePlanSapMaintenancePlanHeaderDatum: related,
		}
	} else {
		o.R.MaintenancePlanSapMaintenancePlanHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenancePlanHeaderDatumR{
			MaintenancePlanSapMaintenancePlanCallObjectsData: SapMaintenancePlanCallObjectsDatumSlice{o},
		}
	} else {
		related.R.MaintenancePlanSapMaintenancePlanCallObjectsData = append(related.R.MaintenancePlanSapMaintenancePlanCallObjectsData, o)
	}

	return nil
}

// SapMaintenancePlanCallObjectsData retrieves all the records using an executor.
func SapMaintenancePlanCallObjectsData(mods ...qm.QueryMod) sapMaintenancePlanCallObjectsDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_plan_call_objects_data`"))
	return sapMaintenancePlanCallObjectsDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenancePlanCallObjectsDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenancePlanCallObjectsDatum(ctx context.Context, exec boil.ContextExecutor, maintenancePlan string, maintenanceItem string, maintenancePlanCallNumber int, selectCols ...string) (*SapMaintenancePlanCallObjectsDatum, error) {
	sapMaintenancePlanCallObjectsDatumObj := &SapMaintenancePlanCallObjectsDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_plan_call_objects_data` where `MaintenancePlan`=? AND `MaintenanceItem`=? AND `MaintenancePlanCallNumber`=?", sel,
	)

	q := queries.Raw(query, maintenancePlan, maintenanceItem, maintenancePlanCallNumber)

	err := q.Bind(ctx, exec, sapMaintenancePlanCallObjectsDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_plan_call_objects_data")
	}

	if err = sapMaintenancePlanCallObjectsDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenancePlanCallObjectsDatumObj, err
	}

	return sapMaintenancePlanCallObjectsDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenancePlanCallObjectsDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_plan_call_objects_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenancePlanCallObjectsDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenancePlanCallObjectsDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenancePlanCallObjectsDatumInsertCache[key]
	sapMaintenancePlanCallObjectsDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenancePlanCallObjectsDatumAllColumns,
			sapMaintenancePlanCallObjectsDatumColumnsWithDefault,
			sapMaintenancePlanCallObjectsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_plan_call_objects_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_plan_call_objects_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_plan_call_objects_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_plan_call_objects_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenancePlan,
		o.MaintenanceItem,
		o.MaintenancePlanCallNumber,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_plan_call_objects_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenancePlanCallObjectsDatumInsertCacheMut.Lock()
		sapMaintenancePlanCallObjectsDatumInsertCache[key] = cache
		sapMaintenancePlanCallObjectsDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenancePlanCallObjectsDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenancePlanCallObjectsDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenancePlanCallObjectsDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenancePlanCallObjectsDatumUpdateCache[key]
	sapMaintenancePlanCallObjectsDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenancePlanCallObjectsDatumAllColumns,
			sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_plan_call_objects_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_plan_call_objects_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, append(wl, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_plan_call_objects_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_plan_call_objects_data")
	}

	if !cached {
		sapMaintenancePlanCallObjectsDatumUpdateCacheMut.Lock()
		sapMaintenancePlanCallObjectsDatumUpdateCache[key] = cache
		sapMaintenancePlanCallObjectsDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenancePlanCallObjectsDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_plan_call_objects_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_plan_call_objects_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenancePlanCallObjectsDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanCallObjectsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_plan_call_objects_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenancePlanCallObjectsDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenancePlanCallObjectsDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenancePlanCallObjectsDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenancePlanCallObjectsDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_plan_call_objects_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenancePlanCallObjectsDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenancePlanCallObjectsDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenancePlanCallObjectsDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenancePlanCallObjectsDatumUpsertCache[key]
	sapMaintenancePlanCallObjectsDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenancePlanCallObjectsDatumAllColumns,
			sapMaintenancePlanCallObjectsDatumColumnsWithDefault,
			sapMaintenancePlanCallObjectsDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapMaintenancePlanCallObjectsDatumAllColumns,
			sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_plan_call_objects_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_plan_call_objects_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_plan_call_objects_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_plan_call_objects_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenancePlanCallObjectsDatumType, sapMaintenancePlanCallObjectsDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_plan_call_objects_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_plan_call_objects_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenancePlanCallObjectsDatumUpsertCacheMut.Lock()
		sapMaintenancePlanCallObjectsDatumUpsertCache[key] = cache
		sapMaintenancePlanCallObjectsDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenancePlanCallObjectsDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenancePlanCallObjectsDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenancePlanCallObjectsDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenancePlanCallObjectsDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_plan_call_objects_data` WHERE `MaintenancePlan`=? AND `MaintenanceItem`=? AND `MaintenancePlanCallNumber`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_plan_call_objects_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_plan_call_objects_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenancePlanCallObjectsDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenancePlanCallObjectsDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_plan_call_objects_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_plan_call_objects_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenancePlanCallObjectsDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenancePlanCallObjectsDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanCallObjectsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_plan_call_objects_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenancePlanCallObjectsDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_plan_call_objects_data")
	}

	if len(sapMaintenancePlanCallObjectsDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenancePlanCallObjectsDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenancePlanCallObjectsDatum(ctx, exec, o.MaintenancePlan, o.MaintenanceItem, o.MaintenancePlanCallNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenancePlanCallObjectsDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenancePlanCallObjectsDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanCallObjectsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_plan_call_objects_data`.* FROM `sap_maintenance_plan_call_objects_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanCallObjectsDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenancePlanCallObjectsDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenancePlanCallObjectsDatumExists checks if the SapMaintenancePlanCallObjectsDatum row exists.
func SapMaintenancePlanCallObjectsDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenancePlan string, maintenanceItem string, maintenancePlanCallNumber int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_plan_call_objects_data` where `MaintenancePlan`=? AND `MaintenanceItem`=? AND `MaintenancePlanCallNumber`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenancePlan, maintenanceItem, maintenancePlanCallNumber)
	}
	row := exec.QueryRowContext(ctx, sql, maintenancePlan, maintenanceItem, maintenancePlanCallNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_plan_call_objects_data exists")
	}

	return exists, nil
}
