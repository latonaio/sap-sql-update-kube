// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBillingDocumentItemPricingElementDatum is an object representing the database table.
type SapBillingDocumentItemPricingElementDatum struct {
	BillingDocument             string      `boil:"BillingDocument" json:"BillingDocument" toml:"BillingDocument" yaml:"BillingDocument"`
	BillingDocumentItem         string      `boil:"BillingDocumentItem" json:"BillingDocumentItem" toml:"BillingDocumentItem" yaml:"BillingDocumentItem"`
	PricingProcedureStep        string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter     string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionType               null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PricingDateTime             null.String `boil:"PricingDateTime" json:"PricingDateTime,omitempty" toml:"PricingDateTime" yaml:"PricingDateTime,omitempty"`
	ConditionCalculationType    null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionBaseValue          null.String `boil:"ConditionBaseValue" json:"ConditionBaseValue,omitempty" toml:"ConditionBaseValue" yaml:"ConditionBaseValue,omitempty"`
	ConditionRateValue          null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency           null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity           null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit       null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	ConditionCategory           null.String `boil:"ConditionCategory" json:"ConditionCategory,omitempty" toml:"ConditionCategory" yaml:"ConditionCategory,omitempty"`
	PricingScaleType            null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	ConditionRecord             null.String `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber   null.String `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	TaxCode                     null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ConditionAmount             null.String `boil:"ConditionAmount" json:"ConditionAmount,omitempty" toml:"ConditionAmount" yaml:"ConditionAmount,omitempty"`
	TransactionCurrency         null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingScaleBasis           null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleBasisValue    null.String `boil:"ConditionScaleBasisValue" json:"ConditionScaleBasisValue,omitempty" toml:"ConditionScaleBasisValue" yaml:"ConditionScaleBasisValue,omitempty"`
	ConditionScaleBasisUnit     null.String `boil:"ConditionScaleBasisUnit" json:"ConditionScaleBasisUnit,omitempty" toml:"ConditionScaleBasisUnit" yaml:"ConditionScaleBasisUnit,omitempty"`
	ConditionScaleBasisCurrency null.String `boil:"ConditionScaleBasisCurrency" json:"ConditionScaleBasisCurrency,omitempty" toml:"ConditionScaleBasisCurrency" yaml:"ConditionScaleBasisCurrency,omitempty"`
	ConditionIsManuallyChanged  null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`

	R *sapBillingDocumentItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBillingDocumentItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBillingDocumentItemPricingElementDatumColumns = struct {
	BillingDocument             string
	BillingDocumentItem         string
	PricingProcedureStep        string
	PricingProcedureCounter     string
	ConditionType               string
	PricingDateTime             string
	ConditionCalculationType    string
	ConditionBaseValue          string
	ConditionRateValue          string
	ConditionCurrency           string
	ConditionQuantity           string
	ConditionQuantityUnit       string
	ConditionCategory           string
	PricingScaleType            string
	ConditionRecord             string
	ConditionSequentialNumber   string
	TaxCode                     string
	ConditionAmount             string
	TransactionCurrency         string
	PricingScaleBasis           string
	ConditionScaleBasisValue    string
	ConditionScaleBasisUnit     string
	ConditionScaleBasisCurrency string
	ConditionIsManuallyChanged  string
}{
	BillingDocument:             "BillingDocument",
	BillingDocumentItem:         "BillingDocumentItem",
	PricingProcedureStep:        "PricingProcedureStep",
	PricingProcedureCounter:     "PricingProcedureCounter",
	ConditionType:               "ConditionType",
	PricingDateTime:             "PricingDateTime",
	ConditionCalculationType:    "ConditionCalculationType",
	ConditionBaseValue:          "ConditionBaseValue",
	ConditionRateValue:          "ConditionRateValue",
	ConditionCurrency:           "ConditionCurrency",
	ConditionQuantity:           "ConditionQuantity",
	ConditionQuantityUnit:       "ConditionQuantityUnit",
	ConditionCategory:           "ConditionCategory",
	PricingScaleType:            "PricingScaleType",
	ConditionRecord:             "ConditionRecord",
	ConditionSequentialNumber:   "ConditionSequentialNumber",
	TaxCode:                     "TaxCode",
	ConditionAmount:             "ConditionAmount",
	TransactionCurrency:         "TransactionCurrency",
	PricingScaleBasis:           "PricingScaleBasis",
	ConditionScaleBasisValue:    "ConditionScaleBasisValue",
	ConditionScaleBasisUnit:     "ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency: "ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:  "ConditionIsManuallyChanged",
}

var SapBillingDocumentItemPricingElementDatumTableColumns = struct {
	BillingDocument             string
	BillingDocumentItem         string
	PricingProcedureStep        string
	PricingProcedureCounter     string
	ConditionType               string
	PricingDateTime             string
	ConditionCalculationType    string
	ConditionBaseValue          string
	ConditionRateValue          string
	ConditionCurrency           string
	ConditionQuantity           string
	ConditionQuantityUnit       string
	ConditionCategory           string
	PricingScaleType            string
	ConditionRecord             string
	ConditionSequentialNumber   string
	TaxCode                     string
	ConditionAmount             string
	TransactionCurrency         string
	PricingScaleBasis           string
	ConditionScaleBasisValue    string
	ConditionScaleBasisUnit     string
	ConditionScaleBasisCurrency string
	ConditionIsManuallyChanged  string
}{
	BillingDocument:             "sap_billing_document_item_pricing_element_data.BillingDocument",
	BillingDocumentItem:         "sap_billing_document_item_pricing_element_data.BillingDocumentItem",
	PricingProcedureStep:        "sap_billing_document_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter:     "sap_billing_document_item_pricing_element_data.PricingProcedureCounter",
	ConditionType:               "sap_billing_document_item_pricing_element_data.ConditionType",
	PricingDateTime:             "sap_billing_document_item_pricing_element_data.PricingDateTime",
	ConditionCalculationType:    "sap_billing_document_item_pricing_element_data.ConditionCalculationType",
	ConditionBaseValue:          "sap_billing_document_item_pricing_element_data.ConditionBaseValue",
	ConditionRateValue:          "sap_billing_document_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:           "sap_billing_document_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:           "sap_billing_document_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:       "sap_billing_document_item_pricing_element_data.ConditionQuantityUnit",
	ConditionCategory:           "sap_billing_document_item_pricing_element_data.ConditionCategory",
	PricingScaleType:            "sap_billing_document_item_pricing_element_data.PricingScaleType",
	ConditionRecord:             "sap_billing_document_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:   "sap_billing_document_item_pricing_element_data.ConditionSequentialNumber",
	TaxCode:                     "sap_billing_document_item_pricing_element_data.TaxCode",
	ConditionAmount:             "sap_billing_document_item_pricing_element_data.ConditionAmount",
	TransactionCurrency:         "sap_billing_document_item_pricing_element_data.TransactionCurrency",
	PricingScaleBasis:           "sap_billing_document_item_pricing_element_data.PricingScaleBasis",
	ConditionScaleBasisValue:    "sap_billing_document_item_pricing_element_data.ConditionScaleBasisValue",
	ConditionScaleBasisUnit:     "sap_billing_document_item_pricing_element_data.ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency: "sap_billing_document_item_pricing_element_data.ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:  "sap_billing_document_item_pricing_element_data.ConditionIsManuallyChanged",
}

// Generated where

var SapBillingDocumentItemPricingElementDatumWhere = struct {
	BillingDocument             whereHelperstring
	BillingDocumentItem         whereHelperstring
	PricingProcedureStep        whereHelperstring
	PricingProcedureCounter     whereHelperstring
	ConditionType               whereHelpernull_String
	PricingDateTime             whereHelpernull_String
	ConditionCalculationType    whereHelpernull_String
	ConditionBaseValue          whereHelpernull_String
	ConditionRateValue          whereHelpernull_String
	ConditionCurrency           whereHelpernull_String
	ConditionQuantity           whereHelpernull_String
	ConditionQuantityUnit       whereHelpernull_String
	ConditionCategory           whereHelpernull_String
	PricingScaleType            whereHelpernull_String
	ConditionRecord             whereHelpernull_String
	ConditionSequentialNumber   whereHelpernull_String
	TaxCode                     whereHelpernull_String
	ConditionAmount             whereHelpernull_String
	TransactionCurrency         whereHelpernull_String
	PricingScaleBasis           whereHelpernull_String
	ConditionScaleBasisValue    whereHelpernull_String
	ConditionScaleBasisUnit     whereHelpernull_String
	ConditionScaleBasisCurrency whereHelpernull_String
	ConditionIsManuallyChanged  whereHelpernull_Bool
}{
	BillingDocument:             whereHelperstring{field: "`sap_billing_document_item_pricing_element_data`.`BillingDocument`"},
	BillingDocumentItem:         whereHelperstring{field: "`sap_billing_document_item_pricing_element_data`.`BillingDocumentItem`"},
	PricingProcedureStep:        whereHelperstring{field: "`sap_billing_document_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter:     whereHelperstring{field: "`sap_billing_document_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionType:               whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionType`"},
	PricingDateTime:             whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`PricingDateTime`"},
	ConditionCalculationType:    whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionCalculationType`"},
	ConditionBaseValue:          whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionBaseValue`"},
	ConditionRateValue:          whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:           whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:           whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:       whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionQuantityUnit`"},
	ConditionCategory:           whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionCategory`"},
	PricingScaleType:            whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`PricingScaleType`"},
	ConditionRecord:             whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:   whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionSequentialNumber`"},
	TaxCode:                     whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`TaxCode`"},
	ConditionAmount:             whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionAmount`"},
	TransactionCurrency:         whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`TransactionCurrency`"},
	PricingScaleBasis:           whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`PricingScaleBasis`"},
	ConditionScaleBasisValue:    whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionScaleBasisValue`"},
	ConditionScaleBasisUnit:     whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionScaleBasisUnit`"},
	ConditionScaleBasisCurrency: whereHelpernull_String{field: "`sap_billing_document_item_pricing_element_data`.`ConditionScaleBasisCurrency`"},
	ConditionIsManuallyChanged:  whereHelpernull_Bool{field: "`sap_billing_document_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
}

// SapBillingDocumentItemPricingElementDatumRels is where relationship names are stored.
var SapBillingDocumentItemPricingElementDatumRels = struct {
	BillingDocumentSapBillingDocumentHeaderDatum string
}{
	BillingDocumentSapBillingDocumentHeaderDatum: "BillingDocumentSapBillingDocumentHeaderDatum",
}

// sapBillingDocumentItemPricingElementDatumR is where relationships are stored.
type sapBillingDocumentItemPricingElementDatumR struct {
	BillingDocumentSapBillingDocumentHeaderDatum *SapBillingDocumentHeaderDatum `boil:"BillingDocumentSapBillingDocumentHeaderDatum" json:"BillingDocumentSapBillingDocumentHeaderDatum" toml:"BillingDocumentSapBillingDocumentHeaderDatum" yaml:"BillingDocumentSapBillingDocumentHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBillingDocumentItemPricingElementDatumR) NewStruct() *sapBillingDocumentItemPricingElementDatumR {
	return &sapBillingDocumentItemPricingElementDatumR{}
}

func (r *sapBillingDocumentItemPricingElementDatumR) GetBillingDocumentSapBillingDocumentHeaderDatum() *SapBillingDocumentHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillingDocumentSapBillingDocumentHeaderDatum
}

// sapBillingDocumentItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapBillingDocumentItemPricingElementDatumL struct{}

var (
	sapBillingDocumentItemPricingElementDatumAllColumns            = []string{"BillingDocument", "BillingDocumentItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "PricingDateTime", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapBillingDocumentItemPricingElementDatumColumnsWithoutDefault = []string{"BillingDocument", "BillingDocumentItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "PricingDateTime", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapBillingDocumentItemPricingElementDatumColumnsWithDefault    = []string{}
	sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns     = []string{"BillingDocument", "BillingDocumentItem", "PricingProcedureStep", "PricingProcedureCounter"}
	sapBillingDocumentItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapBillingDocumentItemPricingElementDatumSlice is an alias for a slice of pointers to SapBillingDocumentItemPricingElementDatum.
	// This should almost always be used instead of []SapBillingDocumentItemPricingElementDatum.
	SapBillingDocumentItemPricingElementDatumSlice []*SapBillingDocumentItemPricingElementDatum
	// SapBillingDocumentItemPricingElementDatumHook is the signature for custom SapBillingDocumentItemPricingElementDatum hook methods
	SapBillingDocumentItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapBillingDocumentItemPricingElementDatum) error

	sapBillingDocumentItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBillingDocumentItemPricingElementDatumType                 = reflect.TypeOf(&SapBillingDocumentItemPricingElementDatum{})
	sapBillingDocumentItemPricingElementDatumMapping              = queries.MakeStructMapping(sapBillingDocumentItemPricingElementDatumType)
	sapBillingDocumentItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns)
	sapBillingDocumentItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapBillingDocumentItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapBillingDocumentItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapBillingDocumentItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapBillingDocumentItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapBillingDocumentItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBillingDocumentItemPricingElementDatumAfterSelectHooks []SapBillingDocumentItemPricingElementDatumHook

var sapBillingDocumentItemPricingElementDatumBeforeInsertHooks []SapBillingDocumentItemPricingElementDatumHook
var sapBillingDocumentItemPricingElementDatumAfterInsertHooks []SapBillingDocumentItemPricingElementDatumHook

var sapBillingDocumentItemPricingElementDatumBeforeUpdateHooks []SapBillingDocumentItemPricingElementDatumHook
var sapBillingDocumentItemPricingElementDatumAfterUpdateHooks []SapBillingDocumentItemPricingElementDatumHook

var sapBillingDocumentItemPricingElementDatumBeforeDeleteHooks []SapBillingDocumentItemPricingElementDatumHook
var sapBillingDocumentItemPricingElementDatumAfterDeleteHooks []SapBillingDocumentItemPricingElementDatumHook

var sapBillingDocumentItemPricingElementDatumBeforeUpsertHooks []SapBillingDocumentItemPricingElementDatumHook
var sapBillingDocumentItemPricingElementDatumAfterUpsertHooks []SapBillingDocumentItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBillingDocumentItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBillingDocumentItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapBillingDocumentItemPricingElementDatumHook(hookPoint boil.HookPoint, sapBillingDocumentItemPricingElementDatumHook SapBillingDocumentItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBillingDocumentItemPricingElementDatumAfterSelectHooks = append(sapBillingDocumentItemPricingElementDatumAfterSelectHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapBillingDocumentItemPricingElementDatumBeforeInsertHooks = append(sapBillingDocumentItemPricingElementDatumBeforeInsertHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapBillingDocumentItemPricingElementDatumAfterInsertHooks = append(sapBillingDocumentItemPricingElementDatumAfterInsertHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapBillingDocumentItemPricingElementDatumBeforeUpdateHooks = append(sapBillingDocumentItemPricingElementDatumBeforeUpdateHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapBillingDocumentItemPricingElementDatumAfterUpdateHooks = append(sapBillingDocumentItemPricingElementDatumAfterUpdateHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapBillingDocumentItemPricingElementDatumBeforeDeleteHooks = append(sapBillingDocumentItemPricingElementDatumBeforeDeleteHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapBillingDocumentItemPricingElementDatumAfterDeleteHooks = append(sapBillingDocumentItemPricingElementDatumAfterDeleteHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapBillingDocumentItemPricingElementDatumBeforeUpsertHooks = append(sapBillingDocumentItemPricingElementDatumBeforeUpsertHooks, sapBillingDocumentItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapBillingDocumentItemPricingElementDatumAfterUpsertHooks = append(sapBillingDocumentItemPricingElementDatumAfterUpsertHooks, sapBillingDocumentItemPricingElementDatumHook)
	}
}

// One returns a single sapBillingDocumentItemPricingElementDatum record from the query.
func (q sapBillingDocumentItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBillingDocumentItemPricingElementDatum, error) {
	o := &SapBillingDocumentItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_billing_document_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBillingDocumentItemPricingElementDatum records from the query.
func (q sapBillingDocumentItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBillingDocumentItemPricingElementDatumSlice, error) {
	var o []*SapBillingDocumentItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBillingDocumentItemPricingElementDatum slice")
	}

	if len(sapBillingDocumentItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBillingDocumentItemPricingElementDatum records in the query.
func (q sapBillingDocumentItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_billing_document_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBillingDocumentItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_billing_document_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// BillingDocumentSapBillingDocumentHeaderDatum pointed to by the foreign key.
func (o *SapBillingDocumentItemPricingElementDatum) BillingDocumentSapBillingDocumentHeaderDatum(mods ...qm.QueryMod) sapBillingDocumentHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillingDocument` = ?", o.BillingDocument),
	}

	queryMods = append(queryMods, mods...)

	return SapBillingDocumentHeaderData(queryMods...)
}

// LoadBillingDocumentSapBillingDocumentHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBillingDocumentItemPricingElementDatumL) LoadBillingDocumentSapBillingDocumentHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillingDocumentItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillingDocumentItemPricingElementDatum
	var object *SapBillingDocumentItemPricingElementDatum

	if singular {
		object = maybeSapBillingDocumentItemPricingElementDatum.(*SapBillingDocumentItemPricingElementDatum)
	} else {
		slice = *maybeSapBillingDocumentItemPricingElementDatum.(*[]*SapBillingDocumentItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillingDocumentItemPricingElementDatumR{}
		}
		args = append(args, object.BillingDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillingDocumentItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.BillingDocument {
					continue Outer
				}
			}

			args = append(args, obj.BillingDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_billing_document_header_data`),
		qm.WhereIn(`sap_billing_document_header_data.BillingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBillingDocumentHeaderDatum")
	}

	var resultSlice []*SapBillingDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBillingDocumentHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_billing_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_billing_document_header_data")
	}

	if len(sapBillingDocumentItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillingDocumentSapBillingDocumentHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBillingDocumentHeaderDatumR{}
		}
		foreign.R.BillingDocumentSapBillingDocumentItemPricingElementData = append(foreign.R.BillingDocumentSapBillingDocumentItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillingDocument == foreign.BillingDocument {
				local.R.BillingDocumentSapBillingDocumentHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBillingDocumentHeaderDatumR{}
				}
				foreign.R.BillingDocumentSapBillingDocumentItemPricingElementData = append(foreign.R.BillingDocumentSapBillingDocumentItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetBillingDocumentSapBillingDocumentHeaderDatum of the sapBillingDocumentItemPricingElementDatum to the related item.
// Sets o.R.BillingDocumentSapBillingDocumentHeaderDatum to related.
// Adds o to related.R.BillingDocumentSapBillingDocumentItemPricingElementData.
func (o *SapBillingDocumentItemPricingElementDatum) SetBillingDocumentSapBillingDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBillingDocumentHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_billing_document_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillingDocument"}),
		strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillingDocument, o.BillingDocument, o.BillingDocumentItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillingDocument = related.BillingDocument
	if o.R == nil {
		o.R = &sapBillingDocumentItemPricingElementDatumR{
			BillingDocumentSapBillingDocumentHeaderDatum: related,
		}
	} else {
		o.R.BillingDocumentSapBillingDocumentHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapBillingDocumentHeaderDatumR{
			BillingDocumentSapBillingDocumentItemPricingElementData: SapBillingDocumentItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.BillingDocumentSapBillingDocumentItemPricingElementData = append(related.R.BillingDocumentSapBillingDocumentItemPricingElementData, o)
	}

	return nil
}

// SapBillingDocumentItemPricingElementData retrieves all the records using an executor.
func SapBillingDocumentItemPricingElementData(mods ...qm.QueryMod) sapBillingDocumentItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_billing_document_item_pricing_element_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_billing_document_item_pricing_element_data`.*"})
	}

	return sapBillingDocumentItemPricingElementDatumQuery{q}
}

// FindSapBillingDocumentItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBillingDocumentItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, billingDocument string, billingDocumentItem string, pricingProcedureStep string, pricingProcedureCounter string, selectCols ...string) (*SapBillingDocumentItemPricingElementDatum, error) {
	sapBillingDocumentItemPricingElementDatumObj := &SapBillingDocumentItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_billing_document_item_pricing_element_data` where `BillingDocument`=? AND `BillingDocumentItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, billingDocument, billingDocumentItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, sapBillingDocumentItemPricingElementDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_billing_document_item_pricing_element_data")
	}

	if err = sapBillingDocumentItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBillingDocumentItemPricingElementDatumObj, err
	}

	return sapBillingDocumentItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBillingDocumentItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_billing_document_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillingDocumentItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBillingDocumentItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapBillingDocumentItemPricingElementDatumInsertCache[key]
	sapBillingDocumentItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBillingDocumentItemPricingElementDatumAllColumns,
			sapBillingDocumentItemPricingElementDatumColumnsWithDefault,
			sapBillingDocumentItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_billing_document_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_billing_document_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_billing_document_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_billing_document_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillingDocument,
		o.BillingDocumentItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_billing_document_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapBillingDocumentItemPricingElementDatumInsertCacheMut.Lock()
		sapBillingDocumentItemPricingElementDatumInsertCache[key] = cache
		sapBillingDocumentItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBillingDocumentItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBillingDocumentItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBillingDocumentItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapBillingDocumentItemPricingElementDatumUpdateCache[key]
	sapBillingDocumentItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBillingDocumentItemPricingElementDatumAllColumns,
			sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_billing_document_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_billing_document_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, append(wl, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_billing_document_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_billing_document_item_pricing_element_data")
	}

	if !cached {
		sapBillingDocumentItemPricingElementDatumUpdateCacheMut.Lock()
		sapBillingDocumentItemPricingElementDatumUpdateCache[key] = cache
		sapBillingDocumentItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBillingDocumentItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_billing_document_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_billing_document_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBillingDocumentItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_billing_document_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBillingDocumentItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBillingDocumentItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapBillingDocumentItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBillingDocumentItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_billing_document_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillingDocumentItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBillingDocumentItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBillingDocumentItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapBillingDocumentItemPricingElementDatumUpsertCache[key]
	sapBillingDocumentItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBillingDocumentItemPricingElementDatumAllColumns,
			sapBillingDocumentItemPricingElementDatumColumnsWithDefault,
			sapBillingDocumentItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBillingDocumentItemPricingElementDatumAllColumns,
			sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_billing_document_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_billing_document_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_billing_document_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_billing_document_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBillingDocumentItemPricingElementDatumType, sapBillingDocumentItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_billing_document_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_billing_document_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapBillingDocumentItemPricingElementDatumUpsertCacheMut.Lock()
		sapBillingDocumentItemPricingElementDatumUpsertCache[key] = cache
		sapBillingDocumentItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBillingDocumentItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBillingDocumentItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBillingDocumentItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBillingDocumentItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_billing_document_item_pricing_element_data` WHERE `BillingDocument`=? AND `BillingDocumentItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_billing_document_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_billing_document_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBillingDocumentItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBillingDocumentItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_billing_document_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_billing_document_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBillingDocumentItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBillingDocumentItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_billing_document_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBillingDocumentItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_billing_document_item_pricing_element_data")
	}

	if len(sapBillingDocumentItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBillingDocumentItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBillingDocumentItemPricingElementDatum(ctx, exec, o.BillingDocument, o.BillingDocumentItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBillingDocumentItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBillingDocumentItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_billing_document_item_pricing_element_data`.* FROM `sap_billing_document_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBillingDocumentItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapBillingDocumentItemPricingElementDatumExists checks if the SapBillingDocumentItemPricingElementDatum row exists.
func SapBillingDocumentItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, billingDocument string, billingDocumentItem string, pricingProcedureStep string, pricingProcedureCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_billing_document_item_pricing_element_data` where `BillingDocument`=? AND `BillingDocumentItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billingDocument, billingDocumentItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, billingDocument, billingDocumentItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_billing_document_item_pricing_element_data exists")
	}

	return exists, nil
}
