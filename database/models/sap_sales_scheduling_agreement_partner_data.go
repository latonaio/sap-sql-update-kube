// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesSchedulingAgreementPartnerDatum is an object representing the database table.
type SapSalesSchedulingAgreementPartnerDatum struct {
	SalesSchedulingAgreement string      `boil:"SalesSchedulingAgreement" json:"SalesSchedulingAgreement" toml:"SalesSchedulingAgreement" yaml:"SalesSchedulingAgreement"`
	PartnerFunction          string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	Customer                 null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	Supplier                 null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	AddressID                null.String `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`

	R *sapSalesSchedulingAgreementPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesSchedulingAgreementPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesSchedulingAgreementPartnerDatumColumns = struct {
	SalesSchedulingAgreement string
	PartnerFunction          string
	Customer                 string
	Supplier                 string
	AddressID                string
}{
	SalesSchedulingAgreement: "SalesSchedulingAgreement",
	PartnerFunction:          "PartnerFunction",
	Customer:                 "Customer",
	Supplier:                 "Supplier",
	AddressID:                "AddressID",
}

var SapSalesSchedulingAgreementPartnerDatumTableColumns = struct {
	SalesSchedulingAgreement string
	PartnerFunction          string
	Customer                 string
	Supplier                 string
	AddressID                string
}{
	SalesSchedulingAgreement: "sap_sales_scheduling_agreement_partner_data.SalesSchedulingAgreement",
	PartnerFunction:          "sap_sales_scheduling_agreement_partner_data.PartnerFunction",
	Customer:                 "sap_sales_scheduling_agreement_partner_data.Customer",
	Supplier:                 "sap_sales_scheduling_agreement_partner_data.Supplier",
	AddressID:                "sap_sales_scheduling_agreement_partner_data.AddressID",
}

// Generated where

var SapSalesSchedulingAgreementPartnerDatumWhere = struct {
	SalesSchedulingAgreement whereHelperstring
	PartnerFunction          whereHelperstring
	Customer                 whereHelpernull_String
	Supplier                 whereHelpernull_String
	AddressID                whereHelpernull_String
}{
	SalesSchedulingAgreement: whereHelperstring{field: "`sap_sales_scheduling_agreement_partner_data`.`SalesSchedulingAgreement`"},
	PartnerFunction:          whereHelperstring{field: "`sap_sales_scheduling_agreement_partner_data`.`PartnerFunction`"},
	Customer:                 whereHelpernull_String{field: "`sap_sales_scheduling_agreement_partner_data`.`Customer`"},
	Supplier:                 whereHelpernull_String{field: "`sap_sales_scheduling_agreement_partner_data`.`Supplier`"},
	AddressID:                whereHelpernull_String{field: "`sap_sales_scheduling_agreement_partner_data`.`AddressID`"},
}

// SapSalesSchedulingAgreementPartnerDatumRels is where relationship names are stored.
var SapSalesSchedulingAgreementPartnerDatumRels = struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum string
}{
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: "SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum",
}

// sapSalesSchedulingAgreementPartnerDatumR is where relationships are stored.
type sapSalesSchedulingAgreementPartnerDatumR struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum *SapSalesSchedulingAgreementHeaderDatum `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesSchedulingAgreementPartnerDatumR) NewStruct() *sapSalesSchedulingAgreementPartnerDatumR {
	return &sapSalesSchedulingAgreementPartnerDatumR{}
}

// sapSalesSchedulingAgreementPartnerDatumL is where Load methods for each relationship are stored.
type sapSalesSchedulingAgreementPartnerDatumL struct{}

var (
	sapSalesSchedulingAgreementPartnerDatumAllColumns            = []string{"SalesSchedulingAgreement", "PartnerFunction", "Customer", "Supplier", "AddressID"}
	sapSalesSchedulingAgreementPartnerDatumColumnsWithoutDefault = []string{"SalesSchedulingAgreement", "PartnerFunction", "Customer", "Supplier", "AddressID"}
	sapSalesSchedulingAgreementPartnerDatumColumnsWithDefault    = []string{}
	sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns     = []string{"SalesSchedulingAgreement", "PartnerFunction"}
	sapSalesSchedulingAgreementPartnerDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesSchedulingAgreementPartnerDatumSlice is an alias for a slice of pointers to SapSalesSchedulingAgreementPartnerDatum.
	// This should almost always be used instead of []SapSalesSchedulingAgreementPartnerDatum.
	SapSalesSchedulingAgreementPartnerDatumSlice []*SapSalesSchedulingAgreementPartnerDatum
	// SapSalesSchedulingAgreementPartnerDatumHook is the signature for custom SapSalesSchedulingAgreementPartnerDatum hook methods
	SapSalesSchedulingAgreementPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapSalesSchedulingAgreementPartnerDatum) error

	sapSalesSchedulingAgreementPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesSchedulingAgreementPartnerDatumType                 = reflect.TypeOf(&SapSalesSchedulingAgreementPartnerDatum{})
	sapSalesSchedulingAgreementPartnerDatumMapping              = queries.MakeStructMapping(sapSalesSchedulingAgreementPartnerDatumType)
	sapSalesSchedulingAgreementPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns)
	sapSalesSchedulingAgreementPartnerDatumInsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementPartnerDatumInsertCache          = make(map[string]insertCache)
	sapSalesSchedulingAgreementPartnerDatumUpdateCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapSalesSchedulingAgreementPartnerDatumUpsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks []SapSalesSchedulingAgreementPartnerDatumHook

var sapSalesSchedulingAgreementPartnerDatumBeforeInsertHooks []SapSalesSchedulingAgreementPartnerDatumHook
var sapSalesSchedulingAgreementPartnerDatumAfterInsertHooks []SapSalesSchedulingAgreementPartnerDatumHook

var sapSalesSchedulingAgreementPartnerDatumBeforeUpdateHooks []SapSalesSchedulingAgreementPartnerDatumHook
var sapSalesSchedulingAgreementPartnerDatumAfterUpdateHooks []SapSalesSchedulingAgreementPartnerDatumHook

var sapSalesSchedulingAgreementPartnerDatumBeforeDeleteHooks []SapSalesSchedulingAgreementPartnerDatumHook
var sapSalesSchedulingAgreementPartnerDatumAfterDeleteHooks []SapSalesSchedulingAgreementPartnerDatumHook

var sapSalesSchedulingAgreementPartnerDatumBeforeUpsertHooks []SapSalesSchedulingAgreementPartnerDatumHook
var sapSalesSchedulingAgreementPartnerDatumAfterUpsertHooks []SapSalesSchedulingAgreementPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesSchedulingAgreementPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesSchedulingAgreementPartnerDatumHook registers your hook function for all future operations.
func AddSapSalesSchedulingAgreementPartnerDatumHook(hookPoint boil.HookPoint, sapSalesSchedulingAgreementPartnerDatumHook SapSalesSchedulingAgreementPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks = append(sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.BeforeInsertHook:
		sapSalesSchedulingAgreementPartnerDatumBeforeInsertHooks = append(sapSalesSchedulingAgreementPartnerDatumBeforeInsertHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.AfterInsertHook:
		sapSalesSchedulingAgreementPartnerDatumAfterInsertHooks = append(sapSalesSchedulingAgreementPartnerDatumAfterInsertHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesSchedulingAgreementPartnerDatumBeforeUpdateHooks = append(sapSalesSchedulingAgreementPartnerDatumBeforeUpdateHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapSalesSchedulingAgreementPartnerDatumAfterUpdateHooks = append(sapSalesSchedulingAgreementPartnerDatumAfterUpdateHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesSchedulingAgreementPartnerDatumBeforeDeleteHooks = append(sapSalesSchedulingAgreementPartnerDatumBeforeDeleteHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapSalesSchedulingAgreementPartnerDatumAfterDeleteHooks = append(sapSalesSchedulingAgreementPartnerDatumAfterDeleteHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesSchedulingAgreementPartnerDatumBeforeUpsertHooks = append(sapSalesSchedulingAgreementPartnerDatumBeforeUpsertHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapSalesSchedulingAgreementPartnerDatumAfterUpsertHooks = append(sapSalesSchedulingAgreementPartnerDatumAfterUpsertHooks, sapSalesSchedulingAgreementPartnerDatumHook)
	}
}

// One returns a single sapSalesSchedulingAgreementPartnerDatum record from the query.
func (q sapSalesSchedulingAgreementPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesSchedulingAgreementPartnerDatum, error) {
	o := &SapSalesSchedulingAgreementPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_scheduling_agreement_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesSchedulingAgreementPartnerDatum records from the query.
func (q sapSalesSchedulingAgreementPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesSchedulingAgreementPartnerDatumSlice, error) {
	var o []*SapSalesSchedulingAgreementPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesSchedulingAgreementPartnerDatum slice")
	}

	if len(sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesSchedulingAgreementPartnerDatum records in the query.
func (q sapSalesSchedulingAgreementPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_scheduling_agreement_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesSchedulingAgreementPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_scheduling_agreement_partner_data exists")
	}

	return count > 0, nil
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum pointed to by the foreign key.
func (o *SapSalesSchedulingAgreementPartnerDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(mods ...qm.QueryMod) sapSalesSchedulingAgreementHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesSchedulingAgreement` = ?", o.SalesSchedulingAgreement),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesSchedulingAgreementHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_header_data`")

	return query
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesSchedulingAgreementPartnerDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementPartnerDatum
	var object *SapSalesSchedulingAgreementPartnerDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementPartnerDatum.(*SapSalesSchedulingAgreementPartnerDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementPartnerDatum.(*[]*SapSalesSchedulingAgreementPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementPartnerDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_header_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_header_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesSchedulingAgreementHeaderDatum")
	}

	var resultSlice []*SapSalesSchedulingAgreementHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesSchedulingAgreementHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_scheduling_agreement_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_header_data")
	}

	if len(sapSalesSchedulingAgreementPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData = append(foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementHeaderDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData = append(foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum of the sapSalesSchedulingAgreementPartnerDatum to the related item.
// Sets o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum to related.
// Adds o to related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData.
func (o *SapSalesSchedulingAgreementPartnerDatum) SetSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesSchedulingAgreementHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_scheduling_agreement_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
		strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesSchedulingAgreement, o.SalesSchedulingAgreement, o.PartnerFunction}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesSchedulingAgreement = related.SalesSchedulingAgreement
	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementPartnerDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData: SapSalesSchedulingAgreementPartnerDatumSlice{o},
		}
	} else {
		related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData = append(related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementPartnerData, o)
	}

	return nil
}

// SapSalesSchedulingAgreementPartnerData retrieves all the records using an executor.
func SapSalesSchedulingAgreementPartnerData(mods ...qm.QueryMod) sapSalesSchedulingAgreementPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_sales_scheduling_agreement_partner_data`"))
	return sapSalesSchedulingAgreementPartnerDatumQuery{NewQuery(mods...)}
}

// FindSapSalesSchedulingAgreementPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesSchedulingAgreementPartnerDatum(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, partnerFunction string, selectCols ...string) (*SapSalesSchedulingAgreementPartnerDatum, error) {
	sapSalesSchedulingAgreementPartnerDatumObj := &SapSalesSchedulingAgreementPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_scheduling_agreement_partner_data` where `SalesSchedulingAgreement`=? AND `PartnerFunction`=?", sel,
	)

	q := queries.Raw(query, salesSchedulingAgreement, partnerFunction)

	err := q.Bind(ctx, exec, sapSalesSchedulingAgreementPartnerDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_scheduling_agreement_partner_data")
	}

	if err = sapSalesSchedulingAgreementPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesSchedulingAgreementPartnerDatumObj, err
	}

	return sapSalesSchedulingAgreementPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesSchedulingAgreementPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesSchedulingAgreementPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementPartnerDatumInsertCache[key]
	sapSalesSchedulingAgreementPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesSchedulingAgreementPartnerDatumAllColumns,
			sapSalesSchedulingAgreementPartnerDatumColumnsWithDefault,
			sapSalesSchedulingAgreementPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_scheduling_agreement_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_scheduling_agreement_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_scheduling_agreement_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_scheduling_agreement_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesSchedulingAgreement,
		o.PartnerFunction,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementPartnerDatumInsertCacheMut.Lock()
		sapSalesSchedulingAgreementPartnerDatumInsertCache[key] = cache
		sapSalesSchedulingAgreementPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesSchedulingAgreementPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesSchedulingAgreementPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesSchedulingAgreementPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementPartnerDatumUpdateCache[key]
	sapSalesSchedulingAgreementPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesSchedulingAgreementPartnerDatumAllColumns,
			sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_scheduling_agreement_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, append(wl, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_scheduling_agreement_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_scheduling_agreement_partner_data")
	}

	if !cached {
		sapSalesSchedulingAgreementPartnerDatumUpdateCacheMut.Lock()
		sapSalesSchedulingAgreementPartnerDatumUpdateCache[key] = cache
		sapSalesSchedulingAgreementPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesSchedulingAgreementPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_scheduling_agreement_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_scheduling_agreement_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesSchedulingAgreementPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesSchedulingAgreementPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesSchedulingAgreementPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesSchedulingAgreementPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesSchedulingAgreementPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesSchedulingAgreementPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesSchedulingAgreementPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementPartnerDatumUpsertCache[key]
	sapSalesSchedulingAgreementPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesSchedulingAgreementPartnerDatumAllColumns,
			sapSalesSchedulingAgreementPartnerDatumColumnsWithDefault,
			sapSalesSchedulingAgreementPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesSchedulingAgreementPartnerDatumAllColumns,
			sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_scheduling_agreement_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_scheduling_agreement_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_scheduling_agreement_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_scheduling_agreement_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesSchedulingAgreementPartnerDatumType, sapSalesSchedulingAgreementPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_scheduling_agreement_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementPartnerDatumUpsertCacheMut.Lock()
		sapSalesSchedulingAgreementPartnerDatumUpsertCache[key] = cache
		sapSalesSchedulingAgreementPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesSchedulingAgreementPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesSchedulingAgreementPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesSchedulingAgreementPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesSchedulingAgreementPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_scheduling_agreement_partner_data` WHERE `SalesSchedulingAgreement`=? AND `PartnerFunction`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_scheduling_agreement_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_scheduling_agreement_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesSchedulingAgreementPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesSchedulingAgreementPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_scheduling_agreement_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesSchedulingAgreementPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesSchedulingAgreementPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_scheduling_agreement_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesSchedulingAgreementPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_partner_data")
	}

	if len(sapSalesSchedulingAgreementPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesSchedulingAgreementPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesSchedulingAgreementPartnerDatum(ctx, exec, o.SalesSchedulingAgreement, o.PartnerFunction)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesSchedulingAgreementPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesSchedulingAgreementPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_scheduling_agreement_partner_data`.* FROM `sap_sales_scheduling_agreement_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesSchedulingAgreementPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesSchedulingAgreementPartnerDatumExists checks if the SapSalesSchedulingAgreementPartnerDatum row exists.
func SapSalesSchedulingAgreementPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, partnerFunction string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_scheduling_agreement_partner_data` where `SalesSchedulingAgreement`=? AND `PartnerFunction`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesSchedulingAgreement, partnerFunction)
	}
	row := exec.QueryRowContext(ctx, sql, salesSchedulingAgreement, partnerFunction)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_scheduling_agreement_partner_data exists")
	}

	return exists, nil
}
