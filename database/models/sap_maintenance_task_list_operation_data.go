// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceTaskListOperationDatum is an object representing the database table.
type SapMaintenanceTaskListOperationDatum struct {
	TaskListType                   string      `boil:"TaskListType" json:"TaskListType" toml:"TaskListType" yaml:"TaskListType"`
	TaskListGroup                  string      `boil:"TaskListGroup" json:"TaskListGroup" toml:"TaskListGroup" yaml:"TaskListGroup"`
	TaskListGroupCounter           string      `boil:"TaskListGroupCounter" json:"TaskListGroupCounter" toml:"TaskListGroupCounter" yaml:"TaskListGroupCounter"`
	TaskListSequence               string      `boil:"TaskListSequence" json:"TaskListSequence" toml:"TaskListSequence" yaml:"TaskListSequence"`
	TaskListOperationInternalID    string      `boil:"TaskListOperationInternalID" json:"TaskListOperationInternalID" toml:"TaskListOperationInternalID" yaml:"TaskListOperationInternalID"`
	TaskListOpBOMItmIntVersCounter string      `boil:"TaskListOpBOMItmIntVersCounter" json:"TaskListOpBOMItmIntVersCounter" toml:"TaskListOpBOMItmIntVersCounter" yaml:"TaskListOpBOMItmIntVersCounter"`
	MaintenanceTaskListOperation   null.String `boil:"MaintenanceTaskListOperation" json:"MaintenanceTaskListOperation,omitempty" toml:"MaintenanceTaskListOperation" yaml:"MaintenanceTaskListOperation,omitempty"`
	MaintOperationExecStageCode    null.String `boil:"MaintOperationExecStageCode" json:"MaintOperationExecStageCode,omitempty" toml:"MaintOperationExecStageCode" yaml:"MaintOperationExecStageCode,omitempty"`
	OperationText                  null.String `boil:"OperationText" json:"OperationText,omitempty" toml:"OperationText" yaml:"OperationText,omitempty"`
	OperationControlProfile        null.String `boil:"OperationControlProfile" json:"OperationControlProfile,omitempty" toml:"OperationControlProfile" yaml:"OperationControlProfile,omitempty"`
	WorkCenter                     null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	Assembly                       null.String `boil:"Assembly" json:"Assembly,omitempty" toml:"Assembly" yaml:"Assembly,omitempty"`
	OperationCalculationControl    null.String `boil:"OperationCalculationControl" json:"OperationCalculationControl,omitempty" toml:"OperationCalculationControl" yaml:"OperationCalculationControl,omitempty"`
	OpPlannedWorkQuantity          null.String `boil:"OpPlannedWorkQuantity" json:"OpPlannedWorkQuantity,omitempty" toml:"OpPlannedWorkQuantity" yaml:"OpPlannedWorkQuantity,omitempty"`
	OpWorkQuantityUnit             null.String `boil:"OpWorkQuantityUnit" json:"OpWorkQuantityUnit,omitempty" toml:"OpWorkQuantityUnit" yaml:"OpWorkQuantityUnit,omitempty"`
	NumberOfCapacities             null.String `boil:"NumberOfCapacities" json:"NumberOfCapacities,omitempty" toml:"NumberOfCapacities" yaml:"NumberOfCapacities,omitempty"`
	PurchaseOrderQty               null.String `boil:"PurchaseOrderQty" json:"PurchaseOrderQty,omitempty" toml:"PurchaseOrderQty" yaml:"PurchaseOrderQty,omitempty"`
	PurchaseOrderQuantityUnit      null.String `boil:"PurchaseOrderQuantityUnit" json:"PurchaseOrderQuantityUnit,omitempty" toml:"PurchaseOrderQuantityUnit" yaml:"PurchaseOrderQuantityUnit,omitempty"`
	OperationStandardDuration      null.String `boil:"OperationStandardDuration" json:"OperationStandardDuration,omitempty" toml:"OperationStandardDuration" yaml:"OperationStandardDuration,omitempty"`
	OperationStandardDurationUnit  null.String `boil:"OperationStandardDurationUnit" json:"OperationStandardDurationUnit,omitempty" toml:"OperationStandardDurationUnit" yaml:"OperationStandardDurationUnit,omitempty"`
	CostCtrActivityType            null.String `boil:"CostCtrActivityType" json:"CostCtrActivityType,omitempty" toml:"CostCtrActivityType" yaml:"CostCtrActivityType,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	OpExternalProcessingPrice      null.String `boil:"OpExternalProcessingPrice" json:"OpExternalProcessingPrice,omitempty" toml:"OpExternalProcessingPrice" yaml:"OpExternalProcessingPrice,omitempty"`
	OpExternalProcessingCurrency   null.String `boil:"OpExternalProcessingCurrency" json:"OpExternalProcessingCurrency,omitempty" toml:"OpExternalProcessingCurrency" yaml:"OpExternalProcessingCurrency,omitempty"`
	CostElement                    null.String `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	PurchasingOrganization         null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	PurchaseContract               null.String `boil:"PurchaseContract" json:"PurchaseContract,omitempty" toml:"PurchaseContract" yaml:"PurchaseContract,omitempty"`
	PurchaseContractItem           null.String `boil:"PurchaseContractItem" json:"PurchaseContractItem,omitempty" toml:"PurchaseContractItem" yaml:"PurchaseContractItem,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	ChangeNumber                   null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	PurchasingInfoRecord           null.String `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord,omitempty" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord,omitempty"`
	IsBusinessPurposeCompleted     null.String `boil:"IsBusinessPurposeCompleted" json:"IsBusinessPurposeCompleted,omitempty" toml:"IsBusinessPurposeCompleted" yaml:"IsBusinessPurposeCompleted,omitempty"`
	SupplierAccountGroup           null.String `boil:"SupplierAccountGroup" json:"SupplierAccountGroup,omitempty" toml:"SupplierAccountGroup" yaml:"SupplierAccountGroup,omitempty"`
	TaskListStatus                 null.String `boil:"TaskListStatus" json:"TaskListStatus,omitempty" toml:"TaskListStatus" yaml:"TaskListStatus,omitempty"`
	ResponsiblePlannerGroup        null.String `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	MaintenancePlanningPlant       null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	MaintenancePlannerGroup        null.String `boil:"MaintenancePlannerGroup" json:"MaintenancePlannerGroup,omitempty" toml:"MaintenancePlannerGroup" yaml:"MaintenancePlannerGroup,omitempty"`
	ControllingArea                null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	CostCenter                     null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	MaintenancePlant               null.String `boil:"MaintenancePlant" json:"MaintenancePlant,omitempty" toml:"MaintenancePlant" yaml:"MaintenancePlant,omitempty"`
	ValidityStartDate              null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	TechnicalObject                null.String `boil:"TechnicalObject" json:"TechnicalObject,omitempty" toml:"TechnicalObject" yaml:"TechnicalObject,omitempty"`
	TechObjIsEquipOrFuncnlLoc      null.String `boil:"TechObjIsEquipOrFuncnlLoc" json:"TechObjIsEquipOrFuncnlLoc,omitempty" toml:"TechObjIsEquipOrFuncnlLoc" yaml:"TechObjIsEquipOrFuncnlLoc,omitempty"`

	R *sapMaintenanceTaskListOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceTaskListOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceTaskListOperationDatumColumns = struct {
	TaskListType                   string
	TaskListGroup                  string
	TaskListGroupCounter           string
	TaskListSequence               string
	TaskListOperationInternalID    string
	TaskListOpBOMItmIntVersCounter string
	MaintenanceTaskListOperation   string
	MaintOperationExecStageCode    string
	OperationText                  string
	OperationControlProfile        string
	WorkCenter                     string
	Plant                          string
	Assembly                       string
	OperationCalculationControl    string
	OpPlannedWorkQuantity          string
	OpWorkQuantityUnit             string
	NumberOfCapacities             string
	PurchaseOrderQty               string
	PurchaseOrderQuantityUnit      string
	OperationStandardDuration      string
	OperationStandardDurationUnit  string
	CostCtrActivityType            string
	MaterialGroup                  string
	OpExternalProcessingPrice      string
	OpExternalProcessingCurrency   string
	CostElement                    string
	PurchasingGroup                string
	PurchasingOrganization         string
	PurchaseContract               string
	PurchaseContractItem           string
	Supplier                       string
	ChangeNumber                   string
	PurchasingInfoRecord           string
	IsBusinessPurposeCompleted     string
	SupplierAccountGroup           string
	TaskListStatus                 string
	ResponsiblePlannerGroup        string
	MaintenancePlanningPlant       string
	MaintenancePlannerGroup        string
	ControllingArea                string
	CostCenter                     string
	MaintenancePlant               string
	ValidityStartDate              string
	ValidityEndDate                string
	TechnicalObject                string
	TechObjIsEquipOrFuncnlLoc      string
}{
	TaskListType:                   "TaskListType",
	TaskListGroup:                  "TaskListGroup",
	TaskListGroupCounter:           "TaskListGroupCounter",
	TaskListSequence:               "TaskListSequence",
	TaskListOperationInternalID:    "TaskListOperationInternalID",
	TaskListOpBOMItmIntVersCounter: "TaskListOpBOMItmIntVersCounter",
	MaintenanceTaskListOperation:   "MaintenanceTaskListOperation",
	MaintOperationExecStageCode:    "MaintOperationExecStageCode",
	OperationText:                  "OperationText",
	OperationControlProfile:        "OperationControlProfile",
	WorkCenter:                     "WorkCenter",
	Plant:                          "Plant",
	Assembly:                       "Assembly",
	OperationCalculationControl:    "OperationCalculationControl",
	OpPlannedWorkQuantity:          "OpPlannedWorkQuantity",
	OpWorkQuantityUnit:             "OpWorkQuantityUnit",
	NumberOfCapacities:             "NumberOfCapacities",
	PurchaseOrderQty:               "PurchaseOrderQty",
	PurchaseOrderQuantityUnit:      "PurchaseOrderQuantityUnit",
	OperationStandardDuration:      "OperationStandardDuration",
	OperationStandardDurationUnit:  "OperationStandardDurationUnit",
	CostCtrActivityType:            "CostCtrActivityType",
	MaterialGroup:                  "MaterialGroup",
	OpExternalProcessingPrice:      "OpExternalProcessingPrice",
	OpExternalProcessingCurrency:   "OpExternalProcessingCurrency",
	CostElement:                    "CostElement",
	PurchasingGroup:                "PurchasingGroup",
	PurchasingOrganization:         "PurchasingOrganization",
	PurchaseContract:               "PurchaseContract",
	PurchaseContractItem:           "PurchaseContractItem",
	Supplier:                       "Supplier",
	ChangeNumber:                   "ChangeNumber",
	PurchasingInfoRecord:           "PurchasingInfoRecord",
	IsBusinessPurposeCompleted:     "IsBusinessPurposeCompleted",
	SupplierAccountGroup:           "SupplierAccountGroup",
	TaskListStatus:                 "TaskListStatus",
	ResponsiblePlannerGroup:        "ResponsiblePlannerGroup",
	MaintenancePlanningPlant:       "MaintenancePlanningPlant",
	MaintenancePlannerGroup:        "MaintenancePlannerGroup",
	ControllingArea:                "ControllingArea",
	CostCenter:                     "CostCenter",
	MaintenancePlant:               "MaintenancePlant",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	TechnicalObject:                "TechnicalObject",
	TechObjIsEquipOrFuncnlLoc:      "TechObjIsEquipOrFuncnlLoc",
}

var SapMaintenanceTaskListOperationDatumTableColumns = struct {
	TaskListType                   string
	TaskListGroup                  string
	TaskListGroupCounter           string
	TaskListSequence               string
	TaskListOperationInternalID    string
	TaskListOpBOMItmIntVersCounter string
	MaintenanceTaskListOperation   string
	MaintOperationExecStageCode    string
	OperationText                  string
	OperationControlProfile        string
	WorkCenter                     string
	Plant                          string
	Assembly                       string
	OperationCalculationControl    string
	OpPlannedWorkQuantity          string
	OpWorkQuantityUnit             string
	NumberOfCapacities             string
	PurchaseOrderQty               string
	PurchaseOrderQuantityUnit      string
	OperationStandardDuration      string
	OperationStandardDurationUnit  string
	CostCtrActivityType            string
	MaterialGroup                  string
	OpExternalProcessingPrice      string
	OpExternalProcessingCurrency   string
	CostElement                    string
	PurchasingGroup                string
	PurchasingOrganization         string
	PurchaseContract               string
	PurchaseContractItem           string
	Supplier                       string
	ChangeNumber                   string
	PurchasingInfoRecord           string
	IsBusinessPurposeCompleted     string
	SupplierAccountGroup           string
	TaskListStatus                 string
	ResponsiblePlannerGroup        string
	MaintenancePlanningPlant       string
	MaintenancePlannerGroup        string
	ControllingArea                string
	CostCenter                     string
	MaintenancePlant               string
	ValidityStartDate              string
	ValidityEndDate                string
	TechnicalObject                string
	TechObjIsEquipOrFuncnlLoc      string
}{
	TaskListType:                   "sap_maintenance_task_list_operation_data.TaskListType",
	TaskListGroup:                  "sap_maintenance_task_list_operation_data.TaskListGroup",
	TaskListGroupCounter:           "sap_maintenance_task_list_operation_data.TaskListGroupCounter",
	TaskListSequence:               "sap_maintenance_task_list_operation_data.TaskListSequence",
	TaskListOperationInternalID:    "sap_maintenance_task_list_operation_data.TaskListOperationInternalID",
	TaskListOpBOMItmIntVersCounter: "sap_maintenance_task_list_operation_data.TaskListOpBOMItmIntVersCounter",
	MaintenanceTaskListOperation:   "sap_maintenance_task_list_operation_data.MaintenanceTaskListOperation",
	MaintOperationExecStageCode:    "sap_maintenance_task_list_operation_data.MaintOperationExecStageCode",
	OperationText:                  "sap_maintenance_task_list_operation_data.OperationText",
	OperationControlProfile:        "sap_maintenance_task_list_operation_data.OperationControlProfile",
	WorkCenter:                     "sap_maintenance_task_list_operation_data.WorkCenter",
	Plant:                          "sap_maintenance_task_list_operation_data.Plant",
	Assembly:                       "sap_maintenance_task_list_operation_data.Assembly",
	OperationCalculationControl:    "sap_maintenance_task_list_operation_data.OperationCalculationControl",
	OpPlannedWorkQuantity:          "sap_maintenance_task_list_operation_data.OpPlannedWorkQuantity",
	OpWorkQuantityUnit:             "sap_maintenance_task_list_operation_data.OpWorkQuantityUnit",
	NumberOfCapacities:             "sap_maintenance_task_list_operation_data.NumberOfCapacities",
	PurchaseOrderQty:               "sap_maintenance_task_list_operation_data.PurchaseOrderQty",
	PurchaseOrderQuantityUnit:      "sap_maintenance_task_list_operation_data.PurchaseOrderQuantityUnit",
	OperationStandardDuration:      "sap_maintenance_task_list_operation_data.OperationStandardDuration",
	OperationStandardDurationUnit:  "sap_maintenance_task_list_operation_data.OperationStandardDurationUnit",
	CostCtrActivityType:            "sap_maintenance_task_list_operation_data.CostCtrActivityType",
	MaterialGroup:                  "sap_maintenance_task_list_operation_data.MaterialGroup",
	OpExternalProcessingPrice:      "sap_maintenance_task_list_operation_data.OpExternalProcessingPrice",
	OpExternalProcessingCurrency:   "sap_maintenance_task_list_operation_data.OpExternalProcessingCurrency",
	CostElement:                    "sap_maintenance_task_list_operation_data.CostElement",
	PurchasingGroup:                "sap_maintenance_task_list_operation_data.PurchasingGroup",
	PurchasingOrganization:         "sap_maintenance_task_list_operation_data.PurchasingOrganization",
	PurchaseContract:               "sap_maintenance_task_list_operation_data.PurchaseContract",
	PurchaseContractItem:           "sap_maintenance_task_list_operation_data.PurchaseContractItem",
	Supplier:                       "sap_maintenance_task_list_operation_data.Supplier",
	ChangeNumber:                   "sap_maintenance_task_list_operation_data.ChangeNumber",
	PurchasingInfoRecord:           "sap_maintenance_task_list_operation_data.PurchasingInfoRecord",
	IsBusinessPurposeCompleted:     "sap_maintenance_task_list_operation_data.IsBusinessPurposeCompleted",
	SupplierAccountGroup:           "sap_maintenance_task_list_operation_data.SupplierAccountGroup",
	TaskListStatus:                 "sap_maintenance_task_list_operation_data.TaskListStatus",
	ResponsiblePlannerGroup:        "sap_maintenance_task_list_operation_data.ResponsiblePlannerGroup",
	MaintenancePlanningPlant:       "sap_maintenance_task_list_operation_data.MaintenancePlanningPlant",
	MaintenancePlannerGroup:        "sap_maintenance_task_list_operation_data.MaintenancePlannerGroup",
	ControllingArea:                "sap_maintenance_task_list_operation_data.ControllingArea",
	CostCenter:                     "sap_maintenance_task_list_operation_data.CostCenter",
	MaintenancePlant:               "sap_maintenance_task_list_operation_data.MaintenancePlant",
	ValidityStartDate:              "sap_maintenance_task_list_operation_data.ValidityStartDate",
	ValidityEndDate:                "sap_maintenance_task_list_operation_data.ValidityEndDate",
	TechnicalObject:                "sap_maintenance_task_list_operation_data.TechnicalObject",
	TechObjIsEquipOrFuncnlLoc:      "sap_maintenance_task_list_operation_data.TechObjIsEquipOrFuncnlLoc",
}

// Generated where

var SapMaintenanceTaskListOperationDatumWhere = struct {
	TaskListType                   whereHelperstring
	TaskListGroup                  whereHelperstring
	TaskListGroupCounter           whereHelperstring
	TaskListSequence               whereHelperstring
	TaskListOperationInternalID    whereHelperstring
	TaskListOpBOMItmIntVersCounter whereHelperstring
	MaintenanceTaskListOperation   whereHelpernull_String
	MaintOperationExecStageCode    whereHelpernull_String
	OperationText                  whereHelpernull_String
	OperationControlProfile        whereHelpernull_String
	WorkCenter                     whereHelpernull_String
	Plant                          whereHelpernull_String
	Assembly                       whereHelpernull_String
	OperationCalculationControl    whereHelpernull_String
	OpPlannedWorkQuantity          whereHelpernull_String
	OpWorkQuantityUnit             whereHelpernull_String
	NumberOfCapacities             whereHelpernull_String
	PurchaseOrderQty               whereHelpernull_String
	PurchaseOrderQuantityUnit      whereHelpernull_String
	OperationStandardDuration      whereHelpernull_String
	OperationStandardDurationUnit  whereHelpernull_String
	CostCtrActivityType            whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	OpExternalProcessingPrice      whereHelpernull_String
	OpExternalProcessingCurrency   whereHelpernull_String
	CostElement                    whereHelpernull_String
	PurchasingGroup                whereHelpernull_String
	PurchasingOrganization         whereHelpernull_String
	PurchaseContract               whereHelpernull_String
	PurchaseContractItem           whereHelpernull_String
	Supplier                       whereHelpernull_String
	ChangeNumber                   whereHelpernull_String
	PurchasingInfoRecord           whereHelpernull_String
	IsBusinessPurposeCompleted     whereHelpernull_String
	SupplierAccountGroup           whereHelpernull_String
	TaskListStatus                 whereHelpernull_String
	ResponsiblePlannerGroup        whereHelpernull_String
	MaintenancePlanningPlant       whereHelpernull_String
	MaintenancePlannerGroup        whereHelpernull_String
	ControllingArea                whereHelpernull_String
	CostCenter                     whereHelpernull_String
	MaintenancePlant               whereHelpernull_String
	ValidityStartDate              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	TechnicalObject                whereHelpernull_String
	TechObjIsEquipOrFuncnlLoc      whereHelpernull_String
}{
	TaskListType:                   whereHelperstring{field: "`sap_maintenance_task_list_operation_data`.`TaskListType`"},
	TaskListGroup:                  whereHelperstring{field: "`sap_maintenance_task_list_operation_data`.`TaskListGroup`"},
	TaskListGroupCounter:           whereHelperstring{field: "`sap_maintenance_task_list_operation_data`.`TaskListGroupCounter`"},
	TaskListSequence:               whereHelperstring{field: "`sap_maintenance_task_list_operation_data`.`TaskListSequence`"},
	TaskListOperationInternalID:    whereHelperstring{field: "`sap_maintenance_task_list_operation_data`.`TaskListOperationInternalID`"},
	TaskListOpBOMItmIntVersCounter: whereHelperstring{field: "`sap_maintenance_task_list_operation_data`.`TaskListOpBOMItmIntVersCounter`"},
	MaintenanceTaskListOperation:   whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`MaintenanceTaskListOperation`"},
	MaintOperationExecStageCode:    whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`MaintOperationExecStageCode`"},
	OperationText:                  whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OperationText`"},
	OperationControlProfile:        whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OperationControlProfile`"},
	WorkCenter:                     whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`WorkCenter`"},
	Plant:                          whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`Plant`"},
	Assembly:                       whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`Assembly`"},
	OperationCalculationControl:    whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OperationCalculationControl`"},
	OpPlannedWorkQuantity:          whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OpPlannedWorkQuantity`"},
	OpWorkQuantityUnit:             whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OpWorkQuantityUnit`"},
	NumberOfCapacities:             whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`NumberOfCapacities`"},
	PurchaseOrderQty:               whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchaseOrderQty`"},
	PurchaseOrderQuantityUnit:      whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchaseOrderQuantityUnit`"},
	OperationStandardDuration:      whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OperationStandardDuration`"},
	OperationStandardDurationUnit:  whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OperationStandardDurationUnit`"},
	CostCtrActivityType:            whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`CostCtrActivityType`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`MaterialGroup`"},
	OpExternalProcessingPrice:      whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OpExternalProcessingPrice`"},
	OpExternalProcessingCurrency:   whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`OpExternalProcessingCurrency`"},
	CostElement:                    whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`CostElement`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchasingGroup`"},
	PurchasingOrganization:         whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchasingOrganization`"},
	PurchaseContract:               whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchaseContract`"},
	PurchaseContractItem:           whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchaseContractItem`"},
	Supplier:                       whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`Supplier`"},
	ChangeNumber:                   whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`ChangeNumber`"},
	PurchasingInfoRecord:           whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`PurchasingInfoRecord`"},
	IsBusinessPurposeCompleted:     whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`IsBusinessPurposeCompleted`"},
	SupplierAccountGroup:           whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`SupplierAccountGroup`"},
	TaskListStatus:                 whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`TaskListStatus`"},
	ResponsiblePlannerGroup:        whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`ResponsiblePlannerGroup`"},
	MaintenancePlanningPlant:       whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`MaintenancePlanningPlant`"},
	MaintenancePlannerGroup:        whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`MaintenancePlannerGroup`"},
	ControllingArea:                whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`ControllingArea`"},
	CostCenter:                     whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`CostCenter`"},
	MaintenancePlant:               whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`MaintenancePlant`"},
	ValidityStartDate:              whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`ValidityEndDate`"},
	TechnicalObject:                whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`TechnicalObject`"},
	TechObjIsEquipOrFuncnlLoc:      whereHelpernull_String{field: "`sap_maintenance_task_list_operation_data`.`TechObjIsEquipOrFuncnlLoc`"},
}

// SapMaintenanceTaskListOperationDatumRels is where relationship names are stored.
var SapMaintenanceTaskListOperationDatumRels = struct {
}{}

// sapMaintenanceTaskListOperationDatumR is where relationships are stored.
type sapMaintenanceTaskListOperationDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceTaskListOperationDatumR) NewStruct() *sapMaintenanceTaskListOperationDatumR {
	return &sapMaintenanceTaskListOperationDatumR{}
}

// sapMaintenanceTaskListOperationDatumL is where Load methods for each relationship are stored.
type sapMaintenanceTaskListOperationDatumL struct{}

var (
	sapMaintenanceTaskListOperationDatumAllColumns            = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListSequence", "TaskListOperationInternalID", "TaskListOpBOMItmIntVersCounter", "MaintenanceTaskListOperation", "MaintOperationExecStageCode", "OperationText", "OperationControlProfile", "WorkCenter", "Plant", "Assembly", "OperationCalculationControl", "OpPlannedWorkQuantity", "OpWorkQuantityUnit", "NumberOfCapacities", "PurchaseOrderQty", "PurchaseOrderQuantityUnit", "OperationStandardDuration", "OperationStandardDurationUnit", "CostCtrActivityType", "MaterialGroup", "OpExternalProcessingPrice", "OpExternalProcessingCurrency", "CostElement", "PurchasingGroup", "PurchasingOrganization", "PurchaseContract", "PurchaseContractItem", "Supplier", "ChangeNumber", "PurchasingInfoRecord", "IsBusinessPurposeCompleted", "SupplierAccountGroup", "TaskListStatus", "ResponsiblePlannerGroup", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "ControllingArea", "CostCenter", "MaintenancePlant", "ValidityStartDate", "ValidityEndDate", "TechnicalObject", "TechObjIsEquipOrFuncnlLoc"}
	sapMaintenanceTaskListOperationDatumColumnsWithoutDefault = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListSequence", "TaskListOperationInternalID", "TaskListOpBOMItmIntVersCounter", "MaintenanceTaskListOperation", "MaintOperationExecStageCode", "OperationText", "OperationControlProfile", "WorkCenter", "Plant", "Assembly", "OperationCalculationControl", "OpPlannedWorkQuantity", "OpWorkQuantityUnit", "NumberOfCapacities", "PurchaseOrderQty", "PurchaseOrderQuantityUnit", "OperationStandardDuration", "OperationStandardDurationUnit", "CostCtrActivityType", "MaterialGroup", "OpExternalProcessingPrice", "OpExternalProcessingCurrency", "CostElement", "PurchasingGroup", "PurchasingOrganization", "PurchaseContract", "PurchaseContractItem", "Supplier", "ChangeNumber", "PurchasingInfoRecord", "IsBusinessPurposeCompleted", "SupplierAccountGroup", "TaskListStatus", "ResponsiblePlannerGroup", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "ControllingArea", "CostCenter", "MaintenancePlant", "ValidityStartDate", "ValidityEndDate", "TechnicalObject", "TechObjIsEquipOrFuncnlLoc"}
	sapMaintenanceTaskListOperationDatumColumnsWithDefault    = []string{}
	sapMaintenanceTaskListOperationDatumPrimaryKeyColumns     = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListSequence", "TaskListOperationInternalID", "TaskListOpBOMItmIntVersCounter"}
	sapMaintenanceTaskListOperationDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceTaskListOperationDatumSlice is an alias for a slice of pointers to SapMaintenanceTaskListOperationDatum.
	// This should almost always be used instead of []SapMaintenanceTaskListOperationDatum.
	SapMaintenanceTaskListOperationDatumSlice []*SapMaintenanceTaskListOperationDatum
	// SapMaintenanceTaskListOperationDatumHook is the signature for custom SapMaintenanceTaskListOperationDatum hook methods
	SapMaintenanceTaskListOperationDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceTaskListOperationDatum) error

	sapMaintenanceTaskListOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceTaskListOperationDatumType                 = reflect.TypeOf(&SapMaintenanceTaskListOperationDatum{})
	sapMaintenanceTaskListOperationDatumMapping              = queries.MakeStructMapping(sapMaintenanceTaskListOperationDatumType)
	sapMaintenanceTaskListOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns)
	sapMaintenanceTaskListOperationDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceTaskListOperationDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceTaskListOperationDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceTaskListOperationDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceTaskListOperationDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceTaskListOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceTaskListOperationDatumAfterSelectHooks []SapMaintenanceTaskListOperationDatumHook

var sapMaintenanceTaskListOperationDatumBeforeInsertHooks []SapMaintenanceTaskListOperationDatumHook
var sapMaintenanceTaskListOperationDatumAfterInsertHooks []SapMaintenanceTaskListOperationDatumHook

var sapMaintenanceTaskListOperationDatumBeforeUpdateHooks []SapMaintenanceTaskListOperationDatumHook
var sapMaintenanceTaskListOperationDatumAfterUpdateHooks []SapMaintenanceTaskListOperationDatumHook

var sapMaintenanceTaskListOperationDatumBeforeDeleteHooks []SapMaintenanceTaskListOperationDatumHook
var sapMaintenanceTaskListOperationDatumAfterDeleteHooks []SapMaintenanceTaskListOperationDatumHook

var sapMaintenanceTaskListOperationDatumBeforeUpsertHooks []SapMaintenanceTaskListOperationDatumHook
var sapMaintenanceTaskListOperationDatumAfterUpsertHooks []SapMaintenanceTaskListOperationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceTaskListOperationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListOperationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceTaskListOperationDatumHook registers your hook function for all future operations.
func AddSapMaintenanceTaskListOperationDatumHook(hookPoint boil.HookPoint, sapMaintenanceTaskListOperationDatumHook SapMaintenanceTaskListOperationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceTaskListOperationDatumAfterSelectHooks = append(sapMaintenanceTaskListOperationDatumAfterSelectHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceTaskListOperationDatumBeforeInsertHooks = append(sapMaintenanceTaskListOperationDatumBeforeInsertHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceTaskListOperationDatumAfterInsertHooks = append(sapMaintenanceTaskListOperationDatumAfterInsertHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceTaskListOperationDatumBeforeUpdateHooks = append(sapMaintenanceTaskListOperationDatumBeforeUpdateHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceTaskListOperationDatumAfterUpdateHooks = append(sapMaintenanceTaskListOperationDatumAfterUpdateHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceTaskListOperationDatumBeforeDeleteHooks = append(sapMaintenanceTaskListOperationDatumBeforeDeleteHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceTaskListOperationDatumAfterDeleteHooks = append(sapMaintenanceTaskListOperationDatumAfterDeleteHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceTaskListOperationDatumBeforeUpsertHooks = append(sapMaintenanceTaskListOperationDatumBeforeUpsertHooks, sapMaintenanceTaskListOperationDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceTaskListOperationDatumAfterUpsertHooks = append(sapMaintenanceTaskListOperationDatumAfterUpsertHooks, sapMaintenanceTaskListOperationDatumHook)
	}
}

// One returns a single sapMaintenanceTaskListOperationDatum record from the query.
func (q sapMaintenanceTaskListOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceTaskListOperationDatum, error) {
	o := &SapMaintenanceTaskListOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_task_list_operation_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceTaskListOperationDatum records from the query.
func (q sapMaintenanceTaskListOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceTaskListOperationDatumSlice, error) {
	var o []*SapMaintenanceTaskListOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceTaskListOperationDatum slice")
	}

	if len(sapMaintenanceTaskListOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceTaskListOperationDatum records in the query.
func (q sapMaintenanceTaskListOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_task_list_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceTaskListOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_task_list_operation_data exists")
	}

	return count > 0, nil
}

// SapMaintenanceTaskListOperationData retrieves all the records using an executor.
func SapMaintenanceTaskListOperationData(mods ...qm.QueryMod) sapMaintenanceTaskListOperationDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_task_list_operation_data`"))
	return sapMaintenanceTaskListOperationDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceTaskListOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceTaskListOperationDatum(ctx context.Context, exec boil.ContextExecutor, taskListType string, taskListGroup string, taskListGroupCounter string, taskListSequence string, taskListOperationInternalID string, taskListOpBOMItmIntVersCounter string, selectCols ...string) (*SapMaintenanceTaskListOperationDatum, error) {
	sapMaintenanceTaskListOperationDatumObj := &SapMaintenanceTaskListOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_task_list_operation_data` where `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListSequence`=? AND `TaskListOperationInternalID`=? AND `TaskListOpBOMItmIntVersCounter`=?", sel,
	)

	q := queries.Raw(query, taskListType, taskListGroup, taskListGroupCounter, taskListSequence, taskListOperationInternalID, taskListOpBOMItmIntVersCounter)

	err := q.Bind(ctx, exec, sapMaintenanceTaskListOperationDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_task_list_operation_data")
	}

	if err = sapMaintenanceTaskListOperationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceTaskListOperationDatumObj, err
	}

	return sapMaintenanceTaskListOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceTaskListOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_task_list_operation_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceTaskListOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceTaskListOperationDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListOperationDatumInsertCache[key]
	sapMaintenanceTaskListOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceTaskListOperationDatumAllColumns,
			sapMaintenanceTaskListOperationDatumColumnsWithDefault,
			sapMaintenanceTaskListOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_task_list_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_task_list_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_task_list_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_task_list_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TaskListType,
		o.TaskListGroup,
		o.TaskListGroupCounter,
		o.TaskListSequence,
		o.TaskListOperationInternalID,
		o.TaskListOpBOMItmIntVersCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_task_list_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceTaskListOperationDatumInsertCacheMut.Lock()
		sapMaintenanceTaskListOperationDatumInsertCache[key] = cache
		sapMaintenanceTaskListOperationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceTaskListOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceTaskListOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceTaskListOperationDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListOperationDatumUpdateCache[key]
	sapMaintenanceTaskListOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceTaskListOperationDatumAllColumns,
			sapMaintenanceTaskListOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_task_list_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_task_list_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, append(wl, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_task_list_operation_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_task_list_operation_data")
	}

	if !cached {
		sapMaintenanceTaskListOperationDatumUpdateCacheMut.Lock()
		sapMaintenanceTaskListOperationDatumUpdateCache[key] = cache
		sapMaintenanceTaskListOperationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceTaskListOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_task_list_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_task_list_operation_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceTaskListOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_task_list_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceTaskListOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceTaskListOperationDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceTaskListOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceTaskListOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_task_list_operation_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceTaskListOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceTaskListOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceTaskListOperationDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListOperationDatumUpsertCache[key]
	sapMaintenanceTaskListOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceTaskListOperationDatumAllColumns,
			sapMaintenanceTaskListOperationDatumColumnsWithDefault,
			sapMaintenanceTaskListOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceTaskListOperationDatumAllColumns,
			sapMaintenanceTaskListOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_task_list_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_task_list_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_task_list_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_task_list_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceTaskListOperationDatumType, sapMaintenanceTaskListOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_task_list_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_task_list_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceTaskListOperationDatumUpsertCacheMut.Lock()
		sapMaintenanceTaskListOperationDatumUpsertCache[key] = cache
		sapMaintenanceTaskListOperationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceTaskListOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceTaskListOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceTaskListOperationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceTaskListOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_task_list_operation_data` WHERE `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListSequence`=? AND `TaskListOperationInternalID`=? AND `TaskListOpBOMItmIntVersCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_task_list_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_task_list_operation_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceTaskListOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceTaskListOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_task_list_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_task_list_operation_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceTaskListOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceTaskListOperationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_task_list_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceTaskListOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_task_list_operation_data")
	}

	if len(sapMaintenanceTaskListOperationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceTaskListOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceTaskListOperationDatum(ctx, exec, o.TaskListType, o.TaskListGroup, o.TaskListGroupCounter, o.TaskListSequence, o.TaskListOperationInternalID, o.TaskListOpBOMItmIntVersCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceTaskListOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceTaskListOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_task_list_operation_data`.* FROM `sap_maintenance_task_list_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceTaskListOperationDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceTaskListOperationDatumExists checks if the SapMaintenanceTaskListOperationDatum row exists.
func SapMaintenanceTaskListOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, taskListType string, taskListGroup string, taskListGroupCounter string, taskListSequence string, taskListOperationInternalID string, taskListOpBOMItmIntVersCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_task_list_operation_data` where `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListSequence`=? AND `TaskListOperationInternalID`=? AND `TaskListOpBOMItmIntVersCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, taskListType, taskListGroup, taskListGroupCounter, taskListSequence, taskListOperationInternalID, taskListOpBOMItmIntVersCounter)
	}
	row := exec.QueryRowContext(ctx, sql, taskListType, taskListGroup, taskListGroupCounter, taskListSequence, taskListOperationInternalID, taskListOpBOMItmIntVersCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_task_list_operation_data exists")
	}

	return exists, nil
}
