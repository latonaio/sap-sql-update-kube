// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPhysicalInventoryDocumentHeaderDatum is an object representing the database table.
type SapPhysicalInventoryDocumentHeaderDatum struct {
	FiscalYear                     string      `boil:"FiscalYear" json:"FiscalYear" toml:"FiscalYear" yaml:"FiscalYear"`
	PhysicalInventoryDocument      string      `boil:"PhysicalInventoryDocument" json:"PhysicalInventoryDocument" toml:"PhysicalInventoryDocument" yaml:"PhysicalInventoryDocument"`
	InventoryTransactionType       null.String `boil:"InventoryTransactionType" json:"InventoryTransactionType,omitempty" toml:"InventoryTransactionType" yaml:"InventoryTransactionType,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	InventorySpecialStockType      null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	DocumentDate                   null.String `boil:"DocumentDate" json:"DocumentDate,omitempty" toml:"DocumentDate" yaml:"DocumentDate,omitempty"`
	PhysInventoryPlannedCountDate  null.String `boil:"PhysInventoryPlannedCountDate" json:"PhysInventoryPlannedCountDate,omitempty" toml:"PhysInventoryPlannedCountDate" yaml:"PhysInventoryPlannedCountDate,omitempty"`
	PhysicalInventoryLastCountDate null.String `boil:"PhysicalInventoryLastCountDate" json:"PhysicalInventoryLastCountDate,omitempty" toml:"PhysicalInventoryLastCountDate" yaml:"PhysicalInventoryLastCountDate,omitempty"`
	PostingDate                    null.String `boil:"PostingDate" json:"PostingDate,omitempty" toml:"PostingDate" yaml:"PostingDate,omitempty"`
	FiscalPeriod                   null.String `boil:"FiscalPeriod" json:"FiscalPeriod,omitempty" toml:"FiscalPeriod" yaml:"FiscalPeriod,omitempty"`
	PostingIsBlockedForPhysInvtry  null.Bool   `boil:"PostingIsBlockedForPhysInvtry" json:"PostingIsBlockedForPhysInvtry,omitempty" toml:"PostingIsBlockedForPhysInvtry" yaml:"PostingIsBlockedForPhysInvtry,omitempty"`
	PhysicalInventoryCountStatus   null.String `boil:"PhysicalInventoryCountStatus" json:"PhysicalInventoryCountStatus,omitempty" toml:"PhysicalInventoryCountStatus" yaml:"PhysicalInventoryCountStatus,omitempty"`
	PhysInvtryAdjustmentPostingSts null.String `boil:"PhysInvtryAdjustmentPostingSts" json:"PhysInvtryAdjustmentPostingSts,omitempty" toml:"PhysInvtryAdjustmentPostingSts" yaml:"PhysInvtryAdjustmentPostingSts,omitempty"`
	PhysInvtryDeletionStatus       null.String `boil:"PhysInvtryDeletionStatus" json:"PhysInvtryDeletionStatus,omitempty" toml:"PhysInvtryDeletionStatus" yaml:"PhysInvtryDeletionStatus,omitempty"`
	PhysInvtryDocHasQtySnapshot    null.Bool   `boil:"PhysInvtryDocHasQtySnapshot" json:"PhysInvtryDocHasQtySnapshot,omitempty" toml:"PhysInvtryDocHasQtySnapshot" yaml:"PhysInvtryDocHasQtySnapshot,omitempty"`
	PhysicalInventoryGroupType     null.String `boil:"PhysicalInventoryGroupType" json:"PhysicalInventoryGroupType,omitempty" toml:"PhysicalInventoryGroupType" yaml:"PhysicalInventoryGroupType,omitempty"`
	PhysicalInventoryGroup         null.String `boil:"PhysicalInventoryGroup" json:"PhysicalInventoryGroup,omitempty" toml:"PhysicalInventoryGroup" yaml:"PhysicalInventoryGroup,omitempty"`
	PhysicalInventoryNumber        null.String `boil:"PhysicalInventoryNumber" json:"PhysicalInventoryNumber,omitempty" toml:"PhysicalInventoryNumber" yaml:"PhysicalInventoryNumber,omitempty"`
	PhysInventoryReferenceNumber   null.String `boil:"PhysInventoryReferenceNumber" json:"PhysInventoryReferenceNumber,omitempty" toml:"PhysInventoryReferenceNumber" yaml:"PhysInventoryReferenceNumber,omitempty"`
	PhysicalInventoryDocumentDesc  null.String `boil:"PhysicalInventoryDocumentDesc" json:"PhysicalInventoryDocumentDesc,omitempty" toml:"PhysicalInventoryDocumentDesc" yaml:"PhysicalInventoryDocumentDesc,omitempty"`
	PhysicalInventoryType          null.String `boil:"PhysicalInventoryType" json:"PhysicalInventoryType,omitempty" toml:"PhysicalInventoryType" yaml:"PhysicalInventoryType,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`

	R *sapPhysicalInventoryDocumentHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPhysicalInventoryDocumentHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPhysicalInventoryDocumentHeaderDatumColumns = struct {
	FiscalYear                     string
	PhysicalInventoryDocument      string
	InventoryTransactionType       string
	Plant                          string
	StorageLocation                string
	InventorySpecialStockType      string
	DocumentDate                   string
	PhysInventoryPlannedCountDate  string
	PhysicalInventoryLastCountDate string
	PostingDate                    string
	FiscalPeriod                   string
	PostingIsBlockedForPhysInvtry  string
	PhysicalInventoryCountStatus   string
	PhysInvtryAdjustmentPostingSts string
	PhysInvtryDeletionStatus       string
	PhysInvtryDocHasQtySnapshot    string
	PhysicalInventoryGroupType     string
	PhysicalInventoryGroup         string
	PhysicalInventoryNumber        string
	PhysInventoryReferenceNumber   string
	PhysicalInventoryDocumentDesc  string
	PhysicalInventoryType          string
	LastChangeDateTime             string
}{
	FiscalYear:                     "FiscalYear",
	PhysicalInventoryDocument:      "PhysicalInventoryDocument",
	InventoryTransactionType:       "InventoryTransactionType",
	Plant:                          "Plant",
	StorageLocation:                "StorageLocation",
	InventorySpecialStockType:      "InventorySpecialStockType",
	DocumentDate:                   "DocumentDate",
	PhysInventoryPlannedCountDate:  "PhysInventoryPlannedCountDate",
	PhysicalInventoryLastCountDate: "PhysicalInventoryLastCountDate",
	PostingDate:                    "PostingDate",
	FiscalPeriod:                   "FiscalPeriod",
	PostingIsBlockedForPhysInvtry:  "PostingIsBlockedForPhysInvtry",
	PhysicalInventoryCountStatus:   "PhysicalInventoryCountStatus",
	PhysInvtryAdjustmentPostingSts: "PhysInvtryAdjustmentPostingSts",
	PhysInvtryDeletionStatus:       "PhysInvtryDeletionStatus",
	PhysInvtryDocHasQtySnapshot:    "PhysInvtryDocHasQtySnapshot",
	PhysicalInventoryGroupType:     "PhysicalInventoryGroupType",
	PhysicalInventoryGroup:         "PhysicalInventoryGroup",
	PhysicalInventoryNumber:        "PhysicalInventoryNumber",
	PhysInventoryReferenceNumber:   "PhysInventoryReferenceNumber",
	PhysicalInventoryDocumentDesc:  "PhysicalInventoryDocumentDesc",
	PhysicalInventoryType:          "PhysicalInventoryType",
	LastChangeDateTime:             "LastChangeDateTime",
}

var SapPhysicalInventoryDocumentHeaderDatumTableColumns = struct {
	FiscalYear                     string
	PhysicalInventoryDocument      string
	InventoryTransactionType       string
	Plant                          string
	StorageLocation                string
	InventorySpecialStockType      string
	DocumentDate                   string
	PhysInventoryPlannedCountDate  string
	PhysicalInventoryLastCountDate string
	PostingDate                    string
	FiscalPeriod                   string
	PostingIsBlockedForPhysInvtry  string
	PhysicalInventoryCountStatus   string
	PhysInvtryAdjustmentPostingSts string
	PhysInvtryDeletionStatus       string
	PhysInvtryDocHasQtySnapshot    string
	PhysicalInventoryGroupType     string
	PhysicalInventoryGroup         string
	PhysicalInventoryNumber        string
	PhysInventoryReferenceNumber   string
	PhysicalInventoryDocumentDesc  string
	PhysicalInventoryType          string
	LastChangeDateTime             string
}{
	FiscalYear:                     "sap_physical_inventory_document_header_data.FiscalYear",
	PhysicalInventoryDocument:      "sap_physical_inventory_document_header_data.PhysicalInventoryDocument",
	InventoryTransactionType:       "sap_physical_inventory_document_header_data.InventoryTransactionType",
	Plant:                          "sap_physical_inventory_document_header_data.Plant",
	StorageLocation:                "sap_physical_inventory_document_header_data.StorageLocation",
	InventorySpecialStockType:      "sap_physical_inventory_document_header_data.InventorySpecialStockType",
	DocumentDate:                   "sap_physical_inventory_document_header_data.DocumentDate",
	PhysInventoryPlannedCountDate:  "sap_physical_inventory_document_header_data.PhysInventoryPlannedCountDate",
	PhysicalInventoryLastCountDate: "sap_physical_inventory_document_header_data.PhysicalInventoryLastCountDate",
	PostingDate:                    "sap_physical_inventory_document_header_data.PostingDate",
	FiscalPeriod:                   "sap_physical_inventory_document_header_data.FiscalPeriod",
	PostingIsBlockedForPhysInvtry:  "sap_physical_inventory_document_header_data.PostingIsBlockedForPhysInvtry",
	PhysicalInventoryCountStatus:   "sap_physical_inventory_document_header_data.PhysicalInventoryCountStatus",
	PhysInvtryAdjustmentPostingSts: "sap_physical_inventory_document_header_data.PhysInvtryAdjustmentPostingSts",
	PhysInvtryDeletionStatus:       "sap_physical_inventory_document_header_data.PhysInvtryDeletionStatus",
	PhysInvtryDocHasQtySnapshot:    "sap_physical_inventory_document_header_data.PhysInvtryDocHasQtySnapshot",
	PhysicalInventoryGroupType:     "sap_physical_inventory_document_header_data.PhysicalInventoryGroupType",
	PhysicalInventoryGroup:         "sap_physical_inventory_document_header_data.PhysicalInventoryGroup",
	PhysicalInventoryNumber:        "sap_physical_inventory_document_header_data.PhysicalInventoryNumber",
	PhysInventoryReferenceNumber:   "sap_physical_inventory_document_header_data.PhysInventoryReferenceNumber",
	PhysicalInventoryDocumentDesc:  "sap_physical_inventory_document_header_data.PhysicalInventoryDocumentDesc",
	PhysicalInventoryType:          "sap_physical_inventory_document_header_data.PhysicalInventoryType",
	LastChangeDateTime:             "sap_physical_inventory_document_header_data.LastChangeDateTime",
}

// Generated where

var SapPhysicalInventoryDocumentHeaderDatumWhere = struct {
	FiscalYear                     whereHelperstring
	PhysicalInventoryDocument      whereHelperstring
	InventoryTransactionType       whereHelpernull_String
	Plant                          whereHelpernull_String
	StorageLocation                whereHelpernull_String
	InventorySpecialStockType      whereHelpernull_String
	DocumentDate                   whereHelpernull_String
	PhysInventoryPlannedCountDate  whereHelpernull_String
	PhysicalInventoryLastCountDate whereHelpernull_String
	PostingDate                    whereHelpernull_String
	FiscalPeriod                   whereHelpernull_String
	PostingIsBlockedForPhysInvtry  whereHelpernull_Bool
	PhysicalInventoryCountStatus   whereHelpernull_String
	PhysInvtryAdjustmentPostingSts whereHelpernull_String
	PhysInvtryDeletionStatus       whereHelpernull_String
	PhysInvtryDocHasQtySnapshot    whereHelpernull_Bool
	PhysicalInventoryGroupType     whereHelpernull_String
	PhysicalInventoryGroup         whereHelpernull_String
	PhysicalInventoryNumber        whereHelpernull_String
	PhysInventoryReferenceNumber   whereHelpernull_String
	PhysicalInventoryDocumentDesc  whereHelpernull_String
	PhysicalInventoryType          whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
}{
	FiscalYear:                     whereHelperstring{field: "`sap_physical_inventory_document_header_data`.`FiscalYear`"},
	PhysicalInventoryDocument:      whereHelperstring{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryDocument`"},
	InventoryTransactionType:       whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`InventoryTransactionType`"},
	Plant:                          whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`Plant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`StorageLocation`"},
	InventorySpecialStockType:      whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`InventorySpecialStockType`"},
	DocumentDate:                   whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`DocumentDate`"},
	PhysInventoryPlannedCountDate:  whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysInventoryPlannedCountDate`"},
	PhysicalInventoryLastCountDate: whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryLastCountDate`"},
	PostingDate:                    whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PostingDate`"},
	FiscalPeriod:                   whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`FiscalPeriod`"},
	PostingIsBlockedForPhysInvtry:  whereHelpernull_Bool{field: "`sap_physical_inventory_document_header_data`.`PostingIsBlockedForPhysInvtry`"},
	PhysicalInventoryCountStatus:   whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryCountStatus`"},
	PhysInvtryAdjustmentPostingSts: whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysInvtryAdjustmentPostingSts`"},
	PhysInvtryDeletionStatus:       whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysInvtryDeletionStatus`"},
	PhysInvtryDocHasQtySnapshot:    whereHelpernull_Bool{field: "`sap_physical_inventory_document_header_data`.`PhysInvtryDocHasQtySnapshot`"},
	PhysicalInventoryGroupType:     whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryGroupType`"},
	PhysicalInventoryGroup:         whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryGroup`"},
	PhysicalInventoryNumber:        whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryNumber`"},
	PhysInventoryReferenceNumber:   whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysInventoryReferenceNumber`"},
	PhysicalInventoryDocumentDesc:  whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryDocumentDesc`"},
	PhysicalInventoryType:          whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`PhysicalInventoryType`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_physical_inventory_document_header_data`.`LastChangeDateTime`"},
}

// SapPhysicalInventoryDocumentHeaderDatumRels is where relationship names are stored.
var SapPhysicalInventoryDocumentHeaderDatumRels = struct {
}{}

// sapPhysicalInventoryDocumentHeaderDatumR is where relationships are stored.
type sapPhysicalInventoryDocumentHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapPhysicalInventoryDocumentHeaderDatumR) NewStruct() *sapPhysicalInventoryDocumentHeaderDatumR {
	return &sapPhysicalInventoryDocumentHeaderDatumR{}
}

// sapPhysicalInventoryDocumentHeaderDatumL is where Load methods for each relationship are stored.
type sapPhysicalInventoryDocumentHeaderDatumL struct{}

var (
	sapPhysicalInventoryDocumentHeaderDatumAllColumns            = []string{"FiscalYear", "PhysicalInventoryDocument", "InventoryTransactionType", "Plant", "StorageLocation", "InventorySpecialStockType", "DocumentDate", "PhysInventoryPlannedCountDate", "PhysicalInventoryLastCountDate", "PostingDate", "FiscalPeriod", "PostingIsBlockedForPhysInvtry", "PhysicalInventoryCountStatus", "PhysInvtryAdjustmentPostingSts", "PhysInvtryDeletionStatus", "PhysInvtryDocHasQtySnapshot", "PhysicalInventoryGroupType", "PhysicalInventoryGroup", "PhysicalInventoryNumber", "PhysInventoryReferenceNumber", "PhysicalInventoryDocumentDesc", "PhysicalInventoryType", "LastChangeDateTime"}
	sapPhysicalInventoryDocumentHeaderDatumColumnsWithoutDefault = []string{"FiscalYear", "PhysicalInventoryDocument", "InventoryTransactionType", "Plant", "StorageLocation", "InventorySpecialStockType", "DocumentDate", "PhysInventoryPlannedCountDate", "PhysicalInventoryLastCountDate", "PostingDate", "FiscalPeriod", "PostingIsBlockedForPhysInvtry", "PhysicalInventoryCountStatus", "PhysInvtryAdjustmentPostingSts", "PhysInvtryDeletionStatus", "PhysInvtryDocHasQtySnapshot", "PhysicalInventoryGroupType", "PhysicalInventoryGroup", "PhysicalInventoryNumber", "PhysInventoryReferenceNumber", "PhysicalInventoryDocumentDesc", "PhysicalInventoryType", "LastChangeDateTime"}
	sapPhysicalInventoryDocumentHeaderDatumColumnsWithDefault    = []string{}
	sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns     = []string{"FiscalYear", "PhysicalInventoryDocument"}
	sapPhysicalInventoryDocumentHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapPhysicalInventoryDocumentHeaderDatumSlice is an alias for a slice of pointers to SapPhysicalInventoryDocumentHeaderDatum.
	// This should almost always be used instead of []SapPhysicalInventoryDocumentHeaderDatum.
	SapPhysicalInventoryDocumentHeaderDatumSlice []*SapPhysicalInventoryDocumentHeaderDatum
	// SapPhysicalInventoryDocumentHeaderDatumHook is the signature for custom SapPhysicalInventoryDocumentHeaderDatum hook methods
	SapPhysicalInventoryDocumentHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapPhysicalInventoryDocumentHeaderDatum) error

	sapPhysicalInventoryDocumentHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPhysicalInventoryDocumentHeaderDatumType                 = reflect.TypeOf(&SapPhysicalInventoryDocumentHeaderDatum{})
	sapPhysicalInventoryDocumentHeaderDatumMapping              = queries.MakeStructMapping(sapPhysicalInventoryDocumentHeaderDatumType)
	sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns)
	sapPhysicalInventoryDocumentHeaderDatumInsertCacheMut       sync.RWMutex
	sapPhysicalInventoryDocumentHeaderDatumInsertCache          = make(map[string]insertCache)
	sapPhysicalInventoryDocumentHeaderDatumUpdateCacheMut       sync.RWMutex
	sapPhysicalInventoryDocumentHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapPhysicalInventoryDocumentHeaderDatumUpsertCacheMut       sync.RWMutex
	sapPhysicalInventoryDocumentHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPhysicalInventoryDocumentHeaderDatumAfterSelectHooks []SapPhysicalInventoryDocumentHeaderDatumHook

var sapPhysicalInventoryDocumentHeaderDatumBeforeInsertHooks []SapPhysicalInventoryDocumentHeaderDatumHook
var sapPhysicalInventoryDocumentHeaderDatumAfterInsertHooks []SapPhysicalInventoryDocumentHeaderDatumHook

var sapPhysicalInventoryDocumentHeaderDatumBeforeUpdateHooks []SapPhysicalInventoryDocumentHeaderDatumHook
var sapPhysicalInventoryDocumentHeaderDatumAfterUpdateHooks []SapPhysicalInventoryDocumentHeaderDatumHook

var sapPhysicalInventoryDocumentHeaderDatumBeforeDeleteHooks []SapPhysicalInventoryDocumentHeaderDatumHook
var sapPhysicalInventoryDocumentHeaderDatumAfterDeleteHooks []SapPhysicalInventoryDocumentHeaderDatumHook

var sapPhysicalInventoryDocumentHeaderDatumBeforeUpsertHooks []SapPhysicalInventoryDocumentHeaderDatumHook
var sapPhysicalInventoryDocumentHeaderDatumAfterUpsertHooks []SapPhysicalInventoryDocumentHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPhysicalInventoryDocumentHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPhysicalInventoryDocumentHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPhysicalInventoryDocumentHeaderDatumHook registers your hook function for all future operations.
func AddSapPhysicalInventoryDocumentHeaderDatumHook(hookPoint boil.HookPoint, sapPhysicalInventoryDocumentHeaderDatumHook SapPhysicalInventoryDocumentHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPhysicalInventoryDocumentHeaderDatumAfterSelectHooks = append(sapPhysicalInventoryDocumentHeaderDatumAfterSelectHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapPhysicalInventoryDocumentHeaderDatumBeforeInsertHooks = append(sapPhysicalInventoryDocumentHeaderDatumBeforeInsertHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.AfterInsertHook:
		sapPhysicalInventoryDocumentHeaderDatumAfterInsertHooks = append(sapPhysicalInventoryDocumentHeaderDatumAfterInsertHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapPhysicalInventoryDocumentHeaderDatumBeforeUpdateHooks = append(sapPhysicalInventoryDocumentHeaderDatumBeforeUpdateHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapPhysicalInventoryDocumentHeaderDatumAfterUpdateHooks = append(sapPhysicalInventoryDocumentHeaderDatumAfterUpdateHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapPhysicalInventoryDocumentHeaderDatumBeforeDeleteHooks = append(sapPhysicalInventoryDocumentHeaderDatumBeforeDeleteHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapPhysicalInventoryDocumentHeaderDatumAfterDeleteHooks = append(sapPhysicalInventoryDocumentHeaderDatumAfterDeleteHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapPhysicalInventoryDocumentHeaderDatumBeforeUpsertHooks = append(sapPhysicalInventoryDocumentHeaderDatumBeforeUpsertHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapPhysicalInventoryDocumentHeaderDatumAfterUpsertHooks = append(sapPhysicalInventoryDocumentHeaderDatumAfterUpsertHooks, sapPhysicalInventoryDocumentHeaderDatumHook)
	}
}

// One returns a single sapPhysicalInventoryDocumentHeaderDatum record from the query.
func (q sapPhysicalInventoryDocumentHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPhysicalInventoryDocumentHeaderDatum, error) {
	o := &SapPhysicalInventoryDocumentHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_physical_inventory_document_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPhysicalInventoryDocumentHeaderDatum records from the query.
func (q sapPhysicalInventoryDocumentHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPhysicalInventoryDocumentHeaderDatumSlice, error) {
	var o []*SapPhysicalInventoryDocumentHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPhysicalInventoryDocumentHeaderDatum slice")
	}

	if len(sapPhysicalInventoryDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPhysicalInventoryDocumentHeaderDatum records in the query.
func (q sapPhysicalInventoryDocumentHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_physical_inventory_document_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPhysicalInventoryDocumentHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_physical_inventory_document_header_data exists")
	}

	return count > 0, nil
}

// SapPhysicalInventoryDocumentHeaderData retrieves all the records using an executor.
func SapPhysicalInventoryDocumentHeaderData(mods ...qm.QueryMod) sapPhysicalInventoryDocumentHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_physical_inventory_document_header_data`"))
	return sapPhysicalInventoryDocumentHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapPhysicalInventoryDocumentHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPhysicalInventoryDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, fiscalYear string, physicalInventoryDocument string, selectCols ...string) (*SapPhysicalInventoryDocumentHeaderDatum, error) {
	sapPhysicalInventoryDocumentHeaderDatumObj := &SapPhysicalInventoryDocumentHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_physical_inventory_document_header_data` where `FiscalYear`=? AND `PhysicalInventoryDocument`=?", sel,
	)

	q := queries.Raw(query, fiscalYear, physicalInventoryDocument)

	err := q.Bind(ctx, exec, sapPhysicalInventoryDocumentHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_physical_inventory_document_header_data")
	}

	if err = sapPhysicalInventoryDocumentHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPhysicalInventoryDocumentHeaderDatumObj, err
	}

	return sapPhysicalInventoryDocumentHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPhysicalInventoryDocumentHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_physical_inventory_document_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPhysicalInventoryDocumentHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPhysicalInventoryDocumentHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapPhysicalInventoryDocumentHeaderDatumInsertCache[key]
	sapPhysicalInventoryDocumentHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPhysicalInventoryDocumentHeaderDatumAllColumns,
			sapPhysicalInventoryDocumentHeaderDatumColumnsWithDefault,
			sapPhysicalInventoryDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_physical_inventory_document_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_physical_inventory_document_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_physical_inventory_document_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_physical_inventory_document_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FiscalYear,
		o.PhysicalInventoryDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_physical_inventory_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPhysicalInventoryDocumentHeaderDatumInsertCacheMut.Lock()
		sapPhysicalInventoryDocumentHeaderDatumInsertCache[key] = cache
		sapPhysicalInventoryDocumentHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPhysicalInventoryDocumentHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPhysicalInventoryDocumentHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPhysicalInventoryDocumentHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapPhysicalInventoryDocumentHeaderDatumUpdateCache[key]
	sapPhysicalInventoryDocumentHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPhysicalInventoryDocumentHeaderDatumAllColumns,
			sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_physical_inventory_document_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_physical_inventory_document_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, append(wl, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_physical_inventory_document_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_physical_inventory_document_header_data")
	}

	if !cached {
		sapPhysicalInventoryDocumentHeaderDatumUpdateCacheMut.Lock()
		sapPhysicalInventoryDocumentHeaderDatumUpdateCache[key] = cache
		sapPhysicalInventoryDocumentHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPhysicalInventoryDocumentHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_physical_inventory_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_physical_inventory_document_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPhysicalInventoryDocumentHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_physical_inventory_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPhysicalInventoryDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPhysicalInventoryDocumentHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapPhysicalInventoryDocumentHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPhysicalInventoryDocumentHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_physical_inventory_document_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPhysicalInventoryDocumentHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPhysicalInventoryDocumentHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPhysicalInventoryDocumentHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapPhysicalInventoryDocumentHeaderDatumUpsertCache[key]
	sapPhysicalInventoryDocumentHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPhysicalInventoryDocumentHeaderDatumAllColumns,
			sapPhysicalInventoryDocumentHeaderDatumColumnsWithDefault,
			sapPhysicalInventoryDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPhysicalInventoryDocumentHeaderDatumAllColumns,
			sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_physical_inventory_document_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_physical_inventory_document_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_physical_inventory_document_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_physical_inventory_document_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPhysicalInventoryDocumentHeaderDatumType, sapPhysicalInventoryDocumentHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_physical_inventory_document_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_physical_inventory_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPhysicalInventoryDocumentHeaderDatumUpsertCacheMut.Lock()
		sapPhysicalInventoryDocumentHeaderDatumUpsertCache[key] = cache
		sapPhysicalInventoryDocumentHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPhysicalInventoryDocumentHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPhysicalInventoryDocumentHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPhysicalInventoryDocumentHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_physical_inventory_document_header_data` WHERE `FiscalYear`=? AND `PhysicalInventoryDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_physical_inventory_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_physical_inventory_document_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPhysicalInventoryDocumentHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPhysicalInventoryDocumentHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_physical_inventory_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_physical_inventory_document_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPhysicalInventoryDocumentHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPhysicalInventoryDocumentHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_physical_inventory_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPhysicalInventoryDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_physical_inventory_document_header_data")
	}

	if len(sapPhysicalInventoryDocumentHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPhysicalInventoryDocumentHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPhysicalInventoryDocumentHeaderDatum(ctx, exec, o.FiscalYear, o.PhysicalInventoryDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPhysicalInventoryDocumentHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPhysicalInventoryDocumentHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_physical_inventory_document_header_data`.* FROM `sap_physical_inventory_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPhysicalInventoryDocumentHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPhysicalInventoryDocumentHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapPhysicalInventoryDocumentHeaderDatumExists checks if the SapPhysicalInventoryDocumentHeaderDatum row exists.
func SapPhysicalInventoryDocumentHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, fiscalYear string, physicalInventoryDocument string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_physical_inventory_document_header_data` where `FiscalYear`=? AND `PhysicalInventoryDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fiscalYear, physicalInventoryDocument)
	}
	row := exec.QueryRowContext(ctx, sql, fiscalYear, physicalInventoryDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_physical_inventory_document_header_data exists")
	}

	return exists, nil
}
