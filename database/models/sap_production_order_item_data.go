// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionOrderItemDatum is an object representing the database table.
type SapProductionOrderItemDatum struct {
	ManufacturingOrder             string      `boil:"ManufacturingOrder" json:"ManufacturingOrder" toml:"ManufacturingOrder" yaml:"ManufacturingOrder"`
	ManufacturingOrderItem         string      `boil:"ManufacturingOrderItem" json:"ManufacturingOrderItem" toml:"ManufacturingOrderItem" yaml:"ManufacturingOrderItem"`
	ManufacturingOrderCategory     null.String `boil:"ManufacturingOrderCategory" json:"ManufacturingOrderCategory,omitempty" toml:"ManufacturingOrderCategory" yaml:"ManufacturingOrderCategory,omitempty"`
	ManufacturingOrderType         null.String `boil:"ManufacturingOrderType" json:"ManufacturingOrderType,omitempty" toml:"ManufacturingOrderType" yaml:"ManufacturingOrderType,omitempty"`
	IsCompletelyDelivered          null.Bool   `boil:"IsCompletelyDelivered" json:"IsCompletelyDelivered,omitempty" toml:"IsCompletelyDelivered" yaml:"IsCompletelyDelivered,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	ProductionPlant                null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	MRPArea                        null.String `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	QuantityDistributionKey        null.String `boil:"QuantityDistributionKey" json:"QuantityDistributionKey,omitempty" toml:"QuantityDistributionKey" yaml:"QuantityDistributionKey,omitempty"`
	MaterialGoodsReceiptDuration   null.String `boil:"MaterialGoodsReceiptDuration" json:"MaterialGoodsReceiptDuration,omitempty" toml:"MaterialGoodsReceiptDuration" yaml:"MaterialGoodsReceiptDuration,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	InventoryUsabilityCode         null.String `boil:"InventoryUsabilityCode" json:"InventoryUsabilityCode,omitempty" toml:"InventoryUsabilityCode" yaml:"InventoryUsabilityCode,omitempty"`
	GoodsRecipientName             null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	UnloadingPointName             null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	MfgOrderItemPlndDeliveryDate   null.String `boil:"MfgOrderItemPlndDeliveryDate" json:"MfgOrderItemPlndDeliveryDate,omitempty" toml:"MfgOrderItemPlndDeliveryDate" yaml:"MfgOrderItemPlndDeliveryDate,omitempty"`
	MfgOrderItemActualDeliveryDate null.String `boil:"MfgOrderItemActualDeliveryDate" json:"MfgOrderItemActualDeliveryDate,omitempty" toml:"MfgOrderItemActualDeliveryDate" yaml:"MfgOrderItemActualDeliveryDate,omitempty"`
	ProductionUnit                 null.String `boil:"ProductionUnit" json:"ProductionUnit,omitempty" toml:"ProductionUnit" yaml:"ProductionUnit,omitempty"`
	MfgOrderItemPlannedTotalQty    null.String `boil:"MfgOrderItemPlannedTotalQty" json:"MfgOrderItemPlannedTotalQty,omitempty" toml:"MfgOrderItemPlannedTotalQty" yaml:"MfgOrderItemPlannedTotalQty,omitempty"`
	MfgOrderItemPlannedScrapQty    null.String `boil:"MfgOrderItemPlannedScrapQty" json:"MfgOrderItemPlannedScrapQty,omitempty" toml:"MfgOrderItemPlannedScrapQty" yaml:"MfgOrderItemPlannedScrapQty,omitempty"`
	MfgOrderItemGoodsReceiptQty    null.String `boil:"MfgOrderItemGoodsReceiptQty" json:"MfgOrderItemGoodsReceiptQty,omitempty" toml:"MfgOrderItemGoodsReceiptQty" yaml:"MfgOrderItemGoodsReceiptQty,omitempty"`
	MfgOrderItemActualDeviationQty null.String `boil:"MfgOrderItemActualDeviationQty" json:"MfgOrderItemActualDeviationQty,omitempty" toml:"MfgOrderItemActualDeviationQty" yaml:"MfgOrderItemActualDeviationQty,omitempty"`

	R *sapProductionOrderItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionOrderItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionOrderItemDatumColumns = struct {
	ManufacturingOrder             string
	ManufacturingOrderItem         string
	ManufacturingOrderCategory     string
	ManufacturingOrderType         string
	IsCompletelyDelivered          string
	Material                       string
	ProductionPlant                string
	Plant                          string
	MRPArea                        string
	QuantityDistributionKey        string
	MaterialGoodsReceiptDuration   string
	StorageLocation                string
	Batch                          string
	InventoryUsabilityCode         string
	GoodsRecipientName             string
	UnloadingPointName             string
	MfgOrderItemPlndDeliveryDate   string
	MfgOrderItemActualDeliveryDate string
	ProductionUnit                 string
	MfgOrderItemPlannedTotalQty    string
	MfgOrderItemPlannedScrapQty    string
	MfgOrderItemGoodsReceiptQty    string
	MfgOrderItemActualDeviationQty string
}{
	ManufacturingOrder:             "ManufacturingOrder",
	ManufacturingOrderItem:         "ManufacturingOrderItem",
	ManufacturingOrderCategory:     "ManufacturingOrderCategory",
	ManufacturingOrderType:         "ManufacturingOrderType",
	IsCompletelyDelivered:          "IsCompletelyDelivered",
	Material:                       "Material",
	ProductionPlant:                "ProductionPlant",
	Plant:                          "Plant",
	MRPArea:                        "MRPArea",
	QuantityDistributionKey:        "QuantityDistributionKey",
	MaterialGoodsReceiptDuration:   "MaterialGoodsReceiptDuration",
	StorageLocation:                "StorageLocation",
	Batch:                          "Batch",
	InventoryUsabilityCode:         "InventoryUsabilityCode",
	GoodsRecipientName:             "GoodsRecipientName",
	UnloadingPointName:             "UnloadingPointName",
	MfgOrderItemPlndDeliveryDate:   "MfgOrderItemPlndDeliveryDate",
	MfgOrderItemActualDeliveryDate: "MfgOrderItemActualDeliveryDate",
	ProductionUnit:                 "ProductionUnit",
	MfgOrderItemPlannedTotalQty:    "MfgOrderItemPlannedTotalQty",
	MfgOrderItemPlannedScrapQty:    "MfgOrderItemPlannedScrapQty",
	MfgOrderItemGoodsReceiptQty:    "MfgOrderItemGoodsReceiptQty",
	MfgOrderItemActualDeviationQty: "MfgOrderItemActualDeviationQty",
}

var SapProductionOrderItemDatumTableColumns = struct {
	ManufacturingOrder             string
	ManufacturingOrderItem         string
	ManufacturingOrderCategory     string
	ManufacturingOrderType         string
	IsCompletelyDelivered          string
	Material                       string
	ProductionPlant                string
	Plant                          string
	MRPArea                        string
	QuantityDistributionKey        string
	MaterialGoodsReceiptDuration   string
	StorageLocation                string
	Batch                          string
	InventoryUsabilityCode         string
	GoodsRecipientName             string
	UnloadingPointName             string
	MfgOrderItemPlndDeliveryDate   string
	MfgOrderItemActualDeliveryDate string
	ProductionUnit                 string
	MfgOrderItemPlannedTotalQty    string
	MfgOrderItemPlannedScrapQty    string
	MfgOrderItemGoodsReceiptQty    string
	MfgOrderItemActualDeviationQty string
}{
	ManufacturingOrder:             "sap_production_order_item_data.ManufacturingOrder",
	ManufacturingOrderItem:         "sap_production_order_item_data.ManufacturingOrderItem",
	ManufacturingOrderCategory:     "sap_production_order_item_data.ManufacturingOrderCategory",
	ManufacturingOrderType:         "sap_production_order_item_data.ManufacturingOrderType",
	IsCompletelyDelivered:          "sap_production_order_item_data.IsCompletelyDelivered",
	Material:                       "sap_production_order_item_data.Material",
	ProductionPlant:                "sap_production_order_item_data.ProductionPlant",
	Plant:                          "sap_production_order_item_data.Plant",
	MRPArea:                        "sap_production_order_item_data.MRPArea",
	QuantityDistributionKey:        "sap_production_order_item_data.QuantityDistributionKey",
	MaterialGoodsReceiptDuration:   "sap_production_order_item_data.MaterialGoodsReceiptDuration",
	StorageLocation:                "sap_production_order_item_data.StorageLocation",
	Batch:                          "sap_production_order_item_data.Batch",
	InventoryUsabilityCode:         "sap_production_order_item_data.InventoryUsabilityCode",
	GoodsRecipientName:             "sap_production_order_item_data.GoodsRecipientName",
	UnloadingPointName:             "sap_production_order_item_data.UnloadingPointName",
	MfgOrderItemPlndDeliveryDate:   "sap_production_order_item_data.MfgOrderItemPlndDeliveryDate",
	MfgOrderItemActualDeliveryDate: "sap_production_order_item_data.MfgOrderItemActualDeliveryDate",
	ProductionUnit:                 "sap_production_order_item_data.ProductionUnit",
	MfgOrderItemPlannedTotalQty:    "sap_production_order_item_data.MfgOrderItemPlannedTotalQty",
	MfgOrderItemPlannedScrapQty:    "sap_production_order_item_data.MfgOrderItemPlannedScrapQty",
	MfgOrderItemGoodsReceiptQty:    "sap_production_order_item_data.MfgOrderItemGoodsReceiptQty",
	MfgOrderItemActualDeviationQty: "sap_production_order_item_data.MfgOrderItemActualDeviationQty",
}

// Generated where

var SapProductionOrderItemDatumWhere = struct {
	ManufacturingOrder             whereHelperstring
	ManufacturingOrderItem         whereHelperstring
	ManufacturingOrderCategory     whereHelpernull_String
	ManufacturingOrderType         whereHelpernull_String
	IsCompletelyDelivered          whereHelpernull_Bool
	Material                       whereHelpernull_String
	ProductionPlant                whereHelpernull_String
	Plant                          whereHelpernull_String
	MRPArea                        whereHelpernull_String
	QuantityDistributionKey        whereHelpernull_String
	MaterialGoodsReceiptDuration   whereHelpernull_String
	StorageLocation                whereHelpernull_String
	Batch                          whereHelpernull_String
	InventoryUsabilityCode         whereHelpernull_String
	GoodsRecipientName             whereHelpernull_String
	UnloadingPointName             whereHelpernull_String
	MfgOrderItemPlndDeliveryDate   whereHelpernull_String
	MfgOrderItemActualDeliveryDate whereHelpernull_String
	ProductionUnit                 whereHelpernull_String
	MfgOrderItemPlannedTotalQty    whereHelpernull_String
	MfgOrderItemPlannedScrapQty    whereHelpernull_String
	MfgOrderItemGoodsReceiptQty    whereHelpernull_String
	MfgOrderItemActualDeviationQty whereHelpernull_String
}{
	ManufacturingOrder:             whereHelperstring{field: "`sap_production_order_item_data`.`ManufacturingOrder`"},
	ManufacturingOrderItem:         whereHelperstring{field: "`sap_production_order_item_data`.`ManufacturingOrderItem`"},
	ManufacturingOrderCategory:     whereHelpernull_String{field: "`sap_production_order_item_data`.`ManufacturingOrderCategory`"},
	ManufacturingOrderType:         whereHelpernull_String{field: "`sap_production_order_item_data`.`ManufacturingOrderType`"},
	IsCompletelyDelivered:          whereHelpernull_Bool{field: "`sap_production_order_item_data`.`IsCompletelyDelivered`"},
	Material:                       whereHelpernull_String{field: "`sap_production_order_item_data`.`Material`"},
	ProductionPlant:                whereHelpernull_String{field: "`sap_production_order_item_data`.`ProductionPlant`"},
	Plant:                          whereHelpernull_String{field: "`sap_production_order_item_data`.`Plant`"},
	MRPArea:                        whereHelpernull_String{field: "`sap_production_order_item_data`.`MRPArea`"},
	QuantityDistributionKey:        whereHelpernull_String{field: "`sap_production_order_item_data`.`QuantityDistributionKey`"},
	MaterialGoodsReceiptDuration:   whereHelpernull_String{field: "`sap_production_order_item_data`.`MaterialGoodsReceiptDuration`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_production_order_item_data`.`StorageLocation`"},
	Batch:                          whereHelpernull_String{field: "`sap_production_order_item_data`.`Batch`"},
	InventoryUsabilityCode:         whereHelpernull_String{field: "`sap_production_order_item_data`.`InventoryUsabilityCode`"},
	GoodsRecipientName:             whereHelpernull_String{field: "`sap_production_order_item_data`.`GoodsRecipientName`"},
	UnloadingPointName:             whereHelpernull_String{field: "`sap_production_order_item_data`.`UnloadingPointName`"},
	MfgOrderItemPlndDeliveryDate:   whereHelpernull_String{field: "`sap_production_order_item_data`.`MfgOrderItemPlndDeliveryDate`"},
	MfgOrderItemActualDeliveryDate: whereHelpernull_String{field: "`sap_production_order_item_data`.`MfgOrderItemActualDeliveryDate`"},
	ProductionUnit:                 whereHelpernull_String{field: "`sap_production_order_item_data`.`ProductionUnit`"},
	MfgOrderItemPlannedTotalQty:    whereHelpernull_String{field: "`sap_production_order_item_data`.`MfgOrderItemPlannedTotalQty`"},
	MfgOrderItemPlannedScrapQty:    whereHelpernull_String{field: "`sap_production_order_item_data`.`MfgOrderItemPlannedScrapQty`"},
	MfgOrderItemGoodsReceiptQty:    whereHelpernull_String{field: "`sap_production_order_item_data`.`MfgOrderItemGoodsReceiptQty`"},
	MfgOrderItemActualDeviationQty: whereHelpernull_String{field: "`sap_production_order_item_data`.`MfgOrderItemActualDeviationQty`"},
}

// SapProductionOrderItemDatumRels is where relationship names are stored.
var SapProductionOrderItemDatumRels = struct {
	ManufacturingOrderSapProductionOrderGeneralDatum string
}{
	ManufacturingOrderSapProductionOrderGeneralDatum: "ManufacturingOrderSapProductionOrderGeneralDatum",
}

// sapProductionOrderItemDatumR is where relationships are stored.
type sapProductionOrderItemDatumR struct {
	ManufacturingOrderSapProductionOrderGeneralDatum *SapProductionOrderGeneralDatum `boil:"ManufacturingOrderSapProductionOrderGeneralDatum" json:"ManufacturingOrderSapProductionOrderGeneralDatum" toml:"ManufacturingOrderSapProductionOrderGeneralDatum" yaml:"ManufacturingOrderSapProductionOrderGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductionOrderItemDatumR) NewStruct() *sapProductionOrderItemDatumR {
	return &sapProductionOrderItemDatumR{}
}

// sapProductionOrderItemDatumL is where Load methods for each relationship are stored.
type sapProductionOrderItemDatumL struct{}

var (
	sapProductionOrderItemDatumAllColumns            = []string{"ManufacturingOrder", "ManufacturingOrderItem", "ManufacturingOrderCategory", "ManufacturingOrderType", "IsCompletelyDelivered", "Material", "ProductionPlant", "Plant", "MRPArea", "QuantityDistributionKey", "MaterialGoodsReceiptDuration", "StorageLocation", "Batch", "InventoryUsabilityCode", "GoodsRecipientName", "UnloadingPointName", "MfgOrderItemPlndDeliveryDate", "MfgOrderItemActualDeliveryDate", "ProductionUnit", "MfgOrderItemPlannedTotalQty", "MfgOrderItemPlannedScrapQty", "MfgOrderItemGoodsReceiptQty", "MfgOrderItemActualDeviationQty"}
	sapProductionOrderItemDatumColumnsWithoutDefault = []string{"ManufacturingOrder", "ManufacturingOrderItem", "ManufacturingOrderCategory", "ManufacturingOrderType", "IsCompletelyDelivered", "Material", "ProductionPlant", "Plant", "MRPArea", "QuantityDistributionKey", "MaterialGoodsReceiptDuration", "StorageLocation", "Batch", "InventoryUsabilityCode", "GoodsRecipientName", "UnloadingPointName", "MfgOrderItemPlndDeliveryDate", "MfgOrderItemActualDeliveryDate", "ProductionUnit", "MfgOrderItemPlannedTotalQty", "MfgOrderItemPlannedScrapQty", "MfgOrderItemGoodsReceiptQty", "MfgOrderItemActualDeviationQty"}
	sapProductionOrderItemDatumColumnsWithDefault    = []string{}
	sapProductionOrderItemDatumPrimaryKeyColumns     = []string{"ManufacturingOrder", "ManufacturingOrderItem"}
	sapProductionOrderItemDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionOrderItemDatumSlice is an alias for a slice of pointers to SapProductionOrderItemDatum.
	// This should almost always be used instead of []SapProductionOrderItemDatum.
	SapProductionOrderItemDatumSlice []*SapProductionOrderItemDatum
	// SapProductionOrderItemDatumHook is the signature for custom SapProductionOrderItemDatum hook methods
	SapProductionOrderItemDatumHook func(context.Context, boil.ContextExecutor, *SapProductionOrderItemDatum) error

	sapProductionOrderItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionOrderItemDatumType                 = reflect.TypeOf(&SapProductionOrderItemDatum{})
	sapProductionOrderItemDatumMapping              = queries.MakeStructMapping(sapProductionOrderItemDatumType)
	sapProductionOrderItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, sapProductionOrderItemDatumPrimaryKeyColumns)
	sapProductionOrderItemDatumInsertCacheMut       sync.RWMutex
	sapProductionOrderItemDatumInsertCache          = make(map[string]insertCache)
	sapProductionOrderItemDatumUpdateCacheMut       sync.RWMutex
	sapProductionOrderItemDatumUpdateCache          = make(map[string]updateCache)
	sapProductionOrderItemDatumUpsertCacheMut       sync.RWMutex
	sapProductionOrderItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionOrderItemDatumAfterSelectHooks []SapProductionOrderItemDatumHook

var sapProductionOrderItemDatumBeforeInsertHooks []SapProductionOrderItemDatumHook
var sapProductionOrderItemDatumAfterInsertHooks []SapProductionOrderItemDatumHook

var sapProductionOrderItemDatumBeforeUpdateHooks []SapProductionOrderItemDatumHook
var sapProductionOrderItemDatumAfterUpdateHooks []SapProductionOrderItemDatumHook

var sapProductionOrderItemDatumBeforeDeleteHooks []SapProductionOrderItemDatumHook
var sapProductionOrderItemDatumAfterDeleteHooks []SapProductionOrderItemDatumHook

var sapProductionOrderItemDatumBeforeUpsertHooks []SapProductionOrderItemDatumHook
var sapProductionOrderItemDatumAfterUpsertHooks []SapProductionOrderItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionOrderItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionOrderItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionOrderItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionOrderItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionOrderItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionOrderItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionOrderItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionOrderItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionOrderItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionOrderItemDatumHook registers your hook function for all future operations.
func AddSapProductionOrderItemDatumHook(hookPoint boil.HookPoint, sapProductionOrderItemDatumHook SapProductionOrderItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionOrderItemDatumAfterSelectHooks = append(sapProductionOrderItemDatumAfterSelectHooks, sapProductionOrderItemDatumHook)
	case boil.BeforeInsertHook:
		sapProductionOrderItemDatumBeforeInsertHooks = append(sapProductionOrderItemDatumBeforeInsertHooks, sapProductionOrderItemDatumHook)
	case boil.AfterInsertHook:
		sapProductionOrderItemDatumAfterInsertHooks = append(sapProductionOrderItemDatumAfterInsertHooks, sapProductionOrderItemDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionOrderItemDatumBeforeUpdateHooks = append(sapProductionOrderItemDatumBeforeUpdateHooks, sapProductionOrderItemDatumHook)
	case boil.AfterUpdateHook:
		sapProductionOrderItemDatumAfterUpdateHooks = append(sapProductionOrderItemDatumAfterUpdateHooks, sapProductionOrderItemDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionOrderItemDatumBeforeDeleteHooks = append(sapProductionOrderItemDatumBeforeDeleteHooks, sapProductionOrderItemDatumHook)
	case boil.AfterDeleteHook:
		sapProductionOrderItemDatumAfterDeleteHooks = append(sapProductionOrderItemDatumAfterDeleteHooks, sapProductionOrderItemDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionOrderItemDatumBeforeUpsertHooks = append(sapProductionOrderItemDatumBeforeUpsertHooks, sapProductionOrderItemDatumHook)
	case boil.AfterUpsertHook:
		sapProductionOrderItemDatumAfterUpsertHooks = append(sapProductionOrderItemDatumAfterUpsertHooks, sapProductionOrderItemDatumHook)
	}
}

// One returns a single sapProductionOrderItemDatum record from the query.
func (q sapProductionOrderItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionOrderItemDatum, error) {
	o := &SapProductionOrderItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_order_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionOrderItemDatum records from the query.
func (q sapProductionOrderItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionOrderItemDatumSlice, error) {
	var o []*SapProductionOrderItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionOrderItemDatum slice")
	}

	if len(sapProductionOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionOrderItemDatum records in the query.
func (q sapProductionOrderItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_order_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionOrderItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_order_item_data exists")
	}

	return count > 0, nil
}

// ManufacturingOrderSapProductionOrderGeneralDatum pointed to by the foreign key.
func (o *SapProductionOrderItemDatum) ManufacturingOrderSapProductionOrderGeneralDatum(mods ...qm.QueryMod) sapProductionOrderGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ManufacturingOrder` = ?", o.ManufacturingOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductionOrderGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_production_order_general_data`")

	return query
}

// LoadManufacturingOrderSapProductionOrderGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductionOrderItemDatumL) LoadManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderItemDatum
	var object *SapProductionOrderItemDatum

	if singular {
		object = maybeSapProductionOrderItemDatum.(*SapProductionOrderItemDatum)
	} else {
		slice = *maybeSapProductionOrderItemDatum.(*[]*SapProductionOrderItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderItemDatumR{}
		}
		args = append(args, object.ManufacturingOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_general_data`),
		qm.WhereIn(`sap_production_order_general_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductionOrderGeneralDatum")
	}

	var resultSlice []*SapProductionOrderGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductionOrderGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_production_order_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_general_data")
	}

	if len(sapProductionOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductionOrderGeneralDatumR{}
		}
		foreign.R.ManufacturingOrderSapProductionOrderItemData = append(foreign.R.ManufacturingOrderSapProductionOrderItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductionOrderGeneralDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderItemData = append(foreign.R.ManufacturingOrderSapProductionOrderItemData, local)
				break
			}
		}
	}

	return nil
}

// SetManufacturingOrderSapProductionOrderGeneralDatum of the sapProductionOrderItemDatum to the related item.
// Sets o.R.ManufacturingOrderSapProductionOrderGeneralDatum to related.
// Adds o to related.R.ManufacturingOrderSapProductionOrderItemData.
func (o *SapProductionOrderItemDatum) SetManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductionOrderGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_production_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
		strmangle.WhereClause("`", "`", 0, sapProductionOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ManufacturingOrder, o.ManufacturingOrder, o.ManufacturingOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManufacturingOrder = related.ManufacturingOrder
	if o.R == nil {
		o.R = &sapProductionOrderItemDatumR{
			ManufacturingOrderSapProductionOrderGeneralDatum: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderItemData: SapProductionOrderItemDatumSlice{o},
		}
	} else {
		related.R.ManufacturingOrderSapProductionOrderItemData = append(related.R.ManufacturingOrderSapProductionOrderItemData, o)
	}

	return nil
}

// SapProductionOrderItemData retrieves all the records using an executor.
func SapProductionOrderItemData(mods ...qm.QueryMod) sapProductionOrderItemDatumQuery {
	mods = append(mods, qm.From("`sap_production_order_item_data`"))
	return sapProductionOrderItemDatumQuery{NewQuery(mods...)}
}

// FindSapProductionOrderItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, manufacturingOrderItem string, selectCols ...string) (*SapProductionOrderItemDatum, error) {
	sapProductionOrderItemDatumObj := &SapProductionOrderItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_order_item_data` where `ManufacturingOrder`=? AND `ManufacturingOrderItem`=?", sel,
	)

	q := queries.Raw(query, manufacturingOrder, manufacturingOrderItem)

	err := q.Bind(ctx, exec, sapProductionOrderItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_order_item_data")
	}

	if err = sapProductionOrderItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionOrderItemDatumObj, err
	}

	return sapProductionOrderItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionOrderItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionOrderItemDatumInsertCacheMut.RLock()
	cache, cached := sapProductionOrderItemDatumInsertCache[key]
	sapProductionOrderItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionOrderItemDatumAllColumns,
			sapProductionOrderItemDatumColumnsWithDefault,
			sapProductionOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_order_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_order_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_order_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionOrderItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_order_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ManufacturingOrder,
		o.ManufacturingOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_item_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderItemDatumInsertCacheMut.Lock()
		sapProductionOrderItemDatumInsertCache[key] = cache
		sapProductionOrderItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionOrderItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionOrderItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionOrderItemDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionOrderItemDatumUpdateCache[key]
	sapProductionOrderItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionOrderItemDatumAllColumns,
			sapProductionOrderItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_order_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_order_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionOrderItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, append(wl, sapProductionOrderItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_order_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_order_item_data")
	}

	if !cached {
		sapProductionOrderItemDatumUpdateCacheMut.Lock()
		sapProductionOrderItemDatumUpdateCache[key] = cache
		sapProductionOrderItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionOrderItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_order_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_order_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionOrderItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionOrderItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionOrderItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionOrderItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionOrderItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionOrderItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionOrderItemDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionOrderItemDatumUpsertCache[key]
	sapProductionOrderItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionOrderItemDatumAllColumns,
			sapProductionOrderItemDatumColumnsWithDefault,
			sapProductionOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionOrderItemDatumAllColumns,
			sapProductionOrderItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_order_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_order_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_order_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_order_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionOrderItemDatumType, sapProductionOrderItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_order_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_item_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderItemDatumUpsertCacheMut.Lock()
		sapProductionOrderItemDatumUpsertCache[key] = cache
		sapProductionOrderItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionOrderItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionOrderItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionOrderItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionOrderItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_order_item_data` WHERE `ManufacturingOrder`=? AND `ManufacturingOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_order_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_order_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionOrderItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionOrderItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_order_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionOrderItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionOrderItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionOrderItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_item_data")
	}

	if len(sapProductionOrderItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionOrderItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionOrderItemDatum(ctx, exec, o.ManufacturingOrder, o.ManufacturingOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionOrderItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionOrderItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_order_item_data`.* FROM `sap_production_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionOrderItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionOrderItemDatumExists checks if the SapProductionOrderItemDatum row exists.
func SapProductionOrderItemDatumExists(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, manufacturingOrderItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_order_item_data` where `ManufacturingOrder`=? AND `ManufacturingOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, manufacturingOrder, manufacturingOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, manufacturingOrder, manufacturingOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_order_item_data exists")
	}

	return exists, nil
}
