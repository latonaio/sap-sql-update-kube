// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceNotificationItemCauseDatum is an object representing the database table.
type SapMaintenanceNotificationItemCauseDatum struct {
	MaintenanceNotification        string      `boil:"MaintenanceNotification" json:"MaintenanceNotification" toml:"MaintenanceNotification" yaml:"MaintenanceNotification"`
	MaintenanceNotificationItem    string      `boil:"MaintenanceNotificationItem" json:"MaintenanceNotificationItem" toml:"MaintenanceNotificationItem" yaml:"MaintenanceNotificationItem"`
	MaintenanceNotificationCause   string      `boil:"MaintenanceNotificationCause" json:"MaintenanceNotificationCause" toml:"MaintenanceNotificationCause" yaml:"MaintenanceNotificationCause"`
	MaintNotifCauseText            null.String `boil:"MaintNotifCauseText" json:"MaintNotifCauseText,omitempty" toml:"MaintNotifCauseText" yaml:"MaintNotifCauseText,omitempty"`
	MaintNotifCauseCodeGroup       null.String `boil:"MaintNotifCauseCodeGroup" json:"MaintNotifCauseCodeGroup,omitempty" toml:"MaintNotifCauseCodeGroup" yaml:"MaintNotifCauseCodeGroup,omitempty"`
	MaintNotifCauseCodeGroupName   null.String `boil:"MaintNotifCauseCodeGroupName" json:"MaintNotifCauseCodeGroupName,omitempty" toml:"MaintNotifCauseCodeGroupName" yaml:"MaintNotifCauseCodeGroupName,omitempty"`
	MaintNotificationCauseCode     null.String `boil:"MaintNotificationCauseCode" json:"MaintNotificationCauseCode,omitempty" toml:"MaintNotificationCauseCode" yaml:"MaintNotificationCauseCode,omitempty"`
	MaintNotificationCauseCodeName null.String `boil:"MaintNotificationCauseCodeName" json:"MaintNotificationCauseCodeName,omitempty" toml:"MaintNotificationCauseCodeName" yaml:"MaintNotificationCauseCodeName,omitempty"`
	MaintNotificationRootCause     null.String `boil:"MaintNotificationRootCause" json:"MaintNotificationRootCause,omitempty" toml:"MaintNotificationRootCause" yaml:"MaintNotificationRootCause,omitempty"`
	MaintNotificationRootCauseText null.String `boil:"MaintNotificationRootCauseText" json:"MaintNotificationRootCauseText,omitempty" toml:"MaintNotificationRootCauseText" yaml:"MaintNotificationRootCauseText,omitempty"`
	IsDeleted                      null.Bool   `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapMaintenanceNotificationItemCauseDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceNotificationItemCauseDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceNotificationItemCauseDatumColumns = struct {
	MaintenanceNotification        string
	MaintenanceNotificationItem    string
	MaintenanceNotificationCause   string
	MaintNotifCauseText            string
	MaintNotifCauseCodeGroup       string
	MaintNotifCauseCodeGroupName   string
	MaintNotificationCauseCode     string
	MaintNotificationCauseCodeName string
	MaintNotificationRootCause     string
	MaintNotificationRootCauseText string
	IsDeleted                      string
}{
	MaintenanceNotification:        "MaintenanceNotification",
	MaintenanceNotificationItem:    "MaintenanceNotificationItem",
	MaintenanceNotificationCause:   "MaintenanceNotificationCause",
	MaintNotifCauseText:            "MaintNotifCauseText",
	MaintNotifCauseCodeGroup:       "MaintNotifCauseCodeGroup",
	MaintNotifCauseCodeGroupName:   "MaintNotifCauseCodeGroupName",
	MaintNotificationCauseCode:     "MaintNotificationCauseCode",
	MaintNotificationCauseCodeName: "MaintNotificationCauseCodeName",
	MaintNotificationRootCause:     "MaintNotificationRootCause",
	MaintNotificationRootCauseText: "MaintNotificationRootCauseText",
	IsDeleted:                      "IsDeleted",
}

var SapMaintenanceNotificationItemCauseDatumTableColumns = struct {
	MaintenanceNotification        string
	MaintenanceNotificationItem    string
	MaintenanceNotificationCause   string
	MaintNotifCauseText            string
	MaintNotifCauseCodeGroup       string
	MaintNotifCauseCodeGroupName   string
	MaintNotificationCauseCode     string
	MaintNotificationCauseCodeName string
	MaintNotificationRootCause     string
	MaintNotificationRootCauseText string
	IsDeleted                      string
}{
	MaintenanceNotification:        "sap_maintenance_notification_item_cause_data.MaintenanceNotification",
	MaintenanceNotificationItem:    "sap_maintenance_notification_item_cause_data.MaintenanceNotificationItem",
	MaintenanceNotificationCause:   "sap_maintenance_notification_item_cause_data.MaintenanceNotificationCause",
	MaintNotifCauseText:            "sap_maintenance_notification_item_cause_data.MaintNotifCauseText",
	MaintNotifCauseCodeGroup:       "sap_maintenance_notification_item_cause_data.MaintNotifCauseCodeGroup",
	MaintNotifCauseCodeGroupName:   "sap_maintenance_notification_item_cause_data.MaintNotifCauseCodeGroupName",
	MaintNotificationCauseCode:     "sap_maintenance_notification_item_cause_data.MaintNotificationCauseCode",
	MaintNotificationCauseCodeName: "sap_maintenance_notification_item_cause_data.MaintNotificationCauseCodeName",
	MaintNotificationRootCause:     "sap_maintenance_notification_item_cause_data.MaintNotificationRootCause",
	MaintNotificationRootCauseText: "sap_maintenance_notification_item_cause_data.MaintNotificationRootCauseText",
	IsDeleted:                      "sap_maintenance_notification_item_cause_data.IsDeleted",
}

// Generated where

var SapMaintenanceNotificationItemCauseDatumWhere = struct {
	MaintenanceNotification        whereHelperstring
	MaintenanceNotificationItem    whereHelperstring
	MaintenanceNotificationCause   whereHelperstring
	MaintNotifCauseText            whereHelpernull_String
	MaintNotifCauseCodeGroup       whereHelpernull_String
	MaintNotifCauseCodeGroupName   whereHelpernull_String
	MaintNotificationCauseCode     whereHelpernull_String
	MaintNotificationCauseCodeName whereHelpernull_String
	MaintNotificationRootCause     whereHelpernull_String
	MaintNotificationRootCauseText whereHelpernull_String
	IsDeleted                      whereHelpernull_Bool
}{
	MaintenanceNotification:        whereHelperstring{field: "`sap_maintenance_notification_item_cause_data`.`MaintenanceNotification`"},
	MaintenanceNotificationItem:    whereHelperstring{field: "`sap_maintenance_notification_item_cause_data`.`MaintenanceNotificationItem`"},
	MaintenanceNotificationCause:   whereHelperstring{field: "`sap_maintenance_notification_item_cause_data`.`MaintenanceNotificationCause`"},
	MaintNotifCauseText:            whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotifCauseText`"},
	MaintNotifCauseCodeGroup:       whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotifCauseCodeGroup`"},
	MaintNotifCauseCodeGroupName:   whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotifCauseCodeGroupName`"},
	MaintNotificationCauseCode:     whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotificationCauseCode`"},
	MaintNotificationCauseCodeName: whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotificationCauseCodeName`"},
	MaintNotificationRootCause:     whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotificationRootCause`"},
	MaintNotificationRootCauseText: whereHelpernull_String{field: "`sap_maintenance_notification_item_cause_data`.`MaintNotificationRootCauseText`"},
	IsDeleted:                      whereHelpernull_Bool{field: "`sap_maintenance_notification_item_cause_data`.`IsDeleted`"},
}

// SapMaintenanceNotificationItemCauseDatumRels is where relationship names are stored.
var SapMaintenanceNotificationItemCauseDatumRels = struct {
	MaintenanceNotificationSapMaintenanceNotificationHeaderDatum string
}{
	MaintenanceNotificationSapMaintenanceNotificationHeaderDatum: "MaintenanceNotificationSapMaintenanceNotificationHeaderDatum",
}

// sapMaintenanceNotificationItemCauseDatumR is where relationships are stored.
type sapMaintenanceNotificationItemCauseDatumR struct {
	MaintenanceNotificationSapMaintenanceNotificationHeaderDatum *SapMaintenanceNotificationHeaderDatum `boil:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum" json:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum" toml:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum" yaml:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceNotificationItemCauseDatumR) NewStruct() *sapMaintenanceNotificationItemCauseDatumR {
	return &sapMaintenanceNotificationItemCauseDatumR{}
}

// sapMaintenanceNotificationItemCauseDatumL is where Load methods for each relationship are stored.
type sapMaintenanceNotificationItemCauseDatumL struct{}

var (
	sapMaintenanceNotificationItemCauseDatumAllColumns            = []string{"MaintenanceNotification", "MaintenanceNotificationItem", "MaintenanceNotificationCause", "MaintNotifCauseText", "MaintNotifCauseCodeGroup", "MaintNotifCauseCodeGroupName", "MaintNotificationCauseCode", "MaintNotificationCauseCodeName", "MaintNotificationRootCause", "MaintNotificationRootCauseText", "IsDeleted"}
	sapMaintenanceNotificationItemCauseDatumColumnsWithoutDefault = []string{"MaintenanceNotification", "MaintenanceNotificationItem", "MaintenanceNotificationCause", "MaintNotifCauseText", "MaintNotifCauseCodeGroup", "MaintNotifCauseCodeGroupName", "MaintNotificationCauseCode", "MaintNotificationCauseCodeName", "MaintNotificationRootCause", "MaintNotificationRootCauseText", "IsDeleted"}
	sapMaintenanceNotificationItemCauseDatumColumnsWithDefault    = []string{}
	sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns     = []string{"MaintenanceNotification", "MaintenanceNotificationItem", "MaintenanceNotificationCause"}
	sapMaintenanceNotificationItemCauseDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceNotificationItemCauseDatumSlice is an alias for a slice of pointers to SapMaintenanceNotificationItemCauseDatum.
	// This should almost always be used instead of []SapMaintenanceNotificationItemCauseDatum.
	SapMaintenanceNotificationItemCauseDatumSlice []*SapMaintenanceNotificationItemCauseDatum
	// SapMaintenanceNotificationItemCauseDatumHook is the signature for custom SapMaintenanceNotificationItemCauseDatum hook methods
	SapMaintenanceNotificationItemCauseDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceNotificationItemCauseDatum) error

	sapMaintenanceNotificationItemCauseDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceNotificationItemCauseDatumType                 = reflect.TypeOf(&SapMaintenanceNotificationItemCauseDatum{})
	sapMaintenanceNotificationItemCauseDatumMapping              = queries.MakeStructMapping(sapMaintenanceNotificationItemCauseDatumType)
	sapMaintenanceNotificationItemCauseDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns)
	sapMaintenanceNotificationItemCauseDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceNotificationItemCauseDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceNotificationItemCauseDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceNotificationItemCauseDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceNotificationItemCauseDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceNotificationItemCauseDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceNotificationItemCauseDatumAfterSelectHooks []SapMaintenanceNotificationItemCauseDatumHook

var sapMaintenanceNotificationItemCauseDatumBeforeInsertHooks []SapMaintenanceNotificationItemCauseDatumHook
var sapMaintenanceNotificationItemCauseDatumAfterInsertHooks []SapMaintenanceNotificationItemCauseDatumHook

var sapMaintenanceNotificationItemCauseDatumBeforeUpdateHooks []SapMaintenanceNotificationItemCauseDatumHook
var sapMaintenanceNotificationItemCauseDatumAfterUpdateHooks []SapMaintenanceNotificationItemCauseDatumHook

var sapMaintenanceNotificationItemCauseDatumBeforeDeleteHooks []SapMaintenanceNotificationItemCauseDatumHook
var sapMaintenanceNotificationItemCauseDatumAfterDeleteHooks []SapMaintenanceNotificationItemCauseDatumHook

var sapMaintenanceNotificationItemCauseDatumBeforeUpsertHooks []SapMaintenanceNotificationItemCauseDatumHook
var sapMaintenanceNotificationItemCauseDatumAfterUpsertHooks []SapMaintenanceNotificationItemCauseDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceNotificationItemCauseDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemCauseDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceNotificationItemCauseDatumHook registers your hook function for all future operations.
func AddSapMaintenanceNotificationItemCauseDatumHook(hookPoint boil.HookPoint, sapMaintenanceNotificationItemCauseDatumHook SapMaintenanceNotificationItemCauseDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceNotificationItemCauseDatumAfterSelectHooks = append(sapMaintenanceNotificationItemCauseDatumAfterSelectHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceNotificationItemCauseDatumBeforeInsertHooks = append(sapMaintenanceNotificationItemCauseDatumBeforeInsertHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceNotificationItemCauseDatumAfterInsertHooks = append(sapMaintenanceNotificationItemCauseDatumAfterInsertHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceNotificationItemCauseDatumBeforeUpdateHooks = append(sapMaintenanceNotificationItemCauseDatumBeforeUpdateHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceNotificationItemCauseDatumAfterUpdateHooks = append(sapMaintenanceNotificationItemCauseDatumAfterUpdateHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceNotificationItemCauseDatumBeforeDeleteHooks = append(sapMaintenanceNotificationItemCauseDatumBeforeDeleteHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceNotificationItemCauseDatumAfterDeleteHooks = append(sapMaintenanceNotificationItemCauseDatumAfterDeleteHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceNotificationItemCauseDatumBeforeUpsertHooks = append(sapMaintenanceNotificationItemCauseDatumBeforeUpsertHooks, sapMaintenanceNotificationItemCauseDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceNotificationItemCauseDatumAfterUpsertHooks = append(sapMaintenanceNotificationItemCauseDatumAfterUpsertHooks, sapMaintenanceNotificationItemCauseDatumHook)
	}
}

// One returns a single sapMaintenanceNotificationItemCauseDatum record from the query.
func (q sapMaintenanceNotificationItemCauseDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceNotificationItemCauseDatum, error) {
	o := &SapMaintenanceNotificationItemCauseDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_notification_item_cause_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceNotificationItemCauseDatum records from the query.
func (q sapMaintenanceNotificationItemCauseDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceNotificationItemCauseDatumSlice, error) {
	var o []*SapMaintenanceNotificationItemCauseDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceNotificationItemCauseDatum slice")
	}

	if len(sapMaintenanceNotificationItemCauseDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceNotificationItemCauseDatum records in the query.
func (q sapMaintenanceNotificationItemCauseDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_notification_item_cause_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceNotificationItemCauseDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_notification_item_cause_data exists")
	}

	return count > 0, nil
}

// MaintenanceNotificationSapMaintenanceNotificationHeaderDatum pointed to by the foreign key.
func (o *SapMaintenanceNotificationItemCauseDatum) MaintenanceNotificationSapMaintenanceNotificationHeaderDatum(mods ...qm.QueryMod) sapMaintenanceNotificationHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenanceNotification` = ?", o.MaintenanceNotification),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenanceNotificationHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_notification_header_data`")

	return query
}

// LoadMaintenanceNotificationSapMaintenanceNotificationHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenanceNotificationItemCauseDatumL) LoadMaintenanceNotificationSapMaintenanceNotificationHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceNotificationItemCauseDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceNotificationItemCauseDatum
	var object *SapMaintenanceNotificationItemCauseDatum

	if singular {
		object = maybeSapMaintenanceNotificationItemCauseDatum.(*SapMaintenanceNotificationItemCauseDatum)
	} else {
		slice = *maybeSapMaintenanceNotificationItemCauseDatum.(*[]*SapMaintenanceNotificationItemCauseDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceNotificationItemCauseDatumR{}
		}
		args = append(args, object.MaintenanceNotification)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceNotificationItemCauseDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceNotification {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceNotification)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_notification_header_data`),
		qm.WhereIn(`sap_maintenance_notification_header_data.MaintenanceNotification in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenanceNotificationHeaderDatum")
	}

	var resultSlice []*SapMaintenanceNotificationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenanceNotificationHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_notification_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_notification_header_data")
	}

	if len(sapMaintenanceNotificationItemCauseDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenanceNotificationHeaderDatumR{}
		}
		foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData = append(foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenanceNotification == foreign.MaintenanceNotification {
				local.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenanceNotificationHeaderDatumR{}
				}
				foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData = append(foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenanceNotificationSapMaintenanceNotificationHeaderDatum of the sapMaintenanceNotificationItemCauseDatum to the related item.
// Sets o.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum to related.
// Adds o to related.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData.
func (o *SapMaintenanceNotificationItemCauseDatum) SetMaintenanceNotificationSapMaintenanceNotificationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenanceNotificationHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_notification_item_cause_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceNotification"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenanceNotification, o.MaintenanceNotification, o.MaintenanceNotificationItem, o.MaintenanceNotificationCause}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenanceNotification = related.MaintenanceNotification
	if o.R == nil {
		o.R = &sapMaintenanceNotificationItemCauseDatumR{
			MaintenanceNotificationSapMaintenanceNotificationHeaderDatum: related,
		}
	} else {
		o.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenanceNotificationHeaderDatumR{
			MaintenanceNotificationSapMaintenanceNotificationItemCauseData: SapMaintenanceNotificationItemCauseDatumSlice{o},
		}
	} else {
		related.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData = append(related.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData, o)
	}

	return nil
}

// SapMaintenanceNotificationItemCauseData retrieves all the records using an executor.
func SapMaintenanceNotificationItemCauseData(mods ...qm.QueryMod) sapMaintenanceNotificationItemCauseDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_notification_item_cause_data`"))
	return sapMaintenanceNotificationItemCauseDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceNotificationItemCauseDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceNotificationItemCauseDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceNotification string, maintenanceNotificationItem string, maintenanceNotificationCause string, selectCols ...string) (*SapMaintenanceNotificationItemCauseDatum, error) {
	sapMaintenanceNotificationItemCauseDatumObj := &SapMaintenanceNotificationItemCauseDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_notification_item_cause_data` where `MaintenanceNotification`=? AND `MaintenanceNotificationItem`=? AND `MaintenanceNotificationCause`=?", sel,
	)

	q := queries.Raw(query, maintenanceNotification, maintenanceNotificationItem, maintenanceNotificationCause)

	err := q.Bind(ctx, exec, sapMaintenanceNotificationItemCauseDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_notification_item_cause_data")
	}

	if err = sapMaintenanceNotificationItemCauseDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceNotificationItemCauseDatumObj, err
	}

	return sapMaintenanceNotificationItemCauseDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceNotificationItemCauseDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_notification_item_cause_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceNotificationItemCauseDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceNotificationItemCauseDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationItemCauseDatumInsertCache[key]
	sapMaintenanceNotificationItemCauseDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceNotificationItemCauseDatumAllColumns,
			sapMaintenanceNotificationItemCauseDatumColumnsWithDefault,
			sapMaintenanceNotificationItemCauseDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_notification_item_cause_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_notification_item_cause_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_notification_item_cause_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_notification_item_cause_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceNotification,
		o.MaintenanceNotificationItem,
		o.MaintenanceNotificationCause,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_notification_item_cause_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceNotificationItemCauseDatumInsertCacheMut.Lock()
		sapMaintenanceNotificationItemCauseDatumInsertCache[key] = cache
		sapMaintenanceNotificationItemCauseDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceNotificationItemCauseDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceNotificationItemCauseDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceNotificationItemCauseDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationItemCauseDatumUpdateCache[key]
	sapMaintenanceNotificationItemCauseDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceNotificationItemCauseDatumAllColumns,
			sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_notification_item_cause_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_notification_item_cause_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, append(wl, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_notification_item_cause_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_notification_item_cause_data")
	}

	if !cached {
		sapMaintenanceNotificationItemCauseDatumUpdateCacheMut.Lock()
		sapMaintenanceNotificationItemCauseDatumUpdateCache[key] = cache
		sapMaintenanceNotificationItemCauseDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceNotificationItemCauseDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_notification_item_cause_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_notification_item_cause_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceNotificationItemCauseDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationItemCauseDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_notification_item_cause_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceNotificationItemCauseDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceNotificationItemCauseDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceNotificationItemCauseDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceNotificationItemCauseDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_notification_item_cause_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceNotificationItemCauseDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceNotificationItemCauseDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceNotificationItemCauseDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationItemCauseDatumUpsertCache[key]
	sapMaintenanceNotificationItemCauseDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceNotificationItemCauseDatumAllColumns,
			sapMaintenanceNotificationItemCauseDatumColumnsWithDefault,
			sapMaintenanceNotificationItemCauseDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceNotificationItemCauseDatumAllColumns,
			sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_notification_item_cause_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_notification_item_cause_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_notification_item_cause_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_notification_item_cause_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceNotificationItemCauseDatumType, sapMaintenanceNotificationItemCauseDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_notification_item_cause_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_notification_item_cause_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceNotificationItemCauseDatumUpsertCacheMut.Lock()
		sapMaintenanceNotificationItemCauseDatumUpsertCache[key] = cache
		sapMaintenanceNotificationItemCauseDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceNotificationItemCauseDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceNotificationItemCauseDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceNotificationItemCauseDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceNotificationItemCauseDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_notification_item_cause_data` WHERE `MaintenanceNotification`=? AND `MaintenanceNotificationItem`=? AND `MaintenanceNotificationCause`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_notification_item_cause_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_notification_item_cause_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceNotificationItemCauseDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceNotificationItemCauseDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_notification_item_cause_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_notification_item_cause_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceNotificationItemCauseDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceNotificationItemCauseDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationItemCauseDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_notification_item_cause_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceNotificationItemCauseDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_notification_item_cause_data")
	}

	if len(sapMaintenanceNotificationItemCauseDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceNotificationItemCauseDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceNotificationItemCauseDatum(ctx, exec, o.MaintenanceNotification, o.MaintenanceNotificationItem, o.MaintenanceNotificationCause)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceNotificationItemCauseDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceNotificationItemCauseDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationItemCauseDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_notification_item_cause_data`.* FROM `sap_maintenance_notification_item_cause_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceNotificationItemCauseDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceNotificationItemCauseDatumExists checks if the SapMaintenanceNotificationItemCauseDatum row exists.
func SapMaintenanceNotificationItemCauseDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceNotification string, maintenanceNotificationItem string, maintenanceNotificationCause string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_notification_item_cause_data` where `MaintenanceNotification`=? AND `MaintenanceNotificationItem`=? AND `MaintenanceNotificationCause`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceNotification, maintenanceNotificationItem, maintenanceNotificationCause)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceNotification, maintenanceNotificationItem, maintenanceNotificationCause)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_notification_item_cause_data exists")
	}

	return exists, nil
}
