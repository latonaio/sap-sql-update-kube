// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCharacteristicCharcDescriptionDatum is an object representing the database table.
type SapCharacteristicCharcDescriptionDatum struct {
	CharcInternalID          string      `boil:"CharcInternalID" json:"CharcInternalID" toml:"CharcInternalID" yaml:"CharcInternalID"`
	Language                 string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	DeleteMC                 null.Bool   `boil:"Delete_mc" json:"Delete_mc,omitempty" toml:"Delete_mc" yaml:"Delete_mc,omitempty"`
	UpdateMC                 null.Bool   `boil:"Update_mc" json:"Update_mc,omitempty" toml:"Update_mc" yaml:"Update_mc,omitempty"`
	CharcDescription         null.String `boil:"CharcDescription" json:"CharcDescription,omitempty" toml:"CharcDescription" yaml:"CharcDescription,omitempty"`
	ChangeNumber             null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ValidityStartDate        null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate          null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	KeyDate                  null.String `boil:"KeyDate" json:"KeyDate,omitempty" toml:"KeyDate" yaml:"KeyDate,omitempty"`
	CharcLastChangedDateTime null.String `boil:"CharcLastChangedDateTime" json:"CharcLastChangedDateTime,omitempty" toml:"CharcLastChangedDateTime" yaml:"CharcLastChangedDateTime,omitempty"`

	R *sapCharacteristicCharcDescriptionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCharacteristicCharcDescriptionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCharacteristicCharcDescriptionDatumColumns = struct {
	CharcInternalID          string
	Language                 string
	DeleteMC                 string
	UpdateMC                 string
	CharcDescription         string
	ChangeNumber             string
	ValidityStartDate        string
	ValidityEndDate          string
	KeyDate                  string
	CharcLastChangedDateTime string
}{
	CharcInternalID:          "CharcInternalID",
	Language:                 "Language",
	DeleteMC:                 "Delete_mc",
	UpdateMC:                 "Update_mc",
	CharcDescription:         "CharcDescription",
	ChangeNumber:             "ChangeNumber",
	ValidityStartDate:        "ValidityStartDate",
	ValidityEndDate:          "ValidityEndDate",
	KeyDate:                  "KeyDate",
	CharcLastChangedDateTime: "CharcLastChangedDateTime",
}

var SapCharacteristicCharcDescriptionDatumTableColumns = struct {
	CharcInternalID          string
	Language                 string
	DeleteMC                 string
	UpdateMC                 string
	CharcDescription         string
	ChangeNumber             string
	ValidityStartDate        string
	ValidityEndDate          string
	KeyDate                  string
	CharcLastChangedDateTime string
}{
	CharcInternalID:          "sap_characteristic_charc_description_data.CharcInternalID",
	Language:                 "sap_characteristic_charc_description_data.Language",
	DeleteMC:                 "sap_characteristic_charc_description_data.Delete_mc",
	UpdateMC:                 "sap_characteristic_charc_description_data.Update_mc",
	CharcDescription:         "sap_characteristic_charc_description_data.CharcDescription",
	ChangeNumber:             "sap_characteristic_charc_description_data.ChangeNumber",
	ValidityStartDate:        "sap_characteristic_charc_description_data.ValidityStartDate",
	ValidityEndDate:          "sap_characteristic_charc_description_data.ValidityEndDate",
	KeyDate:                  "sap_characteristic_charc_description_data.KeyDate",
	CharcLastChangedDateTime: "sap_characteristic_charc_description_data.CharcLastChangedDateTime",
}

// Generated where

var SapCharacteristicCharcDescriptionDatumWhere = struct {
	CharcInternalID          whereHelperstring
	Language                 whereHelperstring
	DeleteMC                 whereHelpernull_Bool
	UpdateMC                 whereHelpernull_Bool
	CharcDescription         whereHelpernull_String
	ChangeNumber             whereHelpernull_String
	ValidityStartDate        whereHelpernull_String
	ValidityEndDate          whereHelpernull_String
	KeyDate                  whereHelpernull_String
	CharcLastChangedDateTime whereHelpernull_String
}{
	CharcInternalID:          whereHelperstring{field: "`sap_characteristic_charc_description_data`.`CharcInternalID`"},
	Language:                 whereHelperstring{field: "`sap_characteristic_charc_description_data`.`Language`"},
	DeleteMC:                 whereHelpernull_Bool{field: "`sap_characteristic_charc_description_data`.`Delete_mc`"},
	UpdateMC:                 whereHelpernull_Bool{field: "`sap_characteristic_charc_description_data`.`Update_mc`"},
	CharcDescription:         whereHelpernull_String{field: "`sap_characteristic_charc_description_data`.`CharcDescription`"},
	ChangeNumber:             whereHelpernull_String{field: "`sap_characteristic_charc_description_data`.`ChangeNumber`"},
	ValidityStartDate:        whereHelpernull_String{field: "`sap_characteristic_charc_description_data`.`ValidityStartDate`"},
	ValidityEndDate:          whereHelpernull_String{field: "`sap_characteristic_charc_description_data`.`ValidityEndDate`"},
	KeyDate:                  whereHelpernull_String{field: "`sap_characteristic_charc_description_data`.`KeyDate`"},
	CharcLastChangedDateTime: whereHelpernull_String{field: "`sap_characteristic_charc_description_data`.`CharcLastChangedDateTime`"},
}

// SapCharacteristicCharcDescriptionDatumRels is where relationship names are stored.
var SapCharacteristicCharcDescriptionDatumRels = struct {
	CharcInternalIDSapCharacteristicCharacteristicDatum string
}{
	CharcInternalIDSapCharacteristicCharacteristicDatum: "CharcInternalIDSapCharacteristicCharacteristicDatum",
}

// sapCharacteristicCharcDescriptionDatumR is where relationships are stored.
type sapCharacteristicCharcDescriptionDatumR struct {
	CharcInternalIDSapCharacteristicCharacteristicDatum *SapCharacteristicCharacteristicDatum `boil:"CharcInternalIDSapCharacteristicCharacteristicDatum" json:"CharcInternalIDSapCharacteristicCharacteristicDatum" toml:"CharcInternalIDSapCharacteristicCharacteristicDatum" yaml:"CharcInternalIDSapCharacteristicCharacteristicDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCharacteristicCharcDescriptionDatumR) NewStruct() *sapCharacteristicCharcDescriptionDatumR {
	return &sapCharacteristicCharcDescriptionDatumR{}
}

// sapCharacteristicCharcDescriptionDatumL is where Load methods for each relationship are stored.
type sapCharacteristicCharcDescriptionDatumL struct{}

var (
	sapCharacteristicCharcDescriptionDatumAllColumns            = []string{"CharcInternalID", "Language", "Delete_mc", "Update_mc", "CharcDescription", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "KeyDate", "CharcLastChangedDateTime"}
	sapCharacteristicCharcDescriptionDatumColumnsWithoutDefault = []string{"CharcInternalID", "Language", "Delete_mc", "Update_mc", "CharcDescription", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "KeyDate", "CharcLastChangedDateTime"}
	sapCharacteristicCharcDescriptionDatumColumnsWithDefault    = []string{}
	sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns     = []string{"CharcInternalID", "Language"}
	sapCharacteristicCharcDescriptionDatumGeneratedColumns      = []string{}
)

type (
	// SapCharacteristicCharcDescriptionDatumSlice is an alias for a slice of pointers to SapCharacteristicCharcDescriptionDatum.
	// This should almost always be used instead of []SapCharacteristicCharcDescriptionDatum.
	SapCharacteristicCharcDescriptionDatumSlice []*SapCharacteristicCharcDescriptionDatum
	// SapCharacteristicCharcDescriptionDatumHook is the signature for custom SapCharacteristicCharcDescriptionDatum hook methods
	SapCharacteristicCharcDescriptionDatumHook func(context.Context, boil.ContextExecutor, *SapCharacteristicCharcDescriptionDatum) error

	sapCharacteristicCharcDescriptionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCharacteristicCharcDescriptionDatumType                 = reflect.TypeOf(&SapCharacteristicCharcDescriptionDatum{})
	sapCharacteristicCharcDescriptionDatumMapping              = queries.MakeStructMapping(sapCharacteristicCharcDescriptionDatumType)
	sapCharacteristicCharcDescriptionDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns)
	sapCharacteristicCharcDescriptionDatumInsertCacheMut       sync.RWMutex
	sapCharacteristicCharcDescriptionDatumInsertCache          = make(map[string]insertCache)
	sapCharacteristicCharcDescriptionDatumUpdateCacheMut       sync.RWMutex
	sapCharacteristicCharcDescriptionDatumUpdateCache          = make(map[string]updateCache)
	sapCharacteristicCharcDescriptionDatumUpsertCacheMut       sync.RWMutex
	sapCharacteristicCharcDescriptionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCharacteristicCharcDescriptionDatumAfterSelectHooks []SapCharacteristicCharcDescriptionDatumHook

var sapCharacteristicCharcDescriptionDatumBeforeInsertHooks []SapCharacteristicCharcDescriptionDatumHook
var sapCharacteristicCharcDescriptionDatumAfterInsertHooks []SapCharacteristicCharcDescriptionDatumHook

var sapCharacteristicCharcDescriptionDatumBeforeUpdateHooks []SapCharacteristicCharcDescriptionDatumHook
var sapCharacteristicCharcDescriptionDatumAfterUpdateHooks []SapCharacteristicCharcDescriptionDatumHook

var sapCharacteristicCharcDescriptionDatumBeforeDeleteHooks []SapCharacteristicCharcDescriptionDatumHook
var sapCharacteristicCharcDescriptionDatumAfterDeleteHooks []SapCharacteristicCharcDescriptionDatumHook

var sapCharacteristicCharcDescriptionDatumBeforeUpsertHooks []SapCharacteristicCharcDescriptionDatumHook
var sapCharacteristicCharcDescriptionDatumAfterUpsertHooks []SapCharacteristicCharcDescriptionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCharacteristicCharcDescriptionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicCharcDescriptionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCharacteristicCharcDescriptionDatumHook registers your hook function for all future operations.
func AddSapCharacteristicCharcDescriptionDatumHook(hookPoint boil.HookPoint, sapCharacteristicCharcDescriptionDatumHook SapCharacteristicCharcDescriptionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCharacteristicCharcDescriptionDatumAfterSelectHooks = append(sapCharacteristicCharcDescriptionDatumAfterSelectHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.BeforeInsertHook:
		sapCharacteristicCharcDescriptionDatumBeforeInsertHooks = append(sapCharacteristicCharcDescriptionDatumBeforeInsertHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.AfterInsertHook:
		sapCharacteristicCharcDescriptionDatumAfterInsertHooks = append(sapCharacteristicCharcDescriptionDatumAfterInsertHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.BeforeUpdateHook:
		sapCharacteristicCharcDescriptionDatumBeforeUpdateHooks = append(sapCharacteristicCharcDescriptionDatumBeforeUpdateHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.AfterUpdateHook:
		sapCharacteristicCharcDescriptionDatumAfterUpdateHooks = append(sapCharacteristicCharcDescriptionDatumAfterUpdateHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.BeforeDeleteHook:
		sapCharacteristicCharcDescriptionDatumBeforeDeleteHooks = append(sapCharacteristicCharcDescriptionDatumBeforeDeleteHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.AfterDeleteHook:
		sapCharacteristicCharcDescriptionDatumAfterDeleteHooks = append(sapCharacteristicCharcDescriptionDatumAfterDeleteHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.BeforeUpsertHook:
		sapCharacteristicCharcDescriptionDatumBeforeUpsertHooks = append(sapCharacteristicCharcDescriptionDatumBeforeUpsertHooks, sapCharacteristicCharcDescriptionDatumHook)
	case boil.AfterUpsertHook:
		sapCharacteristicCharcDescriptionDatumAfterUpsertHooks = append(sapCharacteristicCharcDescriptionDatumAfterUpsertHooks, sapCharacteristicCharcDescriptionDatumHook)
	}
}

// One returns a single sapCharacteristicCharcDescriptionDatum record from the query.
func (q sapCharacteristicCharcDescriptionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCharacteristicCharcDescriptionDatum, error) {
	o := &SapCharacteristicCharcDescriptionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_characteristic_charc_description_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCharacteristicCharcDescriptionDatum records from the query.
func (q sapCharacteristicCharcDescriptionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCharacteristicCharcDescriptionDatumSlice, error) {
	var o []*SapCharacteristicCharcDescriptionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCharacteristicCharcDescriptionDatum slice")
	}

	if len(sapCharacteristicCharcDescriptionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCharacteristicCharcDescriptionDatum records in the query.
func (q sapCharacteristicCharcDescriptionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_characteristic_charc_description_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCharacteristicCharcDescriptionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_characteristic_charc_description_data exists")
	}

	return count > 0, nil
}

// CharcInternalIDSapCharacteristicCharacteristicDatum pointed to by the foreign key.
func (o *SapCharacteristicCharcDescriptionDatum) CharcInternalIDSapCharacteristicCharacteristicDatum(mods ...qm.QueryMod) sapCharacteristicCharacteristicDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CharcInternalID` = ?", o.CharcInternalID),
	}

	queryMods = append(queryMods, mods...)

	query := SapCharacteristicCharacteristicData(queryMods...)
	queries.SetFrom(query.Query, "`sap_characteristic_characteristic_data`")

	return query
}

// LoadCharcInternalIDSapCharacteristicCharacteristicDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCharacteristicCharcDescriptionDatumL) LoadCharcInternalIDSapCharacteristicCharacteristicDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCharacteristicCharcDescriptionDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCharacteristicCharcDescriptionDatum
	var object *SapCharacteristicCharcDescriptionDatum

	if singular {
		object = maybeSapCharacteristicCharcDescriptionDatum.(*SapCharacteristicCharcDescriptionDatum)
	} else {
		slice = *maybeSapCharacteristicCharcDescriptionDatum.(*[]*SapCharacteristicCharcDescriptionDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCharacteristicCharcDescriptionDatumR{}
		}
		args = append(args, object.CharcInternalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCharacteristicCharcDescriptionDatumR{}
			}

			for _, a := range args {
				if a == obj.CharcInternalID {
					continue Outer
				}
			}

			args = append(args, obj.CharcInternalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_characteristic_characteristic_data`),
		qm.WhereIn(`sap_characteristic_characteristic_data.CharcInternalID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCharacteristicCharacteristicDatum")
	}

	var resultSlice []*SapCharacteristicCharacteristicDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCharacteristicCharacteristicDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_characteristic_characteristic_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_characteristic_characteristic_data")
	}

	if len(sapCharacteristicCharcDescriptionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharcInternalIDSapCharacteristicCharacteristicDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCharacteristicCharacteristicDatumR{}
		}
		foreign.R.CharcInternalIDSapCharacteristicCharcDescriptionData = append(foreign.R.CharcInternalIDSapCharacteristicCharcDescriptionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharcInternalID == foreign.CharcInternalID {
				local.R.CharcInternalIDSapCharacteristicCharacteristicDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCharacteristicCharacteristicDatumR{}
				}
				foreign.R.CharcInternalIDSapCharacteristicCharcDescriptionData = append(foreign.R.CharcInternalIDSapCharacteristicCharcDescriptionData, local)
				break
			}
		}
	}

	return nil
}

// SetCharcInternalIDSapCharacteristicCharacteristicDatum of the sapCharacteristicCharcDescriptionDatum to the related item.
// Sets o.R.CharcInternalIDSapCharacteristicCharacteristicDatum to related.
// Adds o to related.R.CharcInternalIDSapCharacteristicCharcDescriptionData.
func (o *SapCharacteristicCharcDescriptionDatum) SetCharcInternalIDSapCharacteristicCharacteristicDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCharacteristicCharacteristicDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_characteristic_charc_description_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CharcInternalID"}),
		strmangle.WhereClause("`", "`", 0, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CharcInternalID, o.CharcInternalID, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CharcInternalID = related.CharcInternalID
	if o.R == nil {
		o.R = &sapCharacteristicCharcDescriptionDatumR{
			CharcInternalIDSapCharacteristicCharacteristicDatum: related,
		}
	} else {
		o.R.CharcInternalIDSapCharacteristicCharacteristicDatum = related
	}

	if related.R == nil {
		related.R = &sapCharacteristicCharacteristicDatumR{
			CharcInternalIDSapCharacteristicCharcDescriptionData: SapCharacteristicCharcDescriptionDatumSlice{o},
		}
	} else {
		related.R.CharcInternalIDSapCharacteristicCharcDescriptionData = append(related.R.CharcInternalIDSapCharacteristicCharcDescriptionData, o)
	}

	return nil
}

// SapCharacteristicCharcDescriptionData retrieves all the records using an executor.
func SapCharacteristicCharcDescriptionData(mods ...qm.QueryMod) sapCharacteristicCharcDescriptionDatumQuery {
	mods = append(mods, qm.From("`sap_characteristic_charc_description_data`"))
	return sapCharacteristicCharcDescriptionDatumQuery{NewQuery(mods...)}
}

// FindSapCharacteristicCharcDescriptionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCharacteristicCharcDescriptionDatum(ctx context.Context, exec boil.ContextExecutor, charcInternalID string, language string, selectCols ...string) (*SapCharacteristicCharcDescriptionDatum, error) {
	sapCharacteristicCharcDescriptionDatumObj := &SapCharacteristicCharcDescriptionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_characteristic_charc_description_data` where `CharcInternalID`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, charcInternalID, language)

	err := q.Bind(ctx, exec, sapCharacteristicCharcDescriptionDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_characteristic_charc_description_data")
	}

	if err = sapCharacteristicCharcDescriptionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCharacteristicCharcDescriptionDatumObj, err
	}

	return sapCharacteristicCharcDescriptionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCharacteristicCharcDescriptionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_characteristic_charc_description_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCharacteristicCharcDescriptionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCharacteristicCharcDescriptionDatumInsertCacheMut.RLock()
	cache, cached := sapCharacteristicCharcDescriptionDatumInsertCache[key]
	sapCharacteristicCharcDescriptionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCharacteristicCharcDescriptionDatumAllColumns,
			sapCharacteristicCharcDescriptionDatumColumnsWithDefault,
			sapCharacteristicCharcDescriptionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_characteristic_charc_description_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_characteristic_charc_description_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_characteristic_charc_description_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_characteristic_charc_description_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CharcInternalID,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_characteristic_charc_description_data")
	}

CacheNoHooks:
	if !cached {
		sapCharacteristicCharcDescriptionDatumInsertCacheMut.Lock()
		sapCharacteristicCharcDescriptionDatumInsertCache[key] = cache
		sapCharacteristicCharcDescriptionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCharacteristicCharcDescriptionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCharacteristicCharcDescriptionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCharacteristicCharcDescriptionDatumUpdateCacheMut.RLock()
	cache, cached := sapCharacteristicCharcDescriptionDatumUpdateCache[key]
	sapCharacteristicCharcDescriptionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCharacteristicCharcDescriptionDatumAllColumns,
			sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_characteristic_charc_description_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_characteristic_charc_description_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, append(wl, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_characteristic_charc_description_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_characteristic_charc_description_data")
	}

	if !cached {
		sapCharacteristicCharcDescriptionDatumUpdateCacheMut.Lock()
		sapCharacteristicCharcDescriptionDatumUpdateCache[key] = cache
		sapCharacteristicCharcDescriptionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCharacteristicCharcDescriptionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_characteristic_charc_description_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_characteristic_charc_description_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCharacteristicCharcDescriptionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCharacteristicCharcDescriptionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_characteristic_charc_description_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCharacteristicCharcDescriptionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCharacteristicCharcDescriptionDatum")
	}
	return rowsAff, nil
}

var mySQLSapCharacteristicCharcDescriptionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCharacteristicCharcDescriptionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_characteristic_charc_description_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCharacteristicCharcDescriptionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCharacteristicCharcDescriptionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCharacteristicCharcDescriptionDatumUpsertCacheMut.RLock()
	cache, cached := sapCharacteristicCharcDescriptionDatumUpsertCache[key]
	sapCharacteristicCharcDescriptionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCharacteristicCharcDescriptionDatumAllColumns,
			sapCharacteristicCharcDescriptionDatumColumnsWithDefault,
			sapCharacteristicCharcDescriptionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCharacteristicCharcDescriptionDatumAllColumns,
			sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_characteristic_charc_description_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_characteristic_charc_description_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_characteristic_charc_description_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_characteristic_charc_description_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCharacteristicCharcDescriptionDatumType, sapCharacteristicCharcDescriptionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_characteristic_charc_description_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_characteristic_charc_description_data")
	}

CacheNoHooks:
	if !cached {
		sapCharacteristicCharcDescriptionDatumUpsertCacheMut.Lock()
		sapCharacteristicCharcDescriptionDatumUpsertCache[key] = cache
		sapCharacteristicCharcDescriptionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCharacteristicCharcDescriptionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCharacteristicCharcDescriptionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCharacteristicCharcDescriptionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCharacteristicCharcDescriptionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_characteristic_charc_description_data` WHERE `CharcInternalID`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_characteristic_charc_description_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_characteristic_charc_description_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCharacteristicCharcDescriptionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCharacteristicCharcDescriptionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_characteristic_charc_description_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_characteristic_charc_description_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCharacteristicCharcDescriptionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCharacteristicCharcDescriptionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCharacteristicCharcDescriptionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_characteristic_charc_description_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCharacteristicCharcDescriptionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_characteristic_charc_description_data")
	}

	if len(sapCharacteristicCharcDescriptionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCharacteristicCharcDescriptionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCharacteristicCharcDescriptionDatum(ctx, exec, o.CharcInternalID, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCharacteristicCharcDescriptionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCharacteristicCharcDescriptionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCharacteristicCharcDescriptionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_characteristic_charc_description_data`.* FROM `sap_characteristic_charc_description_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCharacteristicCharcDescriptionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCharacteristicCharcDescriptionDatumSlice")
	}

	*o = slice

	return nil
}

// SapCharacteristicCharcDescriptionDatumExists checks if the SapCharacteristicCharcDescriptionDatum row exists.
func SapCharacteristicCharcDescriptionDatumExists(ctx context.Context, exec boil.ContextExecutor, charcInternalID string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_characteristic_charc_description_data` where `CharcInternalID`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, charcInternalID, language)
	}
	row := exec.QueryRowContext(ctx, sql, charcInternalID, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_characteristic_charc_description_data exists")
	}

	return exists, nil
}
