// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseContractItemConditionDatum is an object representing the database table.
type SapPurchaseContractItemConditionDatum struct {
	PurchaseContract             string      `boil:"PurchaseContract" json:"PurchaseContract" toml:"PurchaseContract" yaml:"PurchaseContract"`
	PurchaseContractItem         string      `boil:"PurchaseContractItem" json:"PurchaseContractItem" toml:"PurchaseContractItem" yaml:"PurchaseContractItem"`
	ConditionValidityEndDate     string      `boil:"ConditionValidityEndDate" json:"ConditionValidityEndDate" toml:"ConditionValidityEndDate" yaml:"ConditionValidityEndDate"`
	ConditionType                null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	ConditionRecord              null.String `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber    null.String `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	ConditionValidityStartDate   null.String `boil:"ConditionValidityStartDate" json:"ConditionValidityStartDate,omitempty" toml:"ConditionValidityStartDate" yaml:"ConditionValidityStartDate,omitempty"`
	PricingScaleType             null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	PricingScaleBasis            null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleQuantity       null.String `boil:"ConditionScaleQuantity" json:"ConditionScaleQuantity,omitempty" toml:"ConditionScaleQuantity" yaml:"ConditionScaleQuantity,omitempty"`
	ConditionScaleQuantityUnit   null.String `boil:"ConditionScaleQuantityUnit" json:"ConditionScaleQuantityUnit,omitempty" toml:"ConditionScaleQuantityUnit" yaml:"ConditionScaleQuantityUnit,omitempty"`
	ConditionScaleAmount         null.String `boil:"ConditionScaleAmount" json:"ConditionScaleAmount,omitempty" toml:"ConditionScaleAmount" yaml:"ConditionScaleAmount,omitempty"`
	ConditionScaleAmountCurrency null.String `boil:"ConditionScaleAmountCurrency" json:"ConditionScaleAmountCurrency,omitempty" toml:"ConditionScaleAmountCurrency" yaml:"ConditionScaleAmountCurrency,omitempty"`
	ConditionCalculationType     null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionRateValue           null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionRateValueUnit       null.String `boil:"ConditionRateValueUnit" json:"ConditionRateValueUnit,omitempty" toml:"ConditionRateValueUnit" yaml:"ConditionRateValueUnit,omitempty"`
	ConditionQuantity            null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit        null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	BaseUnit                     null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ConditionIsDeleted           null.Bool   `boil:"ConditionIsDeleted" json:"ConditionIsDeleted,omitempty" toml:"ConditionIsDeleted" yaml:"ConditionIsDeleted,omitempty"`
	PaymentTerms                 null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	ConditionReleaseStatus       null.String `boil:"ConditionReleaseStatus" json:"ConditionReleaseStatus,omitempty" toml:"ConditionReleaseStatus" yaml:"ConditionReleaseStatus,omitempty"`

	R *sapPurchaseContractItemConditionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseContractItemConditionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseContractItemConditionDatumColumns = struct {
	PurchaseContract             string
	PurchaseContractItem         string
	ConditionValidityEndDate     string
	ConditionType                string
	ConditionRecord              string
	ConditionSequentialNumber    string
	ConditionValidityStartDate   string
	PricingScaleType             string
	PricingScaleBasis            string
	ConditionScaleQuantity       string
	ConditionScaleQuantityUnit   string
	ConditionScaleAmount         string
	ConditionScaleAmountCurrency string
	ConditionCalculationType     string
	ConditionRateValue           string
	ConditionRateValueUnit       string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	BaseUnit                     string
	ConditionIsDeleted           string
	PaymentTerms                 string
	ConditionReleaseStatus       string
}{
	PurchaseContract:             "PurchaseContract",
	PurchaseContractItem:         "PurchaseContractItem",
	ConditionValidityEndDate:     "ConditionValidityEndDate",
	ConditionType:                "ConditionType",
	ConditionRecord:              "ConditionRecord",
	ConditionSequentialNumber:    "ConditionSequentialNumber",
	ConditionValidityStartDate:   "ConditionValidityStartDate",
	PricingScaleType:             "PricingScaleType",
	PricingScaleBasis:            "PricingScaleBasis",
	ConditionScaleQuantity:       "ConditionScaleQuantity",
	ConditionScaleQuantityUnit:   "ConditionScaleQuantityUnit",
	ConditionScaleAmount:         "ConditionScaleAmount",
	ConditionScaleAmountCurrency: "ConditionScaleAmountCurrency",
	ConditionCalculationType:     "ConditionCalculationType",
	ConditionRateValue:           "ConditionRateValue",
	ConditionRateValueUnit:       "ConditionRateValueUnit",
	ConditionQuantity:            "ConditionQuantity",
	ConditionQuantityUnit:        "ConditionQuantityUnit",
	BaseUnit:                     "BaseUnit",
	ConditionIsDeleted:           "ConditionIsDeleted",
	PaymentTerms:                 "PaymentTerms",
	ConditionReleaseStatus:       "ConditionReleaseStatus",
}

var SapPurchaseContractItemConditionDatumTableColumns = struct {
	PurchaseContract             string
	PurchaseContractItem         string
	ConditionValidityEndDate     string
	ConditionType                string
	ConditionRecord              string
	ConditionSequentialNumber    string
	ConditionValidityStartDate   string
	PricingScaleType             string
	PricingScaleBasis            string
	ConditionScaleQuantity       string
	ConditionScaleQuantityUnit   string
	ConditionScaleAmount         string
	ConditionScaleAmountCurrency string
	ConditionCalculationType     string
	ConditionRateValue           string
	ConditionRateValueUnit       string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	BaseUnit                     string
	ConditionIsDeleted           string
	PaymentTerms                 string
	ConditionReleaseStatus       string
}{
	PurchaseContract:             "sap_purchase_contract_item_condition_data.PurchaseContract",
	PurchaseContractItem:         "sap_purchase_contract_item_condition_data.PurchaseContractItem",
	ConditionValidityEndDate:     "sap_purchase_contract_item_condition_data.ConditionValidityEndDate",
	ConditionType:                "sap_purchase_contract_item_condition_data.ConditionType",
	ConditionRecord:              "sap_purchase_contract_item_condition_data.ConditionRecord",
	ConditionSequentialNumber:    "sap_purchase_contract_item_condition_data.ConditionSequentialNumber",
	ConditionValidityStartDate:   "sap_purchase_contract_item_condition_data.ConditionValidityStartDate",
	PricingScaleType:             "sap_purchase_contract_item_condition_data.PricingScaleType",
	PricingScaleBasis:            "sap_purchase_contract_item_condition_data.PricingScaleBasis",
	ConditionScaleQuantity:       "sap_purchase_contract_item_condition_data.ConditionScaleQuantity",
	ConditionScaleQuantityUnit:   "sap_purchase_contract_item_condition_data.ConditionScaleQuantityUnit",
	ConditionScaleAmount:         "sap_purchase_contract_item_condition_data.ConditionScaleAmount",
	ConditionScaleAmountCurrency: "sap_purchase_contract_item_condition_data.ConditionScaleAmountCurrency",
	ConditionCalculationType:     "sap_purchase_contract_item_condition_data.ConditionCalculationType",
	ConditionRateValue:           "sap_purchase_contract_item_condition_data.ConditionRateValue",
	ConditionRateValueUnit:       "sap_purchase_contract_item_condition_data.ConditionRateValueUnit",
	ConditionQuantity:            "sap_purchase_contract_item_condition_data.ConditionQuantity",
	ConditionQuantityUnit:        "sap_purchase_contract_item_condition_data.ConditionQuantityUnit",
	BaseUnit:                     "sap_purchase_contract_item_condition_data.BaseUnit",
	ConditionIsDeleted:           "sap_purchase_contract_item_condition_data.ConditionIsDeleted",
	PaymentTerms:                 "sap_purchase_contract_item_condition_data.PaymentTerms",
	ConditionReleaseStatus:       "sap_purchase_contract_item_condition_data.ConditionReleaseStatus",
}

// Generated where

var SapPurchaseContractItemConditionDatumWhere = struct {
	PurchaseContract             whereHelperstring
	PurchaseContractItem         whereHelperstring
	ConditionValidityEndDate     whereHelperstring
	ConditionType                whereHelpernull_String
	ConditionRecord              whereHelpernull_String
	ConditionSequentialNumber    whereHelpernull_String
	ConditionValidityStartDate   whereHelpernull_String
	PricingScaleType             whereHelpernull_String
	PricingScaleBasis            whereHelpernull_String
	ConditionScaleQuantity       whereHelpernull_String
	ConditionScaleQuantityUnit   whereHelpernull_String
	ConditionScaleAmount         whereHelpernull_String
	ConditionScaleAmountCurrency whereHelpernull_String
	ConditionCalculationType     whereHelpernull_String
	ConditionRateValue           whereHelpernull_String
	ConditionRateValueUnit       whereHelpernull_String
	ConditionQuantity            whereHelpernull_String
	ConditionQuantityUnit        whereHelpernull_String
	BaseUnit                     whereHelpernull_String
	ConditionIsDeleted           whereHelpernull_Bool
	PaymentTerms                 whereHelpernull_String
	ConditionReleaseStatus       whereHelpernull_String
}{
	PurchaseContract:             whereHelperstring{field: "`sap_purchase_contract_item_condition_data`.`PurchaseContract`"},
	PurchaseContractItem:         whereHelperstring{field: "`sap_purchase_contract_item_condition_data`.`PurchaseContractItem`"},
	ConditionValidityEndDate:     whereHelperstring{field: "`sap_purchase_contract_item_condition_data`.`ConditionValidityEndDate`"},
	ConditionType:                whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionType`"},
	ConditionRecord:              whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionRecord`"},
	ConditionSequentialNumber:    whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionSequentialNumber`"},
	ConditionValidityStartDate:   whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionValidityStartDate`"},
	PricingScaleType:             whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`PricingScaleType`"},
	PricingScaleBasis:            whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`PricingScaleBasis`"},
	ConditionScaleQuantity:       whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionScaleQuantity`"},
	ConditionScaleQuantityUnit:   whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionScaleQuantityUnit`"},
	ConditionScaleAmount:         whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionScaleAmount`"},
	ConditionScaleAmountCurrency: whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionScaleAmountCurrency`"},
	ConditionCalculationType:     whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionCalculationType`"},
	ConditionRateValue:           whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionRateValue`"},
	ConditionRateValueUnit:       whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionRateValueUnit`"},
	ConditionQuantity:            whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:        whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionQuantityUnit`"},
	BaseUnit:                     whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`BaseUnit`"},
	ConditionIsDeleted:           whereHelpernull_Bool{field: "`sap_purchase_contract_item_condition_data`.`ConditionIsDeleted`"},
	PaymentTerms:                 whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`PaymentTerms`"},
	ConditionReleaseStatus:       whereHelpernull_String{field: "`sap_purchase_contract_item_condition_data`.`ConditionReleaseStatus`"},
}

// SapPurchaseContractItemConditionDatumRels is where relationship names are stored.
var SapPurchaseContractItemConditionDatumRels = struct {
	PurchaseContractSapPurchaseContractHeaderDatum string
}{
	PurchaseContractSapPurchaseContractHeaderDatum: "PurchaseContractSapPurchaseContractHeaderDatum",
}

// sapPurchaseContractItemConditionDatumR is where relationships are stored.
type sapPurchaseContractItemConditionDatumR struct {
	PurchaseContractSapPurchaseContractHeaderDatum *SapPurchaseContractHeaderDatum `boil:"PurchaseContractSapPurchaseContractHeaderDatum" json:"PurchaseContractSapPurchaseContractHeaderDatum" toml:"PurchaseContractSapPurchaseContractHeaderDatum" yaml:"PurchaseContractSapPurchaseContractHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseContractItemConditionDatumR) NewStruct() *sapPurchaseContractItemConditionDatumR {
	return &sapPurchaseContractItemConditionDatumR{}
}

// sapPurchaseContractItemConditionDatumL is where Load methods for each relationship are stored.
type sapPurchaseContractItemConditionDatumL struct{}

var (
	sapPurchaseContractItemConditionDatumAllColumns            = []string{"PurchaseContract", "PurchaseContractItem", "ConditionValidityEndDate", "ConditionType", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityStartDate", "PricingScaleType", "PricingScaleBasis", "ConditionScaleQuantity", "ConditionScaleQuantityUnit", "ConditionScaleAmount", "ConditionScaleAmountCurrency", "ConditionCalculationType", "ConditionRateValue", "ConditionRateValueUnit", "ConditionQuantity", "ConditionQuantityUnit", "BaseUnit", "ConditionIsDeleted", "PaymentTerms", "ConditionReleaseStatus"}
	sapPurchaseContractItemConditionDatumColumnsWithoutDefault = []string{"PurchaseContract", "PurchaseContractItem", "ConditionValidityEndDate", "ConditionType", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityStartDate", "PricingScaleType", "PricingScaleBasis", "ConditionScaleQuantity", "ConditionScaleQuantityUnit", "ConditionScaleAmount", "ConditionScaleAmountCurrency", "ConditionCalculationType", "ConditionRateValue", "ConditionRateValueUnit", "ConditionQuantity", "ConditionQuantityUnit", "BaseUnit", "ConditionIsDeleted", "PaymentTerms", "ConditionReleaseStatus"}
	sapPurchaseContractItemConditionDatumColumnsWithDefault    = []string{}
	sapPurchaseContractItemConditionDatumPrimaryKeyColumns     = []string{"PurchaseContract", "PurchaseContractItem", "ConditionValidityEndDate"}
	sapPurchaseContractItemConditionDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseContractItemConditionDatumSlice is an alias for a slice of pointers to SapPurchaseContractItemConditionDatum.
	// This should almost always be used instead of []SapPurchaseContractItemConditionDatum.
	SapPurchaseContractItemConditionDatumSlice []*SapPurchaseContractItemConditionDatum
	// SapPurchaseContractItemConditionDatumHook is the signature for custom SapPurchaseContractItemConditionDatum hook methods
	SapPurchaseContractItemConditionDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseContractItemConditionDatum) error

	sapPurchaseContractItemConditionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseContractItemConditionDatumType                 = reflect.TypeOf(&SapPurchaseContractItemConditionDatum{})
	sapPurchaseContractItemConditionDatumMapping              = queries.MakeStructMapping(sapPurchaseContractItemConditionDatumType)
	sapPurchaseContractItemConditionDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, sapPurchaseContractItemConditionDatumPrimaryKeyColumns)
	sapPurchaseContractItemConditionDatumInsertCacheMut       sync.RWMutex
	sapPurchaseContractItemConditionDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseContractItemConditionDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseContractItemConditionDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseContractItemConditionDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseContractItemConditionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseContractItemConditionDatumAfterSelectHooks []SapPurchaseContractItemConditionDatumHook

var sapPurchaseContractItemConditionDatumBeforeInsertHooks []SapPurchaseContractItemConditionDatumHook
var sapPurchaseContractItemConditionDatumAfterInsertHooks []SapPurchaseContractItemConditionDatumHook

var sapPurchaseContractItemConditionDatumBeforeUpdateHooks []SapPurchaseContractItemConditionDatumHook
var sapPurchaseContractItemConditionDatumAfterUpdateHooks []SapPurchaseContractItemConditionDatumHook

var sapPurchaseContractItemConditionDatumBeforeDeleteHooks []SapPurchaseContractItemConditionDatumHook
var sapPurchaseContractItemConditionDatumAfterDeleteHooks []SapPurchaseContractItemConditionDatumHook

var sapPurchaseContractItemConditionDatumBeforeUpsertHooks []SapPurchaseContractItemConditionDatumHook
var sapPurchaseContractItemConditionDatumAfterUpsertHooks []SapPurchaseContractItemConditionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseContractItemConditionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseContractItemConditionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseContractItemConditionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseContractItemConditionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseContractItemConditionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseContractItemConditionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseContractItemConditionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseContractItemConditionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseContractItemConditionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemConditionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseContractItemConditionDatumHook registers your hook function for all future operations.
func AddSapPurchaseContractItemConditionDatumHook(hookPoint boil.HookPoint, sapPurchaseContractItemConditionDatumHook SapPurchaseContractItemConditionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseContractItemConditionDatumAfterSelectHooks = append(sapPurchaseContractItemConditionDatumAfterSelectHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseContractItemConditionDatumBeforeInsertHooks = append(sapPurchaseContractItemConditionDatumBeforeInsertHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseContractItemConditionDatumAfterInsertHooks = append(sapPurchaseContractItemConditionDatumAfterInsertHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseContractItemConditionDatumBeforeUpdateHooks = append(sapPurchaseContractItemConditionDatumBeforeUpdateHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseContractItemConditionDatumAfterUpdateHooks = append(sapPurchaseContractItemConditionDatumAfterUpdateHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseContractItemConditionDatumBeforeDeleteHooks = append(sapPurchaseContractItemConditionDatumBeforeDeleteHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseContractItemConditionDatumAfterDeleteHooks = append(sapPurchaseContractItemConditionDatumAfterDeleteHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseContractItemConditionDatumBeforeUpsertHooks = append(sapPurchaseContractItemConditionDatumBeforeUpsertHooks, sapPurchaseContractItemConditionDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseContractItemConditionDatumAfterUpsertHooks = append(sapPurchaseContractItemConditionDatumAfterUpsertHooks, sapPurchaseContractItemConditionDatumHook)
	}
}

// One returns a single sapPurchaseContractItemConditionDatum record from the query.
func (q sapPurchaseContractItemConditionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseContractItemConditionDatum, error) {
	o := &SapPurchaseContractItemConditionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_contract_item_condition_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseContractItemConditionDatum records from the query.
func (q sapPurchaseContractItemConditionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseContractItemConditionDatumSlice, error) {
	var o []*SapPurchaseContractItemConditionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseContractItemConditionDatum slice")
	}

	if len(sapPurchaseContractItemConditionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseContractItemConditionDatum records in the query.
func (q sapPurchaseContractItemConditionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_contract_item_condition_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseContractItemConditionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_contract_item_condition_data exists")
	}

	return count > 0, nil
}

// PurchaseContractSapPurchaseContractHeaderDatum pointed to by the foreign key.
func (o *SapPurchaseContractItemConditionDatum) PurchaseContractSapPurchaseContractHeaderDatum(mods ...qm.QueryMod) sapPurchaseContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseContract` = ?", o.PurchaseContract),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseContractHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_contract_header_data`")

	return query
}

// LoadPurchaseContractSapPurchaseContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseContractItemConditionDatumL) LoadPurchaseContractSapPurchaseContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseContractItemConditionDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseContractItemConditionDatum
	var object *SapPurchaseContractItemConditionDatum

	if singular {
		object = maybeSapPurchaseContractItemConditionDatum.(*SapPurchaseContractItemConditionDatum)
	} else {
		slice = *maybeSapPurchaseContractItemConditionDatum.(*[]*SapPurchaseContractItemConditionDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseContractItemConditionDatumR{}
		}
		args = append(args, object.PurchaseContract)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseContractItemConditionDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseContract {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseContract)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_contract_header_data`),
		qm.WhereIn(`sap_purchase_contract_header_data.PurchaseContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseContractHeaderDatum")
	}

	var resultSlice []*SapPurchaseContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_contract_header_data")
	}

	if len(sapPurchaseContractItemConditionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseContractSapPurchaseContractHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseContractHeaderDatumR{}
		}
		foreign.R.PurchaseContractSapPurchaseContractItemConditionData = append(foreign.R.PurchaseContractSapPurchaseContractItemConditionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseContract == foreign.PurchaseContract {
				local.R.PurchaseContractSapPurchaseContractHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseContractHeaderDatumR{}
				}
				foreign.R.PurchaseContractSapPurchaseContractItemConditionData = append(foreign.R.PurchaseContractSapPurchaseContractItemConditionData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseContractSapPurchaseContractHeaderDatum of the sapPurchaseContractItemConditionDatum to the related item.
// Sets o.R.PurchaseContractSapPurchaseContractHeaderDatum to related.
// Adds o to related.R.PurchaseContractSapPurchaseContractItemConditionData.
func (o *SapPurchaseContractItemConditionDatum) SetPurchaseContractSapPurchaseContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_contract_item_condition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseContract"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseContractItemConditionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseContract, o.PurchaseContract, o.PurchaseContractItem, o.ConditionValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseContract = related.PurchaseContract
	if o.R == nil {
		o.R = &sapPurchaseContractItemConditionDatumR{
			PurchaseContractSapPurchaseContractHeaderDatum: related,
		}
	} else {
		o.R.PurchaseContractSapPurchaseContractHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchaseContractHeaderDatumR{
			PurchaseContractSapPurchaseContractItemConditionData: SapPurchaseContractItemConditionDatumSlice{o},
		}
	} else {
		related.R.PurchaseContractSapPurchaseContractItemConditionData = append(related.R.PurchaseContractSapPurchaseContractItemConditionData, o)
	}

	return nil
}

// SapPurchaseContractItemConditionData retrieves all the records using an executor.
func SapPurchaseContractItemConditionData(mods ...qm.QueryMod) sapPurchaseContractItemConditionDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_contract_item_condition_data`"))
	return sapPurchaseContractItemConditionDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseContractItemConditionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseContractItemConditionDatum(ctx context.Context, exec boil.ContextExecutor, purchaseContract string, purchaseContractItem string, conditionValidityEndDate string, selectCols ...string) (*SapPurchaseContractItemConditionDatum, error) {
	sapPurchaseContractItemConditionDatumObj := &SapPurchaseContractItemConditionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_contract_item_condition_data` where `PurchaseContract`=? AND `PurchaseContractItem`=? AND `ConditionValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, purchaseContract, purchaseContractItem, conditionValidityEndDate)

	err := q.Bind(ctx, exec, sapPurchaseContractItemConditionDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_contract_item_condition_data")
	}

	if err = sapPurchaseContractItemConditionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseContractItemConditionDatumObj, err
	}

	return sapPurchaseContractItemConditionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseContractItemConditionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_contract_item_condition_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseContractItemConditionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseContractItemConditionDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseContractItemConditionDatumInsertCache[key]
	sapPurchaseContractItemConditionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseContractItemConditionDatumAllColumns,
			sapPurchaseContractItemConditionDatumColumnsWithDefault,
			sapPurchaseContractItemConditionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_contract_item_condition_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_contract_item_condition_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_contract_item_condition_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseContractItemConditionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_contract_item_condition_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseContract,
		o.PurchaseContractItem,
		o.ConditionValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_contract_item_condition_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseContractItemConditionDatumInsertCacheMut.Lock()
		sapPurchaseContractItemConditionDatumInsertCache[key] = cache
		sapPurchaseContractItemConditionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseContractItemConditionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseContractItemConditionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseContractItemConditionDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseContractItemConditionDatumUpdateCache[key]
	sapPurchaseContractItemConditionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseContractItemConditionDatumAllColumns,
			sapPurchaseContractItemConditionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_contract_item_condition_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_contract_item_condition_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseContractItemConditionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, append(wl, sapPurchaseContractItemConditionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_contract_item_condition_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_contract_item_condition_data")
	}

	if !cached {
		sapPurchaseContractItemConditionDatumUpdateCacheMut.Lock()
		sapPurchaseContractItemConditionDatumUpdateCache[key] = cache
		sapPurchaseContractItemConditionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseContractItemConditionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_contract_item_condition_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_contract_item_condition_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseContractItemConditionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractItemConditionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_contract_item_condition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractItemConditionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseContractItemConditionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseContractItemConditionDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseContractItemConditionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseContractItemConditionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_contract_item_condition_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseContractItemConditionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseContractItemConditionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseContractItemConditionDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseContractItemConditionDatumUpsertCache[key]
	sapPurchaseContractItemConditionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseContractItemConditionDatumAllColumns,
			sapPurchaseContractItemConditionDatumColumnsWithDefault,
			sapPurchaseContractItemConditionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseContractItemConditionDatumAllColumns,
			sapPurchaseContractItemConditionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_contract_item_condition_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_contract_item_condition_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_contract_item_condition_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_contract_item_condition_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseContractItemConditionDatumType, sapPurchaseContractItemConditionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_contract_item_condition_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_contract_item_condition_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseContractItemConditionDatumUpsertCacheMut.Lock()
		sapPurchaseContractItemConditionDatumUpsertCache[key] = cache
		sapPurchaseContractItemConditionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseContractItemConditionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseContractItemConditionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseContractItemConditionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseContractItemConditionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_contract_item_condition_data` WHERE `PurchaseContract`=? AND `PurchaseContractItem`=? AND `ConditionValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_contract_item_condition_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_contract_item_condition_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseContractItemConditionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseContractItemConditionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_contract_item_condition_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_contract_item_condition_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseContractItemConditionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseContractItemConditionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractItemConditionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_contract_item_condition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractItemConditionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseContractItemConditionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_contract_item_condition_data")
	}

	if len(sapPurchaseContractItemConditionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseContractItemConditionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseContractItemConditionDatum(ctx, exec, o.PurchaseContract, o.PurchaseContractItem, o.ConditionValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseContractItemConditionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseContractItemConditionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractItemConditionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_contract_item_condition_data`.* FROM `sap_purchase_contract_item_condition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractItemConditionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseContractItemConditionDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseContractItemConditionDatumExists checks if the SapPurchaseContractItemConditionDatum row exists.
func SapPurchaseContractItemConditionDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseContract string, purchaseContractItem string, conditionValidityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_contract_item_condition_data` where `PurchaseContract`=? AND `PurchaseContractItem`=? AND `ConditionValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseContract, purchaseContractItem, conditionValidityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseContract, purchaseContractItem, conditionValidityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_contract_item_condition_data exists")
	}

	return exists, nil
}
