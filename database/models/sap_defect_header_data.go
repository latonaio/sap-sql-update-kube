// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapDefectHeaderDatum is an object representing the database table.
type SapDefectHeaderDatum struct {
	DefectInternalID            string      `boil:"DefectInternalID" json:"DefectInternalID" toml:"DefectInternalID" yaml:"DefectInternalID"`
	Defect                      null.String `boil:"Defect" json:"Defect,omitempty" toml:"Defect" yaml:"Defect,omitempty"`
	DefectCategory              null.String `boil:"DefectCategory" json:"DefectCategory,omitempty" toml:"DefectCategory" yaml:"DefectCategory,omitempty"`
	CreationDate                null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate              null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	DefectText                  null.String `boil:"DefectText" json:"DefectText,omitempty" toml:"DefectText" yaml:"DefectText,omitempty"`
	DefectCodeCatalog           null.String `boil:"DefectCodeCatalog" json:"DefectCodeCatalog,omitempty" toml:"DefectCodeCatalog" yaml:"DefectCodeCatalog,omitempty"`
	DefectCodeGroup             null.String `boil:"DefectCodeGroup" json:"DefectCodeGroup,omitempty" toml:"DefectCodeGroup" yaml:"DefectCodeGroup,omitempty"`
	DefectCode                  null.String `boil:"DefectCode" json:"DefectCode,omitempty" toml:"DefectCode" yaml:"DefectCode,omitempty"`
	DefectCodeVersion           null.String `boil:"DefectCodeVersion" json:"DefectCodeVersion,omitempty" toml:"DefectCodeVersion" yaml:"DefectCodeVersion,omitempty"`
	DefectObjectCodeCatalog     null.String `boil:"DefectObjectCodeCatalog" json:"DefectObjectCodeCatalog,omitempty" toml:"DefectObjectCodeCatalog" yaml:"DefectObjectCodeCatalog,omitempty"`
	DefectObjectCodeGroup       null.String `boil:"DefectObjectCodeGroup" json:"DefectObjectCodeGroup,omitempty" toml:"DefectObjectCodeGroup" yaml:"DefectObjectCodeGroup,omitempty"`
	DefectObjectCode            null.String `boil:"DefectObjectCode" json:"DefectObjectCode,omitempty" toml:"DefectObjectCode" yaml:"DefectObjectCode,omitempty"`
	DefectiveQuantity           null.String `boil:"DefectiveQuantity" json:"DefectiveQuantity,omitempty" toml:"DefectiveQuantity" yaml:"DefectiveQuantity,omitempty"`
	DefectiveQuantityUnit       null.String `boil:"DefectiveQuantityUnit" json:"DefectiveQuantityUnit,omitempty" toml:"DefectiveQuantityUnit" yaml:"DefectiveQuantityUnit,omitempty"`
	ManufacturingOrder          null.String `boil:"ManufacturingOrder" json:"ManufacturingOrder,omitempty" toml:"ManufacturingOrder" yaml:"ManufacturingOrder,omitempty"`
	OrderInternalID             null.String `boil:"OrderInternalID" json:"OrderInternalID,omitempty" toml:"OrderInternalID" yaml:"OrderInternalID,omitempty"`
	ManufacturingOrderOperation null.String `boil:"ManufacturingOrderOperation" json:"ManufacturingOrderOperation,omitempty" toml:"ManufacturingOrderOperation" yaml:"ManufacturingOrderOperation,omitempty"`
	ManufacturingOrderSequence  null.String `boil:"ManufacturingOrderSequence" json:"ManufacturingOrderSequence,omitempty" toml:"ManufacturingOrderSequence" yaml:"ManufacturingOrderSequence,omitempty"`
	CreationTime                null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	LastChangeTime              null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	DefectClass                 null.String `boil:"DefectClass" json:"DefectClass,omitempty" toml:"DefectClass" yaml:"DefectClass,omitempty"`
	NumberOfDefects             null.String `boil:"NumberOfDefects" json:"NumberOfDefects,omitempty" toml:"NumberOfDefects" yaml:"NumberOfDefects,omitempty"`
	InspPlanOperationInternalID null.String `boil:"InspPlanOperationInternalID" json:"InspPlanOperationInternalID,omitempty" toml:"InspPlanOperationInternalID" yaml:"InspPlanOperationInternalID,omitempty"`
	InspectionCharacteristic    null.String `boil:"InspectionCharacteristic" json:"InspectionCharacteristic,omitempty" toml:"InspectionCharacteristic" yaml:"InspectionCharacteristic,omitempty"`
	InspectionSubsetInternalID  null.String `boil:"InspectionSubsetInternalID" json:"InspectionSubsetInternalID,omitempty" toml:"InspectionSubsetInternalID" yaml:"InspectionSubsetInternalID,omitempty"`
	MaterialSample              null.String `boil:"MaterialSample" json:"MaterialSample,omitempty" toml:"MaterialSample" yaml:"MaterialSample,omitempty"`
	WorkCenterTypeCode          null.String `boil:"WorkCenterTypeCode" json:"WorkCenterTypeCode,omitempty" toml:"WorkCenterTypeCode" yaml:"WorkCenterTypeCode,omitempty"`
	MainWorkCenterInternalID    null.String `boil:"MainWorkCenterInternalID" json:"MainWorkCenterInternalID,omitempty" toml:"MainWorkCenterInternalID" yaml:"MainWorkCenterInternalID,omitempty"`
	MainWorkCenterPlant         null.String `boil:"MainWorkCenterPlant" json:"MainWorkCenterPlant,omitempty" toml:"MainWorkCenterPlant" yaml:"MainWorkCenterPlant,omitempty"`
	MainWorkCenter              null.String `boil:"MainWorkCenter" json:"MainWorkCenter,omitempty" toml:"MainWorkCenter" yaml:"MainWorkCenter,omitempty"`
	Equipment                   null.String `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	FunctionalLocation          null.String `boil:"FunctionalLocation" json:"FunctionalLocation,omitempty" toml:"FunctionalLocation" yaml:"FunctionalLocation,omitempty"`
	IsDeleted                   null.String `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`
	DefectOrigin                null.String `boil:"DefectOrigin" json:"DefectOrigin,omitempty" toml:"DefectOrigin" yaml:"DefectOrigin,omitempty"`
	Material                    null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                       null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	InspectionLot               null.String `boil:"InspectionLot" json:"InspectionLot,omitempty" toml:"InspectionLot" yaml:"InspectionLot,omitempty"`
	CatalogProfile              null.String `boil:"CatalogProfile" json:"CatalogProfile,omitempty" toml:"CatalogProfile" yaml:"CatalogProfile,omitempty"`
	ChangedDateTime             null.String `boil:"ChangedDateTime" json:"ChangedDateTime,omitempty" toml:"ChangedDateTime" yaml:"ChangedDateTime,omitempty"`

	R *sapDefectHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapDefectHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapDefectHeaderDatumColumns = struct {
	DefectInternalID            string
	Defect                      string
	DefectCategory              string
	CreationDate                string
	LastChangeDate              string
	DefectText                  string
	DefectCodeCatalog           string
	DefectCodeGroup             string
	DefectCode                  string
	DefectCodeVersion           string
	DefectObjectCodeCatalog     string
	DefectObjectCodeGroup       string
	DefectObjectCode            string
	DefectiveQuantity           string
	DefectiveQuantityUnit       string
	ManufacturingOrder          string
	OrderInternalID             string
	ManufacturingOrderOperation string
	ManufacturingOrderSequence  string
	CreationTime                string
	LastChangeTime              string
	DefectClass                 string
	NumberOfDefects             string
	InspPlanOperationInternalID string
	InspectionCharacteristic    string
	InspectionSubsetInternalID  string
	MaterialSample              string
	WorkCenterTypeCode          string
	MainWorkCenterInternalID    string
	MainWorkCenterPlant         string
	MainWorkCenter              string
	Equipment                   string
	FunctionalLocation          string
	IsDeleted                   string
	DefectOrigin                string
	Material                    string
	Plant                       string
	InspectionLot               string
	CatalogProfile              string
	ChangedDateTime             string
}{
	DefectInternalID:            "DefectInternalID",
	Defect:                      "Defect",
	DefectCategory:              "DefectCategory",
	CreationDate:                "CreationDate",
	LastChangeDate:              "LastChangeDate",
	DefectText:                  "DefectText",
	DefectCodeCatalog:           "DefectCodeCatalog",
	DefectCodeGroup:             "DefectCodeGroup",
	DefectCode:                  "DefectCode",
	DefectCodeVersion:           "DefectCodeVersion",
	DefectObjectCodeCatalog:     "DefectObjectCodeCatalog",
	DefectObjectCodeGroup:       "DefectObjectCodeGroup",
	DefectObjectCode:            "DefectObjectCode",
	DefectiveQuantity:           "DefectiveQuantity",
	DefectiveQuantityUnit:       "DefectiveQuantityUnit",
	ManufacturingOrder:          "ManufacturingOrder",
	OrderInternalID:             "OrderInternalID",
	ManufacturingOrderOperation: "ManufacturingOrderOperation",
	ManufacturingOrderSequence:  "ManufacturingOrderSequence",
	CreationTime:                "CreationTime",
	LastChangeTime:              "LastChangeTime",
	DefectClass:                 "DefectClass",
	NumberOfDefects:             "NumberOfDefects",
	InspPlanOperationInternalID: "InspPlanOperationInternalID",
	InspectionCharacteristic:    "InspectionCharacteristic",
	InspectionSubsetInternalID:  "InspectionSubsetInternalID",
	MaterialSample:              "MaterialSample",
	WorkCenterTypeCode:          "WorkCenterTypeCode",
	MainWorkCenterInternalID:    "MainWorkCenterInternalID",
	MainWorkCenterPlant:         "MainWorkCenterPlant",
	MainWorkCenter:              "MainWorkCenter",
	Equipment:                   "Equipment",
	FunctionalLocation:          "FunctionalLocation",
	IsDeleted:                   "IsDeleted",
	DefectOrigin:                "DefectOrigin",
	Material:                    "Material",
	Plant:                       "Plant",
	InspectionLot:               "InspectionLot",
	CatalogProfile:              "CatalogProfile",
	ChangedDateTime:             "ChangedDateTime",
}

var SapDefectHeaderDatumTableColumns = struct {
	DefectInternalID            string
	Defect                      string
	DefectCategory              string
	CreationDate                string
	LastChangeDate              string
	DefectText                  string
	DefectCodeCatalog           string
	DefectCodeGroup             string
	DefectCode                  string
	DefectCodeVersion           string
	DefectObjectCodeCatalog     string
	DefectObjectCodeGroup       string
	DefectObjectCode            string
	DefectiveQuantity           string
	DefectiveQuantityUnit       string
	ManufacturingOrder          string
	OrderInternalID             string
	ManufacturingOrderOperation string
	ManufacturingOrderSequence  string
	CreationTime                string
	LastChangeTime              string
	DefectClass                 string
	NumberOfDefects             string
	InspPlanOperationInternalID string
	InspectionCharacteristic    string
	InspectionSubsetInternalID  string
	MaterialSample              string
	WorkCenterTypeCode          string
	MainWorkCenterInternalID    string
	MainWorkCenterPlant         string
	MainWorkCenter              string
	Equipment                   string
	FunctionalLocation          string
	IsDeleted                   string
	DefectOrigin                string
	Material                    string
	Plant                       string
	InspectionLot               string
	CatalogProfile              string
	ChangedDateTime             string
}{
	DefectInternalID:            "sap_defect_header_data.DefectInternalID",
	Defect:                      "sap_defect_header_data.Defect",
	DefectCategory:              "sap_defect_header_data.DefectCategory",
	CreationDate:                "sap_defect_header_data.CreationDate",
	LastChangeDate:              "sap_defect_header_data.LastChangeDate",
	DefectText:                  "sap_defect_header_data.DefectText",
	DefectCodeCatalog:           "sap_defect_header_data.DefectCodeCatalog",
	DefectCodeGroup:             "sap_defect_header_data.DefectCodeGroup",
	DefectCode:                  "sap_defect_header_data.DefectCode",
	DefectCodeVersion:           "sap_defect_header_data.DefectCodeVersion",
	DefectObjectCodeCatalog:     "sap_defect_header_data.DefectObjectCodeCatalog",
	DefectObjectCodeGroup:       "sap_defect_header_data.DefectObjectCodeGroup",
	DefectObjectCode:            "sap_defect_header_data.DefectObjectCode",
	DefectiveQuantity:           "sap_defect_header_data.DefectiveQuantity",
	DefectiveQuantityUnit:       "sap_defect_header_data.DefectiveQuantityUnit",
	ManufacturingOrder:          "sap_defect_header_data.ManufacturingOrder",
	OrderInternalID:             "sap_defect_header_data.OrderInternalID",
	ManufacturingOrderOperation: "sap_defect_header_data.ManufacturingOrderOperation",
	ManufacturingOrderSequence:  "sap_defect_header_data.ManufacturingOrderSequence",
	CreationTime:                "sap_defect_header_data.CreationTime",
	LastChangeTime:              "sap_defect_header_data.LastChangeTime",
	DefectClass:                 "sap_defect_header_data.DefectClass",
	NumberOfDefects:             "sap_defect_header_data.NumberOfDefects",
	InspPlanOperationInternalID: "sap_defect_header_data.InspPlanOperationInternalID",
	InspectionCharacteristic:    "sap_defect_header_data.InspectionCharacteristic",
	InspectionSubsetInternalID:  "sap_defect_header_data.InspectionSubsetInternalID",
	MaterialSample:              "sap_defect_header_data.MaterialSample",
	WorkCenterTypeCode:          "sap_defect_header_data.WorkCenterTypeCode",
	MainWorkCenterInternalID:    "sap_defect_header_data.MainWorkCenterInternalID",
	MainWorkCenterPlant:         "sap_defect_header_data.MainWorkCenterPlant",
	MainWorkCenter:              "sap_defect_header_data.MainWorkCenter",
	Equipment:                   "sap_defect_header_data.Equipment",
	FunctionalLocation:          "sap_defect_header_data.FunctionalLocation",
	IsDeleted:                   "sap_defect_header_data.IsDeleted",
	DefectOrigin:                "sap_defect_header_data.DefectOrigin",
	Material:                    "sap_defect_header_data.Material",
	Plant:                       "sap_defect_header_data.Plant",
	InspectionLot:               "sap_defect_header_data.InspectionLot",
	CatalogProfile:              "sap_defect_header_data.CatalogProfile",
	ChangedDateTime:             "sap_defect_header_data.ChangedDateTime",
}

// Generated where

var SapDefectHeaderDatumWhere = struct {
	DefectInternalID            whereHelperstring
	Defect                      whereHelpernull_String
	DefectCategory              whereHelpernull_String
	CreationDate                whereHelpernull_String
	LastChangeDate              whereHelpernull_String
	DefectText                  whereHelpernull_String
	DefectCodeCatalog           whereHelpernull_String
	DefectCodeGroup             whereHelpernull_String
	DefectCode                  whereHelpernull_String
	DefectCodeVersion           whereHelpernull_String
	DefectObjectCodeCatalog     whereHelpernull_String
	DefectObjectCodeGroup       whereHelpernull_String
	DefectObjectCode            whereHelpernull_String
	DefectiveQuantity           whereHelpernull_String
	DefectiveQuantityUnit       whereHelpernull_String
	ManufacturingOrder          whereHelpernull_String
	OrderInternalID             whereHelpernull_String
	ManufacturingOrderOperation whereHelpernull_String
	ManufacturingOrderSequence  whereHelpernull_String
	CreationTime                whereHelpernull_String
	LastChangeTime              whereHelpernull_String
	DefectClass                 whereHelpernull_String
	NumberOfDefects             whereHelpernull_String
	InspPlanOperationInternalID whereHelpernull_String
	InspectionCharacteristic    whereHelpernull_String
	InspectionSubsetInternalID  whereHelpernull_String
	MaterialSample              whereHelpernull_String
	WorkCenterTypeCode          whereHelpernull_String
	MainWorkCenterInternalID    whereHelpernull_String
	MainWorkCenterPlant         whereHelpernull_String
	MainWorkCenter              whereHelpernull_String
	Equipment                   whereHelpernull_String
	FunctionalLocation          whereHelpernull_String
	IsDeleted                   whereHelpernull_String
	DefectOrigin                whereHelpernull_String
	Material                    whereHelpernull_String
	Plant                       whereHelpernull_String
	InspectionLot               whereHelpernull_String
	CatalogProfile              whereHelpernull_String
	ChangedDateTime             whereHelpernull_String
}{
	DefectInternalID:            whereHelperstring{field: "`sap_defect_header_data`.`DefectInternalID`"},
	Defect:                      whereHelpernull_String{field: "`sap_defect_header_data`.`Defect`"},
	DefectCategory:              whereHelpernull_String{field: "`sap_defect_header_data`.`DefectCategory`"},
	CreationDate:                whereHelpernull_String{field: "`sap_defect_header_data`.`CreationDate`"},
	LastChangeDate:              whereHelpernull_String{field: "`sap_defect_header_data`.`LastChangeDate`"},
	DefectText:                  whereHelpernull_String{field: "`sap_defect_header_data`.`DefectText`"},
	DefectCodeCatalog:           whereHelpernull_String{field: "`sap_defect_header_data`.`DefectCodeCatalog`"},
	DefectCodeGroup:             whereHelpernull_String{field: "`sap_defect_header_data`.`DefectCodeGroup`"},
	DefectCode:                  whereHelpernull_String{field: "`sap_defect_header_data`.`DefectCode`"},
	DefectCodeVersion:           whereHelpernull_String{field: "`sap_defect_header_data`.`DefectCodeVersion`"},
	DefectObjectCodeCatalog:     whereHelpernull_String{field: "`sap_defect_header_data`.`DefectObjectCodeCatalog`"},
	DefectObjectCodeGroup:       whereHelpernull_String{field: "`sap_defect_header_data`.`DefectObjectCodeGroup`"},
	DefectObjectCode:            whereHelpernull_String{field: "`sap_defect_header_data`.`DefectObjectCode`"},
	DefectiveQuantity:           whereHelpernull_String{field: "`sap_defect_header_data`.`DefectiveQuantity`"},
	DefectiveQuantityUnit:       whereHelpernull_String{field: "`sap_defect_header_data`.`DefectiveQuantityUnit`"},
	ManufacturingOrder:          whereHelpernull_String{field: "`sap_defect_header_data`.`ManufacturingOrder`"},
	OrderInternalID:             whereHelpernull_String{field: "`sap_defect_header_data`.`OrderInternalID`"},
	ManufacturingOrderOperation: whereHelpernull_String{field: "`sap_defect_header_data`.`ManufacturingOrderOperation`"},
	ManufacturingOrderSequence:  whereHelpernull_String{field: "`sap_defect_header_data`.`ManufacturingOrderSequence`"},
	CreationTime:                whereHelpernull_String{field: "`sap_defect_header_data`.`CreationTime`"},
	LastChangeTime:              whereHelpernull_String{field: "`sap_defect_header_data`.`LastChangeTime`"},
	DefectClass:                 whereHelpernull_String{field: "`sap_defect_header_data`.`DefectClass`"},
	NumberOfDefects:             whereHelpernull_String{field: "`sap_defect_header_data`.`NumberOfDefects`"},
	InspPlanOperationInternalID: whereHelpernull_String{field: "`sap_defect_header_data`.`InspPlanOperationInternalID`"},
	InspectionCharacteristic:    whereHelpernull_String{field: "`sap_defect_header_data`.`InspectionCharacteristic`"},
	InspectionSubsetInternalID:  whereHelpernull_String{field: "`sap_defect_header_data`.`InspectionSubsetInternalID`"},
	MaterialSample:              whereHelpernull_String{field: "`sap_defect_header_data`.`MaterialSample`"},
	WorkCenterTypeCode:          whereHelpernull_String{field: "`sap_defect_header_data`.`WorkCenterTypeCode`"},
	MainWorkCenterInternalID:    whereHelpernull_String{field: "`sap_defect_header_data`.`MainWorkCenterInternalID`"},
	MainWorkCenterPlant:         whereHelpernull_String{field: "`sap_defect_header_data`.`MainWorkCenterPlant`"},
	MainWorkCenter:              whereHelpernull_String{field: "`sap_defect_header_data`.`MainWorkCenter`"},
	Equipment:                   whereHelpernull_String{field: "`sap_defect_header_data`.`Equipment`"},
	FunctionalLocation:          whereHelpernull_String{field: "`sap_defect_header_data`.`FunctionalLocation`"},
	IsDeleted:                   whereHelpernull_String{field: "`sap_defect_header_data`.`IsDeleted`"},
	DefectOrigin:                whereHelpernull_String{field: "`sap_defect_header_data`.`DefectOrigin`"},
	Material:                    whereHelpernull_String{field: "`sap_defect_header_data`.`Material`"},
	Plant:                       whereHelpernull_String{field: "`sap_defect_header_data`.`Plant`"},
	InspectionLot:               whereHelpernull_String{field: "`sap_defect_header_data`.`InspectionLot`"},
	CatalogProfile:              whereHelpernull_String{field: "`sap_defect_header_data`.`CatalogProfile`"},
	ChangedDateTime:             whereHelpernull_String{field: "`sap_defect_header_data`.`ChangedDateTime`"},
}

// SapDefectHeaderDatumRels is where relationship names are stored.
var SapDefectHeaderDatumRels = struct {
}{}

// sapDefectHeaderDatumR is where relationships are stored.
type sapDefectHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapDefectHeaderDatumR) NewStruct() *sapDefectHeaderDatumR {
	return &sapDefectHeaderDatumR{}
}

// sapDefectHeaderDatumL is where Load methods for each relationship are stored.
type sapDefectHeaderDatumL struct{}

var (
	sapDefectHeaderDatumAllColumns            = []string{"DefectInternalID", "Defect", "DefectCategory", "CreationDate", "LastChangeDate", "DefectText", "DefectCodeCatalog", "DefectCodeGroup", "DefectCode", "DefectCodeVersion", "DefectObjectCodeCatalog", "DefectObjectCodeGroup", "DefectObjectCode", "DefectiveQuantity", "DefectiveQuantityUnit", "ManufacturingOrder", "OrderInternalID", "ManufacturingOrderOperation", "ManufacturingOrderSequence", "CreationTime", "LastChangeTime", "DefectClass", "NumberOfDefects", "InspPlanOperationInternalID", "InspectionCharacteristic", "InspectionSubsetInternalID", "MaterialSample", "WorkCenterTypeCode", "MainWorkCenterInternalID", "MainWorkCenterPlant", "MainWorkCenter", "Equipment", "FunctionalLocation", "IsDeleted", "DefectOrigin", "Material", "Plant", "InspectionLot", "CatalogProfile", "ChangedDateTime"}
	sapDefectHeaderDatumColumnsWithoutDefault = []string{"DefectInternalID", "Defect", "DefectCategory", "CreationDate", "LastChangeDate", "DefectText", "DefectCodeCatalog", "DefectCodeGroup", "DefectCode", "DefectCodeVersion", "DefectObjectCodeCatalog", "DefectObjectCodeGroup", "DefectObjectCode", "DefectiveQuantity", "DefectiveQuantityUnit", "ManufacturingOrder", "OrderInternalID", "ManufacturingOrderOperation", "ManufacturingOrderSequence", "CreationTime", "LastChangeTime", "DefectClass", "NumberOfDefects", "InspPlanOperationInternalID", "InspectionCharacteristic", "InspectionSubsetInternalID", "MaterialSample", "WorkCenterTypeCode", "MainWorkCenterInternalID", "MainWorkCenterPlant", "MainWorkCenter", "Equipment", "FunctionalLocation", "IsDeleted", "DefectOrigin", "Material", "Plant", "InspectionLot", "CatalogProfile", "ChangedDateTime"}
	sapDefectHeaderDatumColumnsWithDefault    = []string{}
	sapDefectHeaderDatumPrimaryKeyColumns     = []string{"DefectInternalID"}
	sapDefectHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapDefectHeaderDatumSlice is an alias for a slice of pointers to SapDefectHeaderDatum.
	// This should almost always be used instead of []SapDefectHeaderDatum.
	SapDefectHeaderDatumSlice []*SapDefectHeaderDatum
	// SapDefectHeaderDatumHook is the signature for custom SapDefectHeaderDatum hook methods
	SapDefectHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapDefectHeaderDatum) error

	sapDefectHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapDefectHeaderDatumType                 = reflect.TypeOf(&SapDefectHeaderDatum{})
	sapDefectHeaderDatumMapping              = queries.MakeStructMapping(sapDefectHeaderDatumType)
	sapDefectHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, sapDefectHeaderDatumPrimaryKeyColumns)
	sapDefectHeaderDatumInsertCacheMut       sync.RWMutex
	sapDefectHeaderDatumInsertCache          = make(map[string]insertCache)
	sapDefectHeaderDatumUpdateCacheMut       sync.RWMutex
	sapDefectHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapDefectHeaderDatumUpsertCacheMut       sync.RWMutex
	sapDefectHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapDefectHeaderDatumAfterSelectHooks []SapDefectHeaderDatumHook

var sapDefectHeaderDatumBeforeInsertHooks []SapDefectHeaderDatumHook
var sapDefectHeaderDatumAfterInsertHooks []SapDefectHeaderDatumHook

var sapDefectHeaderDatumBeforeUpdateHooks []SapDefectHeaderDatumHook
var sapDefectHeaderDatumAfterUpdateHooks []SapDefectHeaderDatumHook

var sapDefectHeaderDatumBeforeDeleteHooks []SapDefectHeaderDatumHook
var sapDefectHeaderDatumAfterDeleteHooks []SapDefectHeaderDatumHook

var sapDefectHeaderDatumBeforeUpsertHooks []SapDefectHeaderDatumHook
var sapDefectHeaderDatumAfterUpsertHooks []SapDefectHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapDefectHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapDefectHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapDefectHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapDefectHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapDefectHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapDefectHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapDefectHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapDefectHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapDefectHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDefectHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapDefectHeaderDatumHook registers your hook function for all future operations.
func AddSapDefectHeaderDatumHook(hookPoint boil.HookPoint, sapDefectHeaderDatumHook SapDefectHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapDefectHeaderDatumAfterSelectHooks = append(sapDefectHeaderDatumAfterSelectHooks, sapDefectHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapDefectHeaderDatumBeforeInsertHooks = append(sapDefectHeaderDatumBeforeInsertHooks, sapDefectHeaderDatumHook)
	case boil.AfterInsertHook:
		sapDefectHeaderDatumAfterInsertHooks = append(sapDefectHeaderDatumAfterInsertHooks, sapDefectHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapDefectHeaderDatumBeforeUpdateHooks = append(sapDefectHeaderDatumBeforeUpdateHooks, sapDefectHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapDefectHeaderDatumAfterUpdateHooks = append(sapDefectHeaderDatumAfterUpdateHooks, sapDefectHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapDefectHeaderDatumBeforeDeleteHooks = append(sapDefectHeaderDatumBeforeDeleteHooks, sapDefectHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapDefectHeaderDatumAfterDeleteHooks = append(sapDefectHeaderDatumAfterDeleteHooks, sapDefectHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapDefectHeaderDatumBeforeUpsertHooks = append(sapDefectHeaderDatumBeforeUpsertHooks, sapDefectHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapDefectHeaderDatumAfterUpsertHooks = append(sapDefectHeaderDatumAfterUpsertHooks, sapDefectHeaderDatumHook)
	}
}

// One returns a single sapDefectHeaderDatum record from the query.
func (q sapDefectHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapDefectHeaderDatum, error) {
	o := &SapDefectHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_defect_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapDefectHeaderDatum records from the query.
func (q sapDefectHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapDefectHeaderDatumSlice, error) {
	var o []*SapDefectHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapDefectHeaderDatum slice")
	}

	if len(sapDefectHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapDefectHeaderDatum records in the query.
func (q sapDefectHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_defect_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapDefectHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_defect_header_data exists")
	}

	return count > 0, nil
}

// SapDefectHeaderData retrieves all the records using an executor.
func SapDefectHeaderData(mods ...qm.QueryMod) sapDefectHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_defect_header_data`"))
	return sapDefectHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapDefectHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapDefectHeaderDatum(ctx context.Context, exec boil.ContextExecutor, defectInternalID string, selectCols ...string) (*SapDefectHeaderDatum, error) {
	sapDefectHeaderDatumObj := &SapDefectHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_defect_header_data` where `DefectInternalID`=?", sel,
	)

	q := queries.Raw(query, defectInternalID)

	err := q.Bind(ctx, exec, sapDefectHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_defect_header_data")
	}

	if err = sapDefectHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapDefectHeaderDatumObj, err
	}

	return sapDefectHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapDefectHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_defect_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapDefectHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapDefectHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapDefectHeaderDatumInsertCache[key]
	sapDefectHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapDefectHeaderDatumAllColumns,
			sapDefectHeaderDatumColumnsWithDefault,
			sapDefectHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_defect_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_defect_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_defect_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapDefectHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_defect_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DefectInternalID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_defect_header_data")
	}

CacheNoHooks:
	if !cached {
		sapDefectHeaderDatumInsertCacheMut.Lock()
		sapDefectHeaderDatumInsertCache[key] = cache
		sapDefectHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapDefectHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapDefectHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapDefectHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapDefectHeaderDatumUpdateCache[key]
	sapDefectHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapDefectHeaderDatumAllColumns,
			sapDefectHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_defect_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_defect_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapDefectHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, append(wl, sapDefectHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_defect_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_defect_header_data")
	}

	if !cached {
		sapDefectHeaderDatumUpdateCacheMut.Lock()
		sapDefectHeaderDatumUpdateCache[key] = cache
		sapDefectHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapDefectHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_defect_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_defect_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapDefectHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDefectHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_defect_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDefectHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapDefectHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapDefectHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapDefectHeaderDatumUniqueColumns = []string{
	"DefectInternalID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapDefectHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_defect_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapDefectHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapDefectHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapDefectHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapDefectHeaderDatumUpsertCache[key]
	sapDefectHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapDefectHeaderDatumAllColumns,
			sapDefectHeaderDatumColumnsWithDefault,
			sapDefectHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapDefectHeaderDatumAllColumns,
			sapDefectHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_defect_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_defect_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_defect_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_defect_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapDefectHeaderDatumType, sapDefectHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_defect_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_defect_header_data")
	}

CacheNoHooks:
	if !cached {
		sapDefectHeaderDatumUpsertCacheMut.Lock()
		sapDefectHeaderDatumUpsertCache[key] = cache
		sapDefectHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapDefectHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapDefectHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapDefectHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapDefectHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_defect_header_data` WHERE `DefectInternalID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_defect_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_defect_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapDefectHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapDefectHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_defect_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_defect_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapDefectHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapDefectHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDefectHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_defect_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDefectHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapDefectHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_defect_header_data")
	}

	if len(sapDefectHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapDefectHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapDefectHeaderDatum(ctx, exec, o.DefectInternalID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapDefectHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapDefectHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDefectHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_defect_header_data`.* FROM `sap_defect_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDefectHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapDefectHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapDefectHeaderDatumExists checks if the SapDefectHeaderDatum row exists.
func SapDefectHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, defectInternalID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_defect_header_data` where `DefectInternalID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, defectInternalID)
	}
	row := exec.QueryRowContext(ctx, sql, defectInternalID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_defect_header_data exists")
	}

	return exists, nil
}
