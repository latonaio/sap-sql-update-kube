// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesOrderHeaderDatum is an object representing the database table.
type SapSalesOrderHeaderDatum struct {
	SalesOrder                  string      `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	SalesOrderItem              null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	SalesOrderItemCategory      null.String `boil:"SalesOrderItemCategory" json:"SalesOrderItemCategory,omitempty" toml:"SalesOrderItemCategory" yaml:"SalesOrderItemCategory,omitempty"`
	SalesOrderItemText          null.String `boil:"SalesOrderItemText" json:"SalesOrderItemText,omitempty" toml:"SalesOrderItemText" yaml:"SalesOrderItemText,omitempty"`
	PurchaseOrderByCustomer     null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	Material                    null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer          null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	PricingDate                 null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	BillingPlan                 null.String `boil:"BillingPlan" json:"BillingPlan,omitempty" toml:"BillingPlan" yaml:"BillingPlan,omitempty"`
	RequestedQuantity           null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	RequestedQuantityUnit       null.String `boil:"RequestedQuantityUnit" json:"RequestedQuantityUnit,omitempty" toml:"RequestedQuantityUnit" yaml:"RequestedQuantityUnit,omitempty"`
	OrderQuantityUnit           null.String `boil:"OrderQuantityUnit" json:"OrderQuantityUnit,omitempty" toml:"OrderQuantityUnit" yaml:"OrderQuantityUnit,omitempty"`
	ConfdDelivQtyInOrderQtyUnit null.String `boil:"ConfdDelivQtyInOrderQtyUnit" json:"ConfdDelivQtyInOrderQtyUnit,omitempty" toml:"ConfdDelivQtyInOrderQtyUnit" yaml:"ConfdDelivQtyInOrderQtyUnit,omitempty"`
	ItemGrossWeight             null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight               null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit              null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemVolume                  null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit              null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	TransactionCurrency         null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	NetAmount                   null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	MaterialGroup               null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	MaterialPricingGroup        null.String `boil:"MaterialPricingGroup" json:"MaterialPricingGroup,omitempty" toml:"MaterialPricingGroup" yaml:"MaterialPricingGroup,omitempty"`
	BillingDocumentDate         null.String `boil:"BillingDocumentDate" json:"BillingDocumentDate,omitempty" toml:"BillingDocumentDate" yaml:"BillingDocumentDate,omitempty"`
	Batch                       null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	ProductionPlant             null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	StorageLocation             null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	DeliveryGroup               null.String `boil:"DeliveryGroup" json:"DeliveryGroup,omitempty" toml:"DeliveryGroup" yaml:"DeliveryGroup,omitempty"`
	ShippingPoint               null.String `boil:"ShippingPoint" json:"ShippingPoint,omitempty" toml:"ShippingPoint" yaml:"ShippingPoint,omitempty"`
	ShippingType                null.String `boil:"ShippingType" json:"ShippingType,omitempty" toml:"ShippingType" yaml:"ShippingType,omitempty"`
	DeliveryPriority            null.String `boil:"DeliveryPriority" json:"DeliveryPriority,omitempty" toml:"DeliveryPriority" yaml:"DeliveryPriority,omitempty"`
	IncotermsClassification     null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	TaxAmount                   null.String `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	ProductTaxClassification1   null.String `boil:"ProductTaxClassification1" json:"ProductTaxClassification1,omitempty" toml:"ProductTaxClassification1" yaml:"ProductTaxClassification1,omitempty"`
	MatlAccountAssignmentGroup  null.String `boil:"MatlAccountAssignmentGroup" json:"MatlAccountAssignmentGroup,omitempty" toml:"MatlAccountAssignmentGroup" yaml:"MatlAccountAssignmentGroup,omitempty"`
	CostAmount                  null.String `boil:"CostAmount" json:"CostAmount,omitempty" toml:"CostAmount" yaml:"CostAmount,omitempty"`
	CustomerPaymentTerms        null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	CustomerGroup               null.String `boil:"CustomerGroup" json:"CustomerGroup,omitempty" toml:"CustomerGroup" yaml:"CustomerGroup,omitempty"`
	SalesDocumentRjcnReason     null.String `boil:"SalesDocumentRjcnReason" json:"SalesDocumentRjcnReason,omitempty" toml:"SalesDocumentRjcnReason" yaml:"SalesDocumentRjcnReason,omitempty"`
	ItemBillingBlockReason      null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	WBSElement                  null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ProfitCenter                null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	AccountingExchangeRate      null.String `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	ReferenceSDDocument         null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem     null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	SDProcessStatus             null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`
	DeliveryStatus              null.String `boil:"DeliveryStatus" json:"DeliveryStatus,omitempty" toml:"DeliveryStatus" yaml:"DeliveryStatus,omitempty"`
	OrderRelatedBillingStatus   null.String `boil:"OrderRelatedBillingStatus" json:"OrderRelatedBillingStatus,omitempty" toml:"OrderRelatedBillingStatus" yaml:"OrderRelatedBillingStatus,omitempty"`

	R *sapSalesOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesOrderHeaderDatumColumns = struct {
	SalesOrder                  string
	SalesOrderItem              string
	SalesOrderItemCategory      string
	SalesOrderItemText          string
	PurchaseOrderByCustomer     string
	Material                    string
	MaterialByCustomer          string
	PricingDate                 string
	BillingPlan                 string
	RequestedQuantity           string
	RequestedQuantityUnit       string
	OrderQuantityUnit           string
	ConfdDelivQtyInOrderQtyUnit string
	ItemGrossWeight             string
	ItemNetWeight               string
	ItemWeightUnit              string
	ItemVolume                  string
	ItemVolumeUnit              string
	TransactionCurrency         string
	NetAmount                   string
	MaterialGroup               string
	MaterialPricingGroup        string
	BillingDocumentDate         string
	Batch                       string
	ProductionPlant             string
	StorageLocation             string
	DeliveryGroup               string
	ShippingPoint               string
	ShippingType                string
	DeliveryPriority            string
	IncotermsClassification     string
	TaxAmount                   string
	ProductTaxClassification1   string
	MatlAccountAssignmentGroup  string
	CostAmount                  string
	CustomerPaymentTerms        string
	CustomerGroup               string
	SalesDocumentRjcnReason     string
	ItemBillingBlockReason      string
	WBSElement                  string
	ProfitCenter                string
	AccountingExchangeRate      string
	ReferenceSDDocument         string
	ReferenceSDDocumentItem     string
	SDProcessStatus             string
	DeliveryStatus              string
	OrderRelatedBillingStatus   string
}{
	SalesOrder:                  "SalesOrder",
	SalesOrderItem:              "SalesOrderItem",
	SalesOrderItemCategory:      "SalesOrderItemCategory",
	SalesOrderItemText:          "SalesOrderItemText",
	PurchaseOrderByCustomer:     "PurchaseOrderByCustomer",
	Material:                    "Material",
	MaterialByCustomer:          "MaterialByCustomer",
	PricingDate:                 "PricingDate",
	BillingPlan:                 "BillingPlan",
	RequestedQuantity:           "RequestedQuantity",
	RequestedQuantityUnit:       "RequestedQuantityUnit",
	OrderQuantityUnit:           "OrderQuantityUnit",
	ConfdDelivQtyInOrderQtyUnit: "ConfdDelivQtyInOrderQtyUnit",
	ItemGrossWeight:             "ItemGrossWeight",
	ItemNetWeight:               "ItemNetWeight",
	ItemWeightUnit:              "ItemWeightUnit",
	ItemVolume:                  "ItemVolume",
	ItemVolumeUnit:              "ItemVolumeUnit",
	TransactionCurrency:         "TransactionCurrency",
	NetAmount:                   "NetAmount",
	MaterialGroup:               "MaterialGroup",
	MaterialPricingGroup:        "MaterialPricingGroup",
	BillingDocumentDate:         "BillingDocumentDate",
	Batch:                       "Batch",
	ProductionPlant:             "ProductionPlant",
	StorageLocation:             "StorageLocation",
	DeliveryGroup:               "DeliveryGroup",
	ShippingPoint:               "ShippingPoint",
	ShippingType:                "ShippingType",
	DeliveryPriority:            "DeliveryPriority",
	IncotermsClassification:     "IncotermsClassification",
	TaxAmount:                   "TaxAmount",
	ProductTaxClassification1:   "ProductTaxClassification1",
	MatlAccountAssignmentGroup:  "MatlAccountAssignmentGroup",
	CostAmount:                  "CostAmount",
	CustomerPaymentTerms:        "CustomerPaymentTerms",
	CustomerGroup:               "CustomerGroup",
	SalesDocumentRjcnReason:     "SalesDocumentRjcnReason",
	ItemBillingBlockReason:      "ItemBillingBlockReason",
	WBSElement:                  "WBSElement",
	ProfitCenter:                "ProfitCenter",
	AccountingExchangeRate:      "AccountingExchangeRate",
	ReferenceSDDocument:         "ReferenceSDDocument",
	ReferenceSDDocumentItem:     "ReferenceSDDocumentItem",
	SDProcessStatus:             "SDProcessStatus",
	DeliveryStatus:              "DeliveryStatus",
	OrderRelatedBillingStatus:   "OrderRelatedBillingStatus",
}

var SapSalesOrderHeaderDatumTableColumns = struct {
	SalesOrder                  string
	SalesOrderItem              string
	SalesOrderItemCategory      string
	SalesOrderItemText          string
	PurchaseOrderByCustomer     string
	Material                    string
	MaterialByCustomer          string
	PricingDate                 string
	BillingPlan                 string
	RequestedQuantity           string
	RequestedQuantityUnit       string
	OrderQuantityUnit           string
	ConfdDelivQtyInOrderQtyUnit string
	ItemGrossWeight             string
	ItemNetWeight               string
	ItemWeightUnit              string
	ItemVolume                  string
	ItemVolumeUnit              string
	TransactionCurrency         string
	NetAmount                   string
	MaterialGroup               string
	MaterialPricingGroup        string
	BillingDocumentDate         string
	Batch                       string
	ProductionPlant             string
	StorageLocation             string
	DeliveryGroup               string
	ShippingPoint               string
	ShippingType                string
	DeliveryPriority            string
	IncotermsClassification     string
	TaxAmount                   string
	ProductTaxClassification1   string
	MatlAccountAssignmentGroup  string
	CostAmount                  string
	CustomerPaymentTerms        string
	CustomerGroup               string
	SalesDocumentRjcnReason     string
	ItemBillingBlockReason      string
	WBSElement                  string
	ProfitCenter                string
	AccountingExchangeRate      string
	ReferenceSDDocument         string
	ReferenceSDDocumentItem     string
	SDProcessStatus             string
	DeliveryStatus              string
	OrderRelatedBillingStatus   string
}{
	SalesOrder:                  "sap_sales_order_header_data.SalesOrder",
	SalesOrderItem:              "sap_sales_order_header_data.SalesOrderItem",
	SalesOrderItemCategory:      "sap_sales_order_header_data.SalesOrderItemCategory",
	SalesOrderItemText:          "sap_sales_order_header_data.SalesOrderItemText",
	PurchaseOrderByCustomer:     "sap_sales_order_header_data.PurchaseOrderByCustomer",
	Material:                    "sap_sales_order_header_data.Material",
	MaterialByCustomer:          "sap_sales_order_header_data.MaterialByCustomer",
	PricingDate:                 "sap_sales_order_header_data.PricingDate",
	BillingPlan:                 "sap_sales_order_header_data.BillingPlan",
	RequestedQuantity:           "sap_sales_order_header_data.RequestedQuantity",
	RequestedQuantityUnit:       "sap_sales_order_header_data.RequestedQuantityUnit",
	OrderQuantityUnit:           "sap_sales_order_header_data.OrderQuantityUnit",
	ConfdDelivQtyInOrderQtyUnit: "sap_sales_order_header_data.ConfdDelivQtyInOrderQtyUnit",
	ItemGrossWeight:             "sap_sales_order_header_data.ItemGrossWeight",
	ItemNetWeight:               "sap_sales_order_header_data.ItemNetWeight",
	ItemWeightUnit:              "sap_sales_order_header_data.ItemWeightUnit",
	ItemVolume:                  "sap_sales_order_header_data.ItemVolume",
	ItemVolumeUnit:              "sap_sales_order_header_data.ItemVolumeUnit",
	TransactionCurrency:         "sap_sales_order_header_data.TransactionCurrency",
	NetAmount:                   "sap_sales_order_header_data.NetAmount",
	MaterialGroup:               "sap_sales_order_header_data.MaterialGroup",
	MaterialPricingGroup:        "sap_sales_order_header_data.MaterialPricingGroup",
	BillingDocumentDate:         "sap_sales_order_header_data.BillingDocumentDate",
	Batch:                       "sap_sales_order_header_data.Batch",
	ProductionPlant:             "sap_sales_order_header_data.ProductionPlant",
	StorageLocation:             "sap_sales_order_header_data.StorageLocation",
	DeliveryGroup:               "sap_sales_order_header_data.DeliveryGroup",
	ShippingPoint:               "sap_sales_order_header_data.ShippingPoint",
	ShippingType:                "sap_sales_order_header_data.ShippingType",
	DeliveryPriority:            "sap_sales_order_header_data.DeliveryPriority",
	IncotermsClassification:     "sap_sales_order_header_data.IncotermsClassification",
	TaxAmount:                   "sap_sales_order_header_data.TaxAmount",
	ProductTaxClassification1:   "sap_sales_order_header_data.ProductTaxClassification1",
	MatlAccountAssignmentGroup:  "sap_sales_order_header_data.MatlAccountAssignmentGroup",
	CostAmount:                  "sap_sales_order_header_data.CostAmount",
	CustomerPaymentTerms:        "sap_sales_order_header_data.CustomerPaymentTerms",
	CustomerGroup:               "sap_sales_order_header_data.CustomerGroup",
	SalesDocumentRjcnReason:     "sap_sales_order_header_data.SalesDocumentRjcnReason",
	ItemBillingBlockReason:      "sap_sales_order_header_data.ItemBillingBlockReason",
	WBSElement:                  "sap_sales_order_header_data.WBSElement",
	ProfitCenter:                "sap_sales_order_header_data.ProfitCenter",
	AccountingExchangeRate:      "sap_sales_order_header_data.AccountingExchangeRate",
	ReferenceSDDocument:         "sap_sales_order_header_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:     "sap_sales_order_header_data.ReferenceSDDocumentItem",
	SDProcessStatus:             "sap_sales_order_header_data.SDProcessStatus",
	DeliveryStatus:              "sap_sales_order_header_data.DeliveryStatus",
	OrderRelatedBillingStatus:   "sap_sales_order_header_data.OrderRelatedBillingStatus",
}

// Generated where

var SapSalesOrderHeaderDatumWhere = struct {
	SalesOrder                  whereHelperstring
	SalesOrderItem              whereHelpernull_String
	SalesOrderItemCategory      whereHelpernull_String
	SalesOrderItemText          whereHelpernull_String
	PurchaseOrderByCustomer     whereHelpernull_String
	Material                    whereHelpernull_String
	MaterialByCustomer          whereHelpernull_String
	PricingDate                 whereHelpernull_String
	BillingPlan                 whereHelpernull_String
	RequestedQuantity           whereHelpernull_String
	RequestedQuantityUnit       whereHelpernull_String
	OrderQuantityUnit           whereHelpernull_String
	ConfdDelivQtyInOrderQtyUnit whereHelpernull_String
	ItemGrossWeight             whereHelpernull_String
	ItemNetWeight               whereHelpernull_String
	ItemWeightUnit              whereHelpernull_String
	ItemVolume                  whereHelpernull_String
	ItemVolumeUnit              whereHelpernull_String
	TransactionCurrency         whereHelpernull_String
	NetAmount                   whereHelpernull_String
	MaterialGroup               whereHelpernull_String
	MaterialPricingGroup        whereHelpernull_String
	BillingDocumentDate         whereHelpernull_String
	Batch                       whereHelpernull_String
	ProductionPlant             whereHelpernull_String
	StorageLocation             whereHelpernull_String
	DeliveryGroup               whereHelpernull_String
	ShippingPoint               whereHelpernull_String
	ShippingType                whereHelpernull_String
	DeliveryPriority            whereHelpernull_String
	IncotermsClassification     whereHelpernull_String
	TaxAmount                   whereHelpernull_String
	ProductTaxClassification1   whereHelpernull_String
	MatlAccountAssignmentGroup  whereHelpernull_String
	CostAmount                  whereHelpernull_String
	CustomerPaymentTerms        whereHelpernull_String
	CustomerGroup               whereHelpernull_String
	SalesDocumentRjcnReason     whereHelpernull_String
	ItemBillingBlockReason      whereHelpernull_String
	WBSElement                  whereHelpernull_String
	ProfitCenter                whereHelpernull_String
	AccountingExchangeRate      whereHelpernull_String
	ReferenceSDDocument         whereHelpernull_String
	ReferenceSDDocumentItem     whereHelpernull_String
	SDProcessStatus             whereHelpernull_String
	DeliveryStatus              whereHelpernull_String
	OrderRelatedBillingStatus   whereHelpernull_String
}{
	SalesOrder:                  whereHelperstring{field: "`sap_sales_order_header_data`.`SalesOrder`"},
	SalesOrderItem:              whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOrderItem`"},
	SalesOrderItemCategory:      whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOrderItemCategory`"},
	SalesOrderItemText:          whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOrderItemText`"},
	PurchaseOrderByCustomer:     whereHelpernull_String{field: "`sap_sales_order_header_data`.`PurchaseOrderByCustomer`"},
	Material:                    whereHelpernull_String{field: "`sap_sales_order_header_data`.`Material`"},
	MaterialByCustomer:          whereHelpernull_String{field: "`sap_sales_order_header_data`.`MaterialByCustomer`"},
	PricingDate:                 whereHelpernull_String{field: "`sap_sales_order_header_data`.`PricingDate`"},
	BillingPlan:                 whereHelpernull_String{field: "`sap_sales_order_header_data`.`BillingPlan`"},
	RequestedQuantity:           whereHelpernull_String{field: "`sap_sales_order_header_data`.`RequestedQuantity`"},
	RequestedQuantityUnit:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`RequestedQuantityUnit`"},
	OrderQuantityUnit:           whereHelpernull_String{field: "`sap_sales_order_header_data`.`OrderQuantityUnit`"},
	ConfdDelivQtyInOrderQtyUnit: whereHelpernull_String{field: "`sap_sales_order_header_data`.`ConfdDelivQtyInOrderQtyUnit`"},
	ItemGrossWeight:             whereHelpernull_String{field: "`sap_sales_order_header_data`.`ItemGrossWeight`"},
	ItemNetWeight:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`ItemNetWeight`"},
	ItemWeightUnit:              whereHelpernull_String{field: "`sap_sales_order_header_data`.`ItemWeightUnit`"},
	ItemVolume:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`ItemVolume`"},
	ItemVolumeUnit:              whereHelpernull_String{field: "`sap_sales_order_header_data`.`ItemVolumeUnit`"},
	TransactionCurrency:         whereHelpernull_String{field: "`sap_sales_order_header_data`.`TransactionCurrency`"},
	NetAmount:                   whereHelpernull_String{field: "`sap_sales_order_header_data`.`NetAmount`"},
	MaterialGroup:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`MaterialGroup`"},
	MaterialPricingGroup:        whereHelpernull_String{field: "`sap_sales_order_header_data`.`MaterialPricingGroup`"},
	BillingDocumentDate:         whereHelpernull_String{field: "`sap_sales_order_header_data`.`BillingDocumentDate`"},
	Batch:                       whereHelpernull_String{field: "`sap_sales_order_header_data`.`Batch`"},
	ProductionPlant:             whereHelpernull_String{field: "`sap_sales_order_header_data`.`ProductionPlant`"},
	StorageLocation:             whereHelpernull_String{field: "`sap_sales_order_header_data`.`StorageLocation`"},
	DeliveryGroup:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`DeliveryGroup`"},
	ShippingPoint:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`ShippingPoint`"},
	ShippingType:                whereHelpernull_String{field: "`sap_sales_order_header_data`.`ShippingType`"},
	DeliveryPriority:            whereHelpernull_String{field: "`sap_sales_order_header_data`.`DeliveryPriority`"},
	IncotermsClassification:     whereHelpernull_String{field: "`sap_sales_order_header_data`.`IncotermsClassification`"},
	TaxAmount:                   whereHelpernull_String{field: "`sap_sales_order_header_data`.`TaxAmount`"},
	ProductTaxClassification1:   whereHelpernull_String{field: "`sap_sales_order_header_data`.`ProductTaxClassification1`"},
	MatlAccountAssignmentGroup:  whereHelpernull_String{field: "`sap_sales_order_header_data`.`MatlAccountAssignmentGroup`"},
	CostAmount:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`CostAmount`"},
	CustomerPaymentTerms:        whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerPaymentTerms`"},
	CustomerGroup:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerGroup`"},
	SalesDocumentRjcnReason:     whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesDocumentRjcnReason`"},
	ItemBillingBlockReason:      whereHelpernull_String{field: "`sap_sales_order_header_data`.`ItemBillingBlockReason`"},
	WBSElement:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`WBSElement`"},
	ProfitCenter:                whereHelpernull_String{field: "`sap_sales_order_header_data`.`ProfitCenter`"},
	AccountingExchangeRate:      whereHelpernull_String{field: "`sap_sales_order_header_data`.`AccountingExchangeRate`"},
	ReferenceSDDocument:         whereHelpernull_String{field: "`sap_sales_order_header_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:     whereHelpernull_String{field: "`sap_sales_order_header_data`.`ReferenceSDDocumentItem`"},
	SDProcessStatus:             whereHelpernull_String{field: "`sap_sales_order_header_data`.`SDProcessStatus`"},
	DeliveryStatus:              whereHelpernull_String{field: "`sap_sales_order_header_data`.`DeliveryStatus`"},
	OrderRelatedBillingStatus:   whereHelpernull_String{field: "`sap_sales_order_header_data`.`OrderRelatedBillingStatus`"},
}

// SapSalesOrderHeaderDatumRels is where relationship names are stored.
var SapSalesOrderHeaderDatumRels = struct {
	SalesOrderSapSalesOrderHeaderPartnerData      string
	SalesOrderSapSalesOrderItemData               string
	SalesOrderSapSalesOrderItemPricingElementData string
	SalesOrderSapSalesOrderItemScheduleLineData   string
}{
	SalesOrderSapSalesOrderHeaderPartnerData:      "SalesOrderSapSalesOrderHeaderPartnerData",
	SalesOrderSapSalesOrderItemData:               "SalesOrderSapSalesOrderItemData",
	SalesOrderSapSalesOrderItemPricingElementData: "SalesOrderSapSalesOrderItemPricingElementData",
	SalesOrderSapSalesOrderItemScheduleLineData:   "SalesOrderSapSalesOrderItemScheduleLineData",
}

// sapSalesOrderHeaderDatumR is where relationships are stored.
type sapSalesOrderHeaderDatumR struct {
	SalesOrderSapSalesOrderHeaderPartnerData      SapSalesOrderHeaderPartnerDatumSlice      `boil:"SalesOrderSapSalesOrderHeaderPartnerData" json:"SalesOrderSapSalesOrderHeaderPartnerData" toml:"SalesOrderSapSalesOrderHeaderPartnerData" yaml:"SalesOrderSapSalesOrderHeaderPartnerData"`
	SalesOrderSapSalesOrderItemData               SapSalesOrderItemDatumSlice               `boil:"SalesOrderSapSalesOrderItemData" json:"SalesOrderSapSalesOrderItemData" toml:"SalesOrderSapSalesOrderItemData" yaml:"SalesOrderSapSalesOrderItemData"`
	SalesOrderSapSalesOrderItemPricingElementData SapSalesOrderItemPricingElementDatumSlice `boil:"SalesOrderSapSalesOrderItemPricingElementData" json:"SalesOrderSapSalesOrderItemPricingElementData" toml:"SalesOrderSapSalesOrderItemPricingElementData" yaml:"SalesOrderSapSalesOrderItemPricingElementData"`
	SalesOrderSapSalesOrderItemScheduleLineData   SapSalesOrderItemScheduleLineDatumSlice   `boil:"SalesOrderSapSalesOrderItemScheduleLineData" json:"SalesOrderSapSalesOrderItemScheduleLineData" toml:"SalesOrderSapSalesOrderItemScheduleLineData" yaml:"SalesOrderSapSalesOrderItemScheduleLineData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesOrderHeaderDatumR) NewStruct() *sapSalesOrderHeaderDatumR {
	return &sapSalesOrderHeaderDatumR{}
}

// sapSalesOrderHeaderDatumL is where Load methods for each relationship are stored.
type sapSalesOrderHeaderDatumL struct{}

var (
	sapSalesOrderHeaderDatumAllColumns            = []string{"SalesOrder", "SalesOrderItem", "SalesOrderItemCategory", "SalesOrderItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "BillingPlan", "RequestedQuantity", "RequestedQuantityUnit", "OrderQuantityUnit", "ConfdDelivQtyInOrderQtyUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "BillingDocumentDate", "Batch", "ProductionPlant", "StorageLocation", "DeliveryGroup", "ShippingPoint", "ShippingType", "DeliveryPriority", "IncotermsClassification", "TaxAmount", "ProductTaxClassification1", "MatlAccountAssignmentGroup", "CostAmount", "CustomerPaymentTerms", "CustomerGroup", "SalesDocumentRjcnReason", "ItemBillingBlockReason", "WBSElement", "ProfitCenter", "AccountingExchangeRate", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "DeliveryStatus", "OrderRelatedBillingStatus"}
	sapSalesOrderHeaderDatumColumnsWithoutDefault = []string{"SalesOrder", "SalesOrderItem", "SalesOrderItemCategory", "SalesOrderItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "BillingPlan", "RequestedQuantity", "RequestedQuantityUnit", "OrderQuantityUnit", "ConfdDelivQtyInOrderQtyUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "BillingDocumentDate", "Batch", "ProductionPlant", "StorageLocation", "DeliveryGroup", "ShippingPoint", "ShippingType", "DeliveryPriority", "IncotermsClassification", "TaxAmount", "ProductTaxClassification1", "MatlAccountAssignmentGroup", "CostAmount", "CustomerPaymentTerms", "CustomerGroup", "SalesDocumentRjcnReason", "ItemBillingBlockReason", "WBSElement", "ProfitCenter", "AccountingExchangeRate", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "DeliveryStatus", "OrderRelatedBillingStatus"}
	sapSalesOrderHeaderDatumColumnsWithDefault    = []string{}
	sapSalesOrderHeaderDatumPrimaryKeyColumns     = []string{"SalesOrder"}
)

type (
	// SapSalesOrderHeaderDatumSlice is an alias for a slice of pointers to SapSalesOrderHeaderDatum.
	// This should almost always be used instead of []SapSalesOrderHeaderDatum.
	SapSalesOrderHeaderDatumSlice []*SapSalesOrderHeaderDatum
	// SapSalesOrderHeaderDatumHook is the signature for custom SapSalesOrderHeaderDatum hook methods
	SapSalesOrderHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapSalesOrderHeaderDatum) error

	sapSalesOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesOrderHeaderDatumType                 = reflect.TypeOf(&SapSalesOrderHeaderDatum{})
	sapSalesOrderHeaderDatumMapping              = queries.MakeStructMapping(sapSalesOrderHeaderDatumType)
	sapSalesOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, sapSalesOrderHeaderDatumPrimaryKeyColumns)
	sapSalesOrderHeaderDatumInsertCacheMut       sync.RWMutex
	sapSalesOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	sapSalesOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	sapSalesOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapSalesOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	sapSalesOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesOrderHeaderDatumBeforeInsertHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumBeforeUpdateHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumBeforeDeleteHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumBeforeUpsertHooks []SapSalesOrderHeaderDatumHook

var sapSalesOrderHeaderDatumAfterInsertHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterSelectHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterUpdateHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterDeleteHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterUpsertHooks []SapSalesOrderHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesOrderHeaderDatumHook registers your hook function for all future operations.
func AddSapSalesOrderHeaderDatumHook(hookPoint boil.HookPoint, sapSalesOrderHeaderDatumHook SapSalesOrderHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapSalesOrderHeaderDatumBeforeInsertHooks = append(sapSalesOrderHeaderDatumBeforeInsertHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesOrderHeaderDatumBeforeUpdateHooks = append(sapSalesOrderHeaderDatumBeforeUpdateHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesOrderHeaderDatumBeforeDeleteHooks = append(sapSalesOrderHeaderDatumBeforeDeleteHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesOrderHeaderDatumBeforeUpsertHooks = append(sapSalesOrderHeaderDatumBeforeUpsertHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterInsertHook:
		sapSalesOrderHeaderDatumAfterInsertHooks = append(sapSalesOrderHeaderDatumAfterInsertHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterSelectHook:
		sapSalesOrderHeaderDatumAfterSelectHooks = append(sapSalesOrderHeaderDatumAfterSelectHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapSalesOrderHeaderDatumAfterUpdateHooks = append(sapSalesOrderHeaderDatumAfterUpdateHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapSalesOrderHeaderDatumAfterDeleteHooks = append(sapSalesOrderHeaderDatumAfterDeleteHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapSalesOrderHeaderDatumAfterUpsertHooks = append(sapSalesOrderHeaderDatumAfterUpsertHooks, sapSalesOrderHeaderDatumHook)
	}
}

// One returns a single sapSalesOrderHeaderDatum record from the query.
func (q sapSalesOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesOrderHeaderDatum, error) {
	o := &SapSalesOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_order_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesOrderHeaderDatum records from the query.
func (q sapSalesOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesOrderHeaderDatumSlice, error) {
	var o []*SapSalesOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesOrderHeaderDatum slice")
	}

	if len(sapSalesOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesOrderHeaderDatum records in the query.
func (q sapSalesOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_order_header_data exists")
	}

	return count > 0, nil
}

// SalesOrderSapSalesOrderHeaderPartnerData retrieves all the sap_sales_order_header_partner_datum's SapSalesOrderHeaderPartnerData with an executor via SalesOrder column.
func (o *SapSalesOrderHeaderDatum) SalesOrderSapSalesOrderHeaderPartnerData(mods ...qm.QueryMod) sapSalesOrderHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_order_header_partner_data`.`SalesOrder`=?", o.SalesOrder),
	)

	query := SapSalesOrderHeaderPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_order_header_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_order_header_partner_data`.*"})
	}

	return query
}

// SalesOrderSapSalesOrderItemData retrieves all the sap_sales_order_item_datum's SapSalesOrderItemData with an executor via SalesOrder column.
func (o *SapSalesOrderHeaderDatum) SalesOrderSapSalesOrderItemData(mods ...qm.QueryMod) sapSalesOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_order_item_data`.`SalesOrder`=?", o.SalesOrder),
	)

	query := SapSalesOrderItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_order_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_order_item_data`.*"})
	}

	return query
}

// SalesOrderSapSalesOrderItemPricingElementData retrieves all the sap_sales_order_item_pricing_element_datum's SapSalesOrderItemPricingElementData with an executor via SalesOrder column.
func (o *SapSalesOrderHeaderDatum) SalesOrderSapSalesOrderItemPricingElementData(mods ...qm.QueryMod) sapSalesOrderItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_order_item_pricing_element_data`.`SalesOrder`=?", o.SalesOrder),
	)

	query := SapSalesOrderItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_order_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_order_item_pricing_element_data`.*"})
	}

	return query
}

// SalesOrderSapSalesOrderItemScheduleLineData retrieves all the sap_sales_order_item_schedule_line_datum's SapSalesOrderItemScheduleLineData with an executor via SalesOrder column.
func (o *SapSalesOrderHeaderDatum) SalesOrderSapSalesOrderItemScheduleLineData(mods ...qm.QueryMod) sapSalesOrderItemScheduleLineDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_order_item_schedule_line_data`.`SalesOrder`=?", o.SalesOrder),
	)

	query := SapSalesOrderItemScheduleLineData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_order_item_schedule_line_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_order_item_schedule_line_data`.*"})
	}

	return query
}

// LoadSalesOrderSapSalesOrderHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesOrderHeaderDatumL) LoadSalesOrderSapSalesOrderHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderHeaderDatum
	var object *SapSalesOrderHeaderDatum

	if singular {
		object = maybeSapSalesOrderHeaderDatum.(*SapSalesOrderHeaderDatum)
	} else {
		slice = *maybeSapSalesOrderHeaderDatum.(*[]*SapSalesOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderHeaderDatumR{}
		}
		args = append(args, object.SalesOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_header_partner_data`),
		qm.WhereIn(`sap_sales_order_header_partner_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_order_header_partner_data")
	}

	var resultSlice []*SapSalesOrderHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_order_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_order_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_header_partner_data")
	}

	if len(sapSalesOrderHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesOrderSapSalesOrderHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesOrderHeaderPartnerDatumR{}
			}
			foreign.R.SalesOrderSapSalesOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderHeaderPartnerData = append(local.R.SalesOrderSapSalesOrderHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesOrderHeaderPartnerDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesOrderSapSalesOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesOrderHeaderDatumL) LoadSalesOrderSapSalesOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderHeaderDatum
	var object *SapSalesOrderHeaderDatum

	if singular {
		object = maybeSapSalesOrderHeaderDatum.(*SapSalesOrderHeaderDatum)
	} else {
		slice = *maybeSapSalesOrderHeaderDatum.(*[]*SapSalesOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderHeaderDatumR{}
		}
		args = append(args, object.SalesOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_item_data`),
		qm.WhereIn(`sap_sales_order_item_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_order_item_data")
	}

	var resultSlice []*SapSalesOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_item_data")
	}

	if len(sapSalesOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesOrderSapSalesOrderItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesOrderItemDatumR{}
			}
			foreign.R.SalesOrderSapSalesOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderItemData = append(local.R.SalesOrderSapSalesOrderItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesOrderItemDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesOrderSapSalesOrderItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesOrderHeaderDatumL) LoadSalesOrderSapSalesOrderItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderHeaderDatum
	var object *SapSalesOrderHeaderDatum

	if singular {
		object = maybeSapSalesOrderHeaderDatum.(*SapSalesOrderHeaderDatum)
	} else {
		slice = *maybeSapSalesOrderHeaderDatum.(*[]*SapSalesOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderHeaderDatumR{}
		}
		args = append(args, object.SalesOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_item_pricing_element_data`),
		qm.WhereIn(`sap_sales_order_item_pricing_element_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_order_item_pricing_element_data")
	}

	var resultSlice []*SapSalesOrderItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_order_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_order_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_item_pricing_element_data")
	}

	if len(sapSalesOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesOrderSapSalesOrderItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesOrderItemPricingElementDatumR{}
			}
			foreign.R.SalesOrderSapSalesOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderItemPricingElementData = append(local.R.SalesOrderSapSalesOrderItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesOrderItemPricingElementDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesOrderSapSalesOrderItemScheduleLineData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesOrderHeaderDatumL) LoadSalesOrderSapSalesOrderItemScheduleLineData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderHeaderDatum
	var object *SapSalesOrderHeaderDatum

	if singular {
		object = maybeSapSalesOrderHeaderDatum.(*SapSalesOrderHeaderDatum)
	} else {
		slice = *maybeSapSalesOrderHeaderDatum.(*[]*SapSalesOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderHeaderDatumR{}
		}
		args = append(args, object.SalesOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_item_schedule_line_data`),
		qm.WhereIn(`sap_sales_order_item_schedule_line_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_order_item_schedule_line_data")
	}

	var resultSlice []*SapSalesOrderItemScheduleLineDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_order_item_schedule_line_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_order_item_schedule_line_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_item_schedule_line_data")
	}

	if len(sapSalesOrderItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesOrderSapSalesOrderItemScheduleLineData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesOrderItemScheduleLineDatumR{}
			}
			foreign.R.SalesOrderSapSalesOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderItemScheduleLineData = append(local.R.SalesOrderSapSalesOrderItemScheduleLineData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesOrderItemScheduleLineDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddSalesOrderSapSalesOrderHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_sales_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesOrderSapSalesOrderHeaderPartnerData.
// Sets related.R.SalesOrderSapSalesOrderHeaderDatum appropriately.
func (o *SapSalesOrderHeaderDatum) AddSalesOrderSapSalesOrderHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesOrderHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrder = o.SalesOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_order_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
				strmangle.WhereClause("`", "`", 0, sapSalesOrderHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesOrder, rel.SalesOrder, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrder = o.SalesOrder
		}
	}

	if o.R == nil {
		o.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderHeaderPartnerData: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderHeaderPartnerData = append(o.R.SalesOrderSapSalesOrderHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesOrderHeaderPartnerDatumR{
				SalesOrderSapSalesOrderHeaderDatum: o,
			}
		} else {
			rel.R.SalesOrderSapSalesOrderHeaderDatum = o
		}
	}
	return nil
}

// AddSalesOrderSapSalesOrderItemData adds the given related objects to the existing relationships
// of the sap_sales_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesOrderSapSalesOrderItemData.
// Sets related.R.SalesOrderSapSalesOrderHeaderDatum appropriately.
func (o *SapSalesOrderHeaderDatum) AddSalesOrderSapSalesOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrder = o.SalesOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
				strmangle.WhereClause("`", "`", 0, sapSalesOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesOrder, rel.SalesOrder, rel.SalesOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrder = o.SalesOrder
		}
	}

	if o.R == nil {
		o.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderItemData: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderItemData = append(o.R.SalesOrderSapSalesOrderItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesOrderItemDatumR{
				SalesOrderSapSalesOrderHeaderDatum: o,
			}
		} else {
			rel.R.SalesOrderSapSalesOrderHeaderDatum = o
		}
	}
	return nil
}

// AddSalesOrderSapSalesOrderItemPricingElementData adds the given related objects to the existing relationships
// of the sap_sales_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesOrderSapSalesOrderItemPricingElementData.
// Sets related.R.SalesOrderSapSalesOrderHeaderDatum appropriately.
func (o *SapSalesOrderHeaderDatum) AddSalesOrderSapSalesOrderItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesOrderItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrder = o.SalesOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_order_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
				strmangle.WhereClause("`", "`", 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesOrder, rel.SalesOrder, rel.SalesOrderItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrder = o.SalesOrder
		}
	}

	if o.R == nil {
		o.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderItemPricingElementData: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderItemPricingElementData = append(o.R.SalesOrderSapSalesOrderItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesOrderItemPricingElementDatumR{
				SalesOrderSapSalesOrderHeaderDatum: o,
			}
		} else {
			rel.R.SalesOrderSapSalesOrderHeaderDatum = o
		}
	}
	return nil
}

// AddSalesOrderSapSalesOrderItemScheduleLineData adds the given related objects to the existing relationships
// of the sap_sales_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesOrderSapSalesOrderItemScheduleLineData.
// Sets related.R.SalesOrderSapSalesOrderHeaderDatum appropriately.
func (o *SapSalesOrderHeaderDatum) AddSalesOrderSapSalesOrderItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesOrderItemScheduleLineDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrder = o.SalesOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_order_item_schedule_line_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
				strmangle.WhereClause("`", "`", 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesOrder, rel.SalesOrder, rel.SalesOrderItem, rel.ScheduleLine}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrder = o.SalesOrder
		}
	}

	if o.R == nil {
		o.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderItemScheduleLineData: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderItemScheduleLineData = append(o.R.SalesOrderSapSalesOrderItemScheduleLineData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesOrderItemScheduleLineDatumR{
				SalesOrderSapSalesOrderHeaderDatum: o,
			}
		} else {
			rel.R.SalesOrderSapSalesOrderHeaderDatum = o
		}
	}
	return nil
}

// SapSalesOrderHeaderData retrieves all the records using an executor.
func SapSalesOrderHeaderData(mods ...qm.QueryMod) sapSalesOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_sales_order_header_data`"))
	return sapSalesOrderHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapSalesOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, salesOrder string, selectCols ...string) (*SapSalesOrderHeaderDatum, error) {
	sapSalesOrderHeaderDatumObj := &SapSalesOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_order_header_data` where `SalesOrder`=?", sel,
	)

	q := queries.Raw(query, salesOrder)

	err := q.Bind(ctx, exec, sapSalesOrderHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_order_header_data")
	}

	if err = sapSalesOrderHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesOrderHeaderDatumObj, err
	}

	return sapSalesOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapSalesOrderHeaderDatumInsertCache[key]
	sapSalesOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumColumnsWithDefault,
			sapSalesOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderHeaderDatumInsertCacheMut.Lock()
		sapSalesOrderHeaderDatumInsertCache[key] = cache
		sapSalesOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesOrderHeaderDatumUpdateCache[key]
	sapSalesOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, append(wl, sapSalesOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_order_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_order_header_data")
	}

	if !cached {
		sapSalesOrderHeaderDatumUpdateCacheMut.Lock()
		sapSalesOrderHeaderDatumUpdateCache[key] = cache
		sapSalesOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_order_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesOrderHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesOrderHeaderDatumUniqueColumns = []string{
	"SalesOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesOrderHeaderDatumUpsertCache[key]
	sapSalesOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumColumnsWithDefault,
			sapSalesOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderHeaderDatumUpsertCacheMut.Lock()
		sapSalesOrderHeaderDatumUpsertCache[key] = cache
		sapSalesOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesOrderHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_order_header_data` WHERE `SalesOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_order_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesOrderHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_header_data")
	}

	if len(sapSalesOrderHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesOrderHeaderDatum(ctx, exec, o.SalesOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_order_header_data`.* FROM `sap_sales_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesOrderHeaderDatumExists checks if the SapSalesOrderHeaderDatum row exists.
func SapSalesOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, salesOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_order_header_data` where `SalesOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesOrder)
	}
	row := exec.QueryRowContext(ctx, sql, salesOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_order_header_data exists")
	}

	return exists, nil
}
