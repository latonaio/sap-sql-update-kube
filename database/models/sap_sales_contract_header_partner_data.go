// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesContractHeaderPartnerDatum is an object representing the database table.
type SapSalesContractHeaderPartnerDatum struct {
	SalesContract   string      `boil:"SalesContract" json:"SalesContract" toml:"SalesContract" yaml:"SalesContract"`
	PartnerFunction string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	Customer        null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	Supplier        null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`

	R *sapSalesContractHeaderPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesContractHeaderPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesContractHeaderPartnerDatumColumns = struct {
	SalesContract   string
	PartnerFunction string
	Customer        string
	Supplier        string
}{
	SalesContract:   "SalesContract",
	PartnerFunction: "PartnerFunction",
	Customer:        "Customer",
	Supplier:        "Supplier",
}

var SapSalesContractHeaderPartnerDatumTableColumns = struct {
	SalesContract   string
	PartnerFunction string
	Customer        string
	Supplier        string
}{
	SalesContract:   "sap_sales_contract_header_partner_data.SalesContract",
	PartnerFunction: "sap_sales_contract_header_partner_data.PartnerFunction",
	Customer:        "sap_sales_contract_header_partner_data.Customer",
	Supplier:        "sap_sales_contract_header_partner_data.Supplier",
}

// Generated where

var SapSalesContractHeaderPartnerDatumWhere = struct {
	SalesContract   whereHelperstring
	PartnerFunction whereHelperstring
	Customer        whereHelpernull_String
	Supplier        whereHelpernull_String
}{
	SalesContract:   whereHelperstring{field: "`sap_sales_contract_header_partner_data`.`SalesContract`"},
	PartnerFunction: whereHelperstring{field: "`sap_sales_contract_header_partner_data`.`PartnerFunction`"},
	Customer:        whereHelpernull_String{field: "`sap_sales_contract_header_partner_data`.`Customer`"},
	Supplier:        whereHelpernull_String{field: "`sap_sales_contract_header_partner_data`.`Supplier`"},
}

// SapSalesContractHeaderPartnerDatumRels is where relationship names are stored.
var SapSalesContractHeaderPartnerDatumRels = struct {
	SalesContractSapSalesContractHeaderDatum string
}{
	SalesContractSapSalesContractHeaderDatum: "SalesContractSapSalesContractHeaderDatum",
}

// sapSalesContractHeaderPartnerDatumR is where relationships are stored.
type sapSalesContractHeaderPartnerDatumR struct {
	SalesContractSapSalesContractHeaderDatum *SapSalesContractHeaderDatum `boil:"SalesContractSapSalesContractHeaderDatum" json:"SalesContractSapSalesContractHeaderDatum" toml:"SalesContractSapSalesContractHeaderDatum" yaml:"SalesContractSapSalesContractHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesContractHeaderPartnerDatumR) NewStruct() *sapSalesContractHeaderPartnerDatumR {
	return &sapSalesContractHeaderPartnerDatumR{}
}

// sapSalesContractHeaderPartnerDatumL is where Load methods for each relationship are stored.
type sapSalesContractHeaderPartnerDatumL struct{}

var (
	sapSalesContractHeaderPartnerDatumAllColumns            = []string{"SalesContract", "PartnerFunction", "Customer", "Supplier"}
	sapSalesContractHeaderPartnerDatumColumnsWithoutDefault = []string{"SalesContract", "PartnerFunction", "Customer", "Supplier"}
	sapSalesContractHeaderPartnerDatumColumnsWithDefault    = []string{}
	sapSalesContractHeaderPartnerDatumPrimaryKeyColumns     = []string{"SalesContract", "PartnerFunction"}
)

type (
	// SapSalesContractHeaderPartnerDatumSlice is an alias for a slice of pointers to SapSalesContractHeaderPartnerDatum.
	// This should almost always be used instead of []SapSalesContractHeaderPartnerDatum.
	SapSalesContractHeaderPartnerDatumSlice []*SapSalesContractHeaderPartnerDatum
	// SapSalesContractHeaderPartnerDatumHook is the signature for custom SapSalesContractHeaderPartnerDatum hook methods
	SapSalesContractHeaderPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapSalesContractHeaderPartnerDatum) error

	sapSalesContractHeaderPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesContractHeaderPartnerDatumType                 = reflect.TypeOf(&SapSalesContractHeaderPartnerDatum{})
	sapSalesContractHeaderPartnerDatumMapping              = queries.MakeStructMapping(sapSalesContractHeaderPartnerDatumType)
	sapSalesContractHeaderPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns)
	sapSalesContractHeaderPartnerDatumInsertCacheMut       sync.RWMutex
	sapSalesContractHeaderPartnerDatumInsertCache          = make(map[string]insertCache)
	sapSalesContractHeaderPartnerDatumUpdateCacheMut       sync.RWMutex
	sapSalesContractHeaderPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapSalesContractHeaderPartnerDatumUpsertCacheMut       sync.RWMutex
	sapSalesContractHeaderPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesContractHeaderPartnerDatumBeforeInsertHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumBeforeUpdateHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumBeforeDeleteHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumBeforeUpsertHooks []SapSalesContractHeaderPartnerDatumHook

var sapSalesContractHeaderPartnerDatumAfterInsertHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumAfterSelectHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumAfterUpdateHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumAfterDeleteHooks []SapSalesContractHeaderPartnerDatumHook
var sapSalesContractHeaderPartnerDatumAfterUpsertHooks []SapSalesContractHeaderPartnerDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesContractHeaderPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesContractHeaderPartnerDatumHook registers your hook function for all future operations.
func AddSapSalesContractHeaderPartnerDatumHook(hookPoint boil.HookPoint, sapSalesContractHeaderPartnerDatumHook SapSalesContractHeaderPartnerDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapSalesContractHeaderPartnerDatumBeforeInsertHooks = append(sapSalesContractHeaderPartnerDatumBeforeInsertHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesContractHeaderPartnerDatumBeforeUpdateHooks = append(sapSalesContractHeaderPartnerDatumBeforeUpdateHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesContractHeaderPartnerDatumBeforeDeleteHooks = append(sapSalesContractHeaderPartnerDatumBeforeDeleteHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesContractHeaderPartnerDatumBeforeUpsertHooks = append(sapSalesContractHeaderPartnerDatumBeforeUpsertHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.AfterInsertHook:
		sapSalesContractHeaderPartnerDatumAfterInsertHooks = append(sapSalesContractHeaderPartnerDatumAfterInsertHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.AfterSelectHook:
		sapSalesContractHeaderPartnerDatumAfterSelectHooks = append(sapSalesContractHeaderPartnerDatumAfterSelectHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapSalesContractHeaderPartnerDatumAfterUpdateHooks = append(sapSalesContractHeaderPartnerDatumAfterUpdateHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapSalesContractHeaderPartnerDatumAfterDeleteHooks = append(sapSalesContractHeaderPartnerDatumAfterDeleteHooks, sapSalesContractHeaderPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapSalesContractHeaderPartnerDatumAfterUpsertHooks = append(sapSalesContractHeaderPartnerDatumAfterUpsertHooks, sapSalesContractHeaderPartnerDatumHook)
	}
}

// One returns a single sapSalesContractHeaderPartnerDatum record from the query.
func (q sapSalesContractHeaderPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesContractHeaderPartnerDatum, error) {
	o := &SapSalesContractHeaderPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_contract_header_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesContractHeaderPartnerDatum records from the query.
func (q sapSalesContractHeaderPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesContractHeaderPartnerDatumSlice, error) {
	var o []*SapSalesContractHeaderPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesContractHeaderPartnerDatum slice")
	}

	if len(sapSalesContractHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesContractHeaderPartnerDatum records in the query.
func (q sapSalesContractHeaderPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_contract_header_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesContractHeaderPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_contract_header_partner_data exists")
	}

	return count > 0, nil
}

// SalesContractSapSalesContractHeaderDatum pointed to by the foreign key.
func (o *SapSalesContractHeaderPartnerDatum) SalesContractSapSalesContractHeaderDatum(mods ...qm.QueryMod) sapSalesContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesContract` = ?", o.SalesContract),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesContractHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_contract_header_data`")

	return query
}

// LoadSalesContractSapSalesContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesContractHeaderPartnerDatumL) LoadSalesContractSapSalesContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesContractHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesContractHeaderPartnerDatum
	var object *SapSalesContractHeaderPartnerDatum

	if singular {
		object = maybeSapSalesContractHeaderPartnerDatum.(*SapSalesContractHeaderPartnerDatum)
	} else {
		slice = *maybeSapSalesContractHeaderPartnerDatum.(*[]*SapSalesContractHeaderPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesContractHeaderPartnerDatumR{}
		}
		args = append(args, object.SalesContract)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesContractHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesContract {
					continue Outer
				}
			}

			args = append(args, obj.SalesContract)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_contract_header_data`),
		qm.WhereIn(`sap_sales_contract_header_data.SalesContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesContractHeaderDatum")
	}

	var resultSlice []*SapSalesContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_contract_header_data")
	}

	if len(sapSalesContractHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesContractSapSalesContractHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesContractHeaderDatumR{}
		}
		foreign.R.SalesContractSapSalesContractHeaderPartnerData = append(foreign.R.SalesContractSapSalesContractHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesContract == foreign.SalesContract {
				local.R.SalesContractSapSalesContractHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesContractHeaderDatumR{}
				}
				foreign.R.SalesContractSapSalesContractHeaderPartnerData = append(foreign.R.SalesContractSapSalesContractHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesContractSapSalesContractHeaderDatum of the sapSalesContractHeaderPartnerDatum to the related item.
// Sets o.R.SalesContractSapSalesContractHeaderDatum to related.
// Adds o to related.R.SalesContractSapSalesContractHeaderPartnerData.
func (o *SapSalesContractHeaderPartnerDatum) SetSalesContractSapSalesContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_contract_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesContract"}),
		strmangle.WhereClause("`", "`", 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesContract, o.SalesContract, o.PartnerFunction}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesContract = related.SalesContract
	if o.R == nil {
		o.R = &sapSalesContractHeaderPartnerDatumR{
			SalesContractSapSalesContractHeaderDatum: related,
		}
	} else {
		o.R.SalesContractSapSalesContractHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesContractHeaderDatumR{
			SalesContractSapSalesContractHeaderPartnerData: SapSalesContractHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.SalesContractSapSalesContractHeaderPartnerData = append(related.R.SalesContractSapSalesContractHeaderPartnerData, o)
	}

	return nil
}

// SapSalesContractHeaderPartnerData retrieves all the records using an executor.
func SapSalesContractHeaderPartnerData(mods ...qm.QueryMod) sapSalesContractHeaderPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_sales_contract_header_partner_data`"))
	return sapSalesContractHeaderPartnerDatumQuery{NewQuery(mods...)}
}

// FindSapSalesContractHeaderPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesContractHeaderPartnerDatum(ctx context.Context, exec boil.ContextExecutor, salesContract string, partnerFunction string, selectCols ...string) (*SapSalesContractHeaderPartnerDatum, error) {
	sapSalesContractHeaderPartnerDatumObj := &SapSalesContractHeaderPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_contract_header_partner_data` where `SalesContract`=? AND `PartnerFunction`=?", sel,
	)

	q := queries.Raw(query, salesContract, partnerFunction)

	err := q.Bind(ctx, exec, sapSalesContractHeaderPartnerDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_contract_header_partner_data")
	}

	if err = sapSalesContractHeaderPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesContractHeaderPartnerDatumObj, err
	}

	return sapSalesContractHeaderPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesContractHeaderPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_contract_header_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesContractHeaderPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesContractHeaderPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapSalesContractHeaderPartnerDatumInsertCache[key]
	sapSalesContractHeaderPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesContractHeaderPartnerDatumAllColumns,
			sapSalesContractHeaderPartnerDatumColumnsWithDefault,
			sapSalesContractHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_contract_header_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_contract_header_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_contract_header_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_contract_header_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesContract,
		o.PartnerFunction,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_contract_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesContractHeaderPartnerDatumInsertCacheMut.Lock()
		sapSalesContractHeaderPartnerDatumInsertCache[key] = cache
		sapSalesContractHeaderPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesContractHeaderPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesContractHeaderPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesContractHeaderPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesContractHeaderPartnerDatumUpdateCache[key]
	sapSalesContractHeaderPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesContractHeaderPartnerDatumAllColumns,
			sapSalesContractHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_contract_header_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_contract_header_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, append(wl, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_contract_header_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_contract_header_partner_data")
	}

	if !cached {
		sapSalesContractHeaderPartnerDatumUpdateCacheMut.Lock()
		sapSalesContractHeaderPartnerDatumUpdateCache[key] = cache
		sapSalesContractHeaderPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesContractHeaderPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_contract_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_contract_header_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesContractHeaderPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_contract_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesContractHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesContractHeaderPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesContractHeaderPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesContractHeaderPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_contract_header_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesContractHeaderPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesContractHeaderPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesContractHeaderPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesContractHeaderPartnerDatumUpsertCache[key]
	sapSalesContractHeaderPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesContractHeaderPartnerDatumAllColumns,
			sapSalesContractHeaderPartnerDatumColumnsWithDefault,
			sapSalesContractHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapSalesContractHeaderPartnerDatumAllColumns,
			sapSalesContractHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_contract_header_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_contract_header_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_contract_header_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_contract_header_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesContractHeaderPartnerDatumType, sapSalesContractHeaderPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_contract_header_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_contract_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesContractHeaderPartnerDatumUpsertCacheMut.Lock()
		sapSalesContractHeaderPartnerDatumUpsertCache[key] = cache
		sapSalesContractHeaderPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesContractHeaderPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesContractHeaderPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesContractHeaderPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesContractHeaderPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_contract_header_partner_data` WHERE `SalesContract`=? AND `PartnerFunction`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_contract_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_contract_header_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesContractHeaderPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesContractHeaderPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_contract_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_contract_header_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesContractHeaderPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesContractHeaderPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_contract_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesContractHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_contract_header_partner_data")
	}

	if len(sapSalesContractHeaderPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesContractHeaderPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesContractHeaderPartnerDatum(ctx, exec, o.SalesContract, o.PartnerFunction)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesContractHeaderPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesContractHeaderPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_contract_header_partner_data`.* FROM `sap_sales_contract_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesContractHeaderPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesContractHeaderPartnerDatumExists checks if the SapSalesContractHeaderPartnerDatum row exists.
func SapSalesContractHeaderPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, salesContract string, partnerFunction string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_contract_header_partner_data` where `SalesContract`=? AND `PartnerFunction`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesContract, partnerFunction)
	}
	row := exec.QueryRowContext(ctx, sql, salesContract, partnerFunction)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_contract_header_partner_data exists")
	}

	return exists, nil
}
