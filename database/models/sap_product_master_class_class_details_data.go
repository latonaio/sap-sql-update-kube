// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterClassClassDetailsDatum is an object representing the database table.
type SapProductMasterClassClassDetailsDatum struct {
	ClassInternalID          string      `boil:"ClassInternalID" json:"ClassInternalID" toml:"ClassInternalID" yaml:"ClassInternalID"`
	Product                  null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	KeyDate                  string      `boil:"KeyDate" json:"KeyDate" toml:"KeyDate" yaml:"KeyDate"`
	ClassType                null.String `boil:"ClassType" json:"ClassType,omitempty" toml:"ClassType" yaml:"ClassType,omitempty"`
	ClassTypeName            null.String `boil:"ClassTypeName" json:"ClassTypeName,omitempty" toml:"ClassTypeName" yaml:"ClassTypeName,omitempty"`
	Class                    null.String `boil:"Class" json:"Class,omitempty" toml:"Class" yaml:"Class,omitempty"`
	ClassStatus              null.String `boil:"ClassStatus" json:"ClassStatus,omitempty" toml:"ClassStatus" yaml:"ClassStatus,omitempty"`
	ClassStatusName          null.String `boil:"ClassStatusName" json:"ClassStatusName,omitempty" toml:"ClassStatusName" yaml:"ClassStatusName,omitempty"`
	ClassGroup               null.String `boil:"ClassGroup" json:"ClassGroup,omitempty" toml:"ClassGroup" yaml:"ClassGroup,omitempty"`
	ClassGroupName           null.String `boil:"ClassGroupName" json:"ClassGroupName,omitempty" toml:"ClassGroupName" yaml:"ClassGroupName,omitempty"`
	CreationDate             null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate           null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ValidityStartDate        null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate          null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ClassLastChangedDateTime null.String `boil:"ClassLastChangedDateTime" json:"ClassLastChangedDateTime,omitempty" toml:"ClassLastChangedDateTime" yaml:"ClassLastChangedDateTime,omitempty"`

	R *sapProductMasterClassClassDetailsDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterClassClassDetailsDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterClassClassDetailsDatumColumns = struct {
	ClassInternalID          string
	Product                  string
	KeyDate                  string
	ClassType                string
	ClassTypeName            string
	Class                    string
	ClassStatus              string
	ClassStatusName          string
	ClassGroup               string
	ClassGroupName           string
	CreationDate             string
	LastChangeDate           string
	ValidityStartDate        string
	ValidityEndDate          string
	ClassLastChangedDateTime string
}{
	ClassInternalID:          "ClassInternalID",
	Product:                  "Product",
	KeyDate:                  "KeyDate",
	ClassType:                "ClassType",
	ClassTypeName:            "ClassTypeName",
	Class:                    "Class",
	ClassStatus:              "ClassStatus",
	ClassStatusName:          "ClassStatusName",
	ClassGroup:               "ClassGroup",
	ClassGroupName:           "ClassGroupName",
	CreationDate:             "CreationDate",
	LastChangeDate:           "LastChangeDate",
	ValidityStartDate:        "ValidityStartDate",
	ValidityEndDate:          "ValidityEndDate",
	ClassLastChangedDateTime: "ClassLastChangedDateTime",
}

var SapProductMasterClassClassDetailsDatumTableColumns = struct {
	ClassInternalID          string
	Product                  string
	KeyDate                  string
	ClassType                string
	ClassTypeName            string
	Class                    string
	ClassStatus              string
	ClassStatusName          string
	ClassGroup               string
	ClassGroupName           string
	CreationDate             string
	LastChangeDate           string
	ValidityStartDate        string
	ValidityEndDate          string
	ClassLastChangedDateTime string
}{
	ClassInternalID:          "sap_product_master_class_class_details_data.ClassInternalID",
	Product:                  "sap_product_master_class_class_details_data.Product",
	KeyDate:                  "sap_product_master_class_class_details_data.KeyDate",
	ClassType:                "sap_product_master_class_class_details_data.ClassType",
	ClassTypeName:            "sap_product_master_class_class_details_data.ClassTypeName",
	Class:                    "sap_product_master_class_class_details_data.Class",
	ClassStatus:              "sap_product_master_class_class_details_data.ClassStatus",
	ClassStatusName:          "sap_product_master_class_class_details_data.ClassStatusName",
	ClassGroup:               "sap_product_master_class_class_details_data.ClassGroup",
	ClassGroupName:           "sap_product_master_class_class_details_data.ClassGroupName",
	CreationDate:             "sap_product_master_class_class_details_data.CreationDate",
	LastChangeDate:           "sap_product_master_class_class_details_data.LastChangeDate",
	ValidityStartDate:        "sap_product_master_class_class_details_data.ValidityStartDate",
	ValidityEndDate:          "sap_product_master_class_class_details_data.ValidityEndDate",
	ClassLastChangedDateTime: "sap_product_master_class_class_details_data.ClassLastChangedDateTime",
}

// Generated where

var SapProductMasterClassClassDetailsDatumWhere = struct {
	ClassInternalID          whereHelperstring
	Product                  whereHelpernull_String
	KeyDate                  whereHelperstring
	ClassType                whereHelpernull_String
	ClassTypeName            whereHelpernull_String
	Class                    whereHelpernull_String
	ClassStatus              whereHelpernull_String
	ClassStatusName          whereHelpernull_String
	ClassGroup               whereHelpernull_String
	ClassGroupName           whereHelpernull_String
	CreationDate             whereHelpernull_String
	LastChangeDate           whereHelpernull_String
	ValidityStartDate        whereHelpernull_String
	ValidityEndDate          whereHelpernull_String
	ClassLastChangedDateTime whereHelpernull_String
}{
	ClassInternalID:          whereHelperstring{field: "`sap_product_master_class_class_details_data`.`ClassInternalID`"},
	Product:                  whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`Product`"},
	KeyDate:                  whereHelperstring{field: "`sap_product_master_class_class_details_data`.`KeyDate`"},
	ClassType:                whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassType`"},
	ClassTypeName:            whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassTypeName`"},
	Class:                    whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`Class`"},
	ClassStatus:              whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassStatus`"},
	ClassStatusName:          whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassStatusName`"},
	ClassGroup:               whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassGroup`"},
	ClassGroupName:           whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassGroupName`"},
	CreationDate:             whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`CreationDate`"},
	LastChangeDate:           whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`LastChangeDate`"},
	ValidityStartDate:        whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ValidityStartDate`"},
	ValidityEndDate:          whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ValidityEndDate`"},
	ClassLastChangedDateTime: whereHelpernull_String{field: "`sap_product_master_class_class_details_data`.`ClassLastChangedDateTime`"},
}

// SapProductMasterClassClassDetailsDatumRels is where relationship names are stored.
var SapProductMasterClassClassDetailsDatumRels = struct {
	ProductSapProductMasterClassProductClassDatum string
}{
	ProductSapProductMasterClassProductClassDatum: "ProductSapProductMasterClassProductClassDatum",
}

// sapProductMasterClassClassDetailsDatumR is where relationships are stored.
type sapProductMasterClassClassDetailsDatumR struct {
	ProductSapProductMasterClassProductClassDatum *SapProductMasterClassProductClassDatum `boil:"ProductSapProductMasterClassProductClassDatum" json:"ProductSapProductMasterClassProductClassDatum" toml:"ProductSapProductMasterClassProductClassDatum" yaml:"ProductSapProductMasterClassProductClassDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterClassClassDetailsDatumR) NewStruct() *sapProductMasterClassClassDetailsDatumR {
	return &sapProductMasterClassClassDetailsDatumR{}
}

// sapProductMasterClassClassDetailsDatumL is where Load methods for each relationship are stored.
type sapProductMasterClassClassDetailsDatumL struct{}

var (
	sapProductMasterClassClassDetailsDatumAllColumns            = []string{"ClassInternalID", "Product", "KeyDate", "ClassType", "ClassTypeName", "Class", "ClassStatus", "ClassStatusName", "ClassGroup", "ClassGroupName", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ClassLastChangedDateTime"}
	sapProductMasterClassClassDetailsDatumColumnsWithoutDefault = []string{"ClassInternalID", "Product", "KeyDate", "ClassType", "ClassTypeName", "Class", "ClassStatus", "ClassStatusName", "ClassGroup", "ClassGroupName", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ClassLastChangedDateTime"}
	sapProductMasterClassClassDetailsDatumColumnsWithDefault    = []string{}
	sapProductMasterClassClassDetailsDatumPrimaryKeyColumns     = []string{"ClassInternalID", "KeyDate"}
	sapProductMasterClassClassDetailsDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterClassClassDetailsDatumSlice is an alias for a slice of pointers to SapProductMasterClassClassDetailsDatum.
	// This should almost always be used instead of []SapProductMasterClassClassDetailsDatum.
	SapProductMasterClassClassDetailsDatumSlice []*SapProductMasterClassClassDetailsDatum
	// SapProductMasterClassClassDetailsDatumHook is the signature for custom SapProductMasterClassClassDetailsDatum hook methods
	SapProductMasterClassClassDetailsDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterClassClassDetailsDatum) error

	sapProductMasterClassClassDetailsDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterClassClassDetailsDatumType                 = reflect.TypeOf(&SapProductMasterClassClassDetailsDatum{})
	sapProductMasterClassClassDetailsDatumMapping              = queries.MakeStructMapping(sapProductMasterClassClassDetailsDatumType)
	sapProductMasterClassClassDetailsDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns)
	sapProductMasterClassClassDetailsDatumInsertCacheMut       sync.RWMutex
	sapProductMasterClassClassDetailsDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterClassClassDetailsDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterClassClassDetailsDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterClassClassDetailsDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterClassClassDetailsDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterClassClassDetailsDatumAfterSelectHooks []SapProductMasterClassClassDetailsDatumHook

var sapProductMasterClassClassDetailsDatumBeforeInsertHooks []SapProductMasterClassClassDetailsDatumHook
var sapProductMasterClassClassDetailsDatumAfterInsertHooks []SapProductMasterClassClassDetailsDatumHook

var sapProductMasterClassClassDetailsDatumBeforeUpdateHooks []SapProductMasterClassClassDetailsDatumHook
var sapProductMasterClassClassDetailsDatumAfterUpdateHooks []SapProductMasterClassClassDetailsDatumHook

var sapProductMasterClassClassDetailsDatumBeforeDeleteHooks []SapProductMasterClassClassDetailsDatumHook
var sapProductMasterClassClassDetailsDatumAfterDeleteHooks []SapProductMasterClassClassDetailsDatumHook

var sapProductMasterClassClassDetailsDatumBeforeUpsertHooks []SapProductMasterClassClassDetailsDatumHook
var sapProductMasterClassClassDetailsDatumAfterUpsertHooks []SapProductMasterClassClassDetailsDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterClassClassDetailsDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassClassDetailsDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterClassClassDetailsDatumHook registers your hook function for all future operations.
func AddSapProductMasterClassClassDetailsDatumHook(hookPoint boil.HookPoint, sapProductMasterClassClassDetailsDatumHook SapProductMasterClassClassDetailsDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterClassClassDetailsDatumAfterSelectHooks = append(sapProductMasterClassClassDetailsDatumAfterSelectHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterClassClassDetailsDatumBeforeInsertHooks = append(sapProductMasterClassClassDetailsDatumBeforeInsertHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterClassClassDetailsDatumAfterInsertHooks = append(sapProductMasterClassClassDetailsDatumAfterInsertHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterClassClassDetailsDatumBeforeUpdateHooks = append(sapProductMasterClassClassDetailsDatumBeforeUpdateHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterClassClassDetailsDatumAfterUpdateHooks = append(sapProductMasterClassClassDetailsDatumAfterUpdateHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterClassClassDetailsDatumBeforeDeleteHooks = append(sapProductMasterClassClassDetailsDatumBeforeDeleteHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterClassClassDetailsDatumAfterDeleteHooks = append(sapProductMasterClassClassDetailsDatumAfterDeleteHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterClassClassDetailsDatumBeforeUpsertHooks = append(sapProductMasterClassClassDetailsDatumBeforeUpsertHooks, sapProductMasterClassClassDetailsDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterClassClassDetailsDatumAfterUpsertHooks = append(sapProductMasterClassClassDetailsDatumAfterUpsertHooks, sapProductMasterClassClassDetailsDatumHook)
	}
}

// One returns a single sapProductMasterClassClassDetailsDatum record from the query.
func (q sapProductMasterClassClassDetailsDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterClassClassDetailsDatum, error) {
	o := &SapProductMasterClassClassDetailsDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_class_class_details_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterClassClassDetailsDatum records from the query.
func (q sapProductMasterClassClassDetailsDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterClassClassDetailsDatumSlice, error) {
	var o []*SapProductMasterClassClassDetailsDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterClassClassDetailsDatum slice")
	}

	if len(sapProductMasterClassClassDetailsDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterClassClassDetailsDatum records in the query.
func (q sapProductMasterClassClassDetailsDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_class_class_details_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterClassClassDetailsDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_class_class_details_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterClassProductClassDatum pointed to by the foreign key.
func (o *SapProductMasterClassClassDetailsDatum) ProductSapProductMasterClassProductClassDatum(mods ...qm.QueryMod) sapProductMasterClassProductClassDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterClassProductClassData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_class_product_class_data`")

	return query
}

// LoadProductSapProductMasterClassProductClassDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterClassClassDetailsDatumL) LoadProductSapProductMasterClassProductClassDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterClassClassDetailsDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterClassClassDetailsDatum
	var object *SapProductMasterClassClassDetailsDatum

	if singular {
		object = maybeSapProductMasterClassClassDetailsDatum.(*SapProductMasterClassClassDetailsDatum)
	} else {
		slice = *maybeSapProductMasterClassClassDetailsDatum.(*[]*SapProductMasterClassClassDetailsDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterClassClassDetailsDatumR{}
		}
		if !queries.IsNil(object.Product) {
			args = append(args, object.Product)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterClassClassDetailsDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Product) {
				args = append(args, obj.Product)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_class_product_class_data`),
		qm.WhereIn(`sap_product_master_class_product_class_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterClassProductClassDatum")
	}

	var resultSlice []*SapProductMasterClassProductClassDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterClassProductClassDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_class_product_class_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_class_product_class_data")
	}

	if len(sapProductMasterClassClassDetailsDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterClassProductClassDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterClassProductClassDatumR{}
		}
		foreign.R.ProductSapProductMasterClassClassDetailsData = append(foreign.R.ProductSapProductMasterClassClassDetailsData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductSapProductMasterClassProductClassDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterClassProductClassDatumR{}
				}
				foreign.R.ProductSapProductMasterClassClassDetailsData = append(foreign.R.ProductSapProductMasterClassClassDetailsData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterClassProductClassDatum of the sapProductMasterClassClassDetailsDatum to the related item.
// Sets o.R.ProductSapProductMasterClassProductClassDatum to related.
// Adds o to related.R.ProductSapProductMasterClassClassDetailsData.
func (o *SapProductMasterClassClassDetailsDatum) SetProductSapProductMasterClassProductClassDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterClassProductClassDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_class_class_details_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.ClassInternalID, o.KeyDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Product, related.Product)
	if o.R == nil {
		o.R = &sapProductMasterClassClassDetailsDatumR{
			ProductSapProductMasterClassProductClassDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterClassProductClassDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterClassProductClassDatumR{
			ProductSapProductMasterClassClassDetailsData: SapProductMasterClassClassDetailsDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterClassClassDetailsData = append(related.R.ProductSapProductMasterClassClassDetailsData, o)
	}

	return nil
}

// RemoveProductSapProductMasterClassProductClassDatum relationship.
// Sets o.R.ProductSapProductMasterClassProductClassDatum to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SapProductMasterClassClassDetailsDatum) RemoveProductSapProductMasterClassProductClassDatum(ctx context.Context, exec boil.ContextExecutor, related *SapProductMasterClassProductClassDatum) error {
	var err error

	queries.SetScanner(&o.Product, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductSapProductMasterClassProductClassDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductSapProductMasterClassClassDetailsData {
		if queries.Equal(o.Product, ri.Product) {
			continue
		}

		ln := len(related.R.ProductSapProductMasterClassClassDetailsData)
		if ln > 1 && i < ln-1 {
			related.R.ProductSapProductMasterClassClassDetailsData[i] = related.R.ProductSapProductMasterClassClassDetailsData[ln-1]
		}
		related.R.ProductSapProductMasterClassClassDetailsData = related.R.ProductSapProductMasterClassClassDetailsData[:ln-1]
		break
	}
	return nil
}

// SapProductMasterClassClassDetailsData retrieves all the records using an executor.
func SapProductMasterClassClassDetailsData(mods ...qm.QueryMod) sapProductMasterClassClassDetailsDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_class_class_details_data`"))
	return sapProductMasterClassClassDetailsDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterClassClassDetailsDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterClassClassDetailsDatum(ctx context.Context, exec boil.ContextExecutor, classInternalID string, keyDate string, selectCols ...string) (*SapProductMasterClassClassDetailsDatum, error) {
	sapProductMasterClassClassDetailsDatumObj := &SapProductMasterClassClassDetailsDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_class_class_details_data` where `ClassInternalID`=? AND `KeyDate`=?", sel,
	)

	q := queries.Raw(query, classInternalID, keyDate)

	err := q.Bind(ctx, exec, sapProductMasterClassClassDetailsDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_class_class_details_data")
	}

	if err = sapProductMasterClassClassDetailsDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterClassClassDetailsDatumObj, err
	}

	return sapProductMasterClassClassDetailsDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterClassClassDetailsDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_class_details_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassClassDetailsDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterClassClassDetailsDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterClassClassDetailsDatumInsertCache[key]
	sapProductMasterClassClassDetailsDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterClassClassDetailsDatumAllColumns,
			sapProductMasterClassClassDetailsDatumColumnsWithDefault,
			sapProductMasterClassClassDetailsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_class_class_details_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_class_class_details_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_class_class_details_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_class_class_details_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClassInternalID,
		o.KeyDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_class_details_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassClassDetailsDatumInsertCacheMut.Lock()
		sapProductMasterClassClassDetailsDatumInsertCache[key] = cache
		sapProductMasterClassClassDetailsDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterClassClassDetailsDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterClassClassDetailsDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterClassClassDetailsDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterClassClassDetailsDatumUpdateCache[key]
	sapProductMasterClassClassDetailsDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterClassClassDetailsDatumAllColumns,
			sapProductMasterClassClassDetailsDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_class_class_details_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_class_class_details_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, append(wl, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_class_class_details_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_class_class_details_data")
	}

	if !cached {
		sapProductMasterClassClassDetailsDatumUpdateCacheMut.Lock()
		sapProductMasterClassClassDetailsDatumUpdateCache[key] = cache
		sapProductMasterClassClassDetailsDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterClassClassDetailsDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_class_class_details_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_class_class_details_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterClassClassDetailsDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassClassDetailsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_class_class_details_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterClassClassDetailsDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterClassClassDetailsDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterClassClassDetailsDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterClassClassDetailsDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_class_details_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassClassDetailsDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterClassClassDetailsDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterClassClassDetailsDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterClassClassDetailsDatumUpsertCache[key]
	sapProductMasterClassClassDetailsDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterClassClassDetailsDatumAllColumns,
			sapProductMasterClassClassDetailsDatumColumnsWithDefault,
			sapProductMasterClassClassDetailsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterClassClassDetailsDatumAllColumns,
			sapProductMasterClassClassDetailsDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_class_class_details_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_class_class_details_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_class_class_details_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_class_class_details_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterClassClassDetailsDatumType, sapProductMasterClassClassDetailsDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_class_class_details_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_class_details_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassClassDetailsDatumUpsertCacheMut.Lock()
		sapProductMasterClassClassDetailsDatumUpsertCache[key] = cache
		sapProductMasterClassClassDetailsDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterClassClassDetailsDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterClassClassDetailsDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterClassClassDetailsDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterClassClassDetailsDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_class_class_details_data` WHERE `ClassInternalID`=? AND `KeyDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_class_class_details_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_class_class_details_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterClassClassDetailsDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterClassClassDetailsDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_class_class_details_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_class_details_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterClassClassDetailsDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterClassClassDetailsDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassClassDetailsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_class_class_details_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterClassClassDetailsDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_class_details_data")
	}

	if len(sapProductMasterClassClassDetailsDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterClassClassDetailsDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterClassClassDetailsDatum(ctx, exec, o.ClassInternalID, o.KeyDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterClassClassDetailsDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterClassClassDetailsDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassClassDetailsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_class_class_details_data`.* FROM `sap_product_master_class_class_details_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassClassDetailsDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterClassClassDetailsDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterClassClassDetailsDatumExists checks if the SapProductMasterClassClassDetailsDatum row exists.
func SapProductMasterClassClassDetailsDatumExists(ctx context.Context, exec boil.ContextExecutor, classInternalID string, keyDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_class_class_details_data` where `ClassInternalID`=? AND `KeyDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, classInternalID, keyDate)
	}
	row := exec.QueryRowContext(ctx, sql, classInternalID, keyDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_class_class_details_data exists")
	}

	return exists, nil
}
