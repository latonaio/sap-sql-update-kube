// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseOrderItemDataWithAddress is an object representing the database table.
type SapPurchaseOrderItemDataWithAddress struct {
	PurchaseOrder                  string      `boil:"PurchaseOrder" json:"PurchaseOrder" toml:"PurchaseOrder" yaml:"PurchaseOrder"`
	PurchaseOrderItem              string      `boil:"PurchaseOrderItem" json:"PurchaseOrderItem" toml:"PurchaseOrderItem" yaml:"PurchaseOrderItem"`
	PurchaseOrderItemText          null.String `boil:"PurchaseOrderItemText" json:"PurchaseOrderItemText,omitempty" toml:"PurchaseOrderItemText" yaml:"PurchaseOrderItemText,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	PurchasingInfoRecord           null.String `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord,omitempty" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord,omitempty"`
	SupplierMaterialNumber         null.String `boil:"SupplierMaterialNumber" json:"SupplierMaterialNumber,omitempty" toml:"SupplierMaterialNumber" yaml:"SupplierMaterialNumber,omitempty"`
	OrderQuantity                  null.String `boil:"OrderQuantity" json:"OrderQuantity,omitempty" toml:"OrderQuantity" yaml:"OrderQuantity,omitempty"`
	PurchaseOrderQuantityUnit      null.String `boil:"PurchaseOrderQuantityUnit" json:"PurchaseOrderQuantityUnit,omitempty" toml:"PurchaseOrderQuantityUnit" yaml:"PurchaseOrderQuantityUnit,omitempty"`
	OrderPriceUnit                 null.String `boil:"OrderPriceUnit" json:"OrderPriceUnit,omitempty" toml:"OrderPriceUnit" yaml:"OrderPriceUnit,omitempty"`
	DocumentCurrency               null.String `boil:"DocumentCurrency" json:"DocumentCurrency,omitempty" toml:"DocumentCurrency" yaml:"DocumentCurrency,omitempty"`
	NetPriceAmount                 null.String `boil:"NetPriceAmount" json:"NetPriceAmount,omitempty" toml:"NetPriceAmount" yaml:"NetPriceAmount,omitempty"`
	NetPriceQuantity               null.String `boil:"NetPriceQuantity" json:"NetPriceQuantity,omitempty" toml:"NetPriceQuantity" yaml:"NetPriceQuantity,omitempty"`
	TaxCode                        null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	OverdelivTolrtdLmtRatioInPct   null.String `boil:"OverdelivTolrtdLmtRatioInPct" json:"OverdelivTolrtdLmtRatioInPct,omitempty" toml:"OverdelivTolrtdLmtRatioInPct" yaml:"OverdelivTolrtdLmtRatioInPct,omitempty"`
	UnlimitedOverdeliveryIsAllowed null.Bool   `boil:"UnlimitedOverdeliveryIsAllowed" json:"UnlimitedOverdeliveryIsAllowed,omitempty" toml:"UnlimitedOverdeliveryIsAllowed" yaml:"UnlimitedOverdeliveryIsAllowed,omitempty"`
	UnderdelivTolrtdLmtRatioInPct  null.String `boil:"UnderdelivTolrtdLmtRatioInPct" json:"UnderdelivTolrtdLmtRatioInPct,omitempty" toml:"UnderdelivTolrtdLmtRatioInPct" yaml:"UnderdelivTolrtdLmtRatioInPct,omitempty"`
	IsCompletelyDelivered          null.Bool   `boil:"IsCompletelyDelivered" json:"IsCompletelyDelivered,omitempty" toml:"IsCompletelyDelivered" yaml:"IsCompletelyDelivered,omitempty"`
	IsFinallyInvoiced              null.Bool   `boil:"IsFinallyInvoiced" json:"IsFinallyInvoiced,omitempty" toml:"IsFinallyInvoiced" yaml:"IsFinallyInvoiced,omitempty"`
	PurchaseOrderItemCategory      null.String `boil:"PurchaseOrderItemCategory" json:"PurchaseOrderItemCategory,omitempty" toml:"PurchaseOrderItemCategory" yaml:"PurchaseOrderItemCategory,omitempty"`
	AccountAssignmentCategory      null.String `boil:"AccountAssignmentCategory" json:"AccountAssignmentCategory,omitempty" toml:"AccountAssignmentCategory" yaml:"AccountAssignmentCategory,omitempty"`
	GoodsReceiptIsExpected         null.Bool   `boil:"GoodsReceiptIsExpected" json:"GoodsReceiptIsExpected,omitempty" toml:"GoodsReceiptIsExpected" yaml:"GoodsReceiptIsExpected,omitempty"`
	GoodsReceiptIsNonValuated      null.Bool   `boil:"GoodsReceiptIsNonValuated" json:"GoodsReceiptIsNonValuated,omitempty" toml:"GoodsReceiptIsNonValuated" yaml:"GoodsReceiptIsNonValuated,omitempty"`
	InvoiceIsExpected              null.Bool   `boil:"InvoiceIsExpected" json:"InvoiceIsExpected,omitempty" toml:"InvoiceIsExpected" yaml:"InvoiceIsExpected,omitempty"`
	InvoiceIsGoodsReceiptBased     null.Bool   `boil:"InvoiceIsGoodsReceiptBased" json:"InvoiceIsGoodsReceiptBased,omitempty" toml:"InvoiceIsGoodsReceiptBased" yaml:"InvoiceIsGoodsReceiptBased,omitempty"`
	Customer                       null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	SupplierIsSubcontractor        null.Bool   `boil:"SupplierIsSubcontractor" json:"SupplierIsSubcontractor,omitempty" toml:"SupplierIsSubcontractor" yaml:"SupplierIsSubcontractor,omitempty"`
	ItemNetWeight                  null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                 null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	PurchaseRequisition            null.String `boil:"PurchaseRequisition" json:"PurchaseRequisition,omitempty" toml:"PurchaseRequisition" yaml:"PurchaseRequisition,omitempty"`
	PurchaseRequisitionItem        null.String `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem,omitempty" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem,omitempty"`
	RequisitionerName              null.String `boil:"RequisitionerName" json:"RequisitionerName,omitempty" toml:"RequisitionerName" yaml:"RequisitionerName,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	InternationalArticleNumber     null.String `boil:"InternationalArticleNumber" json:"InternationalArticleNumber,omitempty" toml:"InternationalArticleNumber" yaml:"InternationalArticleNumber,omitempty"`
	DeliveryAddressID              null.String `boil:"DeliveryAddressID" json:"DeliveryAddressID,omitempty" toml:"DeliveryAddressID" yaml:"DeliveryAddressID,omitempty"`
	DeliveryAddressName            null.String `boil:"DeliveryAddressName" json:"DeliveryAddressName,omitempty" toml:"DeliveryAddressName" yaml:"DeliveryAddressName,omitempty"`
	DeliveryAddressPostalCode      null.String `boil:"DeliveryAddressPostalCode" json:"DeliveryAddressPostalCode,omitempty" toml:"DeliveryAddressPostalCode" yaml:"DeliveryAddressPostalCode,omitempty"`
	DeliveryAddressStreetName      null.String `boil:"DeliveryAddressStreetName" json:"DeliveryAddressStreetName,omitempty" toml:"DeliveryAddressStreetName" yaml:"DeliveryAddressStreetName,omitempty"`
	DeliveryAddressCityName        null.String `boil:"DeliveryAddressCityName" json:"DeliveryAddressCityName,omitempty" toml:"DeliveryAddressCityName" yaml:"DeliveryAddressCityName,omitempty"`
	DeliveryAddressRegion          null.String `boil:"DeliveryAddressRegion" json:"DeliveryAddressRegion,omitempty" toml:"DeliveryAddressRegion" yaml:"DeliveryAddressRegion,omitempty"`
	DeliveryAddressCountry         null.String `boil:"DeliveryAddressCountry" json:"DeliveryAddressCountry,omitempty" toml:"DeliveryAddressCountry" yaml:"DeliveryAddressCountry,omitempty"`
	PurchasingDocumentDeletionCode null.String `boil:"PurchasingDocumentDeletionCode" json:"PurchasingDocumentDeletionCode,omitempty" toml:"PurchasingDocumentDeletionCode" yaml:"PurchasingDocumentDeletionCode,omitempty"`

	R *sapPurchaseOrderItemDataWithAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseOrderItemDataWithAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseOrderItemDataWithAddressColumns = struct {
	PurchaseOrder                  string
	PurchaseOrderItem              string
	PurchaseOrderItemText          string
	Plant                          string
	StorageLocation                string
	MaterialGroup                  string
	PurchasingInfoRecord           string
	SupplierMaterialNumber         string
	OrderQuantity                  string
	PurchaseOrderQuantityUnit      string
	OrderPriceUnit                 string
	DocumentCurrency               string
	NetPriceAmount                 string
	NetPriceQuantity               string
	TaxCode                        string
	OverdelivTolrtdLmtRatioInPct   string
	UnlimitedOverdeliveryIsAllowed string
	UnderdelivTolrtdLmtRatioInPct  string
	IsCompletelyDelivered          string
	IsFinallyInvoiced              string
	PurchaseOrderItemCategory      string
	AccountAssignmentCategory      string
	GoodsReceiptIsExpected         string
	GoodsReceiptIsNonValuated      string
	InvoiceIsExpected              string
	InvoiceIsGoodsReceiptBased     string
	Customer                       string
	SupplierIsSubcontractor        string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	IncotermsClassification        string
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	RequisitionerName              string
	Material                       string
	InternationalArticleNumber     string
	DeliveryAddressID              string
	DeliveryAddressName            string
	DeliveryAddressPostalCode      string
	DeliveryAddressStreetName      string
	DeliveryAddressCityName        string
	DeliveryAddressRegion          string
	DeliveryAddressCountry         string
	PurchasingDocumentDeletionCode string
}{
	PurchaseOrder:                  "PurchaseOrder",
	PurchaseOrderItem:              "PurchaseOrderItem",
	PurchaseOrderItemText:          "PurchaseOrderItemText",
	Plant:                          "Plant",
	StorageLocation:                "StorageLocation",
	MaterialGroup:                  "MaterialGroup",
	PurchasingInfoRecord:           "PurchasingInfoRecord",
	SupplierMaterialNumber:         "SupplierMaterialNumber",
	OrderQuantity:                  "OrderQuantity",
	PurchaseOrderQuantityUnit:      "PurchaseOrderQuantityUnit",
	OrderPriceUnit:                 "OrderPriceUnit",
	DocumentCurrency:               "DocumentCurrency",
	NetPriceAmount:                 "NetPriceAmount",
	NetPriceQuantity:               "NetPriceQuantity",
	TaxCode:                        "TaxCode",
	OverdelivTolrtdLmtRatioInPct:   "OverdelivTolrtdLmtRatioInPct",
	UnlimitedOverdeliveryIsAllowed: "UnlimitedOverdeliveryIsAllowed",
	UnderdelivTolrtdLmtRatioInPct:  "UnderdelivTolrtdLmtRatioInPct",
	IsCompletelyDelivered:          "IsCompletelyDelivered",
	IsFinallyInvoiced:              "IsFinallyInvoiced",
	PurchaseOrderItemCategory:      "PurchaseOrderItemCategory",
	AccountAssignmentCategory:      "AccountAssignmentCategory",
	GoodsReceiptIsExpected:         "GoodsReceiptIsExpected",
	GoodsReceiptIsNonValuated:      "GoodsReceiptIsNonValuated",
	InvoiceIsExpected:              "InvoiceIsExpected",
	InvoiceIsGoodsReceiptBased:     "InvoiceIsGoodsReceiptBased",
	Customer:                       "Customer",
	SupplierIsSubcontractor:        "SupplierIsSubcontractor",
	ItemNetWeight:                  "ItemNetWeight",
	ItemWeightUnit:                 "ItemWeightUnit",
	IncotermsClassification:        "IncotermsClassification",
	PurchaseRequisition:            "PurchaseRequisition",
	PurchaseRequisitionItem:        "PurchaseRequisitionItem",
	RequisitionerName:              "RequisitionerName",
	Material:                       "Material",
	InternationalArticleNumber:     "InternationalArticleNumber",
	DeliveryAddressID:              "DeliveryAddressID",
	DeliveryAddressName:            "DeliveryAddressName",
	DeliveryAddressPostalCode:      "DeliveryAddressPostalCode",
	DeliveryAddressStreetName:      "DeliveryAddressStreetName",
	DeliveryAddressCityName:        "DeliveryAddressCityName",
	DeliveryAddressRegion:          "DeliveryAddressRegion",
	DeliveryAddressCountry:         "DeliveryAddressCountry",
	PurchasingDocumentDeletionCode: "PurchasingDocumentDeletionCode",
}

var SapPurchaseOrderItemDataWithAddressTableColumns = struct {
	PurchaseOrder                  string
	PurchaseOrderItem              string
	PurchaseOrderItemText          string
	Plant                          string
	StorageLocation                string
	MaterialGroup                  string
	PurchasingInfoRecord           string
	SupplierMaterialNumber         string
	OrderQuantity                  string
	PurchaseOrderQuantityUnit      string
	OrderPriceUnit                 string
	DocumentCurrency               string
	NetPriceAmount                 string
	NetPriceQuantity               string
	TaxCode                        string
	OverdelivTolrtdLmtRatioInPct   string
	UnlimitedOverdeliveryIsAllowed string
	UnderdelivTolrtdLmtRatioInPct  string
	IsCompletelyDelivered          string
	IsFinallyInvoiced              string
	PurchaseOrderItemCategory      string
	AccountAssignmentCategory      string
	GoodsReceiptIsExpected         string
	GoodsReceiptIsNonValuated      string
	InvoiceIsExpected              string
	InvoiceIsGoodsReceiptBased     string
	Customer                       string
	SupplierIsSubcontractor        string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	IncotermsClassification        string
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	RequisitionerName              string
	Material                       string
	InternationalArticleNumber     string
	DeliveryAddressID              string
	DeliveryAddressName            string
	DeliveryAddressPostalCode      string
	DeliveryAddressStreetName      string
	DeliveryAddressCityName        string
	DeliveryAddressRegion          string
	DeliveryAddressCountry         string
	PurchasingDocumentDeletionCode string
}{
	PurchaseOrder:                  "sap_purchase_order_item_data_with_address.PurchaseOrder",
	PurchaseOrderItem:              "sap_purchase_order_item_data_with_address.PurchaseOrderItem",
	PurchaseOrderItemText:          "sap_purchase_order_item_data_with_address.PurchaseOrderItemText",
	Plant:                          "sap_purchase_order_item_data_with_address.Plant",
	StorageLocation:                "sap_purchase_order_item_data_with_address.StorageLocation",
	MaterialGroup:                  "sap_purchase_order_item_data_with_address.MaterialGroup",
	PurchasingInfoRecord:           "sap_purchase_order_item_data_with_address.PurchasingInfoRecord",
	SupplierMaterialNumber:         "sap_purchase_order_item_data_with_address.SupplierMaterialNumber",
	OrderQuantity:                  "sap_purchase_order_item_data_with_address.OrderQuantity",
	PurchaseOrderQuantityUnit:      "sap_purchase_order_item_data_with_address.PurchaseOrderQuantityUnit",
	OrderPriceUnit:                 "sap_purchase_order_item_data_with_address.OrderPriceUnit",
	DocumentCurrency:               "sap_purchase_order_item_data_with_address.DocumentCurrency",
	NetPriceAmount:                 "sap_purchase_order_item_data_with_address.NetPriceAmount",
	NetPriceQuantity:               "sap_purchase_order_item_data_with_address.NetPriceQuantity",
	TaxCode:                        "sap_purchase_order_item_data_with_address.TaxCode",
	OverdelivTolrtdLmtRatioInPct:   "sap_purchase_order_item_data_with_address.OverdelivTolrtdLmtRatioInPct",
	UnlimitedOverdeliveryIsAllowed: "sap_purchase_order_item_data_with_address.UnlimitedOverdeliveryIsAllowed",
	UnderdelivTolrtdLmtRatioInPct:  "sap_purchase_order_item_data_with_address.UnderdelivTolrtdLmtRatioInPct",
	IsCompletelyDelivered:          "sap_purchase_order_item_data_with_address.IsCompletelyDelivered",
	IsFinallyInvoiced:              "sap_purchase_order_item_data_with_address.IsFinallyInvoiced",
	PurchaseOrderItemCategory:      "sap_purchase_order_item_data_with_address.PurchaseOrderItemCategory",
	AccountAssignmentCategory:      "sap_purchase_order_item_data_with_address.AccountAssignmentCategory",
	GoodsReceiptIsExpected:         "sap_purchase_order_item_data_with_address.GoodsReceiptIsExpected",
	GoodsReceiptIsNonValuated:      "sap_purchase_order_item_data_with_address.GoodsReceiptIsNonValuated",
	InvoiceIsExpected:              "sap_purchase_order_item_data_with_address.InvoiceIsExpected",
	InvoiceIsGoodsReceiptBased:     "sap_purchase_order_item_data_with_address.InvoiceIsGoodsReceiptBased",
	Customer:                       "sap_purchase_order_item_data_with_address.Customer",
	SupplierIsSubcontractor:        "sap_purchase_order_item_data_with_address.SupplierIsSubcontractor",
	ItemNetWeight:                  "sap_purchase_order_item_data_with_address.ItemNetWeight",
	ItemWeightUnit:                 "sap_purchase_order_item_data_with_address.ItemWeightUnit",
	IncotermsClassification:        "sap_purchase_order_item_data_with_address.IncotermsClassification",
	PurchaseRequisition:            "sap_purchase_order_item_data_with_address.PurchaseRequisition",
	PurchaseRequisitionItem:        "sap_purchase_order_item_data_with_address.PurchaseRequisitionItem",
	RequisitionerName:              "sap_purchase_order_item_data_with_address.RequisitionerName",
	Material:                       "sap_purchase_order_item_data_with_address.Material",
	InternationalArticleNumber:     "sap_purchase_order_item_data_with_address.InternationalArticleNumber",
	DeliveryAddressID:              "sap_purchase_order_item_data_with_address.DeliveryAddressID",
	DeliveryAddressName:            "sap_purchase_order_item_data_with_address.DeliveryAddressName",
	DeliveryAddressPostalCode:      "sap_purchase_order_item_data_with_address.DeliveryAddressPostalCode",
	DeliveryAddressStreetName:      "sap_purchase_order_item_data_with_address.DeliveryAddressStreetName",
	DeliveryAddressCityName:        "sap_purchase_order_item_data_with_address.DeliveryAddressCityName",
	DeliveryAddressRegion:          "sap_purchase_order_item_data_with_address.DeliveryAddressRegion",
	DeliveryAddressCountry:         "sap_purchase_order_item_data_with_address.DeliveryAddressCountry",
	PurchasingDocumentDeletionCode: "sap_purchase_order_item_data_with_address.PurchasingDocumentDeletionCode",
}

// Generated where

var SapPurchaseOrderItemDataWithAddressWhere = struct {
	PurchaseOrder                  whereHelperstring
	PurchaseOrderItem              whereHelperstring
	PurchaseOrderItemText          whereHelpernull_String
	Plant                          whereHelpernull_String
	StorageLocation                whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	PurchasingInfoRecord           whereHelpernull_String
	SupplierMaterialNumber         whereHelpernull_String
	OrderQuantity                  whereHelpernull_String
	PurchaseOrderQuantityUnit      whereHelpernull_String
	OrderPriceUnit                 whereHelpernull_String
	DocumentCurrency               whereHelpernull_String
	NetPriceAmount                 whereHelpernull_String
	NetPriceQuantity               whereHelpernull_String
	TaxCode                        whereHelpernull_String
	OverdelivTolrtdLmtRatioInPct   whereHelpernull_String
	UnlimitedOverdeliveryIsAllowed whereHelpernull_Bool
	UnderdelivTolrtdLmtRatioInPct  whereHelpernull_String
	IsCompletelyDelivered          whereHelpernull_Bool
	IsFinallyInvoiced              whereHelpernull_Bool
	PurchaseOrderItemCategory      whereHelpernull_String
	AccountAssignmentCategory      whereHelpernull_String
	GoodsReceiptIsExpected         whereHelpernull_Bool
	GoodsReceiptIsNonValuated      whereHelpernull_Bool
	InvoiceIsExpected              whereHelpernull_Bool
	InvoiceIsGoodsReceiptBased     whereHelpernull_Bool
	Customer                       whereHelpernull_String
	SupplierIsSubcontractor        whereHelpernull_Bool
	ItemNetWeight                  whereHelpernull_String
	ItemWeightUnit                 whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	PurchaseRequisition            whereHelpernull_String
	PurchaseRequisitionItem        whereHelpernull_String
	RequisitionerName              whereHelpernull_String
	Material                       whereHelpernull_String
	InternationalArticleNumber     whereHelpernull_String
	DeliveryAddressID              whereHelpernull_String
	DeliveryAddressName            whereHelpernull_String
	DeliveryAddressPostalCode      whereHelpernull_String
	DeliveryAddressStreetName      whereHelpernull_String
	DeliveryAddressCityName        whereHelpernull_String
	DeliveryAddressRegion          whereHelpernull_String
	DeliveryAddressCountry         whereHelpernull_String
	PurchasingDocumentDeletionCode whereHelpernull_String
}{
	PurchaseOrder:                  whereHelperstring{field: "`sap_purchase_order_item_data_with_address`.`PurchaseOrder`"},
	PurchaseOrderItem:              whereHelperstring{field: "`sap_purchase_order_item_data_with_address`.`PurchaseOrderItem`"},
	PurchaseOrderItemText:          whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchaseOrderItemText`"},
	Plant:                          whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`Plant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`StorageLocation`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`MaterialGroup`"},
	PurchasingInfoRecord:           whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchasingInfoRecord`"},
	SupplierMaterialNumber:         whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`SupplierMaterialNumber`"},
	OrderQuantity:                  whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`OrderQuantity`"},
	PurchaseOrderQuantityUnit:      whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchaseOrderQuantityUnit`"},
	OrderPriceUnit:                 whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`OrderPriceUnit`"},
	DocumentCurrency:               whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DocumentCurrency`"},
	NetPriceAmount:                 whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`NetPriceAmount`"},
	NetPriceQuantity:               whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`NetPriceQuantity`"},
	TaxCode:                        whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`TaxCode`"},
	OverdelivTolrtdLmtRatioInPct:   whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`OverdelivTolrtdLmtRatioInPct`"},
	UnlimitedOverdeliveryIsAllowed: whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`UnlimitedOverdeliveryIsAllowed`"},
	UnderdelivTolrtdLmtRatioInPct:  whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`UnderdelivTolrtdLmtRatioInPct`"},
	IsCompletelyDelivered:          whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`IsCompletelyDelivered`"},
	IsFinallyInvoiced:              whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`IsFinallyInvoiced`"},
	PurchaseOrderItemCategory:      whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchaseOrderItemCategory`"},
	AccountAssignmentCategory:      whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`AccountAssignmentCategory`"},
	GoodsReceiptIsExpected:         whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`GoodsReceiptIsExpected`"},
	GoodsReceiptIsNonValuated:      whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`GoodsReceiptIsNonValuated`"},
	InvoiceIsExpected:              whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`InvoiceIsExpected`"},
	InvoiceIsGoodsReceiptBased:     whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`InvoiceIsGoodsReceiptBased`"},
	Customer:                       whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`Customer`"},
	SupplierIsSubcontractor:        whereHelpernull_Bool{field: "`sap_purchase_order_item_data_with_address`.`SupplierIsSubcontractor`"},
	ItemNetWeight:                  whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`ItemNetWeight`"},
	ItemWeightUnit:                 whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`ItemWeightUnit`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`IncotermsClassification`"},
	PurchaseRequisition:            whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchaseRequisition`"},
	PurchaseRequisitionItem:        whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchaseRequisitionItem`"},
	RequisitionerName:              whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`RequisitionerName`"},
	Material:                       whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`Material`"},
	InternationalArticleNumber:     whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`InternationalArticleNumber`"},
	DeliveryAddressID:              whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressID`"},
	DeliveryAddressName:            whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressName`"},
	DeliveryAddressPostalCode:      whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressPostalCode`"},
	DeliveryAddressStreetName:      whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressStreetName`"},
	DeliveryAddressCityName:        whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressCityName`"},
	DeliveryAddressRegion:          whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressRegion`"},
	DeliveryAddressCountry:         whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`DeliveryAddressCountry`"},
	PurchasingDocumentDeletionCode: whereHelpernull_String{field: "`sap_purchase_order_item_data_with_address`.`PurchasingDocumentDeletionCode`"},
}

// SapPurchaseOrderItemDataWithAddressRels is where relationship names are stored.
var SapPurchaseOrderItemDataWithAddressRels = struct {
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress string
}{
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: "PurchaseOrderSapPurchaseOrderHeaderDataWithAddress",
}

// sapPurchaseOrderItemDataWithAddressR is where relationships are stored.
type sapPurchaseOrderItemDataWithAddressR struct {
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress *SapPurchaseOrderHeaderDataWithAddress `boil:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" json:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" toml:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" yaml:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseOrderItemDataWithAddressR) NewStruct() *sapPurchaseOrderItemDataWithAddressR {
	return &sapPurchaseOrderItemDataWithAddressR{}
}

// sapPurchaseOrderItemDataWithAddressL is where Load methods for each relationship are stored.
type sapPurchaseOrderItemDataWithAddressL struct{}

var (
	sapPurchaseOrderItemDataWithAddressAllColumns            = []string{"PurchaseOrder", "PurchaseOrderItem", "PurchaseOrderItemText", "Plant", "StorageLocation", "MaterialGroup", "PurchasingInfoRecord", "SupplierMaterialNumber", "OrderQuantity", "PurchaseOrderQuantityUnit", "OrderPriceUnit", "DocumentCurrency", "NetPriceAmount", "NetPriceQuantity", "TaxCode", "OverdelivTolrtdLmtRatioInPct", "UnlimitedOverdeliveryIsAllowed", "UnderdelivTolrtdLmtRatioInPct", "IsCompletelyDelivered", "IsFinallyInvoiced", "PurchaseOrderItemCategory", "AccountAssignmentCategory", "GoodsReceiptIsExpected", "GoodsReceiptIsNonValuated", "InvoiceIsExpected", "InvoiceIsGoodsReceiptBased", "Customer", "SupplierIsSubcontractor", "ItemNetWeight", "ItemWeightUnit", "IncotermsClassification", "PurchaseRequisition", "PurchaseRequisitionItem", "RequisitionerName", "Material", "InternationalArticleNumber", "DeliveryAddressID", "DeliveryAddressName", "DeliveryAddressPostalCode", "DeliveryAddressStreetName", "DeliveryAddressCityName", "DeliveryAddressRegion", "DeliveryAddressCountry", "PurchasingDocumentDeletionCode"}
	sapPurchaseOrderItemDataWithAddressColumnsWithoutDefault = []string{"PurchaseOrder", "PurchaseOrderItem", "PurchaseOrderItemText", "Plant", "StorageLocation", "MaterialGroup", "PurchasingInfoRecord", "SupplierMaterialNumber", "OrderQuantity", "PurchaseOrderQuantityUnit", "OrderPriceUnit", "DocumentCurrency", "NetPriceAmount", "NetPriceQuantity", "TaxCode", "OverdelivTolrtdLmtRatioInPct", "UnlimitedOverdeliveryIsAllowed", "UnderdelivTolrtdLmtRatioInPct", "IsCompletelyDelivered", "IsFinallyInvoiced", "PurchaseOrderItemCategory", "AccountAssignmentCategory", "GoodsReceiptIsExpected", "GoodsReceiptIsNonValuated", "InvoiceIsExpected", "InvoiceIsGoodsReceiptBased", "Customer", "SupplierIsSubcontractor", "ItemNetWeight", "ItemWeightUnit", "IncotermsClassification", "PurchaseRequisition", "PurchaseRequisitionItem", "RequisitionerName", "Material", "InternationalArticleNumber", "DeliveryAddressID", "DeliveryAddressName", "DeliveryAddressPostalCode", "DeliveryAddressStreetName", "DeliveryAddressCityName", "DeliveryAddressRegion", "DeliveryAddressCountry", "PurchasingDocumentDeletionCode"}
	sapPurchaseOrderItemDataWithAddressColumnsWithDefault    = []string{}
	sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns     = []string{"PurchaseOrder", "PurchaseOrderItem"}
)

type (
	// SapPurchaseOrderItemDataWithAddressSlice is an alias for a slice of pointers to SapPurchaseOrderItemDataWithAddress.
	// This should almost always be used instead of []SapPurchaseOrderItemDataWithAddress.
	SapPurchaseOrderItemDataWithAddressSlice []*SapPurchaseOrderItemDataWithAddress
	// SapPurchaseOrderItemDataWithAddressHook is the signature for custom SapPurchaseOrderItemDataWithAddress hook methods
	SapPurchaseOrderItemDataWithAddressHook func(context.Context, boil.ContextExecutor, *SapPurchaseOrderItemDataWithAddress) error

	sapPurchaseOrderItemDataWithAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseOrderItemDataWithAddressType                 = reflect.TypeOf(&SapPurchaseOrderItemDataWithAddress{})
	sapPurchaseOrderItemDataWithAddressMapping              = queries.MakeStructMapping(sapPurchaseOrderItemDataWithAddressType)
	sapPurchaseOrderItemDataWithAddressPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns)
	sapPurchaseOrderItemDataWithAddressInsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemDataWithAddressInsertCache          = make(map[string]insertCache)
	sapPurchaseOrderItemDataWithAddressUpdateCacheMut       sync.RWMutex
	sapPurchaseOrderItemDataWithAddressUpdateCache          = make(map[string]updateCache)
	sapPurchaseOrderItemDataWithAddressUpsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemDataWithAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseOrderItemDataWithAddressBeforeInsertHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressBeforeUpdateHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressBeforeDeleteHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressBeforeUpsertHooks []SapPurchaseOrderItemDataWithAddressHook

var sapPurchaseOrderItemDataWithAddressAfterInsertHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressAfterSelectHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressAfterUpdateHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressAfterDeleteHooks []SapPurchaseOrderItemDataWithAddressHook
var sapPurchaseOrderItemDataWithAddressAfterUpsertHooks []SapPurchaseOrderItemDataWithAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseOrderItemDataWithAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemDataWithAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseOrderItemDataWithAddressHook registers your hook function for all future operations.
func AddSapPurchaseOrderItemDataWithAddressHook(hookPoint boil.HookPoint, sapPurchaseOrderItemDataWithAddressHook SapPurchaseOrderItemDataWithAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapPurchaseOrderItemDataWithAddressBeforeInsertHooks = append(sapPurchaseOrderItemDataWithAddressBeforeInsertHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.BeforeUpdateHook:
		sapPurchaseOrderItemDataWithAddressBeforeUpdateHooks = append(sapPurchaseOrderItemDataWithAddressBeforeUpdateHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.BeforeDeleteHook:
		sapPurchaseOrderItemDataWithAddressBeforeDeleteHooks = append(sapPurchaseOrderItemDataWithAddressBeforeDeleteHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.BeforeUpsertHook:
		sapPurchaseOrderItemDataWithAddressBeforeUpsertHooks = append(sapPurchaseOrderItemDataWithAddressBeforeUpsertHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.AfterInsertHook:
		sapPurchaseOrderItemDataWithAddressAfterInsertHooks = append(sapPurchaseOrderItemDataWithAddressAfterInsertHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.AfterSelectHook:
		sapPurchaseOrderItemDataWithAddressAfterSelectHooks = append(sapPurchaseOrderItemDataWithAddressAfterSelectHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.AfterUpdateHook:
		sapPurchaseOrderItemDataWithAddressAfterUpdateHooks = append(sapPurchaseOrderItemDataWithAddressAfterUpdateHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.AfterDeleteHook:
		sapPurchaseOrderItemDataWithAddressAfterDeleteHooks = append(sapPurchaseOrderItemDataWithAddressAfterDeleteHooks, sapPurchaseOrderItemDataWithAddressHook)
	case boil.AfterUpsertHook:
		sapPurchaseOrderItemDataWithAddressAfterUpsertHooks = append(sapPurchaseOrderItemDataWithAddressAfterUpsertHooks, sapPurchaseOrderItemDataWithAddressHook)
	}
}

// One returns a single sapPurchaseOrderItemDataWithAddress record from the query.
func (q sapPurchaseOrderItemDataWithAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseOrderItemDataWithAddress, error) {
	o := &SapPurchaseOrderItemDataWithAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_order_item_data_with_address")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseOrderItemDataWithAddress records from the query.
func (q sapPurchaseOrderItemDataWithAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseOrderItemDataWithAddressSlice, error) {
	var o []*SapPurchaseOrderItemDataWithAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseOrderItemDataWithAddress slice")
	}

	if len(sapPurchaseOrderItemDataWithAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseOrderItemDataWithAddress records in the query.
func (q sapPurchaseOrderItemDataWithAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_order_item_data_with_address rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseOrderItemDataWithAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_order_item_data_with_address exists")
	}

	return count > 0, nil
}

// PurchaseOrderSapPurchaseOrderHeaderDataWithAddress pointed to by the foreign key.
func (o *SapPurchaseOrderItemDataWithAddress) PurchaseOrderSapPurchaseOrderHeaderDataWithAddress(mods ...qm.QueryMod) sapPurchaseOrderHeaderDataWithAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseOrder` = ?", o.PurchaseOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseOrderHeaderDataWithAddresses(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_header_data_with_address`")

	return query
}

// LoadPurchaseOrderSapPurchaseOrderHeaderDataWithAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseOrderItemDataWithAddressL) LoadPurchaseOrderSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderItemDataWithAddress interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderItemDataWithAddress
	var object *SapPurchaseOrderItemDataWithAddress

	if singular {
		object = maybeSapPurchaseOrderItemDataWithAddress.(*SapPurchaseOrderItemDataWithAddress)
	} else {
		slice = *maybeSapPurchaseOrderItemDataWithAddress.(*[]*SapPurchaseOrderItemDataWithAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderItemDataWithAddressR{}
		}
		args = append(args, object.PurchaseOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderItemDataWithAddressR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_header_data_with_address`),
		qm.WhereIn(`sap_purchase_order_header_data_with_address.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseOrderHeaderDataWithAddress")
	}

	var resultSlice []*SapPurchaseOrderHeaderDataWithAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseOrderHeaderDataWithAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_order_header_data_with_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_header_data_with_address")
	}

	if len(sapPurchaseOrderItemDataWithAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		foreign.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses = append(foreign.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseOrder == foreign.PurchaseOrder {
				local.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
				}
				foreign.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses = append(foreign.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseOrderSapPurchaseOrderHeaderDataWithAddress of the sapPurchaseOrderItemDataWithAddress to the related item.
// Sets o.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress to related.
// Adds o to related.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses.
func (o *SapPurchaseOrderItemDataWithAddress) SetPurchaseOrderSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseOrderHeaderDataWithAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_order_item_data_with_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseOrder"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseOrder, o.PurchaseOrder, o.PurchaseOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseOrder = related.PurchaseOrder
	if o.R == nil {
		o.R = &sapPurchaseOrderItemDataWithAddressR{
			PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: related,
		}
	} else {
		o.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = related
	}

	if related.R == nil {
		related.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchaseOrderSapPurchaseOrderItemDataWithAddresses: SapPurchaseOrderItemDataWithAddressSlice{o},
		}
	} else {
		related.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses = append(related.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses, o)
	}

	return nil
}

// SapPurchaseOrderItemDataWithAddresses retrieves all the records using an executor.
func SapPurchaseOrderItemDataWithAddresses(mods ...qm.QueryMod) sapPurchaseOrderItemDataWithAddressQuery {
	mods = append(mods, qm.From("`sap_purchase_order_item_data_with_address`"))
	return sapPurchaseOrderItemDataWithAddressQuery{NewQuery(mods...)}
}

// FindSapPurchaseOrderItemDataWithAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseOrderItemDataWithAddress(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, purchaseOrderItem string, selectCols ...string) (*SapPurchaseOrderItemDataWithAddress, error) {
	sapPurchaseOrderItemDataWithAddressObj := &SapPurchaseOrderItemDataWithAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_order_item_data_with_address` where `PurchaseOrder`=? AND `PurchaseOrderItem`=?", sel,
	)

	q := queries.Raw(query, purchaseOrder, purchaseOrderItem)

	err := q.Bind(ctx, exec, sapPurchaseOrderItemDataWithAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_order_item_data_with_address")
	}

	if err = sapPurchaseOrderItemDataWithAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseOrderItemDataWithAddressObj, err
	}

	return sapPurchaseOrderItemDataWithAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseOrderItemDataWithAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_data_with_address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemDataWithAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseOrderItemDataWithAddressInsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemDataWithAddressInsertCache[key]
	sapPurchaseOrderItemDataWithAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseOrderItemDataWithAddressAllColumns,
			sapPurchaseOrderItemDataWithAddressColumnsWithDefault,
			sapPurchaseOrderItemDataWithAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_order_item_data_with_address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_order_item_data_with_address` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_order_item_data_with_address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_order_item_data_with_address")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseOrder,
		o.PurchaseOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_data_with_address")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemDataWithAddressInsertCacheMut.Lock()
		sapPurchaseOrderItemDataWithAddressInsertCache[key] = cache
		sapPurchaseOrderItemDataWithAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseOrderItemDataWithAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseOrderItemDataWithAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseOrderItemDataWithAddressUpdateCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemDataWithAddressUpdateCache[key]
	sapPurchaseOrderItemDataWithAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseOrderItemDataWithAddressAllColumns,
			sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_order_item_data_with_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_order_item_data_with_address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, append(wl, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_order_item_data_with_address row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_order_item_data_with_address")
	}

	if !cached {
		sapPurchaseOrderItemDataWithAddressUpdateCacheMut.Lock()
		sapPurchaseOrderItemDataWithAddressUpdateCache[key] = cache
		sapPurchaseOrderItemDataWithAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseOrderItemDataWithAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_order_item_data_with_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_order_item_data_with_address")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseOrderItemDataWithAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemDataWithAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_order_item_data_with_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseOrderItemDataWithAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseOrderItemDataWithAddress")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseOrderItemDataWithAddressUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseOrderItemDataWithAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_data_with_address provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemDataWithAddressColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseOrderItemDataWithAddressUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseOrderItemDataWithAddressUpsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemDataWithAddressUpsertCache[key]
	sapPurchaseOrderItemDataWithAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseOrderItemDataWithAddressAllColumns,
			sapPurchaseOrderItemDataWithAddressColumnsWithDefault,
			sapPurchaseOrderItemDataWithAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapPurchaseOrderItemDataWithAddressAllColumns,
			sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_order_item_data_with_address, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_order_item_data_with_address`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_order_item_data_with_address` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_order_item_data_with_address")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseOrderItemDataWithAddressType, sapPurchaseOrderItemDataWithAddressMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_order_item_data_with_address")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_data_with_address")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemDataWithAddressUpsertCacheMut.Lock()
		sapPurchaseOrderItemDataWithAddressUpsertCache[key] = cache
		sapPurchaseOrderItemDataWithAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseOrderItemDataWithAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseOrderItemDataWithAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseOrderItemDataWithAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseOrderItemDataWithAddressPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_order_item_data_with_address` WHERE `PurchaseOrder`=? AND `PurchaseOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_order_item_data_with_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_order_item_data_with_address")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseOrderItemDataWithAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseOrderItemDataWithAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_order_item_data_with_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_data_with_address")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseOrderItemDataWithAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseOrderItemDataWithAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemDataWithAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_order_item_data_with_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseOrderItemDataWithAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_data_with_address")
	}

	if len(sapPurchaseOrderItemDataWithAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseOrderItemDataWithAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseOrderItemDataWithAddress(ctx, exec, o.PurchaseOrder, o.PurchaseOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseOrderItemDataWithAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseOrderItemDataWithAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemDataWithAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_order_item_data_with_address`.* FROM `sap_purchase_order_item_data_with_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseOrderItemDataWithAddressSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseOrderItemDataWithAddressExists checks if the SapPurchaseOrderItemDataWithAddress row exists.
func SapPurchaseOrderItemDataWithAddressExists(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, purchaseOrderItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_order_item_data_with_address` where `PurchaseOrder`=? AND `PurchaseOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseOrder, purchaseOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseOrder, purchaseOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_order_item_data_with_address exists")
	}

	return exists, nil
}
