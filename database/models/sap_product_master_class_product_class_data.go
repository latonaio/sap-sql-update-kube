// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterClassProductClassDatum is an object representing the database table.
type SapProductMasterClassProductClassDatum struct {
	Product         string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ClassInternalID string      `boil:"ClassInternalID" json:"ClassInternalID" toml:"ClassInternalID" yaml:"ClassInternalID"`
	KeyDate         string      `boil:"KeyDate" json:"KeyDate" toml:"KeyDate" yaml:"KeyDate"`
	ChangeNumber    null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ClassType       null.String `boil:"ClassType" json:"ClassType,omitempty" toml:"ClassType" yaml:"ClassType,omitempty"`

	R *sapProductMasterClassProductClassDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterClassProductClassDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterClassProductClassDatumColumns = struct {
	Product         string
	ClassInternalID string
	KeyDate         string
	ChangeNumber    string
	ClassType       string
}{
	Product:         "Product",
	ClassInternalID: "ClassInternalID",
	KeyDate:         "KeyDate",
	ChangeNumber:    "ChangeNumber",
	ClassType:       "ClassType",
}

var SapProductMasterClassProductClassDatumTableColumns = struct {
	Product         string
	ClassInternalID string
	KeyDate         string
	ChangeNumber    string
	ClassType       string
}{
	Product:         "sap_product_master_class_product_class_data.Product",
	ClassInternalID: "sap_product_master_class_product_class_data.ClassInternalID",
	KeyDate:         "sap_product_master_class_product_class_data.KeyDate",
	ChangeNumber:    "sap_product_master_class_product_class_data.ChangeNumber",
	ClassType:       "sap_product_master_class_product_class_data.ClassType",
}

// Generated where

var SapProductMasterClassProductClassDatumWhere = struct {
	Product         whereHelperstring
	ClassInternalID whereHelperstring
	KeyDate         whereHelperstring
	ChangeNumber    whereHelpernull_String
	ClassType       whereHelpernull_String
}{
	Product:         whereHelperstring{field: "`sap_product_master_class_product_class_data`.`Product`"},
	ClassInternalID: whereHelperstring{field: "`sap_product_master_class_product_class_data`.`ClassInternalID`"},
	KeyDate:         whereHelperstring{field: "`sap_product_master_class_product_class_data`.`KeyDate`"},
	ChangeNumber:    whereHelpernull_String{field: "`sap_product_master_class_product_class_data`.`ChangeNumber`"},
	ClassType:       whereHelpernull_String{field: "`sap_product_master_class_product_class_data`.`ClassType`"},
}

// SapProductMasterClassProductClassDatumRels is where relationship names are stored.
var SapProductMasterClassProductClassDatumRels = struct {
	ProductSapProductMasterClassProductGeneralDatum string
}{
	ProductSapProductMasterClassProductGeneralDatum: "ProductSapProductMasterClassProductGeneralDatum",
}

// sapProductMasterClassProductClassDatumR is where relationships are stored.
type sapProductMasterClassProductClassDatumR struct {
	ProductSapProductMasterClassProductGeneralDatum *SapProductMasterClassProductGeneralDatum `boil:"ProductSapProductMasterClassProductGeneralDatum" json:"ProductSapProductMasterClassProductGeneralDatum" toml:"ProductSapProductMasterClassProductGeneralDatum" yaml:"ProductSapProductMasterClassProductGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterClassProductClassDatumR) NewStruct() *sapProductMasterClassProductClassDatumR {
	return &sapProductMasterClassProductClassDatumR{}
}

func (r *sapProductMasterClassProductClassDatumR) GetProductSapProductMasterClassProductGeneralDatum() *SapProductMasterClassProductGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductSapProductMasterClassProductGeneralDatum
}

// sapProductMasterClassProductClassDatumL is where Load methods for each relationship are stored.
type sapProductMasterClassProductClassDatumL struct{}

var (
	sapProductMasterClassProductClassDatumAllColumns            = []string{"Product", "ClassInternalID", "KeyDate", "ChangeNumber", "ClassType"}
	sapProductMasterClassProductClassDatumColumnsWithoutDefault = []string{"Product", "ClassInternalID", "KeyDate", "ChangeNumber", "ClassType"}
	sapProductMasterClassProductClassDatumColumnsWithDefault    = []string{}
	sapProductMasterClassProductClassDatumPrimaryKeyColumns     = []string{"Product", "ClassInternalID", "KeyDate"}
	sapProductMasterClassProductClassDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterClassProductClassDatumSlice is an alias for a slice of pointers to SapProductMasterClassProductClassDatum.
	// This should almost always be used instead of []SapProductMasterClassProductClassDatum.
	SapProductMasterClassProductClassDatumSlice []*SapProductMasterClassProductClassDatum
	// SapProductMasterClassProductClassDatumHook is the signature for custom SapProductMasterClassProductClassDatum hook methods
	SapProductMasterClassProductClassDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterClassProductClassDatum) error

	sapProductMasterClassProductClassDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterClassProductClassDatumType                 = reflect.TypeOf(&SapProductMasterClassProductClassDatum{})
	sapProductMasterClassProductClassDatumMapping              = queries.MakeStructMapping(sapProductMasterClassProductClassDatumType)
	sapProductMasterClassProductClassDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, sapProductMasterClassProductClassDatumPrimaryKeyColumns)
	sapProductMasterClassProductClassDatumInsertCacheMut       sync.RWMutex
	sapProductMasterClassProductClassDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterClassProductClassDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterClassProductClassDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterClassProductClassDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterClassProductClassDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterClassProductClassDatumAfterSelectHooks []SapProductMasterClassProductClassDatumHook

var sapProductMasterClassProductClassDatumBeforeInsertHooks []SapProductMasterClassProductClassDatumHook
var sapProductMasterClassProductClassDatumAfterInsertHooks []SapProductMasterClassProductClassDatumHook

var sapProductMasterClassProductClassDatumBeforeUpdateHooks []SapProductMasterClassProductClassDatumHook
var sapProductMasterClassProductClassDatumAfterUpdateHooks []SapProductMasterClassProductClassDatumHook

var sapProductMasterClassProductClassDatumBeforeDeleteHooks []SapProductMasterClassProductClassDatumHook
var sapProductMasterClassProductClassDatumAfterDeleteHooks []SapProductMasterClassProductClassDatumHook

var sapProductMasterClassProductClassDatumBeforeUpsertHooks []SapProductMasterClassProductClassDatumHook
var sapProductMasterClassProductClassDatumAfterUpsertHooks []SapProductMasterClassProductClassDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterClassProductClassDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterClassProductClassDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterClassProductClassDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterClassProductClassDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterClassProductClassDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterClassProductClassDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterClassProductClassDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterClassProductClassDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterClassProductClassDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductClassDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterClassProductClassDatumHook registers your hook function for all future operations.
func AddSapProductMasterClassProductClassDatumHook(hookPoint boil.HookPoint, sapProductMasterClassProductClassDatumHook SapProductMasterClassProductClassDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterClassProductClassDatumAfterSelectHooks = append(sapProductMasterClassProductClassDatumAfterSelectHooks, sapProductMasterClassProductClassDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterClassProductClassDatumBeforeInsertHooks = append(sapProductMasterClassProductClassDatumBeforeInsertHooks, sapProductMasterClassProductClassDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterClassProductClassDatumAfterInsertHooks = append(sapProductMasterClassProductClassDatumAfterInsertHooks, sapProductMasterClassProductClassDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterClassProductClassDatumBeforeUpdateHooks = append(sapProductMasterClassProductClassDatumBeforeUpdateHooks, sapProductMasterClassProductClassDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterClassProductClassDatumAfterUpdateHooks = append(sapProductMasterClassProductClassDatumAfterUpdateHooks, sapProductMasterClassProductClassDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterClassProductClassDatumBeforeDeleteHooks = append(sapProductMasterClassProductClassDatumBeforeDeleteHooks, sapProductMasterClassProductClassDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterClassProductClassDatumAfterDeleteHooks = append(sapProductMasterClassProductClassDatumAfterDeleteHooks, sapProductMasterClassProductClassDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterClassProductClassDatumBeforeUpsertHooks = append(sapProductMasterClassProductClassDatumBeforeUpsertHooks, sapProductMasterClassProductClassDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterClassProductClassDatumAfterUpsertHooks = append(sapProductMasterClassProductClassDatumAfterUpsertHooks, sapProductMasterClassProductClassDatumHook)
	}
}

// One returns a single sapProductMasterClassProductClassDatum record from the query.
func (q sapProductMasterClassProductClassDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterClassProductClassDatum, error) {
	o := &SapProductMasterClassProductClassDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_class_product_class_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterClassProductClassDatum records from the query.
func (q sapProductMasterClassProductClassDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterClassProductClassDatumSlice, error) {
	var o []*SapProductMasterClassProductClassDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterClassProductClassDatum slice")
	}

	if len(sapProductMasterClassProductClassDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterClassProductClassDatum records in the query.
func (q sapProductMasterClassProductClassDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_class_product_class_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterClassProductClassDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_class_product_class_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterClassProductGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterClassProductClassDatum) ProductSapProductMasterClassProductGeneralDatum(mods ...qm.QueryMod) sapProductMasterClassProductGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return SapProductMasterClassProductGeneralData(queryMods...)
}

// LoadProductSapProductMasterClassProductGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterClassProductClassDatumL) LoadProductSapProductMasterClassProductGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterClassProductClassDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterClassProductClassDatum
	var object *SapProductMasterClassProductClassDatum

	if singular {
		object = maybeSapProductMasterClassProductClassDatum.(*SapProductMasterClassProductClassDatum)
	} else {
		slice = *maybeSapProductMasterClassProductClassDatum.(*[]*SapProductMasterClassProductClassDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterClassProductClassDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterClassProductClassDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_class_product_general_data`),
		qm.WhereIn(`sap_product_master_class_product_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterClassProductGeneralDatum")
	}

	var resultSlice []*SapProductMasterClassProductGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterClassProductGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_class_product_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_class_product_general_data")
	}

	if len(sapProductMasterClassProductClassDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterClassProductGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterClassProductGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterClassProductClassData = append(foreign.R.ProductSapProductMasterClassProductClassData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterClassProductGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterClassProductGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterClassProductClassData = append(foreign.R.ProductSapProductMasterClassProductClassData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterClassProductGeneralDatum of the sapProductMasterClassProductClassDatum to the related item.
// Sets o.R.ProductSapProductMasterClassProductGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterClassProductClassData.
func (o *SapProductMasterClassProductClassDatum) SetProductSapProductMasterClassProductGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterClassProductGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_class_product_class_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.ClassInternalID, o.KeyDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterClassProductClassDatumR{
			ProductSapProductMasterClassProductGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterClassProductGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterClassProductGeneralDatumR{
			ProductSapProductMasterClassProductClassData: SapProductMasterClassProductClassDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterClassProductClassData = append(related.R.ProductSapProductMasterClassProductClassData, o)
	}

	return nil
}

// SapProductMasterClassProductClassData retrieves all the records using an executor.
func SapProductMasterClassProductClassData(mods ...qm.QueryMod) sapProductMasterClassProductClassDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_class_product_class_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_product_master_class_product_class_data`.*"})
	}

	return sapProductMasterClassProductClassDatumQuery{q}
}

// FindSapProductMasterClassProductClassDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterClassProductClassDatum(ctx context.Context, exec boil.ContextExecutor, product string, classInternalID string, keyDate string, selectCols ...string) (*SapProductMasterClassProductClassDatum, error) {
	sapProductMasterClassProductClassDatumObj := &SapProductMasterClassProductClassDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_class_product_class_data` where `Product`=? AND `ClassInternalID`=? AND `KeyDate`=?", sel,
	)

	q := queries.Raw(query, product, classInternalID, keyDate)

	err := q.Bind(ctx, exec, sapProductMasterClassProductClassDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_class_product_class_data")
	}

	if err = sapProductMasterClassProductClassDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterClassProductClassDatumObj, err
	}

	return sapProductMasterClassProductClassDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterClassProductClassDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_product_class_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassProductClassDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterClassProductClassDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterClassProductClassDatumInsertCache[key]
	sapProductMasterClassProductClassDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterClassProductClassDatumAllColumns,
			sapProductMasterClassProductClassDatumColumnsWithDefault,
			sapProductMasterClassProductClassDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_class_product_class_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_class_product_class_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_class_product_class_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_class_product_class_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.ClassInternalID,
		o.KeyDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_product_class_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassProductClassDatumInsertCacheMut.Lock()
		sapProductMasterClassProductClassDatumInsertCache[key] = cache
		sapProductMasterClassProductClassDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterClassProductClassDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterClassProductClassDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterClassProductClassDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterClassProductClassDatumUpdateCache[key]
	sapProductMasterClassProductClassDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterClassProductClassDatumAllColumns,
			sapProductMasterClassProductClassDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_class_product_class_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_class_product_class_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, append(wl, sapProductMasterClassProductClassDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_class_product_class_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_class_product_class_data")
	}

	if !cached {
		sapProductMasterClassProductClassDatumUpdateCacheMut.Lock()
		sapProductMasterClassProductClassDatumUpdateCache[key] = cache
		sapProductMasterClassProductClassDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterClassProductClassDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_class_product_class_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_class_product_class_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterClassProductClassDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductClassDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_class_product_class_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterClassProductClassDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterClassProductClassDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterClassProductClassDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterClassProductClassDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_product_class_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassProductClassDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterClassProductClassDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterClassProductClassDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterClassProductClassDatumUpsertCache[key]
	sapProductMasterClassProductClassDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterClassProductClassDatumAllColumns,
			sapProductMasterClassProductClassDatumColumnsWithDefault,
			sapProductMasterClassProductClassDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterClassProductClassDatumAllColumns,
			sapProductMasterClassProductClassDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_class_product_class_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_class_product_class_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_class_product_class_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_class_product_class_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterClassProductClassDatumType, sapProductMasterClassProductClassDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_class_product_class_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_product_class_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassProductClassDatumUpsertCacheMut.Lock()
		sapProductMasterClassProductClassDatumUpsertCache[key] = cache
		sapProductMasterClassProductClassDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterClassProductClassDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterClassProductClassDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterClassProductClassDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterClassProductClassDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_class_product_class_data` WHERE `Product`=? AND `ClassInternalID`=? AND `KeyDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_class_product_class_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_class_product_class_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterClassProductClassDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterClassProductClassDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_class_product_class_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_product_class_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterClassProductClassDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterClassProductClassDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductClassDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_class_product_class_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterClassProductClassDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_product_class_data")
	}

	if len(sapProductMasterClassProductClassDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterClassProductClassDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterClassProductClassDatum(ctx, exec, o.Product, o.ClassInternalID, o.KeyDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterClassProductClassDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterClassProductClassDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductClassDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_class_product_class_data`.* FROM `sap_product_master_class_product_class_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterClassProductClassDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterClassProductClassDatumExists checks if the SapProductMasterClassProductClassDatum row exists.
func SapProductMasterClassProductClassDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, classInternalID string, keyDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_class_product_class_data` where `Product`=? AND `ClassInternalID`=? AND `KeyDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, classInternalID, keyDate)
	}
	row := exec.QueryRowContext(ctx, sql, product, classInternalID, keyDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_class_product_class_data exists")
	}

	return exists, nil
}
