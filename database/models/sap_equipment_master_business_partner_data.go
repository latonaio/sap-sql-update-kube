// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapEquipmentMasterBusinessPartnerDatum is an object representing the database table.
type SapEquipmentMasterBusinessPartnerDatum struct {
	Equipment                  string      `boil:"Equipment" json:"Equipment" toml:"Equipment" yaml:"Equipment"`
	PartnerFunction            string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	EquipmentPartnerObjectNmbr string      `boil:"EquipmentPartnerObjectNmbr" json:"EquipmentPartnerObjectNmbr" toml:"EquipmentPartnerObjectNmbr" yaml:"EquipmentPartnerObjectNmbr"`
	Partner                    null.String `boil:"Partner" json:"Partner,omitempty" toml:"Partner" yaml:"Partner,omitempty"`
	CreationDate               null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`

	R *sapEquipmentMasterBusinessPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapEquipmentMasterBusinessPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapEquipmentMasterBusinessPartnerDatumColumns = struct {
	Equipment                  string
	PartnerFunction            string
	EquipmentPartnerObjectNmbr string
	Partner                    string
	CreationDate               string
}{
	Equipment:                  "Equipment",
	PartnerFunction:            "PartnerFunction",
	EquipmentPartnerObjectNmbr: "EquipmentPartnerObjectNmbr",
	Partner:                    "Partner",
	CreationDate:               "CreationDate",
}

var SapEquipmentMasterBusinessPartnerDatumTableColumns = struct {
	Equipment                  string
	PartnerFunction            string
	EquipmentPartnerObjectNmbr string
	Partner                    string
	CreationDate               string
}{
	Equipment:                  "sap_equipment_master_business_partner_data.Equipment",
	PartnerFunction:            "sap_equipment_master_business_partner_data.PartnerFunction",
	EquipmentPartnerObjectNmbr: "sap_equipment_master_business_partner_data.EquipmentPartnerObjectNmbr",
	Partner:                    "sap_equipment_master_business_partner_data.Partner",
	CreationDate:               "sap_equipment_master_business_partner_data.CreationDate",
}

// Generated where

var SapEquipmentMasterBusinessPartnerDatumWhere = struct {
	Equipment                  whereHelperstring
	PartnerFunction            whereHelperstring
	EquipmentPartnerObjectNmbr whereHelperstring
	Partner                    whereHelpernull_String
	CreationDate               whereHelpernull_String
}{
	Equipment:                  whereHelperstring{field: "`sap_equipment_master_business_partner_data`.`Equipment`"},
	PartnerFunction:            whereHelperstring{field: "`sap_equipment_master_business_partner_data`.`PartnerFunction`"},
	EquipmentPartnerObjectNmbr: whereHelperstring{field: "`sap_equipment_master_business_partner_data`.`EquipmentPartnerObjectNmbr`"},
	Partner:                    whereHelpernull_String{field: "`sap_equipment_master_business_partner_data`.`Partner`"},
	CreationDate:               whereHelpernull_String{field: "`sap_equipment_master_business_partner_data`.`CreationDate`"},
}

// SapEquipmentMasterBusinessPartnerDatumRels is where relationship names are stored.
var SapEquipmentMasterBusinessPartnerDatumRels = struct {
	EquipmentSapEquipmentMasterEquipmentDatum string
}{
	EquipmentSapEquipmentMasterEquipmentDatum: "EquipmentSapEquipmentMasterEquipmentDatum",
}

// sapEquipmentMasterBusinessPartnerDatumR is where relationships are stored.
type sapEquipmentMasterBusinessPartnerDatumR struct {
	EquipmentSapEquipmentMasterEquipmentDatum *SapEquipmentMasterEquipmentDatum `boil:"EquipmentSapEquipmentMasterEquipmentDatum" json:"EquipmentSapEquipmentMasterEquipmentDatum" toml:"EquipmentSapEquipmentMasterEquipmentDatum" yaml:"EquipmentSapEquipmentMasterEquipmentDatum"`
}

// NewStruct creates a new relationship struct
func (*sapEquipmentMasterBusinessPartnerDatumR) NewStruct() *sapEquipmentMasterBusinessPartnerDatumR {
	return &sapEquipmentMasterBusinessPartnerDatumR{}
}

// sapEquipmentMasterBusinessPartnerDatumL is where Load methods for each relationship are stored.
type sapEquipmentMasterBusinessPartnerDatumL struct{}

var (
	sapEquipmentMasterBusinessPartnerDatumAllColumns            = []string{"Equipment", "PartnerFunction", "EquipmentPartnerObjectNmbr", "Partner", "CreationDate"}
	sapEquipmentMasterBusinessPartnerDatumColumnsWithoutDefault = []string{"Equipment", "PartnerFunction", "EquipmentPartnerObjectNmbr", "Partner", "CreationDate"}
	sapEquipmentMasterBusinessPartnerDatumColumnsWithDefault    = []string{}
	sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns     = []string{"Equipment", "PartnerFunction", "EquipmentPartnerObjectNmbr"}
	sapEquipmentMasterBusinessPartnerDatumGeneratedColumns      = []string{}
)

type (
	// SapEquipmentMasterBusinessPartnerDatumSlice is an alias for a slice of pointers to SapEquipmentMasterBusinessPartnerDatum.
	// This should almost always be used instead of []SapEquipmentMasterBusinessPartnerDatum.
	SapEquipmentMasterBusinessPartnerDatumSlice []*SapEquipmentMasterBusinessPartnerDatum
	// SapEquipmentMasterBusinessPartnerDatumHook is the signature for custom SapEquipmentMasterBusinessPartnerDatum hook methods
	SapEquipmentMasterBusinessPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapEquipmentMasterBusinessPartnerDatum) error

	sapEquipmentMasterBusinessPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapEquipmentMasterBusinessPartnerDatumType                 = reflect.TypeOf(&SapEquipmentMasterBusinessPartnerDatum{})
	sapEquipmentMasterBusinessPartnerDatumMapping              = queries.MakeStructMapping(sapEquipmentMasterBusinessPartnerDatumType)
	sapEquipmentMasterBusinessPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns)
	sapEquipmentMasterBusinessPartnerDatumInsertCacheMut       sync.RWMutex
	sapEquipmentMasterBusinessPartnerDatumInsertCache          = make(map[string]insertCache)
	sapEquipmentMasterBusinessPartnerDatumUpdateCacheMut       sync.RWMutex
	sapEquipmentMasterBusinessPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapEquipmentMasterBusinessPartnerDatumUpsertCacheMut       sync.RWMutex
	sapEquipmentMasterBusinessPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks []SapEquipmentMasterBusinessPartnerDatumHook

var sapEquipmentMasterBusinessPartnerDatumBeforeInsertHooks []SapEquipmentMasterBusinessPartnerDatumHook
var sapEquipmentMasterBusinessPartnerDatumAfterInsertHooks []SapEquipmentMasterBusinessPartnerDatumHook

var sapEquipmentMasterBusinessPartnerDatumBeforeUpdateHooks []SapEquipmentMasterBusinessPartnerDatumHook
var sapEquipmentMasterBusinessPartnerDatumAfterUpdateHooks []SapEquipmentMasterBusinessPartnerDatumHook

var sapEquipmentMasterBusinessPartnerDatumBeforeDeleteHooks []SapEquipmentMasterBusinessPartnerDatumHook
var sapEquipmentMasterBusinessPartnerDatumAfterDeleteHooks []SapEquipmentMasterBusinessPartnerDatumHook

var sapEquipmentMasterBusinessPartnerDatumBeforeUpsertHooks []SapEquipmentMasterBusinessPartnerDatumHook
var sapEquipmentMasterBusinessPartnerDatumAfterUpsertHooks []SapEquipmentMasterBusinessPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapEquipmentMasterBusinessPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapEquipmentMasterBusinessPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapEquipmentMasterBusinessPartnerDatumHook registers your hook function for all future operations.
func AddSapEquipmentMasterBusinessPartnerDatumHook(hookPoint boil.HookPoint, sapEquipmentMasterBusinessPartnerDatumHook SapEquipmentMasterBusinessPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks = append(sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.BeforeInsertHook:
		sapEquipmentMasterBusinessPartnerDatumBeforeInsertHooks = append(sapEquipmentMasterBusinessPartnerDatumBeforeInsertHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.AfterInsertHook:
		sapEquipmentMasterBusinessPartnerDatumAfterInsertHooks = append(sapEquipmentMasterBusinessPartnerDatumAfterInsertHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapEquipmentMasterBusinessPartnerDatumBeforeUpdateHooks = append(sapEquipmentMasterBusinessPartnerDatumBeforeUpdateHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapEquipmentMasterBusinessPartnerDatumAfterUpdateHooks = append(sapEquipmentMasterBusinessPartnerDatumAfterUpdateHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapEquipmentMasterBusinessPartnerDatumBeforeDeleteHooks = append(sapEquipmentMasterBusinessPartnerDatumBeforeDeleteHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapEquipmentMasterBusinessPartnerDatumAfterDeleteHooks = append(sapEquipmentMasterBusinessPartnerDatumAfterDeleteHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapEquipmentMasterBusinessPartnerDatumBeforeUpsertHooks = append(sapEquipmentMasterBusinessPartnerDatumBeforeUpsertHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapEquipmentMasterBusinessPartnerDatumAfterUpsertHooks = append(sapEquipmentMasterBusinessPartnerDatumAfterUpsertHooks, sapEquipmentMasterBusinessPartnerDatumHook)
	}
}

// One returns a single sapEquipmentMasterBusinessPartnerDatum record from the query.
func (q sapEquipmentMasterBusinessPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapEquipmentMasterBusinessPartnerDatum, error) {
	o := &SapEquipmentMasterBusinessPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_equipment_master_business_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapEquipmentMasterBusinessPartnerDatum records from the query.
func (q sapEquipmentMasterBusinessPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapEquipmentMasterBusinessPartnerDatumSlice, error) {
	var o []*SapEquipmentMasterBusinessPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapEquipmentMasterBusinessPartnerDatum slice")
	}

	if len(sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapEquipmentMasterBusinessPartnerDatum records in the query.
func (q sapEquipmentMasterBusinessPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_equipment_master_business_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapEquipmentMasterBusinessPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_equipment_master_business_partner_data exists")
	}

	return count > 0, nil
}

// EquipmentSapEquipmentMasterEquipmentDatum pointed to by the foreign key.
func (o *SapEquipmentMasterBusinessPartnerDatum) EquipmentSapEquipmentMasterEquipmentDatum(mods ...qm.QueryMod) sapEquipmentMasterEquipmentDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Equipment` = ?", o.Equipment),
	}

	queryMods = append(queryMods, mods...)

	query := SapEquipmentMasterEquipmentData(queryMods...)
	queries.SetFrom(query.Query, "`sap_equipment_master_equipment_data`")

	return query
}

// LoadEquipmentSapEquipmentMasterEquipmentDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapEquipmentMasterBusinessPartnerDatumL) LoadEquipmentSapEquipmentMasterEquipmentDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapEquipmentMasterBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapEquipmentMasterBusinessPartnerDatum
	var object *SapEquipmentMasterBusinessPartnerDatum

	if singular {
		object = maybeSapEquipmentMasterBusinessPartnerDatum.(*SapEquipmentMasterBusinessPartnerDatum)
	} else {
		slice = *maybeSapEquipmentMasterBusinessPartnerDatum.(*[]*SapEquipmentMasterBusinessPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapEquipmentMasterBusinessPartnerDatumR{}
		}
		args = append(args, object.Equipment)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapEquipmentMasterBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.Equipment {
					continue Outer
				}
			}

			args = append(args, obj.Equipment)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_equipment_master_equipment_data`),
		qm.WhereIn(`sap_equipment_master_equipment_data.Equipment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapEquipmentMasterEquipmentDatum")
	}

	var resultSlice []*SapEquipmentMasterEquipmentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapEquipmentMasterEquipmentDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_equipment_master_equipment_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_equipment_master_equipment_data")
	}

	if len(sapEquipmentMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquipmentSapEquipmentMasterEquipmentDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapEquipmentMasterEquipmentDatumR{}
		}
		foreign.R.EquipmentSapEquipmentMasterBusinessPartnerData = append(foreign.R.EquipmentSapEquipmentMasterBusinessPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Equipment == foreign.Equipment {
				local.R.EquipmentSapEquipmentMasterEquipmentDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapEquipmentMasterEquipmentDatumR{}
				}
				foreign.R.EquipmentSapEquipmentMasterBusinessPartnerData = append(foreign.R.EquipmentSapEquipmentMasterBusinessPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetEquipmentSapEquipmentMasterEquipmentDatum of the sapEquipmentMasterBusinessPartnerDatum to the related item.
// Sets o.R.EquipmentSapEquipmentMasterEquipmentDatum to related.
// Adds o to related.R.EquipmentSapEquipmentMasterBusinessPartnerData.
func (o *SapEquipmentMasterBusinessPartnerDatum) SetEquipmentSapEquipmentMasterEquipmentDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapEquipmentMasterEquipmentDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_equipment_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Equipment"}),
		strmangle.WhereClause("`", "`", 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Equipment, o.Equipment, o.PartnerFunction, o.EquipmentPartnerObjectNmbr}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Equipment = related.Equipment
	if o.R == nil {
		o.R = &sapEquipmentMasterBusinessPartnerDatumR{
			EquipmentSapEquipmentMasterEquipmentDatum: related,
		}
	} else {
		o.R.EquipmentSapEquipmentMasterEquipmentDatum = related
	}

	if related.R == nil {
		related.R = &sapEquipmentMasterEquipmentDatumR{
			EquipmentSapEquipmentMasterBusinessPartnerData: SapEquipmentMasterBusinessPartnerDatumSlice{o},
		}
	} else {
		related.R.EquipmentSapEquipmentMasterBusinessPartnerData = append(related.R.EquipmentSapEquipmentMasterBusinessPartnerData, o)
	}

	return nil
}

// SapEquipmentMasterBusinessPartnerData retrieves all the records using an executor.
func SapEquipmentMasterBusinessPartnerData(mods ...qm.QueryMod) sapEquipmentMasterBusinessPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_equipment_master_business_partner_data`"))
	return sapEquipmentMasterBusinessPartnerDatumQuery{NewQuery(mods...)}
}

// FindSapEquipmentMasterBusinessPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapEquipmentMasterBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, equipment string, partnerFunction string, equipmentPartnerObjectNmbr string, selectCols ...string) (*SapEquipmentMasterBusinessPartnerDatum, error) {
	sapEquipmentMasterBusinessPartnerDatumObj := &SapEquipmentMasterBusinessPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_equipment_master_business_partner_data` where `Equipment`=? AND `PartnerFunction`=? AND `EquipmentPartnerObjectNmbr`=?", sel,
	)

	q := queries.Raw(query, equipment, partnerFunction, equipmentPartnerObjectNmbr)

	err := q.Bind(ctx, exec, sapEquipmentMasterBusinessPartnerDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_equipment_master_business_partner_data")
	}

	if err = sapEquipmentMasterBusinessPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapEquipmentMasterBusinessPartnerDatumObj, err
	}

	return sapEquipmentMasterBusinessPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapEquipmentMasterBusinessPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_equipment_master_business_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapEquipmentMasterBusinessPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapEquipmentMasterBusinessPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapEquipmentMasterBusinessPartnerDatumInsertCache[key]
	sapEquipmentMasterBusinessPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapEquipmentMasterBusinessPartnerDatumAllColumns,
			sapEquipmentMasterBusinessPartnerDatumColumnsWithDefault,
			sapEquipmentMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_equipment_master_business_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_equipment_master_business_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_equipment_master_business_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_equipment_master_business_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Equipment,
		o.PartnerFunction,
		o.EquipmentPartnerObjectNmbr,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_equipment_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapEquipmentMasterBusinessPartnerDatumInsertCacheMut.Lock()
		sapEquipmentMasterBusinessPartnerDatumInsertCache[key] = cache
		sapEquipmentMasterBusinessPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapEquipmentMasterBusinessPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapEquipmentMasterBusinessPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapEquipmentMasterBusinessPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapEquipmentMasterBusinessPartnerDatumUpdateCache[key]
	sapEquipmentMasterBusinessPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapEquipmentMasterBusinessPartnerDatumAllColumns,
			sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_equipment_master_business_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_equipment_master_business_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, append(wl, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_equipment_master_business_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_equipment_master_business_partner_data")
	}

	if !cached {
		sapEquipmentMasterBusinessPartnerDatumUpdateCacheMut.Lock()
		sapEquipmentMasterBusinessPartnerDatumUpdateCache[key] = cache
		sapEquipmentMasterBusinessPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapEquipmentMasterBusinessPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_equipment_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_equipment_master_business_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapEquipmentMasterBusinessPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapEquipmentMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_equipment_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapEquipmentMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapEquipmentMasterBusinessPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapEquipmentMasterBusinessPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapEquipmentMasterBusinessPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_equipment_master_business_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapEquipmentMasterBusinessPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapEquipmentMasterBusinessPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapEquipmentMasterBusinessPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapEquipmentMasterBusinessPartnerDatumUpsertCache[key]
	sapEquipmentMasterBusinessPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapEquipmentMasterBusinessPartnerDatumAllColumns,
			sapEquipmentMasterBusinessPartnerDatumColumnsWithDefault,
			sapEquipmentMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapEquipmentMasterBusinessPartnerDatumAllColumns,
			sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_equipment_master_business_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_equipment_master_business_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_equipment_master_business_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_equipment_master_business_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapEquipmentMasterBusinessPartnerDatumType, sapEquipmentMasterBusinessPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_equipment_master_business_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_equipment_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapEquipmentMasterBusinessPartnerDatumUpsertCacheMut.Lock()
		sapEquipmentMasterBusinessPartnerDatumUpsertCache[key] = cache
		sapEquipmentMasterBusinessPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapEquipmentMasterBusinessPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapEquipmentMasterBusinessPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapEquipmentMasterBusinessPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapEquipmentMasterBusinessPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_equipment_master_business_partner_data` WHERE `Equipment`=? AND `PartnerFunction`=? AND `EquipmentPartnerObjectNmbr`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_equipment_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_equipment_master_business_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapEquipmentMasterBusinessPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapEquipmentMasterBusinessPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_equipment_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_equipment_master_business_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapEquipmentMasterBusinessPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapEquipmentMasterBusinessPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapEquipmentMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_equipment_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapEquipmentMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_equipment_master_business_partner_data")
	}

	if len(sapEquipmentMasterBusinessPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapEquipmentMasterBusinessPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapEquipmentMasterBusinessPartnerDatum(ctx, exec, o.Equipment, o.PartnerFunction, o.EquipmentPartnerObjectNmbr)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapEquipmentMasterBusinessPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapEquipmentMasterBusinessPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapEquipmentMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_equipment_master_business_partner_data`.* FROM `sap_equipment_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapEquipmentMasterBusinessPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapEquipmentMasterBusinessPartnerDatumExists checks if the SapEquipmentMasterBusinessPartnerDatum row exists.
func SapEquipmentMasterBusinessPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, equipment string, partnerFunction string, equipmentPartnerObjectNmbr string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_equipment_master_business_partner_data` where `Equipment`=? AND `PartnerFunction`=? AND `EquipmentPartnerObjectNmbr`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, equipment, partnerFunction, equipmentPartnerObjectNmbr)
	}
	row := exec.QueryRowContext(ctx, sql, equipment, partnerFunction, equipmentPartnerObjectNmbr)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_equipment_master_business_partner_data exists")
	}

	return exists, nil
}
