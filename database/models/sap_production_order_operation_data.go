// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionOrderOperationDatum is an object representing the database table.
type SapProductionOrderOperationDatum struct {
	ManufacturingOrder             string      `boil:"ManufacturingOrder" json:"ManufacturingOrder" toml:"ManufacturingOrder" yaml:"ManufacturingOrder"`
	ManufacturingOrderSequence     string      `boil:"ManufacturingOrderSequence" json:"ManufacturingOrderSequence" toml:"ManufacturingOrderSequence" yaml:"ManufacturingOrderSequence"`
	OrderInternalBillOfOperations  string      `boil:"OrderInternalBillOfOperations" json:"OrderInternalBillOfOperations" toml:"OrderInternalBillOfOperations" yaml:"OrderInternalBillOfOperations"`
	OrderIntBillOfOperationsItem   string      `boil:"OrderIntBillOfOperationsItem" json:"OrderIntBillOfOperationsItem" toml:"OrderIntBillOfOperationsItem" yaml:"OrderIntBillOfOperationsItem"`
	MfgOrderSequenceText           null.String `boil:"MfgOrderSequenceText" json:"MfgOrderSequenceText,omitempty" toml:"MfgOrderSequenceText" yaml:"MfgOrderSequenceText,omitempty"`
	ManufacturingOrderOperation    null.String `boil:"ManufacturingOrderOperation" json:"ManufacturingOrderOperation,omitempty" toml:"ManufacturingOrderOperation" yaml:"ManufacturingOrderOperation,omitempty"`
	ManufacturingOrderSubOperation null.String `boil:"ManufacturingOrderSubOperation" json:"ManufacturingOrderSubOperation,omitempty" toml:"ManufacturingOrderSubOperation" yaml:"ManufacturingOrderSubOperation,omitempty"`
	ManufacturingOrderCategory     null.String `boil:"ManufacturingOrderCategory" json:"ManufacturingOrderCategory,omitempty" toml:"ManufacturingOrderCategory" yaml:"ManufacturingOrderCategory,omitempty"`
	ManufacturingOrderType         null.String `boil:"ManufacturingOrderType" json:"ManufacturingOrderType,omitempty" toml:"ManufacturingOrderType" yaml:"ManufacturingOrderType,omitempty"`
	MfgOrderOperationText          null.String `boil:"MfgOrderOperationText" json:"MfgOrderOperationText,omitempty" toml:"MfgOrderOperationText" yaml:"MfgOrderOperationText,omitempty"`
	OperationIsCreated             null.String `boil:"OperationIsCreated" json:"OperationIsCreated,omitempty" toml:"OperationIsCreated" yaml:"OperationIsCreated,omitempty"`
	OperationIsReleased            null.String `boil:"OperationIsReleased" json:"OperationIsReleased,omitempty" toml:"OperationIsReleased" yaml:"OperationIsReleased,omitempty"`
	OperationIsPrinted             null.String `boil:"OperationIsPrinted" json:"OperationIsPrinted,omitempty" toml:"OperationIsPrinted" yaml:"OperationIsPrinted,omitempty"`
	OperationIsConfirmed           null.String `boil:"OperationIsConfirmed" json:"OperationIsConfirmed,omitempty" toml:"OperationIsConfirmed" yaml:"OperationIsConfirmed,omitempty"`
	OperationIsPartiallyConfirmed  null.String `boil:"OperationIsPartiallyConfirmed" json:"OperationIsPartiallyConfirmed,omitempty" toml:"OperationIsPartiallyConfirmed" yaml:"OperationIsPartiallyConfirmed,omitempty"`
	OperationIsDeleted             null.String `boil:"OperationIsDeleted" json:"OperationIsDeleted,omitempty" toml:"OperationIsDeleted" yaml:"OperationIsDeleted,omitempty"`
	OperationIsTechlyCompleted     null.String `boil:"OperationIsTechlyCompleted" json:"OperationIsTechlyCompleted,omitempty" toml:"OperationIsTechlyCompleted" yaml:"OperationIsTechlyCompleted,omitempty"`
	OperationIsClosed              null.String `boil:"OperationIsClosed" json:"OperationIsClosed,omitempty" toml:"OperationIsClosed" yaml:"OperationIsClosed,omitempty"`
	OperationIsScheduled           null.String `boil:"OperationIsScheduled" json:"OperationIsScheduled,omitempty" toml:"OperationIsScheduled" yaml:"OperationIsScheduled,omitempty"`
	OperationIsPartiallyDelivered  null.String `boil:"OperationIsPartiallyDelivered" json:"OperationIsPartiallyDelivered,omitempty" toml:"OperationIsPartiallyDelivered" yaml:"OperationIsPartiallyDelivered,omitempty"`
	OperationIsDelivered           null.String `boil:"OperationIsDelivered" json:"OperationIsDelivered,omitempty" toml:"OperationIsDelivered" yaml:"OperationIsDelivered,omitempty"`
	ProductionPlant                null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	WorkCenterInternalID           null.String `boil:"WorkCenterInternalID" json:"WorkCenterInternalID,omitempty" toml:"WorkCenterInternalID" yaml:"WorkCenterInternalID,omitempty"`
	WorkCenterTypeCode             null.String `boil:"WorkCenterTypeCode" json:"WorkCenterTypeCode,omitempty" toml:"WorkCenterTypeCode" yaml:"WorkCenterTypeCode,omitempty"`
	WorkCenter                     null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	OperationControlProfile        null.String `boil:"OperationControlProfile" json:"OperationControlProfile,omitempty" toml:"OperationControlProfile" yaml:"OperationControlProfile,omitempty"`
	OpErlstSchedldExecStrtDte      null.String `boil:"OpErlstSchedldExecStrtDte" json:"OpErlstSchedldExecStrtDte,omitempty" toml:"OpErlstSchedldExecStrtDte" yaml:"OpErlstSchedldExecStrtDte,omitempty"`
	OpErlstSchedldExecStrtTme      null.String `boil:"OpErlstSchedldExecStrtTme" json:"OpErlstSchedldExecStrtTme,omitempty" toml:"OpErlstSchedldExecStrtTme" yaml:"OpErlstSchedldExecStrtTme,omitempty"`
	OpErlstSchedldExecEndDte       null.String `boil:"OpErlstSchedldExecEndDte" json:"OpErlstSchedldExecEndDte,omitempty" toml:"OpErlstSchedldExecEndDte" yaml:"OpErlstSchedldExecEndDte,omitempty"`
	OpErlstSchedldExecEndTme       null.String `boil:"OpErlstSchedldExecEndTme" json:"OpErlstSchedldExecEndTme,omitempty" toml:"OpErlstSchedldExecEndTme" yaml:"OpErlstSchedldExecEndTme,omitempty"`
	OpActualExecutionStartDate     null.String `boil:"OpActualExecutionStartDate" json:"OpActualExecutionStartDate,omitempty" toml:"OpActualExecutionStartDate" yaml:"OpActualExecutionStartDate,omitempty"`
	OpActualExecutionStartTime     null.String `boil:"OpActualExecutionStartTime" json:"OpActualExecutionStartTime,omitempty" toml:"OpActualExecutionStartTime" yaml:"OpActualExecutionStartTime,omitempty"`
	OpActualExecutionEndDate       null.String `boil:"OpActualExecutionEndDate" json:"OpActualExecutionEndDate,omitempty" toml:"OpActualExecutionEndDate" yaml:"OpActualExecutionEndDate,omitempty"`
	OpActualExecutionEndTime       null.String `boil:"OpActualExecutionEndTime" json:"OpActualExecutionEndTime,omitempty" toml:"OpActualExecutionEndTime" yaml:"OpActualExecutionEndTime,omitempty"`
	ErlstSchedldExecDurnInWorkdays null.Int    `boil:"ErlstSchedldExecDurnInWorkdays" json:"ErlstSchedldExecDurnInWorkdays,omitempty" toml:"ErlstSchedldExecDurnInWorkdays" yaml:"ErlstSchedldExecDurnInWorkdays,omitempty"`
	OpActualExecutionDays          null.Int    `boil:"OpActualExecutionDays" json:"OpActualExecutionDays,omitempty" toml:"OpActualExecutionDays" yaml:"OpActualExecutionDays,omitempty"`
	OperationUnit                  null.String `boil:"OperationUnit" json:"OperationUnit,omitempty" toml:"OperationUnit" yaml:"OperationUnit,omitempty"`
	OpPlannedTotalQuantity         null.String `boil:"OpPlannedTotalQuantity" json:"OpPlannedTotalQuantity,omitempty" toml:"OpPlannedTotalQuantity" yaml:"OpPlannedTotalQuantity,omitempty"`
	OpTotalConfirmedYieldQty       null.String `boil:"OpTotalConfirmedYieldQty" json:"OpTotalConfirmedYieldQty,omitempty" toml:"OpTotalConfirmedYieldQty" yaml:"OpTotalConfirmedYieldQty,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`

	R *sapProductionOrderOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionOrderOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionOrderOperationDatumColumns = struct {
	ManufacturingOrder             string
	ManufacturingOrderSequence     string
	OrderInternalBillOfOperations  string
	OrderIntBillOfOperationsItem   string
	MfgOrderSequenceText           string
	ManufacturingOrderOperation    string
	ManufacturingOrderSubOperation string
	ManufacturingOrderCategory     string
	ManufacturingOrderType         string
	MfgOrderOperationText          string
	OperationIsCreated             string
	OperationIsReleased            string
	OperationIsPrinted             string
	OperationIsConfirmed           string
	OperationIsPartiallyConfirmed  string
	OperationIsDeleted             string
	OperationIsTechlyCompleted     string
	OperationIsClosed              string
	OperationIsScheduled           string
	OperationIsPartiallyDelivered  string
	OperationIsDelivered           string
	ProductionPlant                string
	WorkCenterInternalID           string
	WorkCenterTypeCode             string
	WorkCenter                     string
	OperationControlProfile        string
	OpErlstSchedldExecStrtDte      string
	OpErlstSchedldExecStrtTme      string
	OpErlstSchedldExecEndDte       string
	OpErlstSchedldExecEndTme       string
	OpActualExecutionStartDate     string
	OpActualExecutionStartTime     string
	OpActualExecutionEndDate       string
	OpActualExecutionEndTime       string
	ErlstSchedldExecDurnInWorkdays string
	OpActualExecutionDays          string
	OperationUnit                  string
	OpPlannedTotalQuantity         string
	OpTotalConfirmedYieldQty       string
	LastChangeDateTime             string
}{
	ManufacturingOrder:             "ManufacturingOrder",
	ManufacturingOrderSequence:     "ManufacturingOrderSequence",
	OrderInternalBillOfOperations:  "OrderInternalBillOfOperations",
	OrderIntBillOfOperationsItem:   "OrderIntBillOfOperationsItem",
	MfgOrderSequenceText:           "MfgOrderSequenceText",
	ManufacturingOrderOperation:    "ManufacturingOrderOperation",
	ManufacturingOrderSubOperation: "ManufacturingOrderSubOperation",
	ManufacturingOrderCategory:     "ManufacturingOrderCategory",
	ManufacturingOrderType:         "ManufacturingOrderType",
	MfgOrderOperationText:          "MfgOrderOperationText",
	OperationIsCreated:             "OperationIsCreated",
	OperationIsReleased:            "OperationIsReleased",
	OperationIsPrinted:             "OperationIsPrinted",
	OperationIsConfirmed:           "OperationIsConfirmed",
	OperationIsPartiallyConfirmed:  "OperationIsPartiallyConfirmed",
	OperationIsDeleted:             "OperationIsDeleted",
	OperationIsTechlyCompleted:     "OperationIsTechlyCompleted",
	OperationIsClosed:              "OperationIsClosed",
	OperationIsScheduled:           "OperationIsScheduled",
	OperationIsPartiallyDelivered:  "OperationIsPartiallyDelivered",
	OperationIsDelivered:           "OperationIsDelivered",
	ProductionPlant:                "ProductionPlant",
	WorkCenterInternalID:           "WorkCenterInternalID",
	WorkCenterTypeCode:             "WorkCenterTypeCode",
	WorkCenter:                     "WorkCenter",
	OperationControlProfile:        "OperationControlProfile",
	OpErlstSchedldExecStrtDte:      "OpErlstSchedldExecStrtDte",
	OpErlstSchedldExecStrtTme:      "OpErlstSchedldExecStrtTme",
	OpErlstSchedldExecEndDte:       "OpErlstSchedldExecEndDte",
	OpErlstSchedldExecEndTme:       "OpErlstSchedldExecEndTme",
	OpActualExecutionStartDate:     "OpActualExecutionStartDate",
	OpActualExecutionStartTime:     "OpActualExecutionStartTime",
	OpActualExecutionEndDate:       "OpActualExecutionEndDate",
	OpActualExecutionEndTime:       "OpActualExecutionEndTime",
	ErlstSchedldExecDurnInWorkdays: "ErlstSchedldExecDurnInWorkdays",
	OpActualExecutionDays:          "OpActualExecutionDays",
	OperationUnit:                  "OperationUnit",
	OpPlannedTotalQuantity:         "OpPlannedTotalQuantity",
	OpTotalConfirmedYieldQty:       "OpTotalConfirmedYieldQty",
	LastChangeDateTime:             "LastChangeDateTime",
}

var SapProductionOrderOperationDatumTableColumns = struct {
	ManufacturingOrder             string
	ManufacturingOrderSequence     string
	OrderInternalBillOfOperations  string
	OrderIntBillOfOperationsItem   string
	MfgOrderSequenceText           string
	ManufacturingOrderOperation    string
	ManufacturingOrderSubOperation string
	ManufacturingOrderCategory     string
	ManufacturingOrderType         string
	MfgOrderOperationText          string
	OperationIsCreated             string
	OperationIsReleased            string
	OperationIsPrinted             string
	OperationIsConfirmed           string
	OperationIsPartiallyConfirmed  string
	OperationIsDeleted             string
	OperationIsTechlyCompleted     string
	OperationIsClosed              string
	OperationIsScheduled           string
	OperationIsPartiallyDelivered  string
	OperationIsDelivered           string
	ProductionPlant                string
	WorkCenterInternalID           string
	WorkCenterTypeCode             string
	WorkCenter                     string
	OperationControlProfile        string
	OpErlstSchedldExecStrtDte      string
	OpErlstSchedldExecStrtTme      string
	OpErlstSchedldExecEndDte       string
	OpErlstSchedldExecEndTme       string
	OpActualExecutionStartDate     string
	OpActualExecutionStartTime     string
	OpActualExecutionEndDate       string
	OpActualExecutionEndTime       string
	ErlstSchedldExecDurnInWorkdays string
	OpActualExecutionDays          string
	OperationUnit                  string
	OpPlannedTotalQuantity         string
	OpTotalConfirmedYieldQty       string
	LastChangeDateTime             string
}{
	ManufacturingOrder:             "sap_production_order_operation_data.ManufacturingOrder",
	ManufacturingOrderSequence:     "sap_production_order_operation_data.ManufacturingOrderSequence",
	OrderInternalBillOfOperations:  "sap_production_order_operation_data.OrderInternalBillOfOperations",
	OrderIntBillOfOperationsItem:   "sap_production_order_operation_data.OrderIntBillOfOperationsItem",
	MfgOrderSequenceText:           "sap_production_order_operation_data.MfgOrderSequenceText",
	ManufacturingOrderOperation:    "sap_production_order_operation_data.ManufacturingOrderOperation",
	ManufacturingOrderSubOperation: "sap_production_order_operation_data.ManufacturingOrderSubOperation",
	ManufacturingOrderCategory:     "sap_production_order_operation_data.ManufacturingOrderCategory",
	ManufacturingOrderType:         "sap_production_order_operation_data.ManufacturingOrderType",
	MfgOrderOperationText:          "sap_production_order_operation_data.MfgOrderOperationText",
	OperationIsCreated:             "sap_production_order_operation_data.OperationIsCreated",
	OperationIsReleased:            "sap_production_order_operation_data.OperationIsReleased",
	OperationIsPrinted:             "sap_production_order_operation_data.OperationIsPrinted",
	OperationIsConfirmed:           "sap_production_order_operation_data.OperationIsConfirmed",
	OperationIsPartiallyConfirmed:  "sap_production_order_operation_data.OperationIsPartiallyConfirmed",
	OperationIsDeleted:             "sap_production_order_operation_data.OperationIsDeleted",
	OperationIsTechlyCompleted:     "sap_production_order_operation_data.OperationIsTechlyCompleted",
	OperationIsClosed:              "sap_production_order_operation_data.OperationIsClosed",
	OperationIsScheduled:           "sap_production_order_operation_data.OperationIsScheduled",
	OperationIsPartiallyDelivered:  "sap_production_order_operation_data.OperationIsPartiallyDelivered",
	OperationIsDelivered:           "sap_production_order_operation_data.OperationIsDelivered",
	ProductionPlant:                "sap_production_order_operation_data.ProductionPlant",
	WorkCenterInternalID:           "sap_production_order_operation_data.WorkCenterInternalID",
	WorkCenterTypeCode:             "sap_production_order_operation_data.WorkCenterTypeCode",
	WorkCenter:                     "sap_production_order_operation_data.WorkCenter",
	OperationControlProfile:        "sap_production_order_operation_data.OperationControlProfile",
	OpErlstSchedldExecStrtDte:      "sap_production_order_operation_data.OpErlstSchedldExecStrtDte",
	OpErlstSchedldExecStrtTme:      "sap_production_order_operation_data.OpErlstSchedldExecStrtTme",
	OpErlstSchedldExecEndDte:       "sap_production_order_operation_data.OpErlstSchedldExecEndDte",
	OpErlstSchedldExecEndTme:       "sap_production_order_operation_data.OpErlstSchedldExecEndTme",
	OpActualExecutionStartDate:     "sap_production_order_operation_data.OpActualExecutionStartDate",
	OpActualExecutionStartTime:     "sap_production_order_operation_data.OpActualExecutionStartTime",
	OpActualExecutionEndDate:       "sap_production_order_operation_data.OpActualExecutionEndDate",
	OpActualExecutionEndTime:       "sap_production_order_operation_data.OpActualExecutionEndTime",
	ErlstSchedldExecDurnInWorkdays: "sap_production_order_operation_data.ErlstSchedldExecDurnInWorkdays",
	OpActualExecutionDays:          "sap_production_order_operation_data.OpActualExecutionDays",
	OperationUnit:                  "sap_production_order_operation_data.OperationUnit",
	OpPlannedTotalQuantity:         "sap_production_order_operation_data.OpPlannedTotalQuantity",
	OpTotalConfirmedYieldQty:       "sap_production_order_operation_data.OpTotalConfirmedYieldQty",
	LastChangeDateTime:             "sap_production_order_operation_data.LastChangeDateTime",
}

// Generated where

var SapProductionOrderOperationDatumWhere = struct {
	ManufacturingOrder             whereHelperstring
	ManufacturingOrderSequence     whereHelperstring
	OrderInternalBillOfOperations  whereHelperstring
	OrderIntBillOfOperationsItem   whereHelperstring
	MfgOrderSequenceText           whereHelpernull_String
	ManufacturingOrderOperation    whereHelpernull_String
	ManufacturingOrderSubOperation whereHelpernull_String
	ManufacturingOrderCategory     whereHelpernull_String
	ManufacturingOrderType         whereHelpernull_String
	MfgOrderOperationText          whereHelpernull_String
	OperationIsCreated             whereHelpernull_String
	OperationIsReleased            whereHelpernull_String
	OperationIsPrinted             whereHelpernull_String
	OperationIsConfirmed           whereHelpernull_String
	OperationIsPartiallyConfirmed  whereHelpernull_String
	OperationIsDeleted             whereHelpernull_String
	OperationIsTechlyCompleted     whereHelpernull_String
	OperationIsClosed              whereHelpernull_String
	OperationIsScheduled           whereHelpernull_String
	OperationIsPartiallyDelivered  whereHelpernull_String
	OperationIsDelivered           whereHelpernull_String
	ProductionPlant                whereHelpernull_String
	WorkCenterInternalID           whereHelpernull_String
	WorkCenterTypeCode             whereHelpernull_String
	WorkCenter                     whereHelpernull_String
	OperationControlProfile        whereHelpernull_String
	OpErlstSchedldExecStrtDte      whereHelpernull_String
	OpErlstSchedldExecStrtTme      whereHelpernull_String
	OpErlstSchedldExecEndDte       whereHelpernull_String
	OpErlstSchedldExecEndTme       whereHelpernull_String
	OpActualExecutionStartDate     whereHelpernull_String
	OpActualExecutionStartTime     whereHelpernull_String
	OpActualExecutionEndDate       whereHelpernull_String
	OpActualExecutionEndTime       whereHelpernull_String
	ErlstSchedldExecDurnInWorkdays whereHelpernull_Int
	OpActualExecutionDays          whereHelpernull_Int
	OperationUnit                  whereHelpernull_String
	OpPlannedTotalQuantity         whereHelpernull_String
	OpTotalConfirmedYieldQty       whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
}{
	ManufacturingOrder:             whereHelperstring{field: "`sap_production_order_operation_data`.`ManufacturingOrder`"},
	ManufacturingOrderSequence:     whereHelperstring{field: "`sap_production_order_operation_data`.`ManufacturingOrderSequence`"},
	OrderInternalBillOfOperations:  whereHelperstring{field: "`sap_production_order_operation_data`.`OrderInternalBillOfOperations`"},
	OrderIntBillOfOperationsItem:   whereHelperstring{field: "`sap_production_order_operation_data`.`OrderIntBillOfOperationsItem`"},
	MfgOrderSequenceText:           whereHelpernull_String{field: "`sap_production_order_operation_data`.`MfgOrderSequenceText`"},
	ManufacturingOrderOperation:    whereHelpernull_String{field: "`sap_production_order_operation_data`.`ManufacturingOrderOperation`"},
	ManufacturingOrderSubOperation: whereHelpernull_String{field: "`sap_production_order_operation_data`.`ManufacturingOrderSubOperation`"},
	ManufacturingOrderCategory:     whereHelpernull_String{field: "`sap_production_order_operation_data`.`ManufacturingOrderCategory`"},
	ManufacturingOrderType:         whereHelpernull_String{field: "`sap_production_order_operation_data`.`ManufacturingOrderType`"},
	MfgOrderOperationText:          whereHelpernull_String{field: "`sap_production_order_operation_data`.`MfgOrderOperationText`"},
	OperationIsCreated:             whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsCreated`"},
	OperationIsReleased:            whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsReleased`"},
	OperationIsPrinted:             whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsPrinted`"},
	OperationIsConfirmed:           whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsConfirmed`"},
	OperationIsPartiallyConfirmed:  whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsPartiallyConfirmed`"},
	OperationIsDeleted:             whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsDeleted`"},
	OperationIsTechlyCompleted:     whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsTechlyCompleted`"},
	OperationIsClosed:              whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsClosed`"},
	OperationIsScheduled:           whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsScheduled`"},
	OperationIsPartiallyDelivered:  whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsPartiallyDelivered`"},
	OperationIsDelivered:           whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationIsDelivered`"},
	ProductionPlant:                whereHelpernull_String{field: "`sap_production_order_operation_data`.`ProductionPlant`"},
	WorkCenterInternalID:           whereHelpernull_String{field: "`sap_production_order_operation_data`.`WorkCenterInternalID`"},
	WorkCenterTypeCode:             whereHelpernull_String{field: "`sap_production_order_operation_data`.`WorkCenterTypeCode`"},
	WorkCenter:                     whereHelpernull_String{field: "`sap_production_order_operation_data`.`WorkCenter`"},
	OperationControlProfile:        whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationControlProfile`"},
	OpErlstSchedldExecStrtDte:      whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpErlstSchedldExecStrtDte`"},
	OpErlstSchedldExecStrtTme:      whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpErlstSchedldExecStrtTme`"},
	OpErlstSchedldExecEndDte:       whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpErlstSchedldExecEndDte`"},
	OpErlstSchedldExecEndTme:       whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpErlstSchedldExecEndTme`"},
	OpActualExecutionStartDate:     whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpActualExecutionStartDate`"},
	OpActualExecutionStartTime:     whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpActualExecutionStartTime`"},
	OpActualExecutionEndDate:       whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpActualExecutionEndDate`"},
	OpActualExecutionEndTime:       whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpActualExecutionEndTime`"},
	ErlstSchedldExecDurnInWorkdays: whereHelpernull_Int{field: "`sap_production_order_operation_data`.`ErlstSchedldExecDurnInWorkdays`"},
	OpActualExecutionDays:          whereHelpernull_Int{field: "`sap_production_order_operation_data`.`OpActualExecutionDays`"},
	OperationUnit:                  whereHelpernull_String{field: "`sap_production_order_operation_data`.`OperationUnit`"},
	OpPlannedTotalQuantity:         whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpPlannedTotalQuantity`"},
	OpTotalConfirmedYieldQty:       whereHelpernull_String{field: "`sap_production_order_operation_data`.`OpTotalConfirmedYieldQty`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_production_order_operation_data`.`LastChangeDateTime`"},
}

// SapProductionOrderOperationDatumRels is where relationship names are stored.
var SapProductionOrderOperationDatumRels = struct {
	ManufacturingOrderSapProductionOrderGeneralDatum string
}{
	ManufacturingOrderSapProductionOrderGeneralDatum: "ManufacturingOrderSapProductionOrderGeneralDatum",
}

// sapProductionOrderOperationDatumR is where relationships are stored.
type sapProductionOrderOperationDatumR struct {
	ManufacturingOrderSapProductionOrderGeneralDatum *SapProductionOrderGeneralDatum `boil:"ManufacturingOrderSapProductionOrderGeneralDatum" json:"ManufacturingOrderSapProductionOrderGeneralDatum" toml:"ManufacturingOrderSapProductionOrderGeneralDatum" yaml:"ManufacturingOrderSapProductionOrderGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductionOrderOperationDatumR) NewStruct() *sapProductionOrderOperationDatumR {
	return &sapProductionOrderOperationDatumR{}
}

func (r *sapProductionOrderOperationDatumR) GetManufacturingOrderSapProductionOrderGeneralDatum() *SapProductionOrderGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ManufacturingOrderSapProductionOrderGeneralDatum
}

// sapProductionOrderOperationDatumL is where Load methods for each relationship are stored.
type sapProductionOrderOperationDatumL struct{}

var (
	sapProductionOrderOperationDatumAllColumns            = []string{"ManufacturingOrder", "ManufacturingOrderSequence", "OrderInternalBillOfOperations", "OrderIntBillOfOperationsItem", "MfgOrderSequenceText", "ManufacturingOrderOperation", "ManufacturingOrderSubOperation", "ManufacturingOrderCategory", "ManufacturingOrderType", "MfgOrderOperationText", "OperationIsCreated", "OperationIsReleased", "OperationIsPrinted", "OperationIsConfirmed", "OperationIsPartiallyConfirmed", "OperationIsDeleted", "OperationIsTechlyCompleted", "OperationIsClosed", "OperationIsScheduled", "OperationIsPartiallyDelivered", "OperationIsDelivered", "ProductionPlant", "WorkCenterInternalID", "WorkCenterTypeCode", "WorkCenter", "OperationControlProfile", "OpErlstSchedldExecStrtDte", "OpErlstSchedldExecStrtTme", "OpErlstSchedldExecEndDte", "OpErlstSchedldExecEndTme", "OpActualExecutionStartDate", "OpActualExecutionStartTime", "OpActualExecutionEndDate", "OpActualExecutionEndTime", "ErlstSchedldExecDurnInWorkdays", "OpActualExecutionDays", "OperationUnit", "OpPlannedTotalQuantity", "OpTotalConfirmedYieldQty", "LastChangeDateTime"}
	sapProductionOrderOperationDatumColumnsWithoutDefault = []string{"ManufacturingOrder", "ManufacturingOrderSequence", "OrderInternalBillOfOperations", "OrderIntBillOfOperationsItem", "MfgOrderSequenceText", "ManufacturingOrderOperation", "ManufacturingOrderSubOperation", "ManufacturingOrderCategory", "ManufacturingOrderType", "MfgOrderOperationText", "OperationIsCreated", "OperationIsReleased", "OperationIsPrinted", "OperationIsConfirmed", "OperationIsPartiallyConfirmed", "OperationIsDeleted", "OperationIsTechlyCompleted", "OperationIsClosed", "OperationIsScheduled", "OperationIsPartiallyDelivered", "OperationIsDelivered", "ProductionPlant", "WorkCenterInternalID", "WorkCenterTypeCode", "WorkCenter", "OperationControlProfile", "OpErlstSchedldExecStrtDte", "OpErlstSchedldExecStrtTme", "OpErlstSchedldExecEndDte", "OpErlstSchedldExecEndTme", "OpActualExecutionStartDate", "OpActualExecutionStartTime", "OpActualExecutionEndDate", "OpActualExecutionEndTime", "ErlstSchedldExecDurnInWorkdays", "OpActualExecutionDays", "OperationUnit", "OpPlannedTotalQuantity", "OpTotalConfirmedYieldQty", "LastChangeDateTime"}
	sapProductionOrderOperationDatumColumnsWithDefault    = []string{}
	sapProductionOrderOperationDatumPrimaryKeyColumns     = []string{"ManufacturingOrder", "ManufacturingOrderSequence", "OrderInternalBillOfOperations", "OrderIntBillOfOperationsItem"}
	sapProductionOrderOperationDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionOrderOperationDatumSlice is an alias for a slice of pointers to SapProductionOrderOperationDatum.
	// This should almost always be used instead of []SapProductionOrderOperationDatum.
	SapProductionOrderOperationDatumSlice []*SapProductionOrderOperationDatum
	// SapProductionOrderOperationDatumHook is the signature for custom SapProductionOrderOperationDatum hook methods
	SapProductionOrderOperationDatumHook func(context.Context, boil.ContextExecutor, *SapProductionOrderOperationDatum) error

	sapProductionOrderOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionOrderOperationDatumType                 = reflect.TypeOf(&SapProductionOrderOperationDatum{})
	sapProductionOrderOperationDatumMapping              = queries.MakeStructMapping(sapProductionOrderOperationDatumType)
	sapProductionOrderOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, sapProductionOrderOperationDatumPrimaryKeyColumns)
	sapProductionOrderOperationDatumInsertCacheMut       sync.RWMutex
	sapProductionOrderOperationDatumInsertCache          = make(map[string]insertCache)
	sapProductionOrderOperationDatumUpdateCacheMut       sync.RWMutex
	sapProductionOrderOperationDatumUpdateCache          = make(map[string]updateCache)
	sapProductionOrderOperationDatumUpsertCacheMut       sync.RWMutex
	sapProductionOrderOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionOrderOperationDatumAfterSelectHooks []SapProductionOrderOperationDatumHook

var sapProductionOrderOperationDatumBeforeInsertHooks []SapProductionOrderOperationDatumHook
var sapProductionOrderOperationDatumAfterInsertHooks []SapProductionOrderOperationDatumHook

var sapProductionOrderOperationDatumBeforeUpdateHooks []SapProductionOrderOperationDatumHook
var sapProductionOrderOperationDatumAfterUpdateHooks []SapProductionOrderOperationDatumHook

var sapProductionOrderOperationDatumBeforeDeleteHooks []SapProductionOrderOperationDatumHook
var sapProductionOrderOperationDatumAfterDeleteHooks []SapProductionOrderOperationDatumHook

var sapProductionOrderOperationDatumBeforeUpsertHooks []SapProductionOrderOperationDatumHook
var sapProductionOrderOperationDatumAfterUpsertHooks []SapProductionOrderOperationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionOrderOperationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionOrderOperationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionOrderOperationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionOrderOperationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionOrderOperationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionOrderOperationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionOrderOperationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionOrderOperationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionOrderOperationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderOperationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionOrderOperationDatumHook registers your hook function for all future operations.
func AddSapProductionOrderOperationDatumHook(hookPoint boil.HookPoint, sapProductionOrderOperationDatumHook SapProductionOrderOperationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionOrderOperationDatumAfterSelectHooks = append(sapProductionOrderOperationDatumAfterSelectHooks, sapProductionOrderOperationDatumHook)
	case boil.BeforeInsertHook:
		sapProductionOrderOperationDatumBeforeInsertHooks = append(sapProductionOrderOperationDatumBeforeInsertHooks, sapProductionOrderOperationDatumHook)
	case boil.AfterInsertHook:
		sapProductionOrderOperationDatumAfterInsertHooks = append(sapProductionOrderOperationDatumAfterInsertHooks, sapProductionOrderOperationDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionOrderOperationDatumBeforeUpdateHooks = append(sapProductionOrderOperationDatumBeforeUpdateHooks, sapProductionOrderOperationDatumHook)
	case boil.AfterUpdateHook:
		sapProductionOrderOperationDatumAfterUpdateHooks = append(sapProductionOrderOperationDatumAfterUpdateHooks, sapProductionOrderOperationDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionOrderOperationDatumBeforeDeleteHooks = append(sapProductionOrderOperationDatumBeforeDeleteHooks, sapProductionOrderOperationDatumHook)
	case boil.AfterDeleteHook:
		sapProductionOrderOperationDatumAfterDeleteHooks = append(sapProductionOrderOperationDatumAfterDeleteHooks, sapProductionOrderOperationDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionOrderOperationDatumBeforeUpsertHooks = append(sapProductionOrderOperationDatumBeforeUpsertHooks, sapProductionOrderOperationDatumHook)
	case boil.AfterUpsertHook:
		sapProductionOrderOperationDatumAfterUpsertHooks = append(sapProductionOrderOperationDatumAfterUpsertHooks, sapProductionOrderOperationDatumHook)
	}
}

// One returns a single sapProductionOrderOperationDatum record from the query.
func (q sapProductionOrderOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionOrderOperationDatum, error) {
	o := &SapProductionOrderOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_order_operation_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionOrderOperationDatum records from the query.
func (q sapProductionOrderOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionOrderOperationDatumSlice, error) {
	var o []*SapProductionOrderOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionOrderOperationDatum slice")
	}

	if len(sapProductionOrderOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionOrderOperationDatum records in the query.
func (q sapProductionOrderOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_order_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionOrderOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_order_operation_data exists")
	}

	return count > 0, nil
}

// ManufacturingOrderSapProductionOrderGeneralDatum pointed to by the foreign key.
func (o *SapProductionOrderOperationDatum) ManufacturingOrderSapProductionOrderGeneralDatum(mods ...qm.QueryMod) sapProductionOrderGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ManufacturingOrder` = ?", o.ManufacturingOrder),
	}

	queryMods = append(queryMods, mods...)

	return SapProductionOrderGeneralData(queryMods...)
}

// LoadManufacturingOrderSapProductionOrderGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductionOrderOperationDatumL) LoadManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductionOrderOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductionOrderOperationDatum
	var object *SapProductionOrderOperationDatum

	if singular {
		object = maybeSapProductionOrderOperationDatum.(*SapProductionOrderOperationDatum)
	} else {
		slice = *maybeSapProductionOrderOperationDatum.(*[]*SapProductionOrderOperationDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductionOrderOperationDatumR{}
		}
		args = append(args, object.ManufacturingOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductionOrderOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ManufacturingOrder {
					continue Outer
				}
			}

			args = append(args, obj.ManufacturingOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_production_order_general_data`),
		qm.WhereIn(`sap_production_order_general_data.ManufacturingOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductionOrderGeneralDatum")
	}

	var resultSlice []*SapProductionOrderGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductionOrderGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_production_order_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_production_order_general_data")
	}

	if len(sapProductionOrderOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductionOrderGeneralDatumR{}
		}
		foreign.R.ManufacturingOrderSapProductionOrderOperationData = append(foreign.R.ManufacturingOrderSapProductionOrderOperationData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ManufacturingOrder == foreign.ManufacturingOrder {
				local.R.ManufacturingOrderSapProductionOrderGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductionOrderGeneralDatumR{}
				}
				foreign.R.ManufacturingOrderSapProductionOrderOperationData = append(foreign.R.ManufacturingOrderSapProductionOrderOperationData, local)
				break
			}
		}
	}

	return nil
}

// SetManufacturingOrderSapProductionOrderGeneralDatum of the sapProductionOrderOperationDatum to the related item.
// Sets o.R.ManufacturingOrderSapProductionOrderGeneralDatum to related.
// Adds o to related.R.ManufacturingOrderSapProductionOrderOperationData.
func (o *SapProductionOrderOperationDatum) SetManufacturingOrderSapProductionOrderGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductionOrderGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_production_order_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ManufacturingOrder"}),
		strmangle.WhereClause("`", "`", 0, sapProductionOrderOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ManufacturingOrder, o.ManufacturingOrder, o.ManufacturingOrderSequence, o.OrderInternalBillOfOperations, o.OrderIntBillOfOperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ManufacturingOrder = related.ManufacturingOrder
	if o.R == nil {
		o.R = &sapProductionOrderOperationDatumR{
			ManufacturingOrderSapProductionOrderGeneralDatum: related,
		}
	} else {
		o.R.ManufacturingOrderSapProductionOrderGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductionOrderGeneralDatumR{
			ManufacturingOrderSapProductionOrderOperationData: SapProductionOrderOperationDatumSlice{o},
		}
	} else {
		related.R.ManufacturingOrderSapProductionOrderOperationData = append(related.R.ManufacturingOrderSapProductionOrderOperationData, o)
	}

	return nil
}

// SapProductionOrderOperationData retrieves all the records using an executor.
func SapProductionOrderOperationData(mods ...qm.QueryMod) sapProductionOrderOperationDatumQuery {
	mods = append(mods, qm.From("`sap_production_order_operation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_production_order_operation_data`.*"})
	}

	return sapProductionOrderOperationDatumQuery{q}
}

// FindSapProductionOrderOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionOrderOperationDatum(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, manufacturingOrderSequence string, orderInternalBillOfOperations string, orderIntBillOfOperationsItem string, selectCols ...string) (*SapProductionOrderOperationDatum, error) {
	sapProductionOrderOperationDatumObj := &SapProductionOrderOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_order_operation_data` where `ManufacturingOrder`=? AND `ManufacturingOrderSequence`=? AND `OrderInternalBillOfOperations`=? AND `OrderIntBillOfOperationsItem`=?", sel,
	)

	q := queries.Raw(query, manufacturingOrder, manufacturingOrderSequence, orderInternalBillOfOperations, orderIntBillOfOperationsItem)

	err := q.Bind(ctx, exec, sapProductionOrderOperationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_order_operation_data")
	}

	if err = sapProductionOrderOperationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionOrderOperationDatumObj, err
	}

	return sapProductionOrderOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionOrderOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_operation_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionOrderOperationDatumInsertCacheMut.RLock()
	cache, cached := sapProductionOrderOperationDatumInsertCache[key]
	sapProductionOrderOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionOrderOperationDatumAllColumns,
			sapProductionOrderOperationDatumColumnsWithDefault,
			sapProductionOrderOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_order_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_order_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_order_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionOrderOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_order_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ManufacturingOrder,
		o.ManufacturingOrderSequence,
		o.OrderInternalBillOfOperations,
		o.OrderIntBillOfOperationsItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderOperationDatumInsertCacheMut.Lock()
		sapProductionOrderOperationDatumInsertCache[key] = cache
		sapProductionOrderOperationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionOrderOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionOrderOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionOrderOperationDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionOrderOperationDatumUpdateCache[key]
	sapProductionOrderOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionOrderOperationDatumAllColumns,
			sapProductionOrderOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_order_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_order_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionOrderOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, append(wl, sapProductionOrderOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_order_operation_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_order_operation_data")
	}

	if !cached {
		sapProductionOrderOperationDatumUpdateCacheMut.Lock()
		sapProductionOrderOperationDatumUpdateCache[key] = cache
		sapProductionOrderOperationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionOrderOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_order_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_order_operation_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionOrderOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_order_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionOrderOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionOrderOperationDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionOrderOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionOrderOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_operation_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionOrderOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionOrderOperationDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionOrderOperationDatumUpsertCache[key]
	sapProductionOrderOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionOrderOperationDatumAllColumns,
			sapProductionOrderOperationDatumColumnsWithDefault,
			sapProductionOrderOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionOrderOperationDatumAllColumns,
			sapProductionOrderOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_order_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_order_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_order_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_order_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionOrderOperationDatumType, sapProductionOrderOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_order_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderOperationDatumUpsertCacheMut.Lock()
		sapProductionOrderOperationDatumUpsertCache[key] = cache
		sapProductionOrderOperationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionOrderOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionOrderOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionOrderOperationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionOrderOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_order_operation_data` WHERE `ManufacturingOrder`=? AND `ManufacturingOrderSequence`=? AND `OrderInternalBillOfOperations`=? AND `OrderIntBillOfOperationsItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_order_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_order_operation_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionOrderOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionOrderOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_order_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_operation_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionOrderOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionOrderOperationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_order_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionOrderOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_operation_data")
	}

	if len(sapProductionOrderOperationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionOrderOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionOrderOperationDatum(ctx, exec, o.ManufacturingOrder, o.ManufacturingOrderSequence, o.OrderInternalBillOfOperations, o.OrderIntBillOfOperationsItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionOrderOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionOrderOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_order_operation_data`.* FROM `sap_production_order_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionOrderOperationDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionOrderOperationDatumExists checks if the SapProductionOrderOperationDatum row exists.
func SapProductionOrderOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, manufacturingOrder string, manufacturingOrderSequence string, orderInternalBillOfOperations string, orderIntBillOfOperationsItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_order_operation_data` where `ManufacturingOrder`=? AND `ManufacturingOrderSequence`=? AND `OrderInternalBillOfOperations`=? AND `OrderIntBillOfOperationsItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, manufacturingOrder, manufacturingOrderSequence, orderInternalBillOfOperations, orderIntBillOfOperationsItem)
	}
	row := exec.QueryRowContext(ctx, sql, manufacturingOrder, manufacturingOrderSequence, orderInternalBillOfOperations, orderIntBillOfOperationsItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_order_operation_data exists")
	}

	return exists, nil
}
