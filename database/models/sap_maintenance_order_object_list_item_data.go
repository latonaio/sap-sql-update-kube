// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceOrderObjectListItemDatum is an object representing the database table.
type SapMaintenanceOrderObjectListItemDatum struct {
	MaintenanceOrder            string      `boil:"MaintenanceOrder" json:"MaintenanceOrder" toml:"MaintenanceOrder" yaml:"MaintenanceOrder"`
	MaintenanceOrderObjectList  int         `boil:"MaintenanceOrderObjectList" json:"MaintenanceOrderObjectList" toml:"MaintenanceOrderObjectList" yaml:"MaintenanceOrderObjectList"`
	MaintenanceObjectListItem   int         `boil:"MaintenanceObjectListItem" json:"MaintenanceObjectListItem" toml:"MaintenanceObjectListItem" yaml:"MaintenanceObjectListItem"`
	Equipment                   null.String `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	MaintenanceNotification     null.String `boil:"MaintenanceNotification" json:"MaintenanceNotification,omitempty" toml:"MaintenanceNotification" yaml:"MaintenanceNotification,omitempty"`
	Assembly                    null.String `boil:"Assembly" json:"Assembly,omitempty" toml:"Assembly" yaml:"Assembly,omitempty"`
	Material                    null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	SerialNumber                null.String `boil:"SerialNumber" json:"SerialNumber,omitempty" toml:"SerialNumber" yaml:"SerialNumber,omitempty"`
	UniqueItemIdentifier        null.String `boil:"UniqueItemIdentifier" json:"UniqueItemIdentifier,omitempty" toml:"UniqueItemIdentifier" yaml:"UniqueItemIdentifier,omitempty"`
	FunctionalLocation          null.String `boil:"FunctionalLocation" json:"FunctionalLocation,omitempty" toml:"FunctionalLocation" yaml:"FunctionalLocation,omitempty"`
	MaintObjectListItemSequence null.String `boil:"MaintObjectListItemSequence" json:"MaintObjectListItemSequence,omitempty" toml:"MaintObjectListItemSequence" yaml:"MaintObjectListItemSequence,omitempty"`

	R *sapMaintenanceOrderObjectListItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceOrderObjectListItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceOrderObjectListItemDatumColumns = struct {
	MaintenanceOrder            string
	MaintenanceOrderObjectList  string
	MaintenanceObjectListItem   string
	Equipment                   string
	MaintenanceNotification     string
	Assembly                    string
	Material                    string
	SerialNumber                string
	UniqueItemIdentifier        string
	FunctionalLocation          string
	MaintObjectListItemSequence string
}{
	MaintenanceOrder:            "MaintenanceOrder",
	MaintenanceOrderObjectList:  "MaintenanceOrderObjectList",
	MaintenanceObjectListItem:   "MaintenanceObjectListItem",
	Equipment:                   "Equipment",
	MaintenanceNotification:     "MaintenanceNotification",
	Assembly:                    "Assembly",
	Material:                    "Material",
	SerialNumber:                "SerialNumber",
	UniqueItemIdentifier:        "UniqueItemIdentifier",
	FunctionalLocation:          "FunctionalLocation",
	MaintObjectListItemSequence: "MaintObjectListItemSequence",
}

var SapMaintenanceOrderObjectListItemDatumTableColumns = struct {
	MaintenanceOrder            string
	MaintenanceOrderObjectList  string
	MaintenanceObjectListItem   string
	Equipment                   string
	MaintenanceNotification     string
	Assembly                    string
	Material                    string
	SerialNumber                string
	UniqueItemIdentifier        string
	FunctionalLocation          string
	MaintObjectListItemSequence string
}{
	MaintenanceOrder:            "sap_maintenance_order_object_list_item_data.MaintenanceOrder",
	MaintenanceOrderObjectList:  "sap_maintenance_order_object_list_item_data.MaintenanceOrderObjectList",
	MaintenanceObjectListItem:   "sap_maintenance_order_object_list_item_data.MaintenanceObjectListItem",
	Equipment:                   "sap_maintenance_order_object_list_item_data.Equipment",
	MaintenanceNotification:     "sap_maintenance_order_object_list_item_data.MaintenanceNotification",
	Assembly:                    "sap_maintenance_order_object_list_item_data.Assembly",
	Material:                    "sap_maintenance_order_object_list_item_data.Material",
	SerialNumber:                "sap_maintenance_order_object_list_item_data.SerialNumber",
	UniqueItemIdentifier:        "sap_maintenance_order_object_list_item_data.UniqueItemIdentifier",
	FunctionalLocation:          "sap_maintenance_order_object_list_item_data.FunctionalLocation",
	MaintObjectListItemSequence: "sap_maintenance_order_object_list_item_data.MaintObjectListItemSequence",
}

// Generated where

var SapMaintenanceOrderObjectListItemDatumWhere = struct {
	MaintenanceOrder            whereHelperstring
	MaintenanceOrderObjectList  whereHelperint
	MaintenanceObjectListItem   whereHelperint
	Equipment                   whereHelpernull_String
	MaintenanceNotification     whereHelpernull_String
	Assembly                    whereHelpernull_String
	Material                    whereHelpernull_String
	SerialNumber                whereHelpernull_String
	UniqueItemIdentifier        whereHelpernull_String
	FunctionalLocation          whereHelpernull_String
	MaintObjectListItemSequence whereHelpernull_String
}{
	MaintenanceOrder:            whereHelperstring{field: "`sap_maintenance_order_object_list_item_data`.`MaintenanceOrder`"},
	MaintenanceOrderObjectList:  whereHelperint{field: "`sap_maintenance_order_object_list_item_data`.`MaintenanceOrderObjectList`"},
	MaintenanceObjectListItem:   whereHelperint{field: "`sap_maintenance_order_object_list_item_data`.`MaintenanceObjectListItem`"},
	Equipment:                   whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`Equipment`"},
	MaintenanceNotification:     whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`MaintenanceNotification`"},
	Assembly:                    whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`Assembly`"},
	Material:                    whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`Material`"},
	SerialNumber:                whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`SerialNumber`"},
	UniqueItemIdentifier:        whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`UniqueItemIdentifier`"},
	FunctionalLocation:          whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`FunctionalLocation`"},
	MaintObjectListItemSequence: whereHelpernull_String{field: "`sap_maintenance_order_object_list_item_data`.`MaintObjectListItemSequence`"},
}

// SapMaintenanceOrderObjectListItemDatumRels is where relationship names are stored.
var SapMaintenanceOrderObjectListItemDatumRels = struct {
	MaintenanceOrderSapMaintenanceOrderHeaderDatum string
}{
	MaintenanceOrderSapMaintenanceOrderHeaderDatum: "MaintenanceOrderSapMaintenanceOrderHeaderDatum",
}

// sapMaintenanceOrderObjectListItemDatumR is where relationships are stored.
type sapMaintenanceOrderObjectListItemDatumR struct {
	MaintenanceOrderSapMaintenanceOrderHeaderDatum *SapMaintenanceOrderHeaderDatum `boil:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" json:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" toml:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" yaml:"MaintenanceOrderSapMaintenanceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceOrderObjectListItemDatumR) NewStruct() *sapMaintenanceOrderObjectListItemDatumR {
	return &sapMaintenanceOrderObjectListItemDatumR{}
}

// sapMaintenanceOrderObjectListItemDatumL is where Load methods for each relationship are stored.
type sapMaintenanceOrderObjectListItemDatumL struct{}

var (
	sapMaintenanceOrderObjectListItemDatumAllColumns            = []string{"MaintenanceOrder", "MaintenanceOrderObjectList", "MaintenanceObjectListItem", "Equipment", "MaintenanceNotification", "Assembly", "Material", "SerialNumber", "UniqueItemIdentifier", "FunctionalLocation", "MaintObjectListItemSequence"}
	sapMaintenanceOrderObjectListItemDatumColumnsWithoutDefault = []string{"MaintenanceOrder", "MaintenanceOrderObjectList", "MaintenanceObjectListItem", "Equipment", "MaintenanceNotification", "Assembly", "Material", "SerialNumber", "UniqueItemIdentifier", "FunctionalLocation", "MaintObjectListItemSequence"}
	sapMaintenanceOrderObjectListItemDatumColumnsWithDefault    = []string{}
	sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns     = []string{"MaintenanceOrder", "MaintenanceOrderObjectList", "MaintenanceObjectListItem"}
	sapMaintenanceOrderObjectListItemDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceOrderObjectListItemDatumSlice is an alias for a slice of pointers to SapMaintenanceOrderObjectListItemDatum.
	// This should almost always be used instead of []SapMaintenanceOrderObjectListItemDatum.
	SapMaintenanceOrderObjectListItemDatumSlice []*SapMaintenanceOrderObjectListItemDatum
	// SapMaintenanceOrderObjectListItemDatumHook is the signature for custom SapMaintenanceOrderObjectListItemDatum hook methods
	SapMaintenanceOrderObjectListItemDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceOrderObjectListItemDatum) error

	sapMaintenanceOrderObjectListItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceOrderObjectListItemDatumType                 = reflect.TypeOf(&SapMaintenanceOrderObjectListItemDatum{})
	sapMaintenanceOrderObjectListItemDatumMapping              = queries.MakeStructMapping(sapMaintenanceOrderObjectListItemDatumType)
	sapMaintenanceOrderObjectListItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns)
	sapMaintenanceOrderObjectListItemDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceOrderObjectListItemDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceOrderObjectListItemDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceOrderObjectListItemDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceOrderObjectListItemDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceOrderObjectListItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceOrderObjectListItemDatumAfterSelectHooks []SapMaintenanceOrderObjectListItemDatumHook

var sapMaintenanceOrderObjectListItemDatumBeforeInsertHooks []SapMaintenanceOrderObjectListItemDatumHook
var sapMaintenanceOrderObjectListItemDatumAfterInsertHooks []SapMaintenanceOrderObjectListItemDatumHook

var sapMaintenanceOrderObjectListItemDatumBeforeUpdateHooks []SapMaintenanceOrderObjectListItemDatumHook
var sapMaintenanceOrderObjectListItemDatumAfterUpdateHooks []SapMaintenanceOrderObjectListItemDatumHook

var sapMaintenanceOrderObjectListItemDatumBeforeDeleteHooks []SapMaintenanceOrderObjectListItemDatumHook
var sapMaintenanceOrderObjectListItemDatumAfterDeleteHooks []SapMaintenanceOrderObjectListItemDatumHook

var sapMaintenanceOrderObjectListItemDatumBeforeUpsertHooks []SapMaintenanceOrderObjectListItemDatumHook
var sapMaintenanceOrderObjectListItemDatumAfterUpsertHooks []SapMaintenanceOrderObjectListItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceOrderObjectListItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderObjectListItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceOrderObjectListItemDatumHook registers your hook function for all future operations.
func AddSapMaintenanceOrderObjectListItemDatumHook(hookPoint boil.HookPoint, sapMaintenanceOrderObjectListItemDatumHook SapMaintenanceOrderObjectListItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceOrderObjectListItemDatumAfterSelectHooks = append(sapMaintenanceOrderObjectListItemDatumAfterSelectHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceOrderObjectListItemDatumBeforeInsertHooks = append(sapMaintenanceOrderObjectListItemDatumBeforeInsertHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceOrderObjectListItemDatumAfterInsertHooks = append(sapMaintenanceOrderObjectListItemDatumAfterInsertHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceOrderObjectListItemDatumBeforeUpdateHooks = append(sapMaintenanceOrderObjectListItemDatumBeforeUpdateHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceOrderObjectListItemDatumAfterUpdateHooks = append(sapMaintenanceOrderObjectListItemDatumAfterUpdateHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceOrderObjectListItemDatumBeforeDeleteHooks = append(sapMaintenanceOrderObjectListItemDatumBeforeDeleteHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceOrderObjectListItemDatumAfterDeleteHooks = append(sapMaintenanceOrderObjectListItemDatumAfterDeleteHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceOrderObjectListItemDatumBeforeUpsertHooks = append(sapMaintenanceOrderObjectListItemDatumBeforeUpsertHooks, sapMaintenanceOrderObjectListItemDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceOrderObjectListItemDatumAfterUpsertHooks = append(sapMaintenanceOrderObjectListItemDatumAfterUpsertHooks, sapMaintenanceOrderObjectListItemDatumHook)
	}
}

// One returns a single sapMaintenanceOrderObjectListItemDatum record from the query.
func (q sapMaintenanceOrderObjectListItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceOrderObjectListItemDatum, error) {
	o := &SapMaintenanceOrderObjectListItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_order_object_list_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceOrderObjectListItemDatum records from the query.
func (q sapMaintenanceOrderObjectListItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceOrderObjectListItemDatumSlice, error) {
	var o []*SapMaintenanceOrderObjectListItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceOrderObjectListItemDatum slice")
	}

	if len(sapMaintenanceOrderObjectListItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceOrderObjectListItemDatum records in the query.
func (q sapMaintenanceOrderObjectListItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_order_object_list_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceOrderObjectListItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_order_object_list_item_data exists")
	}

	return count > 0, nil
}

// MaintenanceOrderSapMaintenanceOrderHeaderDatum pointed to by the foreign key.
func (o *SapMaintenanceOrderObjectListItemDatum) MaintenanceOrderSapMaintenanceOrderHeaderDatum(mods ...qm.QueryMod) sapMaintenanceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenanceOrder` = ?", o.MaintenanceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenanceOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_order_header_data`")

	return query
}

// LoadMaintenanceOrderSapMaintenanceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenanceOrderObjectListItemDatumL) LoadMaintenanceOrderSapMaintenanceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceOrderObjectListItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceOrderObjectListItemDatum
	var object *SapMaintenanceOrderObjectListItemDatum

	if singular {
		object = maybeSapMaintenanceOrderObjectListItemDatum.(*SapMaintenanceOrderObjectListItemDatum)
	} else {
		slice = *maybeSapMaintenanceOrderObjectListItemDatum.(*[]*SapMaintenanceOrderObjectListItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceOrderObjectListItemDatumR{}
		}
		args = append(args, object.MaintenanceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceOrderObjectListItemDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceOrder {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_order_header_data`),
		qm.WhereIn(`sap_maintenance_order_header_data.MaintenanceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenanceOrderHeaderDatum")
	}

	var resultSlice []*SapMaintenanceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenanceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_order_header_data")
	}

	if len(sapMaintenanceOrderObjectListItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenanceOrderHeaderDatumR{}
		}
		foreign.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData = append(foreign.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenanceOrder == foreign.MaintenanceOrder {
				local.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenanceOrderHeaderDatumR{}
				}
				foreign.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData = append(foreign.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenanceOrderSapMaintenanceOrderHeaderDatum of the sapMaintenanceOrderObjectListItemDatum to the related item.
// Sets o.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum to related.
// Adds o to related.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData.
func (o *SapMaintenanceOrderObjectListItemDatum) SetMaintenanceOrderSapMaintenanceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenanceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_order_object_list_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenanceOrder, o.MaintenanceOrder, o.MaintenanceOrderObjectList, o.MaintenanceObjectListItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenanceOrder = related.MaintenanceOrder
	if o.R == nil {
		o.R = &sapMaintenanceOrderObjectListItemDatumR{
			MaintenanceOrderSapMaintenanceOrderHeaderDatum: related,
		}
	} else {
		o.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenanceOrderHeaderDatumR{
			MaintenanceOrderSapMaintenanceOrderObjectListItemData: SapMaintenanceOrderObjectListItemDatumSlice{o},
		}
	} else {
		related.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData = append(related.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData, o)
	}

	return nil
}

// SapMaintenanceOrderObjectListItemData retrieves all the records using an executor.
func SapMaintenanceOrderObjectListItemData(mods ...qm.QueryMod) sapMaintenanceOrderObjectListItemDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_order_object_list_item_data`"))
	return sapMaintenanceOrderObjectListItemDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceOrderObjectListItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceOrderObjectListItemDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, maintenanceOrderObjectList int, maintenanceObjectListItem int, selectCols ...string) (*SapMaintenanceOrderObjectListItemDatum, error) {
	sapMaintenanceOrderObjectListItemDatumObj := &SapMaintenanceOrderObjectListItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_order_object_list_item_data` where `MaintenanceOrder`=? AND `MaintenanceOrderObjectList`=? AND `MaintenanceObjectListItem`=?", sel,
	)

	q := queries.Raw(query, maintenanceOrder, maintenanceOrderObjectList, maintenanceObjectListItem)

	err := q.Bind(ctx, exec, sapMaintenanceOrderObjectListItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_order_object_list_item_data")
	}

	if err = sapMaintenanceOrderObjectListItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceOrderObjectListItemDatumObj, err
	}

	return sapMaintenanceOrderObjectListItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceOrderObjectListItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_object_list_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderObjectListItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceOrderObjectListItemDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderObjectListItemDatumInsertCache[key]
	sapMaintenanceOrderObjectListItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceOrderObjectListItemDatumAllColumns,
			sapMaintenanceOrderObjectListItemDatumColumnsWithDefault,
			sapMaintenanceOrderObjectListItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_order_object_list_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_order_object_list_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_order_object_list_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_order_object_list_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceOrder,
		o.MaintenanceOrderObjectList,
		o.MaintenanceObjectListItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_object_list_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderObjectListItemDatumInsertCacheMut.Lock()
		sapMaintenanceOrderObjectListItemDatumInsertCache[key] = cache
		sapMaintenanceOrderObjectListItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceOrderObjectListItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceOrderObjectListItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceOrderObjectListItemDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceOrderObjectListItemDatumUpdateCache[key]
	sapMaintenanceOrderObjectListItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceOrderObjectListItemDatumAllColumns,
			sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_order_object_list_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_order_object_list_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, append(wl, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_order_object_list_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_order_object_list_item_data")
	}

	if !cached {
		sapMaintenanceOrderObjectListItemDatumUpdateCacheMut.Lock()
		sapMaintenanceOrderObjectListItemDatumUpdateCache[key] = cache
		sapMaintenanceOrderObjectListItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceOrderObjectListItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_order_object_list_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_order_object_list_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceOrderObjectListItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderObjectListItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_order_object_list_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceOrderObjectListItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceOrderObjectListItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceOrderObjectListItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceOrderObjectListItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_object_list_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderObjectListItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceOrderObjectListItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceOrderObjectListItemDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderObjectListItemDatumUpsertCache[key]
	sapMaintenanceOrderObjectListItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceOrderObjectListItemDatumAllColumns,
			sapMaintenanceOrderObjectListItemDatumColumnsWithDefault,
			sapMaintenanceOrderObjectListItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceOrderObjectListItemDatumAllColumns,
			sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_order_object_list_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_order_object_list_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_order_object_list_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_order_object_list_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceOrderObjectListItemDatumType, sapMaintenanceOrderObjectListItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_order_object_list_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_object_list_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderObjectListItemDatumUpsertCacheMut.Lock()
		sapMaintenanceOrderObjectListItemDatumUpsertCache[key] = cache
		sapMaintenanceOrderObjectListItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceOrderObjectListItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceOrderObjectListItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceOrderObjectListItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceOrderObjectListItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_order_object_list_item_data` WHERE `MaintenanceOrder`=? AND `MaintenanceOrderObjectList`=? AND `MaintenanceObjectListItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_order_object_list_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_order_object_list_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceOrderObjectListItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceOrderObjectListItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_order_object_list_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_object_list_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceOrderObjectListItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceOrderObjectListItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderObjectListItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_order_object_list_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceOrderObjectListItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_object_list_item_data")
	}

	if len(sapMaintenanceOrderObjectListItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceOrderObjectListItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceOrderObjectListItemDatum(ctx, exec, o.MaintenanceOrder, o.MaintenanceOrderObjectList, o.MaintenanceObjectListItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceOrderObjectListItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceOrderObjectListItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderObjectListItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_order_object_list_item_data`.* FROM `sap_maintenance_order_object_list_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceOrderObjectListItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceOrderObjectListItemDatumExists checks if the SapMaintenanceOrderObjectListItemDatum row exists.
func SapMaintenanceOrderObjectListItemDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, maintenanceOrderObjectList int, maintenanceObjectListItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_order_object_list_item_data` where `MaintenanceOrder`=? AND `MaintenanceOrderObjectList`=? AND `MaintenanceObjectListItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceOrder, maintenanceOrderObjectList, maintenanceObjectListItem)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceOrder, maintenanceOrderObjectList, maintenanceObjectListItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_order_object_list_item_data exists")
	}

	return exists, nil
}
