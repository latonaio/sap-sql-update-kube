// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceOrderHeaderDatum is an object representing the database table.
type SapMaintenanceOrderHeaderDatum struct {
	MaintenanceOrder               string      `boil:"MaintenanceOrder" json:"MaintenanceOrder" toml:"MaintenanceOrder" yaml:"MaintenanceOrder"`
	MaintOrderRoutingNumber        null.String `boil:"MaintOrderRoutingNumber" json:"MaintOrderRoutingNumber,omitempty" toml:"MaintOrderRoutingNumber" yaml:"MaintOrderRoutingNumber,omitempty"`
	MaintenanceOrderType           null.String `boil:"MaintenanceOrderType" json:"MaintenanceOrderType,omitempty" toml:"MaintenanceOrderType" yaml:"MaintenanceOrderType,omitempty"`
	MaintenanceOrderDesc           null.String `boil:"MaintenanceOrderDesc" json:"MaintenanceOrderDesc,omitempty" toml:"MaintenanceOrderDesc" yaml:"MaintenanceOrderDesc,omitempty"`
	MaintOrdBasicStartDateTime     null.String `boil:"MaintOrdBasicStartDateTime" json:"MaintOrdBasicStartDateTime,omitempty" toml:"MaintOrdBasicStartDateTime" yaml:"MaintOrdBasicStartDateTime,omitempty"`
	MaintOrdBasicEndDateTime       null.String `boil:"MaintOrdBasicEndDateTime" json:"MaintOrdBasicEndDateTime,omitempty" toml:"MaintOrdBasicEndDateTime" yaml:"MaintOrdBasicEndDateTime,omitempty"`
	MaintOrdBasicStartDate         null.String `boil:"MaintOrdBasicStartDate" json:"MaintOrdBasicStartDate,omitempty" toml:"MaintOrdBasicStartDate" yaml:"MaintOrdBasicStartDate,omitempty"`
	MaintOrdBasicStartTime         null.String `boil:"MaintOrdBasicStartTime" json:"MaintOrdBasicStartTime,omitempty" toml:"MaintOrdBasicStartTime" yaml:"MaintOrdBasicStartTime,omitempty"`
	MaintOrdBasicEndDate           null.String `boil:"MaintOrdBasicEndDate" json:"MaintOrdBasicEndDate,omitempty" toml:"MaintOrdBasicEndDate" yaml:"MaintOrdBasicEndDate,omitempty"`
	MaintOrdBasicEndTime           null.String `boil:"MaintOrdBasicEndTime" json:"MaintOrdBasicEndTime,omitempty" toml:"MaintOrdBasicEndTime" yaml:"MaintOrdBasicEndTime,omitempty"`
	MaintOrdSchedldBscStrtDateTime null.String `boil:"MaintOrdSchedldBscStrtDateTime" json:"MaintOrdSchedldBscStrtDateTime,omitempty" toml:"MaintOrdSchedldBscStrtDateTime" yaml:"MaintOrdSchedldBscStrtDateTime,omitempty"`
	MaintOrdSchedldBscEndDateTime  null.String `boil:"MaintOrdSchedldBscEndDateTime" json:"MaintOrdSchedldBscEndDateTime,omitempty" toml:"MaintOrdSchedldBscEndDateTime" yaml:"MaintOrdSchedldBscEndDateTime,omitempty"`
	ScheduledBasicStartDate        null.String `boil:"ScheduledBasicStartDate" json:"ScheduledBasicStartDate,omitempty" toml:"ScheduledBasicStartDate" yaml:"ScheduledBasicStartDate,omitempty"`
	ScheduledBasicStartTime        null.String `boil:"ScheduledBasicStartTime" json:"ScheduledBasicStartTime,omitempty" toml:"ScheduledBasicStartTime" yaml:"ScheduledBasicStartTime,omitempty"`
	ScheduledBasicEndDate          null.String `boil:"ScheduledBasicEndDate" json:"ScheduledBasicEndDate,omitempty" toml:"ScheduledBasicEndDate" yaml:"ScheduledBasicEndDate,omitempty"`
	ScheduledBasicEndTime          null.String `boil:"ScheduledBasicEndTime" json:"ScheduledBasicEndTime,omitempty" toml:"ScheduledBasicEndTime" yaml:"ScheduledBasicEndTime,omitempty"`
	MaintenanceNotification        null.String `boil:"MaintenanceNotification" json:"MaintenanceNotification,omitempty" toml:"MaintenanceNotification" yaml:"MaintenanceNotification,omitempty"`
	OrdIsNotSchedldAutomatically   null.String `boil:"OrdIsNotSchedldAutomatically" json:"OrdIsNotSchedldAutomatically,omitempty" toml:"OrdIsNotSchedldAutomatically" yaml:"OrdIsNotSchedldAutomatically,omitempty"`
	MainWorkCenterInternalID       null.String `boil:"MainWorkCenterInternalID" json:"MainWorkCenterInternalID,omitempty" toml:"MainWorkCenterInternalID" yaml:"MainWorkCenterInternalID,omitempty"`
	MainWorkCenterTypeCode         null.String `boil:"MainWorkCenterTypeCode" json:"MainWorkCenterTypeCode,omitempty" toml:"MainWorkCenterTypeCode" yaml:"MainWorkCenterTypeCode,omitempty"`
	MainWorkCenter                 null.String `boil:"MainWorkCenter" json:"MainWorkCenter,omitempty" toml:"MainWorkCenter" yaml:"MainWorkCenter,omitempty"`
	MainWorkCenterPlant            null.String `boil:"MainWorkCenterPlant" json:"MainWorkCenterPlant,omitempty" toml:"MainWorkCenterPlant" yaml:"MainWorkCenterPlant,omitempty"`
	WorkCenterInternalID           null.String `boil:"WorkCenterInternalID" json:"WorkCenterInternalID,omitempty" toml:"WorkCenterInternalID" yaml:"WorkCenterInternalID,omitempty"`
	WorkCenterTypeCode             null.String `boil:"WorkCenterTypeCode" json:"WorkCenterTypeCode,omitempty" toml:"WorkCenterTypeCode" yaml:"WorkCenterTypeCode,omitempty"`
	WorkCenter                     null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	MaintenancePlanningPlant       null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	MaintenancePlant               null.String `boil:"MaintenancePlant" json:"MaintenancePlant,omitempty" toml:"MaintenancePlant" yaml:"MaintenancePlant,omitempty"`
	Assembly                       null.String `boil:"Assembly" json:"Assembly,omitempty" toml:"Assembly" yaml:"Assembly,omitempty"`
	MaintOrdProcessPhaseCode       null.String `boil:"MaintOrdProcessPhaseCode" json:"MaintOrdProcessPhaseCode,omitempty" toml:"MaintOrdProcessPhaseCode" yaml:"MaintOrdProcessPhaseCode,omitempty"`
	MaintOrdProcessSubPhaseCode    null.String `boil:"MaintOrdProcessSubPhaseCode" json:"MaintOrdProcessSubPhaseCode,omitempty" toml:"MaintOrdProcessSubPhaseCode" yaml:"MaintOrdProcessSubPhaseCode,omitempty"`
	BusinessArea                   null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	CompanyCode                    null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	CostCenter                     null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	ReferenceElement               null.String `boil:"ReferenceElement" json:"ReferenceElement,omitempty" toml:"ReferenceElement" yaml:"ReferenceElement,omitempty"`
	FunctionalArea                 null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	AdditionalDeviceData           null.String `boil:"AdditionalDeviceData" json:"AdditionalDeviceData,omitempty" toml:"AdditionalDeviceData" yaml:"AdditionalDeviceData,omitempty"`
	Equipment                      null.String `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	EquipmentName                  null.String `boil:"EquipmentName" json:"EquipmentName,omitempty" toml:"EquipmentName" yaml:"EquipmentName,omitempty"`
	FunctionalLocation             null.String `boil:"FunctionalLocation" json:"FunctionalLocation,omitempty" toml:"FunctionalLocation" yaml:"FunctionalLocation,omitempty"`
	MaintenanceOrderPlanningCode   null.String `boil:"MaintenanceOrderPlanningCode" json:"MaintenanceOrderPlanningCode,omitempty" toml:"MaintenanceOrderPlanningCode" yaml:"MaintenanceOrderPlanningCode,omitempty"`
	MaintenancePlannerGroup        null.String `boil:"MaintenancePlannerGroup" json:"MaintenancePlannerGroup,omitempty" toml:"MaintenancePlannerGroup" yaml:"MaintenancePlannerGroup,omitempty"`
	MaintenanceActivityType        null.String `boil:"MaintenanceActivityType" json:"MaintenanceActivityType,omitempty" toml:"MaintenanceActivityType" yaml:"MaintenanceActivityType,omitempty"`
	MaintPriority                  null.String `boil:"MaintPriority" json:"MaintPriority,omitempty" toml:"MaintPriority" yaml:"MaintPriority,omitempty"`
	MaintPriorityType              null.String `boil:"MaintPriorityType" json:"MaintPriorityType,omitempty" toml:"MaintPriorityType" yaml:"MaintPriorityType,omitempty"`
	OrderProcessingGroup           null.String `boil:"OrderProcessingGroup" json:"OrderProcessingGroup,omitempty" toml:"OrderProcessingGroup" yaml:"OrderProcessingGroup,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	ResponsibleCostCenter          null.String `boil:"ResponsibleCostCenter" json:"ResponsibleCostCenter,omitempty" toml:"ResponsibleCostCenter" yaml:"ResponsibleCostCenter,omitempty"`
	MaintenanceRevision            null.String `boil:"MaintenanceRevision" json:"MaintenanceRevision,omitempty" toml:"MaintenanceRevision" yaml:"MaintenanceRevision,omitempty"`
	SerialNumber                   null.String `boil:"SerialNumber" json:"SerialNumber,omitempty" toml:"SerialNumber" yaml:"SerialNumber,omitempty"`
	SuperiorProjectNetwork         null.String `boil:"SuperiorProjectNetwork" json:"SuperiorProjectNetwork,omitempty" toml:"SuperiorProjectNetwork" yaml:"SuperiorProjectNetwork,omitempty"`
	OperationSystemCondition       null.String `boil:"OperationSystemCondition" json:"OperationSystemCondition,omitempty" toml:"OperationSystemCondition" yaml:"OperationSystemCondition,omitempty"`
	WBSElement                     null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	WBSElementInternalID           null.String `boil:"WBSElementInternalID" json:"WBSElementInternalID,omitempty" toml:"WBSElementInternalID" yaml:"WBSElementInternalID,omitempty"`
	ControllingObjectClass         null.String `boil:"ControllingObjectClass" json:"ControllingObjectClass,omitempty" toml:"ControllingObjectClass" yaml:"ControllingObjectClass,omitempty"`
	MaintenanceOrderInternalID     null.String `boil:"MaintenanceOrderInternalID" json:"MaintenanceOrderInternalID,omitempty" toml:"MaintenanceOrderInternalID" yaml:"MaintenanceOrderInternalID,omitempty"`
	MaintenanceObjectList          null.String `boil:"MaintenanceObjectList" json:"MaintenanceObjectList,omitempty" toml:"MaintenanceObjectList" yaml:"MaintenanceObjectList,omitempty"`
	MaintObjectLocAcctAssgmtNmbr   null.String `boil:"MaintObjectLocAcctAssgmtNmbr" json:"MaintObjectLocAcctAssgmtNmbr,omitempty" toml:"MaintObjectLocAcctAssgmtNmbr" yaml:"MaintObjectLocAcctAssgmtNmbr,omitempty"`
	AssetLocation                  null.String `boil:"AssetLocation" json:"AssetLocation,omitempty" toml:"AssetLocation" yaml:"AssetLocation,omitempty"`
	AssetRoom                      null.String `boil:"AssetRoom" json:"AssetRoom,omitempty" toml:"AssetRoom" yaml:"AssetRoom,omitempty"`
	PlantSection                   null.String `boil:"PlantSection" json:"PlantSection,omitempty" toml:"PlantSection" yaml:"PlantSection,omitempty"`
	BasicSchedulingType            null.String `boil:"BasicSchedulingType" json:"BasicSchedulingType,omitempty" toml:"BasicSchedulingType" yaml:"BasicSchedulingType,omitempty"`
	LatestAcceptableCompletionDate null.String `boil:"LatestAcceptableCompletionDate" json:"LatestAcceptableCompletionDate,omitempty" toml:"LatestAcceptableCompletionDate" yaml:"LatestAcceptableCompletionDate,omitempty"`
	MaintOrdPersonResponsible      null.String `boil:"MaintOrdPersonResponsible" json:"MaintOrdPersonResponsible,omitempty" toml:"MaintOrdPersonResponsible" yaml:"MaintOrdPersonResponsible,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	ControllingSettlementProfile   null.String `boil:"ControllingSettlementProfile" json:"ControllingSettlementProfile,omitempty" toml:"ControllingSettlementProfile" yaml:"ControllingSettlementProfile,omitempty"`
	SystemStatusText               null.String `boil:"SystemStatusText" json:"SystemStatusText,omitempty" toml:"SystemStatusText" yaml:"SystemStatusText,omitempty"`
	UserStatusText                 null.String `boil:"UserStatusText" json:"UserStatusText,omitempty" toml:"UserStatusText" yaml:"UserStatusText,omitempty"`
	TechnicalObject                null.String `boil:"TechnicalObject" json:"TechnicalObject,omitempty" toml:"TechnicalObject" yaml:"TechnicalObject,omitempty"`
	TechnicalObjectLabel           null.String `boil:"TechnicalObjectLabel" json:"TechnicalObjectLabel,omitempty" toml:"TechnicalObjectLabel" yaml:"TechnicalObjectLabel,omitempty"`
	TechObjIsEquipOrFuncnlLoc      null.String `boil:"TechObjIsEquipOrFuncnlLoc" json:"TechObjIsEquipOrFuncnlLoc,omitempty" toml:"TechObjIsEquipOrFuncnlLoc" yaml:"TechObjIsEquipOrFuncnlLoc,omitempty"`

	R *sapMaintenanceOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceOrderHeaderDatumColumns = struct {
	MaintenanceOrder               string
	MaintOrderRoutingNumber        string
	MaintenanceOrderType           string
	MaintenanceOrderDesc           string
	MaintOrdBasicStartDateTime     string
	MaintOrdBasicEndDateTime       string
	MaintOrdBasicStartDate         string
	MaintOrdBasicStartTime         string
	MaintOrdBasicEndDate           string
	MaintOrdBasicEndTime           string
	MaintOrdSchedldBscStrtDateTime string
	MaintOrdSchedldBscEndDateTime  string
	ScheduledBasicStartDate        string
	ScheduledBasicStartTime        string
	ScheduledBasicEndDate          string
	ScheduledBasicEndTime          string
	MaintenanceNotification        string
	OrdIsNotSchedldAutomatically   string
	MainWorkCenterInternalID       string
	MainWorkCenterTypeCode         string
	MainWorkCenter                 string
	MainWorkCenterPlant            string
	WorkCenterInternalID           string
	WorkCenterTypeCode             string
	WorkCenter                     string
	MaintenancePlanningPlant       string
	MaintenancePlant               string
	Assembly                       string
	MaintOrdProcessPhaseCode       string
	MaintOrdProcessSubPhaseCode    string
	BusinessArea                   string
	CompanyCode                    string
	CostCenter                     string
	ReferenceElement               string
	FunctionalArea                 string
	AdditionalDeviceData           string
	Equipment                      string
	EquipmentName                  string
	FunctionalLocation             string
	MaintenanceOrderPlanningCode   string
	MaintenancePlannerGroup        string
	MaintenanceActivityType        string
	MaintPriority                  string
	MaintPriorityType              string
	OrderProcessingGroup           string
	ProfitCenter                   string
	ResponsibleCostCenter          string
	MaintenanceRevision            string
	SerialNumber                   string
	SuperiorProjectNetwork         string
	OperationSystemCondition       string
	WBSElement                     string
	WBSElementInternalID           string
	ControllingObjectClass         string
	MaintenanceOrderInternalID     string
	MaintenanceObjectList          string
	MaintObjectLocAcctAssgmtNmbr   string
	AssetLocation                  string
	AssetRoom                      string
	PlantSection                   string
	BasicSchedulingType            string
	LatestAcceptableCompletionDate string
	MaintOrdPersonResponsible      string
	LastChangeDateTime             string
	ControllingSettlementProfile   string
	SystemStatusText               string
	UserStatusText                 string
	TechnicalObject                string
	TechnicalObjectLabel           string
	TechObjIsEquipOrFuncnlLoc      string
}{
	MaintenanceOrder:               "MaintenanceOrder",
	MaintOrderRoutingNumber:        "MaintOrderRoutingNumber",
	MaintenanceOrderType:           "MaintenanceOrderType",
	MaintenanceOrderDesc:           "MaintenanceOrderDesc",
	MaintOrdBasicStartDateTime:     "MaintOrdBasicStartDateTime",
	MaintOrdBasicEndDateTime:       "MaintOrdBasicEndDateTime",
	MaintOrdBasicStartDate:         "MaintOrdBasicStartDate",
	MaintOrdBasicStartTime:         "MaintOrdBasicStartTime",
	MaintOrdBasicEndDate:           "MaintOrdBasicEndDate",
	MaintOrdBasicEndTime:           "MaintOrdBasicEndTime",
	MaintOrdSchedldBscStrtDateTime: "MaintOrdSchedldBscStrtDateTime",
	MaintOrdSchedldBscEndDateTime:  "MaintOrdSchedldBscEndDateTime",
	ScheduledBasicStartDate:        "ScheduledBasicStartDate",
	ScheduledBasicStartTime:        "ScheduledBasicStartTime",
	ScheduledBasicEndDate:          "ScheduledBasicEndDate",
	ScheduledBasicEndTime:          "ScheduledBasicEndTime",
	MaintenanceNotification:        "MaintenanceNotification",
	OrdIsNotSchedldAutomatically:   "OrdIsNotSchedldAutomatically",
	MainWorkCenterInternalID:       "MainWorkCenterInternalID",
	MainWorkCenterTypeCode:         "MainWorkCenterTypeCode",
	MainWorkCenter:                 "MainWorkCenter",
	MainWorkCenterPlant:            "MainWorkCenterPlant",
	WorkCenterInternalID:           "WorkCenterInternalID",
	WorkCenterTypeCode:             "WorkCenterTypeCode",
	WorkCenter:                     "WorkCenter",
	MaintenancePlanningPlant:       "MaintenancePlanningPlant",
	MaintenancePlant:               "MaintenancePlant",
	Assembly:                       "Assembly",
	MaintOrdProcessPhaseCode:       "MaintOrdProcessPhaseCode",
	MaintOrdProcessSubPhaseCode:    "MaintOrdProcessSubPhaseCode",
	BusinessArea:                   "BusinessArea",
	CompanyCode:                    "CompanyCode",
	CostCenter:                     "CostCenter",
	ReferenceElement:               "ReferenceElement",
	FunctionalArea:                 "FunctionalArea",
	AdditionalDeviceData:           "AdditionalDeviceData",
	Equipment:                      "Equipment",
	EquipmentName:                  "EquipmentName",
	FunctionalLocation:             "FunctionalLocation",
	MaintenanceOrderPlanningCode:   "MaintenanceOrderPlanningCode",
	MaintenancePlannerGroup:        "MaintenancePlannerGroup",
	MaintenanceActivityType:        "MaintenanceActivityType",
	MaintPriority:                  "MaintPriority",
	MaintPriorityType:              "MaintPriorityType",
	OrderProcessingGroup:           "OrderProcessingGroup",
	ProfitCenter:                   "ProfitCenter",
	ResponsibleCostCenter:          "ResponsibleCostCenter",
	MaintenanceRevision:            "MaintenanceRevision",
	SerialNumber:                   "SerialNumber",
	SuperiorProjectNetwork:         "SuperiorProjectNetwork",
	OperationSystemCondition:       "OperationSystemCondition",
	WBSElement:                     "WBSElement",
	WBSElementInternalID:           "WBSElementInternalID",
	ControllingObjectClass:         "ControllingObjectClass",
	MaintenanceOrderInternalID:     "MaintenanceOrderInternalID",
	MaintenanceObjectList:          "MaintenanceObjectList",
	MaintObjectLocAcctAssgmtNmbr:   "MaintObjectLocAcctAssgmtNmbr",
	AssetLocation:                  "AssetLocation",
	AssetRoom:                      "AssetRoom",
	PlantSection:                   "PlantSection",
	BasicSchedulingType:            "BasicSchedulingType",
	LatestAcceptableCompletionDate: "LatestAcceptableCompletionDate",
	MaintOrdPersonResponsible:      "MaintOrdPersonResponsible",
	LastChangeDateTime:             "LastChangeDateTime",
	ControllingSettlementProfile:   "ControllingSettlementProfile",
	SystemStatusText:               "SystemStatusText",
	UserStatusText:                 "UserStatusText",
	TechnicalObject:                "TechnicalObject",
	TechnicalObjectLabel:           "TechnicalObjectLabel",
	TechObjIsEquipOrFuncnlLoc:      "TechObjIsEquipOrFuncnlLoc",
}

var SapMaintenanceOrderHeaderDatumTableColumns = struct {
	MaintenanceOrder               string
	MaintOrderRoutingNumber        string
	MaintenanceOrderType           string
	MaintenanceOrderDesc           string
	MaintOrdBasicStartDateTime     string
	MaintOrdBasicEndDateTime       string
	MaintOrdBasicStartDate         string
	MaintOrdBasicStartTime         string
	MaintOrdBasicEndDate           string
	MaintOrdBasicEndTime           string
	MaintOrdSchedldBscStrtDateTime string
	MaintOrdSchedldBscEndDateTime  string
	ScheduledBasicStartDate        string
	ScheduledBasicStartTime        string
	ScheduledBasicEndDate          string
	ScheduledBasicEndTime          string
	MaintenanceNotification        string
	OrdIsNotSchedldAutomatically   string
	MainWorkCenterInternalID       string
	MainWorkCenterTypeCode         string
	MainWorkCenter                 string
	MainWorkCenterPlant            string
	WorkCenterInternalID           string
	WorkCenterTypeCode             string
	WorkCenter                     string
	MaintenancePlanningPlant       string
	MaintenancePlant               string
	Assembly                       string
	MaintOrdProcessPhaseCode       string
	MaintOrdProcessSubPhaseCode    string
	BusinessArea                   string
	CompanyCode                    string
	CostCenter                     string
	ReferenceElement               string
	FunctionalArea                 string
	AdditionalDeviceData           string
	Equipment                      string
	EquipmentName                  string
	FunctionalLocation             string
	MaintenanceOrderPlanningCode   string
	MaintenancePlannerGroup        string
	MaintenanceActivityType        string
	MaintPriority                  string
	MaintPriorityType              string
	OrderProcessingGroup           string
	ProfitCenter                   string
	ResponsibleCostCenter          string
	MaintenanceRevision            string
	SerialNumber                   string
	SuperiorProjectNetwork         string
	OperationSystemCondition       string
	WBSElement                     string
	WBSElementInternalID           string
	ControllingObjectClass         string
	MaintenanceOrderInternalID     string
	MaintenanceObjectList          string
	MaintObjectLocAcctAssgmtNmbr   string
	AssetLocation                  string
	AssetRoom                      string
	PlantSection                   string
	BasicSchedulingType            string
	LatestAcceptableCompletionDate string
	MaintOrdPersonResponsible      string
	LastChangeDateTime             string
	ControllingSettlementProfile   string
	SystemStatusText               string
	UserStatusText                 string
	TechnicalObject                string
	TechnicalObjectLabel           string
	TechObjIsEquipOrFuncnlLoc      string
}{
	MaintenanceOrder:               "sap_maintenance_order_header_data.MaintenanceOrder",
	MaintOrderRoutingNumber:        "sap_maintenance_order_header_data.MaintOrderRoutingNumber",
	MaintenanceOrderType:           "sap_maintenance_order_header_data.MaintenanceOrderType",
	MaintenanceOrderDesc:           "sap_maintenance_order_header_data.MaintenanceOrderDesc",
	MaintOrdBasicStartDateTime:     "sap_maintenance_order_header_data.MaintOrdBasicStartDateTime",
	MaintOrdBasicEndDateTime:       "sap_maintenance_order_header_data.MaintOrdBasicEndDateTime",
	MaintOrdBasicStartDate:         "sap_maintenance_order_header_data.MaintOrdBasicStartDate",
	MaintOrdBasicStartTime:         "sap_maintenance_order_header_data.MaintOrdBasicStartTime",
	MaintOrdBasicEndDate:           "sap_maintenance_order_header_data.MaintOrdBasicEndDate",
	MaintOrdBasicEndTime:           "sap_maintenance_order_header_data.MaintOrdBasicEndTime",
	MaintOrdSchedldBscStrtDateTime: "sap_maintenance_order_header_data.MaintOrdSchedldBscStrtDateTime",
	MaintOrdSchedldBscEndDateTime:  "sap_maintenance_order_header_data.MaintOrdSchedldBscEndDateTime",
	ScheduledBasicStartDate:        "sap_maintenance_order_header_data.ScheduledBasicStartDate",
	ScheduledBasicStartTime:        "sap_maintenance_order_header_data.ScheduledBasicStartTime",
	ScheduledBasicEndDate:          "sap_maintenance_order_header_data.ScheduledBasicEndDate",
	ScheduledBasicEndTime:          "sap_maintenance_order_header_data.ScheduledBasicEndTime",
	MaintenanceNotification:        "sap_maintenance_order_header_data.MaintenanceNotification",
	OrdIsNotSchedldAutomatically:   "sap_maintenance_order_header_data.OrdIsNotSchedldAutomatically",
	MainWorkCenterInternalID:       "sap_maintenance_order_header_data.MainWorkCenterInternalID",
	MainWorkCenterTypeCode:         "sap_maintenance_order_header_data.MainWorkCenterTypeCode",
	MainWorkCenter:                 "sap_maintenance_order_header_data.MainWorkCenter",
	MainWorkCenterPlant:            "sap_maintenance_order_header_data.MainWorkCenterPlant",
	WorkCenterInternalID:           "sap_maintenance_order_header_data.WorkCenterInternalID",
	WorkCenterTypeCode:             "sap_maintenance_order_header_data.WorkCenterTypeCode",
	WorkCenter:                     "sap_maintenance_order_header_data.WorkCenter",
	MaintenancePlanningPlant:       "sap_maintenance_order_header_data.MaintenancePlanningPlant",
	MaintenancePlant:               "sap_maintenance_order_header_data.MaintenancePlant",
	Assembly:                       "sap_maintenance_order_header_data.Assembly",
	MaintOrdProcessPhaseCode:       "sap_maintenance_order_header_data.MaintOrdProcessPhaseCode",
	MaintOrdProcessSubPhaseCode:    "sap_maintenance_order_header_data.MaintOrdProcessSubPhaseCode",
	BusinessArea:                   "sap_maintenance_order_header_data.BusinessArea",
	CompanyCode:                    "sap_maintenance_order_header_data.CompanyCode",
	CostCenter:                     "sap_maintenance_order_header_data.CostCenter",
	ReferenceElement:               "sap_maintenance_order_header_data.ReferenceElement",
	FunctionalArea:                 "sap_maintenance_order_header_data.FunctionalArea",
	AdditionalDeviceData:           "sap_maintenance_order_header_data.AdditionalDeviceData",
	Equipment:                      "sap_maintenance_order_header_data.Equipment",
	EquipmentName:                  "sap_maintenance_order_header_data.EquipmentName",
	FunctionalLocation:             "sap_maintenance_order_header_data.FunctionalLocation",
	MaintenanceOrderPlanningCode:   "sap_maintenance_order_header_data.MaintenanceOrderPlanningCode",
	MaintenancePlannerGroup:        "sap_maintenance_order_header_data.MaintenancePlannerGroup",
	MaintenanceActivityType:        "sap_maintenance_order_header_data.MaintenanceActivityType",
	MaintPriority:                  "sap_maintenance_order_header_data.MaintPriority",
	MaintPriorityType:              "sap_maintenance_order_header_data.MaintPriorityType",
	OrderProcessingGroup:           "sap_maintenance_order_header_data.OrderProcessingGroup",
	ProfitCenter:                   "sap_maintenance_order_header_data.ProfitCenter",
	ResponsibleCostCenter:          "sap_maintenance_order_header_data.ResponsibleCostCenter",
	MaintenanceRevision:            "sap_maintenance_order_header_data.MaintenanceRevision",
	SerialNumber:                   "sap_maintenance_order_header_data.SerialNumber",
	SuperiorProjectNetwork:         "sap_maintenance_order_header_data.SuperiorProjectNetwork",
	OperationSystemCondition:       "sap_maintenance_order_header_data.OperationSystemCondition",
	WBSElement:                     "sap_maintenance_order_header_data.WBSElement",
	WBSElementInternalID:           "sap_maintenance_order_header_data.WBSElementInternalID",
	ControllingObjectClass:         "sap_maintenance_order_header_data.ControllingObjectClass",
	MaintenanceOrderInternalID:     "sap_maintenance_order_header_data.MaintenanceOrderInternalID",
	MaintenanceObjectList:          "sap_maintenance_order_header_data.MaintenanceObjectList",
	MaintObjectLocAcctAssgmtNmbr:   "sap_maintenance_order_header_data.MaintObjectLocAcctAssgmtNmbr",
	AssetLocation:                  "sap_maintenance_order_header_data.AssetLocation",
	AssetRoom:                      "sap_maintenance_order_header_data.AssetRoom",
	PlantSection:                   "sap_maintenance_order_header_data.PlantSection",
	BasicSchedulingType:            "sap_maintenance_order_header_data.BasicSchedulingType",
	LatestAcceptableCompletionDate: "sap_maintenance_order_header_data.LatestAcceptableCompletionDate",
	MaintOrdPersonResponsible:      "sap_maintenance_order_header_data.MaintOrdPersonResponsible",
	LastChangeDateTime:             "sap_maintenance_order_header_data.LastChangeDateTime",
	ControllingSettlementProfile:   "sap_maintenance_order_header_data.ControllingSettlementProfile",
	SystemStatusText:               "sap_maintenance_order_header_data.SystemStatusText",
	UserStatusText:                 "sap_maintenance_order_header_data.UserStatusText",
	TechnicalObject:                "sap_maintenance_order_header_data.TechnicalObject",
	TechnicalObjectLabel:           "sap_maintenance_order_header_data.TechnicalObjectLabel",
	TechObjIsEquipOrFuncnlLoc:      "sap_maintenance_order_header_data.TechObjIsEquipOrFuncnlLoc",
}

// Generated where

var SapMaintenanceOrderHeaderDatumWhere = struct {
	MaintenanceOrder               whereHelperstring
	MaintOrderRoutingNumber        whereHelpernull_String
	MaintenanceOrderType           whereHelpernull_String
	MaintenanceOrderDesc           whereHelpernull_String
	MaintOrdBasicStartDateTime     whereHelpernull_String
	MaintOrdBasicEndDateTime       whereHelpernull_String
	MaintOrdBasicStartDate         whereHelpernull_String
	MaintOrdBasicStartTime         whereHelpernull_String
	MaintOrdBasicEndDate           whereHelpernull_String
	MaintOrdBasicEndTime           whereHelpernull_String
	MaintOrdSchedldBscStrtDateTime whereHelpernull_String
	MaintOrdSchedldBscEndDateTime  whereHelpernull_String
	ScheduledBasicStartDate        whereHelpernull_String
	ScheduledBasicStartTime        whereHelpernull_String
	ScheduledBasicEndDate          whereHelpernull_String
	ScheduledBasicEndTime          whereHelpernull_String
	MaintenanceNotification        whereHelpernull_String
	OrdIsNotSchedldAutomatically   whereHelpernull_String
	MainWorkCenterInternalID       whereHelpernull_String
	MainWorkCenterTypeCode         whereHelpernull_String
	MainWorkCenter                 whereHelpernull_String
	MainWorkCenterPlant            whereHelpernull_String
	WorkCenterInternalID           whereHelpernull_String
	WorkCenterTypeCode             whereHelpernull_String
	WorkCenter                     whereHelpernull_String
	MaintenancePlanningPlant       whereHelpernull_String
	MaintenancePlant               whereHelpernull_String
	Assembly                       whereHelpernull_String
	MaintOrdProcessPhaseCode       whereHelpernull_String
	MaintOrdProcessSubPhaseCode    whereHelpernull_String
	BusinessArea                   whereHelpernull_String
	CompanyCode                    whereHelpernull_String
	CostCenter                     whereHelpernull_String
	ReferenceElement               whereHelpernull_String
	FunctionalArea                 whereHelpernull_String
	AdditionalDeviceData           whereHelpernull_String
	Equipment                      whereHelpernull_String
	EquipmentName                  whereHelpernull_String
	FunctionalLocation             whereHelpernull_String
	MaintenanceOrderPlanningCode   whereHelpernull_String
	MaintenancePlannerGroup        whereHelpernull_String
	MaintenanceActivityType        whereHelpernull_String
	MaintPriority                  whereHelpernull_String
	MaintPriorityType              whereHelpernull_String
	OrderProcessingGroup           whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	ResponsibleCostCenter          whereHelpernull_String
	MaintenanceRevision            whereHelpernull_String
	SerialNumber                   whereHelpernull_String
	SuperiorProjectNetwork         whereHelpernull_String
	OperationSystemCondition       whereHelpernull_String
	WBSElement                     whereHelpernull_String
	WBSElementInternalID           whereHelpernull_String
	ControllingObjectClass         whereHelpernull_String
	MaintenanceOrderInternalID     whereHelpernull_String
	MaintenanceObjectList          whereHelpernull_String
	MaintObjectLocAcctAssgmtNmbr   whereHelpernull_String
	AssetLocation                  whereHelpernull_String
	AssetRoom                      whereHelpernull_String
	PlantSection                   whereHelpernull_String
	BasicSchedulingType            whereHelpernull_String
	LatestAcceptableCompletionDate whereHelpernull_String
	MaintOrdPersonResponsible      whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
	ControllingSettlementProfile   whereHelpernull_String
	SystemStatusText               whereHelpernull_String
	UserStatusText                 whereHelpernull_String
	TechnicalObject                whereHelpernull_String
	TechnicalObjectLabel           whereHelpernull_String
	TechObjIsEquipOrFuncnlLoc      whereHelpernull_String
}{
	MaintenanceOrder:               whereHelperstring{field: "`sap_maintenance_order_header_data`.`MaintenanceOrder`"},
	MaintOrderRoutingNumber:        whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrderRoutingNumber`"},
	MaintenanceOrderType:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceOrderType`"},
	MaintenanceOrderDesc:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceOrderDesc`"},
	MaintOrdBasicStartDateTime:     whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdBasicStartDateTime`"},
	MaintOrdBasicEndDateTime:       whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdBasicEndDateTime`"},
	MaintOrdBasicStartDate:         whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdBasicStartDate`"},
	MaintOrdBasicStartTime:         whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdBasicStartTime`"},
	MaintOrdBasicEndDate:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdBasicEndDate`"},
	MaintOrdBasicEndTime:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdBasicEndTime`"},
	MaintOrdSchedldBscStrtDateTime: whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdSchedldBscStrtDateTime`"},
	MaintOrdSchedldBscEndDateTime:  whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdSchedldBscEndDateTime`"},
	ScheduledBasicStartDate:        whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ScheduledBasicStartDate`"},
	ScheduledBasicStartTime:        whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ScheduledBasicStartTime`"},
	ScheduledBasicEndDate:          whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ScheduledBasicEndDate`"},
	ScheduledBasicEndTime:          whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ScheduledBasicEndTime`"},
	MaintenanceNotification:        whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceNotification`"},
	OrdIsNotSchedldAutomatically:   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`OrdIsNotSchedldAutomatically`"},
	MainWorkCenterInternalID:       whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MainWorkCenterInternalID`"},
	MainWorkCenterTypeCode:         whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MainWorkCenterTypeCode`"},
	MainWorkCenter:                 whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MainWorkCenter`"},
	MainWorkCenterPlant:            whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MainWorkCenterPlant`"},
	WorkCenterInternalID:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`WorkCenterInternalID`"},
	WorkCenterTypeCode:             whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`WorkCenterTypeCode`"},
	WorkCenter:                     whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`WorkCenter`"},
	MaintenancePlanningPlant:       whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenancePlanningPlant`"},
	MaintenancePlant:               whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenancePlant`"},
	Assembly:                       whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`Assembly`"},
	MaintOrdProcessPhaseCode:       whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdProcessPhaseCode`"},
	MaintOrdProcessSubPhaseCode:    whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdProcessSubPhaseCode`"},
	BusinessArea:                   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`BusinessArea`"},
	CompanyCode:                    whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`CompanyCode`"},
	CostCenter:                     whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`CostCenter`"},
	ReferenceElement:               whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ReferenceElement`"},
	FunctionalArea:                 whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`FunctionalArea`"},
	AdditionalDeviceData:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`AdditionalDeviceData`"},
	Equipment:                      whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`Equipment`"},
	EquipmentName:                  whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`EquipmentName`"},
	FunctionalLocation:             whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`FunctionalLocation`"},
	MaintenanceOrderPlanningCode:   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceOrderPlanningCode`"},
	MaintenancePlannerGroup:        whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenancePlannerGroup`"},
	MaintenanceActivityType:        whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceActivityType`"},
	MaintPriority:                  whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintPriority`"},
	MaintPriorityType:              whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintPriorityType`"},
	OrderProcessingGroup:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`OrderProcessingGroup`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ProfitCenter`"},
	ResponsibleCostCenter:          whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ResponsibleCostCenter`"},
	MaintenanceRevision:            whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceRevision`"},
	SerialNumber:                   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`SerialNumber`"},
	SuperiorProjectNetwork:         whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`SuperiorProjectNetwork`"},
	OperationSystemCondition:       whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`OperationSystemCondition`"},
	WBSElement:                     whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`WBSElement`"},
	WBSElementInternalID:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`WBSElementInternalID`"},
	ControllingObjectClass:         whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ControllingObjectClass`"},
	MaintenanceOrderInternalID:     whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceOrderInternalID`"},
	MaintenanceObjectList:          whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintenanceObjectList`"},
	MaintObjectLocAcctAssgmtNmbr:   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintObjectLocAcctAssgmtNmbr`"},
	AssetLocation:                  whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`AssetLocation`"},
	AssetRoom:                      whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`AssetRoom`"},
	PlantSection:                   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`PlantSection`"},
	BasicSchedulingType:            whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`BasicSchedulingType`"},
	LatestAcceptableCompletionDate: whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`LatestAcceptableCompletionDate`"},
	MaintOrdPersonResponsible:      whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`MaintOrdPersonResponsible`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`LastChangeDateTime`"},
	ControllingSettlementProfile:   whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`ControllingSettlementProfile`"},
	SystemStatusText:               whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`SystemStatusText`"},
	UserStatusText:                 whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`UserStatusText`"},
	TechnicalObject:                whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`TechnicalObject`"},
	TechnicalObjectLabel:           whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`TechnicalObjectLabel`"},
	TechObjIsEquipOrFuncnlLoc:      whereHelpernull_String{field: "`sap_maintenance_order_header_data`.`TechObjIsEquipOrFuncnlLoc`"},
}

// SapMaintenanceOrderHeaderDatumRels is where relationship names are stored.
var SapMaintenanceOrderHeaderDatumRels = struct {
	MaintenanceOrderSapMaintenanceOrderObjectListItemData     string
	MaintenanceOrderSapMaintenanceOrderOperationComponentData string
	MaintenanceOrderSapMaintenanceOrderOperationData          string
}{
	MaintenanceOrderSapMaintenanceOrderObjectListItemData:     "MaintenanceOrderSapMaintenanceOrderObjectListItemData",
	MaintenanceOrderSapMaintenanceOrderOperationComponentData: "MaintenanceOrderSapMaintenanceOrderOperationComponentData",
	MaintenanceOrderSapMaintenanceOrderOperationData:          "MaintenanceOrderSapMaintenanceOrderOperationData",
}

// sapMaintenanceOrderHeaderDatumR is where relationships are stored.
type sapMaintenanceOrderHeaderDatumR struct {
	MaintenanceOrderSapMaintenanceOrderObjectListItemData     SapMaintenanceOrderObjectListItemDatumSlice     `boil:"MaintenanceOrderSapMaintenanceOrderObjectListItemData" json:"MaintenanceOrderSapMaintenanceOrderObjectListItemData" toml:"MaintenanceOrderSapMaintenanceOrderObjectListItemData" yaml:"MaintenanceOrderSapMaintenanceOrderObjectListItemData"`
	MaintenanceOrderSapMaintenanceOrderOperationComponentData SapMaintenanceOrderOperationComponentDatumSlice `boil:"MaintenanceOrderSapMaintenanceOrderOperationComponentData" json:"MaintenanceOrderSapMaintenanceOrderOperationComponentData" toml:"MaintenanceOrderSapMaintenanceOrderOperationComponentData" yaml:"MaintenanceOrderSapMaintenanceOrderOperationComponentData"`
	MaintenanceOrderSapMaintenanceOrderOperationData          SapMaintenanceOrderOperationDatumSlice          `boil:"MaintenanceOrderSapMaintenanceOrderOperationData" json:"MaintenanceOrderSapMaintenanceOrderOperationData" toml:"MaintenanceOrderSapMaintenanceOrderOperationData" yaml:"MaintenanceOrderSapMaintenanceOrderOperationData"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceOrderHeaderDatumR) NewStruct() *sapMaintenanceOrderHeaderDatumR {
	return &sapMaintenanceOrderHeaderDatumR{}
}

// sapMaintenanceOrderHeaderDatumL is where Load methods for each relationship are stored.
type sapMaintenanceOrderHeaderDatumL struct{}

var (
	sapMaintenanceOrderHeaderDatumAllColumns            = []string{"MaintenanceOrder", "MaintOrderRoutingNumber", "MaintenanceOrderType", "MaintenanceOrderDesc", "MaintOrdBasicStartDateTime", "MaintOrdBasicEndDateTime", "MaintOrdBasicStartDate", "MaintOrdBasicStartTime", "MaintOrdBasicEndDate", "MaintOrdBasicEndTime", "MaintOrdSchedldBscStrtDateTime", "MaintOrdSchedldBscEndDateTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "MaintenanceNotification", "OrdIsNotSchedldAutomatically", "MainWorkCenterInternalID", "MainWorkCenterTypeCode", "MainWorkCenter", "MainWorkCenterPlant", "WorkCenterInternalID", "WorkCenterTypeCode", "WorkCenter", "MaintenancePlanningPlant", "MaintenancePlant", "Assembly", "MaintOrdProcessPhaseCode", "MaintOrdProcessSubPhaseCode", "BusinessArea", "CompanyCode", "CostCenter", "ReferenceElement", "FunctionalArea", "AdditionalDeviceData", "Equipment", "EquipmentName", "FunctionalLocation", "MaintenanceOrderPlanningCode", "MaintenancePlannerGroup", "MaintenanceActivityType", "MaintPriority", "MaintPriorityType", "OrderProcessingGroup", "ProfitCenter", "ResponsibleCostCenter", "MaintenanceRevision", "SerialNumber", "SuperiorProjectNetwork", "OperationSystemCondition", "WBSElement", "WBSElementInternalID", "ControllingObjectClass", "MaintenanceOrderInternalID", "MaintenanceObjectList", "MaintObjectLocAcctAssgmtNmbr", "AssetLocation", "AssetRoom", "PlantSection", "BasicSchedulingType", "LatestAcceptableCompletionDate", "MaintOrdPersonResponsible", "LastChangeDateTime", "ControllingSettlementProfile", "SystemStatusText", "UserStatusText", "TechnicalObject", "TechnicalObjectLabel", "TechObjIsEquipOrFuncnlLoc"}
	sapMaintenanceOrderHeaderDatumColumnsWithoutDefault = []string{"MaintenanceOrder", "MaintOrderRoutingNumber", "MaintenanceOrderType", "MaintenanceOrderDesc", "MaintOrdBasicStartDateTime", "MaintOrdBasicEndDateTime", "MaintOrdBasicStartDate", "MaintOrdBasicStartTime", "MaintOrdBasicEndDate", "MaintOrdBasicEndTime", "MaintOrdSchedldBscStrtDateTime", "MaintOrdSchedldBscEndDateTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "MaintenanceNotification", "OrdIsNotSchedldAutomatically", "MainWorkCenterInternalID", "MainWorkCenterTypeCode", "MainWorkCenter", "MainWorkCenterPlant", "WorkCenterInternalID", "WorkCenterTypeCode", "WorkCenter", "MaintenancePlanningPlant", "MaintenancePlant", "Assembly", "MaintOrdProcessPhaseCode", "MaintOrdProcessSubPhaseCode", "BusinessArea", "CompanyCode", "CostCenter", "ReferenceElement", "FunctionalArea", "AdditionalDeviceData", "Equipment", "EquipmentName", "FunctionalLocation", "MaintenanceOrderPlanningCode", "MaintenancePlannerGroup", "MaintenanceActivityType", "MaintPriority", "MaintPriorityType", "OrderProcessingGroup", "ProfitCenter", "ResponsibleCostCenter", "MaintenanceRevision", "SerialNumber", "SuperiorProjectNetwork", "OperationSystemCondition", "WBSElement", "WBSElementInternalID", "ControllingObjectClass", "MaintenanceOrderInternalID", "MaintenanceObjectList", "MaintObjectLocAcctAssgmtNmbr", "AssetLocation", "AssetRoom", "PlantSection", "BasicSchedulingType", "LatestAcceptableCompletionDate", "MaintOrdPersonResponsible", "LastChangeDateTime", "ControllingSettlementProfile", "SystemStatusText", "UserStatusText", "TechnicalObject", "TechnicalObjectLabel", "TechObjIsEquipOrFuncnlLoc"}
	sapMaintenanceOrderHeaderDatumColumnsWithDefault    = []string{}
	sapMaintenanceOrderHeaderDatumPrimaryKeyColumns     = []string{"MaintenanceOrder"}
)

type (
	// SapMaintenanceOrderHeaderDatumSlice is an alias for a slice of pointers to SapMaintenanceOrderHeaderDatum.
	// This should almost always be used instead of []SapMaintenanceOrderHeaderDatum.
	SapMaintenanceOrderHeaderDatumSlice []*SapMaintenanceOrderHeaderDatum
	// SapMaintenanceOrderHeaderDatumHook is the signature for custom SapMaintenanceOrderHeaderDatum hook methods
	SapMaintenanceOrderHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceOrderHeaderDatum) error

	sapMaintenanceOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceOrderHeaderDatumType                 = reflect.TypeOf(&SapMaintenanceOrderHeaderDatum{})
	sapMaintenanceOrderHeaderDatumMapping              = queries.MakeStructMapping(sapMaintenanceOrderHeaderDatumType)
	sapMaintenanceOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns)
	sapMaintenanceOrderHeaderDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceOrderHeaderDatumBeforeInsertHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumBeforeUpdateHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumBeforeDeleteHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumBeforeUpsertHooks []SapMaintenanceOrderHeaderDatumHook

var sapMaintenanceOrderHeaderDatumAfterInsertHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumAfterSelectHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumAfterUpdateHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumAfterDeleteHooks []SapMaintenanceOrderHeaderDatumHook
var sapMaintenanceOrderHeaderDatumAfterUpsertHooks []SapMaintenanceOrderHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceOrderHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceOrderHeaderDatumHook registers your hook function for all future operations.
func AddSapMaintenanceOrderHeaderDatumHook(hookPoint boil.HookPoint, sapMaintenanceOrderHeaderDatumHook SapMaintenanceOrderHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapMaintenanceOrderHeaderDatumBeforeInsertHooks = append(sapMaintenanceOrderHeaderDatumBeforeInsertHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceOrderHeaderDatumBeforeUpdateHooks = append(sapMaintenanceOrderHeaderDatumBeforeUpdateHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceOrderHeaderDatumBeforeDeleteHooks = append(sapMaintenanceOrderHeaderDatumBeforeDeleteHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceOrderHeaderDatumBeforeUpsertHooks = append(sapMaintenanceOrderHeaderDatumBeforeUpsertHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceOrderHeaderDatumAfterInsertHooks = append(sapMaintenanceOrderHeaderDatumAfterInsertHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.AfterSelectHook:
		sapMaintenanceOrderHeaderDatumAfterSelectHooks = append(sapMaintenanceOrderHeaderDatumAfterSelectHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceOrderHeaderDatumAfterUpdateHooks = append(sapMaintenanceOrderHeaderDatumAfterUpdateHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceOrderHeaderDatumAfterDeleteHooks = append(sapMaintenanceOrderHeaderDatumAfterDeleteHooks, sapMaintenanceOrderHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceOrderHeaderDatumAfterUpsertHooks = append(sapMaintenanceOrderHeaderDatumAfterUpsertHooks, sapMaintenanceOrderHeaderDatumHook)
	}
}

// One returns a single sapMaintenanceOrderHeaderDatum record from the query.
func (q sapMaintenanceOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceOrderHeaderDatum, error) {
	o := &SapMaintenanceOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_order_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceOrderHeaderDatum records from the query.
func (q sapMaintenanceOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceOrderHeaderDatumSlice, error) {
	var o []*SapMaintenanceOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceOrderHeaderDatum slice")
	}

	if len(sapMaintenanceOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceOrderHeaderDatum records in the query.
func (q sapMaintenanceOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_order_header_data exists")
	}

	return count > 0, nil
}

// MaintenanceOrderSapMaintenanceOrderObjectListItemData retrieves all the sap_maintenance_order_object_list_item_datum's SapMaintenanceOrderObjectListItemData with an executor via MaintenanceOrder column.
func (o *SapMaintenanceOrderHeaderDatum) MaintenanceOrderSapMaintenanceOrderObjectListItemData(mods ...qm.QueryMod) sapMaintenanceOrderObjectListItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_maintenance_order_object_list_item_data`.`MaintenanceOrder`=?", o.MaintenanceOrder),
	)

	query := SapMaintenanceOrderObjectListItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_order_object_list_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_maintenance_order_object_list_item_data`.*"})
	}

	return query
}

// MaintenanceOrderSapMaintenanceOrderOperationComponentData retrieves all the sap_maintenance_order_operation_component_datum's SapMaintenanceOrderOperationComponentData with an executor via MaintenanceOrder column.
func (o *SapMaintenanceOrderHeaderDatum) MaintenanceOrderSapMaintenanceOrderOperationComponentData(mods ...qm.QueryMod) sapMaintenanceOrderOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_maintenance_order_operation_component_data`.`MaintenanceOrder`=?", o.MaintenanceOrder),
	)

	query := SapMaintenanceOrderOperationComponentData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_order_operation_component_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_maintenance_order_operation_component_data`.*"})
	}

	return query
}

// MaintenanceOrderSapMaintenanceOrderOperationData retrieves all the sap_maintenance_order_operation_datum's SapMaintenanceOrderOperationData with an executor via MaintenanceOrder column.
func (o *SapMaintenanceOrderHeaderDatum) MaintenanceOrderSapMaintenanceOrderOperationData(mods ...qm.QueryMod) sapMaintenanceOrderOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_maintenance_order_operation_data`.`MaintenanceOrder`=?", o.MaintenanceOrder),
	)

	query := SapMaintenanceOrderOperationData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_order_operation_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_maintenance_order_operation_data`.*"})
	}

	return query
}

// LoadMaintenanceOrderSapMaintenanceOrderObjectListItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapMaintenanceOrderHeaderDatumL) LoadMaintenanceOrderSapMaintenanceOrderObjectListItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceOrderHeaderDatum
	var object *SapMaintenanceOrderHeaderDatum

	if singular {
		object = maybeSapMaintenanceOrderHeaderDatum.(*SapMaintenanceOrderHeaderDatum)
	} else {
		slice = *maybeSapMaintenanceOrderHeaderDatum.(*[]*SapMaintenanceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceOrderHeaderDatumR{}
		}
		args = append(args, object.MaintenanceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceOrder {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_order_object_list_item_data`),
		qm.WhereIn(`sap_maintenance_order_object_list_item_data.MaintenanceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_maintenance_order_object_list_item_data")
	}

	var resultSlice []*SapMaintenanceOrderObjectListItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_maintenance_order_object_list_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_maintenance_order_object_list_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_order_object_list_item_data")
	}

	if len(sapMaintenanceOrderObjectListItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapMaintenanceOrderObjectListItemDatumR{}
			}
			foreign.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MaintenanceOrder == foreign.MaintenanceOrder {
				local.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData = append(local.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapMaintenanceOrderObjectListItemDatumR{}
				}
				foreign.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadMaintenanceOrderSapMaintenanceOrderOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapMaintenanceOrderHeaderDatumL) LoadMaintenanceOrderSapMaintenanceOrderOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceOrderHeaderDatum
	var object *SapMaintenanceOrderHeaderDatum

	if singular {
		object = maybeSapMaintenanceOrderHeaderDatum.(*SapMaintenanceOrderHeaderDatum)
	} else {
		slice = *maybeSapMaintenanceOrderHeaderDatum.(*[]*SapMaintenanceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceOrderHeaderDatumR{}
		}
		args = append(args, object.MaintenanceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceOrder {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_order_operation_component_data`),
		qm.WhereIn(`sap_maintenance_order_operation_component_data.MaintenanceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_maintenance_order_operation_component_data")
	}

	var resultSlice []*SapMaintenanceOrderOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_maintenance_order_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_maintenance_order_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_order_operation_component_data")
	}

	if len(sapMaintenanceOrderOperationComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapMaintenanceOrderOperationComponentDatumR{}
			}
			foreign.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MaintenanceOrder == foreign.MaintenanceOrder {
				local.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData = append(local.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData, foreign)
				if foreign.R == nil {
					foreign.R = &sapMaintenanceOrderOperationComponentDatumR{}
				}
				foreign.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadMaintenanceOrderSapMaintenanceOrderOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapMaintenanceOrderHeaderDatumL) LoadMaintenanceOrderSapMaintenanceOrderOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceOrderHeaderDatum
	var object *SapMaintenanceOrderHeaderDatum

	if singular {
		object = maybeSapMaintenanceOrderHeaderDatum.(*SapMaintenanceOrderHeaderDatum)
	} else {
		slice = *maybeSapMaintenanceOrderHeaderDatum.(*[]*SapMaintenanceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceOrderHeaderDatumR{}
		}
		args = append(args, object.MaintenanceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceOrder {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_order_operation_data`),
		qm.WhereIn(`sap_maintenance_order_operation_data.MaintenanceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_maintenance_order_operation_data")
	}

	var resultSlice []*SapMaintenanceOrderOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_maintenance_order_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_maintenance_order_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_order_operation_data")
	}

	if len(sapMaintenanceOrderOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MaintenanceOrderSapMaintenanceOrderOperationData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapMaintenanceOrderOperationDatumR{}
			}
			foreign.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MaintenanceOrder == foreign.MaintenanceOrder {
				local.R.MaintenanceOrderSapMaintenanceOrderOperationData = append(local.R.MaintenanceOrderSapMaintenanceOrderOperationData, foreign)
				if foreign.R == nil {
					foreign.R = &sapMaintenanceOrderOperationDatumR{}
				}
				foreign.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddMaintenanceOrderSapMaintenanceOrderObjectListItemData adds the given related objects to the existing relationships
// of the sap_maintenance_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData.
// Sets related.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum appropriately.
func (o *SapMaintenanceOrderHeaderDatum) AddMaintenanceOrderSapMaintenanceOrderObjectListItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapMaintenanceOrderObjectListItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MaintenanceOrder = o.MaintenanceOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_maintenance_order_object_list_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceOrder"}),
				strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderObjectListItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.MaintenanceOrder, rel.MaintenanceOrder, rel.MaintenanceOrderObjectList, rel.MaintenanceObjectListItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MaintenanceOrder = o.MaintenanceOrder
		}
	}

	if o.R == nil {
		o.R = &sapMaintenanceOrderHeaderDatumR{
			MaintenanceOrderSapMaintenanceOrderObjectListItemData: related,
		}
	} else {
		o.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData = append(o.R.MaintenanceOrderSapMaintenanceOrderObjectListItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapMaintenanceOrderObjectListItemDatumR{
				MaintenanceOrderSapMaintenanceOrderHeaderDatum: o,
			}
		} else {
			rel.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = o
		}
	}
	return nil
}

// AddMaintenanceOrderSapMaintenanceOrderOperationComponentData adds the given related objects to the existing relationships
// of the sap_maintenance_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData.
// Sets related.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum appropriately.
func (o *SapMaintenanceOrderHeaderDatum) AddMaintenanceOrderSapMaintenanceOrderOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapMaintenanceOrderOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MaintenanceOrder = o.MaintenanceOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_maintenance_order_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceOrder"}),
				strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.MaintenanceOrder, rel.MaintenanceOrder, rel.MaintenanceOrderOperation, rel.MaintenanceOrderSubOperation, rel.MaintenanceOrderComponent}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MaintenanceOrder = o.MaintenanceOrder
		}
	}

	if o.R == nil {
		o.R = &sapMaintenanceOrderHeaderDatumR{
			MaintenanceOrderSapMaintenanceOrderOperationComponentData: related,
		}
	} else {
		o.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData = append(o.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapMaintenanceOrderOperationComponentDatumR{
				MaintenanceOrderSapMaintenanceOrderHeaderDatum: o,
			}
		} else {
			rel.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = o
		}
	}
	return nil
}

// AddMaintenanceOrderSapMaintenanceOrderOperationData adds the given related objects to the existing relationships
// of the sap_maintenance_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.MaintenanceOrderSapMaintenanceOrderOperationData.
// Sets related.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum appropriately.
func (o *SapMaintenanceOrderHeaderDatum) AddMaintenanceOrderSapMaintenanceOrderOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapMaintenanceOrderOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MaintenanceOrder = o.MaintenanceOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_maintenance_order_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceOrder"}),
				strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.MaintenanceOrder, rel.MaintenanceOrder, rel.MaintenanceOrderOperation, rel.MaintenanceOrderSubOperation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MaintenanceOrder = o.MaintenanceOrder
		}
	}

	if o.R == nil {
		o.R = &sapMaintenanceOrderHeaderDatumR{
			MaintenanceOrderSapMaintenanceOrderOperationData: related,
		}
	} else {
		o.R.MaintenanceOrderSapMaintenanceOrderOperationData = append(o.R.MaintenanceOrderSapMaintenanceOrderOperationData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapMaintenanceOrderOperationDatumR{
				MaintenanceOrderSapMaintenanceOrderHeaderDatum: o,
			}
		} else {
			rel.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = o
		}
	}
	return nil
}

// SapMaintenanceOrderHeaderData retrieves all the records using an executor.
func SapMaintenanceOrderHeaderData(mods ...qm.QueryMod) sapMaintenanceOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_order_header_data`"))
	return sapMaintenanceOrderHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, selectCols ...string) (*SapMaintenanceOrderHeaderDatum, error) {
	sapMaintenanceOrderHeaderDatumObj := &SapMaintenanceOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_order_header_data` where `MaintenanceOrder`=?", sel,
	)

	q := queries.Raw(query, maintenanceOrder)

	err := q.Bind(ctx, exec, sapMaintenanceOrderHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_order_header_data")
	}

	if err = sapMaintenanceOrderHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceOrderHeaderDatumObj, err
	}

	return sapMaintenanceOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderHeaderDatumInsertCache[key]
	sapMaintenanceOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceOrderHeaderDatumAllColumns,
			sapMaintenanceOrderHeaderDatumColumnsWithDefault,
			sapMaintenanceOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderHeaderDatumInsertCacheMut.Lock()
		sapMaintenanceOrderHeaderDatumInsertCache[key] = cache
		sapMaintenanceOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceOrderHeaderDatumUpdateCache[key]
	sapMaintenanceOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceOrderHeaderDatumAllColumns,
			sapMaintenanceOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, append(wl, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_order_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_order_header_data")
	}

	if !cached {
		sapMaintenanceOrderHeaderDatumUpdateCacheMut.Lock()
		sapMaintenanceOrderHeaderDatumUpdateCache[key] = cache
		sapMaintenanceOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_order_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceOrderHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceOrderHeaderDatumUniqueColumns = []string{
	"MaintenanceOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderHeaderDatumUpsertCache[key]
	sapMaintenanceOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceOrderHeaderDatumAllColumns,
			sapMaintenanceOrderHeaderDatumColumnsWithDefault,
			sapMaintenanceOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapMaintenanceOrderHeaderDatumAllColumns,
			sapMaintenanceOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceOrderHeaderDatumType, sapMaintenanceOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderHeaderDatumUpsertCacheMut.Lock()
		sapMaintenanceOrderHeaderDatumUpsertCache[key] = cache
		sapMaintenanceOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceOrderHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_order_header_data` WHERE `MaintenanceOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_order_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceOrderHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_header_data")
	}

	if len(sapMaintenanceOrderHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceOrderHeaderDatum(ctx, exec, o.MaintenanceOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_order_header_data`.* FROM `sap_maintenance_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceOrderHeaderDatumExists checks if the SapMaintenanceOrderHeaderDatum row exists.
func SapMaintenanceOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_order_header_data` where `MaintenanceOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceOrder)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_order_header_data exists")
	}

	return exists, nil
}
