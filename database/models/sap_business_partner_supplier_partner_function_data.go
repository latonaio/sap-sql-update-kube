// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerSupplierPartnerFunctionDatum is an object representing the database table.
type SapBusinessPartnerSupplierPartnerFunctionDatum struct {
	Supplier               string      `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	PurchasingOrganization string      `boil:"PurchasingOrganization" json:"PurchasingOrganization" toml:"PurchasingOrganization" yaml:"PurchasingOrganization"`
	PartnerCounter         string      `boil:"PartnerCounter" json:"PartnerCounter" toml:"PartnerCounter" yaml:"PartnerCounter"`
	PartnerFunction        null.String `boil:"PartnerFunction" json:"PartnerFunction,omitempty" toml:"PartnerFunction" yaml:"PartnerFunction,omitempty"`
	Plant                  null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	DefaultPartner         null.Bool   `boil:"DefaultPartner" json:"DefaultPartner,omitempty" toml:"DefaultPartner" yaml:"DefaultPartner,omitempty"`
	CreationDate           null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	ReferenceSupplier      null.String `boil:"ReferenceSupplier" json:"ReferenceSupplier,omitempty" toml:"ReferenceSupplier" yaml:"ReferenceSupplier,omitempty"`
	AuthorizationGroup     null.String `boil:"AuthorizationGroup" json:"AuthorizationGroup,omitempty" toml:"AuthorizationGroup" yaml:"AuthorizationGroup,omitempty"`

	R *sapBusinessPartnerSupplierPartnerFunctionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerSupplierPartnerFunctionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerSupplierPartnerFunctionDatumColumns = struct {
	Supplier               string
	PurchasingOrganization string
	PartnerCounter         string
	PartnerFunction        string
	Plant                  string
	DefaultPartner         string
	CreationDate           string
	ReferenceSupplier      string
	AuthorizationGroup     string
}{
	Supplier:               "Supplier",
	PurchasingOrganization: "PurchasingOrganization",
	PartnerCounter:         "PartnerCounter",
	PartnerFunction:        "PartnerFunction",
	Plant:                  "Plant",
	DefaultPartner:         "DefaultPartner",
	CreationDate:           "CreationDate",
	ReferenceSupplier:      "ReferenceSupplier",
	AuthorizationGroup:     "AuthorizationGroup",
}

var SapBusinessPartnerSupplierPartnerFunctionDatumTableColumns = struct {
	Supplier               string
	PurchasingOrganization string
	PartnerCounter         string
	PartnerFunction        string
	Plant                  string
	DefaultPartner         string
	CreationDate           string
	ReferenceSupplier      string
	AuthorizationGroup     string
}{
	Supplier:               "sap_business_partner_supplier_partner_function_data.Supplier",
	PurchasingOrganization: "sap_business_partner_supplier_partner_function_data.PurchasingOrganization",
	PartnerCounter:         "sap_business_partner_supplier_partner_function_data.PartnerCounter",
	PartnerFunction:        "sap_business_partner_supplier_partner_function_data.PartnerFunction",
	Plant:                  "sap_business_partner_supplier_partner_function_data.Plant",
	DefaultPartner:         "sap_business_partner_supplier_partner_function_data.DefaultPartner",
	CreationDate:           "sap_business_partner_supplier_partner_function_data.CreationDate",
	ReferenceSupplier:      "sap_business_partner_supplier_partner_function_data.ReferenceSupplier",
	AuthorizationGroup:     "sap_business_partner_supplier_partner_function_data.AuthorizationGroup",
}

// Generated where

var SapBusinessPartnerSupplierPartnerFunctionDatumWhere = struct {
	Supplier               whereHelperstring
	PurchasingOrganization whereHelperstring
	PartnerCounter         whereHelperstring
	PartnerFunction        whereHelpernull_String
	Plant                  whereHelpernull_String
	DefaultPartner         whereHelpernull_Bool
	CreationDate           whereHelpernull_String
	ReferenceSupplier      whereHelpernull_String
	AuthorizationGroup     whereHelpernull_String
}{
	Supplier:               whereHelperstring{field: "`sap_business_partner_supplier_partner_function_data`.`Supplier`"},
	PurchasingOrganization: whereHelperstring{field: "`sap_business_partner_supplier_partner_function_data`.`PurchasingOrganization`"},
	PartnerCounter:         whereHelperstring{field: "`sap_business_partner_supplier_partner_function_data`.`PartnerCounter`"},
	PartnerFunction:        whereHelpernull_String{field: "`sap_business_partner_supplier_partner_function_data`.`PartnerFunction`"},
	Plant:                  whereHelpernull_String{field: "`sap_business_partner_supplier_partner_function_data`.`Plant`"},
	DefaultPartner:         whereHelpernull_Bool{field: "`sap_business_partner_supplier_partner_function_data`.`DefaultPartner`"},
	CreationDate:           whereHelpernull_String{field: "`sap_business_partner_supplier_partner_function_data`.`CreationDate`"},
	ReferenceSupplier:      whereHelpernull_String{field: "`sap_business_partner_supplier_partner_function_data`.`ReferenceSupplier`"},
	AuthorizationGroup:     whereHelpernull_String{field: "`sap_business_partner_supplier_partner_function_data`.`AuthorizationGroup`"},
}

// SapBusinessPartnerSupplierPartnerFunctionDatumRels is where relationship names are stored.
var SapBusinessPartnerSupplierPartnerFunctionDatumRels = struct {
	SupplierSapBusinessPartnerGeneralDatum string
}{
	SupplierSapBusinessPartnerGeneralDatum: "SupplierSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerSupplierPartnerFunctionDatumR is where relationships are stored.
type sapBusinessPartnerSupplierPartnerFunctionDatumR struct {
	SupplierSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"SupplierSapBusinessPartnerGeneralDatum" json:"SupplierSapBusinessPartnerGeneralDatum" toml:"SupplierSapBusinessPartnerGeneralDatum" yaml:"SupplierSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerSupplierPartnerFunctionDatumR) NewStruct() *sapBusinessPartnerSupplierPartnerFunctionDatumR {
	return &sapBusinessPartnerSupplierPartnerFunctionDatumR{}
}

func (r *sapBusinessPartnerSupplierPartnerFunctionDatumR) GetSupplierSapBusinessPartnerGeneralDatum() *SapBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.SupplierSapBusinessPartnerGeneralDatum
}

// sapBusinessPartnerSupplierPartnerFunctionDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerSupplierPartnerFunctionDatumL struct{}

var (
	sapBusinessPartnerSupplierPartnerFunctionDatumAllColumns            = []string{"Supplier", "PurchasingOrganization", "PartnerCounter", "PartnerFunction", "Plant", "DefaultPartner", "CreationDate", "ReferenceSupplier", "AuthorizationGroup"}
	sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithoutDefault = []string{"Supplier", "PurchasingOrganization", "PartnerCounter", "PartnerFunction", "Plant", "DefaultPartner", "CreationDate", "ReferenceSupplier", "AuthorizationGroup"}
	sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns     = []string{"Supplier", "PurchasingOrganization", "PartnerCounter"}
	sapBusinessPartnerSupplierPartnerFunctionDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerSupplierPartnerFunctionDatumSlice is an alias for a slice of pointers to SapBusinessPartnerSupplierPartnerFunctionDatum.
	// This should almost always be used instead of []SapBusinessPartnerSupplierPartnerFunctionDatum.
	SapBusinessPartnerSupplierPartnerFunctionDatumSlice []*SapBusinessPartnerSupplierPartnerFunctionDatum
	// SapBusinessPartnerSupplierPartnerFunctionDatumHook is the signature for custom SapBusinessPartnerSupplierPartnerFunctionDatum hook methods
	SapBusinessPartnerSupplierPartnerFunctionDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerSupplierPartnerFunctionDatum) error

	sapBusinessPartnerSupplierPartnerFunctionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerSupplierPartnerFunctionDatumType                 = reflect.TypeOf(&SapBusinessPartnerSupplierPartnerFunctionDatum{})
	sapBusinessPartnerSupplierPartnerFunctionDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType)
	sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns)
	sapBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierPartnerFunctionDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook

var sapBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook
var sapBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook

var sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook
var sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook

var sapBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook
var sapBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook

var sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook
var sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks []SapBusinessPartnerSupplierPartnerFunctionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerSupplierPartnerFunctionDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerSupplierPartnerFunctionDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerSupplierPartnerFunctionDatumHook SapBusinessPartnerSupplierPartnerFunctionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks = append(sapBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks, sapBusinessPartnerSupplierPartnerFunctionDatumHook)
	}
}

// One returns a single sapBusinessPartnerSupplierPartnerFunctionDatum record from the query.
func (q sapBusinessPartnerSupplierPartnerFunctionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerSupplierPartnerFunctionDatum, error) {
	o := &SapBusinessPartnerSupplierPartnerFunctionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_supplier_partner_function_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerSupplierPartnerFunctionDatum records from the query.
func (q sapBusinessPartnerSupplierPartnerFunctionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerSupplierPartnerFunctionDatumSlice, error) {
	var o []*SapBusinessPartnerSupplierPartnerFunctionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerSupplierPartnerFunctionDatum slice")
	}

	if len(sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerSupplierPartnerFunctionDatum records in the query.
func (q sapBusinessPartnerSupplierPartnerFunctionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_supplier_partner_function_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerSupplierPartnerFunctionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_supplier_partner_function_data exists")
	}

	return count > 0, nil
}

// SupplierSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) SupplierSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Supplier),
	}

	queryMods = append(queryMods, mods...)

	return SapBusinessPartnerGeneralData(queryMods...)
}

// LoadSupplierSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerSupplierPartnerFunctionDatumL) LoadSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerSupplierPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerSupplierPartnerFunctionDatum
	var object *SapBusinessPartnerSupplierPartnerFunctionDatum

	if singular {
		object = maybeSapBusinessPartnerSupplierPartnerFunctionDatum.(*SapBusinessPartnerSupplierPartnerFunctionDatum)
	} else {
		slice = *maybeSapBusinessPartnerSupplierPartnerFunctionDatum.(*[]*SapBusinessPartnerSupplierPartnerFunctionDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerSupplierPartnerFunctionDatumR{}
		}
		args = append(args, object.Supplier)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerSupplierPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if a == obj.Supplier {
					continue Outer
				}
			}

			args = append(args, obj.Supplier)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupplierSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Supplier == foreign.BusinessPartner {
				local.R.SupplierSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// SetSupplierSapBusinessPartnerGeneralDatum of the sapBusinessPartnerSupplierPartnerFunctionDatum to the related item.
// Sets o.R.SupplierSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) SetSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_supplier_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Supplier, o.PurchasingOrganization, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Supplier = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerSupplierPartnerFunctionDatumR{
			SupplierSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierPartnerFunctionData: SapBusinessPartnerSupplierPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData = append(related.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData, o)
	}

	return nil
}

// SapBusinessPartnerSupplierPartnerFunctionData retrieves all the records using an executor.
func SapBusinessPartnerSupplierPartnerFunctionData(mods ...qm.QueryMod) sapBusinessPartnerSupplierPartnerFunctionDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_supplier_partner_function_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_business_partner_supplier_partner_function_data`.*"})
	}

	return sapBusinessPartnerSupplierPartnerFunctionDatumQuery{q}
}

// FindSapBusinessPartnerSupplierPartnerFunctionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerSupplierPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, supplier string, purchasingOrganization string, partnerCounter string, selectCols ...string) (*SapBusinessPartnerSupplierPartnerFunctionDatum, error) {
	sapBusinessPartnerSupplierPartnerFunctionDatumObj := &SapBusinessPartnerSupplierPartnerFunctionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_supplier_partner_function_data` where `Supplier`=? AND `PurchasingOrganization`=? AND `PartnerCounter`=?", sel,
	)

	q := queries.Raw(query, supplier, purchasingOrganization, partnerCounter)

	err := q.Bind(ctx, exec, sapBusinessPartnerSupplierPartnerFunctionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_supplier_partner_function_data")
	}

	if err = sapBusinessPartnerSupplierPartnerFunctionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerSupplierPartnerFunctionDatumObj, err
	}

	return sapBusinessPartnerSupplierPartnerFunctionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_partner_function_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierPartnerFunctionDatumInsertCache[key]
	sapBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault,
			sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_supplier_partner_function_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_supplier_partner_function_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_supplier_partner_function_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_supplier_partner_function_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Supplier,
		o.PurchasingOrganization,
		o.PartnerCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.Lock()
		sapBusinessPartnerSupplierPartnerFunctionDatumInsertCache[key] = cache
		sapBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerSupplierPartnerFunctionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCache[key]
	sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_supplier_partner_function_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_supplier_partner_function_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, append(wl, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_supplier_partner_function_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_supplier_partner_function_data")
	}

	if !cached {
		sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.Lock()
		sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCache[key] = cache
		sapBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerSupplierPartnerFunctionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_supplier_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_supplier_partner_function_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerSupplierPartnerFunctionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_supplier_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerSupplierPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerSupplierPartnerFunctionDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerSupplierPartnerFunctionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_partner_function_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerSupplierPartnerFunctionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCache[key]
	sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault,
			sapBusinessPartnerSupplierPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_supplier_partner_function_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_supplier_partner_function_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_supplier_partner_function_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_supplier_partner_function_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerSupplierPartnerFunctionDatumType, sapBusinessPartnerSupplierPartnerFunctionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_supplier_partner_function_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.Lock()
		sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCache[key] = cache
		sapBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerSupplierPartnerFunctionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerSupplierPartnerFunctionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_supplier_partner_function_data` WHERE `Supplier`=? AND `PurchasingOrganization`=? AND `PartnerCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_supplier_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_supplier_partner_function_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerSupplierPartnerFunctionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerSupplierPartnerFunctionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_supplier_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_partner_function_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerSupplierPartnerFunctionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_supplier_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerSupplierPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_partner_function_data")
	}

	if len(sapBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerSupplierPartnerFunctionDatum(ctx, exec, o.Supplier, o.PurchasingOrganization, o.PartnerCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerSupplierPartnerFunctionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerSupplierPartnerFunctionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_supplier_partner_function_data`.* FROM `sap_business_partner_supplier_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerSupplierPartnerFunctionDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerSupplierPartnerFunctionDatumExists checks if the SapBusinessPartnerSupplierPartnerFunctionDatum row exists.
func SapBusinessPartnerSupplierPartnerFunctionDatumExists(ctx context.Context, exec boil.ContextExecutor, supplier string, purchasingOrganization string, partnerCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_supplier_partner_function_data` where `Supplier`=? AND `PurchasingOrganization`=? AND `PartnerCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplier, purchasingOrganization, partnerCounter)
	}
	row := exec.QueryRowContext(ctx, sql, supplier, purchasingOrganization, partnerCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_supplier_partner_function_data exists")
	}

	return exists, nil
}
