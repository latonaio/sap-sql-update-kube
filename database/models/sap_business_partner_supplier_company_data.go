// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerSupplierCompanyDatum is an object representing the database table.
type SapBusinessPartnerSupplierCompanyDatum struct {
	Supplier                    string      `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	CompanyCode                 string      `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	PaymentBlockingReason       null.String `boil:"PaymentBlockingReason" json:"PaymentBlockingReason,omitempty" toml:"PaymentBlockingReason" yaml:"PaymentBlockingReason,omitempty"`
	PaymentMethodsList          null.String `boil:"PaymentMethodsList" json:"PaymentMethodsList,omitempty" toml:"PaymentMethodsList" yaml:"PaymentMethodsList,omitempty"`
	PaymentTerms                null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	ClearCustomerSupplier       null.Bool   `boil:"ClearCustomerSupplier" json:"ClearCustomerSupplier,omitempty" toml:"ClearCustomerSupplier" yaml:"ClearCustomerSupplier,omitempty"`
	HouseBank                   null.String `boil:"HouseBank" json:"HouseBank,omitempty" toml:"HouseBank" yaml:"HouseBank,omitempty"`
	ReconciliationAccount       null.String `boil:"ReconciliationAccount" json:"ReconciliationAccount,omitempty" toml:"ReconciliationAccount" yaml:"ReconciliationAccount,omitempty"`
	SupplierIsBlockedForPosting null.Bool   `boil:"SupplierIsBlockedForPosting" json:"SupplierIsBlockedForPosting,omitempty" toml:"SupplierIsBlockedForPosting" yaml:"SupplierIsBlockedForPosting,omitempty"`
	DeletionIndicator           null.Bool   `boil:"DeletionIndicator" json:"DeletionIndicator,omitempty" toml:"DeletionIndicator" yaml:"DeletionIndicator,omitempty"`

	R *sapBusinessPartnerSupplierCompanyDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerSupplierCompanyDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerSupplierCompanyDatumColumns = struct {
	Supplier                    string
	CompanyCode                 string
	PaymentBlockingReason       string
	PaymentMethodsList          string
	PaymentTerms                string
	ClearCustomerSupplier       string
	HouseBank                   string
	ReconciliationAccount       string
	SupplierIsBlockedForPosting string
	DeletionIndicator           string
}{
	Supplier:                    "Supplier",
	CompanyCode:                 "CompanyCode",
	PaymentBlockingReason:       "PaymentBlockingReason",
	PaymentMethodsList:          "PaymentMethodsList",
	PaymentTerms:                "PaymentTerms",
	ClearCustomerSupplier:       "ClearCustomerSupplier",
	HouseBank:                   "HouseBank",
	ReconciliationAccount:       "ReconciliationAccount",
	SupplierIsBlockedForPosting: "SupplierIsBlockedForPosting",
	DeletionIndicator:           "DeletionIndicator",
}

var SapBusinessPartnerSupplierCompanyDatumTableColumns = struct {
	Supplier                    string
	CompanyCode                 string
	PaymentBlockingReason       string
	PaymentMethodsList          string
	PaymentTerms                string
	ClearCustomerSupplier       string
	HouseBank                   string
	ReconciliationAccount       string
	SupplierIsBlockedForPosting string
	DeletionIndicator           string
}{
	Supplier:                    "sap_business_partner_supplier_company_data.Supplier",
	CompanyCode:                 "sap_business_partner_supplier_company_data.CompanyCode",
	PaymentBlockingReason:       "sap_business_partner_supplier_company_data.PaymentBlockingReason",
	PaymentMethodsList:          "sap_business_partner_supplier_company_data.PaymentMethodsList",
	PaymentTerms:                "sap_business_partner_supplier_company_data.PaymentTerms",
	ClearCustomerSupplier:       "sap_business_partner_supplier_company_data.ClearCustomerSupplier",
	HouseBank:                   "sap_business_partner_supplier_company_data.HouseBank",
	ReconciliationAccount:       "sap_business_partner_supplier_company_data.ReconciliationAccount",
	SupplierIsBlockedForPosting: "sap_business_partner_supplier_company_data.SupplierIsBlockedForPosting",
	DeletionIndicator:           "sap_business_partner_supplier_company_data.DeletionIndicator",
}

// Generated where

var SapBusinessPartnerSupplierCompanyDatumWhere = struct {
	Supplier                    whereHelperstring
	CompanyCode                 whereHelperstring
	PaymentBlockingReason       whereHelpernull_String
	PaymentMethodsList          whereHelpernull_String
	PaymentTerms                whereHelpernull_String
	ClearCustomerSupplier       whereHelpernull_Bool
	HouseBank                   whereHelpernull_String
	ReconciliationAccount       whereHelpernull_String
	SupplierIsBlockedForPosting whereHelpernull_Bool
	DeletionIndicator           whereHelpernull_Bool
}{
	Supplier:                    whereHelperstring{field: "`sap_business_partner_supplier_company_data`.`Supplier`"},
	CompanyCode:                 whereHelperstring{field: "`sap_business_partner_supplier_company_data`.`CompanyCode`"},
	PaymentBlockingReason:       whereHelpernull_String{field: "`sap_business_partner_supplier_company_data`.`PaymentBlockingReason`"},
	PaymentMethodsList:          whereHelpernull_String{field: "`sap_business_partner_supplier_company_data`.`PaymentMethodsList`"},
	PaymentTerms:                whereHelpernull_String{field: "`sap_business_partner_supplier_company_data`.`PaymentTerms`"},
	ClearCustomerSupplier:       whereHelpernull_Bool{field: "`sap_business_partner_supplier_company_data`.`ClearCustomerSupplier`"},
	HouseBank:                   whereHelpernull_String{field: "`sap_business_partner_supplier_company_data`.`HouseBank`"},
	ReconciliationAccount:       whereHelpernull_String{field: "`sap_business_partner_supplier_company_data`.`ReconciliationAccount`"},
	SupplierIsBlockedForPosting: whereHelpernull_Bool{field: "`sap_business_partner_supplier_company_data`.`SupplierIsBlockedForPosting`"},
	DeletionIndicator:           whereHelpernull_Bool{field: "`sap_business_partner_supplier_company_data`.`DeletionIndicator`"},
}

// SapBusinessPartnerSupplierCompanyDatumRels is where relationship names are stored.
var SapBusinessPartnerSupplierCompanyDatumRels = struct {
	SupplierSapBusinessPartnerGeneralDatum string
}{
	SupplierSapBusinessPartnerGeneralDatum: "SupplierSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerSupplierCompanyDatumR is where relationships are stored.
type sapBusinessPartnerSupplierCompanyDatumR struct {
	SupplierSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"SupplierSapBusinessPartnerGeneralDatum" json:"SupplierSapBusinessPartnerGeneralDatum" toml:"SupplierSapBusinessPartnerGeneralDatum" yaml:"SupplierSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerSupplierCompanyDatumR) NewStruct() *sapBusinessPartnerSupplierCompanyDatumR {
	return &sapBusinessPartnerSupplierCompanyDatumR{}
}

// sapBusinessPartnerSupplierCompanyDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerSupplierCompanyDatumL struct{}

var (
	sapBusinessPartnerSupplierCompanyDatumAllColumns            = []string{"Supplier", "CompanyCode", "PaymentBlockingReason", "PaymentMethodsList", "PaymentTerms", "ClearCustomerSupplier", "HouseBank", "ReconciliationAccount", "SupplierIsBlockedForPosting", "DeletionIndicator"}
	sapBusinessPartnerSupplierCompanyDatumColumnsWithoutDefault = []string{"Supplier", "CompanyCode", "PaymentBlockingReason", "PaymentMethodsList", "PaymentTerms", "ClearCustomerSupplier", "HouseBank", "ReconciliationAccount", "SupplierIsBlockedForPosting", "DeletionIndicator"}
	sapBusinessPartnerSupplierCompanyDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns     = []string{"Supplier", "CompanyCode"}
	sapBusinessPartnerSupplierCompanyDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerSupplierCompanyDatumSlice is an alias for a slice of pointers to SapBusinessPartnerSupplierCompanyDatum.
	// This should almost always be used instead of []SapBusinessPartnerSupplierCompanyDatum.
	SapBusinessPartnerSupplierCompanyDatumSlice []*SapBusinessPartnerSupplierCompanyDatum
	// SapBusinessPartnerSupplierCompanyDatumHook is the signature for custom SapBusinessPartnerSupplierCompanyDatum hook methods
	SapBusinessPartnerSupplierCompanyDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerSupplierCompanyDatum) error

	sapBusinessPartnerSupplierCompanyDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerSupplierCompanyDatumType                 = reflect.TypeOf(&SapBusinessPartnerSupplierCompanyDatum{})
	sapBusinessPartnerSupplierCompanyDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerSupplierCompanyDatumType)
	sapBusinessPartnerSupplierCompanyDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns)
	sapBusinessPartnerSupplierCompanyDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierCompanyDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerSupplierCompanyDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierCompanyDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerSupplierCompanyDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierCompanyDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks []SapBusinessPartnerSupplierCompanyDatumHook

var sapBusinessPartnerSupplierCompanyDatumBeforeInsertHooks []SapBusinessPartnerSupplierCompanyDatumHook
var sapBusinessPartnerSupplierCompanyDatumAfterInsertHooks []SapBusinessPartnerSupplierCompanyDatumHook

var sapBusinessPartnerSupplierCompanyDatumBeforeUpdateHooks []SapBusinessPartnerSupplierCompanyDatumHook
var sapBusinessPartnerSupplierCompanyDatumAfterUpdateHooks []SapBusinessPartnerSupplierCompanyDatumHook

var sapBusinessPartnerSupplierCompanyDatumBeforeDeleteHooks []SapBusinessPartnerSupplierCompanyDatumHook
var sapBusinessPartnerSupplierCompanyDatumAfterDeleteHooks []SapBusinessPartnerSupplierCompanyDatumHook

var sapBusinessPartnerSupplierCompanyDatumBeforeUpsertHooks []SapBusinessPartnerSupplierCompanyDatumHook
var sapBusinessPartnerSupplierCompanyDatumAfterUpsertHooks []SapBusinessPartnerSupplierCompanyDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerSupplierCompanyDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierCompanyDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerSupplierCompanyDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerSupplierCompanyDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerSupplierCompanyDatumHook SapBusinessPartnerSupplierCompanyDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks = append(sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerSupplierCompanyDatumBeforeInsertHooks = append(sapBusinessPartnerSupplierCompanyDatumBeforeInsertHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerSupplierCompanyDatumAfterInsertHooks = append(sapBusinessPartnerSupplierCompanyDatumAfterInsertHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerSupplierCompanyDatumBeforeUpdateHooks = append(sapBusinessPartnerSupplierCompanyDatumBeforeUpdateHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerSupplierCompanyDatumAfterUpdateHooks = append(sapBusinessPartnerSupplierCompanyDatumAfterUpdateHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerSupplierCompanyDatumBeforeDeleteHooks = append(sapBusinessPartnerSupplierCompanyDatumBeforeDeleteHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerSupplierCompanyDatumAfterDeleteHooks = append(sapBusinessPartnerSupplierCompanyDatumAfterDeleteHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerSupplierCompanyDatumBeforeUpsertHooks = append(sapBusinessPartnerSupplierCompanyDatumBeforeUpsertHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerSupplierCompanyDatumAfterUpsertHooks = append(sapBusinessPartnerSupplierCompanyDatumAfterUpsertHooks, sapBusinessPartnerSupplierCompanyDatumHook)
	}
}

// One returns a single sapBusinessPartnerSupplierCompanyDatum record from the query.
func (q sapBusinessPartnerSupplierCompanyDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerSupplierCompanyDatum, error) {
	o := &SapBusinessPartnerSupplierCompanyDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_supplier_company_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerSupplierCompanyDatum records from the query.
func (q sapBusinessPartnerSupplierCompanyDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerSupplierCompanyDatumSlice, error) {
	var o []*SapBusinessPartnerSupplierCompanyDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerSupplierCompanyDatum slice")
	}

	if len(sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerSupplierCompanyDatum records in the query.
func (q sapBusinessPartnerSupplierCompanyDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_supplier_company_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerSupplierCompanyDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_supplier_company_data exists")
	}

	return count > 0, nil
}

// SupplierSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerSupplierCompanyDatum) SupplierSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Supplier),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadSupplierSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerSupplierCompanyDatumL) LoadSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerSupplierCompanyDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerSupplierCompanyDatum
	var object *SapBusinessPartnerSupplierCompanyDatum

	if singular {
		object = maybeSapBusinessPartnerSupplierCompanyDatum.(*SapBusinessPartnerSupplierCompanyDatum)
	} else {
		slice = *maybeSapBusinessPartnerSupplierCompanyDatum.(*[]*SapBusinessPartnerSupplierCompanyDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerSupplierCompanyDatumR{}
		}
		args = append(args, object.Supplier)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerSupplierCompanyDatumR{}
			}

			for _, a := range args {
				if a == obj.Supplier {
					continue Outer
				}
			}

			args = append(args, obj.Supplier)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupplierSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.SupplierSapBusinessPartnerSupplierCompanyData = append(foreign.R.SupplierSapBusinessPartnerSupplierCompanyData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Supplier == foreign.BusinessPartner {
				local.R.SupplierSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerSupplierCompanyData = append(foreign.R.SupplierSapBusinessPartnerSupplierCompanyData, local)
				break
			}
		}
	}

	return nil
}

// SetSupplierSapBusinessPartnerGeneralDatum of the sapBusinessPartnerSupplierCompanyDatum to the related item.
// Sets o.R.SupplierSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.SupplierSapBusinessPartnerSupplierCompanyData.
func (o *SapBusinessPartnerSupplierCompanyDatum) SetSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_supplier_company_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Supplier, o.CompanyCode}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Supplier = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerSupplierCompanyDatumR{
			SupplierSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierCompanyData: SapBusinessPartnerSupplierCompanyDatumSlice{o},
		}
	} else {
		related.R.SupplierSapBusinessPartnerSupplierCompanyData = append(related.R.SupplierSapBusinessPartnerSupplierCompanyData, o)
	}

	return nil
}

// SapBusinessPartnerSupplierCompanyData retrieves all the records using an executor.
func SapBusinessPartnerSupplierCompanyData(mods ...qm.QueryMod) sapBusinessPartnerSupplierCompanyDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_supplier_company_data`"))
	return sapBusinessPartnerSupplierCompanyDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerSupplierCompanyDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerSupplierCompanyDatum(ctx context.Context, exec boil.ContextExecutor, supplier string, companyCode string, selectCols ...string) (*SapBusinessPartnerSupplierCompanyDatum, error) {
	sapBusinessPartnerSupplierCompanyDatumObj := &SapBusinessPartnerSupplierCompanyDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_supplier_company_data` where `Supplier`=? AND `CompanyCode`=?", sel,
	)

	q := queries.Raw(query, supplier, companyCode)

	err := q.Bind(ctx, exec, sapBusinessPartnerSupplierCompanyDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_supplier_company_data")
	}

	if err = sapBusinessPartnerSupplierCompanyDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerSupplierCompanyDatumObj, err
	}

	return sapBusinessPartnerSupplierCompanyDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerSupplierCompanyDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_company_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierCompanyDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerSupplierCompanyDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierCompanyDatumInsertCache[key]
	sapBusinessPartnerSupplierCompanyDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerSupplierCompanyDatumAllColumns,
			sapBusinessPartnerSupplierCompanyDatumColumnsWithDefault,
			sapBusinessPartnerSupplierCompanyDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_supplier_company_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_supplier_company_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_supplier_company_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_supplier_company_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Supplier,
		o.CompanyCode,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_company_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierCompanyDatumInsertCacheMut.Lock()
		sapBusinessPartnerSupplierCompanyDatumInsertCache[key] = cache
		sapBusinessPartnerSupplierCompanyDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerSupplierCompanyDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerSupplierCompanyDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerSupplierCompanyDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierCompanyDatumUpdateCache[key]
	sapBusinessPartnerSupplierCompanyDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerSupplierCompanyDatumAllColumns,
			sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_supplier_company_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_supplier_company_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, append(wl, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_supplier_company_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_supplier_company_data")
	}

	if !cached {
		sapBusinessPartnerSupplierCompanyDatumUpdateCacheMut.Lock()
		sapBusinessPartnerSupplierCompanyDatumUpdateCache[key] = cache
		sapBusinessPartnerSupplierCompanyDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerSupplierCompanyDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_supplier_company_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_supplier_company_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerSupplierCompanyDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierCompanyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_supplier_company_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerSupplierCompanyDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerSupplierCompanyDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerSupplierCompanyDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerSupplierCompanyDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_company_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierCompanyDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerSupplierCompanyDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerSupplierCompanyDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierCompanyDatumUpsertCache[key]
	sapBusinessPartnerSupplierCompanyDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerSupplierCompanyDatumAllColumns,
			sapBusinessPartnerSupplierCompanyDatumColumnsWithDefault,
			sapBusinessPartnerSupplierCompanyDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerSupplierCompanyDatumAllColumns,
			sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_supplier_company_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_supplier_company_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_supplier_company_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_supplier_company_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerSupplierCompanyDatumType, sapBusinessPartnerSupplierCompanyDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_supplier_company_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_company_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierCompanyDatumUpsertCacheMut.Lock()
		sapBusinessPartnerSupplierCompanyDatumUpsertCache[key] = cache
		sapBusinessPartnerSupplierCompanyDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerSupplierCompanyDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerSupplierCompanyDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerSupplierCompanyDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerSupplierCompanyDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_supplier_company_data` WHERE `Supplier`=? AND `CompanyCode`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_supplier_company_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_supplier_company_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerSupplierCompanyDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerSupplierCompanyDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_supplier_company_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_company_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerSupplierCompanyDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerSupplierCompanyDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierCompanyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_supplier_company_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerSupplierCompanyDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_company_data")
	}

	if len(sapBusinessPartnerSupplierCompanyDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerSupplierCompanyDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerSupplierCompanyDatum(ctx, exec, o.Supplier, o.CompanyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerSupplierCompanyDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerSupplierCompanyDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierCompanyDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_supplier_company_data`.* FROM `sap_business_partner_supplier_company_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerSupplierCompanyDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerSupplierCompanyDatumExists checks if the SapBusinessPartnerSupplierCompanyDatum row exists.
func SapBusinessPartnerSupplierCompanyDatumExists(ctx context.Context, exec boil.ContextExecutor, supplier string, companyCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_supplier_company_data` where `Supplier`=? AND `CompanyCode`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplier, companyCode)
	}
	row := exec.QueryRowContext(ctx, sql, supplier, companyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_supplier_company_data exists")
	}

	return exists, nil
}
