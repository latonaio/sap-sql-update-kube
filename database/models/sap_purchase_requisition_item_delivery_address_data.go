// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseRequisitionItemDeliveryAddressDatum is an object representing the database table.
type SapPurchaseRequisitionItemDeliveryAddressDatum struct {
	PurchaseRequisition     string      `boil:"PurchaseRequisition" json:"PurchaseRequisition" toml:"PurchaseRequisition" yaml:"PurchaseRequisition"`
	PurchaseRequisitionItem string      `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem"`
	AddressID               null.String `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	Country                 null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	Region                  null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	StreetName              null.String `boil:"StreetName" json:"StreetName,omitempty" toml:"StreetName" yaml:"StreetName,omitempty"`
	CityName                null.String `boil:"CityName" json:"CityName,omitempty" toml:"CityName" yaml:"CityName,omitempty"`
	CorrespondenceLanguage  null.String `boil:"CorrespondenceLanguage" json:"CorrespondenceLanguage,omitempty" toml:"CorrespondenceLanguage" yaml:"CorrespondenceLanguage,omitempty"`
	FaxNumber               null.String `boil:"FaxNumber" json:"FaxNumber,omitempty" toml:"FaxNumber" yaml:"FaxNumber,omitempty"`
	PhoneNumber             null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`

	R *sapPurchaseRequisitionItemDeliveryAddressDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseRequisitionItemDeliveryAddressDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseRequisitionItemDeliveryAddressDatumColumns = struct {
	PurchaseRequisition     string
	PurchaseRequisitionItem string
	AddressID               string
	Country                 string
	Region                  string
	StreetName              string
	CityName                string
	CorrespondenceLanguage  string
	FaxNumber               string
	PhoneNumber             string
}{
	PurchaseRequisition:     "PurchaseRequisition",
	PurchaseRequisitionItem: "PurchaseRequisitionItem",
	AddressID:               "AddressID",
	Country:                 "Country",
	Region:                  "Region",
	StreetName:              "StreetName",
	CityName:                "CityName",
	CorrespondenceLanguage:  "CorrespondenceLanguage",
	FaxNumber:               "FaxNumber",
	PhoneNumber:             "PhoneNumber",
}

var SapPurchaseRequisitionItemDeliveryAddressDatumTableColumns = struct {
	PurchaseRequisition     string
	PurchaseRequisitionItem string
	AddressID               string
	Country                 string
	Region                  string
	StreetName              string
	CityName                string
	CorrespondenceLanguage  string
	FaxNumber               string
	PhoneNumber             string
}{
	PurchaseRequisition:     "sap_purchase_requisition_item_delivery_address_data.PurchaseRequisition",
	PurchaseRequisitionItem: "sap_purchase_requisition_item_delivery_address_data.PurchaseRequisitionItem",
	AddressID:               "sap_purchase_requisition_item_delivery_address_data.AddressID",
	Country:                 "sap_purchase_requisition_item_delivery_address_data.Country",
	Region:                  "sap_purchase_requisition_item_delivery_address_data.Region",
	StreetName:              "sap_purchase_requisition_item_delivery_address_data.StreetName",
	CityName:                "sap_purchase_requisition_item_delivery_address_data.CityName",
	CorrespondenceLanguage:  "sap_purchase_requisition_item_delivery_address_data.CorrespondenceLanguage",
	FaxNumber:               "sap_purchase_requisition_item_delivery_address_data.FaxNumber",
	PhoneNumber:             "sap_purchase_requisition_item_delivery_address_data.PhoneNumber",
}

// Generated where

var SapPurchaseRequisitionItemDeliveryAddressDatumWhere = struct {
	PurchaseRequisition     whereHelperstring
	PurchaseRequisitionItem whereHelperstring
	AddressID               whereHelpernull_String
	Country                 whereHelpernull_String
	Region                  whereHelpernull_String
	StreetName              whereHelpernull_String
	CityName                whereHelpernull_String
	CorrespondenceLanguage  whereHelpernull_String
	FaxNumber               whereHelpernull_String
	PhoneNumber             whereHelpernull_String
}{
	PurchaseRequisition:     whereHelperstring{field: "`sap_purchase_requisition_item_delivery_address_data`.`PurchaseRequisition`"},
	PurchaseRequisitionItem: whereHelperstring{field: "`sap_purchase_requisition_item_delivery_address_data`.`PurchaseRequisitionItem`"},
	AddressID:               whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`AddressID`"},
	Country:                 whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`Country`"},
	Region:                  whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`Region`"},
	StreetName:              whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`StreetName`"},
	CityName:                whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`CityName`"},
	CorrespondenceLanguage:  whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`CorrespondenceLanguage`"},
	FaxNumber:               whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`FaxNumber`"},
	PhoneNumber:             whereHelpernull_String{field: "`sap_purchase_requisition_item_delivery_address_data`.`PhoneNumber`"},
}

// SapPurchaseRequisitionItemDeliveryAddressDatumRels is where relationship names are stored.
var SapPurchaseRequisitionItemDeliveryAddressDatumRels = struct {
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum string
}{
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: "PurchaseRequisitionSapPurchaseRequisitionHeaderDatum",
}

// sapPurchaseRequisitionItemDeliveryAddressDatumR is where relationships are stored.
type sapPurchaseRequisitionItemDeliveryAddressDatumR struct {
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum *SapPurchaseRequisitionHeaderDatum `boil:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" json:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" toml:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" yaml:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseRequisitionItemDeliveryAddressDatumR) NewStruct() *sapPurchaseRequisitionItemDeliveryAddressDatumR {
	return &sapPurchaseRequisitionItemDeliveryAddressDatumR{}
}

// sapPurchaseRequisitionItemDeliveryAddressDatumL is where Load methods for each relationship are stored.
type sapPurchaseRequisitionItemDeliveryAddressDatumL struct{}

var (
	sapPurchaseRequisitionItemDeliveryAddressDatumAllColumns            = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "AddressID", "Country", "Region", "StreetName", "CityName", "CorrespondenceLanguage", "FaxNumber", "PhoneNumber"}
	sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithoutDefault = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "AddressID", "Country", "Region", "StreetName", "CityName", "CorrespondenceLanguage", "FaxNumber", "PhoneNumber"}
	sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithDefault    = []string{}
	sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns     = []string{"PurchaseRequisition", "PurchaseRequisitionItem"}
	sapPurchaseRequisitionItemDeliveryAddressDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseRequisitionItemDeliveryAddressDatumSlice is an alias for a slice of pointers to SapPurchaseRequisitionItemDeliveryAddressDatum.
	// This should almost always be used instead of []SapPurchaseRequisitionItemDeliveryAddressDatum.
	SapPurchaseRequisitionItemDeliveryAddressDatumSlice []*SapPurchaseRequisitionItemDeliveryAddressDatum
	// SapPurchaseRequisitionItemDeliveryAddressDatumHook is the signature for custom SapPurchaseRequisitionItemDeliveryAddressDatum hook methods
	SapPurchaseRequisitionItemDeliveryAddressDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseRequisitionItemDeliveryAddressDatum) error

	sapPurchaseRequisitionItemDeliveryAddressDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseRequisitionItemDeliveryAddressDatumType                 = reflect.TypeOf(&SapPurchaseRequisitionItemDeliveryAddressDatum{})
	sapPurchaseRequisitionItemDeliveryAddressDatumMapping              = queries.MakeStructMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType)
	sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns)
	sapPurchaseRequisitionItemDeliveryAddressDatumInsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemDeliveryAddressDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook

var sapPurchaseRequisitionItemDeliveryAddressDatumBeforeInsertHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook
var sapPurchaseRequisitionItemDeliveryAddressDatumAfterInsertHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook

var sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpdateHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook
var sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpdateHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook

var sapPurchaseRequisitionItemDeliveryAddressDatumBeforeDeleteHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook
var sapPurchaseRequisitionItemDeliveryAddressDatumAfterDeleteHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook

var sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpsertHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook
var sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpsertHooks []SapPurchaseRequisitionItemDeliveryAddressDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseRequisitionItemDeliveryAddressDatumHook registers your hook function for all future operations.
func AddSapPurchaseRequisitionItemDeliveryAddressDatumHook(hookPoint boil.HookPoint, sapPurchaseRequisitionItemDeliveryAddressDatumHook SapPurchaseRequisitionItemDeliveryAddressDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumBeforeInsertHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumBeforeInsertHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumAfterInsertHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumAfterInsertHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpdateHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpdateHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpdateHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpdateHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumBeforeDeleteHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumBeforeDeleteHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumAfterDeleteHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumAfterDeleteHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpsertHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumBeforeUpsertHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpsertHooks = append(sapPurchaseRequisitionItemDeliveryAddressDatumAfterUpsertHooks, sapPurchaseRequisitionItemDeliveryAddressDatumHook)
	}
}

// One returns a single sapPurchaseRequisitionItemDeliveryAddressDatum record from the query.
func (q sapPurchaseRequisitionItemDeliveryAddressDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseRequisitionItemDeliveryAddressDatum, error) {
	o := &SapPurchaseRequisitionItemDeliveryAddressDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_requisition_item_delivery_address_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseRequisitionItemDeliveryAddressDatum records from the query.
func (q sapPurchaseRequisitionItemDeliveryAddressDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseRequisitionItemDeliveryAddressDatumSlice, error) {
	var o []*SapPurchaseRequisitionItemDeliveryAddressDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseRequisitionItemDeliveryAddressDatum slice")
	}

	if len(sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseRequisitionItemDeliveryAddressDatum records in the query.
func (q sapPurchaseRequisitionItemDeliveryAddressDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_requisition_item_delivery_address_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseRequisitionItemDeliveryAddressDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_requisition_item_delivery_address_data exists")
	}

	return count > 0, nil
}

// PurchaseRequisitionSapPurchaseRequisitionHeaderDatum pointed to by the foreign key.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) PurchaseRequisitionSapPurchaseRequisitionHeaderDatum(mods ...qm.QueryMod) sapPurchaseRequisitionHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseRequisition` = ?", o.PurchaseRequisition),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseRequisitionHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_requisition_header_data`")

	return query
}

// LoadPurchaseRequisitionSapPurchaseRequisitionHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseRequisitionItemDeliveryAddressDatumL) LoadPurchaseRequisitionSapPurchaseRequisitionHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseRequisitionItemDeliveryAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseRequisitionItemDeliveryAddressDatum
	var object *SapPurchaseRequisitionItemDeliveryAddressDatum

	if singular {
		object = maybeSapPurchaseRequisitionItemDeliveryAddressDatum.(*SapPurchaseRequisitionItemDeliveryAddressDatum)
	} else {
		slice = *maybeSapPurchaseRequisitionItemDeliveryAddressDatum.(*[]*SapPurchaseRequisitionItemDeliveryAddressDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseRequisitionItemDeliveryAddressDatumR{}
		}
		args = append(args, object.PurchaseRequisition)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseRequisitionItemDeliveryAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseRequisition {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseRequisition)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_requisition_header_data`),
		qm.WhereIn(`sap_purchase_requisition_header_data.PurchaseRequisition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseRequisitionHeaderDatum")
	}

	var resultSlice []*SapPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseRequisitionHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_requisition_header_data")
	}

	if len(sapPurchaseRequisitionItemDeliveryAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseRequisitionHeaderDatumR{}
		}
		foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData = append(foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseRequisition == foreign.PurchaseRequisition {
				local.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseRequisitionHeaderDatumR{}
				}
				foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData = append(foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseRequisitionSapPurchaseRequisitionHeaderDatum of the sapPurchaseRequisitionItemDeliveryAddressDatum to the related item.
// Sets o.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum to related.
// Adds o to related.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) SetPurchaseRequisitionSapPurchaseRequisitionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseRequisitionHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_requisition_item_delivery_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseRequisition"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseRequisition, o.PurchaseRequisition, o.PurchaseRequisitionItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseRequisition = related.PurchaseRequisition
	if o.R == nil {
		o.R = &sapPurchaseRequisitionItemDeliveryAddressDatumR{
			PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: related,
		}
	} else {
		o.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchaseRequisitionHeaderDatumR{
			PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData: SapPurchaseRequisitionItemDeliveryAddressDatumSlice{o},
		}
	} else {
		related.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData = append(related.R.PurchaseRequisitionSapPurchaseRequisitionItemDeliveryAddressData, o)
	}

	return nil
}

// SapPurchaseRequisitionItemDeliveryAddressData retrieves all the records using an executor.
func SapPurchaseRequisitionItemDeliveryAddressData(mods ...qm.QueryMod) sapPurchaseRequisitionItemDeliveryAddressDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_requisition_item_delivery_address_data`"))
	return sapPurchaseRequisitionItemDeliveryAddressDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseRequisitionItemDeliveryAddressDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseRequisitionItemDeliveryAddressDatum(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, purchaseRequisitionItem string, selectCols ...string) (*SapPurchaseRequisitionItemDeliveryAddressDatum, error) {
	sapPurchaseRequisitionItemDeliveryAddressDatumObj := &SapPurchaseRequisitionItemDeliveryAddressDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_requisition_item_delivery_address_data` where `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=?", sel,
	)

	q := queries.Raw(query, purchaseRequisition, purchaseRequisitionItem)

	err := q.Bind(ctx, exec, sapPurchaseRequisitionItemDeliveryAddressDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_requisition_item_delivery_address_data")
	}

	if err = sapPurchaseRequisitionItemDeliveryAddressDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseRequisitionItemDeliveryAddressDatumObj, err
	}

	return sapPurchaseRequisitionItemDeliveryAddressDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_item_delivery_address_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseRequisitionItemDeliveryAddressDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemDeliveryAddressDatumInsertCache[key]
	sapPurchaseRequisitionItemDeliveryAddressDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseRequisitionItemDeliveryAddressDatumAllColumns,
			sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithDefault,
			sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_requisition_item_delivery_address_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_requisition_item_delivery_address_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_requisition_item_delivery_address_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_requisition_item_delivery_address_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseRequisition,
		o.PurchaseRequisitionItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_item_delivery_address_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionItemDeliveryAddressDatumInsertCacheMut.Lock()
		sapPurchaseRequisitionItemDeliveryAddressDatumInsertCache[key] = cache
		sapPurchaseRequisitionItemDeliveryAddressDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseRequisitionItemDeliveryAddressDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCache[key]
	sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseRequisitionItemDeliveryAddressDatumAllColumns,
			sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_requisition_item_delivery_address_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_requisition_item_delivery_address_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, append(wl, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_requisition_item_delivery_address_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_requisition_item_delivery_address_data")
	}

	if !cached {
		sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCacheMut.Lock()
		sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCache[key] = cache
		sapPurchaseRequisitionItemDeliveryAddressDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseRequisitionItemDeliveryAddressDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_requisition_item_delivery_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_requisition_item_delivery_address_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseRequisitionItemDeliveryAddressDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_requisition_item_delivery_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseRequisitionItemDeliveryAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseRequisitionItemDeliveryAddressDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseRequisitionItemDeliveryAddressDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_item_delivery_address_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseRequisitionItemDeliveryAddressDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCache[key]
	sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseRequisitionItemDeliveryAddressDatumAllColumns,
			sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithDefault,
			sapPurchaseRequisitionItemDeliveryAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseRequisitionItemDeliveryAddressDatumAllColumns,
			sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_requisition_item_delivery_address_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_requisition_item_delivery_address_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_requisition_item_delivery_address_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_requisition_item_delivery_address_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseRequisitionItemDeliveryAddressDatumType, sapPurchaseRequisitionItemDeliveryAddressDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_requisition_item_delivery_address_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_item_delivery_address_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCacheMut.Lock()
		sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCache[key] = cache
		sapPurchaseRequisitionItemDeliveryAddressDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseRequisitionItemDeliveryAddressDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseRequisitionItemDeliveryAddressDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_requisition_item_delivery_address_data` WHERE `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_requisition_item_delivery_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_requisition_item_delivery_address_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseRequisitionItemDeliveryAddressDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseRequisitionItemDeliveryAddressDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_requisition_item_delivery_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_item_delivery_address_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseRequisitionItemDeliveryAddressDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseRequisitionItemDeliveryAddressDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_requisition_item_delivery_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseRequisitionItemDeliveryAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_item_delivery_address_data")
	}

	if len(sapPurchaseRequisitionItemDeliveryAddressDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseRequisitionItemDeliveryAddressDatum(ctx, exec, o.PurchaseRequisition, o.PurchaseRequisitionItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseRequisitionItemDeliveryAddressDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseRequisitionItemDeliveryAddressDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_requisition_item_delivery_address_data`.* FROM `sap_purchase_requisition_item_delivery_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemDeliveryAddressDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseRequisitionItemDeliveryAddressDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseRequisitionItemDeliveryAddressDatumExists checks if the SapPurchaseRequisitionItemDeliveryAddressDatum row exists.
func SapPurchaseRequisitionItemDeliveryAddressDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, purchaseRequisitionItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_requisition_item_delivery_address_data` where `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseRequisition, purchaseRequisitionItem)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseRequisition, purchaseRequisitionItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_requisition_item_delivery_address_data exists")
	}

	return exists, nil
}
