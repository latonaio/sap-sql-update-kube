// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceConfirmationHeaderDatum is an object representing the database table.
type SapServiceConfirmationHeaderDatum struct {
	ServiceConfirmation            string      `boil:"ServiceConfirmation" json:"ServiceConfirmation" toml:"ServiceConfirmation" yaml:"ServiceConfirmation"`
	ServiceConfirmationType        null.String `boil:"ServiceConfirmationType" json:"ServiceConfirmationType,omitempty" toml:"ServiceConfirmationType" yaml:"ServiceConfirmationType,omitempty"`
	ServiceConfirmationDescription null.String `boil:"ServiceConfirmationDescription" json:"ServiceConfirmationDescription,omitempty" toml:"ServiceConfirmationDescription" yaml:"ServiceConfirmationDescription,omitempty"`
	ServiceObjectType              null.String `boil:"ServiceObjectType" json:"ServiceObjectType,omitempty" toml:"ServiceObjectType" yaml:"ServiceObjectType,omitempty"`
	Language                       null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	ServiceDocumentPriority        null.String `boil:"ServiceDocumentPriority" json:"ServiceDocumentPriority,omitempty" toml:"ServiceDocumentPriority" yaml:"ServiceDocumentPriority,omitempty"`
	RequestedServiceStartDateTime  null.String `boil:"RequestedServiceStartDateTime" json:"RequestedServiceStartDateTime,omitempty" toml:"RequestedServiceStartDateTime" yaml:"RequestedServiceStartDateTime,omitempty"`
	RequestedServiceEndDateTime    null.String `boil:"RequestedServiceEndDateTime" json:"RequestedServiceEndDateTime,omitempty" toml:"RequestedServiceEndDateTime" yaml:"RequestedServiceEndDateTime,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderDate      null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	ServiceConfirmationIsCompleted null.String `boil:"ServiceConfirmationIsCompleted" json:"ServiceConfirmationIsCompleted,omitempty" toml:"ServiceConfirmationIsCompleted" yaml:"ServiceConfirmationIsCompleted,omitempty"`
	ServiceConfirmationIsCanceled  null.Bool   `boil:"ServiceConfirmationIsCanceled" json:"ServiceConfirmationIsCanceled,omitempty" toml:"ServiceConfirmationIsCanceled" yaml:"ServiceConfirmationIsCanceled,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	Division                       null.String `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	ShipToParty                    null.String `boil:"ShipToParty" json:"ShipToParty,omitempty" toml:"ShipToParty" yaml:"ShipToParty,omitempty"`
	BillToParty                    null.String `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	PayerParty                     null.String `boil:"PayerParty" json:"PayerParty,omitempty" toml:"PayerParty" yaml:"PayerParty,omitempty"`
	ContactPerson                  null.String `boil:"ContactPerson" json:"ContactPerson,omitempty" toml:"ContactPerson" yaml:"ContactPerson,omitempty"`
	ReferenceServiceOrder          null.String `boil:"ReferenceServiceOrder" json:"ReferenceServiceOrder,omitempty" toml:"ReferenceServiceOrder" yaml:"ReferenceServiceOrder,omitempty"`
	ServiceConfirmationIsFinal     null.String `boil:"ServiceConfirmationIsFinal" json:"ServiceConfirmationIsFinal,omitempty" toml:"ServiceConfirmationIsFinal" yaml:"ServiceConfirmationIsFinal,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	RespyMgmtServiceTeam           null.String `boil:"RespyMgmtServiceTeam" json:"RespyMgmtServiceTeam,omitempty" toml:"RespyMgmtServiceTeam" yaml:"RespyMgmtServiceTeam,omitempty"`
	RespyMgmtServiceTeamName       null.String `boil:"RespyMgmtServiceTeamName" json:"RespyMgmtServiceTeamName,omitempty" toml:"RespyMgmtServiceTeamName" yaml:"RespyMgmtServiceTeamName,omitempty"`
	ServiceOrganization            null.String `boil:"ServiceOrganization" json:"ServiceOrganization,omitempty" toml:"ServiceOrganization" yaml:"ServiceOrganization,omitempty"`

	R *sapServiceConfirmationHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceConfirmationHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceConfirmationHeaderDatumColumns = struct {
	ServiceConfirmation            string
	ServiceConfirmationType        string
	ServiceConfirmationDescription string
	ServiceObjectType              string
	Language                       string
	ServiceDocumentPriority        string
	RequestedServiceStartDateTime  string
	RequestedServiceEndDateTime    string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	ServiceConfirmationIsCompleted string
	ServiceConfirmationIsCanceled  string
	SalesOrganization              string
	DistributionChannel            string
	Division                       string
	SalesOffice                    string
	SalesGroup                     string
	SoldToParty                    string
	ShipToParty                    string
	BillToParty                    string
	PayerParty                     string
	ContactPerson                  string
	ReferenceServiceOrder          string
	ServiceConfirmationIsFinal     string
	TransactionCurrency            string
	RespyMgmtServiceTeam           string
	RespyMgmtServiceTeamName       string
	ServiceOrganization            string
}{
	ServiceConfirmation:            "ServiceConfirmation",
	ServiceConfirmationType:        "ServiceConfirmationType",
	ServiceConfirmationDescription: "ServiceConfirmationDescription",
	ServiceObjectType:              "ServiceObjectType",
	Language:                       "Language",
	ServiceDocumentPriority:        "ServiceDocumentPriority",
	RequestedServiceStartDateTime:  "RequestedServiceStartDateTime",
	RequestedServiceEndDateTime:    "RequestedServiceEndDateTime",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "CustomerPurchaseOrderDate",
	ServiceConfirmationIsCompleted: "ServiceConfirmationIsCompleted",
	ServiceConfirmationIsCanceled:  "ServiceConfirmationIsCanceled",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	Division:                       "Division",
	SalesOffice:                    "SalesOffice",
	SalesGroup:                     "SalesGroup",
	SoldToParty:                    "SoldToParty",
	ShipToParty:                    "ShipToParty",
	BillToParty:                    "BillToParty",
	PayerParty:                     "PayerParty",
	ContactPerson:                  "ContactPerson",
	ReferenceServiceOrder:          "ReferenceServiceOrder",
	ServiceConfirmationIsFinal:     "ServiceConfirmationIsFinal",
	TransactionCurrency:            "TransactionCurrency",
	RespyMgmtServiceTeam:           "RespyMgmtServiceTeam",
	RespyMgmtServiceTeamName:       "RespyMgmtServiceTeamName",
	ServiceOrganization:            "ServiceOrganization",
}

var SapServiceConfirmationHeaderDatumTableColumns = struct {
	ServiceConfirmation            string
	ServiceConfirmationType        string
	ServiceConfirmationDescription string
	ServiceObjectType              string
	Language                       string
	ServiceDocumentPriority        string
	RequestedServiceStartDateTime  string
	RequestedServiceEndDateTime    string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	ServiceConfirmationIsCompleted string
	ServiceConfirmationIsCanceled  string
	SalesOrganization              string
	DistributionChannel            string
	Division                       string
	SalesOffice                    string
	SalesGroup                     string
	SoldToParty                    string
	ShipToParty                    string
	BillToParty                    string
	PayerParty                     string
	ContactPerson                  string
	ReferenceServiceOrder          string
	ServiceConfirmationIsFinal     string
	TransactionCurrency            string
	RespyMgmtServiceTeam           string
	RespyMgmtServiceTeamName       string
	ServiceOrganization            string
}{
	ServiceConfirmation:            "sap_service_confirmation_header_data.ServiceConfirmation",
	ServiceConfirmationType:        "sap_service_confirmation_header_data.ServiceConfirmationType",
	ServiceConfirmationDescription: "sap_service_confirmation_header_data.ServiceConfirmationDescription",
	ServiceObjectType:              "sap_service_confirmation_header_data.ServiceObjectType",
	Language:                       "sap_service_confirmation_header_data.Language",
	ServiceDocumentPriority:        "sap_service_confirmation_header_data.ServiceDocumentPriority",
	RequestedServiceStartDateTime:  "sap_service_confirmation_header_data.RequestedServiceStartDateTime",
	RequestedServiceEndDateTime:    "sap_service_confirmation_header_data.RequestedServiceEndDateTime",
	PurchaseOrderByCustomer:        "sap_service_confirmation_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "sap_service_confirmation_header_data.CustomerPurchaseOrderDate",
	ServiceConfirmationIsCompleted: "sap_service_confirmation_header_data.ServiceConfirmationIsCompleted",
	ServiceConfirmationIsCanceled:  "sap_service_confirmation_header_data.ServiceConfirmationIsCanceled",
	SalesOrganization:              "sap_service_confirmation_header_data.SalesOrganization",
	DistributionChannel:            "sap_service_confirmation_header_data.DistributionChannel",
	Division:                       "sap_service_confirmation_header_data.Division",
	SalesOffice:                    "sap_service_confirmation_header_data.SalesOffice",
	SalesGroup:                     "sap_service_confirmation_header_data.SalesGroup",
	SoldToParty:                    "sap_service_confirmation_header_data.SoldToParty",
	ShipToParty:                    "sap_service_confirmation_header_data.ShipToParty",
	BillToParty:                    "sap_service_confirmation_header_data.BillToParty",
	PayerParty:                     "sap_service_confirmation_header_data.PayerParty",
	ContactPerson:                  "sap_service_confirmation_header_data.ContactPerson",
	ReferenceServiceOrder:          "sap_service_confirmation_header_data.ReferenceServiceOrder",
	ServiceConfirmationIsFinal:     "sap_service_confirmation_header_data.ServiceConfirmationIsFinal",
	TransactionCurrency:            "sap_service_confirmation_header_data.TransactionCurrency",
	RespyMgmtServiceTeam:           "sap_service_confirmation_header_data.RespyMgmtServiceTeam",
	RespyMgmtServiceTeamName:       "sap_service_confirmation_header_data.RespyMgmtServiceTeamName",
	ServiceOrganization:            "sap_service_confirmation_header_data.ServiceOrganization",
}

// Generated where

var SapServiceConfirmationHeaderDatumWhere = struct {
	ServiceConfirmation            whereHelperstring
	ServiceConfirmationType        whereHelpernull_String
	ServiceConfirmationDescription whereHelpernull_String
	ServiceObjectType              whereHelpernull_String
	Language                       whereHelpernull_String
	ServiceDocumentPriority        whereHelpernull_String
	RequestedServiceStartDateTime  whereHelpernull_String
	RequestedServiceEndDateTime    whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	CustomerPurchaseOrderDate      whereHelpernull_String
	ServiceConfirmationIsCompleted whereHelpernull_String
	ServiceConfirmationIsCanceled  whereHelpernull_Bool
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	Division                       whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	ShipToParty                    whereHelpernull_String
	BillToParty                    whereHelpernull_String
	PayerParty                     whereHelpernull_String
	ContactPerson                  whereHelpernull_String
	ReferenceServiceOrder          whereHelpernull_String
	ServiceConfirmationIsFinal     whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	RespyMgmtServiceTeam           whereHelpernull_String
	RespyMgmtServiceTeamName       whereHelpernull_String
	ServiceOrganization            whereHelpernull_String
}{
	ServiceConfirmation:            whereHelperstring{field: "`sap_service_confirmation_header_data`.`ServiceConfirmation`"},
	ServiceConfirmationType:        whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceConfirmationType`"},
	ServiceConfirmationDescription: whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceConfirmationDescription`"},
	ServiceObjectType:              whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceObjectType`"},
	Language:                       whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`Language`"},
	ServiceDocumentPriority:        whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceDocumentPriority`"},
	RequestedServiceStartDateTime:  whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`RequestedServiceStartDateTime`"},
	RequestedServiceEndDateTime:    whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`RequestedServiceEndDateTime`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderDate:      whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`CustomerPurchaseOrderDate`"},
	ServiceConfirmationIsCompleted: whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceConfirmationIsCompleted`"},
	ServiceConfirmationIsCanceled:  whereHelpernull_Bool{field: "`sap_service_confirmation_header_data`.`ServiceConfirmationIsCanceled`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`DistributionChannel`"},
	Division:                       whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`Division`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`SalesOffice`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`SalesGroup`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`SoldToParty`"},
	ShipToParty:                    whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ShipToParty`"},
	BillToParty:                    whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`BillToParty`"},
	PayerParty:                     whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`PayerParty`"},
	ContactPerson:                  whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ContactPerson`"},
	ReferenceServiceOrder:          whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ReferenceServiceOrder`"},
	ServiceConfirmationIsFinal:     whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceConfirmationIsFinal`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`TransactionCurrency`"},
	RespyMgmtServiceTeam:           whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`RespyMgmtServiceTeam`"},
	RespyMgmtServiceTeamName:       whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`RespyMgmtServiceTeamName`"},
	ServiceOrganization:            whereHelpernull_String{field: "`sap_service_confirmation_header_data`.`ServiceOrganization`"},
}

// SapServiceConfirmationHeaderDatumRels is where relationship names are stored.
var SapServiceConfirmationHeaderDatumRels = struct {
	ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum string
	ServiceConfirmationSapServiceConfirmationReferenceObjectDatum   string
	ServiceConfirmationSapServiceConfirmationItemData               string
}{
	ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum: "ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum",
	ServiceConfirmationSapServiceConfirmationReferenceObjectDatum:   "ServiceConfirmationSapServiceConfirmationReferenceObjectDatum",
	ServiceConfirmationSapServiceConfirmationItemData:               "ServiceConfirmationSapServiceConfirmationItemData",
}

// sapServiceConfirmationHeaderDatumR is where relationships are stored.
type sapServiceConfirmationHeaderDatumR struct {
	ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum *SapServiceConfirmationPersonResponsibleDatum `boil:"ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum" json:"ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum" toml:"ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum" yaml:"ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum"`
	ServiceConfirmationSapServiceConfirmationReferenceObjectDatum   *SapServiceConfirmationReferenceObjectDatum   `boil:"ServiceConfirmationSapServiceConfirmationReferenceObjectDatum" json:"ServiceConfirmationSapServiceConfirmationReferenceObjectDatum" toml:"ServiceConfirmationSapServiceConfirmationReferenceObjectDatum" yaml:"ServiceConfirmationSapServiceConfirmationReferenceObjectDatum"`
	ServiceConfirmationSapServiceConfirmationItemData               SapServiceConfirmationItemDatumSlice          `boil:"ServiceConfirmationSapServiceConfirmationItemData" json:"ServiceConfirmationSapServiceConfirmationItemData" toml:"ServiceConfirmationSapServiceConfirmationItemData" yaml:"ServiceConfirmationSapServiceConfirmationItemData"`
}

// NewStruct creates a new relationship struct
func (*sapServiceConfirmationHeaderDatumR) NewStruct() *sapServiceConfirmationHeaderDatumR {
	return &sapServiceConfirmationHeaderDatumR{}
}

// sapServiceConfirmationHeaderDatumL is where Load methods for each relationship are stored.
type sapServiceConfirmationHeaderDatumL struct{}

var (
	sapServiceConfirmationHeaderDatumAllColumns            = []string{"ServiceConfirmation", "ServiceConfirmationType", "ServiceConfirmationDescription", "ServiceObjectType", "Language", "ServiceDocumentPriority", "RequestedServiceStartDateTime", "RequestedServiceEndDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "ServiceConfirmationIsCompleted", "ServiceConfirmationIsCanceled", "SalesOrganization", "DistributionChannel", "Division", "SalesOffice", "SalesGroup", "SoldToParty", "ShipToParty", "BillToParty", "PayerParty", "ContactPerson", "ReferenceServiceOrder", "ServiceConfirmationIsFinal", "TransactionCurrency", "RespyMgmtServiceTeam", "RespyMgmtServiceTeamName", "ServiceOrganization"}
	sapServiceConfirmationHeaderDatumColumnsWithoutDefault = []string{"ServiceConfirmation", "ServiceConfirmationType", "ServiceConfirmationDescription", "ServiceObjectType", "Language", "ServiceDocumentPriority", "RequestedServiceStartDateTime", "RequestedServiceEndDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "ServiceConfirmationIsCompleted", "ServiceConfirmationIsCanceled", "SalesOrganization", "DistributionChannel", "Division", "SalesOffice", "SalesGroup", "SoldToParty", "ShipToParty", "BillToParty", "PayerParty", "ContactPerson", "ReferenceServiceOrder", "ServiceConfirmationIsFinal", "TransactionCurrency", "RespyMgmtServiceTeam", "RespyMgmtServiceTeamName", "ServiceOrganization"}
	sapServiceConfirmationHeaderDatumColumnsWithDefault    = []string{}
	sapServiceConfirmationHeaderDatumPrimaryKeyColumns     = []string{"ServiceConfirmation"}
)

type (
	// SapServiceConfirmationHeaderDatumSlice is an alias for a slice of pointers to SapServiceConfirmationHeaderDatum.
	// This should almost always be used instead of []SapServiceConfirmationHeaderDatum.
	SapServiceConfirmationHeaderDatumSlice []*SapServiceConfirmationHeaderDatum
	// SapServiceConfirmationHeaderDatumHook is the signature for custom SapServiceConfirmationHeaderDatum hook methods
	SapServiceConfirmationHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapServiceConfirmationHeaderDatum) error

	sapServiceConfirmationHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceConfirmationHeaderDatumType                 = reflect.TypeOf(&SapServiceConfirmationHeaderDatum{})
	sapServiceConfirmationHeaderDatumMapping              = queries.MakeStructMapping(sapServiceConfirmationHeaderDatumType)
	sapServiceConfirmationHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, sapServiceConfirmationHeaderDatumPrimaryKeyColumns)
	sapServiceConfirmationHeaderDatumInsertCacheMut       sync.RWMutex
	sapServiceConfirmationHeaderDatumInsertCache          = make(map[string]insertCache)
	sapServiceConfirmationHeaderDatumUpdateCacheMut       sync.RWMutex
	sapServiceConfirmationHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapServiceConfirmationHeaderDatumUpsertCacheMut       sync.RWMutex
	sapServiceConfirmationHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceConfirmationHeaderDatumBeforeInsertHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumBeforeUpdateHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumBeforeDeleteHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumBeforeUpsertHooks []SapServiceConfirmationHeaderDatumHook

var sapServiceConfirmationHeaderDatumAfterInsertHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumAfterSelectHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumAfterUpdateHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumAfterDeleteHooks []SapServiceConfirmationHeaderDatumHook
var sapServiceConfirmationHeaderDatumAfterUpsertHooks []SapServiceConfirmationHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceConfirmationHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceConfirmationHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceConfirmationHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceConfirmationHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceConfirmationHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceConfirmationHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceConfirmationHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceConfirmationHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceConfirmationHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceConfirmationHeaderDatumHook registers your hook function for all future operations.
func AddSapServiceConfirmationHeaderDatumHook(hookPoint boil.HookPoint, sapServiceConfirmationHeaderDatumHook SapServiceConfirmationHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapServiceConfirmationHeaderDatumBeforeInsertHooks = append(sapServiceConfirmationHeaderDatumBeforeInsertHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceConfirmationHeaderDatumBeforeUpdateHooks = append(sapServiceConfirmationHeaderDatumBeforeUpdateHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceConfirmationHeaderDatumBeforeDeleteHooks = append(sapServiceConfirmationHeaderDatumBeforeDeleteHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceConfirmationHeaderDatumBeforeUpsertHooks = append(sapServiceConfirmationHeaderDatumBeforeUpsertHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.AfterInsertHook:
		sapServiceConfirmationHeaderDatumAfterInsertHooks = append(sapServiceConfirmationHeaderDatumAfterInsertHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.AfterSelectHook:
		sapServiceConfirmationHeaderDatumAfterSelectHooks = append(sapServiceConfirmationHeaderDatumAfterSelectHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapServiceConfirmationHeaderDatumAfterUpdateHooks = append(sapServiceConfirmationHeaderDatumAfterUpdateHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapServiceConfirmationHeaderDatumAfterDeleteHooks = append(sapServiceConfirmationHeaderDatumAfterDeleteHooks, sapServiceConfirmationHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapServiceConfirmationHeaderDatumAfterUpsertHooks = append(sapServiceConfirmationHeaderDatumAfterUpsertHooks, sapServiceConfirmationHeaderDatumHook)
	}
}

// One returns a single sapServiceConfirmationHeaderDatum record from the query.
func (q sapServiceConfirmationHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceConfirmationHeaderDatum, error) {
	o := &SapServiceConfirmationHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_confirmation_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceConfirmationHeaderDatum records from the query.
func (q sapServiceConfirmationHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceConfirmationHeaderDatumSlice, error) {
	var o []*SapServiceConfirmationHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceConfirmationHeaderDatum slice")
	}

	if len(sapServiceConfirmationHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceConfirmationHeaderDatum records in the query.
func (q sapServiceConfirmationHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_confirmation_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceConfirmationHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_confirmation_header_data exists")
	}

	return count > 0, nil
}

// ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum pointed to by the foreign key.
func (o *SapServiceConfirmationHeaderDatum) ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum(mods ...qm.QueryMod) sapServiceConfirmationPersonResponsibleDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceConfirmation` = ?", o.ServiceConfirmation),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceConfirmationPersonResponsibleData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_confirmation_person_responsible_data`")

	return query
}

// ServiceConfirmationSapServiceConfirmationReferenceObjectDatum pointed to by the foreign key.
func (o *SapServiceConfirmationHeaderDatum) ServiceConfirmationSapServiceConfirmationReferenceObjectDatum(mods ...qm.QueryMod) sapServiceConfirmationReferenceObjectDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceConfirmation` = ?", o.ServiceConfirmation),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceConfirmationReferenceObjectData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_confirmation_reference_object_data`")

	return query
}

// ServiceConfirmationSapServiceConfirmationItemData retrieves all the sap_service_confirmation_item_datum's SapServiceConfirmationItemData with an executor via ServiceConfirmation column.
func (o *SapServiceConfirmationHeaderDatum) ServiceConfirmationSapServiceConfirmationItemData(mods ...qm.QueryMod) sapServiceConfirmationItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_service_confirmation_item_data`.`ServiceConfirmation`=?", o.ServiceConfirmation),
	)

	query := SapServiceConfirmationItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_confirmation_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_service_confirmation_item_data`.*"})
	}

	return query
}

// LoadServiceConfirmationSapServiceConfirmationPersonResponsibleDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapServiceConfirmationHeaderDatumL) LoadServiceConfirmationSapServiceConfirmationPersonResponsibleDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationHeaderDatum
	var object *SapServiceConfirmationHeaderDatum

	if singular {
		object = maybeSapServiceConfirmationHeaderDatum.(*SapServiceConfirmationHeaderDatum)
	} else {
		slice = *maybeSapServiceConfirmationHeaderDatum.(*[]*SapServiceConfirmationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationHeaderDatumR{}
		}
		args = append(args, object.ServiceConfirmation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_person_responsible_data`),
		qm.WhereIn(`sap_service_confirmation_person_responsible_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceConfirmationPersonResponsibleDatum")
	}

	var resultSlice []*SapServiceConfirmationPersonResponsibleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceConfirmationPersonResponsibleDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_confirmation_person_responsible_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_person_responsible_data")
	}

	if len(sapServiceConfirmationHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceConfirmationPersonResponsibleDatumR{}
		}
		foreign.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationPersonResponsibleDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceConfirmationSapServiceConfirmationReferenceObjectDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapServiceConfirmationHeaderDatumL) LoadServiceConfirmationSapServiceConfirmationReferenceObjectDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationHeaderDatum
	var object *SapServiceConfirmationHeaderDatum

	if singular {
		object = maybeSapServiceConfirmationHeaderDatum.(*SapServiceConfirmationHeaderDatum)
	} else {
		slice = *maybeSapServiceConfirmationHeaderDatum.(*[]*SapServiceConfirmationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationHeaderDatumR{}
		}
		args = append(args, object.ServiceConfirmation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_reference_object_data`),
		qm.WhereIn(`sap_service_confirmation_reference_object_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceConfirmationReferenceObjectDatum")
	}

	var resultSlice []*SapServiceConfirmationReferenceObjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceConfirmationReferenceObjectDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_confirmation_reference_object_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_reference_object_data")
	}

	if len(sapServiceConfirmationHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceConfirmationReferenceObjectDatumR{}
		}
		foreign.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationReferenceObjectDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceConfirmationSapServiceConfirmationItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapServiceConfirmationHeaderDatumL) LoadServiceConfirmationSapServiceConfirmationItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationHeaderDatum
	var object *SapServiceConfirmationHeaderDatum

	if singular {
		object = maybeSapServiceConfirmationHeaderDatum.(*SapServiceConfirmationHeaderDatum)
	} else {
		slice = *maybeSapServiceConfirmationHeaderDatum.(*[]*SapServiceConfirmationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationHeaderDatumR{}
		}
		args = append(args, object.ServiceConfirmation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_item_data`),
		qm.WhereIn(`sap_service_confirmation_item_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_service_confirmation_item_data")
	}

	var resultSlice []*SapServiceConfirmationItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_service_confirmation_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_service_confirmation_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_item_data")
	}

	if len(sapServiceConfirmationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceConfirmationSapServiceConfirmationItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapServiceConfirmationItemDatumR{}
			}
			foreign.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationItemData = append(local.R.ServiceConfirmationSapServiceConfirmationItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationItemDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// SetServiceConfirmationSapServiceConfirmationPersonResponsibleDatum of the sapServiceConfirmationHeaderDatum to the related item.
// Sets o.R.ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum to related.
// Adds o to related.R.ServiceConfirmationSapServiceConfirmationHeaderDatum.
func (o *SapServiceConfirmationHeaderDatum) SetServiceConfirmationSapServiceConfirmationPersonResponsibleDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceConfirmationPersonResponsibleDatum) error {
	var err error

	if insert {
		related.ServiceConfirmation = o.ServiceConfirmation

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_service_confirmation_person_responsible_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
			strmangle.WhereClause("`", "`", 0, sapServiceConfirmationPersonResponsibleDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.ServiceConfirmation, related.ServiceConfirmation}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceConfirmation = o.ServiceConfirmation

	}

	if o.R == nil {
		o.R = &sapServiceConfirmationHeaderDatumR{
			ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationPersonResponsibleDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceConfirmationPersonResponsibleDatumR{
			ServiceConfirmationSapServiceConfirmationHeaderDatum: o,
		}
	} else {
		related.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = o
	}
	return nil
}

// SetServiceConfirmationSapServiceConfirmationReferenceObjectDatum of the sapServiceConfirmationHeaderDatum to the related item.
// Sets o.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum to related.
// Adds o to related.R.ServiceConfirmationSapServiceConfirmationHeaderDatum.
func (o *SapServiceConfirmationHeaderDatum) SetServiceConfirmationSapServiceConfirmationReferenceObjectDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceConfirmationReferenceObjectDatum) error {
	var err error

	if insert {
		related.ServiceConfirmation = o.ServiceConfirmation

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_service_confirmation_reference_object_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
			strmangle.WhereClause("`", "`", 0, sapServiceConfirmationReferenceObjectDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.ServiceConfirmation, related.ServiceConfirmation}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceConfirmation = o.ServiceConfirmation

	}

	if o.R == nil {
		o.R = &sapServiceConfirmationHeaderDatumR{
			ServiceConfirmationSapServiceConfirmationReferenceObjectDatum: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationReferenceObjectDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceConfirmationReferenceObjectDatumR{
			ServiceConfirmationSapServiceConfirmationHeaderDatum: o,
		}
	} else {
		related.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = o
	}
	return nil
}

// AddServiceConfirmationSapServiceConfirmationItemData adds the given related objects to the existing relationships
// of the sap_service_confirmation_header_datum, optionally inserting them as new records.
// Appends related to o.R.ServiceConfirmationSapServiceConfirmationItemData.
// Sets related.R.ServiceConfirmationSapServiceConfirmationHeaderDatum appropriately.
func (o *SapServiceConfirmationHeaderDatum) AddServiceConfirmationSapServiceConfirmationItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapServiceConfirmationItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceConfirmation = o.ServiceConfirmation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_service_confirmation_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
				strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ServiceConfirmation, rel.ServiceConfirmation, rel.ServiceConfirmationItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceConfirmation = o.ServiceConfirmation
		}
	}

	if o.R == nil {
		o.R = &sapServiceConfirmationHeaderDatumR{
			ServiceConfirmationSapServiceConfirmationItemData: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationItemData = append(o.R.ServiceConfirmationSapServiceConfirmationItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapServiceConfirmationItemDatumR{
				ServiceConfirmationSapServiceConfirmationHeaderDatum: o,
			}
		} else {
			rel.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = o
		}
	}
	return nil
}

// SapServiceConfirmationHeaderData retrieves all the records using an executor.
func SapServiceConfirmationHeaderData(mods ...qm.QueryMod) sapServiceConfirmationHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_service_confirmation_header_data`"))
	return sapServiceConfirmationHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapServiceConfirmationHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceConfirmationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string, selectCols ...string) (*SapServiceConfirmationHeaderDatum, error) {
	sapServiceConfirmationHeaderDatumObj := &SapServiceConfirmationHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_confirmation_header_data` where `ServiceConfirmation`=?", sel,
	)

	q := queries.Raw(query, serviceConfirmation)

	err := q.Bind(ctx, exec, sapServiceConfirmationHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_confirmation_header_data")
	}

	if err = sapServiceConfirmationHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceConfirmationHeaderDatumObj, err
	}

	return sapServiceConfirmationHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceConfirmationHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceConfirmationHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationHeaderDatumInsertCache[key]
	sapServiceConfirmationHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceConfirmationHeaderDatumAllColumns,
			sapServiceConfirmationHeaderDatumColumnsWithDefault,
			sapServiceConfirmationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_confirmation_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_confirmation_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_confirmation_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceConfirmationHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_confirmation_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceConfirmation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_header_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationHeaderDatumInsertCacheMut.Lock()
		sapServiceConfirmationHeaderDatumInsertCache[key] = cache
		sapServiceConfirmationHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceConfirmationHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceConfirmationHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceConfirmationHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceConfirmationHeaderDatumUpdateCache[key]
	sapServiceConfirmationHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceConfirmationHeaderDatumAllColumns,
			sapServiceConfirmationHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_confirmation_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_confirmation_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceConfirmationHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, append(wl, sapServiceConfirmationHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_confirmation_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_confirmation_header_data")
	}

	if !cached {
		sapServiceConfirmationHeaderDatumUpdateCacheMut.Lock()
		sapServiceConfirmationHeaderDatumUpdateCache[key] = cache
		sapServiceConfirmationHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceConfirmationHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_confirmation_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_confirmation_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceConfirmationHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceConfirmationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceConfirmationHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceConfirmationHeaderDatumUniqueColumns = []string{
	"ServiceConfirmation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceConfirmationHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceConfirmationHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceConfirmationHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationHeaderDatumUpsertCache[key]
	sapServiceConfirmationHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceConfirmationHeaderDatumAllColumns,
			sapServiceConfirmationHeaderDatumColumnsWithDefault,
			sapServiceConfirmationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapServiceConfirmationHeaderDatumAllColumns,
			sapServiceConfirmationHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_confirmation_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_confirmation_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_confirmation_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_confirmation_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceConfirmationHeaderDatumType, sapServiceConfirmationHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_confirmation_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_header_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationHeaderDatumUpsertCacheMut.Lock()
		sapServiceConfirmationHeaderDatumUpsertCache[key] = cache
		sapServiceConfirmationHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceConfirmationHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceConfirmationHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceConfirmationHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceConfirmationHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_confirmation_header_data` WHERE `ServiceConfirmation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_confirmation_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_confirmation_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceConfirmationHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceConfirmationHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_confirmation_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceConfirmationHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceConfirmationHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_confirmation_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceConfirmationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_header_data")
	}

	if len(sapServiceConfirmationHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceConfirmationHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceConfirmationHeaderDatum(ctx, exec, o.ServiceConfirmation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceConfirmationHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceConfirmationHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_confirmation_header_data`.* FROM `sap_service_confirmation_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceConfirmationHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceConfirmationHeaderDatumExists checks if the SapServiceConfirmationHeaderDatum row exists.
func SapServiceConfirmationHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_confirmation_header_data` where `ServiceConfirmation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceConfirmation)
	}
	row := exec.QueryRowContext(ctx, sql, serviceConfirmation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_confirmation_header_data exists")
	}

	return exists, nil
}
