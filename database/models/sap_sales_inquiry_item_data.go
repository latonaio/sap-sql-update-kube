// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesInquiryItemDatum is an object representing the database table.
type SapSalesInquiryItemDatum struct {
	SalesInquiry                  string      `boil:"SalesInquiry" json:"SalesInquiry" toml:"SalesInquiry" yaml:"SalesInquiry"`
	SalesInquiryItem              string      `boil:"SalesInquiryItem" json:"SalesInquiryItem" toml:"SalesInquiryItem" yaml:"SalesInquiryItem"`
	SalesInquiryItemCategory      null.String `boil:"SalesInquiryItemCategory" json:"SalesInquiryItemCategory,omitempty" toml:"SalesInquiryItemCategory" yaml:"SalesInquiryItemCategory,omitempty"`
	SalesInquiryItemText          null.String `boil:"SalesInquiryItemText" json:"SalesInquiryItemText,omitempty" toml:"SalesInquiryItemText" yaml:"SalesInquiryItemText,omitempty"`
	PurchaseOrderByCustomer       null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	Material                      null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer            null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	RequestedQuantity             null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	RequestedQuantityUnit         null.String `boil:"RequestedQuantityUnit" json:"RequestedQuantityUnit,omitempty" toml:"RequestedQuantityUnit" yaml:"RequestedQuantityUnit,omitempty"`
	ItemOrderProbabilityInPercent null.String `boil:"ItemOrderProbabilityInPercent" json:"ItemOrderProbabilityInPercent,omitempty" toml:"ItemOrderProbabilityInPercent" yaml:"ItemOrderProbabilityInPercent,omitempty"`
	ItemGrossWeight               null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                 null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemVolume                    null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit                null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	TransactionCurrency           null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	NetAmount                     null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	MaterialGroup                 null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	Batch                         null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	IncotermsClassification       null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms          null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	SalesDocumentRjcnReason       null.String `boil:"SalesDocumentRjcnReason" json:"SalesDocumentRjcnReason,omitempty" toml:"SalesDocumentRjcnReason" yaml:"SalesDocumentRjcnReason,omitempty"`
	WBSElement                    null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	SDProcessStatus               null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`

	R *sapSalesInquiryItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesInquiryItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesInquiryItemDatumColumns = struct {
	SalesInquiry                  string
	SalesInquiryItem              string
	SalesInquiryItemCategory      string
	SalesInquiryItemText          string
	PurchaseOrderByCustomer       string
	Material                      string
	MaterialByCustomer            string
	RequestedQuantity             string
	RequestedQuantityUnit         string
	ItemOrderProbabilityInPercent string
	ItemGrossWeight               string
	ItemNetWeight                 string
	ItemWeightUnit                string
	ItemVolume                    string
	ItemVolumeUnit                string
	TransactionCurrency           string
	NetAmount                     string
	MaterialGroup                 string
	Batch                         string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	SalesDocumentRjcnReason       string
	WBSElement                    string
	SDProcessStatus               string
}{
	SalesInquiry:                  "SalesInquiry",
	SalesInquiryItem:              "SalesInquiryItem",
	SalesInquiryItemCategory:      "SalesInquiryItemCategory",
	SalesInquiryItemText:          "SalesInquiryItemText",
	PurchaseOrderByCustomer:       "PurchaseOrderByCustomer",
	Material:                      "Material",
	MaterialByCustomer:            "MaterialByCustomer",
	RequestedQuantity:             "RequestedQuantity",
	RequestedQuantityUnit:         "RequestedQuantityUnit",
	ItemOrderProbabilityInPercent: "ItemOrderProbabilityInPercent",
	ItemGrossWeight:               "ItemGrossWeight",
	ItemNetWeight:                 "ItemNetWeight",
	ItemWeightUnit:                "ItemWeightUnit",
	ItemVolume:                    "ItemVolume",
	ItemVolumeUnit:                "ItemVolumeUnit",
	TransactionCurrency:           "TransactionCurrency",
	NetAmount:                     "NetAmount",
	MaterialGroup:                 "MaterialGroup",
	Batch:                         "Batch",
	IncotermsClassification:       "IncotermsClassification",
	CustomerPaymentTerms:          "CustomerPaymentTerms",
	SalesDocumentRjcnReason:       "SalesDocumentRjcnReason",
	WBSElement:                    "WBSElement",
	SDProcessStatus:               "SDProcessStatus",
}

var SapSalesInquiryItemDatumTableColumns = struct {
	SalesInquiry                  string
	SalesInquiryItem              string
	SalesInquiryItemCategory      string
	SalesInquiryItemText          string
	PurchaseOrderByCustomer       string
	Material                      string
	MaterialByCustomer            string
	RequestedQuantity             string
	RequestedQuantityUnit         string
	ItemOrderProbabilityInPercent string
	ItemGrossWeight               string
	ItemNetWeight                 string
	ItemWeightUnit                string
	ItemVolume                    string
	ItemVolumeUnit                string
	TransactionCurrency           string
	NetAmount                     string
	MaterialGroup                 string
	Batch                         string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	SalesDocumentRjcnReason       string
	WBSElement                    string
	SDProcessStatus               string
}{
	SalesInquiry:                  "sap_sales_inquiry_item_data.SalesInquiry",
	SalesInquiryItem:              "sap_sales_inquiry_item_data.SalesInquiryItem",
	SalesInquiryItemCategory:      "sap_sales_inquiry_item_data.SalesInquiryItemCategory",
	SalesInquiryItemText:          "sap_sales_inquiry_item_data.SalesInquiryItemText",
	PurchaseOrderByCustomer:       "sap_sales_inquiry_item_data.PurchaseOrderByCustomer",
	Material:                      "sap_sales_inquiry_item_data.Material",
	MaterialByCustomer:            "sap_sales_inquiry_item_data.MaterialByCustomer",
	RequestedQuantity:             "sap_sales_inquiry_item_data.RequestedQuantity",
	RequestedQuantityUnit:         "sap_sales_inquiry_item_data.RequestedQuantityUnit",
	ItemOrderProbabilityInPercent: "sap_sales_inquiry_item_data.ItemOrderProbabilityInPercent",
	ItemGrossWeight:               "sap_sales_inquiry_item_data.ItemGrossWeight",
	ItemNetWeight:                 "sap_sales_inquiry_item_data.ItemNetWeight",
	ItemWeightUnit:                "sap_sales_inquiry_item_data.ItemWeightUnit",
	ItemVolume:                    "sap_sales_inquiry_item_data.ItemVolume",
	ItemVolumeUnit:                "sap_sales_inquiry_item_data.ItemVolumeUnit",
	TransactionCurrency:           "sap_sales_inquiry_item_data.TransactionCurrency",
	NetAmount:                     "sap_sales_inquiry_item_data.NetAmount",
	MaterialGroup:                 "sap_sales_inquiry_item_data.MaterialGroup",
	Batch:                         "sap_sales_inquiry_item_data.Batch",
	IncotermsClassification:       "sap_sales_inquiry_item_data.IncotermsClassification",
	CustomerPaymentTerms:          "sap_sales_inquiry_item_data.CustomerPaymentTerms",
	SalesDocumentRjcnReason:       "sap_sales_inquiry_item_data.SalesDocumentRjcnReason",
	WBSElement:                    "sap_sales_inquiry_item_data.WBSElement",
	SDProcessStatus:               "sap_sales_inquiry_item_data.SDProcessStatus",
}

// Generated where

var SapSalesInquiryItemDatumWhere = struct {
	SalesInquiry                  whereHelperstring
	SalesInquiryItem              whereHelperstring
	SalesInquiryItemCategory      whereHelpernull_String
	SalesInquiryItemText          whereHelpernull_String
	PurchaseOrderByCustomer       whereHelpernull_String
	Material                      whereHelpernull_String
	MaterialByCustomer            whereHelpernull_String
	RequestedQuantity             whereHelpernull_String
	RequestedQuantityUnit         whereHelpernull_String
	ItemOrderProbabilityInPercent whereHelpernull_String
	ItemGrossWeight               whereHelpernull_String
	ItemNetWeight                 whereHelpernull_String
	ItemWeightUnit                whereHelpernull_String
	ItemVolume                    whereHelpernull_String
	ItemVolumeUnit                whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	NetAmount                     whereHelpernull_String
	MaterialGroup                 whereHelpernull_String
	Batch                         whereHelpernull_String
	IncotermsClassification       whereHelpernull_String
	CustomerPaymentTerms          whereHelpernull_String
	SalesDocumentRjcnReason       whereHelpernull_String
	WBSElement                    whereHelpernull_String
	SDProcessStatus               whereHelpernull_String
}{
	SalesInquiry:                  whereHelperstring{field: "`sap_sales_inquiry_item_data`.`SalesInquiry`"},
	SalesInquiryItem:              whereHelperstring{field: "`sap_sales_inquiry_item_data`.`SalesInquiryItem`"},
	SalesInquiryItemCategory:      whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`SalesInquiryItemCategory`"},
	SalesInquiryItemText:          whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`SalesInquiryItemText`"},
	PurchaseOrderByCustomer:       whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`PurchaseOrderByCustomer`"},
	Material:                      whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`Material`"},
	MaterialByCustomer:            whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`MaterialByCustomer`"},
	RequestedQuantity:             whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`RequestedQuantity`"},
	RequestedQuantityUnit:         whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`RequestedQuantityUnit`"},
	ItemOrderProbabilityInPercent: whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`ItemOrderProbabilityInPercent`"},
	ItemGrossWeight:               whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                 whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`ItemWeightUnit`"},
	ItemVolume:                    whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`ItemVolume`"},
	ItemVolumeUnit:                whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`ItemVolumeUnit`"},
	TransactionCurrency:           whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`TransactionCurrency`"},
	NetAmount:                     whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`NetAmount`"},
	MaterialGroup:                 whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`MaterialGroup`"},
	Batch:                         whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`Batch`"},
	IncotermsClassification:       whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:          whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`CustomerPaymentTerms`"},
	SalesDocumentRjcnReason:       whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`SalesDocumentRjcnReason`"},
	WBSElement:                    whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`WBSElement`"},
	SDProcessStatus:               whereHelpernull_String{field: "`sap_sales_inquiry_item_data`.`SDProcessStatus`"},
}

// SapSalesInquiryItemDatumRels is where relationship names are stored.
var SapSalesInquiryItemDatumRels = struct {
	SalesInquirySapSalesInquiryHeaderDatum            string
	SalesInquirySapSalesInquiryItemPricingElementData string
}{
	SalesInquirySapSalesInquiryHeaderDatum:            "SalesInquirySapSalesInquiryHeaderDatum",
	SalesInquirySapSalesInquiryItemPricingElementData: "SalesInquirySapSalesInquiryItemPricingElementData",
}

// sapSalesInquiryItemDatumR is where relationships are stored.
type sapSalesInquiryItemDatumR struct {
	SalesInquirySapSalesInquiryHeaderDatum            *SapSalesInquiryHeaderDatum                 `boil:"SalesInquirySapSalesInquiryHeaderDatum" json:"SalesInquirySapSalesInquiryHeaderDatum" toml:"SalesInquirySapSalesInquiryHeaderDatum" yaml:"SalesInquirySapSalesInquiryHeaderDatum"`
	SalesInquirySapSalesInquiryItemPricingElementData SapSalesInquiryItemPricingElementDatumSlice `boil:"SalesInquirySapSalesInquiryItemPricingElementData" json:"SalesInquirySapSalesInquiryItemPricingElementData" toml:"SalesInquirySapSalesInquiryItemPricingElementData" yaml:"SalesInquirySapSalesInquiryItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesInquiryItemDatumR) NewStruct() *sapSalesInquiryItemDatumR {
	return &sapSalesInquiryItemDatumR{}
}

// sapSalesInquiryItemDatumL is where Load methods for each relationship are stored.
type sapSalesInquiryItemDatumL struct{}

var (
	sapSalesInquiryItemDatumAllColumns            = []string{"SalesInquiry", "SalesInquiryItem", "SalesInquiryItemCategory", "SalesInquiryItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "RequestedQuantity", "RequestedQuantityUnit", "ItemOrderProbabilityInPercent", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "Batch", "IncotermsClassification", "CustomerPaymentTerms", "SalesDocumentRjcnReason", "WBSElement", "SDProcessStatus"}
	sapSalesInquiryItemDatumColumnsWithoutDefault = []string{"SalesInquiry", "SalesInquiryItem", "SalesInquiryItemCategory", "SalesInquiryItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "RequestedQuantity", "RequestedQuantityUnit", "ItemOrderProbabilityInPercent", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "Batch", "IncotermsClassification", "CustomerPaymentTerms", "SalesDocumentRjcnReason", "WBSElement", "SDProcessStatus"}
	sapSalesInquiryItemDatumColumnsWithDefault    = []string{}
	sapSalesInquiryItemDatumPrimaryKeyColumns     = []string{"SalesInquiry", "SalesInquiryItem"}
	sapSalesInquiryItemDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesInquiryItemDatumSlice is an alias for a slice of pointers to SapSalesInquiryItemDatum.
	// This should almost always be used instead of []SapSalesInquiryItemDatum.
	SapSalesInquiryItemDatumSlice []*SapSalesInquiryItemDatum
	// SapSalesInquiryItemDatumHook is the signature for custom SapSalesInquiryItemDatum hook methods
	SapSalesInquiryItemDatumHook func(context.Context, boil.ContextExecutor, *SapSalesInquiryItemDatum) error

	sapSalesInquiryItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesInquiryItemDatumType                 = reflect.TypeOf(&SapSalesInquiryItemDatum{})
	sapSalesInquiryItemDatumMapping              = queries.MakeStructMapping(sapSalesInquiryItemDatumType)
	sapSalesInquiryItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, sapSalesInquiryItemDatumPrimaryKeyColumns)
	sapSalesInquiryItemDatumInsertCacheMut       sync.RWMutex
	sapSalesInquiryItemDatumInsertCache          = make(map[string]insertCache)
	sapSalesInquiryItemDatumUpdateCacheMut       sync.RWMutex
	sapSalesInquiryItemDatumUpdateCache          = make(map[string]updateCache)
	sapSalesInquiryItemDatumUpsertCacheMut       sync.RWMutex
	sapSalesInquiryItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesInquiryItemDatumAfterSelectHooks []SapSalesInquiryItemDatumHook

var sapSalesInquiryItemDatumBeforeInsertHooks []SapSalesInquiryItemDatumHook
var sapSalesInquiryItemDatumAfterInsertHooks []SapSalesInquiryItemDatumHook

var sapSalesInquiryItemDatumBeforeUpdateHooks []SapSalesInquiryItemDatumHook
var sapSalesInquiryItemDatumAfterUpdateHooks []SapSalesInquiryItemDatumHook

var sapSalesInquiryItemDatumBeforeDeleteHooks []SapSalesInquiryItemDatumHook
var sapSalesInquiryItemDatumAfterDeleteHooks []SapSalesInquiryItemDatumHook

var sapSalesInquiryItemDatumBeforeUpsertHooks []SapSalesInquiryItemDatumHook
var sapSalesInquiryItemDatumAfterUpsertHooks []SapSalesInquiryItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesInquiryItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesInquiryItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesInquiryItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesInquiryItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesInquiryItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesInquiryItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesInquiryItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesInquiryItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesInquiryItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesInquiryItemDatumHook registers your hook function for all future operations.
func AddSapSalesInquiryItemDatumHook(hookPoint boil.HookPoint, sapSalesInquiryItemDatumHook SapSalesInquiryItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesInquiryItemDatumAfterSelectHooks = append(sapSalesInquiryItemDatumAfterSelectHooks, sapSalesInquiryItemDatumHook)
	case boil.BeforeInsertHook:
		sapSalesInquiryItemDatumBeforeInsertHooks = append(sapSalesInquiryItemDatumBeforeInsertHooks, sapSalesInquiryItemDatumHook)
	case boil.AfterInsertHook:
		sapSalesInquiryItemDatumAfterInsertHooks = append(sapSalesInquiryItemDatumAfterInsertHooks, sapSalesInquiryItemDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesInquiryItemDatumBeforeUpdateHooks = append(sapSalesInquiryItemDatumBeforeUpdateHooks, sapSalesInquiryItemDatumHook)
	case boil.AfterUpdateHook:
		sapSalesInquiryItemDatumAfterUpdateHooks = append(sapSalesInquiryItemDatumAfterUpdateHooks, sapSalesInquiryItemDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesInquiryItemDatumBeforeDeleteHooks = append(sapSalesInquiryItemDatumBeforeDeleteHooks, sapSalesInquiryItemDatumHook)
	case boil.AfterDeleteHook:
		sapSalesInquiryItemDatumAfterDeleteHooks = append(sapSalesInquiryItemDatumAfterDeleteHooks, sapSalesInquiryItemDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesInquiryItemDatumBeforeUpsertHooks = append(sapSalesInquiryItemDatumBeforeUpsertHooks, sapSalesInquiryItemDatumHook)
	case boil.AfterUpsertHook:
		sapSalesInquiryItemDatumAfterUpsertHooks = append(sapSalesInquiryItemDatumAfterUpsertHooks, sapSalesInquiryItemDatumHook)
	}
}

// One returns a single sapSalesInquiryItemDatum record from the query.
func (q sapSalesInquiryItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesInquiryItemDatum, error) {
	o := &SapSalesInquiryItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_inquiry_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesInquiryItemDatum records from the query.
func (q sapSalesInquiryItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesInquiryItemDatumSlice, error) {
	var o []*SapSalesInquiryItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesInquiryItemDatum slice")
	}

	if len(sapSalesInquiryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesInquiryItemDatum records in the query.
func (q sapSalesInquiryItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_inquiry_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesInquiryItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_inquiry_item_data exists")
	}

	return count > 0, nil
}

// SalesInquirySapSalesInquiryHeaderDatum pointed to by the foreign key.
func (o *SapSalesInquiryItemDatum) SalesInquirySapSalesInquiryHeaderDatum(mods ...qm.QueryMod) sapSalesInquiryHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesInquiry` = ?", o.SalesInquiry),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesInquiryHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_inquiry_header_data`")

	return query
}

// SalesInquirySapSalesInquiryItemPricingElementData retrieves all the sap_sales_inquiry_item_pricing_element_datum's SapSalesInquiryItemPricingElementData with an executor via SalesInquiry column.
func (o *SapSalesInquiryItemDatum) SalesInquirySapSalesInquiryItemPricingElementData(mods ...qm.QueryMod) sapSalesInquiryItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_inquiry_item_pricing_element_data`.`SalesInquiry`=?", o.SalesInquiry),
	)

	query := SapSalesInquiryItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_inquiry_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_inquiry_item_pricing_element_data`.*"})
	}

	return query
}

// LoadSalesInquirySapSalesInquiryHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesInquiryItemDatumL) LoadSalesInquirySapSalesInquiryHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesInquiryItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesInquiryItemDatum
	var object *SapSalesInquiryItemDatum

	if singular {
		object = maybeSapSalesInquiryItemDatum.(*SapSalesInquiryItemDatum)
	} else {
		slice = *maybeSapSalesInquiryItemDatum.(*[]*SapSalesInquiryItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesInquiryItemDatumR{}
		}
		args = append(args, object.SalesInquiry)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesInquiryItemDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesInquiry {
					continue Outer
				}
			}

			args = append(args, obj.SalesInquiry)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_inquiry_header_data`),
		qm.WhereIn(`sap_sales_inquiry_header_data.SalesInquiry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesInquiryHeaderDatum")
	}

	var resultSlice []*SapSalesInquiryHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesInquiryHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_inquiry_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_inquiry_header_data")
	}

	if len(sapSalesInquiryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesInquirySapSalesInquiryHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesInquiryHeaderDatumR{}
		}
		foreign.R.SalesInquirySapSalesInquiryItemData = append(foreign.R.SalesInquirySapSalesInquiryItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesInquiry == foreign.SalesInquiry {
				local.R.SalesInquirySapSalesInquiryHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesInquiryHeaderDatumR{}
				}
				foreign.R.SalesInquirySapSalesInquiryItemData = append(foreign.R.SalesInquirySapSalesInquiryItemData, local)
				break
			}
		}
	}

	return nil
}

// LoadSalesInquirySapSalesInquiryItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesInquiryItemDatumL) LoadSalesInquirySapSalesInquiryItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesInquiryItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesInquiryItemDatum
	var object *SapSalesInquiryItemDatum

	if singular {
		object = maybeSapSalesInquiryItemDatum.(*SapSalesInquiryItemDatum)
	} else {
		slice = *maybeSapSalesInquiryItemDatum.(*[]*SapSalesInquiryItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesInquiryItemDatumR{}
		}
		args = append(args, object.SalesInquiry)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesInquiryItemDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesInquiry {
					continue Outer
				}
			}

			args = append(args, obj.SalesInquiry)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_inquiry_item_pricing_element_data`),
		qm.WhereIn(`sap_sales_inquiry_item_pricing_element_data.SalesInquiry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_inquiry_item_pricing_element_data")
	}

	var resultSlice []*SapSalesInquiryItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_inquiry_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_inquiry_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_inquiry_item_pricing_element_data")
	}

	if len(sapSalesInquiryItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesInquirySapSalesInquiryItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesInquiryItemPricingElementDatumR{}
			}
			foreign.R.SalesInquirySapSalesInquiryItemDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesInquiry == foreign.SalesInquiry {
				local.R.SalesInquirySapSalesInquiryItemPricingElementData = append(local.R.SalesInquirySapSalesInquiryItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesInquiryItemPricingElementDatumR{}
				}
				foreign.R.SalesInquirySapSalesInquiryItemDatum = local
				break
			}
		}
	}

	return nil
}

// SetSalesInquirySapSalesInquiryHeaderDatum of the sapSalesInquiryItemDatum to the related item.
// Sets o.R.SalesInquirySapSalesInquiryHeaderDatum to related.
// Adds o to related.R.SalesInquirySapSalesInquiryItemData.
func (o *SapSalesInquiryItemDatum) SetSalesInquirySapSalesInquiryHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesInquiryHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_inquiry_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesInquiry"}),
		strmangle.WhereClause("`", "`", 0, sapSalesInquiryItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesInquiry, o.SalesInquiry, o.SalesInquiryItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesInquiry = related.SalesInquiry
	if o.R == nil {
		o.R = &sapSalesInquiryItemDatumR{
			SalesInquirySapSalesInquiryHeaderDatum: related,
		}
	} else {
		o.R.SalesInquirySapSalesInquiryHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesInquiryHeaderDatumR{
			SalesInquirySapSalesInquiryItemData: SapSalesInquiryItemDatumSlice{o},
		}
	} else {
		related.R.SalesInquirySapSalesInquiryItemData = append(related.R.SalesInquirySapSalesInquiryItemData, o)
	}

	return nil
}

// AddSalesInquirySapSalesInquiryItemPricingElementData adds the given related objects to the existing relationships
// of the sap_sales_inquiry_item_datum, optionally inserting them as new records.
// Appends related to o.R.SalesInquirySapSalesInquiryItemPricingElementData.
// Sets related.R.SalesInquirySapSalesInquiryItemDatum appropriately.
func (o *SapSalesInquiryItemDatum) AddSalesInquirySapSalesInquiryItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesInquiryItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesInquiry = o.SalesInquiry
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_inquiry_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesInquiry"}),
				strmangle.WhereClause("`", "`", 0, sapSalesInquiryItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesInquiry, rel.SalesInquiry, rel.SalesInquiryItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesInquiry = o.SalesInquiry
		}
	}

	if o.R == nil {
		o.R = &sapSalesInquiryItemDatumR{
			SalesInquirySapSalesInquiryItemPricingElementData: related,
		}
	} else {
		o.R.SalesInquirySapSalesInquiryItemPricingElementData = append(o.R.SalesInquirySapSalesInquiryItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesInquiryItemPricingElementDatumR{
				SalesInquirySapSalesInquiryItemDatum: o,
			}
		} else {
			rel.R.SalesInquirySapSalesInquiryItemDatum = o
		}
	}
	return nil
}

// SapSalesInquiryItemData retrieves all the records using an executor.
func SapSalesInquiryItemData(mods ...qm.QueryMod) sapSalesInquiryItemDatumQuery {
	mods = append(mods, qm.From("`sap_sales_inquiry_item_data`"))
	return sapSalesInquiryItemDatumQuery{NewQuery(mods...)}
}

// FindSapSalesInquiryItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesInquiryItemDatum(ctx context.Context, exec boil.ContextExecutor, salesInquiry string, salesInquiryItem string, selectCols ...string) (*SapSalesInquiryItemDatum, error) {
	sapSalesInquiryItemDatumObj := &SapSalesInquiryItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_inquiry_item_data` where `SalesInquiry`=? AND `SalesInquiryItem`=?", sel,
	)

	q := queries.Raw(query, salesInquiry, salesInquiryItem)

	err := q.Bind(ctx, exec, sapSalesInquiryItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_inquiry_item_data")
	}

	if err = sapSalesInquiryItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesInquiryItemDatumObj, err
	}

	return sapSalesInquiryItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesInquiryItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_inquiry_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesInquiryItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesInquiryItemDatumInsertCacheMut.RLock()
	cache, cached := sapSalesInquiryItemDatumInsertCache[key]
	sapSalesInquiryItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesInquiryItemDatumAllColumns,
			sapSalesInquiryItemDatumColumnsWithDefault,
			sapSalesInquiryItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_inquiry_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_inquiry_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_inquiry_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesInquiryItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_inquiry_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesInquiry,
		o.SalesInquiryItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_inquiry_item_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesInquiryItemDatumInsertCacheMut.Lock()
		sapSalesInquiryItemDatumInsertCache[key] = cache
		sapSalesInquiryItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesInquiryItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesInquiryItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesInquiryItemDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesInquiryItemDatumUpdateCache[key]
	sapSalesInquiryItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesInquiryItemDatumAllColumns,
			sapSalesInquiryItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_inquiry_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_inquiry_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesInquiryItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, append(wl, sapSalesInquiryItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_inquiry_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_inquiry_item_data")
	}

	if !cached {
		sapSalesInquiryItemDatumUpdateCacheMut.Lock()
		sapSalesInquiryItemDatumUpdateCache[key] = cache
		sapSalesInquiryItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesInquiryItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_inquiry_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_inquiry_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesInquiryItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesInquiryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_inquiry_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesInquiryItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesInquiryItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesInquiryItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesInquiryItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesInquiryItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_inquiry_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesInquiryItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesInquiryItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesInquiryItemDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesInquiryItemDatumUpsertCache[key]
	sapSalesInquiryItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesInquiryItemDatumAllColumns,
			sapSalesInquiryItemDatumColumnsWithDefault,
			sapSalesInquiryItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesInquiryItemDatumAllColumns,
			sapSalesInquiryItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_inquiry_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_inquiry_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_inquiry_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_inquiry_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesInquiryItemDatumType, sapSalesInquiryItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_inquiry_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_inquiry_item_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesInquiryItemDatumUpsertCacheMut.Lock()
		sapSalesInquiryItemDatumUpsertCache[key] = cache
		sapSalesInquiryItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesInquiryItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesInquiryItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesInquiryItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesInquiryItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_inquiry_item_data` WHERE `SalesInquiry`=? AND `SalesInquiryItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_inquiry_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_inquiry_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesInquiryItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesInquiryItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_inquiry_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_inquiry_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesInquiryItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesInquiryItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesInquiryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_inquiry_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesInquiryItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesInquiryItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_inquiry_item_data")
	}

	if len(sapSalesInquiryItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesInquiryItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesInquiryItemDatum(ctx, exec, o.SalesInquiry, o.SalesInquiryItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesInquiryItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesInquiryItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesInquiryItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_inquiry_item_data`.* FROM `sap_sales_inquiry_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesInquiryItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesInquiryItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesInquiryItemDatumExists checks if the SapSalesInquiryItemDatum row exists.
func SapSalesInquiryItemDatumExists(ctx context.Context, exec boil.ContextExecutor, salesInquiry string, salesInquiryItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_inquiry_item_data` where `SalesInquiry`=? AND `SalesInquiryItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesInquiry, salesInquiryItem)
	}
	row := exec.QueryRowContext(ctx, sql, salesInquiry, salesInquiryItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_inquiry_item_data exists")
	}

	return exists, nil
}
