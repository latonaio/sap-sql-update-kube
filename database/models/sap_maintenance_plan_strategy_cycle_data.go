// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenancePlanStrategyCycleDatum is an object representing the database table.
type SapMaintenancePlanStrategyCycleDatum struct {
	MaintenancePlan                string      `boil:"MaintenancePlan" json:"MaintenancePlan" toml:"MaintenancePlan" yaml:"MaintenancePlan"`
	MaintenancePlanCycle           string      `boil:"MaintenancePlanCycle" json:"MaintenancePlanCycle" toml:"MaintenancePlanCycle" yaml:"MaintenancePlanCycle"`
	MaintenanceStrategy            null.String `boil:"MaintenanceStrategy" json:"MaintenanceStrategy,omitempty" toml:"MaintenanceStrategy" yaml:"MaintenanceStrategy,omitempty"`
	MaintPlanCycRcrrcIntervalQty   null.String `boil:"MaintPlanCycRcrrcIntervalQty" json:"MaintPlanCycRcrrcIntervalQty,omitempty" toml:"MaintPlanCycRcrrcIntervalQty" yaml:"MaintPlanCycRcrrcIntervalQty,omitempty"`
	MaintPlanCycRcrrcIntervalUnit  null.String `boil:"MaintPlanCycRcrrcIntervalUnit" json:"MaintPlanCycRcrrcIntervalUnit,omitempty" toml:"MaintPlanCycRcrrcIntervalUnit" yaml:"MaintPlanCycRcrrcIntervalUnit,omitempty"`
	MaintPlanCycleDesc             null.String `boil:"MaintPlanCycleDesc" json:"MaintPlanCycleDesc,omitempty" toml:"MaintPlanCycleDesc" yaml:"MaintPlanCycleDesc,omitempty"`
	MaintPlanCycleStartOffsetValue null.String `boil:"MaintPlanCycleStartOffsetValue" json:"MaintPlanCycleStartOffsetValue,omitempty" toml:"MaintPlanCycleStartOffsetValue" yaml:"MaintPlanCycleStartOffsetValue,omitempty"`

	R *sapMaintenancePlanStrategyCycleDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenancePlanStrategyCycleDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenancePlanStrategyCycleDatumColumns = struct {
	MaintenancePlan                string
	MaintenancePlanCycle           string
	MaintenanceStrategy            string
	MaintPlanCycRcrrcIntervalQty   string
	MaintPlanCycRcrrcIntervalUnit  string
	MaintPlanCycleDesc             string
	MaintPlanCycleStartOffsetValue string
}{
	MaintenancePlan:                "MaintenancePlan",
	MaintenancePlanCycle:           "MaintenancePlanCycle",
	MaintenanceStrategy:            "MaintenanceStrategy",
	MaintPlanCycRcrrcIntervalQty:   "MaintPlanCycRcrrcIntervalQty",
	MaintPlanCycRcrrcIntervalUnit:  "MaintPlanCycRcrrcIntervalUnit",
	MaintPlanCycleDesc:             "MaintPlanCycleDesc",
	MaintPlanCycleStartOffsetValue: "MaintPlanCycleStartOffsetValue",
}

var SapMaintenancePlanStrategyCycleDatumTableColumns = struct {
	MaintenancePlan                string
	MaintenancePlanCycle           string
	MaintenanceStrategy            string
	MaintPlanCycRcrrcIntervalQty   string
	MaintPlanCycRcrrcIntervalUnit  string
	MaintPlanCycleDesc             string
	MaintPlanCycleStartOffsetValue string
}{
	MaintenancePlan:                "sap_maintenance_plan_strategy_cycle_data.MaintenancePlan",
	MaintenancePlanCycle:           "sap_maintenance_plan_strategy_cycle_data.MaintenancePlanCycle",
	MaintenanceStrategy:            "sap_maintenance_plan_strategy_cycle_data.MaintenanceStrategy",
	MaintPlanCycRcrrcIntervalQty:   "sap_maintenance_plan_strategy_cycle_data.MaintPlanCycRcrrcIntervalQty",
	MaintPlanCycRcrrcIntervalUnit:  "sap_maintenance_plan_strategy_cycle_data.MaintPlanCycRcrrcIntervalUnit",
	MaintPlanCycleDesc:             "sap_maintenance_plan_strategy_cycle_data.MaintPlanCycleDesc",
	MaintPlanCycleStartOffsetValue: "sap_maintenance_plan_strategy_cycle_data.MaintPlanCycleStartOffsetValue",
}

// Generated where

var SapMaintenancePlanStrategyCycleDatumWhere = struct {
	MaintenancePlan                whereHelperstring
	MaintenancePlanCycle           whereHelperstring
	MaintenanceStrategy            whereHelpernull_String
	MaintPlanCycRcrrcIntervalQty   whereHelpernull_String
	MaintPlanCycRcrrcIntervalUnit  whereHelpernull_String
	MaintPlanCycleDesc             whereHelpernull_String
	MaintPlanCycleStartOffsetValue whereHelpernull_String
}{
	MaintenancePlan:                whereHelperstring{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintenancePlan`"},
	MaintenancePlanCycle:           whereHelperstring{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintenancePlanCycle`"},
	MaintenanceStrategy:            whereHelpernull_String{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintenanceStrategy`"},
	MaintPlanCycRcrrcIntervalQty:   whereHelpernull_String{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintPlanCycRcrrcIntervalQty`"},
	MaintPlanCycRcrrcIntervalUnit:  whereHelpernull_String{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintPlanCycRcrrcIntervalUnit`"},
	MaintPlanCycleDesc:             whereHelpernull_String{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintPlanCycleDesc`"},
	MaintPlanCycleStartOffsetValue: whereHelpernull_String{field: "`sap_maintenance_plan_strategy_cycle_data`.`MaintPlanCycleStartOffsetValue`"},
}

// SapMaintenancePlanStrategyCycleDatumRels is where relationship names are stored.
var SapMaintenancePlanStrategyCycleDatumRels = struct {
	MaintenancePlanSapMaintenancePlanHeaderDatum string
}{
	MaintenancePlanSapMaintenancePlanHeaderDatum: "MaintenancePlanSapMaintenancePlanHeaderDatum",
}

// sapMaintenancePlanStrategyCycleDatumR is where relationships are stored.
type sapMaintenancePlanStrategyCycleDatumR struct {
	MaintenancePlanSapMaintenancePlanHeaderDatum *SapMaintenancePlanHeaderDatum `boil:"MaintenancePlanSapMaintenancePlanHeaderDatum" json:"MaintenancePlanSapMaintenancePlanHeaderDatum" toml:"MaintenancePlanSapMaintenancePlanHeaderDatum" yaml:"MaintenancePlanSapMaintenancePlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenancePlanStrategyCycleDatumR) NewStruct() *sapMaintenancePlanStrategyCycleDatumR {
	return &sapMaintenancePlanStrategyCycleDatumR{}
}

// sapMaintenancePlanStrategyCycleDatumL is where Load methods for each relationship are stored.
type sapMaintenancePlanStrategyCycleDatumL struct{}

var (
	sapMaintenancePlanStrategyCycleDatumAllColumns            = []string{"MaintenancePlan", "MaintenancePlanCycle", "MaintenanceStrategy", "MaintPlanCycRcrrcIntervalQty", "MaintPlanCycRcrrcIntervalUnit", "MaintPlanCycleDesc", "MaintPlanCycleStartOffsetValue"}
	sapMaintenancePlanStrategyCycleDatumColumnsWithoutDefault = []string{"MaintenancePlan", "MaintenancePlanCycle", "MaintenanceStrategy", "MaintPlanCycRcrrcIntervalQty", "MaintPlanCycRcrrcIntervalUnit", "MaintPlanCycleDesc", "MaintPlanCycleStartOffsetValue"}
	sapMaintenancePlanStrategyCycleDatumColumnsWithDefault    = []string{}
	sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns     = []string{"MaintenancePlan", "MaintenancePlanCycle"}
)

type (
	// SapMaintenancePlanStrategyCycleDatumSlice is an alias for a slice of pointers to SapMaintenancePlanStrategyCycleDatum.
	// This should almost always be used instead of []SapMaintenancePlanStrategyCycleDatum.
	SapMaintenancePlanStrategyCycleDatumSlice []*SapMaintenancePlanStrategyCycleDatum
	// SapMaintenancePlanStrategyCycleDatumHook is the signature for custom SapMaintenancePlanStrategyCycleDatum hook methods
	SapMaintenancePlanStrategyCycleDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenancePlanStrategyCycleDatum) error

	sapMaintenancePlanStrategyCycleDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenancePlanStrategyCycleDatumType                 = reflect.TypeOf(&SapMaintenancePlanStrategyCycleDatum{})
	sapMaintenancePlanStrategyCycleDatumMapping              = queries.MakeStructMapping(sapMaintenancePlanStrategyCycleDatumType)
	sapMaintenancePlanStrategyCycleDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns)
	sapMaintenancePlanStrategyCycleDatumInsertCacheMut       sync.RWMutex
	sapMaintenancePlanStrategyCycleDatumInsertCache          = make(map[string]insertCache)
	sapMaintenancePlanStrategyCycleDatumUpdateCacheMut       sync.RWMutex
	sapMaintenancePlanStrategyCycleDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenancePlanStrategyCycleDatumUpsertCacheMut       sync.RWMutex
	sapMaintenancePlanStrategyCycleDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenancePlanStrategyCycleDatumBeforeInsertHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumBeforeUpdateHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumBeforeDeleteHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumBeforeUpsertHooks []SapMaintenancePlanStrategyCycleDatumHook

var sapMaintenancePlanStrategyCycleDatumAfterInsertHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumAfterSelectHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumAfterUpdateHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumAfterDeleteHooks []SapMaintenancePlanStrategyCycleDatumHook
var sapMaintenancePlanStrategyCycleDatumAfterUpsertHooks []SapMaintenancePlanStrategyCycleDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenancePlanStrategyCycleDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenancePlanStrategyCycleDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenancePlanStrategyCycleDatumHook registers your hook function for all future operations.
func AddSapMaintenancePlanStrategyCycleDatumHook(hookPoint boil.HookPoint, sapMaintenancePlanStrategyCycleDatumHook SapMaintenancePlanStrategyCycleDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapMaintenancePlanStrategyCycleDatumBeforeInsertHooks = append(sapMaintenancePlanStrategyCycleDatumBeforeInsertHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenancePlanStrategyCycleDatumBeforeUpdateHooks = append(sapMaintenancePlanStrategyCycleDatumBeforeUpdateHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenancePlanStrategyCycleDatumBeforeDeleteHooks = append(sapMaintenancePlanStrategyCycleDatumBeforeDeleteHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenancePlanStrategyCycleDatumBeforeUpsertHooks = append(sapMaintenancePlanStrategyCycleDatumBeforeUpsertHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.AfterInsertHook:
		sapMaintenancePlanStrategyCycleDatumAfterInsertHooks = append(sapMaintenancePlanStrategyCycleDatumAfterInsertHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.AfterSelectHook:
		sapMaintenancePlanStrategyCycleDatumAfterSelectHooks = append(sapMaintenancePlanStrategyCycleDatumAfterSelectHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenancePlanStrategyCycleDatumAfterUpdateHooks = append(sapMaintenancePlanStrategyCycleDatumAfterUpdateHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenancePlanStrategyCycleDatumAfterDeleteHooks = append(sapMaintenancePlanStrategyCycleDatumAfterDeleteHooks, sapMaintenancePlanStrategyCycleDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenancePlanStrategyCycleDatumAfterUpsertHooks = append(sapMaintenancePlanStrategyCycleDatumAfterUpsertHooks, sapMaintenancePlanStrategyCycleDatumHook)
	}
}

// One returns a single sapMaintenancePlanStrategyCycleDatum record from the query.
func (q sapMaintenancePlanStrategyCycleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenancePlanStrategyCycleDatum, error) {
	o := &SapMaintenancePlanStrategyCycleDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_plan_strategy_cycle_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenancePlanStrategyCycleDatum records from the query.
func (q sapMaintenancePlanStrategyCycleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenancePlanStrategyCycleDatumSlice, error) {
	var o []*SapMaintenancePlanStrategyCycleDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenancePlanStrategyCycleDatum slice")
	}

	if len(sapMaintenancePlanStrategyCycleDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenancePlanStrategyCycleDatum records in the query.
func (q sapMaintenancePlanStrategyCycleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_plan_strategy_cycle_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenancePlanStrategyCycleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_plan_strategy_cycle_data exists")
	}

	return count > 0, nil
}

// MaintenancePlanSapMaintenancePlanHeaderDatum pointed to by the foreign key.
func (o *SapMaintenancePlanStrategyCycleDatum) MaintenancePlanSapMaintenancePlanHeaderDatum(mods ...qm.QueryMod) sapMaintenancePlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenancePlan` = ?", o.MaintenancePlan),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenancePlanHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_plan_header_data`")

	return query
}

// LoadMaintenancePlanSapMaintenancePlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenancePlanStrategyCycleDatumL) LoadMaintenancePlanSapMaintenancePlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenancePlanStrategyCycleDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenancePlanStrategyCycleDatum
	var object *SapMaintenancePlanStrategyCycleDatum

	if singular {
		object = maybeSapMaintenancePlanStrategyCycleDatum.(*SapMaintenancePlanStrategyCycleDatum)
	} else {
		slice = *maybeSapMaintenancePlanStrategyCycleDatum.(*[]*SapMaintenancePlanStrategyCycleDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenancePlanStrategyCycleDatumR{}
		}
		args = append(args, object.MaintenancePlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenancePlanStrategyCycleDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenancePlan {
					continue Outer
				}
			}

			args = append(args, obj.MaintenancePlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_plan_header_data`),
		qm.WhereIn(`sap_maintenance_plan_header_data.MaintenancePlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenancePlanHeaderDatum")
	}

	var resultSlice []*SapMaintenancePlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenancePlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_plan_header_data")
	}

	if len(sapMaintenancePlanStrategyCycleDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenancePlanSapMaintenancePlanHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenancePlanHeaderDatumR{}
		}
		foreign.R.MaintenancePlanSapMaintenancePlanStrategyCycleData = append(foreign.R.MaintenancePlanSapMaintenancePlanStrategyCycleData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenancePlan == foreign.MaintenancePlan {
				local.R.MaintenancePlanSapMaintenancePlanHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenancePlanHeaderDatumR{}
				}
				foreign.R.MaintenancePlanSapMaintenancePlanStrategyCycleData = append(foreign.R.MaintenancePlanSapMaintenancePlanStrategyCycleData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenancePlanSapMaintenancePlanHeaderDatum of the sapMaintenancePlanStrategyCycleDatum to the related item.
// Sets o.R.MaintenancePlanSapMaintenancePlanHeaderDatum to related.
// Adds o to related.R.MaintenancePlanSapMaintenancePlanStrategyCycleData.
func (o *SapMaintenancePlanStrategyCycleDatum) SetMaintenancePlanSapMaintenancePlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenancePlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_plan_strategy_cycle_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenancePlan"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenancePlan, o.MaintenancePlan, o.MaintenancePlanCycle}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenancePlan = related.MaintenancePlan
	if o.R == nil {
		o.R = &sapMaintenancePlanStrategyCycleDatumR{
			MaintenancePlanSapMaintenancePlanHeaderDatum: related,
		}
	} else {
		o.R.MaintenancePlanSapMaintenancePlanHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenancePlanHeaderDatumR{
			MaintenancePlanSapMaintenancePlanStrategyCycleData: SapMaintenancePlanStrategyCycleDatumSlice{o},
		}
	} else {
		related.R.MaintenancePlanSapMaintenancePlanStrategyCycleData = append(related.R.MaintenancePlanSapMaintenancePlanStrategyCycleData, o)
	}

	return nil
}

// SapMaintenancePlanStrategyCycleData retrieves all the records using an executor.
func SapMaintenancePlanStrategyCycleData(mods ...qm.QueryMod) sapMaintenancePlanStrategyCycleDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_plan_strategy_cycle_data`"))
	return sapMaintenancePlanStrategyCycleDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenancePlanStrategyCycleDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenancePlanStrategyCycleDatum(ctx context.Context, exec boil.ContextExecutor, maintenancePlan string, maintenancePlanCycle string, selectCols ...string) (*SapMaintenancePlanStrategyCycleDatum, error) {
	sapMaintenancePlanStrategyCycleDatumObj := &SapMaintenancePlanStrategyCycleDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_plan_strategy_cycle_data` where `MaintenancePlan`=? AND `MaintenancePlanCycle`=?", sel,
	)

	q := queries.Raw(query, maintenancePlan, maintenancePlanCycle)

	err := q.Bind(ctx, exec, sapMaintenancePlanStrategyCycleDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_plan_strategy_cycle_data")
	}

	if err = sapMaintenancePlanStrategyCycleDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenancePlanStrategyCycleDatumObj, err
	}

	return sapMaintenancePlanStrategyCycleDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenancePlanStrategyCycleDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_plan_strategy_cycle_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenancePlanStrategyCycleDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenancePlanStrategyCycleDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenancePlanStrategyCycleDatumInsertCache[key]
	sapMaintenancePlanStrategyCycleDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenancePlanStrategyCycleDatumAllColumns,
			sapMaintenancePlanStrategyCycleDatumColumnsWithDefault,
			sapMaintenancePlanStrategyCycleDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_plan_strategy_cycle_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_plan_strategy_cycle_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_plan_strategy_cycle_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_plan_strategy_cycle_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenancePlan,
		o.MaintenancePlanCycle,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_plan_strategy_cycle_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenancePlanStrategyCycleDatumInsertCacheMut.Lock()
		sapMaintenancePlanStrategyCycleDatumInsertCache[key] = cache
		sapMaintenancePlanStrategyCycleDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenancePlanStrategyCycleDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenancePlanStrategyCycleDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenancePlanStrategyCycleDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenancePlanStrategyCycleDatumUpdateCache[key]
	sapMaintenancePlanStrategyCycleDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenancePlanStrategyCycleDatumAllColumns,
			sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_plan_strategy_cycle_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_plan_strategy_cycle_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, append(wl, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_plan_strategy_cycle_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_plan_strategy_cycle_data")
	}

	if !cached {
		sapMaintenancePlanStrategyCycleDatumUpdateCacheMut.Lock()
		sapMaintenancePlanStrategyCycleDatumUpdateCache[key] = cache
		sapMaintenancePlanStrategyCycleDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenancePlanStrategyCycleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_plan_strategy_cycle_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_plan_strategy_cycle_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenancePlanStrategyCycleDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanStrategyCycleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_plan_strategy_cycle_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenancePlanStrategyCycleDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenancePlanStrategyCycleDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenancePlanStrategyCycleDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenancePlanStrategyCycleDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_plan_strategy_cycle_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenancePlanStrategyCycleDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenancePlanStrategyCycleDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenancePlanStrategyCycleDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenancePlanStrategyCycleDatumUpsertCache[key]
	sapMaintenancePlanStrategyCycleDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenancePlanStrategyCycleDatumAllColumns,
			sapMaintenancePlanStrategyCycleDatumColumnsWithDefault,
			sapMaintenancePlanStrategyCycleDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapMaintenancePlanStrategyCycleDatumAllColumns,
			sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_plan_strategy_cycle_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_plan_strategy_cycle_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_plan_strategy_cycle_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_plan_strategy_cycle_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenancePlanStrategyCycleDatumType, sapMaintenancePlanStrategyCycleDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_plan_strategy_cycle_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_plan_strategy_cycle_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenancePlanStrategyCycleDatumUpsertCacheMut.Lock()
		sapMaintenancePlanStrategyCycleDatumUpsertCache[key] = cache
		sapMaintenancePlanStrategyCycleDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenancePlanStrategyCycleDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenancePlanStrategyCycleDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenancePlanStrategyCycleDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenancePlanStrategyCycleDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_plan_strategy_cycle_data` WHERE `MaintenancePlan`=? AND `MaintenancePlanCycle`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_plan_strategy_cycle_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_plan_strategy_cycle_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenancePlanStrategyCycleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenancePlanStrategyCycleDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_plan_strategy_cycle_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_plan_strategy_cycle_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenancePlanStrategyCycleDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenancePlanStrategyCycleDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanStrategyCycleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_plan_strategy_cycle_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenancePlanStrategyCycleDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_plan_strategy_cycle_data")
	}

	if len(sapMaintenancePlanStrategyCycleDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenancePlanStrategyCycleDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenancePlanStrategyCycleDatum(ctx, exec, o.MaintenancePlan, o.MaintenancePlanCycle)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenancePlanStrategyCycleDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenancePlanStrategyCycleDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenancePlanStrategyCycleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_plan_strategy_cycle_data`.* FROM `sap_maintenance_plan_strategy_cycle_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenancePlanStrategyCycleDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenancePlanStrategyCycleDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenancePlanStrategyCycleDatumExists checks if the SapMaintenancePlanStrategyCycleDatum row exists.
func SapMaintenancePlanStrategyCycleDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenancePlan string, maintenancePlanCycle string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_plan_strategy_cycle_data` where `MaintenancePlan`=? AND `MaintenancePlanCycle`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenancePlan, maintenancePlanCycle)
	}
	row := exec.QueryRowContext(ctx, sql, maintenancePlan, maintenancePlanCycle)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_plan_strategy_cycle_data exists")
	}

	return exists, nil
}
