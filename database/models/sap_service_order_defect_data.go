// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceOrderDefectDatum is an object representing the database table.
type SapServiceOrderDefectDatum struct {
	ServiceOrder                  string      `boil:"ServiceOrder" json:"ServiceOrder" toml:"ServiceOrder" yaml:"ServiceOrder"`
	SrvcDocTypeDefectCodeProfType string      `boil:"SrvcDocTypeDefectCodeProfType" json:"SrvcDocTypeDefectCodeProfType" toml:"SrvcDocTypeDefectCodeProfType" yaml:"SrvcDocTypeDefectCodeProfType"`
	ServiceDefectSequence         int         `boil:"ServiceDefectSequence" json:"ServiceDefectSequence" toml:"ServiceDefectSequence" yaml:"ServiceDefectSequence"`
	SrvcDocTypeDefectCodeProfile  null.String `boil:"SrvcDocTypeDefectCodeProfile" json:"SrvcDocTypeDefectCodeProfile,omitempty" toml:"SrvcDocTypeDefectCodeProfile" yaml:"SrvcDocTypeDefectCodeProfile,omitempty"`
	ServiceDefectCodeCatalog      null.String `boil:"ServiceDefectCodeCatalog" json:"ServiceDefectCodeCatalog,omitempty" toml:"ServiceDefectCodeCatalog" yaml:"ServiceDefectCodeCatalog,omitempty"`
	ServiceDefectCodeGroup        null.String `boil:"ServiceDefectCodeGroup" json:"ServiceDefectCodeGroup,omitempty" toml:"ServiceDefectCodeGroup" yaml:"ServiceDefectCodeGroup,omitempty"`
	ServiceDefectCode             null.String `boil:"ServiceDefectCode" json:"ServiceDefectCode,omitempty" toml:"ServiceDefectCode" yaml:"ServiceDefectCode,omitempty"`
	ServiceDefectSchema           null.String `boil:"ServiceDefectSchema" json:"ServiceDefectSchema,omitempty" toml:"ServiceDefectSchema" yaml:"ServiceDefectSchema,omitempty"`

	R *sapServiceOrderDefectDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceOrderDefectDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceOrderDefectDatumColumns = struct {
	ServiceOrder                  string
	SrvcDocTypeDefectCodeProfType string
	ServiceDefectSequence         string
	SrvcDocTypeDefectCodeProfile  string
	ServiceDefectCodeCatalog      string
	ServiceDefectCodeGroup        string
	ServiceDefectCode             string
	ServiceDefectSchema           string
}{
	ServiceOrder:                  "ServiceOrder",
	SrvcDocTypeDefectCodeProfType: "SrvcDocTypeDefectCodeProfType",
	ServiceDefectSequence:         "ServiceDefectSequence",
	SrvcDocTypeDefectCodeProfile:  "SrvcDocTypeDefectCodeProfile",
	ServiceDefectCodeCatalog:      "ServiceDefectCodeCatalog",
	ServiceDefectCodeGroup:        "ServiceDefectCodeGroup",
	ServiceDefectCode:             "ServiceDefectCode",
	ServiceDefectSchema:           "ServiceDefectSchema",
}

var SapServiceOrderDefectDatumTableColumns = struct {
	ServiceOrder                  string
	SrvcDocTypeDefectCodeProfType string
	ServiceDefectSequence         string
	SrvcDocTypeDefectCodeProfile  string
	ServiceDefectCodeCatalog      string
	ServiceDefectCodeGroup        string
	ServiceDefectCode             string
	ServiceDefectSchema           string
}{
	ServiceOrder:                  "sap_service_order_defect_data.ServiceOrder",
	SrvcDocTypeDefectCodeProfType: "sap_service_order_defect_data.SrvcDocTypeDefectCodeProfType",
	ServiceDefectSequence:         "sap_service_order_defect_data.ServiceDefectSequence",
	SrvcDocTypeDefectCodeProfile:  "sap_service_order_defect_data.SrvcDocTypeDefectCodeProfile",
	ServiceDefectCodeCatalog:      "sap_service_order_defect_data.ServiceDefectCodeCatalog",
	ServiceDefectCodeGroup:        "sap_service_order_defect_data.ServiceDefectCodeGroup",
	ServiceDefectCode:             "sap_service_order_defect_data.ServiceDefectCode",
	ServiceDefectSchema:           "sap_service_order_defect_data.ServiceDefectSchema",
}

// Generated where

var SapServiceOrderDefectDatumWhere = struct {
	ServiceOrder                  whereHelperstring
	SrvcDocTypeDefectCodeProfType whereHelperstring
	ServiceDefectSequence         whereHelperint
	SrvcDocTypeDefectCodeProfile  whereHelpernull_String
	ServiceDefectCodeCatalog      whereHelpernull_String
	ServiceDefectCodeGroup        whereHelpernull_String
	ServiceDefectCode             whereHelpernull_String
	ServiceDefectSchema           whereHelpernull_String
}{
	ServiceOrder:                  whereHelperstring{field: "`sap_service_order_defect_data`.`ServiceOrder`"},
	SrvcDocTypeDefectCodeProfType: whereHelperstring{field: "`sap_service_order_defect_data`.`SrvcDocTypeDefectCodeProfType`"},
	ServiceDefectSequence:         whereHelperint{field: "`sap_service_order_defect_data`.`ServiceDefectSequence`"},
	SrvcDocTypeDefectCodeProfile:  whereHelpernull_String{field: "`sap_service_order_defect_data`.`SrvcDocTypeDefectCodeProfile`"},
	ServiceDefectCodeCatalog:      whereHelpernull_String{field: "`sap_service_order_defect_data`.`ServiceDefectCodeCatalog`"},
	ServiceDefectCodeGroup:        whereHelpernull_String{field: "`sap_service_order_defect_data`.`ServiceDefectCodeGroup`"},
	ServiceDefectCode:             whereHelpernull_String{field: "`sap_service_order_defect_data`.`ServiceDefectCode`"},
	ServiceDefectSchema:           whereHelpernull_String{field: "`sap_service_order_defect_data`.`ServiceDefectSchema`"},
}

// SapServiceOrderDefectDatumRels is where relationship names are stored.
var SapServiceOrderDefectDatumRels = struct {
	ServiceOrderSapServiceOrderHeaderDatum string
}{
	ServiceOrderSapServiceOrderHeaderDatum: "ServiceOrderSapServiceOrderHeaderDatum",
}

// sapServiceOrderDefectDatumR is where relationships are stored.
type sapServiceOrderDefectDatumR struct {
	ServiceOrderSapServiceOrderHeaderDatum *SapServiceOrderHeaderDatum `boil:"ServiceOrderSapServiceOrderHeaderDatum" json:"ServiceOrderSapServiceOrderHeaderDatum" toml:"ServiceOrderSapServiceOrderHeaderDatum" yaml:"ServiceOrderSapServiceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapServiceOrderDefectDatumR) NewStruct() *sapServiceOrderDefectDatumR {
	return &sapServiceOrderDefectDatumR{}
}

// sapServiceOrderDefectDatumL is where Load methods for each relationship are stored.
type sapServiceOrderDefectDatumL struct{}

var (
	sapServiceOrderDefectDatumAllColumns            = []string{"ServiceOrder", "SrvcDocTypeDefectCodeProfType", "ServiceDefectSequence", "SrvcDocTypeDefectCodeProfile", "ServiceDefectCodeCatalog", "ServiceDefectCodeGroup", "ServiceDefectCode", "ServiceDefectSchema"}
	sapServiceOrderDefectDatumColumnsWithoutDefault = []string{"ServiceOrder", "SrvcDocTypeDefectCodeProfType", "ServiceDefectSequence", "SrvcDocTypeDefectCodeProfile", "ServiceDefectCodeCatalog", "ServiceDefectCodeGroup", "ServiceDefectCode", "ServiceDefectSchema"}
	sapServiceOrderDefectDatumColumnsWithDefault    = []string{}
	sapServiceOrderDefectDatumPrimaryKeyColumns     = []string{"ServiceOrder", "SrvcDocTypeDefectCodeProfType", "ServiceDefectSequence"}
	sapServiceOrderDefectDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceOrderDefectDatumSlice is an alias for a slice of pointers to SapServiceOrderDefectDatum.
	// This should almost always be used instead of []SapServiceOrderDefectDatum.
	SapServiceOrderDefectDatumSlice []*SapServiceOrderDefectDatum
	// SapServiceOrderDefectDatumHook is the signature for custom SapServiceOrderDefectDatum hook methods
	SapServiceOrderDefectDatumHook func(context.Context, boil.ContextExecutor, *SapServiceOrderDefectDatum) error

	sapServiceOrderDefectDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceOrderDefectDatumType                 = reflect.TypeOf(&SapServiceOrderDefectDatum{})
	sapServiceOrderDefectDatumMapping              = queries.MakeStructMapping(sapServiceOrderDefectDatumType)
	sapServiceOrderDefectDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, sapServiceOrderDefectDatumPrimaryKeyColumns)
	sapServiceOrderDefectDatumInsertCacheMut       sync.RWMutex
	sapServiceOrderDefectDatumInsertCache          = make(map[string]insertCache)
	sapServiceOrderDefectDatumUpdateCacheMut       sync.RWMutex
	sapServiceOrderDefectDatumUpdateCache          = make(map[string]updateCache)
	sapServiceOrderDefectDatumUpsertCacheMut       sync.RWMutex
	sapServiceOrderDefectDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceOrderDefectDatumAfterSelectHooks []SapServiceOrderDefectDatumHook

var sapServiceOrderDefectDatumBeforeInsertHooks []SapServiceOrderDefectDatumHook
var sapServiceOrderDefectDatumAfterInsertHooks []SapServiceOrderDefectDatumHook

var sapServiceOrderDefectDatumBeforeUpdateHooks []SapServiceOrderDefectDatumHook
var sapServiceOrderDefectDatumAfterUpdateHooks []SapServiceOrderDefectDatumHook

var sapServiceOrderDefectDatumBeforeDeleteHooks []SapServiceOrderDefectDatumHook
var sapServiceOrderDefectDatumAfterDeleteHooks []SapServiceOrderDefectDatumHook

var sapServiceOrderDefectDatumBeforeUpsertHooks []SapServiceOrderDefectDatumHook
var sapServiceOrderDefectDatumAfterUpsertHooks []SapServiceOrderDefectDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceOrderDefectDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceOrderDefectDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceOrderDefectDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceOrderDefectDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceOrderDefectDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceOrderDefectDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceOrderDefectDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceOrderDefectDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceOrderDefectDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderDefectDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceOrderDefectDatumHook registers your hook function for all future operations.
func AddSapServiceOrderDefectDatumHook(hookPoint boil.HookPoint, sapServiceOrderDefectDatumHook SapServiceOrderDefectDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceOrderDefectDatumAfterSelectHooks = append(sapServiceOrderDefectDatumAfterSelectHooks, sapServiceOrderDefectDatumHook)
	case boil.BeforeInsertHook:
		sapServiceOrderDefectDatumBeforeInsertHooks = append(sapServiceOrderDefectDatumBeforeInsertHooks, sapServiceOrderDefectDatumHook)
	case boil.AfterInsertHook:
		sapServiceOrderDefectDatumAfterInsertHooks = append(sapServiceOrderDefectDatumAfterInsertHooks, sapServiceOrderDefectDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceOrderDefectDatumBeforeUpdateHooks = append(sapServiceOrderDefectDatumBeforeUpdateHooks, sapServiceOrderDefectDatumHook)
	case boil.AfterUpdateHook:
		sapServiceOrderDefectDatumAfterUpdateHooks = append(sapServiceOrderDefectDatumAfterUpdateHooks, sapServiceOrderDefectDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceOrderDefectDatumBeforeDeleteHooks = append(sapServiceOrderDefectDatumBeforeDeleteHooks, sapServiceOrderDefectDatumHook)
	case boil.AfterDeleteHook:
		sapServiceOrderDefectDatumAfterDeleteHooks = append(sapServiceOrderDefectDatumAfterDeleteHooks, sapServiceOrderDefectDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceOrderDefectDatumBeforeUpsertHooks = append(sapServiceOrderDefectDatumBeforeUpsertHooks, sapServiceOrderDefectDatumHook)
	case boil.AfterUpsertHook:
		sapServiceOrderDefectDatumAfterUpsertHooks = append(sapServiceOrderDefectDatumAfterUpsertHooks, sapServiceOrderDefectDatumHook)
	}
}

// One returns a single sapServiceOrderDefectDatum record from the query.
func (q sapServiceOrderDefectDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceOrderDefectDatum, error) {
	o := &SapServiceOrderDefectDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_order_defect_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceOrderDefectDatum records from the query.
func (q sapServiceOrderDefectDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceOrderDefectDatumSlice, error) {
	var o []*SapServiceOrderDefectDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceOrderDefectDatum slice")
	}

	if len(sapServiceOrderDefectDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceOrderDefectDatum records in the query.
func (q sapServiceOrderDefectDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_order_defect_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceOrderDefectDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_order_defect_data exists")
	}

	return count > 0, nil
}

// ServiceOrderSapServiceOrderHeaderDatum pointed to by the foreign key.
func (o *SapServiceOrderDefectDatum) ServiceOrderSapServiceOrderHeaderDatum(mods ...qm.QueryMod) sapServiceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_header_data`")

	return query
}

// LoadServiceOrderSapServiceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceOrderDefectDatumL) LoadServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderDefectDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderDefectDatum
	var object *SapServiceOrderDefectDatum

	if singular {
		object = maybeSapServiceOrderDefectDatum.(*SapServiceOrderDefectDatum)
	} else {
		slice = *maybeSapServiceOrderDefectDatum.(*[]*SapServiceOrderDefectDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderDefectDatumR{}
		}
		args = append(args, object.ServiceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderDefectDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_header_data`),
		qm.WhereIn(`sap_service_order_header_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderHeaderDatum")
	}

	var resultSlice []*SapServiceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_header_data")
	}

	if len(sapServiceOrderDefectDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderHeaderDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderDefectData = append(foreign.R.ServiceOrderSapServiceOrderDefectData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderHeaderDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderDefectData = append(foreign.R.ServiceOrderSapServiceOrderDefectData, local)
				break
			}
		}
	}

	return nil
}

// SetServiceOrderSapServiceOrderHeaderDatum of the sapServiceOrderDefectDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderHeaderDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderDefectData.
func (o *SapServiceOrderDefectDatum) SetServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_order_defect_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapServiceOrderDefectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceOrder, o.ServiceOrder, o.SrvcDocTypeDefectCodeProfType, o.ServiceDefectSequence}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceOrder = related.ServiceOrder
	if o.R == nil {
		o.R = &sapServiceOrderDefectDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderDefectData: SapServiceOrderDefectDatumSlice{o},
		}
	} else {
		related.R.ServiceOrderSapServiceOrderDefectData = append(related.R.ServiceOrderSapServiceOrderDefectData, o)
	}

	return nil
}

// SapServiceOrderDefectData retrieves all the records using an executor.
func SapServiceOrderDefectData(mods ...qm.QueryMod) sapServiceOrderDefectDatumQuery {
	mods = append(mods, qm.From("`sap_service_order_defect_data`"))
	return sapServiceOrderDefectDatumQuery{NewQuery(mods...)}
}

// FindSapServiceOrderDefectDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceOrderDefectDatum(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, srvcDocTypeDefectCodeProfType string, serviceDefectSequence int, selectCols ...string) (*SapServiceOrderDefectDatum, error) {
	sapServiceOrderDefectDatumObj := &SapServiceOrderDefectDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_order_defect_data` where `ServiceOrder`=? AND `SrvcDocTypeDefectCodeProfType`=? AND `ServiceDefectSequence`=?", sel,
	)

	q := queries.Raw(query, serviceOrder, srvcDocTypeDefectCodeProfType, serviceDefectSequence)

	err := q.Bind(ctx, exec, sapServiceOrderDefectDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_order_defect_data")
	}

	if err = sapServiceOrderDefectDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceOrderDefectDatumObj, err
	}

	return sapServiceOrderDefectDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceOrderDefectDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_defect_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderDefectDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceOrderDefectDatumInsertCacheMut.RLock()
	cache, cached := sapServiceOrderDefectDatumInsertCache[key]
	sapServiceOrderDefectDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceOrderDefectDatumAllColumns,
			sapServiceOrderDefectDatumColumnsWithDefault,
			sapServiceOrderDefectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_order_defect_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_order_defect_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_order_defect_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceOrderDefectDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_order_defect_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceOrder,
		o.SrvcDocTypeDefectCodeProfType,
		o.ServiceDefectSequence,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_defect_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderDefectDatumInsertCacheMut.Lock()
		sapServiceOrderDefectDatumInsertCache[key] = cache
		sapServiceOrderDefectDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceOrderDefectDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceOrderDefectDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceOrderDefectDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceOrderDefectDatumUpdateCache[key]
	sapServiceOrderDefectDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceOrderDefectDatumAllColumns,
			sapServiceOrderDefectDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_order_defect_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_order_defect_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderDefectDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, append(wl, sapServiceOrderDefectDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_order_defect_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_order_defect_data")
	}

	if !cached {
		sapServiceOrderDefectDatumUpdateCacheMut.Lock()
		sapServiceOrderDefectDatumUpdateCache[key] = cache
		sapServiceOrderDefectDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceOrderDefectDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_order_defect_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_order_defect_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceOrderDefectDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderDefectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_order_defect_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderDefectDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceOrderDefectDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceOrderDefectDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceOrderDefectDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceOrderDefectDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_defect_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderDefectDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceOrderDefectDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceOrderDefectDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceOrderDefectDatumUpsertCache[key]
	sapServiceOrderDefectDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceOrderDefectDatumAllColumns,
			sapServiceOrderDefectDatumColumnsWithDefault,
			sapServiceOrderDefectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceOrderDefectDatumAllColumns,
			sapServiceOrderDefectDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_order_defect_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_order_defect_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_order_defect_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_order_defect_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceOrderDefectDatumType, sapServiceOrderDefectDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_order_defect_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_defect_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderDefectDatumUpsertCacheMut.Lock()
		sapServiceOrderDefectDatumUpsertCache[key] = cache
		sapServiceOrderDefectDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceOrderDefectDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceOrderDefectDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceOrderDefectDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceOrderDefectDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_order_defect_data` WHERE `ServiceOrder`=? AND `SrvcDocTypeDefectCodeProfType`=? AND `ServiceDefectSequence`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_order_defect_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_order_defect_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceOrderDefectDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceOrderDefectDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_order_defect_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_defect_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceOrderDefectDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceOrderDefectDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderDefectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_order_defect_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderDefectDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceOrderDefectDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_defect_data")
	}

	if len(sapServiceOrderDefectDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceOrderDefectDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceOrderDefectDatum(ctx, exec, o.ServiceOrder, o.SrvcDocTypeDefectCodeProfType, o.ServiceDefectSequence)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceOrderDefectDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceOrderDefectDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderDefectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_order_defect_data`.* FROM `sap_service_order_defect_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderDefectDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceOrderDefectDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceOrderDefectDatumExists checks if the SapServiceOrderDefectDatum row exists.
func SapServiceOrderDefectDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, srvcDocTypeDefectCodeProfType string, serviceDefectSequence int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_order_defect_data` where `ServiceOrder`=? AND `SrvcDocTypeDefectCodeProfType`=? AND `ServiceDefectSequence`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceOrder, srvcDocTypeDefectCodeProfType, serviceDefectSequence)
	}
	row := exec.QueryRowContext(ctx, sql, serviceOrder, srvcDocTypeDefectCodeProfType, serviceDefectSequence)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_order_defect_data exists")
	}

	return exists, nil
}
