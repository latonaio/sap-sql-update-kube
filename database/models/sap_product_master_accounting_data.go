// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterAccountingDatum is an object representing the database table.
type SapProductMasterAccountingDatum struct {
	Product             string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ValuationArea       string      `boil:"ValuationArea" json:"ValuationArea" toml:"ValuationArea" yaml:"ValuationArea"`
	ValuationClass      null.String `boil:"ValuationClass" json:"ValuationClass,omitempty" toml:"ValuationClass" yaml:"ValuationClass,omitempty"`
	StandardPrice       null.String `boil:"StandardPrice" json:"StandardPrice,omitempty" toml:"StandardPrice" yaml:"StandardPrice,omitempty"`
	PriceUnitQty        null.String `boil:"PriceUnitQty" json:"PriceUnitQty,omitempty" toml:"PriceUnitQty" yaml:"PriceUnitQty,omitempty"`
	MovingAveragePrice  null.String `boil:"MovingAveragePrice" json:"MovingAveragePrice,omitempty" toml:"MovingAveragePrice" yaml:"MovingAveragePrice,omitempty"`
	PriceLastChangeDate null.String `boil:"PriceLastChangeDate" json:"PriceLastChangeDate,omitempty" toml:"PriceLastChangeDate" yaml:"PriceLastChangeDate,omitempty"`
	PlannedPrice        null.String `boil:"PlannedPrice" json:"PlannedPrice,omitempty" toml:"PlannedPrice" yaml:"PlannedPrice,omitempty"`
	IsMarkedForDeletion null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *sapProductMasterAccountingDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterAccountingDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterAccountingDatumColumns = struct {
	Product             string
	ValuationArea       string
	ValuationClass      string
	StandardPrice       string
	PriceUnitQty        string
	MovingAveragePrice  string
	PriceLastChangeDate string
	PlannedPrice        string
	IsMarkedForDeletion string
}{
	Product:             "Product",
	ValuationArea:       "ValuationArea",
	ValuationClass:      "ValuationClass",
	StandardPrice:       "StandardPrice",
	PriceUnitQty:        "PriceUnitQty",
	MovingAveragePrice:  "MovingAveragePrice",
	PriceLastChangeDate: "PriceLastChangeDate",
	PlannedPrice:        "PlannedPrice",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var SapProductMasterAccountingDatumTableColumns = struct {
	Product             string
	ValuationArea       string
	ValuationClass      string
	StandardPrice       string
	PriceUnitQty        string
	MovingAveragePrice  string
	PriceLastChangeDate string
	PlannedPrice        string
	IsMarkedForDeletion string
}{
	Product:             "sap_product_master_accounting_data.Product",
	ValuationArea:       "sap_product_master_accounting_data.ValuationArea",
	ValuationClass:      "sap_product_master_accounting_data.ValuationClass",
	StandardPrice:       "sap_product_master_accounting_data.StandardPrice",
	PriceUnitQty:        "sap_product_master_accounting_data.PriceUnitQty",
	MovingAveragePrice:  "sap_product_master_accounting_data.MovingAveragePrice",
	PriceLastChangeDate: "sap_product_master_accounting_data.PriceLastChangeDate",
	PlannedPrice:        "sap_product_master_accounting_data.PlannedPrice",
	IsMarkedForDeletion: "sap_product_master_accounting_data.IsMarkedForDeletion",
}

// Generated where

var SapProductMasterAccountingDatumWhere = struct {
	Product             whereHelperstring
	ValuationArea       whereHelperstring
	ValuationClass      whereHelpernull_String
	StandardPrice       whereHelpernull_String
	PriceUnitQty        whereHelpernull_String
	MovingAveragePrice  whereHelpernull_String
	PriceLastChangeDate whereHelpernull_String
	PlannedPrice        whereHelpernull_String
	IsMarkedForDeletion whereHelpernull_Bool
}{
	Product:             whereHelperstring{field: "`sap_product_master_accounting_data`.`Product`"},
	ValuationArea:       whereHelperstring{field: "`sap_product_master_accounting_data`.`ValuationArea`"},
	ValuationClass:      whereHelpernull_String{field: "`sap_product_master_accounting_data`.`ValuationClass`"},
	StandardPrice:       whereHelpernull_String{field: "`sap_product_master_accounting_data`.`StandardPrice`"},
	PriceUnitQty:        whereHelpernull_String{field: "`sap_product_master_accounting_data`.`PriceUnitQty`"},
	MovingAveragePrice:  whereHelpernull_String{field: "`sap_product_master_accounting_data`.`MovingAveragePrice`"},
	PriceLastChangeDate: whereHelpernull_String{field: "`sap_product_master_accounting_data`.`PriceLastChangeDate`"},
	PlannedPrice:        whereHelpernull_String{field: "`sap_product_master_accounting_data`.`PlannedPrice`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`sap_product_master_accounting_data`.`IsMarkedForDeletion`"},
}

// SapProductMasterAccountingDatumRels is where relationship names are stored.
var SapProductMasterAccountingDatumRels = struct {
	ProductSapProductMasterGeneralDatum string
}{
	ProductSapProductMasterGeneralDatum: "ProductSapProductMasterGeneralDatum",
}

// sapProductMasterAccountingDatumR is where relationships are stored.
type sapProductMasterAccountingDatumR struct {
	ProductSapProductMasterGeneralDatum *SapProductMasterGeneralDatum `boil:"ProductSapProductMasterGeneralDatum" json:"ProductSapProductMasterGeneralDatum" toml:"ProductSapProductMasterGeneralDatum" yaml:"ProductSapProductMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterAccountingDatumR) NewStruct() *sapProductMasterAccountingDatumR {
	return &sapProductMasterAccountingDatumR{}
}

// sapProductMasterAccountingDatumL is where Load methods for each relationship are stored.
type sapProductMasterAccountingDatumL struct{}

var (
	sapProductMasterAccountingDatumAllColumns            = []string{"Product", "ValuationArea", "ValuationClass", "StandardPrice", "PriceUnitQty", "MovingAveragePrice", "PriceLastChangeDate", "PlannedPrice", "IsMarkedForDeletion"}
	sapProductMasterAccountingDatumColumnsWithoutDefault = []string{"Product", "ValuationArea", "ValuationClass", "StandardPrice", "PriceUnitQty", "MovingAveragePrice", "PriceLastChangeDate", "PlannedPrice", "IsMarkedForDeletion"}
	sapProductMasterAccountingDatumColumnsWithDefault    = []string{}
	sapProductMasterAccountingDatumPrimaryKeyColumns     = []string{"Product", "ValuationArea"}
	sapProductMasterAccountingDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterAccountingDatumSlice is an alias for a slice of pointers to SapProductMasterAccountingDatum.
	// This should almost always be used instead of []SapProductMasterAccountingDatum.
	SapProductMasterAccountingDatumSlice []*SapProductMasterAccountingDatum
	// SapProductMasterAccountingDatumHook is the signature for custom SapProductMasterAccountingDatum hook methods
	SapProductMasterAccountingDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterAccountingDatum) error

	sapProductMasterAccountingDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterAccountingDatumType                 = reflect.TypeOf(&SapProductMasterAccountingDatum{})
	sapProductMasterAccountingDatumMapping              = queries.MakeStructMapping(sapProductMasterAccountingDatumType)
	sapProductMasterAccountingDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, sapProductMasterAccountingDatumPrimaryKeyColumns)
	sapProductMasterAccountingDatumInsertCacheMut       sync.RWMutex
	sapProductMasterAccountingDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterAccountingDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterAccountingDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterAccountingDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterAccountingDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterAccountingDatumAfterSelectHooks []SapProductMasterAccountingDatumHook

var sapProductMasterAccountingDatumBeforeInsertHooks []SapProductMasterAccountingDatumHook
var sapProductMasterAccountingDatumAfterInsertHooks []SapProductMasterAccountingDatumHook

var sapProductMasterAccountingDatumBeforeUpdateHooks []SapProductMasterAccountingDatumHook
var sapProductMasterAccountingDatumAfterUpdateHooks []SapProductMasterAccountingDatumHook

var sapProductMasterAccountingDatumBeforeDeleteHooks []SapProductMasterAccountingDatumHook
var sapProductMasterAccountingDatumAfterDeleteHooks []SapProductMasterAccountingDatumHook

var sapProductMasterAccountingDatumBeforeUpsertHooks []SapProductMasterAccountingDatumHook
var sapProductMasterAccountingDatumAfterUpsertHooks []SapProductMasterAccountingDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterAccountingDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterAccountingDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterAccountingDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterAccountingDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterAccountingDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterAccountingDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterAccountingDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterAccountingDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterAccountingDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterAccountingDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterAccountingDatumHook registers your hook function for all future operations.
func AddSapProductMasterAccountingDatumHook(hookPoint boil.HookPoint, sapProductMasterAccountingDatumHook SapProductMasterAccountingDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterAccountingDatumAfterSelectHooks = append(sapProductMasterAccountingDatumAfterSelectHooks, sapProductMasterAccountingDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterAccountingDatumBeforeInsertHooks = append(sapProductMasterAccountingDatumBeforeInsertHooks, sapProductMasterAccountingDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterAccountingDatumAfterInsertHooks = append(sapProductMasterAccountingDatumAfterInsertHooks, sapProductMasterAccountingDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterAccountingDatumBeforeUpdateHooks = append(sapProductMasterAccountingDatumBeforeUpdateHooks, sapProductMasterAccountingDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterAccountingDatumAfterUpdateHooks = append(sapProductMasterAccountingDatumAfterUpdateHooks, sapProductMasterAccountingDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterAccountingDatumBeforeDeleteHooks = append(sapProductMasterAccountingDatumBeforeDeleteHooks, sapProductMasterAccountingDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterAccountingDatumAfterDeleteHooks = append(sapProductMasterAccountingDatumAfterDeleteHooks, sapProductMasterAccountingDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterAccountingDatumBeforeUpsertHooks = append(sapProductMasterAccountingDatumBeforeUpsertHooks, sapProductMasterAccountingDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterAccountingDatumAfterUpsertHooks = append(sapProductMasterAccountingDatumAfterUpsertHooks, sapProductMasterAccountingDatumHook)
	}
}

// One returns a single sapProductMasterAccountingDatum record from the query.
func (q sapProductMasterAccountingDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterAccountingDatum, error) {
	o := &SapProductMasterAccountingDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_accounting_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterAccountingDatum records from the query.
func (q sapProductMasterAccountingDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterAccountingDatumSlice, error) {
	var o []*SapProductMasterAccountingDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterAccountingDatum slice")
	}

	if len(sapProductMasterAccountingDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterAccountingDatum records in the query.
func (q sapProductMasterAccountingDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_accounting_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterAccountingDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_accounting_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterAccountingDatum) ProductSapProductMasterGeneralDatum(mods ...qm.QueryMod) sapProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_general_data`")

	return query
}

// LoadProductSapProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterAccountingDatumL) LoadProductSapProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterAccountingDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterAccountingDatum
	var object *SapProductMasterAccountingDatum

	if singular {
		object = maybeSapProductMasterAccountingDatum.(*SapProductMasterAccountingDatum)
	} else {
		slice = *maybeSapProductMasterAccountingDatum.(*[]*SapProductMasterAccountingDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterAccountingDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterAccountingDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_general_data`),
		qm.WhereIn(`sap_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterGeneralDatum")
	}

	var resultSlice []*SapProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_general_data")
	}

	if len(sapProductMasterAccountingDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterAccountingData = append(foreign.R.ProductSapProductMasterAccountingData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterAccountingData = append(foreign.R.ProductSapProductMasterAccountingData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterGeneralDatum of the sapProductMasterAccountingDatum to the related item.
// Sets o.R.ProductSapProductMasterGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterAccountingData.
func (o *SapProductMasterAccountingDatum) SetProductSapProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_accounting_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterAccountingDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.ValuationArea}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterAccountingDatumR{
			ProductSapProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterGeneralDatumR{
			ProductSapProductMasterAccountingData: SapProductMasterAccountingDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterAccountingData = append(related.R.ProductSapProductMasterAccountingData, o)
	}

	return nil
}

// SapProductMasterAccountingData retrieves all the records using an executor.
func SapProductMasterAccountingData(mods ...qm.QueryMod) sapProductMasterAccountingDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_accounting_data`"))
	return sapProductMasterAccountingDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterAccountingDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterAccountingDatum(ctx context.Context, exec boil.ContextExecutor, product string, valuationArea string, selectCols ...string) (*SapProductMasterAccountingDatum, error) {
	sapProductMasterAccountingDatumObj := &SapProductMasterAccountingDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_accounting_data` where `Product`=? AND `ValuationArea`=?", sel,
	)

	q := queries.Raw(query, product, valuationArea)

	err := q.Bind(ctx, exec, sapProductMasterAccountingDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_accounting_data")
	}

	if err = sapProductMasterAccountingDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterAccountingDatumObj, err
	}

	return sapProductMasterAccountingDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterAccountingDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_accounting_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterAccountingDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterAccountingDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterAccountingDatumInsertCache[key]
	sapProductMasterAccountingDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterAccountingDatumAllColumns,
			sapProductMasterAccountingDatumColumnsWithDefault,
			sapProductMasterAccountingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_accounting_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_accounting_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_accounting_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterAccountingDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_accounting_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.ValuationArea,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_accounting_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterAccountingDatumInsertCacheMut.Lock()
		sapProductMasterAccountingDatumInsertCache[key] = cache
		sapProductMasterAccountingDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterAccountingDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterAccountingDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterAccountingDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterAccountingDatumUpdateCache[key]
	sapProductMasterAccountingDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterAccountingDatumAllColumns,
			sapProductMasterAccountingDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_accounting_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_accounting_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterAccountingDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, append(wl, sapProductMasterAccountingDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_accounting_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_accounting_data")
	}

	if !cached {
		sapProductMasterAccountingDatumUpdateCacheMut.Lock()
		sapProductMasterAccountingDatumUpdateCache[key] = cache
		sapProductMasterAccountingDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterAccountingDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_accounting_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_accounting_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterAccountingDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterAccountingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_accounting_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterAccountingDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterAccountingDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterAccountingDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterAccountingDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterAccountingDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_accounting_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterAccountingDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterAccountingDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterAccountingDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterAccountingDatumUpsertCache[key]
	sapProductMasterAccountingDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterAccountingDatumAllColumns,
			sapProductMasterAccountingDatumColumnsWithDefault,
			sapProductMasterAccountingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterAccountingDatumAllColumns,
			sapProductMasterAccountingDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_accounting_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_accounting_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_accounting_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_accounting_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterAccountingDatumType, sapProductMasterAccountingDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_accounting_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_accounting_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterAccountingDatumUpsertCacheMut.Lock()
		sapProductMasterAccountingDatumUpsertCache[key] = cache
		sapProductMasterAccountingDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterAccountingDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterAccountingDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterAccountingDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterAccountingDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_accounting_data` WHERE `Product`=? AND `ValuationArea`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_accounting_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_accounting_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterAccountingDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterAccountingDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_accounting_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_accounting_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterAccountingDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterAccountingDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterAccountingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_accounting_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterAccountingDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterAccountingDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_accounting_data")
	}

	if len(sapProductMasterAccountingDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterAccountingDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterAccountingDatum(ctx, exec, o.Product, o.ValuationArea)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterAccountingDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterAccountingDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterAccountingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_accounting_data`.* FROM `sap_product_master_accounting_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterAccountingDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterAccountingDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterAccountingDatumExists checks if the SapProductMasterAccountingDatum row exists.
func SapProductMasterAccountingDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, valuationArea string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_accounting_data` where `Product`=? AND `ValuationArea`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, valuationArea)
	}
	row := exec.QueryRowContext(ctx, sql, product, valuationArea)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_accounting_data exists")
	}

	return exists, nil
}
