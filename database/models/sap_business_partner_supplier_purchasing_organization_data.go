// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerSupplierPurchasingOrganizationDatum is an object representing the database table.
type SapBusinessPartnerSupplierPurchasingOrganizationDatum struct {
	Supplier                       string      `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	PurchasingOrganization         string      `boil:"PurchasingOrganization" json:"PurchasingOrganization" toml:"PurchasingOrganization" yaml:"PurchasingOrganization"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	InvoiceIsGoodsReceiptBased     null.Bool   `boil:"InvoiceIsGoodsReceiptBased" json:"InvoiceIsGoodsReceiptBased,omitempty" toml:"InvoiceIsGoodsReceiptBased" yaml:"InvoiceIsGoodsReceiptBased,omitempty"`
	PaymentTerms                   null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PurOrdAutoGenerationIsAllowed  null.Bool   `boil:"PurOrdAutoGenerationIsAllowed" json:"PurOrdAutoGenerationIsAllowed,omitempty" toml:"PurOrdAutoGenerationIsAllowed" yaml:"PurOrdAutoGenerationIsAllowed,omitempty"`
	PurchaseOrderCurrency          null.String `boil:"PurchaseOrderCurrency" json:"PurchaseOrderCurrency,omitempty" toml:"PurchaseOrderCurrency" yaml:"PurchaseOrderCurrency,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	ShippingCondition              null.String `boil:"ShippingCondition" json:"ShippingCondition,omitempty" toml:"ShippingCondition" yaml:"ShippingCondition,omitempty"`
	SupplierPhoneNumber            null.String `boil:"SupplierPhoneNumber" json:"SupplierPhoneNumber,omitempty" toml:"SupplierPhoneNumber" yaml:"SupplierPhoneNumber,omitempty"`
	SupplierRespSalesPersonName    null.String `boil:"SupplierRespSalesPersonName" json:"SupplierRespSalesPersonName,omitempty" toml:"SupplierRespSalesPersonName" yaml:"SupplierRespSalesPersonName,omitempty"`
	PurchasingIsBlockedForSupplier null.Bool   `boil:"PurchasingIsBlockedForSupplier" json:"PurchasingIsBlockedForSupplier,omitempty" toml:"PurchasingIsBlockedForSupplier" yaml:"PurchasingIsBlockedForSupplier,omitempty"`
	DeletionIndicator              null.Bool   `boil:"DeletionIndicator" json:"DeletionIndicator,omitempty" toml:"DeletionIndicator" yaml:"DeletionIndicator,omitempty"`

	R *sapBusinessPartnerSupplierPurchasingOrganizationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerSupplierPurchasingOrganizationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerSupplierPurchasingOrganizationDatumColumns = struct {
	Supplier                       string
	PurchasingOrganization         string
	IncotermsClassification        string
	InvoiceIsGoodsReceiptBased     string
	PaymentTerms                   string
	PurOrdAutoGenerationIsAllowed  string
	PurchaseOrderCurrency          string
	PurchasingGroup                string
	ShippingCondition              string
	SupplierPhoneNumber            string
	SupplierRespSalesPersonName    string
	PurchasingIsBlockedForSupplier string
	DeletionIndicator              string
}{
	Supplier:                       "Supplier",
	PurchasingOrganization:         "PurchasingOrganization",
	IncotermsClassification:        "IncotermsClassification",
	InvoiceIsGoodsReceiptBased:     "InvoiceIsGoodsReceiptBased",
	PaymentTerms:                   "PaymentTerms",
	PurOrdAutoGenerationIsAllowed:  "PurOrdAutoGenerationIsAllowed",
	PurchaseOrderCurrency:          "PurchaseOrderCurrency",
	PurchasingGroup:                "PurchasingGroup",
	ShippingCondition:              "ShippingCondition",
	SupplierPhoneNumber:            "SupplierPhoneNumber",
	SupplierRespSalesPersonName:    "SupplierRespSalesPersonName",
	PurchasingIsBlockedForSupplier: "PurchasingIsBlockedForSupplier",
	DeletionIndicator:              "DeletionIndicator",
}

var SapBusinessPartnerSupplierPurchasingOrganizationDatumTableColumns = struct {
	Supplier                       string
	PurchasingOrganization         string
	IncotermsClassification        string
	InvoiceIsGoodsReceiptBased     string
	PaymentTerms                   string
	PurOrdAutoGenerationIsAllowed  string
	PurchaseOrderCurrency          string
	PurchasingGroup                string
	ShippingCondition              string
	SupplierPhoneNumber            string
	SupplierRespSalesPersonName    string
	PurchasingIsBlockedForSupplier string
	DeletionIndicator              string
}{
	Supplier:                       "sap_business_partner_supplier_purchasing_organization_data.Supplier",
	PurchasingOrganization:         "sap_business_partner_supplier_purchasing_organization_data.PurchasingOrganization",
	IncotermsClassification:        "sap_business_partner_supplier_purchasing_organization_data.IncotermsClassification",
	InvoiceIsGoodsReceiptBased:     "sap_business_partner_supplier_purchasing_organization_data.InvoiceIsGoodsReceiptBased",
	PaymentTerms:                   "sap_business_partner_supplier_purchasing_organization_data.PaymentTerms",
	PurOrdAutoGenerationIsAllowed:  "sap_business_partner_supplier_purchasing_organization_data.PurOrdAutoGenerationIsAllowed",
	PurchaseOrderCurrency:          "sap_business_partner_supplier_purchasing_organization_data.PurchaseOrderCurrency",
	PurchasingGroup:                "sap_business_partner_supplier_purchasing_organization_data.PurchasingGroup",
	ShippingCondition:              "sap_business_partner_supplier_purchasing_organization_data.ShippingCondition",
	SupplierPhoneNumber:            "sap_business_partner_supplier_purchasing_organization_data.SupplierPhoneNumber",
	SupplierRespSalesPersonName:    "sap_business_partner_supplier_purchasing_organization_data.SupplierRespSalesPersonName",
	PurchasingIsBlockedForSupplier: "sap_business_partner_supplier_purchasing_organization_data.PurchasingIsBlockedForSupplier",
	DeletionIndicator:              "sap_business_partner_supplier_purchasing_organization_data.DeletionIndicator",
}

// Generated where

var SapBusinessPartnerSupplierPurchasingOrganizationDatumWhere = struct {
	Supplier                       whereHelperstring
	PurchasingOrganization         whereHelperstring
	IncotermsClassification        whereHelpernull_String
	InvoiceIsGoodsReceiptBased     whereHelpernull_Bool
	PaymentTerms                   whereHelpernull_String
	PurOrdAutoGenerationIsAllowed  whereHelpernull_Bool
	PurchaseOrderCurrency          whereHelpernull_String
	PurchasingGroup                whereHelpernull_String
	ShippingCondition              whereHelpernull_String
	SupplierPhoneNumber            whereHelpernull_String
	SupplierRespSalesPersonName    whereHelpernull_String
	PurchasingIsBlockedForSupplier whereHelpernull_Bool
	DeletionIndicator              whereHelpernull_Bool
}{
	Supplier:                       whereHelperstring{field: "`sap_business_partner_supplier_purchasing_organization_data`.`Supplier`"},
	PurchasingOrganization:         whereHelperstring{field: "`sap_business_partner_supplier_purchasing_organization_data`.`PurchasingOrganization`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`IncotermsClassification`"},
	InvoiceIsGoodsReceiptBased:     whereHelpernull_Bool{field: "`sap_business_partner_supplier_purchasing_organization_data`.`InvoiceIsGoodsReceiptBased`"},
	PaymentTerms:                   whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`PaymentTerms`"},
	PurOrdAutoGenerationIsAllowed:  whereHelpernull_Bool{field: "`sap_business_partner_supplier_purchasing_organization_data`.`PurOrdAutoGenerationIsAllowed`"},
	PurchaseOrderCurrency:          whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`PurchaseOrderCurrency`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`PurchasingGroup`"},
	ShippingCondition:              whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`ShippingCondition`"},
	SupplierPhoneNumber:            whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`SupplierPhoneNumber`"},
	SupplierRespSalesPersonName:    whereHelpernull_String{field: "`sap_business_partner_supplier_purchasing_organization_data`.`SupplierRespSalesPersonName`"},
	PurchasingIsBlockedForSupplier: whereHelpernull_Bool{field: "`sap_business_partner_supplier_purchasing_organization_data`.`PurchasingIsBlockedForSupplier`"},
	DeletionIndicator:              whereHelpernull_Bool{field: "`sap_business_partner_supplier_purchasing_organization_data`.`DeletionIndicator`"},
}

// SapBusinessPartnerSupplierPurchasingOrganizationDatumRels is where relationship names are stored.
var SapBusinessPartnerSupplierPurchasingOrganizationDatumRels = struct {
	SupplierSapBusinessPartnerGeneralDatum string
}{
	SupplierSapBusinessPartnerGeneralDatum: "SupplierSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerSupplierPurchasingOrganizationDatumR is where relationships are stored.
type sapBusinessPartnerSupplierPurchasingOrganizationDatumR struct {
	SupplierSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"SupplierSapBusinessPartnerGeneralDatum" json:"SupplierSapBusinessPartnerGeneralDatum" toml:"SupplierSapBusinessPartnerGeneralDatum" yaml:"SupplierSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerSupplierPurchasingOrganizationDatumR) NewStruct() *sapBusinessPartnerSupplierPurchasingOrganizationDatumR {
	return &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{}
}

// sapBusinessPartnerSupplierPurchasingOrganizationDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerSupplierPurchasingOrganizationDatumL struct{}

var (
	sapBusinessPartnerSupplierPurchasingOrganizationDatumAllColumns            = []string{"Supplier", "PurchasingOrganization", "IncotermsClassification", "InvoiceIsGoodsReceiptBased", "PaymentTerms", "PurOrdAutoGenerationIsAllowed", "PurchaseOrderCurrency", "PurchasingGroup", "ShippingCondition", "SupplierPhoneNumber", "SupplierRespSalesPersonName", "PurchasingIsBlockedForSupplier", "DeletionIndicator"}
	sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithoutDefault = []string{"Supplier", "PurchasingOrganization", "IncotermsClassification", "InvoiceIsGoodsReceiptBased", "PaymentTerms", "PurOrdAutoGenerationIsAllowed", "PurchaseOrderCurrency", "PurchasingGroup", "ShippingCondition", "SupplierPhoneNumber", "SupplierRespSalesPersonName", "PurchasingIsBlockedForSupplier", "DeletionIndicator"}
	sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns     = []string{"Supplier", "PurchasingOrganization"}
	sapBusinessPartnerSupplierPurchasingOrganizationDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice is an alias for a slice of pointers to SapBusinessPartnerSupplierPurchasingOrganizationDatum.
	// This should almost always be used instead of []SapBusinessPartnerSupplierPurchasingOrganizationDatum.
	SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice []*SapBusinessPartnerSupplierPurchasingOrganizationDatum
	// SapBusinessPartnerSupplierPurchasingOrganizationDatumHook is the signature for custom SapBusinessPartnerSupplierPurchasingOrganizationDatum hook methods
	SapBusinessPartnerSupplierPurchasingOrganizationDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerSupplierPurchasingOrganizationDatum) error

	sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerSupplierPurchasingOrganizationDatumType                 = reflect.TypeOf(&SapBusinessPartnerSupplierPurchasingOrganizationDatum{})
	sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType)
	sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns)
	sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook

var sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeInsertHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook
var sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterInsertHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook

var sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpdateHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook
var sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpdateHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook

var sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeDeleteHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook
var sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterDeleteHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook

var sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpsertHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook
var sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpsertHooks []SapBusinessPartnerSupplierPurchasingOrganizationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerSupplierPurchasingOrganizationDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerSupplierPurchasingOrganizationDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook SapBusinessPartnerSupplierPurchasingOrganizationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeInsertHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeInsertHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterInsertHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterInsertHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpdateHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpdateHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpdateHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpdateHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeDeleteHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeDeleteHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterDeleteHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterDeleteHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpsertHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeUpsertHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpsertHooks = append(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterUpsertHooks, sapBusinessPartnerSupplierPurchasingOrganizationDatumHook)
	}
}

// One returns a single sapBusinessPartnerSupplierPurchasingOrganizationDatum record from the query.
func (q sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerSupplierPurchasingOrganizationDatum, error) {
	o := &SapBusinessPartnerSupplierPurchasingOrganizationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_supplier_purchasing_organization_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerSupplierPurchasingOrganizationDatum records from the query.
func (q sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice, error) {
	var o []*SapBusinessPartnerSupplierPurchasingOrganizationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerSupplierPurchasingOrganizationDatum slice")
	}

	if len(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerSupplierPurchasingOrganizationDatum records in the query.
func (q sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_supplier_purchasing_organization_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_supplier_purchasing_organization_data exists")
	}

	return count > 0, nil
}

// SupplierSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) SupplierSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Supplier),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadSupplierSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerSupplierPurchasingOrganizationDatumL) LoadSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerSupplierPurchasingOrganizationDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerSupplierPurchasingOrganizationDatum
	var object *SapBusinessPartnerSupplierPurchasingOrganizationDatum

	if singular {
		object = maybeSapBusinessPartnerSupplierPurchasingOrganizationDatum.(*SapBusinessPartnerSupplierPurchasingOrganizationDatum)
	} else {
		slice = *maybeSapBusinessPartnerSupplierPurchasingOrganizationDatum.(*[]*SapBusinessPartnerSupplierPurchasingOrganizationDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{}
		}
		args = append(args, object.Supplier)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{}
			}

			for _, a := range args {
				if a == obj.Supplier {
					continue Outer
				}
			}

			args = append(args, obj.Supplier)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupplierSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData = append(foreign.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Supplier == foreign.BusinessPartner {
				local.R.SupplierSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData = append(foreign.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData, local)
				break
			}
		}
	}

	return nil
}

// SetSupplierSapBusinessPartnerGeneralDatum of the sapBusinessPartnerSupplierPurchasingOrganizationDatum to the related item.
// Sets o.R.SupplierSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) SetSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_supplier_purchasing_organization_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Supplier, o.PurchasingOrganization}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Supplier = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{
			SupplierSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierPurchasingOrganizationData: SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice{o},
		}
	} else {
		related.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData = append(related.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData, o)
	}

	return nil
}

// SapBusinessPartnerSupplierPurchasingOrganizationData retrieves all the records using an executor.
func SapBusinessPartnerSupplierPurchasingOrganizationData(mods ...qm.QueryMod) sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_supplier_purchasing_organization_data`"))
	return sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerSupplierPurchasingOrganizationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerSupplierPurchasingOrganizationDatum(ctx context.Context, exec boil.ContextExecutor, supplier string, purchasingOrganization string, selectCols ...string) (*SapBusinessPartnerSupplierPurchasingOrganizationDatum, error) {
	sapBusinessPartnerSupplierPurchasingOrganizationDatumObj := &SapBusinessPartnerSupplierPurchasingOrganizationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_supplier_purchasing_organization_data` where `Supplier`=? AND `PurchasingOrganization`=?", sel,
	)

	q := queries.Raw(query, supplier, purchasingOrganization)

	err := q.Bind(ctx, exec, sapBusinessPartnerSupplierPurchasingOrganizationDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_supplier_purchasing_organization_data")
	}

	if err = sapBusinessPartnerSupplierPurchasingOrganizationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerSupplierPurchasingOrganizationDatumObj, err
	}

	return sapBusinessPartnerSupplierPurchasingOrganizationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_purchasing_organization_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCache[key]
	sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerSupplierPurchasingOrganizationDatumAllColumns,
			sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithDefault,
			sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_supplier_purchasing_organization_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_supplier_purchasing_organization_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_supplier_purchasing_organization_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_supplier_purchasing_organization_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Supplier,
		o.PurchasingOrganization,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_purchasing_organization_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCacheMut.Lock()
		sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCache[key] = cache
		sapBusinessPartnerSupplierPurchasingOrganizationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerSupplierPurchasingOrganizationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCache[key]
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerSupplierPurchasingOrganizationDatumAllColumns,
			sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_supplier_purchasing_organization_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_supplier_purchasing_organization_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, append(wl, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_supplier_purchasing_organization_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_supplier_purchasing_organization_data")
	}

	if !cached {
		sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCacheMut.Lock()
		sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCache[key] = cache
		sapBusinessPartnerSupplierPurchasingOrganizationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_supplier_purchasing_organization_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_supplier_purchasing_organization_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_supplier_purchasing_organization_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerSupplierPurchasingOrganizationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerSupplierPurchasingOrganizationDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerSupplierPurchasingOrganizationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_purchasing_organization_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerSupplierPurchasingOrganizationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCache[key]
	sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerSupplierPurchasingOrganizationDatumAllColumns,
			sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithDefault,
			sapBusinessPartnerSupplierPurchasingOrganizationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerSupplierPurchasingOrganizationDatumAllColumns,
			sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_supplier_purchasing_organization_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_supplier_purchasing_organization_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_supplier_purchasing_organization_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_supplier_purchasing_organization_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerSupplierPurchasingOrganizationDatumType, sapBusinessPartnerSupplierPurchasingOrganizationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_supplier_purchasing_organization_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_purchasing_organization_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCacheMut.Lock()
		sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCache[key] = cache
		sapBusinessPartnerSupplierPurchasingOrganizationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerSupplierPurchasingOrganizationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerSupplierPurchasingOrganizationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_supplier_purchasing_organization_data` WHERE `Supplier`=? AND `PurchasingOrganization`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_supplier_purchasing_organization_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_supplier_purchasing_organization_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_supplier_purchasing_organization_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_purchasing_organization_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerSupplierPurchasingOrganizationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_supplier_purchasing_organization_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerSupplierPurchasingOrganizationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_purchasing_organization_data")
	}

	if len(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerSupplierPurchasingOrganizationDatum(ctx, exec, o.Supplier, o.PurchasingOrganization)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_supplier_purchasing_organization_data`.* FROM `sap_business_partner_supplier_purchasing_organization_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerSupplierPurchasingOrganizationDatumExists checks if the SapBusinessPartnerSupplierPurchasingOrganizationDatum row exists.
func SapBusinessPartnerSupplierPurchasingOrganizationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplier string, purchasingOrganization string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_supplier_purchasing_organization_data` where `Supplier`=? AND `PurchasingOrganization`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplier, purchasingOrganization)
	}
	row := exec.QueryRowContext(ctx, sql, supplier, purchasingOrganization)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_supplier_purchasing_organization_data exists")
	}

	return exists, nil
}
