// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseOrderItemScheduleLineDatum is an object representing the database table.
type SapPurchaseOrderItemScheduleLineDatum struct {
	PurchasingDocument            string      `boil:"PurchasingDocument" json:"PurchasingDocument" toml:"PurchasingDocument" yaml:"PurchasingDocument"`
	PurchasingDocumentItem        string      `boil:"PurchasingDocumentItem" json:"PurchasingDocumentItem" toml:"PurchasingDocumentItem" yaml:"PurchasingDocumentItem"`
	ScheduleLine                  string      `boil:"ScheduleLine" json:"ScheduleLine" toml:"ScheduleLine" yaml:"ScheduleLine"`
	DelivDateCategory             null.String `boil:"DelivDateCategory" json:"DelivDateCategory,omitempty" toml:"DelivDateCategory" yaml:"DelivDateCategory,omitempty"`
	ScheduleLineDeliveryDate      null.String `boil:"ScheduleLineDeliveryDate" json:"ScheduleLineDeliveryDate,omitempty" toml:"ScheduleLineDeliveryDate" yaml:"ScheduleLineDeliveryDate,omitempty"`
	PurchaseOrderQuantityUnit     null.String `boil:"PurchaseOrderQuantityUnit" json:"PurchaseOrderQuantityUnit,omitempty" toml:"PurchaseOrderQuantityUnit" yaml:"PurchaseOrderQuantityUnit,omitempty"`
	ScheduleLineOrderQuantity     null.String `boil:"ScheduleLineOrderQuantity" json:"ScheduleLineOrderQuantity,omitempty" toml:"ScheduleLineOrderQuantity" yaml:"ScheduleLineOrderQuantity,omitempty"`
	ScheduleLineDeliveryTime      null.String `boil:"ScheduleLineDeliveryTime" json:"ScheduleLineDeliveryTime,omitempty" toml:"ScheduleLineDeliveryTime" yaml:"ScheduleLineDeliveryTime,omitempty"`
	PurchaseRequisition           null.String `boil:"PurchaseRequisition" json:"PurchaseRequisition,omitempty" toml:"PurchaseRequisition" yaml:"PurchaseRequisition,omitempty"`
	PurchaseRequisitionItem       null.String `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem,omitempty" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem,omitempty"`
	ScheduleLineCommittedQuantity null.String `boil:"ScheduleLineCommittedQuantity" json:"ScheduleLineCommittedQuantity,omitempty" toml:"ScheduleLineCommittedQuantity" yaml:"ScheduleLineCommittedQuantity,omitempty"`

	R *sapPurchaseOrderItemScheduleLineDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseOrderItemScheduleLineDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseOrderItemScheduleLineDatumColumns = struct {
	PurchasingDocument            string
	PurchasingDocumentItem        string
	ScheduleLine                  string
	DelivDateCategory             string
	ScheduleLineDeliveryDate      string
	PurchaseOrderQuantityUnit     string
	ScheduleLineOrderQuantity     string
	ScheduleLineDeliveryTime      string
	PurchaseRequisition           string
	PurchaseRequisitionItem       string
	ScheduleLineCommittedQuantity string
}{
	PurchasingDocument:            "PurchasingDocument",
	PurchasingDocumentItem:        "PurchasingDocumentItem",
	ScheduleLine:                  "ScheduleLine",
	DelivDateCategory:             "DelivDateCategory",
	ScheduleLineDeliveryDate:      "ScheduleLineDeliveryDate",
	PurchaseOrderQuantityUnit:     "PurchaseOrderQuantityUnit",
	ScheduleLineOrderQuantity:     "ScheduleLineOrderQuantity",
	ScheduleLineDeliveryTime:      "ScheduleLineDeliveryTime",
	PurchaseRequisition:           "PurchaseRequisition",
	PurchaseRequisitionItem:       "PurchaseRequisitionItem",
	ScheduleLineCommittedQuantity: "ScheduleLineCommittedQuantity",
}

var SapPurchaseOrderItemScheduleLineDatumTableColumns = struct {
	PurchasingDocument            string
	PurchasingDocumentItem        string
	ScheduleLine                  string
	DelivDateCategory             string
	ScheduleLineDeliveryDate      string
	PurchaseOrderQuantityUnit     string
	ScheduleLineOrderQuantity     string
	ScheduleLineDeliveryTime      string
	PurchaseRequisition           string
	PurchaseRequisitionItem       string
	ScheduleLineCommittedQuantity string
}{
	PurchasingDocument:            "sap_purchase_order_item_schedule_line_data.PurchasingDocument",
	PurchasingDocumentItem:        "sap_purchase_order_item_schedule_line_data.PurchasingDocumentItem",
	ScheduleLine:                  "sap_purchase_order_item_schedule_line_data.ScheduleLine",
	DelivDateCategory:             "sap_purchase_order_item_schedule_line_data.DelivDateCategory",
	ScheduleLineDeliveryDate:      "sap_purchase_order_item_schedule_line_data.ScheduleLineDeliveryDate",
	PurchaseOrderQuantityUnit:     "sap_purchase_order_item_schedule_line_data.PurchaseOrderQuantityUnit",
	ScheduleLineOrderQuantity:     "sap_purchase_order_item_schedule_line_data.ScheduleLineOrderQuantity",
	ScheduleLineDeliveryTime:      "sap_purchase_order_item_schedule_line_data.ScheduleLineDeliveryTime",
	PurchaseRequisition:           "sap_purchase_order_item_schedule_line_data.PurchaseRequisition",
	PurchaseRequisitionItem:       "sap_purchase_order_item_schedule_line_data.PurchaseRequisitionItem",
	ScheduleLineCommittedQuantity: "sap_purchase_order_item_schedule_line_data.ScheduleLineCommittedQuantity",
}

// Generated where

var SapPurchaseOrderItemScheduleLineDatumWhere = struct {
	PurchasingDocument            whereHelperstring
	PurchasingDocumentItem        whereHelperstring
	ScheduleLine                  whereHelperstring
	DelivDateCategory             whereHelpernull_String
	ScheduleLineDeliveryDate      whereHelpernull_String
	PurchaseOrderQuantityUnit     whereHelpernull_String
	ScheduleLineOrderQuantity     whereHelpernull_String
	ScheduleLineDeliveryTime      whereHelpernull_String
	PurchaseRequisition           whereHelpernull_String
	PurchaseRequisitionItem       whereHelpernull_String
	ScheduleLineCommittedQuantity whereHelpernull_String
}{
	PurchasingDocument:            whereHelperstring{field: "`sap_purchase_order_item_schedule_line_data`.`PurchasingDocument`"},
	PurchasingDocumentItem:        whereHelperstring{field: "`sap_purchase_order_item_schedule_line_data`.`PurchasingDocumentItem`"},
	ScheduleLine:                  whereHelperstring{field: "`sap_purchase_order_item_schedule_line_data`.`ScheduleLine`"},
	DelivDateCategory:             whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`DelivDateCategory`"},
	ScheduleLineDeliveryDate:      whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`ScheduleLineDeliveryDate`"},
	PurchaseOrderQuantityUnit:     whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`PurchaseOrderQuantityUnit`"},
	ScheduleLineOrderQuantity:     whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`ScheduleLineOrderQuantity`"},
	ScheduleLineDeliveryTime:      whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`ScheduleLineDeliveryTime`"},
	PurchaseRequisition:           whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`PurchaseRequisition`"},
	PurchaseRequisitionItem:       whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`PurchaseRequisitionItem`"},
	ScheduleLineCommittedQuantity: whereHelpernull_String{field: "`sap_purchase_order_item_schedule_line_data`.`ScheduleLineCommittedQuantity`"},
}

// SapPurchaseOrderItemScheduleLineDatumRels is where relationship names are stored.
var SapPurchaseOrderItemScheduleLineDatumRels = struct {
	PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress string
}{
	PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress: "PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress",
}

// sapPurchaseOrderItemScheduleLineDatumR is where relationships are stored.
type sapPurchaseOrderItemScheduleLineDatumR struct {
	PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress *SapPurchaseOrderHeaderDataWithAddress `boil:"PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress" json:"PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress" toml:"PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress" yaml:"PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseOrderItemScheduleLineDatumR) NewStruct() *sapPurchaseOrderItemScheduleLineDatumR {
	return &sapPurchaseOrderItemScheduleLineDatumR{}
}

func (r *sapPurchaseOrderItemScheduleLineDatumR) GetPurchasingDocumentSapPurchaseOrderHeaderDataWithAddress() *SapPurchaseOrderHeaderDataWithAddress {
	if r == nil {
		return nil
	}
	return r.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress
}

// sapPurchaseOrderItemScheduleLineDatumL is where Load methods for each relationship are stored.
type sapPurchaseOrderItemScheduleLineDatumL struct{}

var (
	sapPurchaseOrderItemScheduleLineDatumAllColumns            = []string{"PurchasingDocument", "PurchasingDocumentItem", "ScheduleLine", "DelivDateCategory", "ScheduleLineDeliveryDate", "PurchaseOrderQuantityUnit", "ScheduleLineOrderQuantity", "ScheduleLineDeliveryTime", "PurchaseRequisition", "PurchaseRequisitionItem", "ScheduleLineCommittedQuantity"}
	sapPurchaseOrderItemScheduleLineDatumColumnsWithoutDefault = []string{"PurchasingDocument", "PurchasingDocumentItem", "ScheduleLine", "DelivDateCategory", "ScheduleLineDeliveryDate", "PurchaseOrderQuantityUnit", "ScheduleLineOrderQuantity", "ScheduleLineDeliveryTime", "PurchaseRequisition", "PurchaseRequisitionItem", "ScheduleLineCommittedQuantity"}
	sapPurchaseOrderItemScheduleLineDatumColumnsWithDefault    = []string{}
	sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns     = []string{"PurchasingDocument", "PurchasingDocumentItem", "ScheduleLine"}
	sapPurchaseOrderItemScheduleLineDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseOrderItemScheduleLineDatumSlice is an alias for a slice of pointers to SapPurchaseOrderItemScheduleLineDatum.
	// This should almost always be used instead of []SapPurchaseOrderItemScheduleLineDatum.
	SapPurchaseOrderItemScheduleLineDatumSlice []*SapPurchaseOrderItemScheduleLineDatum
	// SapPurchaseOrderItemScheduleLineDatumHook is the signature for custom SapPurchaseOrderItemScheduleLineDatum hook methods
	SapPurchaseOrderItemScheduleLineDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseOrderItemScheduleLineDatum) error

	sapPurchaseOrderItemScheduleLineDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseOrderItemScheduleLineDatumType                 = reflect.TypeOf(&SapPurchaseOrderItemScheduleLineDatum{})
	sapPurchaseOrderItemScheduleLineDatumMapping              = queries.MakeStructMapping(sapPurchaseOrderItemScheduleLineDatumType)
	sapPurchaseOrderItemScheduleLineDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns)
	sapPurchaseOrderItemScheduleLineDatumInsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemScheduleLineDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseOrderItemScheduleLineDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseOrderItemScheduleLineDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseOrderItemScheduleLineDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemScheduleLineDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks []SapPurchaseOrderItemScheduleLineDatumHook

var sapPurchaseOrderItemScheduleLineDatumBeforeInsertHooks []SapPurchaseOrderItemScheduleLineDatumHook
var sapPurchaseOrderItemScheduleLineDatumAfterInsertHooks []SapPurchaseOrderItemScheduleLineDatumHook

var sapPurchaseOrderItemScheduleLineDatumBeforeUpdateHooks []SapPurchaseOrderItemScheduleLineDatumHook
var sapPurchaseOrderItemScheduleLineDatumAfterUpdateHooks []SapPurchaseOrderItemScheduleLineDatumHook

var sapPurchaseOrderItemScheduleLineDatumBeforeDeleteHooks []SapPurchaseOrderItemScheduleLineDatumHook
var sapPurchaseOrderItemScheduleLineDatumAfterDeleteHooks []SapPurchaseOrderItemScheduleLineDatumHook

var sapPurchaseOrderItemScheduleLineDatumBeforeUpsertHooks []SapPurchaseOrderItemScheduleLineDatumHook
var sapPurchaseOrderItemScheduleLineDatumAfterUpsertHooks []SapPurchaseOrderItemScheduleLineDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseOrderItemScheduleLineDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemScheduleLineDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseOrderItemScheduleLineDatumHook registers your hook function for all future operations.
func AddSapPurchaseOrderItemScheduleLineDatumHook(hookPoint boil.HookPoint, sapPurchaseOrderItemScheduleLineDatumHook SapPurchaseOrderItemScheduleLineDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks = append(sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseOrderItemScheduleLineDatumBeforeInsertHooks = append(sapPurchaseOrderItemScheduleLineDatumBeforeInsertHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseOrderItemScheduleLineDatumAfterInsertHooks = append(sapPurchaseOrderItemScheduleLineDatumAfterInsertHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseOrderItemScheduleLineDatumBeforeUpdateHooks = append(sapPurchaseOrderItemScheduleLineDatumBeforeUpdateHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseOrderItemScheduleLineDatumAfterUpdateHooks = append(sapPurchaseOrderItemScheduleLineDatumAfterUpdateHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseOrderItemScheduleLineDatumBeforeDeleteHooks = append(sapPurchaseOrderItemScheduleLineDatumBeforeDeleteHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseOrderItemScheduleLineDatumAfterDeleteHooks = append(sapPurchaseOrderItemScheduleLineDatumAfterDeleteHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseOrderItemScheduleLineDatumBeforeUpsertHooks = append(sapPurchaseOrderItemScheduleLineDatumBeforeUpsertHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseOrderItemScheduleLineDatumAfterUpsertHooks = append(sapPurchaseOrderItemScheduleLineDatumAfterUpsertHooks, sapPurchaseOrderItemScheduleLineDatumHook)
	}
}

// One returns a single sapPurchaseOrderItemScheduleLineDatum record from the query.
func (q sapPurchaseOrderItemScheduleLineDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseOrderItemScheduleLineDatum, error) {
	o := &SapPurchaseOrderItemScheduleLineDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_order_item_schedule_line_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseOrderItemScheduleLineDatum records from the query.
func (q sapPurchaseOrderItemScheduleLineDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseOrderItemScheduleLineDatumSlice, error) {
	var o []*SapPurchaseOrderItemScheduleLineDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseOrderItemScheduleLineDatum slice")
	}

	if len(sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseOrderItemScheduleLineDatum records in the query.
func (q sapPurchaseOrderItemScheduleLineDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_order_item_schedule_line_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseOrderItemScheduleLineDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_order_item_schedule_line_data exists")
	}

	return count > 0, nil
}

// PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress pointed to by the foreign key.
func (o *SapPurchaseOrderItemScheduleLineDatum) PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress(mods ...qm.QueryMod) sapPurchaseOrderHeaderDataWithAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseOrder` = ?", o.PurchasingDocument),
	}

	queryMods = append(queryMods, mods...)

	return SapPurchaseOrderHeaderDataWithAddresses(queryMods...)
}

// LoadPurchasingDocumentSapPurchaseOrderHeaderDataWithAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseOrderItemScheduleLineDatumL) LoadPurchasingDocumentSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderItemScheduleLineDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderItemScheduleLineDatum
	var object *SapPurchaseOrderItemScheduleLineDatum

	if singular {
		object = maybeSapPurchaseOrderItemScheduleLineDatum.(*SapPurchaseOrderItemScheduleLineDatum)
	} else {
		slice = *maybeSapPurchaseOrderItemScheduleLineDatum.(*[]*SapPurchaseOrderItemScheduleLineDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderItemScheduleLineDatumR{}
		}
		args = append(args, object.PurchasingDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderItemScheduleLineDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchasingDocument {
					continue Outer
				}
			}

			args = append(args, obj.PurchasingDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_header_data_with_address`),
		qm.WhereIn(`sap_purchase_order_header_data_with_address.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseOrderHeaderDataWithAddress")
	}

	var resultSlice []*SapPurchaseOrderHeaderDataWithAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseOrderHeaderDataWithAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_order_header_data_with_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_header_data_with_address")
	}

	if len(sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		foreign.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData = append(foreign.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchasingDocument == foreign.PurchaseOrder {
				local.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
				}
				foreign.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData = append(foreign.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchasingDocumentSapPurchaseOrderHeaderDataWithAddress of the sapPurchaseOrderItemScheduleLineDatum to the related item.
// Sets o.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress to related.
// Adds o to related.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData.
func (o *SapPurchaseOrderItemScheduleLineDatum) SetPurchasingDocumentSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseOrderHeaderDataWithAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_order_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchasingDocument"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseOrder, o.PurchasingDocument, o.PurchasingDocumentItem, o.ScheduleLine}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchasingDocument = related.PurchaseOrder
	if o.R == nil {
		o.R = &sapPurchaseOrderItemScheduleLineDatumR{
			PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress: related,
		}
	} else {
		o.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress = related
	}

	if related.R == nil {
		related.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchasingDocumentSapPurchaseOrderItemScheduleLineData: SapPurchaseOrderItemScheduleLineDatumSlice{o},
		}
	} else {
		related.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData = append(related.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData, o)
	}

	return nil
}

// SapPurchaseOrderItemScheduleLineData retrieves all the records using an executor.
func SapPurchaseOrderItemScheduleLineData(mods ...qm.QueryMod) sapPurchaseOrderItemScheduleLineDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_order_item_schedule_line_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_purchase_order_item_schedule_line_data`.*"})
	}

	return sapPurchaseOrderItemScheduleLineDatumQuery{q}
}

// FindSapPurchaseOrderItemScheduleLineDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseOrderItemScheduleLineDatum(ctx context.Context, exec boil.ContextExecutor, purchasingDocument string, purchasingDocumentItem string, scheduleLine string, selectCols ...string) (*SapPurchaseOrderItemScheduleLineDatum, error) {
	sapPurchaseOrderItemScheduleLineDatumObj := &SapPurchaseOrderItemScheduleLineDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_order_item_schedule_line_data` where `PurchasingDocument`=? AND `PurchasingDocumentItem`=? AND `ScheduleLine`=?", sel,
	)

	q := queries.Raw(query, purchasingDocument, purchasingDocumentItem, scheduleLine)

	err := q.Bind(ctx, exec, sapPurchaseOrderItemScheduleLineDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_order_item_schedule_line_data")
	}

	if err = sapPurchaseOrderItemScheduleLineDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseOrderItemScheduleLineDatumObj, err
	}

	return sapPurchaseOrderItemScheduleLineDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseOrderItemScheduleLineDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_schedule_line_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemScheduleLineDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseOrderItemScheduleLineDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemScheduleLineDatumInsertCache[key]
	sapPurchaseOrderItemScheduleLineDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseOrderItemScheduleLineDatumAllColumns,
			sapPurchaseOrderItemScheduleLineDatumColumnsWithDefault,
			sapPurchaseOrderItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_order_item_schedule_line_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_order_item_schedule_line_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_order_item_schedule_line_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_order_item_schedule_line_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchasingDocument,
		o.PurchasingDocumentItem,
		o.ScheduleLine,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemScheduleLineDatumInsertCacheMut.Lock()
		sapPurchaseOrderItemScheduleLineDatumInsertCache[key] = cache
		sapPurchaseOrderItemScheduleLineDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseOrderItemScheduleLineDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseOrderItemScheduleLineDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseOrderItemScheduleLineDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemScheduleLineDatumUpdateCache[key]
	sapPurchaseOrderItemScheduleLineDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseOrderItemScheduleLineDatumAllColumns,
			sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_order_item_schedule_line_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_order_item_schedule_line_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, append(wl, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_order_item_schedule_line_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_order_item_schedule_line_data")
	}

	if !cached {
		sapPurchaseOrderItemScheduleLineDatumUpdateCacheMut.Lock()
		sapPurchaseOrderItemScheduleLineDatumUpdateCache[key] = cache
		sapPurchaseOrderItemScheduleLineDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseOrderItemScheduleLineDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_order_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_order_item_schedule_line_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseOrderItemScheduleLineDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_order_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseOrderItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseOrderItemScheduleLineDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseOrderItemScheduleLineDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseOrderItemScheduleLineDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_schedule_line_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemScheduleLineDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseOrderItemScheduleLineDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseOrderItemScheduleLineDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemScheduleLineDatumUpsertCache[key]
	sapPurchaseOrderItemScheduleLineDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseOrderItemScheduleLineDatumAllColumns,
			sapPurchaseOrderItemScheduleLineDatumColumnsWithDefault,
			sapPurchaseOrderItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseOrderItemScheduleLineDatumAllColumns,
			sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_order_item_schedule_line_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_order_item_schedule_line_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_order_item_schedule_line_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_order_item_schedule_line_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseOrderItemScheduleLineDatumType, sapPurchaseOrderItemScheduleLineDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_order_item_schedule_line_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemScheduleLineDatumUpsertCacheMut.Lock()
		sapPurchaseOrderItemScheduleLineDatumUpsertCache[key] = cache
		sapPurchaseOrderItemScheduleLineDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseOrderItemScheduleLineDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseOrderItemScheduleLineDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseOrderItemScheduleLineDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseOrderItemScheduleLineDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_order_item_schedule_line_data` WHERE `PurchasingDocument`=? AND `PurchasingDocumentItem`=? AND `ScheduleLine`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_order_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_order_item_schedule_line_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseOrderItemScheduleLineDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseOrderItemScheduleLineDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_order_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_schedule_line_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseOrderItemScheduleLineDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseOrderItemScheduleLineDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_order_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseOrderItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_schedule_line_data")
	}

	if len(sapPurchaseOrderItemScheduleLineDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseOrderItemScheduleLineDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseOrderItemScheduleLineDatum(ctx, exec, o.PurchasingDocument, o.PurchasingDocumentItem, o.ScheduleLine)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseOrderItemScheduleLineDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseOrderItemScheduleLineDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_order_item_schedule_line_data`.* FROM `sap_purchase_order_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseOrderItemScheduleLineDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseOrderItemScheduleLineDatumExists checks if the SapPurchaseOrderItemScheduleLineDatum row exists.
func SapPurchaseOrderItemScheduleLineDatumExists(ctx context.Context, exec boil.ContextExecutor, purchasingDocument string, purchasingDocumentItem string, scheduleLine string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_order_item_schedule_line_data` where `PurchasingDocument`=? AND `PurchasingDocumentItem`=? AND `ScheduleLine`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchasingDocument, purchasingDocumentItem, scheduleLine)
	}
	row := exec.QueryRowContext(ctx, sql, purchasingDocument, purchasingDocumentItem, scheduleLine)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_order_item_schedule_line_data exists")
	}

	return exists, nil
}
