// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPlannedIndependentRequirementItemDatum is an object representing the database table.
type SapPlannedIndependentRequirementItemDatum struct {
	Product                       string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                         string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	MRPArea                       string      `boil:"MRPArea" json:"MRPArea" toml:"MRPArea" yaml:"MRPArea"`
	PlndIndepRqmtType             string      `boil:"PlndIndepRqmtType" json:"PlndIndepRqmtType" toml:"PlndIndepRqmtType" yaml:"PlndIndepRqmtType"`
	PlndIndepRqmtVersion          string      `boil:"PlndIndepRqmtVersion" json:"PlndIndepRqmtVersion" toml:"PlndIndepRqmtVersion" yaml:"PlndIndepRqmtVersion"`
	RequirementPlan               string      `boil:"RequirementPlan" json:"RequirementPlan" toml:"RequirementPlan" yaml:"RequirementPlan"`
	RequirementSegment            string      `boil:"RequirementSegment" json:"RequirementSegment" toml:"RequirementSegment" yaml:"RequirementSegment"`
	UpdateMc                      null.Bool   `boil:"UpdateMc" json:"UpdateMc,omitempty" toml:"UpdateMc" yaml:"UpdateMc,omitempty"`
	PlndIndepRqmtPeriod           null.String `boil:"PlndIndepRqmtPeriod" json:"PlndIndepRqmtPeriod,omitempty" toml:"PlndIndepRqmtPeriod" yaml:"PlndIndepRqmtPeriod,omitempty"`
	PeriodType                    null.String `boil:"PeriodType" json:"PeriodType,omitempty" toml:"PeriodType" yaml:"PeriodType,omitempty"`
	PlndIndepRqmtPeriodStartDate  null.String `boil:"PlndIndepRqmtPeriodStartDate" json:"PlndIndepRqmtPeriodStartDate,omitempty" toml:"PlndIndepRqmtPeriodStartDate" yaml:"PlndIndepRqmtPeriodStartDate,omitempty"`
	PlndIndepRqmtInternalID       null.String `boil:"PlndIndepRqmtInternalID" json:"PlndIndepRqmtInternalID,omitempty" toml:"PlndIndepRqmtInternalID" yaml:"PlndIndepRqmtInternalID,omitempty"`
	WorkingDayDate                null.String `boil:"WorkingDayDate" json:"WorkingDayDate,omitempty" toml:"WorkingDayDate" yaml:"WorkingDayDate,omitempty"`
	PlannedQuantity               null.String `boil:"PlannedQuantity" json:"PlannedQuantity,omitempty" toml:"PlannedQuantity" yaml:"PlannedQuantity,omitempty"`
	WithdrawalQuantity            null.String `boil:"WithdrawalQuantity" json:"WithdrawalQuantity,omitempty" toml:"WithdrawalQuantity" yaml:"WithdrawalQuantity,omitempty"`
	UnitOfMeasure                 null.String `boil:"UnitOfMeasure" json:"UnitOfMeasure,omitempty" toml:"UnitOfMeasure" yaml:"UnitOfMeasure,omitempty"`
	LastChangedByUser             null.String `boil:"LastChangedByUser" json:"LastChangedByUser,omitempty" toml:"LastChangedByUser" yaml:"LastChangedByUser,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	PlndIndepRqmtLastChgdDateTime null.String `boil:"PlndIndepRqmtLastChgdDateTime" json:"PlndIndepRqmtLastChgdDateTime,omitempty" toml:"PlndIndepRqmtLastChgdDateTime" yaml:"PlndIndepRqmtLastChgdDateTime,omitempty"`

	R *sapPlannedIndependentRequirementItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPlannedIndependentRequirementItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPlannedIndependentRequirementItemDatumColumns = struct {
	Product                       string
	Plant                         string
	MRPArea                       string
	PlndIndepRqmtType             string
	PlndIndepRqmtVersion          string
	RequirementPlan               string
	RequirementSegment            string
	UpdateMc                      string
	PlndIndepRqmtPeriod           string
	PeriodType                    string
	PlndIndepRqmtPeriodStartDate  string
	PlndIndepRqmtInternalID       string
	WorkingDayDate                string
	PlannedQuantity               string
	WithdrawalQuantity            string
	UnitOfMeasure                 string
	LastChangedByUser             string
	LastChangeDate                string
	PlndIndepRqmtLastChgdDateTime string
}{
	Product:                       "Product",
	Plant:                         "Plant",
	MRPArea:                       "MRPArea",
	PlndIndepRqmtType:             "PlndIndepRqmtType",
	PlndIndepRqmtVersion:          "PlndIndepRqmtVersion",
	RequirementPlan:               "RequirementPlan",
	RequirementSegment:            "RequirementSegment",
	UpdateMc:                      "UpdateMc",
	PlndIndepRqmtPeriod:           "PlndIndepRqmtPeriod",
	PeriodType:                    "PeriodType",
	PlndIndepRqmtPeriodStartDate:  "PlndIndepRqmtPeriodStartDate",
	PlndIndepRqmtInternalID:       "PlndIndepRqmtInternalID",
	WorkingDayDate:                "WorkingDayDate",
	PlannedQuantity:               "PlannedQuantity",
	WithdrawalQuantity:            "WithdrawalQuantity",
	UnitOfMeasure:                 "UnitOfMeasure",
	LastChangedByUser:             "LastChangedByUser",
	LastChangeDate:                "LastChangeDate",
	PlndIndepRqmtLastChgdDateTime: "PlndIndepRqmtLastChgdDateTime",
}

var SapPlannedIndependentRequirementItemDatumTableColumns = struct {
	Product                       string
	Plant                         string
	MRPArea                       string
	PlndIndepRqmtType             string
	PlndIndepRqmtVersion          string
	RequirementPlan               string
	RequirementSegment            string
	UpdateMc                      string
	PlndIndepRqmtPeriod           string
	PeriodType                    string
	PlndIndepRqmtPeriodStartDate  string
	PlndIndepRqmtInternalID       string
	WorkingDayDate                string
	PlannedQuantity               string
	WithdrawalQuantity            string
	UnitOfMeasure                 string
	LastChangedByUser             string
	LastChangeDate                string
	PlndIndepRqmtLastChgdDateTime string
}{
	Product:                       "sap_planned_independent_requirement_item_data.Product",
	Plant:                         "sap_planned_independent_requirement_item_data.Plant",
	MRPArea:                       "sap_planned_independent_requirement_item_data.MRPArea",
	PlndIndepRqmtType:             "sap_planned_independent_requirement_item_data.PlndIndepRqmtType",
	PlndIndepRqmtVersion:          "sap_planned_independent_requirement_item_data.PlndIndepRqmtVersion",
	RequirementPlan:               "sap_planned_independent_requirement_item_data.RequirementPlan",
	RequirementSegment:            "sap_planned_independent_requirement_item_data.RequirementSegment",
	UpdateMc:                      "sap_planned_independent_requirement_item_data.UpdateMc",
	PlndIndepRqmtPeriod:           "sap_planned_independent_requirement_item_data.PlndIndepRqmtPeriod",
	PeriodType:                    "sap_planned_independent_requirement_item_data.PeriodType",
	PlndIndepRqmtPeriodStartDate:  "sap_planned_independent_requirement_item_data.PlndIndepRqmtPeriodStartDate",
	PlndIndepRqmtInternalID:       "sap_planned_independent_requirement_item_data.PlndIndepRqmtInternalID",
	WorkingDayDate:                "sap_planned_independent_requirement_item_data.WorkingDayDate",
	PlannedQuantity:               "sap_planned_independent_requirement_item_data.PlannedQuantity",
	WithdrawalQuantity:            "sap_planned_independent_requirement_item_data.WithdrawalQuantity",
	UnitOfMeasure:                 "sap_planned_independent_requirement_item_data.UnitOfMeasure",
	LastChangedByUser:             "sap_planned_independent_requirement_item_data.LastChangedByUser",
	LastChangeDate:                "sap_planned_independent_requirement_item_data.LastChangeDate",
	PlndIndepRqmtLastChgdDateTime: "sap_planned_independent_requirement_item_data.PlndIndepRqmtLastChgdDateTime",
}

// Generated where

var SapPlannedIndependentRequirementItemDatumWhere = struct {
	Product                       whereHelperstring
	Plant                         whereHelperstring
	MRPArea                       whereHelperstring
	PlndIndepRqmtType             whereHelperstring
	PlndIndepRqmtVersion          whereHelperstring
	RequirementPlan               whereHelperstring
	RequirementSegment            whereHelperstring
	UpdateMc                      whereHelpernull_Bool
	PlndIndepRqmtPeriod           whereHelpernull_String
	PeriodType                    whereHelpernull_String
	PlndIndepRqmtPeriodStartDate  whereHelpernull_String
	PlndIndepRqmtInternalID       whereHelpernull_String
	WorkingDayDate                whereHelpernull_String
	PlannedQuantity               whereHelpernull_String
	WithdrawalQuantity            whereHelpernull_String
	UnitOfMeasure                 whereHelpernull_String
	LastChangedByUser             whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	PlndIndepRqmtLastChgdDateTime whereHelpernull_String
}{
	Product:                       whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`Product`"},
	Plant:                         whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`Plant`"},
	MRPArea:                       whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`MRPArea`"},
	PlndIndepRqmtType:             whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`PlndIndepRqmtType`"},
	PlndIndepRqmtVersion:          whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`PlndIndepRqmtVersion`"},
	RequirementPlan:               whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`RequirementPlan`"},
	RequirementSegment:            whereHelperstring{field: "`sap_planned_independent_requirement_item_data`.`RequirementSegment`"},
	UpdateMc:                      whereHelpernull_Bool{field: "`sap_planned_independent_requirement_item_data`.`UpdateMc`"},
	PlndIndepRqmtPeriod:           whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`PlndIndepRqmtPeriod`"},
	PeriodType:                    whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`PeriodType`"},
	PlndIndepRqmtPeriodStartDate:  whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`PlndIndepRqmtPeriodStartDate`"},
	PlndIndepRqmtInternalID:       whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`PlndIndepRqmtInternalID`"},
	WorkingDayDate:                whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`WorkingDayDate`"},
	PlannedQuantity:               whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`PlannedQuantity`"},
	WithdrawalQuantity:            whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`WithdrawalQuantity`"},
	UnitOfMeasure:                 whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`UnitOfMeasure`"},
	LastChangedByUser:             whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`LastChangedByUser`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`LastChangeDate`"},
	PlndIndepRqmtLastChgdDateTime: whereHelpernull_String{field: "`sap_planned_independent_requirement_item_data`.`PlndIndepRqmtLastChgdDateTime`"},
}

// SapPlannedIndependentRequirementItemDatumRels is where relationship names are stored.
var SapPlannedIndependentRequirementItemDatumRels = struct {
}{}

// sapPlannedIndependentRequirementItemDatumR is where relationships are stored.
type sapPlannedIndependentRequirementItemDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapPlannedIndependentRequirementItemDatumR) NewStruct() *sapPlannedIndependentRequirementItemDatumR {
	return &sapPlannedIndependentRequirementItemDatumR{}
}

// sapPlannedIndependentRequirementItemDatumL is where Load methods for each relationship are stored.
type sapPlannedIndependentRequirementItemDatumL struct{}

var (
	sapPlannedIndependentRequirementItemDatumAllColumns            = []string{"Product", "Plant", "MRPArea", "PlndIndepRqmtType", "PlndIndepRqmtVersion", "RequirementPlan", "RequirementSegment", "UpdateMc", "PlndIndepRqmtPeriod", "PeriodType", "PlndIndepRqmtPeriodStartDate", "PlndIndepRqmtInternalID", "WorkingDayDate", "PlannedQuantity", "WithdrawalQuantity", "UnitOfMeasure", "LastChangedByUser", "LastChangeDate", "PlndIndepRqmtLastChgdDateTime"}
	sapPlannedIndependentRequirementItemDatumColumnsWithoutDefault = []string{"Product", "Plant", "MRPArea", "PlndIndepRqmtType", "PlndIndepRqmtVersion", "RequirementPlan", "RequirementSegment", "UpdateMc", "PlndIndepRqmtPeriod", "PeriodType", "PlndIndepRqmtPeriodStartDate", "PlndIndepRqmtInternalID", "WorkingDayDate", "PlannedQuantity", "WithdrawalQuantity", "UnitOfMeasure", "LastChangedByUser", "LastChangeDate", "PlndIndepRqmtLastChgdDateTime"}
	sapPlannedIndependentRequirementItemDatumColumnsWithDefault    = []string{}
	sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns     = []string{"Product", "Plant", "MRPArea", "PlndIndepRqmtType", "PlndIndepRqmtVersion", "RequirementPlan", "RequirementSegment"}
	sapPlannedIndependentRequirementItemDatumGeneratedColumns      = []string{}
)

type (
	// SapPlannedIndependentRequirementItemDatumSlice is an alias for a slice of pointers to SapPlannedIndependentRequirementItemDatum.
	// This should almost always be used instead of []SapPlannedIndependentRequirementItemDatum.
	SapPlannedIndependentRequirementItemDatumSlice []*SapPlannedIndependentRequirementItemDatum
	// SapPlannedIndependentRequirementItemDatumHook is the signature for custom SapPlannedIndependentRequirementItemDatum hook methods
	SapPlannedIndependentRequirementItemDatumHook func(context.Context, boil.ContextExecutor, *SapPlannedIndependentRequirementItemDatum) error

	sapPlannedIndependentRequirementItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPlannedIndependentRequirementItemDatumType                 = reflect.TypeOf(&SapPlannedIndependentRequirementItemDatum{})
	sapPlannedIndependentRequirementItemDatumMapping              = queries.MakeStructMapping(sapPlannedIndependentRequirementItemDatumType)
	sapPlannedIndependentRequirementItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns)
	sapPlannedIndependentRequirementItemDatumInsertCacheMut       sync.RWMutex
	sapPlannedIndependentRequirementItemDatumInsertCache          = make(map[string]insertCache)
	sapPlannedIndependentRequirementItemDatumUpdateCacheMut       sync.RWMutex
	sapPlannedIndependentRequirementItemDatumUpdateCache          = make(map[string]updateCache)
	sapPlannedIndependentRequirementItemDatumUpsertCacheMut       sync.RWMutex
	sapPlannedIndependentRequirementItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPlannedIndependentRequirementItemDatumAfterSelectHooks []SapPlannedIndependentRequirementItemDatumHook

var sapPlannedIndependentRequirementItemDatumBeforeInsertHooks []SapPlannedIndependentRequirementItemDatumHook
var sapPlannedIndependentRequirementItemDatumAfterInsertHooks []SapPlannedIndependentRequirementItemDatumHook

var sapPlannedIndependentRequirementItemDatumBeforeUpdateHooks []SapPlannedIndependentRequirementItemDatumHook
var sapPlannedIndependentRequirementItemDatumAfterUpdateHooks []SapPlannedIndependentRequirementItemDatumHook

var sapPlannedIndependentRequirementItemDatumBeforeDeleteHooks []SapPlannedIndependentRequirementItemDatumHook
var sapPlannedIndependentRequirementItemDatumAfterDeleteHooks []SapPlannedIndependentRequirementItemDatumHook

var sapPlannedIndependentRequirementItemDatumBeforeUpsertHooks []SapPlannedIndependentRequirementItemDatumHook
var sapPlannedIndependentRequirementItemDatumAfterUpsertHooks []SapPlannedIndependentRequirementItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPlannedIndependentRequirementItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPlannedIndependentRequirementItemDatumHook registers your hook function for all future operations.
func AddSapPlannedIndependentRequirementItemDatumHook(hookPoint boil.HookPoint, sapPlannedIndependentRequirementItemDatumHook SapPlannedIndependentRequirementItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPlannedIndependentRequirementItemDatumAfterSelectHooks = append(sapPlannedIndependentRequirementItemDatumAfterSelectHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.BeforeInsertHook:
		sapPlannedIndependentRequirementItemDatumBeforeInsertHooks = append(sapPlannedIndependentRequirementItemDatumBeforeInsertHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.AfterInsertHook:
		sapPlannedIndependentRequirementItemDatumAfterInsertHooks = append(sapPlannedIndependentRequirementItemDatumAfterInsertHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.BeforeUpdateHook:
		sapPlannedIndependentRequirementItemDatumBeforeUpdateHooks = append(sapPlannedIndependentRequirementItemDatumBeforeUpdateHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.AfterUpdateHook:
		sapPlannedIndependentRequirementItemDatumAfterUpdateHooks = append(sapPlannedIndependentRequirementItemDatumAfterUpdateHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.BeforeDeleteHook:
		sapPlannedIndependentRequirementItemDatumBeforeDeleteHooks = append(sapPlannedIndependentRequirementItemDatumBeforeDeleteHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.AfterDeleteHook:
		sapPlannedIndependentRequirementItemDatumAfterDeleteHooks = append(sapPlannedIndependentRequirementItemDatumAfterDeleteHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.BeforeUpsertHook:
		sapPlannedIndependentRequirementItemDatumBeforeUpsertHooks = append(sapPlannedIndependentRequirementItemDatumBeforeUpsertHooks, sapPlannedIndependentRequirementItemDatumHook)
	case boil.AfterUpsertHook:
		sapPlannedIndependentRequirementItemDatumAfterUpsertHooks = append(sapPlannedIndependentRequirementItemDatumAfterUpsertHooks, sapPlannedIndependentRequirementItemDatumHook)
	}
}

// One returns a single sapPlannedIndependentRequirementItemDatum record from the query.
func (q sapPlannedIndependentRequirementItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPlannedIndependentRequirementItemDatum, error) {
	o := &SapPlannedIndependentRequirementItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_planned_independent_requirement_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPlannedIndependentRequirementItemDatum records from the query.
func (q sapPlannedIndependentRequirementItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPlannedIndependentRequirementItemDatumSlice, error) {
	var o []*SapPlannedIndependentRequirementItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPlannedIndependentRequirementItemDatum slice")
	}

	if len(sapPlannedIndependentRequirementItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPlannedIndependentRequirementItemDatum records in the query.
func (q sapPlannedIndependentRequirementItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_planned_independent_requirement_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPlannedIndependentRequirementItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_planned_independent_requirement_item_data exists")
	}

	return count > 0, nil
}

// SapPlannedIndependentRequirementItemData retrieves all the records using an executor.
func SapPlannedIndependentRequirementItemData(mods ...qm.QueryMod) sapPlannedIndependentRequirementItemDatumQuery {
	mods = append(mods, qm.From("`sap_planned_independent_requirement_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_planned_independent_requirement_item_data`.*"})
	}

	return sapPlannedIndependentRequirementItemDatumQuery{q}
}

// FindSapPlannedIndependentRequirementItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPlannedIndependentRequirementItemDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, mRPArea string, plndIndepRqmtType string, plndIndepRqmtVersion string, requirementPlan string, requirementSegment string, selectCols ...string) (*SapPlannedIndependentRequirementItemDatum, error) {
	sapPlannedIndependentRequirementItemDatumObj := &SapPlannedIndependentRequirementItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_planned_independent_requirement_item_data` where `Product`=? AND `Plant`=? AND `MRPArea`=? AND `PlndIndepRqmtType`=? AND `PlndIndepRqmtVersion`=? AND `RequirementPlan`=? AND `RequirementSegment`=?", sel,
	)

	q := queries.Raw(query, product, plant, mRPArea, plndIndepRqmtType, plndIndepRqmtVersion, requirementPlan, requirementSegment)

	err := q.Bind(ctx, exec, sapPlannedIndependentRequirementItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_planned_independent_requirement_item_data")
	}

	if err = sapPlannedIndependentRequirementItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPlannedIndependentRequirementItemDatumObj, err
	}

	return sapPlannedIndependentRequirementItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPlannedIndependentRequirementItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_independent_requirement_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedIndependentRequirementItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPlannedIndependentRequirementItemDatumInsertCacheMut.RLock()
	cache, cached := sapPlannedIndependentRequirementItemDatumInsertCache[key]
	sapPlannedIndependentRequirementItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPlannedIndependentRequirementItemDatumAllColumns,
			sapPlannedIndependentRequirementItemDatumColumnsWithDefault,
			sapPlannedIndependentRequirementItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_planned_independent_requirement_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_planned_independent_requirement_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_planned_independent_requirement_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_planned_independent_requirement_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
		o.MRPArea,
		o.PlndIndepRqmtType,
		o.PlndIndepRqmtVersion,
		o.RequirementPlan,
		o.RequirementSegment,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_independent_requirement_item_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedIndependentRequirementItemDatumInsertCacheMut.Lock()
		sapPlannedIndependentRequirementItemDatumInsertCache[key] = cache
		sapPlannedIndependentRequirementItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPlannedIndependentRequirementItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPlannedIndependentRequirementItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPlannedIndependentRequirementItemDatumUpdateCacheMut.RLock()
	cache, cached := sapPlannedIndependentRequirementItemDatumUpdateCache[key]
	sapPlannedIndependentRequirementItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPlannedIndependentRequirementItemDatumAllColumns,
			sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_planned_independent_requirement_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_planned_independent_requirement_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, append(wl, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_planned_independent_requirement_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_planned_independent_requirement_item_data")
	}

	if !cached {
		sapPlannedIndependentRequirementItemDatumUpdateCacheMut.Lock()
		sapPlannedIndependentRequirementItemDatumUpdateCache[key] = cache
		sapPlannedIndependentRequirementItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPlannedIndependentRequirementItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_planned_independent_requirement_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_planned_independent_requirement_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPlannedIndependentRequirementItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedIndependentRequirementItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_planned_independent_requirement_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPlannedIndependentRequirementItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPlannedIndependentRequirementItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapPlannedIndependentRequirementItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPlannedIndependentRequirementItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_independent_requirement_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedIndependentRequirementItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPlannedIndependentRequirementItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPlannedIndependentRequirementItemDatumUpsertCacheMut.RLock()
	cache, cached := sapPlannedIndependentRequirementItemDatumUpsertCache[key]
	sapPlannedIndependentRequirementItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPlannedIndependentRequirementItemDatumAllColumns,
			sapPlannedIndependentRequirementItemDatumColumnsWithDefault,
			sapPlannedIndependentRequirementItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPlannedIndependentRequirementItemDatumAllColumns,
			sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_planned_independent_requirement_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_planned_independent_requirement_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_planned_independent_requirement_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_planned_independent_requirement_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPlannedIndependentRequirementItemDatumType, sapPlannedIndependentRequirementItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_planned_independent_requirement_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_independent_requirement_item_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedIndependentRequirementItemDatumUpsertCacheMut.Lock()
		sapPlannedIndependentRequirementItemDatumUpsertCache[key] = cache
		sapPlannedIndependentRequirementItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPlannedIndependentRequirementItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPlannedIndependentRequirementItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPlannedIndependentRequirementItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPlannedIndependentRequirementItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_planned_independent_requirement_item_data` WHERE `Product`=? AND `Plant`=? AND `MRPArea`=? AND `PlndIndepRqmtType`=? AND `PlndIndepRqmtVersion`=? AND `RequirementPlan`=? AND `RequirementSegment`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_planned_independent_requirement_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_planned_independent_requirement_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPlannedIndependentRequirementItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPlannedIndependentRequirementItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_planned_independent_requirement_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_independent_requirement_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPlannedIndependentRequirementItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPlannedIndependentRequirementItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedIndependentRequirementItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_planned_independent_requirement_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPlannedIndependentRequirementItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_independent_requirement_item_data")
	}

	if len(sapPlannedIndependentRequirementItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPlannedIndependentRequirementItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPlannedIndependentRequirementItemDatum(ctx, exec, o.Product, o.Plant, o.MRPArea, o.PlndIndepRqmtType, o.PlndIndepRqmtVersion, o.RequirementPlan, o.RequirementSegment)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPlannedIndependentRequirementItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPlannedIndependentRequirementItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedIndependentRequirementItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_planned_independent_requirement_item_data`.* FROM `sap_planned_independent_requirement_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedIndependentRequirementItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPlannedIndependentRequirementItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapPlannedIndependentRequirementItemDatumExists checks if the SapPlannedIndependentRequirementItemDatum row exists.
func SapPlannedIndependentRequirementItemDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string, mRPArea string, plndIndepRqmtType string, plndIndepRqmtVersion string, requirementPlan string, requirementSegment string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_planned_independent_requirement_item_data` where `Product`=? AND `Plant`=? AND `MRPArea`=? AND `PlndIndepRqmtType`=? AND `PlndIndepRqmtVersion`=? AND `RequirementPlan`=? AND `RequirementSegment`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant, mRPArea, plndIndepRqmtType, plndIndepRqmtVersion, requirementPlan, requirementSegment)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant, mRPArea, plndIndepRqmtType, plndIndepRqmtVersion, requirementPlan, requirementSegment)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_planned_independent_requirement_item_data exists")
	}

	return exists, nil
}
