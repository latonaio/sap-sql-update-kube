// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesOrderItemPricingElementDatum is an object representing the database table.
type SapSalesOrderItemPricingElementDatum struct {
	SalesOrder                     string      `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	SalesOrderItem                 string      `boil:"SalesOrderItem" json:"SalesOrderItem" toml:"SalesOrderItem" yaml:"SalesOrderItem"`
	PricingProcedureStep           string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter        string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionType                  null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PriceConditionDeterminationDte null.String `boil:"PriceConditionDeterminationDte" json:"PriceConditionDeterminationDte,omitempty" toml:"PriceConditionDeterminationDte" yaml:"PriceConditionDeterminationDte,omitempty"`
	ConditionCalculationType       null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionBaseValue             null.String `boil:"ConditionBaseValue" json:"ConditionBaseValue,omitempty" toml:"ConditionBaseValue" yaml:"ConditionBaseValue,omitempty"`
	ConditionRateValue             null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency              null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity              null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit          null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	ConditionCategory              null.String `boil:"ConditionCategory" json:"ConditionCategory,omitempty" toml:"ConditionCategory" yaml:"ConditionCategory,omitempty"`
	PricingScaleType               null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	ConditionRecord                null.String `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber      null.String `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	TaxCode                        null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ConditionAmount                null.String `boil:"ConditionAmount" json:"ConditionAmount,omitempty" toml:"ConditionAmount" yaml:"ConditionAmount,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingScaleBasis              null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleBasisValue       null.String `boil:"ConditionScaleBasisValue" json:"ConditionScaleBasisValue,omitempty" toml:"ConditionScaleBasisValue" yaml:"ConditionScaleBasisValue,omitempty"`
	ConditionScaleBasisUnit        null.String `boil:"ConditionScaleBasisUnit" json:"ConditionScaleBasisUnit,omitempty" toml:"ConditionScaleBasisUnit" yaml:"ConditionScaleBasisUnit,omitempty"`
	ConditionScaleBasisCurrency    null.String `boil:"ConditionScaleBasisCurrency" json:"ConditionScaleBasisCurrency,omitempty" toml:"ConditionScaleBasisCurrency" yaml:"ConditionScaleBasisCurrency,omitempty"`
	ConditionIsManuallyChanged     null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`

	R *sapSalesOrderItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesOrderItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesOrderItemPricingElementDatumColumns = struct {
	SalesOrder                     string
	SalesOrderItem                 string
	PricingProcedureStep           string
	PricingProcedureCounter        string
	ConditionType                  string
	PriceConditionDeterminationDte string
	ConditionCalculationType       string
	ConditionBaseValue             string
	ConditionRateValue             string
	ConditionCurrency              string
	ConditionQuantity              string
	ConditionQuantityUnit          string
	ConditionCategory              string
	PricingScaleType               string
	ConditionRecord                string
	ConditionSequentialNumber      string
	TaxCode                        string
	ConditionAmount                string
	TransactionCurrency            string
	PricingScaleBasis              string
	ConditionScaleBasisValue       string
	ConditionScaleBasisUnit        string
	ConditionScaleBasisCurrency    string
	ConditionIsManuallyChanged     string
}{
	SalesOrder:                     "SalesOrder",
	SalesOrderItem:                 "SalesOrderItem",
	PricingProcedureStep:           "PricingProcedureStep",
	PricingProcedureCounter:        "PricingProcedureCounter",
	ConditionType:                  "ConditionType",
	PriceConditionDeterminationDte: "PriceConditionDeterminationDte",
	ConditionCalculationType:       "ConditionCalculationType",
	ConditionBaseValue:             "ConditionBaseValue",
	ConditionRateValue:             "ConditionRateValue",
	ConditionCurrency:              "ConditionCurrency",
	ConditionQuantity:              "ConditionQuantity",
	ConditionQuantityUnit:          "ConditionQuantityUnit",
	ConditionCategory:              "ConditionCategory",
	PricingScaleType:               "PricingScaleType",
	ConditionRecord:                "ConditionRecord",
	ConditionSequentialNumber:      "ConditionSequentialNumber",
	TaxCode:                        "TaxCode",
	ConditionAmount:                "ConditionAmount",
	TransactionCurrency:            "TransactionCurrency",
	PricingScaleBasis:              "PricingScaleBasis",
	ConditionScaleBasisValue:       "ConditionScaleBasisValue",
	ConditionScaleBasisUnit:        "ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency:    "ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:     "ConditionIsManuallyChanged",
}

var SapSalesOrderItemPricingElementDatumTableColumns = struct {
	SalesOrder                     string
	SalesOrderItem                 string
	PricingProcedureStep           string
	PricingProcedureCounter        string
	ConditionType                  string
	PriceConditionDeterminationDte string
	ConditionCalculationType       string
	ConditionBaseValue             string
	ConditionRateValue             string
	ConditionCurrency              string
	ConditionQuantity              string
	ConditionQuantityUnit          string
	ConditionCategory              string
	PricingScaleType               string
	ConditionRecord                string
	ConditionSequentialNumber      string
	TaxCode                        string
	ConditionAmount                string
	TransactionCurrency            string
	PricingScaleBasis              string
	ConditionScaleBasisValue       string
	ConditionScaleBasisUnit        string
	ConditionScaleBasisCurrency    string
	ConditionIsManuallyChanged     string
}{
	SalesOrder:                     "sap_sales_order_item_pricing_element_data.SalesOrder",
	SalesOrderItem:                 "sap_sales_order_item_pricing_element_data.SalesOrderItem",
	PricingProcedureStep:           "sap_sales_order_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter:        "sap_sales_order_item_pricing_element_data.PricingProcedureCounter",
	ConditionType:                  "sap_sales_order_item_pricing_element_data.ConditionType",
	PriceConditionDeterminationDte: "sap_sales_order_item_pricing_element_data.PriceConditionDeterminationDte",
	ConditionCalculationType:       "sap_sales_order_item_pricing_element_data.ConditionCalculationType",
	ConditionBaseValue:             "sap_sales_order_item_pricing_element_data.ConditionBaseValue",
	ConditionRateValue:             "sap_sales_order_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:              "sap_sales_order_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:              "sap_sales_order_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:          "sap_sales_order_item_pricing_element_data.ConditionQuantityUnit",
	ConditionCategory:              "sap_sales_order_item_pricing_element_data.ConditionCategory",
	PricingScaleType:               "sap_sales_order_item_pricing_element_data.PricingScaleType",
	ConditionRecord:                "sap_sales_order_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:      "sap_sales_order_item_pricing_element_data.ConditionSequentialNumber",
	TaxCode:                        "sap_sales_order_item_pricing_element_data.TaxCode",
	ConditionAmount:                "sap_sales_order_item_pricing_element_data.ConditionAmount",
	TransactionCurrency:            "sap_sales_order_item_pricing_element_data.TransactionCurrency",
	PricingScaleBasis:              "sap_sales_order_item_pricing_element_data.PricingScaleBasis",
	ConditionScaleBasisValue:       "sap_sales_order_item_pricing_element_data.ConditionScaleBasisValue",
	ConditionScaleBasisUnit:        "sap_sales_order_item_pricing_element_data.ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency:    "sap_sales_order_item_pricing_element_data.ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:     "sap_sales_order_item_pricing_element_data.ConditionIsManuallyChanged",
}

// Generated where

var SapSalesOrderItemPricingElementDatumWhere = struct {
	SalesOrder                     whereHelperstring
	SalesOrderItem                 whereHelperstring
	PricingProcedureStep           whereHelperstring
	PricingProcedureCounter        whereHelperstring
	ConditionType                  whereHelpernull_String
	PriceConditionDeterminationDte whereHelpernull_String
	ConditionCalculationType       whereHelpernull_String
	ConditionBaseValue             whereHelpernull_String
	ConditionRateValue             whereHelpernull_String
	ConditionCurrency              whereHelpernull_String
	ConditionQuantity              whereHelpernull_String
	ConditionQuantityUnit          whereHelpernull_String
	ConditionCategory              whereHelpernull_String
	PricingScaleType               whereHelpernull_String
	ConditionRecord                whereHelpernull_String
	ConditionSequentialNumber      whereHelpernull_String
	TaxCode                        whereHelpernull_String
	ConditionAmount                whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	PricingScaleBasis              whereHelpernull_String
	ConditionScaleBasisValue       whereHelpernull_String
	ConditionScaleBasisUnit        whereHelpernull_String
	ConditionScaleBasisCurrency    whereHelpernull_String
	ConditionIsManuallyChanged     whereHelpernull_Bool
}{
	SalesOrder:                     whereHelperstring{field: "`sap_sales_order_item_pricing_element_data`.`SalesOrder`"},
	SalesOrderItem:                 whereHelperstring{field: "`sap_sales_order_item_pricing_element_data`.`SalesOrderItem`"},
	PricingProcedureStep:           whereHelperstring{field: "`sap_sales_order_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter:        whereHelperstring{field: "`sap_sales_order_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionType:                  whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionType`"},
	PriceConditionDeterminationDte: whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`PriceConditionDeterminationDte`"},
	ConditionCalculationType:       whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionCalculationType`"},
	ConditionBaseValue:             whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionBaseValue`"},
	ConditionRateValue:             whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:              whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:              whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:          whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionQuantityUnit`"},
	ConditionCategory:              whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionCategory`"},
	PricingScaleType:               whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`PricingScaleType`"},
	ConditionRecord:                whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:      whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionSequentialNumber`"},
	TaxCode:                        whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`TaxCode`"},
	ConditionAmount:                whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`TransactionCurrency`"},
	PricingScaleBasis:              whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`PricingScaleBasis`"},
	ConditionScaleBasisValue:       whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionScaleBasisValue`"},
	ConditionScaleBasisUnit:        whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionScaleBasisUnit`"},
	ConditionScaleBasisCurrency:    whereHelpernull_String{field: "`sap_sales_order_item_pricing_element_data`.`ConditionScaleBasisCurrency`"},
	ConditionIsManuallyChanged:     whereHelpernull_Bool{field: "`sap_sales_order_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
}

// SapSalesOrderItemPricingElementDatumRels is where relationship names are stored.
var SapSalesOrderItemPricingElementDatumRels = struct {
	SalesOrderSapSalesOrderHeaderDatum string
}{
	SalesOrderSapSalesOrderHeaderDatum: "SalesOrderSapSalesOrderHeaderDatum",
}

// sapSalesOrderItemPricingElementDatumR is where relationships are stored.
type sapSalesOrderItemPricingElementDatumR struct {
	SalesOrderSapSalesOrderHeaderDatum *SapSalesOrderHeaderDatum `boil:"SalesOrderSapSalesOrderHeaderDatum" json:"SalesOrderSapSalesOrderHeaderDatum" toml:"SalesOrderSapSalesOrderHeaderDatum" yaml:"SalesOrderSapSalesOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesOrderItemPricingElementDatumR) NewStruct() *sapSalesOrderItemPricingElementDatumR {
	return &sapSalesOrderItemPricingElementDatumR{}
}

func (r *sapSalesOrderItemPricingElementDatumR) GetSalesOrderSapSalesOrderHeaderDatum() *SapSalesOrderHeaderDatum {
	if r == nil {
		return nil
	}
	return r.SalesOrderSapSalesOrderHeaderDatum
}

// sapSalesOrderItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapSalesOrderItemPricingElementDatumL struct{}

var (
	sapSalesOrderItemPricingElementDatumAllColumns            = []string{"SalesOrder", "SalesOrderItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "PriceConditionDeterminationDte", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapSalesOrderItemPricingElementDatumColumnsWithoutDefault = []string{"SalesOrder", "SalesOrderItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "PriceConditionDeterminationDte", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapSalesOrderItemPricingElementDatumColumnsWithDefault    = []string{}
	sapSalesOrderItemPricingElementDatumPrimaryKeyColumns     = []string{"SalesOrder", "SalesOrderItem", "PricingProcedureStep", "PricingProcedureCounter"}
	sapSalesOrderItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesOrderItemPricingElementDatumSlice is an alias for a slice of pointers to SapSalesOrderItemPricingElementDatum.
	// This should almost always be used instead of []SapSalesOrderItemPricingElementDatum.
	SapSalesOrderItemPricingElementDatumSlice []*SapSalesOrderItemPricingElementDatum
	// SapSalesOrderItemPricingElementDatumHook is the signature for custom SapSalesOrderItemPricingElementDatum hook methods
	SapSalesOrderItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapSalesOrderItemPricingElementDatum) error

	sapSalesOrderItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesOrderItemPricingElementDatumType                 = reflect.TypeOf(&SapSalesOrderItemPricingElementDatum{})
	sapSalesOrderItemPricingElementDatumMapping              = queries.MakeStructMapping(sapSalesOrderItemPricingElementDatumType)
	sapSalesOrderItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns)
	sapSalesOrderItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapSalesOrderItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapSalesOrderItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapSalesOrderItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapSalesOrderItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapSalesOrderItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesOrderItemPricingElementDatumAfterSelectHooks []SapSalesOrderItemPricingElementDatumHook

var sapSalesOrderItemPricingElementDatumBeforeInsertHooks []SapSalesOrderItemPricingElementDatumHook
var sapSalesOrderItemPricingElementDatumAfterInsertHooks []SapSalesOrderItemPricingElementDatumHook

var sapSalesOrderItemPricingElementDatumBeforeUpdateHooks []SapSalesOrderItemPricingElementDatumHook
var sapSalesOrderItemPricingElementDatumAfterUpdateHooks []SapSalesOrderItemPricingElementDatumHook

var sapSalesOrderItemPricingElementDatumBeforeDeleteHooks []SapSalesOrderItemPricingElementDatumHook
var sapSalesOrderItemPricingElementDatumAfterDeleteHooks []SapSalesOrderItemPricingElementDatumHook

var sapSalesOrderItemPricingElementDatumBeforeUpsertHooks []SapSalesOrderItemPricingElementDatumHook
var sapSalesOrderItemPricingElementDatumAfterUpsertHooks []SapSalesOrderItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesOrderItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesOrderItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapSalesOrderItemPricingElementDatumHook(hookPoint boil.HookPoint, sapSalesOrderItemPricingElementDatumHook SapSalesOrderItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesOrderItemPricingElementDatumAfterSelectHooks = append(sapSalesOrderItemPricingElementDatumAfterSelectHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapSalesOrderItemPricingElementDatumBeforeInsertHooks = append(sapSalesOrderItemPricingElementDatumBeforeInsertHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapSalesOrderItemPricingElementDatumAfterInsertHooks = append(sapSalesOrderItemPricingElementDatumAfterInsertHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesOrderItemPricingElementDatumBeforeUpdateHooks = append(sapSalesOrderItemPricingElementDatumBeforeUpdateHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapSalesOrderItemPricingElementDatumAfterUpdateHooks = append(sapSalesOrderItemPricingElementDatumAfterUpdateHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesOrderItemPricingElementDatumBeforeDeleteHooks = append(sapSalesOrderItemPricingElementDatumBeforeDeleteHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapSalesOrderItemPricingElementDatumAfterDeleteHooks = append(sapSalesOrderItemPricingElementDatumAfterDeleteHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesOrderItemPricingElementDatumBeforeUpsertHooks = append(sapSalesOrderItemPricingElementDatumBeforeUpsertHooks, sapSalesOrderItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapSalesOrderItemPricingElementDatumAfterUpsertHooks = append(sapSalesOrderItemPricingElementDatumAfterUpsertHooks, sapSalesOrderItemPricingElementDatumHook)
	}
}

// One returns a single sapSalesOrderItemPricingElementDatum record from the query.
func (q sapSalesOrderItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesOrderItemPricingElementDatum, error) {
	o := &SapSalesOrderItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_order_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesOrderItemPricingElementDatum records from the query.
func (q sapSalesOrderItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesOrderItemPricingElementDatumSlice, error) {
	var o []*SapSalesOrderItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesOrderItemPricingElementDatum slice")
	}

	if len(sapSalesOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesOrderItemPricingElementDatum records in the query.
func (q sapSalesOrderItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_order_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesOrderItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_order_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// SalesOrderSapSalesOrderHeaderDatum pointed to by the foreign key.
func (o *SapSalesOrderItemPricingElementDatum) SalesOrderSapSalesOrderHeaderDatum(mods ...qm.QueryMod) sapSalesOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesOrder` = ?", o.SalesOrder),
	}

	queryMods = append(queryMods, mods...)

	return SapSalesOrderHeaderData(queryMods...)
}

// LoadSalesOrderSapSalesOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesOrderItemPricingElementDatumL) LoadSalesOrderSapSalesOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderItemPricingElementDatum
	var object *SapSalesOrderItemPricingElementDatum

	if singular {
		object = maybeSapSalesOrderItemPricingElementDatum.(*SapSalesOrderItemPricingElementDatum)
	} else {
		slice = *maybeSapSalesOrderItemPricingElementDatum.(*[]*SapSalesOrderItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderItemPricingElementDatumR{}
		}
		args = append(args, object.SalesOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_header_data`),
		qm.WhereIn(`sap_sales_order_header_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesOrderHeaderDatum")
	}

	var resultSlice []*SapSalesOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_header_data")
	}

	if len(sapSalesOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesOrderSapSalesOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesOrderHeaderDatumR{}
		}
		foreign.R.SalesOrderSapSalesOrderItemPricingElementData = append(foreign.R.SalesOrderSapSalesOrderItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesOrderHeaderDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderItemPricingElementData = append(foreign.R.SalesOrderSapSalesOrderItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesOrderSapSalesOrderHeaderDatum of the sapSalesOrderItemPricingElementDatum to the related item.
// Sets o.R.SalesOrderSapSalesOrderHeaderDatum to related.
// Adds o to related.R.SalesOrderSapSalesOrderItemPricingElementData.
func (o *SapSalesOrderItemPricingElementDatum) SetSalesOrderSapSalesOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_order_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
		strmangle.WhereClause("`", "`", 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesOrder, o.SalesOrder, o.SalesOrderItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesOrder = related.SalesOrder
	if o.R == nil {
		o.R = &sapSalesOrderItemPricingElementDatumR{
			SalesOrderSapSalesOrderHeaderDatum: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderItemPricingElementData: SapSalesOrderItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.SalesOrderSapSalesOrderItemPricingElementData = append(related.R.SalesOrderSapSalesOrderItemPricingElementData, o)
	}

	return nil
}

// SapSalesOrderItemPricingElementData retrieves all the records using an executor.
func SapSalesOrderItemPricingElementData(mods ...qm.QueryMod) sapSalesOrderItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_sales_order_item_pricing_element_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_sales_order_item_pricing_element_data`.*"})
	}

	return sapSalesOrderItemPricingElementDatumQuery{q}
}

// FindSapSalesOrderItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesOrderItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, salesOrder string, salesOrderItem string, pricingProcedureStep string, pricingProcedureCounter string, selectCols ...string) (*SapSalesOrderItemPricingElementDatum, error) {
	sapSalesOrderItemPricingElementDatumObj := &SapSalesOrderItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_order_item_pricing_element_data` where `SalesOrder`=? AND `SalesOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, salesOrder, salesOrderItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, sapSalesOrderItemPricingElementDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_order_item_pricing_element_data")
	}

	if err = sapSalesOrderItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesOrderItemPricingElementDatumObj, err
	}

	return sapSalesOrderItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesOrderItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesOrderItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapSalesOrderItemPricingElementDatumInsertCache[key]
	sapSalesOrderItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesOrderItemPricingElementDatumAllColumns,
			sapSalesOrderItemPricingElementDatumColumnsWithDefault,
			sapSalesOrderItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_order_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_order_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_order_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_order_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesOrder,
		o.SalesOrderItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderItemPricingElementDatumInsertCacheMut.Lock()
		sapSalesOrderItemPricingElementDatumInsertCache[key] = cache
		sapSalesOrderItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesOrderItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesOrderItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesOrderItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesOrderItemPricingElementDatumUpdateCache[key]
	sapSalesOrderItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesOrderItemPricingElementDatumAllColumns,
			sapSalesOrderItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_order_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_order_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, append(wl, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_order_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_order_item_pricing_element_data")
	}

	if !cached {
		sapSalesOrderItemPricingElementDatumUpdateCacheMut.Lock()
		sapSalesOrderItemPricingElementDatumUpdateCache[key] = cache
		sapSalesOrderItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesOrderItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_order_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesOrderItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_order_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesOrderItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesOrderItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesOrderItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesOrderItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesOrderItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesOrderItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesOrderItemPricingElementDatumUpsertCache[key]
	sapSalesOrderItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesOrderItemPricingElementDatumAllColumns,
			sapSalesOrderItemPricingElementDatumColumnsWithDefault,
			sapSalesOrderItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesOrderItemPricingElementDatumAllColumns,
			sapSalesOrderItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_order_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_order_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_order_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_order_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesOrderItemPricingElementDatumType, sapSalesOrderItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_order_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderItemPricingElementDatumUpsertCacheMut.Lock()
		sapSalesOrderItemPricingElementDatumUpsertCache[key] = cache
		sapSalesOrderItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesOrderItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesOrderItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesOrderItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesOrderItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_order_item_pricing_element_data` WHERE `SalesOrder`=? AND `SalesOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_order_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesOrderItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesOrderItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesOrderItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesOrderItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_order_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesOrderItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_item_pricing_element_data")
	}

	if len(sapSalesOrderItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesOrderItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesOrderItemPricingElementDatum(ctx, exec, o.SalesOrder, o.SalesOrderItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesOrderItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesOrderItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_order_item_pricing_element_data`.* FROM `sap_sales_order_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesOrderItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesOrderItemPricingElementDatumExists checks if the SapSalesOrderItemPricingElementDatum row exists.
func SapSalesOrderItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, salesOrder string, salesOrderItem string, pricingProcedureStep string, pricingProcedureCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_order_item_pricing_element_data` where `SalesOrder`=? AND `SalesOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesOrder, salesOrderItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, salesOrder, salesOrderItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_order_item_pricing_element_data exists")
	}

	return exists, nil
}
