// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionRoutingHeaderDatum is an object representing the database table.
type SapProductionRoutingHeaderDatum struct {
	ProductionRoutingGroup        string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting             string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingInternalVers string      `boil:"ProductionRoutingInternalVers" json:"ProductionRoutingInternalVers" toml:"ProductionRoutingInternalVers" yaml:"ProductionRoutingInternalVers"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	BillOfOperationsDesc          null.String `boil:"BillOfOperationsDesc" json:"BillOfOperationsDesc,omitempty" toml:"BillOfOperationsDesc" yaml:"BillOfOperationsDesc,omitempty"`
	Plant                         null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	BillOfOperationsUsage         null.String `boil:"BillOfOperationsUsage" json:"BillOfOperationsUsage,omitempty" toml:"BillOfOperationsUsage" yaml:"BillOfOperationsUsage,omitempty"`
	BillOfOperationsStatus        null.String `boil:"BillOfOperationsStatus" json:"BillOfOperationsStatus,omitempty" toml:"BillOfOperationsStatus" yaml:"BillOfOperationsStatus,omitempty"`
	ResponsiblePlannerGroup       null.String `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	MinimumLotSizeQuantity        null.String `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity        null.String `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	BillOfOperationsUnit          null.String `boil:"BillOfOperationsUnit" json:"BillOfOperationsUnit,omitempty" toml:"BillOfOperationsUnit" yaml:"BillOfOperationsUnit,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ValidityStartDate             null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate               null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ChangeNumber                  null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	PlainLongText                 null.String `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`

	R *sapProductionRoutingHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionRoutingHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionRoutingHeaderDatumColumns = struct {
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingInternalVers string
	IsMarkedForDeletion           string
	BillOfOperationsDesc          string
	Plant                         string
	BillOfOperationsUsage         string
	BillOfOperationsStatus        string
	ResponsiblePlannerGroup       string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	BillOfOperationsUnit          string
	CreationDate                  string
	LastChangeDate                string
	ValidityStartDate             string
	ValidityEndDate               string
	ChangeNumber                  string
	PlainLongText                 string
}{
	ProductionRoutingGroup:        "ProductionRoutingGroup",
	ProductionRouting:             "ProductionRouting",
	ProductionRoutingInternalVers: "ProductionRoutingInternalVers",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
	BillOfOperationsDesc:          "BillOfOperationsDesc",
	Plant:                         "Plant",
	BillOfOperationsUsage:         "BillOfOperationsUsage",
	BillOfOperationsStatus:        "BillOfOperationsStatus",
	ResponsiblePlannerGroup:       "ResponsiblePlannerGroup",
	MinimumLotSizeQuantity:        "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "MaximumLotSizeQuantity",
	BillOfOperationsUnit:          "BillOfOperationsUnit",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	ValidityStartDate:             "ValidityStartDate",
	ValidityEndDate:               "ValidityEndDate",
	ChangeNumber:                  "ChangeNumber",
	PlainLongText:                 "PlainLongText",
}

var SapProductionRoutingHeaderDatumTableColumns = struct {
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingInternalVers string
	IsMarkedForDeletion           string
	BillOfOperationsDesc          string
	Plant                         string
	BillOfOperationsUsage         string
	BillOfOperationsStatus        string
	ResponsiblePlannerGroup       string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	BillOfOperationsUnit          string
	CreationDate                  string
	LastChangeDate                string
	ValidityStartDate             string
	ValidityEndDate               string
	ChangeNumber                  string
	PlainLongText                 string
}{
	ProductionRoutingGroup:        "sap_production_routing_header_data.ProductionRoutingGroup",
	ProductionRouting:             "sap_production_routing_header_data.ProductionRouting",
	ProductionRoutingInternalVers: "sap_production_routing_header_data.ProductionRoutingInternalVers",
	IsMarkedForDeletion:           "sap_production_routing_header_data.IsMarkedForDeletion",
	BillOfOperationsDesc:          "sap_production_routing_header_data.BillOfOperationsDesc",
	Plant:                         "sap_production_routing_header_data.Plant",
	BillOfOperationsUsage:         "sap_production_routing_header_data.BillOfOperationsUsage",
	BillOfOperationsStatus:        "sap_production_routing_header_data.BillOfOperationsStatus",
	ResponsiblePlannerGroup:       "sap_production_routing_header_data.ResponsiblePlannerGroup",
	MinimumLotSizeQuantity:        "sap_production_routing_header_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "sap_production_routing_header_data.MaximumLotSizeQuantity",
	BillOfOperationsUnit:          "sap_production_routing_header_data.BillOfOperationsUnit",
	CreationDate:                  "sap_production_routing_header_data.CreationDate",
	LastChangeDate:                "sap_production_routing_header_data.LastChangeDate",
	ValidityStartDate:             "sap_production_routing_header_data.ValidityStartDate",
	ValidityEndDate:               "sap_production_routing_header_data.ValidityEndDate",
	ChangeNumber:                  "sap_production_routing_header_data.ChangeNumber",
	PlainLongText:                 "sap_production_routing_header_data.PlainLongText",
}

// Generated where

var SapProductionRoutingHeaderDatumWhere = struct {
	ProductionRoutingGroup        whereHelperstring
	ProductionRouting             whereHelperstring
	ProductionRoutingInternalVers whereHelperstring
	IsMarkedForDeletion           whereHelpernull_Bool
	BillOfOperationsDesc          whereHelpernull_String
	Plant                         whereHelpernull_String
	BillOfOperationsUsage         whereHelpernull_String
	BillOfOperationsStatus        whereHelpernull_String
	ResponsiblePlannerGroup       whereHelpernull_String
	MinimumLotSizeQuantity        whereHelpernull_String
	MaximumLotSizeQuantity        whereHelpernull_String
	BillOfOperationsUnit          whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	ValidityStartDate             whereHelpernull_String
	ValidityEndDate               whereHelpernull_String
	ChangeNumber                  whereHelpernull_String
	PlainLongText                 whereHelpernull_String
}{
	ProductionRoutingGroup:        whereHelperstring{field: "`sap_production_routing_header_data`.`ProductionRoutingGroup`"},
	ProductionRouting:             whereHelperstring{field: "`sap_production_routing_header_data`.`ProductionRouting`"},
	ProductionRoutingInternalVers: whereHelperstring{field: "`sap_production_routing_header_data`.`ProductionRoutingInternalVers`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`sap_production_routing_header_data`.`IsMarkedForDeletion`"},
	BillOfOperationsDesc:          whereHelpernull_String{field: "`sap_production_routing_header_data`.`BillOfOperationsDesc`"},
	Plant:                         whereHelpernull_String{field: "`sap_production_routing_header_data`.`Plant`"},
	BillOfOperationsUsage:         whereHelpernull_String{field: "`sap_production_routing_header_data`.`BillOfOperationsUsage`"},
	BillOfOperationsStatus:        whereHelpernull_String{field: "`sap_production_routing_header_data`.`BillOfOperationsStatus`"},
	ResponsiblePlannerGroup:       whereHelpernull_String{field: "`sap_production_routing_header_data`.`ResponsiblePlannerGroup`"},
	MinimumLotSizeQuantity:        whereHelpernull_String{field: "`sap_production_routing_header_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:        whereHelpernull_String{field: "`sap_production_routing_header_data`.`MaximumLotSizeQuantity`"},
	BillOfOperationsUnit:          whereHelpernull_String{field: "`sap_production_routing_header_data`.`BillOfOperationsUnit`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_production_routing_header_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_production_routing_header_data`.`LastChangeDate`"},
	ValidityStartDate:             whereHelpernull_String{field: "`sap_production_routing_header_data`.`ValidityStartDate`"},
	ValidityEndDate:               whereHelpernull_String{field: "`sap_production_routing_header_data`.`ValidityEndDate`"},
	ChangeNumber:                  whereHelpernull_String{field: "`sap_production_routing_header_data`.`ChangeNumber`"},
	PlainLongText:                 whereHelpernull_String{field: "`sap_production_routing_header_data`.`PlainLongText`"},
}

// SapProductionRoutingHeaderDatumRels is where relationship names are stored.
var SapProductionRoutingHeaderDatumRels = struct {
}{}

// sapProductionRoutingHeaderDatumR is where relationships are stored.
type sapProductionRoutingHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapProductionRoutingHeaderDatumR) NewStruct() *sapProductionRoutingHeaderDatumR {
	return &sapProductionRoutingHeaderDatumR{}
}

// sapProductionRoutingHeaderDatumL is where Load methods for each relationship are stored.
type sapProductionRoutingHeaderDatumL struct{}

var (
	sapProductionRoutingHeaderDatumAllColumns            = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingInternalVers", "IsMarkedForDeletion", "BillOfOperationsDesc", "Plant", "BillOfOperationsUsage", "BillOfOperationsStatus", "ResponsiblePlannerGroup", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "BillOfOperationsUnit", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber", "PlainLongText"}
	sapProductionRoutingHeaderDatumColumnsWithoutDefault = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingInternalVers", "IsMarkedForDeletion", "BillOfOperationsDesc", "Plant", "BillOfOperationsUsage", "BillOfOperationsStatus", "ResponsiblePlannerGroup", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "BillOfOperationsUnit", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber", "PlainLongText"}
	sapProductionRoutingHeaderDatumColumnsWithDefault    = []string{}
	sapProductionRoutingHeaderDatumPrimaryKeyColumns     = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingInternalVers"}
)

type (
	// SapProductionRoutingHeaderDatumSlice is an alias for a slice of pointers to SapProductionRoutingHeaderDatum.
	// This should almost always be used instead of []SapProductionRoutingHeaderDatum.
	SapProductionRoutingHeaderDatumSlice []*SapProductionRoutingHeaderDatum
	// SapProductionRoutingHeaderDatumHook is the signature for custom SapProductionRoutingHeaderDatum hook methods
	SapProductionRoutingHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapProductionRoutingHeaderDatum) error

	sapProductionRoutingHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionRoutingHeaderDatumType                 = reflect.TypeOf(&SapProductionRoutingHeaderDatum{})
	sapProductionRoutingHeaderDatumMapping              = queries.MakeStructMapping(sapProductionRoutingHeaderDatumType)
	sapProductionRoutingHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, sapProductionRoutingHeaderDatumPrimaryKeyColumns)
	sapProductionRoutingHeaderDatumInsertCacheMut       sync.RWMutex
	sapProductionRoutingHeaderDatumInsertCache          = make(map[string]insertCache)
	sapProductionRoutingHeaderDatumUpdateCacheMut       sync.RWMutex
	sapProductionRoutingHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapProductionRoutingHeaderDatumUpsertCacheMut       sync.RWMutex
	sapProductionRoutingHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionRoutingHeaderDatumBeforeInsertHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumBeforeUpdateHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumBeforeDeleteHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumBeforeUpsertHooks []SapProductionRoutingHeaderDatumHook

var sapProductionRoutingHeaderDatumAfterInsertHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumAfterSelectHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumAfterUpdateHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumAfterDeleteHooks []SapProductionRoutingHeaderDatumHook
var sapProductionRoutingHeaderDatumAfterUpsertHooks []SapProductionRoutingHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionRoutingHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionRoutingHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionRoutingHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionRoutingHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionRoutingHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionRoutingHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionRoutingHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionRoutingHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionRoutingHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionRoutingHeaderDatumHook registers your hook function for all future operations.
func AddSapProductionRoutingHeaderDatumHook(hookPoint boil.HookPoint, sapProductionRoutingHeaderDatumHook SapProductionRoutingHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapProductionRoutingHeaderDatumBeforeInsertHooks = append(sapProductionRoutingHeaderDatumBeforeInsertHooks, sapProductionRoutingHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionRoutingHeaderDatumBeforeUpdateHooks = append(sapProductionRoutingHeaderDatumBeforeUpdateHooks, sapProductionRoutingHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionRoutingHeaderDatumBeforeDeleteHooks = append(sapProductionRoutingHeaderDatumBeforeDeleteHooks, sapProductionRoutingHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionRoutingHeaderDatumBeforeUpsertHooks = append(sapProductionRoutingHeaderDatumBeforeUpsertHooks, sapProductionRoutingHeaderDatumHook)
	case boil.AfterInsertHook:
		sapProductionRoutingHeaderDatumAfterInsertHooks = append(sapProductionRoutingHeaderDatumAfterInsertHooks, sapProductionRoutingHeaderDatumHook)
	case boil.AfterSelectHook:
		sapProductionRoutingHeaderDatumAfterSelectHooks = append(sapProductionRoutingHeaderDatumAfterSelectHooks, sapProductionRoutingHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapProductionRoutingHeaderDatumAfterUpdateHooks = append(sapProductionRoutingHeaderDatumAfterUpdateHooks, sapProductionRoutingHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapProductionRoutingHeaderDatumAfterDeleteHooks = append(sapProductionRoutingHeaderDatumAfterDeleteHooks, sapProductionRoutingHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapProductionRoutingHeaderDatumAfterUpsertHooks = append(sapProductionRoutingHeaderDatumAfterUpsertHooks, sapProductionRoutingHeaderDatumHook)
	}
}

// One returns a single sapProductionRoutingHeaderDatum record from the query.
func (q sapProductionRoutingHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionRoutingHeaderDatum, error) {
	o := &SapProductionRoutingHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_routing_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionRoutingHeaderDatum records from the query.
func (q sapProductionRoutingHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionRoutingHeaderDatumSlice, error) {
	var o []*SapProductionRoutingHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionRoutingHeaderDatum slice")
	}

	if len(sapProductionRoutingHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionRoutingHeaderDatum records in the query.
func (q sapProductionRoutingHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_routing_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionRoutingHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_routing_header_data exists")
	}

	return count > 0, nil
}

// SapProductionRoutingHeaderData retrieves all the records using an executor.
func SapProductionRoutingHeaderData(mods ...qm.QueryMod) sapProductionRoutingHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_production_routing_header_data`"))
	return sapProductionRoutingHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapProductionRoutingHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionRoutingHeaderDatum(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingInternalVers string, selectCols ...string) (*SapProductionRoutingHeaderDatum, error) {
	sapProductionRoutingHeaderDatumObj := &SapProductionRoutingHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_routing_header_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingInternalVers`=?", sel,
	)

	q := queries.Raw(query, productionRoutingGroup, productionRouting, productionRoutingInternalVers)

	err := q.Bind(ctx, exec, sapProductionRoutingHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_routing_header_data")
	}

	if err = sapProductionRoutingHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionRoutingHeaderDatumObj, err
	}

	return sapProductionRoutingHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionRoutingHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionRoutingHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapProductionRoutingHeaderDatumInsertCache[key]
	sapProductionRoutingHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionRoutingHeaderDatumAllColumns,
			sapProductionRoutingHeaderDatumColumnsWithDefault,
			sapProductionRoutingHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_routing_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_routing_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_routing_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionRoutingHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_routing_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingInternalVers,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_header_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingHeaderDatumInsertCacheMut.Lock()
		sapProductionRoutingHeaderDatumInsertCache[key] = cache
		sapProductionRoutingHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionRoutingHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionRoutingHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionRoutingHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionRoutingHeaderDatumUpdateCache[key]
	sapProductionRoutingHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionRoutingHeaderDatumAllColumns,
			sapProductionRoutingHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_routing_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_routing_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionRoutingHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, append(wl, sapProductionRoutingHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_routing_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_routing_header_data")
	}

	if !cached {
		sapProductionRoutingHeaderDatumUpdateCacheMut.Lock()
		sapProductionRoutingHeaderDatumUpdateCache[key] = cache
		sapProductionRoutingHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionRoutingHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_routing_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_routing_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionRoutingHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_routing_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionRoutingHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionRoutingHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionRoutingHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionRoutingHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionRoutingHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionRoutingHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionRoutingHeaderDatumUpsertCache[key]
	sapProductionRoutingHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionRoutingHeaderDatumAllColumns,
			sapProductionRoutingHeaderDatumColumnsWithDefault,
			sapProductionRoutingHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapProductionRoutingHeaderDatumAllColumns,
			sapProductionRoutingHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_routing_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_routing_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_routing_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_routing_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionRoutingHeaderDatumType, sapProductionRoutingHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_routing_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_header_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingHeaderDatumUpsertCacheMut.Lock()
		sapProductionRoutingHeaderDatumUpsertCache[key] = cache
		sapProductionRoutingHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionRoutingHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionRoutingHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionRoutingHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionRoutingHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_routing_header_data` WHERE `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingInternalVers`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_routing_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_routing_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionRoutingHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionRoutingHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_routing_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionRoutingHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionRoutingHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_routing_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionRoutingHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_header_data")
	}

	if len(sapProductionRoutingHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionRoutingHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionRoutingHeaderDatum(ctx, exec, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingInternalVers)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionRoutingHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionRoutingHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_routing_header_data`.* FROM `sap_production_routing_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionRoutingHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionRoutingHeaderDatumExists checks if the SapProductionRoutingHeaderDatum row exists.
func SapProductionRoutingHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingInternalVers string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_routing_header_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingInternalVers`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionRoutingGroup, productionRouting, productionRoutingInternalVers)
	}
	row := exec.QueryRowContext(ctx, sql, productionRoutingGroup, productionRouting, productionRoutingInternalVers)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_routing_header_data exists")
	}

	return exists, nil
}
