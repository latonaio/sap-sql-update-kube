// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseContractItemDatum is an object representing the database table.
type SapPurchaseContractItemDatum struct {
	PurchaseContract               string      `boil:"PurchaseContract" json:"PurchaseContract" toml:"PurchaseContract" yaml:"PurchaseContract"`
	PurchaseContractItem           string      `boil:"PurchaseContractItem" json:"PurchaseContractItem" toml:"PurchaseContractItem" yaml:"PurchaseContractItem"`
	PurchasingContractDeletionCode null.String `boil:"PurchasingContractDeletionCode" json:"PurchasingContractDeletionCode,omitempty" toml:"PurchasingContractDeletionCode" yaml:"PurchasingContractDeletionCode,omitempty"`
	PurchaseContractItemText       null.String `boil:"PurchaseContractItemText" json:"PurchaseContractItemText,omitempty" toml:"PurchaseContractItemText" yaml:"PurchaseContractItemText,omitempty"`
	CompanyCode                    null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	SupplierMaterialNumber         null.String `boil:"SupplierMaterialNumber" json:"SupplierMaterialNumber,omitempty" toml:"SupplierMaterialNumber" yaml:"SupplierMaterialNumber,omitempty"`
	OrderQuantityUnit              null.String `boil:"OrderQuantityUnit" json:"OrderQuantityUnit,omitempty" toml:"OrderQuantityUnit" yaml:"OrderQuantityUnit,omitempty"`
	TargetQuantity                 null.String `boil:"TargetQuantity" json:"TargetQuantity,omitempty" toml:"TargetQuantity" yaml:"TargetQuantity,omitempty"`
	PurgDocReleaseOrderQuantity    null.String `boil:"PurgDocReleaseOrderQuantity" json:"PurgDocReleaseOrderQuantity,omitempty" toml:"PurgDocReleaseOrderQuantity" yaml:"PurgDocReleaseOrderQuantity,omitempty"`
	OrderPriceUnit                 null.String `boil:"OrderPriceUnit" json:"OrderPriceUnit,omitempty" toml:"OrderPriceUnit" yaml:"OrderPriceUnit,omitempty"`
	ContractNetPriceAmount         null.String `boil:"ContractNetPriceAmount" json:"ContractNetPriceAmount,omitempty" toml:"ContractNetPriceAmount" yaml:"ContractNetPriceAmount,omitempty"`
	DocumentCurrency               null.String `boil:"DocumentCurrency" json:"DocumentCurrency,omitempty" toml:"DocumentCurrency" yaml:"DocumentCurrency,omitempty"`
	NetPriceQuantity               null.String `boil:"NetPriceQuantity" json:"NetPriceQuantity,omitempty" toml:"NetPriceQuantity" yaml:"NetPriceQuantity,omitempty"`
	TaxCode                        null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxCountry                     null.String `boil:"TaxCountry" json:"TaxCountry,omitempty" toml:"TaxCountry" yaml:"TaxCountry,omitempty"`
	StockType                      null.String `boil:"StockType" json:"StockType,omitempty" toml:"StockType" yaml:"StockType,omitempty"`
	IsInfoRecordUpdated            null.String `boil:"IsInfoRecordUpdated" json:"IsInfoRecordUpdated,omitempty" toml:"IsInfoRecordUpdated" yaml:"IsInfoRecordUpdated,omitempty"`
	PriceIsToBePrinted             null.Bool   `boil:"PriceIsToBePrinted" json:"PriceIsToBePrinted,omitempty" toml:"PriceIsToBePrinted" yaml:"PriceIsToBePrinted,omitempty"`
	PurgDocEstimatedPrice          null.Bool   `boil:"PurgDocEstimatedPrice" json:"PurgDocEstimatedPrice,omitempty" toml:"PurgDocEstimatedPrice" yaml:"PurgDocEstimatedPrice,omitempty"`
	PlannedDeliveryDurationInDays  null.String `boil:"PlannedDeliveryDurationInDays" json:"PlannedDeliveryDurationInDays,omitempty" toml:"PlannedDeliveryDurationInDays" yaml:"PlannedDeliveryDurationInDays,omitempty"`
	OverdelivTolrtdLmtRatioInPct   null.String `boil:"OverdelivTolrtdLmtRatioInPct" json:"OverdelivTolrtdLmtRatioInPct,omitempty" toml:"OverdelivTolrtdLmtRatioInPct" yaml:"OverdelivTolrtdLmtRatioInPct,omitempty"`
	UnlimitedOverdeliveryIsAllowed null.Bool   `boil:"UnlimitedOverdeliveryIsAllowed" json:"UnlimitedOverdeliveryIsAllowed,omitempty" toml:"UnlimitedOverdeliveryIsAllowed" yaml:"UnlimitedOverdeliveryIsAllowed,omitempty"`
	UnderdelivTolrtdLmtRatioInPct  null.String `boil:"UnderdelivTolrtdLmtRatioInPct" json:"UnderdelivTolrtdLmtRatioInPct,omitempty" toml:"UnderdelivTolrtdLmtRatioInPct" yaml:"UnderdelivTolrtdLmtRatioInPct,omitempty"`
	PurchasingDocumentItemCategory null.String `boil:"PurchasingDocumentItemCategory" json:"PurchasingDocumentItemCategory,omitempty" toml:"PurchasingDocumentItemCategory" yaml:"PurchasingDocumentItemCategory,omitempty"`
	AccountAssignmentCategory      null.String `boil:"AccountAssignmentCategory" json:"AccountAssignmentCategory,omitempty" toml:"AccountAssignmentCategory" yaml:"AccountAssignmentCategory,omitempty"`
	GoodsReceiptIsExpected         null.Bool   `boil:"GoodsReceiptIsExpected" json:"GoodsReceiptIsExpected,omitempty" toml:"GoodsReceiptIsExpected" yaml:"GoodsReceiptIsExpected,omitempty"`
	GoodsReceiptIsNonValuated      null.Bool   `boil:"GoodsReceiptIsNonValuated" json:"GoodsReceiptIsNonValuated,omitempty" toml:"GoodsReceiptIsNonValuated" yaml:"GoodsReceiptIsNonValuated,omitempty"`
	InvoiceIsExpected              null.Bool   `boil:"InvoiceIsExpected" json:"InvoiceIsExpected,omitempty" toml:"InvoiceIsExpected" yaml:"InvoiceIsExpected,omitempty"`
	InvoiceIsGoodsReceiptBased     null.Bool   `boil:"InvoiceIsGoodsReceiptBased" json:"InvoiceIsGoodsReceiptBased,omitempty" toml:"InvoiceIsGoodsReceiptBased" yaml:"InvoiceIsGoodsReceiptBased,omitempty"`
	ManualDeliveryAddressID        null.String `boil:"ManualDeliveryAddressID" json:"ManualDeliveryAddressID,omitempty" toml:"ManualDeliveryAddressID" yaml:"ManualDeliveryAddressID,omitempty"`
	VolumeUnit                     null.String `boil:"VolumeUnit" json:"VolumeUnit,omitempty" toml:"VolumeUnit" yaml:"VolumeUnit,omitempty"`
	Subcontractor                  null.String `boil:"Subcontractor" json:"Subcontractor,omitempty" toml:"Subcontractor" yaml:"Subcontractor,omitempty"`
	EvaldRcptSettlmtIsAllowed      null.Bool   `boil:"EvaldRcptSettlmtIsAllowed" json:"EvaldRcptSettlmtIsAllowed,omitempty" toml:"EvaldRcptSettlmtIsAllowed" yaml:"EvaldRcptSettlmtIsAllowed,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	ProductType                    null.String `boil:"ProductType" json:"ProductType,omitempty" toml:"ProductType" yaml:"ProductType,omitempty"`
	MaterialType                   null.String `boil:"MaterialType" json:"MaterialType,omitempty" toml:"MaterialType" yaml:"MaterialType,omitempty"`

	R *sapPurchaseContractItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseContractItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseContractItemDatumColumns = struct {
	PurchaseContract               string
	PurchaseContractItem           string
	PurchasingContractDeletionCode string
	PurchaseContractItemText       string
	CompanyCode                    string
	Plant                          string
	StorageLocation                string
	MaterialGroup                  string
	SupplierMaterialNumber         string
	OrderQuantityUnit              string
	TargetQuantity                 string
	PurgDocReleaseOrderQuantity    string
	OrderPriceUnit                 string
	ContractNetPriceAmount         string
	DocumentCurrency               string
	NetPriceQuantity               string
	TaxCode                        string
	TaxCountry                     string
	StockType                      string
	IsInfoRecordUpdated            string
	PriceIsToBePrinted             string
	PurgDocEstimatedPrice          string
	PlannedDeliveryDurationInDays  string
	OverdelivTolrtdLmtRatioInPct   string
	UnlimitedOverdeliveryIsAllowed string
	UnderdelivTolrtdLmtRatioInPct  string
	PurchasingDocumentItemCategory string
	AccountAssignmentCategory      string
	GoodsReceiptIsExpected         string
	GoodsReceiptIsNonValuated      string
	InvoiceIsExpected              string
	InvoiceIsGoodsReceiptBased     string
	ManualDeliveryAddressID        string
	VolumeUnit                     string
	Subcontractor                  string
	EvaldRcptSettlmtIsAllowed      string
	Material                       string
	ProductType                    string
	MaterialType                   string
}{
	PurchaseContract:               "PurchaseContract",
	PurchaseContractItem:           "PurchaseContractItem",
	PurchasingContractDeletionCode: "PurchasingContractDeletionCode",
	PurchaseContractItemText:       "PurchaseContractItemText",
	CompanyCode:                    "CompanyCode",
	Plant:                          "Plant",
	StorageLocation:                "StorageLocation",
	MaterialGroup:                  "MaterialGroup",
	SupplierMaterialNumber:         "SupplierMaterialNumber",
	OrderQuantityUnit:              "OrderQuantityUnit",
	TargetQuantity:                 "TargetQuantity",
	PurgDocReleaseOrderQuantity:    "PurgDocReleaseOrderQuantity",
	OrderPriceUnit:                 "OrderPriceUnit",
	ContractNetPriceAmount:         "ContractNetPriceAmount",
	DocumentCurrency:               "DocumentCurrency",
	NetPriceQuantity:               "NetPriceQuantity",
	TaxCode:                        "TaxCode",
	TaxCountry:                     "TaxCountry",
	StockType:                      "StockType",
	IsInfoRecordUpdated:            "IsInfoRecordUpdated",
	PriceIsToBePrinted:             "PriceIsToBePrinted",
	PurgDocEstimatedPrice:          "PurgDocEstimatedPrice",
	PlannedDeliveryDurationInDays:  "PlannedDeliveryDurationInDays",
	OverdelivTolrtdLmtRatioInPct:   "OverdelivTolrtdLmtRatioInPct",
	UnlimitedOverdeliveryIsAllowed: "UnlimitedOverdeliveryIsAllowed",
	UnderdelivTolrtdLmtRatioInPct:  "UnderdelivTolrtdLmtRatioInPct",
	PurchasingDocumentItemCategory: "PurchasingDocumentItemCategory",
	AccountAssignmentCategory:      "AccountAssignmentCategory",
	GoodsReceiptIsExpected:         "GoodsReceiptIsExpected",
	GoodsReceiptIsNonValuated:      "GoodsReceiptIsNonValuated",
	InvoiceIsExpected:              "InvoiceIsExpected",
	InvoiceIsGoodsReceiptBased:     "InvoiceIsGoodsReceiptBased",
	ManualDeliveryAddressID:        "ManualDeliveryAddressID",
	VolumeUnit:                     "VolumeUnit",
	Subcontractor:                  "Subcontractor",
	EvaldRcptSettlmtIsAllowed:      "EvaldRcptSettlmtIsAllowed",
	Material:                       "Material",
	ProductType:                    "ProductType",
	MaterialType:                   "MaterialType",
}

var SapPurchaseContractItemDatumTableColumns = struct {
	PurchaseContract               string
	PurchaseContractItem           string
	PurchasingContractDeletionCode string
	PurchaseContractItemText       string
	CompanyCode                    string
	Plant                          string
	StorageLocation                string
	MaterialGroup                  string
	SupplierMaterialNumber         string
	OrderQuantityUnit              string
	TargetQuantity                 string
	PurgDocReleaseOrderQuantity    string
	OrderPriceUnit                 string
	ContractNetPriceAmount         string
	DocumentCurrency               string
	NetPriceQuantity               string
	TaxCode                        string
	TaxCountry                     string
	StockType                      string
	IsInfoRecordUpdated            string
	PriceIsToBePrinted             string
	PurgDocEstimatedPrice          string
	PlannedDeliveryDurationInDays  string
	OverdelivTolrtdLmtRatioInPct   string
	UnlimitedOverdeliveryIsAllowed string
	UnderdelivTolrtdLmtRatioInPct  string
	PurchasingDocumentItemCategory string
	AccountAssignmentCategory      string
	GoodsReceiptIsExpected         string
	GoodsReceiptIsNonValuated      string
	InvoiceIsExpected              string
	InvoiceIsGoodsReceiptBased     string
	ManualDeliveryAddressID        string
	VolumeUnit                     string
	Subcontractor                  string
	EvaldRcptSettlmtIsAllowed      string
	Material                       string
	ProductType                    string
	MaterialType                   string
}{
	PurchaseContract:               "sap_purchase_contract_item_data.PurchaseContract",
	PurchaseContractItem:           "sap_purchase_contract_item_data.PurchaseContractItem",
	PurchasingContractDeletionCode: "sap_purchase_contract_item_data.PurchasingContractDeletionCode",
	PurchaseContractItemText:       "sap_purchase_contract_item_data.PurchaseContractItemText",
	CompanyCode:                    "sap_purchase_contract_item_data.CompanyCode",
	Plant:                          "sap_purchase_contract_item_data.Plant",
	StorageLocation:                "sap_purchase_contract_item_data.StorageLocation",
	MaterialGroup:                  "sap_purchase_contract_item_data.MaterialGroup",
	SupplierMaterialNumber:         "sap_purchase_contract_item_data.SupplierMaterialNumber",
	OrderQuantityUnit:              "sap_purchase_contract_item_data.OrderQuantityUnit",
	TargetQuantity:                 "sap_purchase_contract_item_data.TargetQuantity",
	PurgDocReleaseOrderQuantity:    "sap_purchase_contract_item_data.PurgDocReleaseOrderQuantity",
	OrderPriceUnit:                 "sap_purchase_contract_item_data.OrderPriceUnit",
	ContractNetPriceAmount:         "sap_purchase_contract_item_data.ContractNetPriceAmount",
	DocumentCurrency:               "sap_purchase_contract_item_data.DocumentCurrency",
	NetPriceQuantity:               "sap_purchase_contract_item_data.NetPriceQuantity",
	TaxCode:                        "sap_purchase_contract_item_data.TaxCode",
	TaxCountry:                     "sap_purchase_contract_item_data.TaxCountry",
	StockType:                      "sap_purchase_contract_item_data.StockType",
	IsInfoRecordUpdated:            "sap_purchase_contract_item_data.IsInfoRecordUpdated",
	PriceIsToBePrinted:             "sap_purchase_contract_item_data.PriceIsToBePrinted",
	PurgDocEstimatedPrice:          "sap_purchase_contract_item_data.PurgDocEstimatedPrice",
	PlannedDeliveryDurationInDays:  "sap_purchase_contract_item_data.PlannedDeliveryDurationInDays",
	OverdelivTolrtdLmtRatioInPct:   "sap_purchase_contract_item_data.OverdelivTolrtdLmtRatioInPct",
	UnlimitedOverdeliveryIsAllowed: "sap_purchase_contract_item_data.UnlimitedOverdeliveryIsAllowed",
	UnderdelivTolrtdLmtRatioInPct:  "sap_purchase_contract_item_data.UnderdelivTolrtdLmtRatioInPct",
	PurchasingDocumentItemCategory: "sap_purchase_contract_item_data.PurchasingDocumentItemCategory",
	AccountAssignmentCategory:      "sap_purchase_contract_item_data.AccountAssignmentCategory",
	GoodsReceiptIsExpected:         "sap_purchase_contract_item_data.GoodsReceiptIsExpected",
	GoodsReceiptIsNonValuated:      "sap_purchase_contract_item_data.GoodsReceiptIsNonValuated",
	InvoiceIsExpected:              "sap_purchase_contract_item_data.InvoiceIsExpected",
	InvoiceIsGoodsReceiptBased:     "sap_purchase_contract_item_data.InvoiceIsGoodsReceiptBased",
	ManualDeliveryAddressID:        "sap_purchase_contract_item_data.ManualDeliveryAddressID",
	VolumeUnit:                     "sap_purchase_contract_item_data.VolumeUnit",
	Subcontractor:                  "sap_purchase_contract_item_data.Subcontractor",
	EvaldRcptSettlmtIsAllowed:      "sap_purchase_contract_item_data.EvaldRcptSettlmtIsAllowed",
	Material:                       "sap_purchase_contract_item_data.Material",
	ProductType:                    "sap_purchase_contract_item_data.ProductType",
	MaterialType:                   "sap_purchase_contract_item_data.MaterialType",
}

// Generated where

var SapPurchaseContractItemDatumWhere = struct {
	PurchaseContract               whereHelperstring
	PurchaseContractItem           whereHelperstring
	PurchasingContractDeletionCode whereHelpernull_String
	PurchaseContractItemText       whereHelpernull_String
	CompanyCode                    whereHelpernull_String
	Plant                          whereHelpernull_String
	StorageLocation                whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	SupplierMaterialNumber         whereHelpernull_String
	OrderQuantityUnit              whereHelpernull_String
	TargetQuantity                 whereHelpernull_String
	PurgDocReleaseOrderQuantity    whereHelpernull_String
	OrderPriceUnit                 whereHelpernull_String
	ContractNetPriceAmount         whereHelpernull_String
	DocumentCurrency               whereHelpernull_String
	NetPriceQuantity               whereHelpernull_String
	TaxCode                        whereHelpernull_String
	TaxCountry                     whereHelpernull_String
	StockType                      whereHelpernull_String
	IsInfoRecordUpdated            whereHelpernull_String
	PriceIsToBePrinted             whereHelpernull_Bool
	PurgDocEstimatedPrice          whereHelpernull_Bool
	PlannedDeliveryDurationInDays  whereHelpernull_String
	OverdelivTolrtdLmtRatioInPct   whereHelpernull_String
	UnlimitedOverdeliveryIsAllowed whereHelpernull_Bool
	UnderdelivTolrtdLmtRatioInPct  whereHelpernull_String
	PurchasingDocumentItemCategory whereHelpernull_String
	AccountAssignmentCategory      whereHelpernull_String
	GoodsReceiptIsExpected         whereHelpernull_Bool
	GoodsReceiptIsNonValuated      whereHelpernull_Bool
	InvoiceIsExpected              whereHelpernull_Bool
	InvoiceIsGoodsReceiptBased     whereHelpernull_Bool
	ManualDeliveryAddressID        whereHelpernull_String
	VolumeUnit                     whereHelpernull_String
	Subcontractor                  whereHelpernull_String
	EvaldRcptSettlmtIsAllowed      whereHelpernull_Bool
	Material                       whereHelpernull_String
	ProductType                    whereHelpernull_String
	MaterialType                   whereHelpernull_String
}{
	PurchaseContract:               whereHelperstring{field: "`sap_purchase_contract_item_data`.`PurchaseContract`"},
	PurchaseContractItem:           whereHelperstring{field: "`sap_purchase_contract_item_data`.`PurchaseContractItem`"},
	PurchasingContractDeletionCode: whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`PurchasingContractDeletionCode`"},
	PurchaseContractItemText:       whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`PurchaseContractItemText`"},
	CompanyCode:                    whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`CompanyCode`"},
	Plant:                          whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`Plant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`StorageLocation`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`MaterialGroup`"},
	SupplierMaterialNumber:         whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`SupplierMaterialNumber`"},
	OrderQuantityUnit:              whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`OrderQuantityUnit`"},
	TargetQuantity:                 whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`TargetQuantity`"},
	PurgDocReleaseOrderQuantity:    whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`PurgDocReleaseOrderQuantity`"},
	OrderPriceUnit:                 whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`OrderPriceUnit`"},
	ContractNetPriceAmount:         whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`ContractNetPriceAmount`"},
	DocumentCurrency:               whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`DocumentCurrency`"},
	NetPriceQuantity:               whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`NetPriceQuantity`"},
	TaxCode:                        whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`TaxCode`"},
	TaxCountry:                     whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`TaxCountry`"},
	StockType:                      whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`StockType`"},
	IsInfoRecordUpdated:            whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`IsInfoRecordUpdated`"},
	PriceIsToBePrinted:             whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`PriceIsToBePrinted`"},
	PurgDocEstimatedPrice:          whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`PurgDocEstimatedPrice`"},
	PlannedDeliveryDurationInDays:  whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`PlannedDeliveryDurationInDays`"},
	OverdelivTolrtdLmtRatioInPct:   whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`OverdelivTolrtdLmtRatioInPct`"},
	UnlimitedOverdeliveryIsAllowed: whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`UnlimitedOverdeliveryIsAllowed`"},
	UnderdelivTolrtdLmtRatioInPct:  whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`UnderdelivTolrtdLmtRatioInPct`"},
	PurchasingDocumentItemCategory: whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`PurchasingDocumentItemCategory`"},
	AccountAssignmentCategory:      whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`AccountAssignmentCategory`"},
	GoodsReceiptIsExpected:         whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`GoodsReceiptIsExpected`"},
	GoodsReceiptIsNonValuated:      whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`GoodsReceiptIsNonValuated`"},
	InvoiceIsExpected:              whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`InvoiceIsExpected`"},
	InvoiceIsGoodsReceiptBased:     whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`InvoiceIsGoodsReceiptBased`"},
	ManualDeliveryAddressID:        whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`ManualDeliveryAddressID`"},
	VolumeUnit:                     whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`VolumeUnit`"},
	Subcontractor:                  whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`Subcontractor`"},
	EvaldRcptSettlmtIsAllowed:      whereHelpernull_Bool{field: "`sap_purchase_contract_item_data`.`EvaldRcptSettlmtIsAllowed`"},
	Material:                       whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`Material`"},
	ProductType:                    whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`ProductType`"},
	MaterialType:                   whereHelpernull_String{field: "`sap_purchase_contract_item_data`.`MaterialType`"},
}

// SapPurchaseContractItemDatumRels is where relationship names are stored.
var SapPurchaseContractItemDatumRels = struct {
	PurchaseContractSapPurchaseContractHeaderDatum string
}{
	PurchaseContractSapPurchaseContractHeaderDatum: "PurchaseContractSapPurchaseContractHeaderDatum",
}

// sapPurchaseContractItemDatumR is where relationships are stored.
type sapPurchaseContractItemDatumR struct {
	PurchaseContractSapPurchaseContractHeaderDatum *SapPurchaseContractHeaderDatum `boil:"PurchaseContractSapPurchaseContractHeaderDatum" json:"PurchaseContractSapPurchaseContractHeaderDatum" toml:"PurchaseContractSapPurchaseContractHeaderDatum" yaml:"PurchaseContractSapPurchaseContractHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseContractItemDatumR) NewStruct() *sapPurchaseContractItemDatumR {
	return &sapPurchaseContractItemDatumR{}
}

// sapPurchaseContractItemDatumL is where Load methods for each relationship are stored.
type sapPurchaseContractItemDatumL struct{}

var (
	sapPurchaseContractItemDatumAllColumns            = []string{"PurchaseContract", "PurchaseContractItem", "PurchasingContractDeletionCode", "PurchaseContractItemText", "CompanyCode", "Plant", "StorageLocation", "MaterialGroup", "SupplierMaterialNumber", "OrderQuantityUnit", "TargetQuantity", "PurgDocReleaseOrderQuantity", "OrderPriceUnit", "ContractNetPriceAmount", "DocumentCurrency", "NetPriceQuantity", "TaxCode", "TaxCountry", "StockType", "IsInfoRecordUpdated", "PriceIsToBePrinted", "PurgDocEstimatedPrice", "PlannedDeliveryDurationInDays", "OverdelivTolrtdLmtRatioInPct", "UnlimitedOverdeliveryIsAllowed", "UnderdelivTolrtdLmtRatioInPct", "PurchasingDocumentItemCategory", "AccountAssignmentCategory", "GoodsReceiptIsExpected", "GoodsReceiptIsNonValuated", "InvoiceIsExpected", "InvoiceIsGoodsReceiptBased", "ManualDeliveryAddressID", "VolumeUnit", "Subcontractor", "EvaldRcptSettlmtIsAllowed", "Material", "ProductType", "MaterialType"}
	sapPurchaseContractItemDatumColumnsWithoutDefault = []string{"PurchaseContract", "PurchaseContractItem", "PurchasingContractDeletionCode", "PurchaseContractItemText", "CompanyCode", "Plant", "StorageLocation", "MaterialGroup", "SupplierMaterialNumber", "OrderQuantityUnit", "TargetQuantity", "PurgDocReleaseOrderQuantity", "OrderPriceUnit", "ContractNetPriceAmount", "DocumentCurrency", "NetPriceQuantity", "TaxCode", "TaxCountry", "StockType", "IsInfoRecordUpdated", "PriceIsToBePrinted", "PurgDocEstimatedPrice", "PlannedDeliveryDurationInDays", "OverdelivTolrtdLmtRatioInPct", "UnlimitedOverdeliveryIsAllowed", "UnderdelivTolrtdLmtRatioInPct", "PurchasingDocumentItemCategory", "AccountAssignmentCategory", "GoodsReceiptIsExpected", "GoodsReceiptIsNonValuated", "InvoiceIsExpected", "InvoiceIsGoodsReceiptBased", "ManualDeliveryAddressID", "VolumeUnit", "Subcontractor", "EvaldRcptSettlmtIsAllowed", "Material", "ProductType", "MaterialType"}
	sapPurchaseContractItemDatumColumnsWithDefault    = []string{}
	sapPurchaseContractItemDatumPrimaryKeyColumns     = []string{"PurchaseContract", "PurchaseContractItem"}
	sapPurchaseContractItemDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseContractItemDatumSlice is an alias for a slice of pointers to SapPurchaseContractItemDatum.
	// This should almost always be used instead of []SapPurchaseContractItemDatum.
	SapPurchaseContractItemDatumSlice []*SapPurchaseContractItemDatum
	// SapPurchaseContractItemDatumHook is the signature for custom SapPurchaseContractItemDatum hook methods
	SapPurchaseContractItemDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseContractItemDatum) error

	sapPurchaseContractItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseContractItemDatumType                 = reflect.TypeOf(&SapPurchaseContractItemDatum{})
	sapPurchaseContractItemDatumMapping              = queries.MakeStructMapping(sapPurchaseContractItemDatumType)
	sapPurchaseContractItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, sapPurchaseContractItemDatumPrimaryKeyColumns)
	sapPurchaseContractItemDatumInsertCacheMut       sync.RWMutex
	sapPurchaseContractItemDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseContractItemDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseContractItemDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseContractItemDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseContractItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseContractItemDatumAfterSelectHooks []SapPurchaseContractItemDatumHook

var sapPurchaseContractItemDatumBeforeInsertHooks []SapPurchaseContractItemDatumHook
var sapPurchaseContractItemDatumAfterInsertHooks []SapPurchaseContractItemDatumHook

var sapPurchaseContractItemDatumBeforeUpdateHooks []SapPurchaseContractItemDatumHook
var sapPurchaseContractItemDatumAfterUpdateHooks []SapPurchaseContractItemDatumHook

var sapPurchaseContractItemDatumBeforeDeleteHooks []SapPurchaseContractItemDatumHook
var sapPurchaseContractItemDatumAfterDeleteHooks []SapPurchaseContractItemDatumHook

var sapPurchaseContractItemDatumBeforeUpsertHooks []SapPurchaseContractItemDatumHook
var sapPurchaseContractItemDatumAfterUpsertHooks []SapPurchaseContractItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseContractItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseContractItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseContractItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseContractItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseContractItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseContractItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseContractItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseContractItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseContractItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseContractItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseContractItemDatumHook registers your hook function for all future operations.
func AddSapPurchaseContractItemDatumHook(hookPoint boil.HookPoint, sapPurchaseContractItemDatumHook SapPurchaseContractItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseContractItemDatumAfterSelectHooks = append(sapPurchaseContractItemDatumAfterSelectHooks, sapPurchaseContractItemDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseContractItemDatumBeforeInsertHooks = append(sapPurchaseContractItemDatumBeforeInsertHooks, sapPurchaseContractItemDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseContractItemDatumAfterInsertHooks = append(sapPurchaseContractItemDatumAfterInsertHooks, sapPurchaseContractItemDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseContractItemDatumBeforeUpdateHooks = append(sapPurchaseContractItemDatumBeforeUpdateHooks, sapPurchaseContractItemDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseContractItemDatumAfterUpdateHooks = append(sapPurchaseContractItemDatumAfterUpdateHooks, sapPurchaseContractItemDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseContractItemDatumBeforeDeleteHooks = append(sapPurchaseContractItemDatumBeforeDeleteHooks, sapPurchaseContractItemDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseContractItemDatumAfterDeleteHooks = append(sapPurchaseContractItemDatumAfterDeleteHooks, sapPurchaseContractItemDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseContractItemDatumBeforeUpsertHooks = append(sapPurchaseContractItemDatumBeforeUpsertHooks, sapPurchaseContractItemDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseContractItemDatumAfterUpsertHooks = append(sapPurchaseContractItemDatumAfterUpsertHooks, sapPurchaseContractItemDatumHook)
	}
}

// One returns a single sapPurchaseContractItemDatum record from the query.
func (q sapPurchaseContractItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseContractItemDatum, error) {
	o := &SapPurchaseContractItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_contract_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseContractItemDatum records from the query.
func (q sapPurchaseContractItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseContractItemDatumSlice, error) {
	var o []*SapPurchaseContractItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseContractItemDatum slice")
	}

	if len(sapPurchaseContractItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseContractItemDatum records in the query.
func (q sapPurchaseContractItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_contract_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseContractItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_contract_item_data exists")
	}

	return count > 0, nil
}

// PurchaseContractSapPurchaseContractHeaderDatum pointed to by the foreign key.
func (o *SapPurchaseContractItemDatum) PurchaseContractSapPurchaseContractHeaderDatum(mods ...qm.QueryMod) sapPurchaseContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseContract` = ?", o.PurchaseContract),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseContractHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_contract_header_data`")

	return query
}

// LoadPurchaseContractSapPurchaseContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseContractItemDatumL) LoadPurchaseContractSapPurchaseContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseContractItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseContractItemDatum
	var object *SapPurchaseContractItemDatum

	if singular {
		object = maybeSapPurchaseContractItemDatum.(*SapPurchaseContractItemDatum)
	} else {
		slice = *maybeSapPurchaseContractItemDatum.(*[]*SapPurchaseContractItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseContractItemDatumR{}
		}
		args = append(args, object.PurchaseContract)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseContractItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseContract {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseContract)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_contract_header_data`),
		qm.WhereIn(`sap_purchase_contract_header_data.PurchaseContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseContractHeaderDatum")
	}

	var resultSlice []*SapPurchaseContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_contract_header_data")
	}

	if len(sapPurchaseContractItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseContractSapPurchaseContractHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseContractHeaderDatumR{}
		}
		foreign.R.PurchaseContractSapPurchaseContractItemData = append(foreign.R.PurchaseContractSapPurchaseContractItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseContract == foreign.PurchaseContract {
				local.R.PurchaseContractSapPurchaseContractHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseContractHeaderDatumR{}
				}
				foreign.R.PurchaseContractSapPurchaseContractItemData = append(foreign.R.PurchaseContractSapPurchaseContractItemData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseContractSapPurchaseContractHeaderDatum of the sapPurchaseContractItemDatum to the related item.
// Sets o.R.PurchaseContractSapPurchaseContractHeaderDatum to related.
// Adds o to related.R.PurchaseContractSapPurchaseContractItemData.
func (o *SapPurchaseContractItemDatum) SetPurchaseContractSapPurchaseContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_contract_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseContract"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseContractItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseContract, o.PurchaseContract, o.PurchaseContractItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseContract = related.PurchaseContract
	if o.R == nil {
		o.R = &sapPurchaseContractItemDatumR{
			PurchaseContractSapPurchaseContractHeaderDatum: related,
		}
	} else {
		o.R.PurchaseContractSapPurchaseContractHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchaseContractHeaderDatumR{
			PurchaseContractSapPurchaseContractItemData: SapPurchaseContractItemDatumSlice{o},
		}
	} else {
		related.R.PurchaseContractSapPurchaseContractItemData = append(related.R.PurchaseContractSapPurchaseContractItemData, o)
	}

	return nil
}

// SapPurchaseContractItemData retrieves all the records using an executor.
func SapPurchaseContractItemData(mods ...qm.QueryMod) sapPurchaseContractItemDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_contract_item_data`"))
	return sapPurchaseContractItemDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseContractItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseContractItemDatum(ctx context.Context, exec boil.ContextExecutor, purchaseContract string, purchaseContractItem string, selectCols ...string) (*SapPurchaseContractItemDatum, error) {
	sapPurchaseContractItemDatumObj := &SapPurchaseContractItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_contract_item_data` where `PurchaseContract`=? AND `PurchaseContractItem`=?", sel,
	)

	q := queries.Raw(query, purchaseContract, purchaseContractItem)

	err := q.Bind(ctx, exec, sapPurchaseContractItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_contract_item_data")
	}

	if err = sapPurchaseContractItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseContractItemDatumObj, err
	}

	return sapPurchaseContractItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseContractItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_contract_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseContractItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseContractItemDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseContractItemDatumInsertCache[key]
	sapPurchaseContractItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseContractItemDatumAllColumns,
			sapPurchaseContractItemDatumColumnsWithDefault,
			sapPurchaseContractItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_contract_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_contract_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_contract_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseContractItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_contract_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseContract,
		o.PurchaseContractItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_contract_item_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseContractItemDatumInsertCacheMut.Lock()
		sapPurchaseContractItemDatumInsertCache[key] = cache
		sapPurchaseContractItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseContractItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseContractItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseContractItemDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseContractItemDatumUpdateCache[key]
	sapPurchaseContractItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseContractItemDatumAllColumns,
			sapPurchaseContractItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_contract_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_contract_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseContractItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, append(wl, sapPurchaseContractItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_contract_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_contract_item_data")
	}

	if !cached {
		sapPurchaseContractItemDatumUpdateCacheMut.Lock()
		sapPurchaseContractItemDatumUpdateCache[key] = cache
		sapPurchaseContractItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseContractItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_contract_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_contract_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseContractItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_contract_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseContractItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseContractItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseContractItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseContractItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_contract_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseContractItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseContractItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseContractItemDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseContractItemDatumUpsertCache[key]
	sapPurchaseContractItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseContractItemDatumAllColumns,
			sapPurchaseContractItemDatumColumnsWithDefault,
			sapPurchaseContractItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseContractItemDatumAllColumns,
			sapPurchaseContractItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_contract_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_contract_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_contract_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_contract_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseContractItemDatumType, sapPurchaseContractItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_contract_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_contract_item_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseContractItemDatumUpsertCacheMut.Lock()
		sapPurchaseContractItemDatumUpsertCache[key] = cache
		sapPurchaseContractItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseContractItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseContractItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseContractItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseContractItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_contract_item_data` WHERE `PurchaseContract`=? AND `PurchaseContractItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_contract_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_contract_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseContractItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseContractItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_contract_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_contract_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseContractItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseContractItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_contract_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseContractItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_contract_item_data")
	}

	if len(sapPurchaseContractItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseContractItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseContractItemDatum(ctx, exec, o.PurchaseContract, o.PurchaseContractItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseContractItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseContractItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseContractItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_contract_item_data`.* FROM `sap_purchase_contract_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseContractItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseContractItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseContractItemDatumExists checks if the SapPurchaseContractItemDatum row exists.
func SapPurchaseContractItemDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseContract string, purchaseContractItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_contract_item_data` where `PurchaseContract`=? AND `PurchaseContractItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseContract, purchaseContractItem)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseContract, purchaseContractItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_contract_item_data exists")
	}

	return exists, nil
}
