// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCustomerReturnItemDatum is an object representing the database table.
type SapCustomerReturnItemDatum struct {
	CustomerReturn                 string      `boil:"CustomerReturn" json:"CustomerReturn" toml:"CustomerReturn" yaml:"CustomerReturn"`
	CustomerReturnItem             string      `boil:"CustomerReturnItem" json:"CustomerReturnItem" toml:"CustomerReturnItem" yaml:"CustomerReturnItem"`
	HigherLevelItem                null.String `boil:"HigherLevelItem" json:"HigherLevelItem,omitempty" toml:"HigherLevelItem" yaml:"HigherLevelItem,omitempty"`
	CustomerReturnItemCategory     null.String `boil:"CustomerReturnItemCategory" json:"CustomerReturnItemCategory,omitempty" toml:"CustomerReturnItemCategory" yaml:"CustomerReturnItemCategory,omitempty"`
	CustomerReturnItemText         null.String `boil:"CustomerReturnItemText" json:"CustomerReturnItemText,omitempty" toml:"CustomerReturnItemText" yaml:"CustomerReturnItemText,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer             null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	RequestedQuantity              null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	RequestedQuantityUnit          null.String `boil:"RequestedQuantityUnit" json:"RequestedQuantityUnit,omitempty" toml:"RequestedQuantityUnit" yaml:"RequestedQuantityUnit,omitempty"`
	ItemGrossWeight                null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                  null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                 null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemVolume                     null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit                 null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	NetAmount                      null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	ProductionPlant                null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	ShippingPoint                  null.String `boil:"ShippingPoint" json:"ShippingPoint,omitempty" toml:"ShippingPoint" yaml:"ShippingPoint,omitempty"`
	ShippingType                   null.String `boil:"ShippingType" json:"ShippingType,omitempty" toml:"ShippingType" yaml:"ShippingType,omitempty"`
	DeliveryPriority               null.String `boil:"DeliveryPriority" json:"DeliveryPriority,omitempty" toml:"DeliveryPriority" yaml:"DeliveryPriority,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	ProductTaxClassification1      null.String `boil:"ProductTaxClassification1" json:"ProductTaxClassification1,omitempty" toml:"ProductTaxClassification1" yaml:"ProductTaxClassification1,omitempty"`
	SalesDocumentRjcnReason        null.String `boil:"SalesDocumentRjcnReason" json:"SalesDocumentRjcnReason,omitempty" toml:"SalesDocumentRjcnReason" yaml:"SalesDocumentRjcnReason,omitempty"`
	ItemBillingBlockReason         null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	RetsMgmtProcess                null.String `boil:"RetsMgmtProcess" json:"RetsMgmtProcess,omitempty" toml:"RetsMgmtProcess" yaml:"RetsMgmtProcess,omitempty"`
	RetsMgmtProcessItem            null.String `boil:"RetsMgmtProcessItem" json:"RetsMgmtProcessItem,omitempty" toml:"RetsMgmtProcessItem" yaml:"RetsMgmtProcessItem,omitempty"`
	ReturnReason                   null.String `boil:"ReturnReason" json:"ReturnReason,omitempty" toml:"ReturnReason" yaml:"ReturnReason,omitempty"`
	RetsMgmtProcessingBlock        null.String `boil:"RetsMgmtProcessingBlock" json:"RetsMgmtProcessingBlock,omitempty" toml:"RetsMgmtProcessingBlock" yaml:"RetsMgmtProcessingBlock,omitempty"`
	CustRetItmFollowUpActivity     null.String `boil:"CustRetItmFollowUpActivity" json:"CustRetItmFollowUpActivity,omitempty" toml:"CustRetItmFollowUpActivity" yaml:"CustRetItmFollowUpActivity,omitempty"`
	ReturnsMaterialHasBeenReceived null.String `boil:"ReturnsMaterialHasBeenReceived" json:"ReturnsMaterialHasBeenReceived,omitempty" toml:"ReturnsMaterialHasBeenReceived" yaml:"ReturnsMaterialHasBeenReceived,omitempty"`
	ReturnsRefundType              null.String `boil:"ReturnsRefundType" json:"ReturnsRefundType,omitempty" toml:"ReturnsRefundType" yaml:"ReturnsRefundType,omitempty"`
	ReturnsRefundProcgMode         null.String `boil:"ReturnsRefundProcgMode" json:"ReturnsRefundProcgMode,omitempty" toml:"ReturnsRefundProcgMode" yaml:"ReturnsRefundProcgMode,omitempty"`
	ReturnsRefundExtent            null.String `boil:"ReturnsRefundExtent" json:"ReturnsRefundExtent,omitempty" toml:"ReturnsRefundExtent" yaml:"ReturnsRefundExtent,omitempty"`
	PrelimRefundIsDetermined       null.String `boil:"PrelimRefundIsDetermined" json:"PrelimRefundIsDetermined,omitempty" toml:"PrelimRefundIsDetermined" yaml:"PrelimRefundIsDetermined,omitempty"`
	ReturnsRefundRjcnReason        null.String `boil:"ReturnsRefundRjcnReason" json:"ReturnsRefundRjcnReason,omitempty" toml:"ReturnsRefundRjcnReason" yaml:"ReturnsRefundRjcnReason,omitempty"`
	ReplacementMaterial            null.String `boil:"ReplacementMaterial" json:"ReplacementMaterial,omitempty" toml:"ReplacementMaterial" yaml:"ReplacementMaterial,omitempty"`
	ReplacementMaterialQuantity    null.String `boil:"ReplacementMaterialQuantity" json:"ReplacementMaterialQuantity,omitempty" toml:"ReplacementMaterialQuantity" yaml:"ReplacementMaterialQuantity,omitempty"`
	ReplacementMaterialQtyUnit     null.String `boil:"ReplacementMaterialQtyUnit" json:"ReplacementMaterialQtyUnit,omitempty" toml:"ReplacementMaterialQtyUnit" yaml:"ReplacementMaterialQtyUnit,omitempty"`
	ReplacementMaterialIsRequested null.String `boil:"ReplacementMaterialIsRequested" json:"ReplacementMaterialIsRequested,omitempty" toml:"ReplacementMaterialIsRequested" yaml:"ReplacementMaterialIsRequested,omitempty"`
	ReplacementMatlSupplyingPlant  null.String `boil:"ReplacementMatlSupplyingPlant" json:"ReplacementMatlSupplyingPlant,omitempty" toml:"ReplacementMatlSupplyingPlant" yaml:"ReplacementMatlSupplyingPlant,omitempty"`
	NextPlantForFollowUpActivity   null.String `boil:"NextPlantForFollowUpActivity" json:"NextPlantForFollowUpActivity,omitempty" toml:"NextPlantForFollowUpActivity" yaml:"NextPlantForFollowUpActivity,omitempty"`
	ReturnsTransshipmentPlant      null.String `boil:"ReturnsTransshipmentPlant" json:"ReturnsTransshipmentPlant,omitempty" toml:"ReturnsTransshipmentPlant" yaml:"ReturnsTransshipmentPlant,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	SupplierRetMatlAuthzn          null.String `boil:"SupplierRetMatlAuthzn" json:"SupplierRetMatlAuthzn,omitempty" toml:"SupplierRetMatlAuthzn" yaml:"SupplierRetMatlAuthzn,omitempty"`
	SuplrRetMatlAuthznIsRequired   null.String `boil:"SuplrRetMatlAuthznIsRequired" json:"SuplrRetMatlAuthznIsRequired,omitempty" toml:"SuplrRetMatlAuthznIsRequired" yaml:"SuplrRetMatlAuthznIsRequired,omitempty"`
	CustomerRetMatlInspResultCode  null.String `boil:"CustomerRetMatlInspResultCode" json:"CustomerRetMatlInspResultCode,omitempty" toml:"CustomerRetMatlInspResultCode" yaml:"CustomerRetMatlInspResultCode,omitempty"`
	NextFllwUpActivityForMatlInsp  null.String `boil:"NextFllwUpActivityForMatlInsp" json:"NextFllwUpActivityForMatlInsp,omitempty" toml:"NextFllwUpActivityForMatlInsp" yaml:"NextFllwUpActivityForMatlInsp,omitempty"`
	RetMatlInspResultCode          null.String `boil:"RetMatlInspResultCode" json:"RetMatlInspResultCode,omitempty" toml:"RetMatlInspResultCode" yaml:"RetMatlInspResultCode,omitempty"`
	ProductIsInspectedAtCustSite   null.String `boil:"ProductIsInspectedAtCustSite" json:"ProductIsInspectedAtCustSite,omitempty" toml:"ProductIsInspectedAtCustSite" yaml:"ProductIsInspectedAtCustSite,omitempty"`
	CustRetMatlAuthzn              null.String `boil:"CustRetMatlAuthzn" json:"CustRetMatlAuthzn,omitempty" toml:"CustRetMatlAuthzn" yaml:"CustRetMatlAuthzn,omitempty"`
	CRMLogicalSystem               null.String `boil:"CRMLogicalSystem" json:"CRMLogicalSystem,omitempty" toml:"CRMLogicalSystem" yaml:"CRMLogicalSystem,omitempty"`
	CRMObjectUUID                  null.String `boil:"CRMObjectUUID" json:"CRMObjectUUID,omitempty" toml:"CRMObjectUUID" yaml:"CRMObjectUUID,omitempty"`
	CRMObjectID                    null.String `boil:"CRMObjectID" json:"CRMObjectID,omitempty" toml:"CRMObjectID" yaml:"CRMObjectID,omitempty"`
	CRMObjectType                  null.String `boil:"CRMObjectType" json:"CRMObjectType,omitempty" toml:"CRMObjectType" yaml:"CRMObjectType,omitempty"`
	RetsMgmtItmLogProcgStatus      null.String `boil:"RetsMgmtItmLogProcgStatus" json:"RetsMgmtItmLogProcgStatus,omitempty" toml:"RetsMgmtItmLogProcgStatus" yaml:"RetsMgmtItmLogProcgStatus,omitempty"`
	RetsMgmtItmCompnProcgStatus    null.String `boil:"RetsMgmtItmCompnProcgStatus" json:"RetsMgmtItmCompnProcgStatus,omitempty" toml:"RetsMgmtItmCompnProcgStatus" yaml:"RetsMgmtItmCompnProcgStatus,omitempty"`
	RetsMgmtItmProcgStatus         null.String `boil:"RetsMgmtItmProcgStatus" json:"RetsMgmtItmProcgStatus,omitempty" toml:"RetsMgmtItmProcgStatus" yaml:"RetsMgmtItmProcgStatus,omitempty"`
	ReturnsDocumentStatus          null.String `boil:"ReturnsDocumentStatus" json:"ReturnsDocumentStatus,omitempty" toml:"ReturnsDocumentStatus" yaml:"ReturnsDocumentStatus,omitempty"`
	ReturnsDocumentApprovalStatus  null.String `boil:"ReturnsDocumentApprovalStatus" json:"ReturnsDocumentApprovalStatus,omitempty" toml:"ReturnsDocumentApprovalStatus" yaml:"ReturnsDocumentApprovalStatus,omitempty"`
	SDProcessStatus                null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem        null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	ReferenceSDDocumentCategory    null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	SDDocumentRejectionStatus      null.String `boil:"SDDocumentRejectionStatus" json:"SDDocumentRejectionStatus,omitempty" toml:"SDDocumentRejectionStatus" yaml:"SDDocumentRejectionStatus,omitempty"`

	R *sapCustomerReturnItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCustomerReturnItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCustomerReturnItemDatumColumns = struct {
	CustomerReturn                 string
	CustomerReturnItem             string
	HigherLevelItem                string
	CustomerReturnItemCategory     string
	CustomerReturnItemText         string
	PurchaseOrderByCustomer        string
	Material                       string
	MaterialByCustomer             string
	RequestedQuantity              string
	RequestedQuantityUnit          string
	ItemGrossWeight                string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	ItemVolume                     string
	ItemVolumeUnit                 string
	TransactionCurrency            string
	NetAmount                      string
	MaterialGroup                  string
	Batch                          string
	ProductionPlant                string
	StorageLocation                string
	ShippingPoint                  string
	ShippingType                   string
	DeliveryPriority               string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	ProductTaxClassification1      string
	SalesDocumentRjcnReason        string
	ItemBillingBlockReason         string
	ProfitCenter                   string
	RetsMgmtProcess                string
	RetsMgmtProcessItem            string
	ReturnReason                   string
	RetsMgmtProcessingBlock        string
	CustRetItmFollowUpActivity     string
	ReturnsMaterialHasBeenReceived string
	ReturnsRefundType              string
	ReturnsRefundProcgMode         string
	ReturnsRefundExtent            string
	PrelimRefundIsDetermined       string
	ReturnsRefundRjcnReason        string
	ReplacementMaterial            string
	ReplacementMaterialQuantity    string
	ReplacementMaterialQtyUnit     string
	ReplacementMaterialIsRequested string
	ReplacementMatlSupplyingPlant  string
	NextPlantForFollowUpActivity   string
	ReturnsTransshipmentPlant      string
	Supplier                       string
	SupplierRetMatlAuthzn          string
	SuplrRetMatlAuthznIsRequired   string
	CustomerRetMatlInspResultCode  string
	NextFllwUpActivityForMatlInsp  string
	RetMatlInspResultCode          string
	ProductIsInspectedAtCustSite   string
	CustRetMatlAuthzn              string
	CRMLogicalSystem               string
	CRMObjectUUID                  string
	CRMObjectID                    string
	CRMObjectType                  string
	RetsMgmtItmLogProcgStatus      string
	RetsMgmtItmCompnProcgStatus    string
	RetsMgmtItmProcgStatus         string
	ReturnsDocumentStatus          string
	ReturnsDocumentApprovalStatus  string
	SDProcessStatus                string
	ReferenceSDDocument            string
	ReferenceSDDocumentItem        string
	ReferenceSDDocumentCategory    string
	SDDocumentRejectionStatus      string
}{
	CustomerReturn:                 "CustomerReturn",
	CustomerReturnItem:             "CustomerReturnItem",
	HigherLevelItem:                "HigherLevelItem",
	CustomerReturnItemCategory:     "CustomerReturnItemCategory",
	CustomerReturnItemText:         "CustomerReturnItemText",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	Material:                       "Material",
	MaterialByCustomer:             "MaterialByCustomer",
	RequestedQuantity:              "RequestedQuantity",
	RequestedQuantityUnit:          "RequestedQuantityUnit",
	ItemGrossWeight:                "ItemGrossWeight",
	ItemNetWeight:                  "ItemNetWeight",
	ItemWeightUnit:                 "ItemWeightUnit",
	ItemVolume:                     "ItemVolume",
	ItemVolumeUnit:                 "ItemVolumeUnit",
	TransactionCurrency:            "TransactionCurrency",
	NetAmount:                      "NetAmount",
	MaterialGroup:                  "MaterialGroup",
	Batch:                          "Batch",
	ProductionPlant:                "ProductionPlant",
	StorageLocation:                "StorageLocation",
	ShippingPoint:                  "ShippingPoint",
	ShippingType:                   "ShippingType",
	DeliveryPriority:               "DeliveryPriority",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	ProductTaxClassification1:      "ProductTaxClassification1",
	SalesDocumentRjcnReason:        "SalesDocumentRjcnReason",
	ItemBillingBlockReason:         "ItemBillingBlockReason",
	ProfitCenter:                   "ProfitCenter",
	RetsMgmtProcess:                "RetsMgmtProcess",
	RetsMgmtProcessItem:            "RetsMgmtProcessItem",
	ReturnReason:                   "ReturnReason",
	RetsMgmtProcessingBlock:        "RetsMgmtProcessingBlock",
	CustRetItmFollowUpActivity:     "CustRetItmFollowUpActivity",
	ReturnsMaterialHasBeenReceived: "ReturnsMaterialHasBeenReceived",
	ReturnsRefundType:              "ReturnsRefundType",
	ReturnsRefundProcgMode:         "ReturnsRefundProcgMode",
	ReturnsRefundExtent:            "ReturnsRefundExtent",
	PrelimRefundIsDetermined:       "PrelimRefundIsDetermined",
	ReturnsRefundRjcnReason:        "ReturnsRefundRjcnReason",
	ReplacementMaterial:            "ReplacementMaterial",
	ReplacementMaterialQuantity:    "ReplacementMaterialQuantity",
	ReplacementMaterialQtyUnit:     "ReplacementMaterialQtyUnit",
	ReplacementMaterialIsRequested: "ReplacementMaterialIsRequested",
	ReplacementMatlSupplyingPlant:  "ReplacementMatlSupplyingPlant",
	NextPlantForFollowUpActivity:   "NextPlantForFollowUpActivity",
	ReturnsTransshipmentPlant:      "ReturnsTransshipmentPlant",
	Supplier:                       "Supplier",
	SupplierRetMatlAuthzn:          "SupplierRetMatlAuthzn",
	SuplrRetMatlAuthznIsRequired:   "SuplrRetMatlAuthznIsRequired",
	CustomerRetMatlInspResultCode:  "CustomerRetMatlInspResultCode",
	NextFllwUpActivityForMatlInsp:  "NextFllwUpActivityForMatlInsp",
	RetMatlInspResultCode:          "RetMatlInspResultCode",
	ProductIsInspectedAtCustSite:   "ProductIsInspectedAtCustSite",
	CustRetMatlAuthzn:              "CustRetMatlAuthzn",
	CRMLogicalSystem:               "CRMLogicalSystem",
	CRMObjectUUID:                  "CRMObjectUUID",
	CRMObjectID:                    "CRMObjectID",
	CRMObjectType:                  "CRMObjectType",
	RetsMgmtItmLogProcgStatus:      "RetsMgmtItmLogProcgStatus",
	RetsMgmtItmCompnProcgStatus:    "RetsMgmtItmCompnProcgStatus",
	RetsMgmtItmProcgStatus:         "RetsMgmtItmProcgStatus",
	ReturnsDocumentStatus:          "ReturnsDocumentStatus",
	ReturnsDocumentApprovalStatus:  "ReturnsDocumentApprovalStatus",
	SDProcessStatus:                "SDProcessStatus",
	ReferenceSDDocument:            "ReferenceSDDocument",
	ReferenceSDDocumentItem:        "ReferenceSDDocumentItem",
	ReferenceSDDocumentCategory:    "ReferenceSDDocumentCategory",
	SDDocumentRejectionStatus:      "SDDocumentRejectionStatus",
}

var SapCustomerReturnItemDatumTableColumns = struct {
	CustomerReturn                 string
	CustomerReturnItem             string
	HigherLevelItem                string
	CustomerReturnItemCategory     string
	CustomerReturnItemText         string
	PurchaseOrderByCustomer        string
	Material                       string
	MaterialByCustomer             string
	RequestedQuantity              string
	RequestedQuantityUnit          string
	ItemGrossWeight                string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	ItemVolume                     string
	ItemVolumeUnit                 string
	TransactionCurrency            string
	NetAmount                      string
	MaterialGroup                  string
	Batch                          string
	ProductionPlant                string
	StorageLocation                string
	ShippingPoint                  string
	ShippingType                   string
	DeliveryPriority               string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	ProductTaxClassification1      string
	SalesDocumentRjcnReason        string
	ItemBillingBlockReason         string
	ProfitCenter                   string
	RetsMgmtProcess                string
	RetsMgmtProcessItem            string
	ReturnReason                   string
	RetsMgmtProcessingBlock        string
	CustRetItmFollowUpActivity     string
	ReturnsMaterialHasBeenReceived string
	ReturnsRefundType              string
	ReturnsRefundProcgMode         string
	ReturnsRefundExtent            string
	PrelimRefundIsDetermined       string
	ReturnsRefundRjcnReason        string
	ReplacementMaterial            string
	ReplacementMaterialQuantity    string
	ReplacementMaterialQtyUnit     string
	ReplacementMaterialIsRequested string
	ReplacementMatlSupplyingPlant  string
	NextPlantForFollowUpActivity   string
	ReturnsTransshipmentPlant      string
	Supplier                       string
	SupplierRetMatlAuthzn          string
	SuplrRetMatlAuthznIsRequired   string
	CustomerRetMatlInspResultCode  string
	NextFllwUpActivityForMatlInsp  string
	RetMatlInspResultCode          string
	ProductIsInspectedAtCustSite   string
	CustRetMatlAuthzn              string
	CRMLogicalSystem               string
	CRMObjectUUID                  string
	CRMObjectID                    string
	CRMObjectType                  string
	RetsMgmtItmLogProcgStatus      string
	RetsMgmtItmCompnProcgStatus    string
	RetsMgmtItmProcgStatus         string
	ReturnsDocumentStatus          string
	ReturnsDocumentApprovalStatus  string
	SDProcessStatus                string
	ReferenceSDDocument            string
	ReferenceSDDocumentItem        string
	ReferenceSDDocumentCategory    string
	SDDocumentRejectionStatus      string
}{
	CustomerReturn:                 "sap_customer_return_item_data.CustomerReturn",
	CustomerReturnItem:             "sap_customer_return_item_data.CustomerReturnItem",
	HigherLevelItem:                "sap_customer_return_item_data.HigherLevelItem",
	CustomerReturnItemCategory:     "sap_customer_return_item_data.CustomerReturnItemCategory",
	CustomerReturnItemText:         "sap_customer_return_item_data.CustomerReturnItemText",
	PurchaseOrderByCustomer:        "sap_customer_return_item_data.PurchaseOrderByCustomer",
	Material:                       "sap_customer_return_item_data.Material",
	MaterialByCustomer:             "sap_customer_return_item_data.MaterialByCustomer",
	RequestedQuantity:              "sap_customer_return_item_data.RequestedQuantity",
	RequestedQuantityUnit:          "sap_customer_return_item_data.RequestedQuantityUnit",
	ItemGrossWeight:                "sap_customer_return_item_data.ItemGrossWeight",
	ItemNetWeight:                  "sap_customer_return_item_data.ItemNetWeight",
	ItemWeightUnit:                 "sap_customer_return_item_data.ItemWeightUnit",
	ItemVolume:                     "sap_customer_return_item_data.ItemVolume",
	ItemVolumeUnit:                 "sap_customer_return_item_data.ItemVolumeUnit",
	TransactionCurrency:            "sap_customer_return_item_data.TransactionCurrency",
	NetAmount:                      "sap_customer_return_item_data.NetAmount",
	MaterialGroup:                  "sap_customer_return_item_data.MaterialGroup",
	Batch:                          "sap_customer_return_item_data.Batch",
	ProductionPlant:                "sap_customer_return_item_data.ProductionPlant",
	StorageLocation:                "sap_customer_return_item_data.StorageLocation",
	ShippingPoint:                  "sap_customer_return_item_data.ShippingPoint",
	ShippingType:                   "sap_customer_return_item_data.ShippingType",
	DeliveryPriority:               "sap_customer_return_item_data.DeliveryPriority",
	IncotermsClassification:        "sap_customer_return_item_data.IncotermsClassification",
	CustomerPaymentTerms:           "sap_customer_return_item_data.CustomerPaymentTerms",
	ProductTaxClassification1:      "sap_customer_return_item_data.ProductTaxClassification1",
	SalesDocumentRjcnReason:        "sap_customer_return_item_data.SalesDocumentRjcnReason",
	ItemBillingBlockReason:         "sap_customer_return_item_data.ItemBillingBlockReason",
	ProfitCenter:                   "sap_customer_return_item_data.ProfitCenter",
	RetsMgmtProcess:                "sap_customer_return_item_data.RetsMgmtProcess",
	RetsMgmtProcessItem:            "sap_customer_return_item_data.RetsMgmtProcessItem",
	ReturnReason:                   "sap_customer_return_item_data.ReturnReason",
	RetsMgmtProcessingBlock:        "sap_customer_return_item_data.RetsMgmtProcessingBlock",
	CustRetItmFollowUpActivity:     "sap_customer_return_item_data.CustRetItmFollowUpActivity",
	ReturnsMaterialHasBeenReceived: "sap_customer_return_item_data.ReturnsMaterialHasBeenReceived",
	ReturnsRefundType:              "sap_customer_return_item_data.ReturnsRefundType",
	ReturnsRefundProcgMode:         "sap_customer_return_item_data.ReturnsRefundProcgMode",
	ReturnsRefundExtent:            "sap_customer_return_item_data.ReturnsRefundExtent",
	PrelimRefundIsDetermined:       "sap_customer_return_item_data.PrelimRefundIsDetermined",
	ReturnsRefundRjcnReason:        "sap_customer_return_item_data.ReturnsRefundRjcnReason",
	ReplacementMaterial:            "sap_customer_return_item_data.ReplacementMaterial",
	ReplacementMaterialQuantity:    "sap_customer_return_item_data.ReplacementMaterialQuantity",
	ReplacementMaterialQtyUnit:     "sap_customer_return_item_data.ReplacementMaterialQtyUnit",
	ReplacementMaterialIsRequested: "sap_customer_return_item_data.ReplacementMaterialIsRequested",
	ReplacementMatlSupplyingPlant:  "sap_customer_return_item_data.ReplacementMatlSupplyingPlant",
	NextPlantForFollowUpActivity:   "sap_customer_return_item_data.NextPlantForFollowUpActivity",
	ReturnsTransshipmentPlant:      "sap_customer_return_item_data.ReturnsTransshipmentPlant",
	Supplier:                       "sap_customer_return_item_data.Supplier",
	SupplierRetMatlAuthzn:          "sap_customer_return_item_data.SupplierRetMatlAuthzn",
	SuplrRetMatlAuthznIsRequired:   "sap_customer_return_item_data.SuplrRetMatlAuthznIsRequired",
	CustomerRetMatlInspResultCode:  "sap_customer_return_item_data.CustomerRetMatlInspResultCode",
	NextFllwUpActivityForMatlInsp:  "sap_customer_return_item_data.NextFllwUpActivityForMatlInsp",
	RetMatlInspResultCode:          "sap_customer_return_item_data.RetMatlInspResultCode",
	ProductIsInspectedAtCustSite:   "sap_customer_return_item_data.ProductIsInspectedAtCustSite",
	CustRetMatlAuthzn:              "sap_customer_return_item_data.CustRetMatlAuthzn",
	CRMLogicalSystem:               "sap_customer_return_item_data.CRMLogicalSystem",
	CRMObjectUUID:                  "sap_customer_return_item_data.CRMObjectUUID",
	CRMObjectID:                    "sap_customer_return_item_data.CRMObjectID",
	CRMObjectType:                  "sap_customer_return_item_data.CRMObjectType",
	RetsMgmtItmLogProcgStatus:      "sap_customer_return_item_data.RetsMgmtItmLogProcgStatus",
	RetsMgmtItmCompnProcgStatus:    "sap_customer_return_item_data.RetsMgmtItmCompnProcgStatus",
	RetsMgmtItmProcgStatus:         "sap_customer_return_item_data.RetsMgmtItmProcgStatus",
	ReturnsDocumentStatus:          "sap_customer_return_item_data.ReturnsDocumentStatus",
	ReturnsDocumentApprovalStatus:  "sap_customer_return_item_data.ReturnsDocumentApprovalStatus",
	SDProcessStatus:                "sap_customer_return_item_data.SDProcessStatus",
	ReferenceSDDocument:            "sap_customer_return_item_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:        "sap_customer_return_item_data.ReferenceSDDocumentItem",
	ReferenceSDDocumentCategory:    "sap_customer_return_item_data.ReferenceSDDocumentCategory",
	SDDocumentRejectionStatus:      "sap_customer_return_item_data.SDDocumentRejectionStatus",
}

// Generated where

var SapCustomerReturnItemDatumWhere = struct {
	CustomerReturn                 whereHelperstring
	CustomerReturnItem             whereHelperstring
	HigherLevelItem                whereHelpernull_String
	CustomerReturnItemCategory     whereHelpernull_String
	CustomerReturnItemText         whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	Material                       whereHelpernull_String
	MaterialByCustomer             whereHelpernull_String
	RequestedQuantity              whereHelpernull_String
	RequestedQuantityUnit          whereHelpernull_String
	ItemGrossWeight                whereHelpernull_String
	ItemNetWeight                  whereHelpernull_String
	ItemWeightUnit                 whereHelpernull_String
	ItemVolume                     whereHelpernull_String
	ItemVolumeUnit                 whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	NetAmount                      whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	Batch                          whereHelpernull_String
	ProductionPlant                whereHelpernull_String
	StorageLocation                whereHelpernull_String
	ShippingPoint                  whereHelpernull_String
	ShippingType                   whereHelpernull_String
	DeliveryPriority               whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	ProductTaxClassification1      whereHelpernull_String
	SalesDocumentRjcnReason        whereHelpernull_String
	ItemBillingBlockReason         whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	RetsMgmtProcess                whereHelpernull_String
	RetsMgmtProcessItem            whereHelpernull_String
	ReturnReason                   whereHelpernull_String
	RetsMgmtProcessingBlock        whereHelpernull_String
	CustRetItmFollowUpActivity     whereHelpernull_String
	ReturnsMaterialHasBeenReceived whereHelpernull_String
	ReturnsRefundType              whereHelpernull_String
	ReturnsRefundProcgMode         whereHelpernull_String
	ReturnsRefundExtent            whereHelpernull_String
	PrelimRefundIsDetermined       whereHelpernull_String
	ReturnsRefundRjcnReason        whereHelpernull_String
	ReplacementMaterial            whereHelpernull_String
	ReplacementMaterialQuantity    whereHelpernull_String
	ReplacementMaterialQtyUnit     whereHelpernull_String
	ReplacementMaterialIsRequested whereHelpernull_String
	ReplacementMatlSupplyingPlant  whereHelpernull_String
	NextPlantForFollowUpActivity   whereHelpernull_String
	ReturnsTransshipmentPlant      whereHelpernull_String
	Supplier                       whereHelpernull_String
	SupplierRetMatlAuthzn          whereHelpernull_String
	SuplrRetMatlAuthznIsRequired   whereHelpernull_String
	CustomerRetMatlInspResultCode  whereHelpernull_String
	NextFllwUpActivityForMatlInsp  whereHelpernull_String
	RetMatlInspResultCode          whereHelpernull_String
	ProductIsInspectedAtCustSite   whereHelpernull_String
	CustRetMatlAuthzn              whereHelpernull_String
	CRMLogicalSystem               whereHelpernull_String
	CRMObjectUUID                  whereHelpernull_String
	CRMObjectID                    whereHelpernull_String
	CRMObjectType                  whereHelpernull_String
	RetsMgmtItmLogProcgStatus      whereHelpernull_String
	RetsMgmtItmCompnProcgStatus    whereHelpernull_String
	RetsMgmtItmProcgStatus         whereHelpernull_String
	ReturnsDocumentStatus          whereHelpernull_String
	ReturnsDocumentApprovalStatus  whereHelpernull_String
	SDProcessStatus                whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	ReferenceSDDocumentItem        whereHelpernull_String
	ReferenceSDDocumentCategory    whereHelpernull_String
	SDDocumentRejectionStatus      whereHelpernull_String
}{
	CustomerReturn:                 whereHelperstring{field: "`sap_customer_return_item_data`.`CustomerReturn`"},
	CustomerReturnItem:             whereHelperstring{field: "`sap_customer_return_item_data`.`CustomerReturnItem`"},
	HigherLevelItem:                whereHelpernull_String{field: "`sap_customer_return_item_data`.`HigherLevelItem`"},
	CustomerReturnItemCategory:     whereHelpernull_String{field: "`sap_customer_return_item_data`.`CustomerReturnItemCategory`"},
	CustomerReturnItemText:         whereHelpernull_String{field: "`sap_customer_return_item_data`.`CustomerReturnItemText`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_customer_return_item_data`.`PurchaseOrderByCustomer`"},
	Material:                       whereHelpernull_String{field: "`sap_customer_return_item_data`.`Material`"},
	MaterialByCustomer:             whereHelpernull_String{field: "`sap_customer_return_item_data`.`MaterialByCustomer`"},
	RequestedQuantity:              whereHelpernull_String{field: "`sap_customer_return_item_data`.`RequestedQuantity`"},
	RequestedQuantityUnit:          whereHelpernull_String{field: "`sap_customer_return_item_data`.`RequestedQuantityUnit`"},
	ItemGrossWeight:                whereHelpernull_String{field: "`sap_customer_return_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                  whereHelpernull_String{field: "`sap_customer_return_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                 whereHelpernull_String{field: "`sap_customer_return_item_data`.`ItemWeightUnit`"},
	ItemVolume:                     whereHelpernull_String{field: "`sap_customer_return_item_data`.`ItemVolume`"},
	ItemVolumeUnit:                 whereHelpernull_String{field: "`sap_customer_return_item_data`.`ItemVolumeUnit`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_customer_return_item_data`.`TransactionCurrency`"},
	NetAmount:                      whereHelpernull_String{field: "`sap_customer_return_item_data`.`NetAmount`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_customer_return_item_data`.`MaterialGroup`"},
	Batch:                          whereHelpernull_String{field: "`sap_customer_return_item_data`.`Batch`"},
	ProductionPlant:                whereHelpernull_String{field: "`sap_customer_return_item_data`.`ProductionPlant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_customer_return_item_data`.`StorageLocation`"},
	ShippingPoint:                  whereHelpernull_String{field: "`sap_customer_return_item_data`.`ShippingPoint`"},
	ShippingType:                   whereHelpernull_String{field: "`sap_customer_return_item_data`.`ShippingType`"},
	DeliveryPriority:               whereHelpernull_String{field: "`sap_customer_return_item_data`.`DeliveryPriority`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_customer_return_item_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_customer_return_item_data`.`CustomerPaymentTerms`"},
	ProductTaxClassification1:      whereHelpernull_String{field: "`sap_customer_return_item_data`.`ProductTaxClassification1`"},
	SalesDocumentRjcnReason:        whereHelpernull_String{field: "`sap_customer_return_item_data`.`SalesDocumentRjcnReason`"},
	ItemBillingBlockReason:         whereHelpernull_String{field: "`sap_customer_return_item_data`.`ItemBillingBlockReason`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_customer_return_item_data`.`ProfitCenter`"},
	RetsMgmtProcess:                whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetsMgmtProcess`"},
	RetsMgmtProcessItem:            whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetsMgmtProcessItem`"},
	ReturnReason:                   whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnReason`"},
	RetsMgmtProcessingBlock:        whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetsMgmtProcessingBlock`"},
	CustRetItmFollowUpActivity:     whereHelpernull_String{field: "`sap_customer_return_item_data`.`CustRetItmFollowUpActivity`"},
	ReturnsMaterialHasBeenReceived: whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsMaterialHasBeenReceived`"},
	ReturnsRefundType:              whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsRefundType`"},
	ReturnsRefundProcgMode:         whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsRefundProcgMode`"},
	ReturnsRefundExtent:            whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsRefundExtent`"},
	PrelimRefundIsDetermined:       whereHelpernull_String{field: "`sap_customer_return_item_data`.`PrelimRefundIsDetermined`"},
	ReturnsRefundRjcnReason:        whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsRefundRjcnReason`"},
	ReplacementMaterial:            whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReplacementMaterial`"},
	ReplacementMaterialQuantity:    whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReplacementMaterialQuantity`"},
	ReplacementMaterialQtyUnit:     whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReplacementMaterialQtyUnit`"},
	ReplacementMaterialIsRequested: whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReplacementMaterialIsRequested`"},
	ReplacementMatlSupplyingPlant:  whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReplacementMatlSupplyingPlant`"},
	NextPlantForFollowUpActivity:   whereHelpernull_String{field: "`sap_customer_return_item_data`.`NextPlantForFollowUpActivity`"},
	ReturnsTransshipmentPlant:      whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsTransshipmentPlant`"},
	Supplier:                       whereHelpernull_String{field: "`sap_customer_return_item_data`.`Supplier`"},
	SupplierRetMatlAuthzn:          whereHelpernull_String{field: "`sap_customer_return_item_data`.`SupplierRetMatlAuthzn`"},
	SuplrRetMatlAuthznIsRequired:   whereHelpernull_String{field: "`sap_customer_return_item_data`.`SuplrRetMatlAuthznIsRequired`"},
	CustomerRetMatlInspResultCode:  whereHelpernull_String{field: "`sap_customer_return_item_data`.`CustomerRetMatlInspResultCode`"},
	NextFllwUpActivityForMatlInsp:  whereHelpernull_String{field: "`sap_customer_return_item_data`.`NextFllwUpActivityForMatlInsp`"},
	RetMatlInspResultCode:          whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetMatlInspResultCode`"},
	ProductIsInspectedAtCustSite:   whereHelpernull_String{field: "`sap_customer_return_item_data`.`ProductIsInspectedAtCustSite`"},
	CustRetMatlAuthzn:              whereHelpernull_String{field: "`sap_customer_return_item_data`.`CustRetMatlAuthzn`"},
	CRMLogicalSystem:               whereHelpernull_String{field: "`sap_customer_return_item_data`.`CRMLogicalSystem`"},
	CRMObjectUUID:                  whereHelpernull_String{field: "`sap_customer_return_item_data`.`CRMObjectUUID`"},
	CRMObjectID:                    whereHelpernull_String{field: "`sap_customer_return_item_data`.`CRMObjectID`"},
	CRMObjectType:                  whereHelpernull_String{field: "`sap_customer_return_item_data`.`CRMObjectType`"},
	RetsMgmtItmLogProcgStatus:      whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetsMgmtItmLogProcgStatus`"},
	RetsMgmtItmCompnProcgStatus:    whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetsMgmtItmCompnProcgStatus`"},
	RetsMgmtItmProcgStatus:         whereHelpernull_String{field: "`sap_customer_return_item_data`.`RetsMgmtItmProcgStatus`"},
	ReturnsDocumentStatus:          whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsDocumentStatus`"},
	ReturnsDocumentApprovalStatus:  whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReturnsDocumentApprovalStatus`"},
	SDProcessStatus:                whereHelpernull_String{field: "`sap_customer_return_item_data`.`SDProcessStatus`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:        whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReferenceSDDocumentItem`"},
	ReferenceSDDocumentCategory:    whereHelpernull_String{field: "`sap_customer_return_item_data`.`ReferenceSDDocumentCategory`"},
	SDDocumentRejectionStatus:      whereHelpernull_String{field: "`sap_customer_return_item_data`.`SDDocumentRejectionStatus`"},
}

// SapCustomerReturnItemDatumRels is where relationship names are stored.
var SapCustomerReturnItemDatumRels = struct {
	CustomerReturnSapCustomerReturnHeaderDatum string
}{
	CustomerReturnSapCustomerReturnHeaderDatum: "CustomerReturnSapCustomerReturnHeaderDatum",
}

// sapCustomerReturnItemDatumR is where relationships are stored.
type sapCustomerReturnItemDatumR struct {
	CustomerReturnSapCustomerReturnHeaderDatum *SapCustomerReturnHeaderDatum `boil:"CustomerReturnSapCustomerReturnHeaderDatum" json:"CustomerReturnSapCustomerReturnHeaderDatum" toml:"CustomerReturnSapCustomerReturnHeaderDatum" yaml:"CustomerReturnSapCustomerReturnHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCustomerReturnItemDatumR) NewStruct() *sapCustomerReturnItemDatumR {
	return &sapCustomerReturnItemDatumR{}
}

// sapCustomerReturnItemDatumL is where Load methods for each relationship are stored.
type sapCustomerReturnItemDatumL struct{}

var (
	sapCustomerReturnItemDatumAllColumns            = []string{"CustomerReturn", "CustomerReturnItem", "HigherLevelItem", "CustomerReturnItemCategory", "CustomerReturnItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "Batch", "ProductionPlant", "StorageLocation", "ShippingPoint", "ShippingType", "DeliveryPriority", "IncotermsClassification", "CustomerPaymentTerms", "ProductTaxClassification1", "SalesDocumentRjcnReason", "ItemBillingBlockReason", "ProfitCenter", "RetsMgmtProcess", "RetsMgmtProcessItem", "ReturnReason", "RetsMgmtProcessingBlock", "CustRetItmFollowUpActivity", "ReturnsMaterialHasBeenReceived", "ReturnsRefundType", "ReturnsRefundProcgMode", "ReturnsRefundExtent", "PrelimRefundIsDetermined", "ReturnsRefundRjcnReason", "ReplacementMaterial", "ReplacementMaterialQuantity", "ReplacementMaterialQtyUnit", "ReplacementMaterialIsRequested", "ReplacementMatlSupplyingPlant", "NextPlantForFollowUpActivity", "ReturnsTransshipmentPlant", "Supplier", "SupplierRetMatlAuthzn", "SuplrRetMatlAuthznIsRequired", "CustomerRetMatlInspResultCode", "NextFllwUpActivityForMatlInsp", "RetMatlInspResultCode", "ProductIsInspectedAtCustSite", "CustRetMatlAuthzn", "CRMLogicalSystem", "CRMObjectUUID", "CRMObjectID", "CRMObjectType", "RetsMgmtItmLogProcgStatus", "RetsMgmtItmCompnProcgStatus", "RetsMgmtItmProcgStatus", "ReturnsDocumentStatus", "ReturnsDocumentApprovalStatus", "SDProcessStatus", "ReferenceSDDocument", "ReferenceSDDocumentItem", "ReferenceSDDocumentCategory", "SDDocumentRejectionStatus"}
	sapCustomerReturnItemDatumColumnsWithoutDefault = []string{"CustomerReturn", "CustomerReturnItem", "HigherLevelItem", "CustomerReturnItemCategory", "CustomerReturnItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "Batch", "ProductionPlant", "StorageLocation", "ShippingPoint", "ShippingType", "DeliveryPriority", "IncotermsClassification", "CustomerPaymentTerms", "ProductTaxClassification1", "SalesDocumentRjcnReason", "ItemBillingBlockReason", "ProfitCenter", "RetsMgmtProcess", "RetsMgmtProcessItem", "ReturnReason", "RetsMgmtProcessingBlock", "CustRetItmFollowUpActivity", "ReturnsMaterialHasBeenReceived", "ReturnsRefundType", "ReturnsRefundProcgMode", "ReturnsRefundExtent", "PrelimRefundIsDetermined", "ReturnsRefundRjcnReason", "ReplacementMaterial", "ReplacementMaterialQuantity", "ReplacementMaterialQtyUnit", "ReplacementMaterialIsRequested", "ReplacementMatlSupplyingPlant", "NextPlantForFollowUpActivity", "ReturnsTransshipmentPlant", "Supplier", "SupplierRetMatlAuthzn", "SuplrRetMatlAuthznIsRequired", "CustomerRetMatlInspResultCode", "NextFllwUpActivityForMatlInsp", "RetMatlInspResultCode", "ProductIsInspectedAtCustSite", "CustRetMatlAuthzn", "CRMLogicalSystem", "CRMObjectUUID", "CRMObjectID", "CRMObjectType", "RetsMgmtItmLogProcgStatus", "RetsMgmtItmCompnProcgStatus", "RetsMgmtItmProcgStatus", "ReturnsDocumentStatus", "ReturnsDocumentApprovalStatus", "SDProcessStatus", "ReferenceSDDocument", "ReferenceSDDocumentItem", "ReferenceSDDocumentCategory", "SDDocumentRejectionStatus"}
	sapCustomerReturnItemDatumColumnsWithDefault    = []string{}
	sapCustomerReturnItemDatumPrimaryKeyColumns     = []string{"CustomerReturn", "CustomerReturnItem"}
	sapCustomerReturnItemDatumGeneratedColumns      = []string{}
)

type (
	// SapCustomerReturnItemDatumSlice is an alias for a slice of pointers to SapCustomerReturnItemDatum.
	// This should almost always be used instead of []SapCustomerReturnItemDatum.
	SapCustomerReturnItemDatumSlice []*SapCustomerReturnItemDatum
	// SapCustomerReturnItemDatumHook is the signature for custom SapCustomerReturnItemDatum hook methods
	SapCustomerReturnItemDatumHook func(context.Context, boil.ContextExecutor, *SapCustomerReturnItemDatum) error

	sapCustomerReturnItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCustomerReturnItemDatumType                 = reflect.TypeOf(&SapCustomerReturnItemDatum{})
	sapCustomerReturnItemDatumMapping              = queries.MakeStructMapping(sapCustomerReturnItemDatumType)
	sapCustomerReturnItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, sapCustomerReturnItemDatumPrimaryKeyColumns)
	sapCustomerReturnItemDatumInsertCacheMut       sync.RWMutex
	sapCustomerReturnItemDatumInsertCache          = make(map[string]insertCache)
	sapCustomerReturnItemDatumUpdateCacheMut       sync.RWMutex
	sapCustomerReturnItemDatumUpdateCache          = make(map[string]updateCache)
	sapCustomerReturnItemDatumUpsertCacheMut       sync.RWMutex
	sapCustomerReturnItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCustomerReturnItemDatumAfterSelectHooks []SapCustomerReturnItemDatumHook

var sapCustomerReturnItemDatumBeforeInsertHooks []SapCustomerReturnItemDatumHook
var sapCustomerReturnItemDatumAfterInsertHooks []SapCustomerReturnItemDatumHook

var sapCustomerReturnItemDatumBeforeUpdateHooks []SapCustomerReturnItemDatumHook
var sapCustomerReturnItemDatumAfterUpdateHooks []SapCustomerReturnItemDatumHook

var sapCustomerReturnItemDatumBeforeDeleteHooks []SapCustomerReturnItemDatumHook
var sapCustomerReturnItemDatumAfterDeleteHooks []SapCustomerReturnItemDatumHook

var sapCustomerReturnItemDatumBeforeUpsertHooks []SapCustomerReturnItemDatumHook
var sapCustomerReturnItemDatumAfterUpsertHooks []SapCustomerReturnItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCustomerReturnItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCustomerReturnItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCustomerReturnItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCustomerReturnItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCustomerReturnItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCustomerReturnItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCustomerReturnItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCustomerReturnItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCustomerReturnItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCustomerReturnItemDatumHook registers your hook function for all future operations.
func AddSapCustomerReturnItemDatumHook(hookPoint boil.HookPoint, sapCustomerReturnItemDatumHook SapCustomerReturnItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCustomerReturnItemDatumAfterSelectHooks = append(sapCustomerReturnItemDatumAfterSelectHooks, sapCustomerReturnItemDatumHook)
	case boil.BeforeInsertHook:
		sapCustomerReturnItemDatumBeforeInsertHooks = append(sapCustomerReturnItemDatumBeforeInsertHooks, sapCustomerReturnItemDatumHook)
	case boil.AfterInsertHook:
		sapCustomerReturnItemDatumAfterInsertHooks = append(sapCustomerReturnItemDatumAfterInsertHooks, sapCustomerReturnItemDatumHook)
	case boil.BeforeUpdateHook:
		sapCustomerReturnItemDatumBeforeUpdateHooks = append(sapCustomerReturnItemDatumBeforeUpdateHooks, sapCustomerReturnItemDatumHook)
	case boil.AfterUpdateHook:
		sapCustomerReturnItemDatumAfterUpdateHooks = append(sapCustomerReturnItemDatumAfterUpdateHooks, sapCustomerReturnItemDatumHook)
	case boil.BeforeDeleteHook:
		sapCustomerReturnItemDatumBeforeDeleteHooks = append(sapCustomerReturnItemDatumBeforeDeleteHooks, sapCustomerReturnItemDatumHook)
	case boil.AfterDeleteHook:
		sapCustomerReturnItemDatumAfterDeleteHooks = append(sapCustomerReturnItemDatumAfterDeleteHooks, sapCustomerReturnItemDatumHook)
	case boil.BeforeUpsertHook:
		sapCustomerReturnItemDatumBeforeUpsertHooks = append(sapCustomerReturnItemDatumBeforeUpsertHooks, sapCustomerReturnItemDatumHook)
	case boil.AfterUpsertHook:
		sapCustomerReturnItemDatumAfterUpsertHooks = append(sapCustomerReturnItemDatumAfterUpsertHooks, sapCustomerReturnItemDatumHook)
	}
}

// One returns a single sapCustomerReturnItemDatum record from the query.
func (q sapCustomerReturnItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCustomerReturnItemDatum, error) {
	o := &SapCustomerReturnItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_customer_return_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCustomerReturnItemDatum records from the query.
func (q sapCustomerReturnItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCustomerReturnItemDatumSlice, error) {
	var o []*SapCustomerReturnItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCustomerReturnItemDatum slice")
	}

	if len(sapCustomerReturnItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCustomerReturnItemDatum records in the query.
func (q sapCustomerReturnItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_customer_return_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCustomerReturnItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_customer_return_item_data exists")
	}

	return count > 0, nil
}

// CustomerReturnSapCustomerReturnHeaderDatum pointed to by the foreign key.
func (o *SapCustomerReturnItemDatum) CustomerReturnSapCustomerReturnHeaderDatum(mods ...qm.QueryMod) sapCustomerReturnHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CustomerReturn` = ?", o.CustomerReturn),
	}

	queryMods = append(queryMods, mods...)

	query := SapCustomerReturnHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_customer_return_header_data`")

	return query
}

// LoadCustomerReturnSapCustomerReturnHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCustomerReturnItemDatumL) LoadCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnItemDatum
	var object *SapCustomerReturnItemDatum

	if singular {
		object = maybeSapCustomerReturnItemDatum.(*SapCustomerReturnItemDatum)
	} else {
		slice = *maybeSapCustomerReturnItemDatum.(*[]*SapCustomerReturnItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnItemDatumR{}
		}
		args = append(args, object.CustomerReturn)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnItemDatumR{}
			}

			for _, a := range args {
				if a == obj.CustomerReturn {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_header_data`),
		qm.WhereIn(`sap_customer_return_header_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCustomerReturnHeaderDatum")
	}

	var resultSlice []*SapCustomerReturnHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCustomerReturnHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_customer_return_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_header_data")
	}

	if len(sapCustomerReturnItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomerReturnSapCustomerReturnHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCustomerReturnHeaderDatumR{}
		}
		foreign.R.CustomerReturnSapCustomerReturnItemData = append(foreign.R.CustomerReturnSapCustomerReturnItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerReturn == foreign.CustomerReturn {
				local.R.CustomerReturnSapCustomerReturnHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnHeaderDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnItemData = append(foreign.R.CustomerReturnSapCustomerReturnItemData, local)
				break
			}
		}
	}

	return nil
}

// SetCustomerReturnSapCustomerReturnHeaderDatum of the sapCustomerReturnItemDatum to the related item.
// Sets o.R.CustomerReturnSapCustomerReturnHeaderDatum to related.
// Adds o to related.R.CustomerReturnSapCustomerReturnItemData.
func (o *SapCustomerReturnItemDatum) SetCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCustomerReturnHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_customer_return_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
		strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CustomerReturn, o.CustomerReturn, o.CustomerReturnItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerReturn = related.CustomerReturn
	if o.R == nil {
		o.R = &sapCustomerReturnItemDatumR{
			CustomerReturnSapCustomerReturnHeaderDatum: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemData: SapCustomerReturnItemDatumSlice{o},
		}
	} else {
		related.R.CustomerReturnSapCustomerReturnItemData = append(related.R.CustomerReturnSapCustomerReturnItemData, o)
	}

	return nil
}

// SapCustomerReturnItemData retrieves all the records using an executor.
func SapCustomerReturnItemData(mods ...qm.QueryMod) sapCustomerReturnItemDatumQuery {
	mods = append(mods, qm.From("`sap_customer_return_item_data`"))
	return sapCustomerReturnItemDatumQuery{NewQuery(mods...)}
}

// FindSapCustomerReturnItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCustomerReturnItemDatum(ctx context.Context, exec boil.ContextExecutor, customerReturn string, customerReturnItem string, selectCols ...string) (*SapCustomerReturnItemDatum, error) {
	sapCustomerReturnItemDatumObj := &SapCustomerReturnItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_customer_return_item_data` where `CustomerReturn`=? AND `CustomerReturnItem`=?", sel,
	)

	q := queries.Raw(query, customerReturn, customerReturnItem)

	err := q.Bind(ctx, exec, sapCustomerReturnItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_customer_return_item_data")
	}

	if err = sapCustomerReturnItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCustomerReturnItemDatumObj, err
	}

	return sapCustomerReturnItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCustomerReturnItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCustomerReturnItemDatumInsertCacheMut.RLock()
	cache, cached := sapCustomerReturnItemDatumInsertCache[key]
	sapCustomerReturnItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCustomerReturnItemDatumAllColumns,
			sapCustomerReturnItemDatumColumnsWithDefault,
			sapCustomerReturnItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_customer_return_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_customer_return_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_customer_return_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_customer_return_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerReturn,
		o.CustomerReturnItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_item_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnItemDatumInsertCacheMut.Lock()
		sapCustomerReturnItemDatumInsertCache[key] = cache
		sapCustomerReturnItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCustomerReturnItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCustomerReturnItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCustomerReturnItemDatumUpdateCacheMut.RLock()
	cache, cached := sapCustomerReturnItemDatumUpdateCache[key]
	sapCustomerReturnItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCustomerReturnItemDatumAllColumns,
			sapCustomerReturnItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_customer_return_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_customer_return_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, append(wl, sapCustomerReturnItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_customer_return_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_customer_return_item_data")
	}

	if !cached {
		sapCustomerReturnItemDatumUpdateCacheMut.Lock()
		sapCustomerReturnItemDatumUpdateCache[key] = cache
		sapCustomerReturnItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCustomerReturnItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_customer_return_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_customer_return_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCustomerReturnItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_customer_return_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCustomerReturnItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCustomerReturnItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapCustomerReturnItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCustomerReturnItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCustomerReturnItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCustomerReturnItemDatumUpsertCacheMut.RLock()
	cache, cached := sapCustomerReturnItemDatumUpsertCache[key]
	sapCustomerReturnItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCustomerReturnItemDatumAllColumns,
			sapCustomerReturnItemDatumColumnsWithDefault,
			sapCustomerReturnItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCustomerReturnItemDatumAllColumns,
			sapCustomerReturnItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_customer_return_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_customer_return_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_customer_return_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_customer_return_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCustomerReturnItemDatumType, sapCustomerReturnItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_customer_return_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_item_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnItemDatumUpsertCacheMut.Lock()
		sapCustomerReturnItemDatumUpsertCache[key] = cache
		sapCustomerReturnItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCustomerReturnItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCustomerReturnItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCustomerReturnItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCustomerReturnItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_customer_return_item_data` WHERE `CustomerReturn`=? AND `CustomerReturnItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_customer_return_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_customer_return_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCustomerReturnItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCustomerReturnItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_customer_return_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCustomerReturnItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCustomerReturnItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_customer_return_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCustomerReturnItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_item_data")
	}

	if len(sapCustomerReturnItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCustomerReturnItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCustomerReturnItemDatum(ctx, exec, o.CustomerReturn, o.CustomerReturnItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCustomerReturnItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCustomerReturnItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_customer_return_item_data`.* FROM `sap_customer_return_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCustomerReturnItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapCustomerReturnItemDatumExists checks if the SapCustomerReturnItemDatum row exists.
func SapCustomerReturnItemDatumExists(ctx context.Context, exec boil.ContextExecutor, customerReturn string, customerReturnItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_customer_return_item_data` where `CustomerReturn`=? AND `CustomerReturnItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customerReturn, customerReturnItem)
	}
	row := exec.QueryRowContext(ctx, sql, customerReturn, customerReturnItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_customer_return_item_data exists")
	}

	return exists, nil
}
