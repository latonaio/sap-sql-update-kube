// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapClassificationClassDescriptionDatum is an object representing the database table.
type SapClassificationClassDescriptionDatum struct {
	ClassInternalID          string      `boil:"ClassInternalID" json:"ClassInternalID" toml:"ClassInternalID" yaml:"ClassInternalID"`
	Language                 string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	UpdateMC                 null.Bool   `boil:"Update_mc" json:"Update_mc,omitempty" toml:"Update_mc" yaml:"Update_mc,omitempty"`
	ClassDescription         null.String `boil:"ClassDescription" json:"ClassDescription,omitempty" toml:"ClassDescription" yaml:"ClassDescription,omitempty"`
	KeyDate                  null.String `boil:"KeyDate" json:"KeyDate,omitempty" toml:"KeyDate" yaml:"KeyDate,omitempty"`
	ClassLastChangedDateTime null.String `boil:"ClassLastChangedDateTime" json:"ClassLastChangedDateTime,omitempty" toml:"ClassLastChangedDateTime" yaml:"ClassLastChangedDateTime,omitempty"`

	R *sapClassificationClassDescriptionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapClassificationClassDescriptionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapClassificationClassDescriptionDatumColumns = struct {
	ClassInternalID          string
	Language                 string
	UpdateMC                 string
	ClassDescription         string
	KeyDate                  string
	ClassLastChangedDateTime string
}{
	ClassInternalID:          "ClassInternalID",
	Language:                 "Language",
	UpdateMC:                 "Update_mc",
	ClassDescription:         "ClassDescription",
	KeyDate:                  "KeyDate",
	ClassLastChangedDateTime: "ClassLastChangedDateTime",
}

var SapClassificationClassDescriptionDatumTableColumns = struct {
	ClassInternalID          string
	Language                 string
	UpdateMC                 string
	ClassDescription         string
	KeyDate                  string
	ClassLastChangedDateTime string
}{
	ClassInternalID:          "sap_classification_class_description_data.ClassInternalID",
	Language:                 "sap_classification_class_description_data.Language",
	UpdateMC:                 "sap_classification_class_description_data.Update_mc",
	ClassDescription:         "sap_classification_class_description_data.ClassDescription",
	KeyDate:                  "sap_classification_class_description_data.KeyDate",
	ClassLastChangedDateTime: "sap_classification_class_description_data.ClassLastChangedDateTime",
}

// Generated where

var SapClassificationClassDescriptionDatumWhere = struct {
	ClassInternalID          whereHelperstring
	Language                 whereHelperstring
	UpdateMC                 whereHelpernull_Bool
	ClassDescription         whereHelpernull_String
	KeyDate                  whereHelpernull_String
	ClassLastChangedDateTime whereHelpernull_String
}{
	ClassInternalID:          whereHelperstring{field: "`sap_classification_class_description_data`.`ClassInternalID`"},
	Language:                 whereHelperstring{field: "`sap_classification_class_description_data`.`Language`"},
	UpdateMC:                 whereHelpernull_Bool{field: "`sap_classification_class_description_data`.`Update_mc`"},
	ClassDescription:         whereHelpernull_String{field: "`sap_classification_class_description_data`.`ClassDescription`"},
	KeyDate:                  whereHelpernull_String{field: "`sap_classification_class_description_data`.`KeyDate`"},
	ClassLastChangedDateTime: whereHelpernull_String{field: "`sap_classification_class_description_data`.`ClassLastChangedDateTime`"},
}

// SapClassificationClassDescriptionDatumRels is where relationship names are stored.
var SapClassificationClassDescriptionDatumRels = struct {
	ClassInternalIDSapClassificationClassDatum string
}{
	ClassInternalIDSapClassificationClassDatum: "ClassInternalIDSapClassificationClassDatum",
}

// sapClassificationClassDescriptionDatumR is where relationships are stored.
type sapClassificationClassDescriptionDatumR struct {
	ClassInternalIDSapClassificationClassDatum *SapClassificationClassDatum `boil:"ClassInternalIDSapClassificationClassDatum" json:"ClassInternalIDSapClassificationClassDatum" toml:"ClassInternalIDSapClassificationClassDatum" yaml:"ClassInternalIDSapClassificationClassDatum"`
}

// NewStruct creates a new relationship struct
func (*sapClassificationClassDescriptionDatumR) NewStruct() *sapClassificationClassDescriptionDatumR {
	return &sapClassificationClassDescriptionDatumR{}
}

// sapClassificationClassDescriptionDatumL is where Load methods for each relationship are stored.
type sapClassificationClassDescriptionDatumL struct{}

var (
	sapClassificationClassDescriptionDatumAllColumns            = []string{"ClassInternalID", "Language", "Update_mc", "ClassDescription", "KeyDate", "ClassLastChangedDateTime"}
	sapClassificationClassDescriptionDatumColumnsWithoutDefault = []string{"ClassInternalID", "Language", "Update_mc", "ClassDescription", "KeyDate", "ClassLastChangedDateTime"}
	sapClassificationClassDescriptionDatumColumnsWithDefault    = []string{}
	sapClassificationClassDescriptionDatumPrimaryKeyColumns     = []string{"ClassInternalID", "Language"}
	sapClassificationClassDescriptionDatumGeneratedColumns      = []string{}
)

type (
	// SapClassificationClassDescriptionDatumSlice is an alias for a slice of pointers to SapClassificationClassDescriptionDatum.
	// This should almost always be used instead of []SapClassificationClassDescriptionDatum.
	SapClassificationClassDescriptionDatumSlice []*SapClassificationClassDescriptionDatum
	// SapClassificationClassDescriptionDatumHook is the signature for custom SapClassificationClassDescriptionDatum hook methods
	SapClassificationClassDescriptionDatumHook func(context.Context, boil.ContextExecutor, *SapClassificationClassDescriptionDatum) error

	sapClassificationClassDescriptionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapClassificationClassDescriptionDatumType                 = reflect.TypeOf(&SapClassificationClassDescriptionDatum{})
	sapClassificationClassDescriptionDatumMapping              = queries.MakeStructMapping(sapClassificationClassDescriptionDatumType)
	sapClassificationClassDescriptionDatumPrimaryKeyMapping, _ = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, sapClassificationClassDescriptionDatumPrimaryKeyColumns)
	sapClassificationClassDescriptionDatumInsertCacheMut       sync.RWMutex
	sapClassificationClassDescriptionDatumInsertCache          = make(map[string]insertCache)
	sapClassificationClassDescriptionDatumUpdateCacheMut       sync.RWMutex
	sapClassificationClassDescriptionDatumUpdateCache          = make(map[string]updateCache)
	sapClassificationClassDescriptionDatumUpsertCacheMut       sync.RWMutex
	sapClassificationClassDescriptionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapClassificationClassDescriptionDatumAfterSelectHooks []SapClassificationClassDescriptionDatumHook

var sapClassificationClassDescriptionDatumBeforeInsertHooks []SapClassificationClassDescriptionDatumHook
var sapClassificationClassDescriptionDatumAfterInsertHooks []SapClassificationClassDescriptionDatumHook

var sapClassificationClassDescriptionDatumBeforeUpdateHooks []SapClassificationClassDescriptionDatumHook
var sapClassificationClassDescriptionDatumAfterUpdateHooks []SapClassificationClassDescriptionDatumHook

var sapClassificationClassDescriptionDatumBeforeDeleteHooks []SapClassificationClassDescriptionDatumHook
var sapClassificationClassDescriptionDatumAfterDeleteHooks []SapClassificationClassDescriptionDatumHook

var sapClassificationClassDescriptionDatumBeforeUpsertHooks []SapClassificationClassDescriptionDatumHook
var sapClassificationClassDescriptionDatumAfterUpsertHooks []SapClassificationClassDescriptionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapClassificationClassDescriptionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapClassificationClassDescriptionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapClassificationClassDescriptionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapClassificationClassDescriptionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapClassificationClassDescriptionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapClassificationClassDescriptionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapClassificationClassDescriptionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapClassificationClassDescriptionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapClassificationClassDescriptionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapClassificationClassDescriptionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapClassificationClassDescriptionDatumHook registers your hook function for all future operations.
func AddSapClassificationClassDescriptionDatumHook(hookPoint boil.HookPoint, sapClassificationClassDescriptionDatumHook SapClassificationClassDescriptionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapClassificationClassDescriptionDatumAfterSelectHooks = append(sapClassificationClassDescriptionDatumAfterSelectHooks, sapClassificationClassDescriptionDatumHook)
	case boil.BeforeInsertHook:
		sapClassificationClassDescriptionDatumBeforeInsertHooks = append(sapClassificationClassDescriptionDatumBeforeInsertHooks, sapClassificationClassDescriptionDatumHook)
	case boil.AfterInsertHook:
		sapClassificationClassDescriptionDatumAfterInsertHooks = append(sapClassificationClassDescriptionDatumAfterInsertHooks, sapClassificationClassDescriptionDatumHook)
	case boil.BeforeUpdateHook:
		sapClassificationClassDescriptionDatumBeforeUpdateHooks = append(sapClassificationClassDescriptionDatumBeforeUpdateHooks, sapClassificationClassDescriptionDatumHook)
	case boil.AfterUpdateHook:
		sapClassificationClassDescriptionDatumAfterUpdateHooks = append(sapClassificationClassDescriptionDatumAfterUpdateHooks, sapClassificationClassDescriptionDatumHook)
	case boil.BeforeDeleteHook:
		sapClassificationClassDescriptionDatumBeforeDeleteHooks = append(sapClassificationClassDescriptionDatumBeforeDeleteHooks, sapClassificationClassDescriptionDatumHook)
	case boil.AfterDeleteHook:
		sapClassificationClassDescriptionDatumAfterDeleteHooks = append(sapClassificationClassDescriptionDatumAfterDeleteHooks, sapClassificationClassDescriptionDatumHook)
	case boil.BeforeUpsertHook:
		sapClassificationClassDescriptionDatumBeforeUpsertHooks = append(sapClassificationClassDescriptionDatumBeforeUpsertHooks, sapClassificationClassDescriptionDatumHook)
	case boil.AfterUpsertHook:
		sapClassificationClassDescriptionDatumAfterUpsertHooks = append(sapClassificationClassDescriptionDatumAfterUpsertHooks, sapClassificationClassDescriptionDatumHook)
	}
}

// One returns a single sapClassificationClassDescriptionDatum record from the query.
func (q sapClassificationClassDescriptionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapClassificationClassDescriptionDatum, error) {
	o := &SapClassificationClassDescriptionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_classification_class_description_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapClassificationClassDescriptionDatum records from the query.
func (q sapClassificationClassDescriptionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapClassificationClassDescriptionDatumSlice, error) {
	var o []*SapClassificationClassDescriptionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapClassificationClassDescriptionDatum slice")
	}

	if len(sapClassificationClassDescriptionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapClassificationClassDescriptionDatum records in the query.
func (q sapClassificationClassDescriptionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_classification_class_description_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapClassificationClassDescriptionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_classification_class_description_data exists")
	}

	return count > 0, nil
}

// ClassInternalIDSapClassificationClassDatum pointed to by the foreign key.
func (o *SapClassificationClassDescriptionDatum) ClassInternalIDSapClassificationClassDatum(mods ...qm.QueryMod) sapClassificationClassDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ClassInternalID` = ?", o.ClassInternalID),
	}

	queryMods = append(queryMods, mods...)

	query := SapClassificationClassData(queryMods...)
	queries.SetFrom(query.Query, "`sap_classification_class_data`")

	return query
}

// LoadClassInternalIDSapClassificationClassDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapClassificationClassDescriptionDatumL) LoadClassInternalIDSapClassificationClassDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapClassificationClassDescriptionDatum interface{}, mods queries.Applicator) error {
	var slice []*SapClassificationClassDescriptionDatum
	var object *SapClassificationClassDescriptionDatum

	if singular {
		object = maybeSapClassificationClassDescriptionDatum.(*SapClassificationClassDescriptionDatum)
	} else {
		slice = *maybeSapClassificationClassDescriptionDatum.(*[]*SapClassificationClassDescriptionDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapClassificationClassDescriptionDatumR{}
		}
		args = append(args, object.ClassInternalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapClassificationClassDescriptionDatumR{}
			}

			for _, a := range args {
				if a == obj.ClassInternalID {
					continue Outer
				}
			}

			args = append(args, obj.ClassInternalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_classification_class_data`),
		qm.WhereIn(`sap_classification_class_data.ClassInternalID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapClassificationClassDatum")
	}

	var resultSlice []*SapClassificationClassDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapClassificationClassDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_classification_class_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_classification_class_data")
	}

	if len(sapClassificationClassDescriptionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClassInternalIDSapClassificationClassDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapClassificationClassDatumR{}
		}
		foreign.R.ClassInternalIDSapClassificationClassDescriptionData = append(foreign.R.ClassInternalIDSapClassificationClassDescriptionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClassInternalID == foreign.ClassInternalID {
				local.R.ClassInternalIDSapClassificationClassDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapClassificationClassDatumR{}
				}
				foreign.R.ClassInternalIDSapClassificationClassDescriptionData = append(foreign.R.ClassInternalIDSapClassificationClassDescriptionData, local)
				break
			}
		}
	}

	return nil
}

// SetClassInternalIDSapClassificationClassDatum of the sapClassificationClassDescriptionDatum to the related item.
// Sets o.R.ClassInternalIDSapClassificationClassDatum to related.
// Adds o to related.R.ClassInternalIDSapClassificationClassDescriptionData.
func (o *SapClassificationClassDescriptionDatum) SetClassInternalIDSapClassificationClassDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapClassificationClassDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_classification_class_description_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ClassInternalID"}),
		strmangle.WhereClause("`", "`", 0, sapClassificationClassDescriptionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ClassInternalID, o.ClassInternalID, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClassInternalID = related.ClassInternalID
	if o.R == nil {
		o.R = &sapClassificationClassDescriptionDatumR{
			ClassInternalIDSapClassificationClassDatum: related,
		}
	} else {
		o.R.ClassInternalIDSapClassificationClassDatum = related
	}

	if related.R == nil {
		related.R = &sapClassificationClassDatumR{
			ClassInternalIDSapClassificationClassDescriptionData: SapClassificationClassDescriptionDatumSlice{o},
		}
	} else {
		related.R.ClassInternalIDSapClassificationClassDescriptionData = append(related.R.ClassInternalIDSapClassificationClassDescriptionData, o)
	}

	return nil
}

// SapClassificationClassDescriptionData retrieves all the records using an executor.
func SapClassificationClassDescriptionData(mods ...qm.QueryMod) sapClassificationClassDescriptionDatumQuery {
	mods = append(mods, qm.From("`sap_classification_class_description_data`"))
	return sapClassificationClassDescriptionDatumQuery{NewQuery(mods...)}
}

// FindSapClassificationClassDescriptionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapClassificationClassDescriptionDatum(ctx context.Context, exec boil.ContextExecutor, classInternalID string, language string, selectCols ...string) (*SapClassificationClassDescriptionDatum, error) {
	sapClassificationClassDescriptionDatumObj := &SapClassificationClassDescriptionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_classification_class_description_data` where `ClassInternalID`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, classInternalID, language)

	err := q.Bind(ctx, exec, sapClassificationClassDescriptionDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_classification_class_description_data")
	}

	if err = sapClassificationClassDescriptionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapClassificationClassDescriptionDatumObj, err
	}

	return sapClassificationClassDescriptionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapClassificationClassDescriptionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_classification_class_description_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapClassificationClassDescriptionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapClassificationClassDescriptionDatumInsertCacheMut.RLock()
	cache, cached := sapClassificationClassDescriptionDatumInsertCache[key]
	sapClassificationClassDescriptionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapClassificationClassDescriptionDatumAllColumns,
			sapClassificationClassDescriptionDatumColumnsWithDefault,
			sapClassificationClassDescriptionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_classification_class_description_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_classification_class_description_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_classification_class_description_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapClassificationClassDescriptionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_classification_class_description_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ClassInternalID,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_classification_class_description_data")
	}

CacheNoHooks:
	if !cached {
		sapClassificationClassDescriptionDatumInsertCacheMut.Lock()
		sapClassificationClassDescriptionDatumInsertCache[key] = cache
		sapClassificationClassDescriptionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapClassificationClassDescriptionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapClassificationClassDescriptionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapClassificationClassDescriptionDatumUpdateCacheMut.RLock()
	cache, cached := sapClassificationClassDescriptionDatumUpdateCache[key]
	sapClassificationClassDescriptionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapClassificationClassDescriptionDatumAllColumns,
			sapClassificationClassDescriptionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_classification_class_description_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_classification_class_description_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapClassificationClassDescriptionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, append(wl, sapClassificationClassDescriptionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_classification_class_description_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_classification_class_description_data")
	}

	if !cached {
		sapClassificationClassDescriptionDatumUpdateCacheMut.Lock()
		sapClassificationClassDescriptionDatumUpdateCache[key] = cache
		sapClassificationClassDescriptionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapClassificationClassDescriptionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_classification_class_description_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_classification_class_description_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapClassificationClassDescriptionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapClassificationClassDescriptionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_classification_class_description_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapClassificationClassDescriptionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapClassificationClassDescriptionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapClassificationClassDescriptionDatum")
	}
	return rowsAff, nil
}

var mySQLSapClassificationClassDescriptionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapClassificationClassDescriptionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_classification_class_description_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapClassificationClassDescriptionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapClassificationClassDescriptionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapClassificationClassDescriptionDatumUpsertCacheMut.RLock()
	cache, cached := sapClassificationClassDescriptionDatumUpsertCache[key]
	sapClassificationClassDescriptionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapClassificationClassDescriptionDatumAllColumns,
			sapClassificationClassDescriptionDatumColumnsWithDefault,
			sapClassificationClassDescriptionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapClassificationClassDescriptionDatumAllColumns,
			sapClassificationClassDescriptionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_classification_class_description_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_classification_class_description_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_classification_class_description_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_classification_class_description_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapClassificationClassDescriptionDatumType, sapClassificationClassDescriptionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_classification_class_description_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_classification_class_description_data")
	}

CacheNoHooks:
	if !cached {
		sapClassificationClassDescriptionDatumUpsertCacheMut.Lock()
		sapClassificationClassDescriptionDatumUpsertCache[key] = cache
		sapClassificationClassDescriptionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapClassificationClassDescriptionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapClassificationClassDescriptionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapClassificationClassDescriptionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapClassificationClassDescriptionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_classification_class_description_data` WHERE `ClassInternalID`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_classification_class_description_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_classification_class_description_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapClassificationClassDescriptionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapClassificationClassDescriptionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_classification_class_description_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_classification_class_description_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapClassificationClassDescriptionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapClassificationClassDescriptionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapClassificationClassDescriptionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_classification_class_description_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapClassificationClassDescriptionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapClassificationClassDescriptionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_classification_class_description_data")
	}

	if len(sapClassificationClassDescriptionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapClassificationClassDescriptionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapClassificationClassDescriptionDatum(ctx, exec, o.ClassInternalID, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapClassificationClassDescriptionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapClassificationClassDescriptionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapClassificationClassDescriptionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_classification_class_description_data`.* FROM `sap_classification_class_description_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapClassificationClassDescriptionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapClassificationClassDescriptionDatumSlice")
	}

	*o = slice

	return nil
}

// SapClassificationClassDescriptionDatumExists checks if the SapClassificationClassDescriptionDatum row exists.
func SapClassificationClassDescriptionDatumExists(ctx context.Context, exec boil.ContextExecutor, classInternalID string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_classification_class_description_data` where `ClassInternalID`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, classInternalID, language)
	}
	row := exec.QueryRowContext(ctx, sql, classInternalID, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_classification_class_description_data exists")
	}

	return exists, nil
}
