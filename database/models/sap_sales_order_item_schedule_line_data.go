// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesOrderItemScheduleLineDatum is an object representing the database table.
type SapSalesOrderItemScheduleLineDatum struct {
	SalesOrder                    string      `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	SalesOrderItem                string      `boil:"SalesOrderItem" json:"SalesOrderItem" toml:"SalesOrderItem" yaml:"SalesOrderItem"`
	ScheduleLine                  string      `boil:"ScheduleLine" json:"ScheduleLine" toml:"ScheduleLine" yaml:"ScheduleLine"`
	RequestedDeliveryDate         null.String `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate,omitempty" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate,omitempty"`
	ConfirmedDeliveryDate         null.String `boil:"ConfirmedDeliveryDate" json:"ConfirmedDeliveryDate,omitempty" toml:"ConfirmedDeliveryDate" yaml:"ConfirmedDeliveryDate,omitempty"`
	OrderQuantityUnit             null.String `boil:"OrderQuantityUnit" json:"OrderQuantityUnit,omitempty" toml:"OrderQuantityUnit" yaml:"OrderQuantityUnit,omitempty"`
	ScheduleLineOrderQuantity     null.String `boil:"ScheduleLineOrderQuantity" json:"ScheduleLineOrderQuantity,omitempty" toml:"ScheduleLineOrderQuantity" yaml:"ScheduleLineOrderQuantity,omitempty"`
	ConfdOrderQtyByMatlAvailCheck null.String `boil:"ConfdOrderQtyByMatlAvailCheck" json:"ConfdOrderQtyByMatlAvailCheck,omitempty" toml:"ConfdOrderQtyByMatlAvailCheck" yaml:"ConfdOrderQtyByMatlAvailCheck,omitempty"`
	DeliveredQtyInOrderQtyUnit    null.String `boil:"DeliveredQtyInOrderQtyUnit" json:"DeliveredQtyInOrderQtyUnit,omitempty" toml:"DeliveredQtyInOrderQtyUnit" yaml:"DeliveredQtyInOrderQtyUnit,omitempty"`
	OpenConfdDelivQtyInOrdQtyUnit null.String `boil:"OpenConfdDelivQtyInOrdQtyUnit" json:"OpenConfdDelivQtyInOrdQtyUnit,omitempty" toml:"OpenConfdDelivQtyInOrdQtyUnit" yaml:"OpenConfdDelivQtyInOrdQtyUnit,omitempty"`
	CorrectedQtyInOrderQtyUnit    null.String `boil:"CorrectedQtyInOrderQtyUnit" json:"CorrectedQtyInOrderQtyUnit,omitempty" toml:"CorrectedQtyInOrderQtyUnit" yaml:"CorrectedQtyInOrderQtyUnit,omitempty"`
	DelivBlockReasonForSchedLine  null.String `boil:"DelivBlockReasonForSchedLine" json:"DelivBlockReasonForSchedLine,omitempty" toml:"DelivBlockReasonForSchedLine" yaml:"DelivBlockReasonForSchedLine,omitempty"`

	R *sapSalesOrderItemScheduleLineDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesOrderItemScheduleLineDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesOrderItemScheduleLineDatumColumns = struct {
	SalesOrder                    string
	SalesOrderItem                string
	ScheduleLine                  string
	RequestedDeliveryDate         string
	ConfirmedDeliveryDate         string
	OrderQuantityUnit             string
	ScheduleLineOrderQuantity     string
	ConfdOrderQtyByMatlAvailCheck string
	DeliveredQtyInOrderQtyUnit    string
	OpenConfdDelivQtyInOrdQtyUnit string
	CorrectedQtyInOrderQtyUnit    string
	DelivBlockReasonForSchedLine  string
}{
	SalesOrder:                    "SalesOrder",
	SalesOrderItem:                "SalesOrderItem",
	ScheduleLine:                  "ScheduleLine",
	RequestedDeliveryDate:         "RequestedDeliveryDate",
	ConfirmedDeliveryDate:         "ConfirmedDeliveryDate",
	OrderQuantityUnit:             "OrderQuantityUnit",
	ScheduleLineOrderQuantity:     "ScheduleLineOrderQuantity",
	ConfdOrderQtyByMatlAvailCheck: "ConfdOrderQtyByMatlAvailCheck",
	DeliveredQtyInOrderQtyUnit:    "DeliveredQtyInOrderQtyUnit",
	OpenConfdDelivQtyInOrdQtyUnit: "OpenConfdDelivQtyInOrdQtyUnit",
	CorrectedQtyInOrderQtyUnit:    "CorrectedQtyInOrderQtyUnit",
	DelivBlockReasonForSchedLine:  "DelivBlockReasonForSchedLine",
}

var SapSalesOrderItemScheduleLineDatumTableColumns = struct {
	SalesOrder                    string
	SalesOrderItem                string
	ScheduleLine                  string
	RequestedDeliveryDate         string
	ConfirmedDeliveryDate         string
	OrderQuantityUnit             string
	ScheduleLineOrderQuantity     string
	ConfdOrderQtyByMatlAvailCheck string
	DeliveredQtyInOrderQtyUnit    string
	OpenConfdDelivQtyInOrdQtyUnit string
	CorrectedQtyInOrderQtyUnit    string
	DelivBlockReasonForSchedLine  string
}{
	SalesOrder:                    "sap_sales_order_item_schedule_line_data.SalesOrder",
	SalesOrderItem:                "sap_sales_order_item_schedule_line_data.SalesOrderItem",
	ScheduleLine:                  "sap_sales_order_item_schedule_line_data.ScheduleLine",
	RequestedDeliveryDate:         "sap_sales_order_item_schedule_line_data.RequestedDeliveryDate",
	ConfirmedDeliveryDate:         "sap_sales_order_item_schedule_line_data.ConfirmedDeliveryDate",
	OrderQuantityUnit:             "sap_sales_order_item_schedule_line_data.OrderQuantityUnit",
	ScheduleLineOrderQuantity:     "sap_sales_order_item_schedule_line_data.ScheduleLineOrderQuantity",
	ConfdOrderQtyByMatlAvailCheck: "sap_sales_order_item_schedule_line_data.ConfdOrderQtyByMatlAvailCheck",
	DeliveredQtyInOrderQtyUnit:    "sap_sales_order_item_schedule_line_data.DeliveredQtyInOrderQtyUnit",
	OpenConfdDelivQtyInOrdQtyUnit: "sap_sales_order_item_schedule_line_data.OpenConfdDelivQtyInOrdQtyUnit",
	CorrectedQtyInOrderQtyUnit:    "sap_sales_order_item_schedule_line_data.CorrectedQtyInOrderQtyUnit",
	DelivBlockReasonForSchedLine:  "sap_sales_order_item_schedule_line_data.DelivBlockReasonForSchedLine",
}

// Generated where

var SapSalesOrderItemScheduleLineDatumWhere = struct {
	SalesOrder                    whereHelperstring
	SalesOrderItem                whereHelperstring
	ScheduleLine                  whereHelperstring
	RequestedDeliveryDate         whereHelpernull_String
	ConfirmedDeliveryDate         whereHelpernull_String
	OrderQuantityUnit             whereHelpernull_String
	ScheduleLineOrderQuantity     whereHelpernull_String
	ConfdOrderQtyByMatlAvailCheck whereHelpernull_String
	DeliveredQtyInOrderQtyUnit    whereHelpernull_String
	OpenConfdDelivQtyInOrdQtyUnit whereHelpernull_String
	CorrectedQtyInOrderQtyUnit    whereHelpernull_String
	DelivBlockReasonForSchedLine  whereHelpernull_String
}{
	SalesOrder:                    whereHelperstring{field: "`sap_sales_order_item_schedule_line_data`.`SalesOrder`"},
	SalesOrderItem:                whereHelperstring{field: "`sap_sales_order_item_schedule_line_data`.`SalesOrderItem`"},
	ScheduleLine:                  whereHelperstring{field: "`sap_sales_order_item_schedule_line_data`.`ScheduleLine`"},
	RequestedDeliveryDate:         whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`RequestedDeliveryDate`"},
	ConfirmedDeliveryDate:         whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`ConfirmedDeliveryDate`"},
	OrderQuantityUnit:             whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`OrderQuantityUnit`"},
	ScheduleLineOrderQuantity:     whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`ScheduleLineOrderQuantity`"},
	ConfdOrderQtyByMatlAvailCheck: whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`ConfdOrderQtyByMatlAvailCheck`"},
	DeliveredQtyInOrderQtyUnit:    whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`DeliveredQtyInOrderQtyUnit`"},
	OpenConfdDelivQtyInOrdQtyUnit: whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`OpenConfdDelivQtyInOrdQtyUnit`"},
	CorrectedQtyInOrderQtyUnit:    whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`CorrectedQtyInOrderQtyUnit`"},
	DelivBlockReasonForSchedLine:  whereHelpernull_String{field: "`sap_sales_order_item_schedule_line_data`.`DelivBlockReasonForSchedLine`"},
}

// SapSalesOrderItemScheduleLineDatumRels is where relationship names are stored.
var SapSalesOrderItemScheduleLineDatumRels = struct {
	SalesOrderSapSalesOrderHeaderDatum string
}{
	SalesOrderSapSalesOrderHeaderDatum: "SalesOrderSapSalesOrderHeaderDatum",
}

// sapSalesOrderItemScheduleLineDatumR is where relationships are stored.
type sapSalesOrderItemScheduleLineDatumR struct {
	SalesOrderSapSalesOrderHeaderDatum *SapSalesOrderHeaderDatum `boil:"SalesOrderSapSalesOrderHeaderDatum" json:"SalesOrderSapSalesOrderHeaderDatum" toml:"SalesOrderSapSalesOrderHeaderDatum" yaml:"SalesOrderSapSalesOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesOrderItemScheduleLineDatumR) NewStruct() *sapSalesOrderItemScheduleLineDatumR {
	return &sapSalesOrderItemScheduleLineDatumR{}
}

// sapSalesOrderItemScheduleLineDatumL is where Load methods for each relationship are stored.
type sapSalesOrderItemScheduleLineDatumL struct{}

var (
	sapSalesOrderItemScheduleLineDatumAllColumns            = []string{"SalesOrder", "SalesOrderItem", "ScheduleLine", "RequestedDeliveryDate", "ConfirmedDeliveryDate", "OrderQuantityUnit", "ScheduleLineOrderQuantity", "ConfdOrderQtyByMatlAvailCheck", "DeliveredQtyInOrderQtyUnit", "OpenConfdDelivQtyInOrdQtyUnit", "CorrectedQtyInOrderQtyUnit", "DelivBlockReasonForSchedLine"}
	sapSalesOrderItemScheduleLineDatumColumnsWithoutDefault = []string{"SalesOrder", "SalesOrderItem", "ScheduleLine", "RequestedDeliveryDate", "ConfirmedDeliveryDate", "OrderQuantityUnit", "ScheduleLineOrderQuantity", "ConfdOrderQtyByMatlAvailCheck", "DeliveredQtyInOrderQtyUnit", "OpenConfdDelivQtyInOrdQtyUnit", "CorrectedQtyInOrderQtyUnit", "DelivBlockReasonForSchedLine"}
	sapSalesOrderItemScheduleLineDatumColumnsWithDefault    = []string{}
	sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns     = []string{"SalesOrder", "SalesOrderItem", "ScheduleLine"}
	sapSalesOrderItemScheduleLineDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesOrderItemScheduleLineDatumSlice is an alias for a slice of pointers to SapSalesOrderItemScheduleLineDatum.
	// This should almost always be used instead of []SapSalesOrderItemScheduleLineDatum.
	SapSalesOrderItemScheduleLineDatumSlice []*SapSalesOrderItemScheduleLineDatum
	// SapSalesOrderItemScheduleLineDatumHook is the signature for custom SapSalesOrderItemScheduleLineDatum hook methods
	SapSalesOrderItemScheduleLineDatumHook func(context.Context, boil.ContextExecutor, *SapSalesOrderItemScheduleLineDatum) error

	sapSalesOrderItemScheduleLineDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesOrderItemScheduleLineDatumType                 = reflect.TypeOf(&SapSalesOrderItemScheduleLineDatum{})
	sapSalesOrderItemScheduleLineDatumMapping              = queries.MakeStructMapping(sapSalesOrderItemScheduleLineDatumType)
	sapSalesOrderItemScheduleLineDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns)
	sapSalesOrderItemScheduleLineDatumInsertCacheMut       sync.RWMutex
	sapSalesOrderItemScheduleLineDatumInsertCache          = make(map[string]insertCache)
	sapSalesOrderItemScheduleLineDatumUpdateCacheMut       sync.RWMutex
	sapSalesOrderItemScheduleLineDatumUpdateCache          = make(map[string]updateCache)
	sapSalesOrderItemScheduleLineDatumUpsertCacheMut       sync.RWMutex
	sapSalesOrderItemScheduleLineDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesOrderItemScheduleLineDatumAfterSelectHooks []SapSalesOrderItemScheduleLineDatumHook

var sapSalesOrderItemScheduleLineDatumBeforeInsertHooks []SapSalesOrderItemScheduleLineDatumHook
var sapSalesOrderItemScheduleLineDatumAfterInsertHooks []SapSalesOrderItemScheduleLineDatumHook

var sapSalesOrderItemScheduleLineDatumBeforeUpdateHooks []SapSalesOrderItemScheduleLineDatumHook
var sapSalesOrderItemScheduleLineDatumAfterUpdateHooks []SapSalesOrderItemScheduleLineDatumHook

var sapSalesOrderItemScheduleLineDatumBeforeDeleteHooks []SapSalesOrderItemScheduleLineDatumHook
var sapSalesOrderItemScheduleLineDatumAfterDeleteHooks []SapSalesOrderItemScheduleLineDatumHook

var sapSalesOrderItemScheduleLineDatumBeforeUpsertHooks []SapSalesOrderItemScheduleLineDatumHook
var sapSalesOrderItemScheduleLineDatumAfterUpsertHooks []SapSalesOrderItemScheduleLineDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesOrderItemScheduleLineDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderItemScheduleLineDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesOrderItemScheduleLineDatumHook registers your hook function for all future operations.
func AddSapSalesOrderItemScheduleLineDatumHook(hookPoint boil.HookPoint, sapSalesOrderItemScheduleLineDatumHook SapSalesOrderItemScheduleLineDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesOrderItemScheduleLineDatumAfterSelectHooks = append(sapSalesOrderItemScheduleLineDatumAfterSelectHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.BeforeInsertHook:
		sapSalesOrderItemScheduleLineDatumBeforeInsertHooks = append(sapSalesOrderItemScheduleLineDatumBeforeInsertHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.AfterInsertHook:
		sapSalesOrderItemScheduleLineDatumAfterInsertHooks = append(sapSalesOrderItemScheduleLineDatumAfterInsertHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesOrderItemScheduleLineDatumBeforeUpdateHooks = append(sapSalesOrderItemScheduleLineDatumBeforeUpdateHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.AfterUpdateHook:
		sapSalesOrderItemScheduleLineDatumAfterUpdateHooks = append(sapSalesOrderItemScheduleLineDatumAfterUpdateHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesOrderItemScheduleLineDatumBeforeDeleteHooks = append(sapSalesOrderItemScheduleLineDatumBeforeDeleteHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.AfterDeleteHook:
		sapSalesOrderItemScheduleLineDatumAfterDeleteHooks = append(sapSalesOrderItemScheduleLineDatumAfterDeleteHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesOrderItemScheduleLineDatumBeforeUpsertHooks = append(sapSalesOrderItemScheduleLineDatumBeforeUpsertHooks, sapSalesOrderItemScheduleLineDatumHook)
	case boil.AfterUpsertHook:
		sapSalesOrderItemScheduleLineDatumAfterUpsertHooks = append(sapSalesOrderItemScheduleLineDatumAfterUpsertHooks, sapSalesOrderItemScheduleLineDatumHook)
	}
}

// One returns a single sapSalesOrderItemScheduleLineDatum record from the query.
func (q sapSalesOrderItemScheduleLineDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesOrderItemScheduleLineDatum, error) {
	o := &SapSalesOrderItemScheduleLineDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_order_item_schedule_line_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesOrderItemScheduleLineDatum records from the query.
func (q sapSalesOrderItemScheduleLineDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesOrderItemScheduleLineDatumSlice, error) {
	var o []*SapSalesOrderItemScheduleLineDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesOrderItemScheduleLineDatum slice")
	}

	if len(sapSalesOrderItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesOrderItemScheduleLineDatum records in the query.
func (q sapSalesOrderItemScheduleLineDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_order_item_schedule_line_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesOrderItemScheduleLineDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_order_item_schedule_line_data exists")
	}

	return count > 0, nil
}

// SalesOrderSapSalesOrderHeaderDatum pointed to by the foreign key.
func (o *SapSalesOrderItemScheduleLineDatum) SalesOrderSapSalesOrderHeaderDatum(mods ...qm.QueryMod) sapSalesOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesOrder` = ?", o.SalesOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_order_header_data`")

	return query
}

// LoadSalesOrderSapSalesOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesOrderItemScheduleLineDatumL) LoadSalesOrderSapSalesOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderItemScheduleLineDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderItemScheduleLineDatum
	var object *SapSalesOrderItemScheduleLineDatum

	if singular {
		object = maybeSapSalesOrderItemScheduleLineDatum.(*SapSalesOrderItemScheduleLineDatum)
	} else {
		slice = *maybeSapSalesOrderItemScheduleLineDatum.(*[]*SapSalesOrderItemScheduleLineDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderItemScheduleLineDatumR{}
		}
		args = append(args, object.SalesOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderItemScheduleLineDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_header_data`),
		qm.WhereIn(`sap_sales_order_header_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesOrderHeaderDatum")
	}

	var resultSlice []*SapSalesOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_header_data")
	}

	if len(sapSalesOrderItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesOrderSapSalesOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesOrderHeaderDatumR{}
		}
		foreign.R.SalesOrderSapSalesOrderItemScheduleLineData = append(foreign.R.SalesOrderSapSalesOrderItemScheduleLineData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesOrderHeaderDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderItemScheduleLineData = append(foreign.R.SalesOrderSapSalesOrderItemScheduleLineData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesOrderSapSalesOrderHeaderDatum of the sapSalesOrderItemScheduleLineDatum to the related item.
// Sets o.R.SalesOrderSapSalesOrderHeaderDatum to related.
// Adds o to related.R.SalesOrderSapSalesOrderItemScheduleLineData.
func (o *SapSalesOrderItemScheduleLineDatum) SetSalesOrderSapSalesOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_order_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
		strmangle.WhereClause("`", "`", 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesOrder, o.SalesOrder, o.SalesOrderItem, o.ScheduleLine}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesOrder = related.SalesOrder
	if o.R == nil {
		o.R = &sapSalesOrderItemScheduleLineDatumR{
			SalesOrderSapSalesOrderHeaderDatum: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderItemScheduleLineData: SapSalesOrderItemScheduleLineDatumSlice{o},
		}
	} else {
		related.R.SalesOrderSapSalesOrderItemScheduleLineData = append(related.R.SalesOrderSapSalesOrderItemScheduleLineData, o)
	}

	return nil
}

// SapSalesOrderItemScheduleLineData retrieves all the records using an executor.
func SapSalesOrderItemScheduleLineData(mods ...qm.QueryMod) sapSalesOrderItemScheduleLineDatumQuery {
	mods = append(mods, qm.From("`sap_sales_order_item_schedule_line_data`"))
	return sapSalesOrderItemScheduleLineDatumQuery{NewQuery(mods...)}
}

// FindSapSalesOrderItemScheduleLineDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesOrderItemScheduleLineDatum(ctx context.Context, exec boil.ContextExecutor, salesOrder string, salesOrderItem string, scheduleLine string, selectCols ...string) (*SapSalesOrderItemScheduleLineDatum, error) {
	sapSalesOrderItemScheduleLineDatumObj := &SapSalesOrderItemScheduleLineDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_order_item_schedule_line_data` where `SalesOrder`=? AND `SalesOrderItem`=? AND `ScheduleLine`=?", sel,
	)

	q := queries.Raw(query, salesOrder, salesOrderItem, scheduleLine)

	err := q.Bind(ctx, exec, sapSalesOrderItemScheduleLineDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_order_item_schedule_line_data")
	}

	if err = sapSalesOrderItemScheduleLineDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesOrderItemScheduleLineDatumObj, err
	}

	return sapSalesOrderItemScheduleLineDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesOrderItemScheduleLineDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_item_schedule_line_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderItemScheduleLineDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesOrderItemScheduleLineDatumInsertCacheMut.RLock()
	cache, cached := sapSalesOrderItemScheduleLineDatumInsertCache[key]
	sapSalesOrderItemScheduleLineDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesOrderItemScheduleLineDatumAllColumns,
			sapSalesOrderItemScheduleLineDatumColumnsWithDefault,
			sapSalesOrderItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_order_item_schedule_line_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_order_item_schedule_line_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_order_item_schedule_line_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_order_item_schedule_line_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesOrder,
		o.SalesOrderItem,
		o.ScheduleLine,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderItemScheduleLineDatumInsertCacheMut.Lock()
		sapSalesOrderItemScheduleLineDatumInsertCache[key] = cache
		sapSalesOrderItemScheduleLineDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesOrderItemScheduleLineDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesOrderItemScheduleLineDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesOrderItemScheduleLineDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesOrderItemScheduleLineDatumUpdateCache[key]
	sapSalesOrderItemScheduleLineDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesOrderItemScheduleLineDatumAllColumns,
			sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_order_item_schedule_line_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_order_item_schedule_line_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, append(wl, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_order_item_schedule_line_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_order_item_schedule_line_data")
	}

	if !cached {
		sapSalesOrderItemScheduleLineDatumUpdateCacheMut.Lock()
		sapSalesOrderItemScheduleLineDatumUpdateCache[key] = cache
		sapSalesOrderItemScheduleLineDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesOrderItemScheduleLineDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_order_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_order_item_schedule_line_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesOrderItemScheduleLineDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_order_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesOrderItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesOrderItemScheduleLineDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesOrderItemScheduleLineDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesOrderItemScheduleLineDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_item_schedule_line_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderItemScheduleLineDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesOrderItemScheduleLineDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesOrderItemScheduleLineDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesOrderItemScheduleLineDatumUpsertCache[key]
	sapSalesOrderItemScheduleLineDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesOrderItemScheduleLineDatumAllColumns,
			sapSalesOrderItemScheduleLineDatumColumnsWithDefault,
			sapSalesOrderItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesOrderItemScheduleLineDatumAllColumns,
			sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_order_item_schedule_line_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_order_item_schedule_line_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_order_item_schedule_line_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_order_item_schedule_line_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesOrderItemScheduleLineDatumType, sapSalesOrderItemScheduleLineDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_order_item_schedule_line_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderItemScheduleLineDatumUpsertCacheMut.Lock()
		sapSalesOrderItemScheduleLineDatumUpsertCache[key] = cache
		sapSalesOrderItemScheduleLineDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesOrderItemScheduleLineDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesOrderItemScheduleLineDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesOrderItemScheduleLineDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesOrderItemScheduleLineDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_order_item_schedule_line_data` WHERE `SalesOrder`=? AND `SalesOrderItem`=? AND `ScheduleLine`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_order_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_order_item_schedule_line_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesOrderItemScheduleLineDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesOrderItemScheduleLineDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_order_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_item_schedule_line_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesOrderItemScheduleLineDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesOrderItemScheduleLineDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_order_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesOrderItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_item_schedule_line_data")
	}

	if len(sapSalesOrderItemScheduleLineDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesOrderItemScheduleLineDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesOrderItemScheduleLineDatum(ctx, exec, o.SalesOrder, o.SalesOrderItem, o.ScheduleLine)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesOrderItemScheduleLineDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesOrderItemScheduleLineDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_order_item_schedule_line_data`.* FROM `sap_sales_order_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderItemScheduleLineDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesOrderItemScheduleLineDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesOrderItemScheduleLineDatumExists checks if the SapSalesOrderItemScheduleLineDatum row exists.
func SapSalesOrderItemScheduleLineDatumExists(ctx context.Context, exec boil.ContextExecutor, salesOrder string, salesOrderItem string, scheduleLine string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_order_item_schedule_line_data` where `SalesOrder`=? AND `SalesOrderItem`=? AND `ScheduleLine`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesOrder, salesOrderItem, scheduleLine)
	}
	row := exec.QueryRowContext(ctx, sql, salesOrder, salesOrderItem, scheduleLine)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_order_item_schedule_line_data exists")
	}

	return exists, nil
}
