// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSupplierInvoiceAccountAssignmentDatum is an object representing the database table.
type SapSupplierInvoiceAccountAssignmentDatum struct {
	SupplierInvoice               string      `boil:"SupplierInvoice" json:"SupplierInvoice" toml:"SupplierInvoice" yaml:"SupplierInvoice"`
	FiscalYear                    string      `boil:"FiscalYear" json:"FiscalYear" toml:"FiscalYear" yaml:"FiscalYear"`
	SupplierInvoiceItem           string      `boil:"SupplierInvoiceItem" json:"SupplierInvoiceItem" toml:"SupplierInvoiceItem" yaml:"SupplierInvoiceItem"`
	CompanyCode                   null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	CostCenter                    null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	ControllingArea               null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	BusinessArea                  null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	ProfitCenter                  null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	FunctionalArea                null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	GLAccount                     null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	SalesOrder                    null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem                null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	CostObject                    null.String `boil:"CostObject" json:"CostObject,omitempty" toml:"CostObject" yaml:"CostObject,omitempty"`
	WBSElement                    null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	DocumentCurrency              null.String `boil:"DocumentCurrency" json:"DocumentCurrency,omitempty" toml:"DocumentCurrency" yaml:"DocumentCurrency,omitempty"`
	SuplrInvcAcctAssignmentAmount null.String `boil:"SuplrInvcAcctAssignmentAmount" json:"SuplrInvcAcctAssignmentAmount,omitempty" toml:"SuplrInvcAcctAssignmentAmount" yaml:"SuplrInvcAcctAssignmentAmount,omitempty"`
	TaxCode                       null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	WorkItem                      null.String `boil:"WorkItem" json:"WorkItem,omitempty" toml:"WorkItem" yaml:"WorkItem,omitempty"`
	MasterFixedAsset              null.String `boil:"MasterFixedAsset" json:"MasterFixedAsset,omitempty" toml:"MasterFixedAsset" yaml:"MasterFixedAsset,omitempty"`
	FixedAsset                    null.String `boil:"FixedAsset" json:"FixedAsset,omitempty" toml:"FixedAsset" yaml:"FixedAsset,omitempty"`
	DebitCreditCode               null.String `boil:"DebitCreditCode" json:"DebitCreditCode,omitempty" toml:"DebitCreditCode" yaml:"DebitCreditCode,omitempty"`
	InternalOrder                 null.String `boil:"InternalOrder" json:"InternalOrder,omitempty" toml:"InternalOrder" yaml:"InternalOrder,omitempty"`
	ProjectNetwork                null.String `boil:"ProjectNetwork" json:"ProjectNetwork,omitempty" toml:"ProjectNetwork" yaml:"ProjectNetwork,omitempty"`
	ProfitabilitySegment          null.String `boil:"ProfitabilitySegment" json:"ProfitabilitySegment,omitempty" toml:"ProfitabilitySegment" yaml:"ProfitabilitySegment,omitempty"`

	R *sapSupplierInvoiceAccountAssignmentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSupplierInvoiceAccountAssignmentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSupplierInvoiceAccountAssignmentDatumColumns = struct {
	SupplierInvoice               string
	FiscalYear                    string
	SupplierInvoiceItem           string
	CompanyCode                   string
	CostCenter                    string
	ControllingArea               string
	BusinessArea                  string
	ProfitCenter                  string
	FunctionalArea                string
	GLAccount                     string
	SalesOrder                    string
	SalesOrderItem                string
	CostObject                    string
	WBSElement                    string
	DocumentCurrency              string
	SuplrInvcAcctAssignmentAmount string
	TaxCode                       string
	WorkItem                      string
	MasterFixedAsset              string
	FixedAsset                    string
	DebitCreditCode               string
	InternalOrder                 string
	ProjectNetwork                string
	ProfitabilitySegment          string
}{
	SupplierInvoice:               "SupplierInvoice",
	FiscalYear:                    "FiscalYear",
	SupplierInvoiceItem:           "SupplierInvoiceItem",
	CompanyCode:                   "CompanyCode",
	CostCenter:                    "CostCenter",
	ControllingArea:               "ControllingArea",
	BusinessArea:                  "BusinessArea",
	ProfitCenter:                  "ProfitCenter",
	FunctionalArea:                "FunctionalArea",
	GLAccount:                     "GLAccount",
	SalesOrder:                    "SalesOrder",
	SalesOrderItem:                "SalesOrderItem",
	CostObject:                    "CostObject",
	WBSElement:                    "WBSElement",
	DocumentCurrency:              "DocumentCurrency",
	SuplrInvcAcctAssignmentAmount: "SuplrInvcAcctAssignmentAmount",
	TaxCode:                       "TaxCode",
	WorkItem:                      "WorkItem",
	MasterFixedAsset:              "MasterFixedAsset",
	FixedAsset:                    "FixedAsset",
	DebitCreditCode:               "DebitCreditCode",
	InternalOrder:                 "InternalOrder",
	ProjectNetwork:                "ProjectNetwork",
	ProfitabilitySegment:          "ProfitabilitySegment",
}

var SapSupplierInvoiceAccountAssignmentDatumTableColumns = struct {
	SupplierInvoice               string
	FiscalYear                    string
	SupplierInvoiceItem           string
	CompanyCode                   string
	CostCenter                    string
	ControllingArea               string
	BusinessArea                  string
	ProfitCenter                  string
	FunctionalArea                string
	GLAccount                     string
	SalesOrder                    string
	SalesOrderItem                string
	CostObject                    string
	WBSElement                    string
	DocumentCurrency              string
	SuplrInvcAcctAssignmentAmount string
	TaxCode                       string
	WorkItem                      string
	MasterFixedAsset              string
	FixedAsset                    string
	DebitCreditCode               string
	InternalOrder                 string
	ProjectNetwork                string
	ProfitabilitySegment          string
}{
	SupplierInvoice:               "sap_supplier_invoice_account_assignment_data.SupplierInvoice",
	FiscalYear:                    "sap_supplier_invoice_account_assignment_data.FiscalYear",
	SupplierInvoiceItem:           "sap_supplier_invoice_account_assignment_data.SupplierInvoiceItem",
	CompanyCode:                   "sap_supplier_invoice_account_assignment_data.CompanyCode",
	CostCenter:                    "sap_supplier_invoice_account_assignment_data.CostCenter",
	ControllingArea:               "sap_supplier_invoice_account_assignment_data.ControllingArea",
	BusinessArea:                  "sap_supplier_invoice_account_assignment_data.BusinessArea",
	ProfitCenter:                  "sap_supplier_invoice_account_assignment_data.ProfitCenter",
	FunctionalArea:                "sap_supplier_invoice_account_assignment_data.FunctionalArea",
	GLAccount:                     "sap_supplier_invoice_account_assignment_data.GLAccount",
	SalesOrder:                    "sap_supplier_invoice_account_assignment_data.SalesOrder",
	SalesOrderItem:                "sap_supplier_invoice_account_assignment_data.SalesOrderItem",
	CostObject:                    "sap_supplier_invoice_account_assignment_data.CostObject",
	WBSElement:                    "sap_supplier_invoice_account_assignment_data.WBSElement",
	DocumentCurrency:              "sap_supplier_invoice_account_assignment_data.DocumentCurrency",
	SuplrInvcAcctAssignmentAmount: "sap_supplier_invoice_account_assignment_data.SuplrInvcAcctAssignmentAmount",
	TaxCode:                       "sap_supplier_invoice_account_assignment_data.TaxCode",
	WorkItem:                      "sap_supplier_invoice_account_assignment_data.WorkItem",
	MasterFixedAsset:              "sap_supplier_invoice_account_assignment_data.MasterFixedAsset",
	FixedAsset:                    "sap_supplier_invoice_account_assignment_data.FixedAsset",
	DebitCreditCode:               "sap_supplier_invoice_account_assignment_data.DebitCreditCode",
	InternalOrder:                 "sap_supplier_invoice_account_assignment_data.InternalOrder",
	ProjectNetwork:                "sap_supplier_invoice_account_assignment_data.ProjectNetwork",
	ProfitabilitySegment:          "sap_supplier_invoice_account_assignment_data.ProfitabilitySegment",
}

// Generated where

var SapSupplierInvoiceAccountAssignmentDatumWhere = struct {
	SupplierInvoice               whereHelperstring
	FiscalYear                    whereHelperstring
	SupplierInvoiceItem           whereHelperstring
	CompanyCode                   whereHelpernull_String
	CostCenter                    whereHelpernull_String
	ControllingArea               whereHelpernull_String
	BusinessArea                  whereHelpernull_String
	ProfitCenter                  whereHelpernull_String
	FunctionalArea                whereHelpernull_String
	GLAccount                     whereHelpernull_String
	SalesOrder                    whereHelpernull_String
	SalesOrderItem                whereHelpernull_String
	CostObject                    whereHelpernull_String
	WBSElement                    whereHelpernull_String
	DocumentCurrency              whereHelpernull_String
	SuplrInvcAcctAssignmentAmount whereHelpernull_String
	TaxCode                       whereHelpernull_String
	WorkItem                      whereHelpernull_String
	MasterFixedAsset              whereHelpernull_String
	FixedAsset                    whereHelpernull_String
	DebitCreditCode               whereHelpernull_String
	InternalOrder                 whereHelpernull_String
	ProjectNetwork                whereHelpernull_String
	ProfitabilitySegment          whereHelpernull_String
}{
	SupplierInvoice:               whereHelperstring{field: "`sap_supplier_invoice_account_assignment_data`.`SupplierInvoice`"},
	FiscalYear:                    whereHelperstring{field: "`sap_supplier_invoice_account_assignment_data`.`FiscalYear`"},
	SupplierInvoiceItem:           whereHelperstring{field: "`sap_supplier_invoice_account_assignment_data`.`SupplierInvoiceItem`"},
	CompanyCode:                   whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`CompanyCode`"},
	CostCenter:                    whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`CostCenter`"},
	ControllingArea:               whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`ControllingArea`"},
	BusinessArea:                  whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`BusinessArea`"},
	ProfitCenter:                  whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`ProfitCenter`"},
	FunctionalArea:                whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`FunctionalArea`"},
	GLAccount:                     whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`GLAccount`"},
	SalesOrder:                    whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`SalesOrder`"},
	SalesOrderItem:                whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`SalesOrderItem`"},
	CostObject:                    whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`CostObject`"},
	WBSElement:                    whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`WBSElement`"},
	DocumentCurrency:              whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`DocumentCurrency`"},
	SuplrInvcAcctAssignmentAmount: whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`SuplrInvcAcctAssignmentAmount`"},
	TaxCode:                       whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`TaxCode`"},
	WorkItem:                      whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`WorkItem`"},
	MasterFixedAsset:              whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`MasterFixedAsset`"},
	FixedAsset:                    whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`FixedAsset`"},
	DebitCreditCode:               whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`DebitCreditCode`"},
	InternalOrder:                 whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`InternalOrder`"},
	ProjectNetwork:                whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`ProjectNetwork`"},
	ProfitabilitySegment:          whereHelpernull_String{field: "`sap_supplier_invoice_account_assignment_data`.`ProfitabilitySegment`"},
}

// SapSupplierInvoiceAccountAssignmentDatumRels is where relationship names are stored.
var SapSupplierInvoiceAccountAssignmentDatumRels = struct {
}{}

// sapSupplierInvoiceAccountAssignmentDatumR is where relationships are stored.
type sapSupplierInvoiceAccountAssignmentDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapSupplierInvoiceAccountAssignmentDatumR) NewStruct() *sapSupplierInvoiceAccountAssignmentDatumR {
	return &sapSupplierInvoiceAccountAssignmentDatumR{}
}

// sapSupplierInvoiceAccountAssignmentDatumL is where Load methods for each relationship are stored.
type sapSupplierInvoiceAccountAssignmentDatumL struct{}

var (
	sapSupplierInvoiceAccountAssignmentDatumAllColumns            = []string{"SupplierInvoice", "FiscalYear", "SupplierInvoiceItem", "CompanyCode", "CostCenter", "ControllingArea", "BusinessArea", "ProfitCenter", "FunctionalArea", "GLAccount", "SalesOrder", "SalesOrderItem", "CostObject", "WBSElement", "DocumentCurrency", "SuplrInvcAcctAssignmentAmount", "TaxCode", "WorkItem", "MasterFixedAsset", "FixedAsset", "DebitCreditCode", "InternalOrder", "ProjectNetwork", "ProfitabilitySegment"}
	sapSupplierInvoiceAccountAssignmentDatumColumnsWithoutDefault = []string{"SupplierInvoice", "FiscalYear", "SupplierInvoiceItem", "CompanyCode", "CostCenter", "ControllingArea", "BusinessArea", "ProfitCenter", "FunctionalArea", "GLAccount", "SalesOrder", "SalesOrderItem", "CostObject", "WBSElement", "DocumentCurrency", "SuplrInvcAcctAssignmentAmount", "TaxCode", "WorkItem", "MasterFixedAsset", "FixedAsset", "DebitCreditCode", "InternalOrder", "ProjectNetwork", "ProfitabilitySegment"}
	sapSupplierInvoiceAccountAssignmentDatumColumnsWithDefault    = []string{}
	sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns     = []string{"SupplierInvoice", "FiscalYear", "SupplierInvoiceItem"}
	sapSupplierInvoiceAccountAssignmentDatumGeneratedColumns      = []string{}
)

type (
	// SapSupplierInvoiceAccountAssignmentDatumSlice is an alias for a slice of pointers to SapSupplierInvoiceAccountAssignmentDatum.
	// This should almost always be used instead of []SapSupplierInvoiceAccountAssignmentDatum.
	SapSupplierInvoiceAccountAssignmentDatumSlice []*SapSupplierInvoiceAccountAssignmentDatum
	// SapSupplierInvoiceAccountAssignmentDatumHook is the signature for custom SapSupplierInvoiceAccountAssignmentDatum hook methods
	SapSupplierInvoiceAccountAssignmentDatumHook func(context.Context, boil.ContextExecutor, *SapSupplierInvoiceAccountAssignmentDatum) error

	sapSupplierInvoiceAccountAssignmentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSupplierInvoiceAccountAssignmentDatumType                 = reflect.TypeOf(&SapSupplierInvoiceAccountAssignmentDatum{})
	sapSupplierInvoiceAccountAssignmentDatumMapping              = queries.MakeStructMapping(sapSupplierInvoiceAccountAssignmentDatumType)
	sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns)
	sapSupplierInvoiceAccountAssignmentDatumInsertCacheMut       sync.RWMutex
	sapSupplierInvoiceAccountAssignmentDatumInsertCache          = make(map[string]insertCache)
	sapSupplierInvoiceAccountAssignmentDatumUpdateCacheMut       sync.RWMutex
	sapSupplierInvoiceAccountAssignmentDatumUpdateCache          = make(map[string]updateCache)
	sapSupplierInvoiceAccountAssignmentDatumUpsertCacheMut       sync.RWMutex
	sapSupplierInvoiceAccountAssignmentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSupplierInvoiceAccountAssignmentDatumAfterSelectHooks []SapSupplierInvoiceAccountAssignmentDatumHook

var sapSupplierInvoiceAccountAssignmentDatumBeforeInsertHooks []SapSupplierInvoiceAccountAssignmentDatumHook
var sapSupplierInvoiceAccountAssignmentDatumAfterInsertHooks []SapSupplierInvoiceAccountAssignmentDatumHook

var sapSupplierInvoiceAccountAssignmentDatumBeforeUpdateHooks []SapSupplierInvoiceAccountAssignmentDatumHook
var sapSupplierInvoiceAccountAssignmentDatumAfterUpdateHooks []SapSupplierInvoiceAccountAssignmentDatumHook

var sapSupplierInvoiceAccountAssignmentDatumBeforeDeleteHooks []SapSupplierInvoiceAccountAssignmentDatumHook
var sapSupplierInvoiceAccountAssignmentDatumAfterDeleteHooks []SapSupplierInvoiceAccountAssignmentDatumHook

var sapSupplierInvoiceAccountAssignmentDatumBeforeUpsertHooks []SapSupplierInvoiceAccountAssignmentDatumHook
var sapSupplierInvoiceAccountAssignmentDatumAfterUpsertHooks []SapSupplierInvoiceAccountAssignmentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSupplierInvoiceAccountAssignmentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSupplierInvoiceAccountAssignmentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSupplierInvoiceAccountAssignmentDatumHook registers your hook function for all future operations.
func AddSapSupplierInvoiceAccountAssignmentDatumHook(hookPoint boil.HookPoint, sapSupplierInvoiceAccountAssignmentDatumHook SapSupplierInvoiceAccountAssignmentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSupplierInvoiceAccountAssignmentDatumAfterSelectHooks = append(sapSupplierInvoiceAccountAssignmentDatumAfterSelectHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.BeforeInsertHook:
		sapSupplierInvoiceAccountAssignmentDatumBeforeInsertHooks = append(sapSupplierInvoiceAccountAssignmentDatumBeforeInsertHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.AfterInsertHook:
		sapSupplierInvoiceAccountAssignmentDatumAfterInsertHooks = append(sapSupplierInvoiceAccountAssignmentDatumAfterInsertHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.BeforeUpdateHook:
		sapSupplierInvoiceAccountAssignmentDatumBeforeUpdateHooks = append(sapSupplierInvoiceAccountAssignmentDatumBeforeUpdateHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.AfterUpdateHook:
		sapSupplierInvoiceAccountAssignmentDatumAfterUpdateHooks = append(sapSupplierInvoiceAccountAssignmentDatumAfterUpdateHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.BeforeDeleteHook:
		sapSupplierInvoiceAccountAssignmentDatumBeforeDeleteHooks = append(sapSupplierInvoiceAccountAssignmentDatumBeforeDeleteHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.AfterDeleteHook:
		sapSupplierInvoiceAccountAssignmentDatumAfterDeleteHooks = append(sapSupplierInvoiceAccountAssignmentDatumAfterDeleteHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.BeforeUpsertHook:
		sapSupplierInvoiceAccountAssignmentDatumBeforeUpsertHooks = append(sapSupplierInvoiceAccountAssignmentDatumBeforeUpsertHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	case boil.AfterUpsertHook:
		sapSupplierInvoiceAccountAssignmentDatumAfterUpsertHooks = append(sapSupplierInvoiceAccountAssignmentDatumAfterUpsertHooks, sapSupplierInvoiceAccountAssignmentDatumHook)
	}
}

// One returns a single sapSupplierInvoiceAccountAssignmentDatum record from the query.
func (q sapSupplierInvoiceAccountAssignmentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSupplierInvoiceAccountAssignmentDatum, error) {
	o := &SapSupplierInvoiceAccountAssignmentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_supplier_invoice_account_assignment_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSupplierInvoiceAccountAssignmentDatum records from the query.
func (q sapSupplierInvoiceAccountAssignmentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSupplierInvoiceAccountAssignmentDatumSlice, error) {
	var o []*SapSupplierInvoiceAccountAssignmentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSupplierInvoiceAccountAssignmentDatum slice")
	}

	if len(sapSupplierInvoiceAccountAssignmentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSupplierInvoiceAccountAssignmentDatum records in the query.
func (q sapSupplierInvoiceAccountAssignmentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_supplier_invoice_account_assignment_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSupplierInvoiceAccountAssignmentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_supplier_invoice_account_assignment_data exists")
	}

	return count > 0, nil
}

// SapSupplierInvoiceAccountAssignmentData retrieves all the records using an executor.
func SapSupplierInvoiceAccountAssignmentData(mods ...qm.QueryMod) sapSupplierInvoiceAccountAssignmentDatumQuery {
	mods = append(mods, qm.From("`sap_supplier_invoice_account_assignment_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_supplier_invoice_account_assignment_data`.*"})
	}

	return sapSupplierInvoiceAccountAssignmentDatumQuery{q}
}

// FindSapSupplierInvoiceAccountAssignmentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSupplierInvoiceAccountAssignmentDatum(ctx context.Context, exec boil.ContextExecutor, supplierInvoice string, fiscalYear string, supplierInvoiceItem string, selectCols ...string) (*SapSupplierInvoiceAccountAssignmentDatum, error) {
	sapSupplierInvoiceAccountAssignmentDatumObj := &SapSupplierInvoiceAccountAssignmentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_supplier_invoice_account_assignment_data` where `SupplierInvoice`=? AND `FiscalYear`=? AND `SupplierInvoiceItem`=?", sel,
	)

	q := queries.Raw(query, supplierInvoice, fiscalYear, supplierInvoiceItem)

	err := q.Bind(ctx, exec, sapSupplierInvoiceAccountAssignmentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_supplier_invoice_account_assignment_data")
	}

	if err = sapSupplierInvoiceAccountAssignmentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSupplierInvoiceAccountAssignmentDatumObj, err
	}

	return sapSupplierInvoiceAccountAssignmentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSupplierInvoiceAccountAssignmentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_supplier_invoice_account_assignment_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSupplierInvoiceAccountAssignmentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSupplierInvoiceAccountAssignmentDatumInsertCacheMut.RLock()
	cache, cached := sapSupplierInvoiceAccountAssignmentDatumInsertCache[key]
	sapSupplierInvoiceAccountAssignmentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSupplierInvoiceAccountAssignmentDatumAllColumns,
			sapSupplierInvoiceAccountAssignmentDatumColumnsWithDefault,
			sapSupplierInvoiceAccountAssignmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_supplier_invoice_account_assignment_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_supplier_invoice_account_assignment_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_supplier_invoice_account_assignment_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_supplier_invoice_account_assignment_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplierInvoice,
		o.FiscalYear,
		o.SupplierInvoiceItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_supplier_invoice_account_assignment_data")
	}

CacheNoHooks:
	if !cached {
		sapSupplierInvoiceAccountAssignmentDatumInsertCacheMut.Lock()
		sapSupplierInvoiceAccountAssignmentDatumInsertCache[key] = cache
		sapSupplierInvoiceAccountAssignmentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSupplierInvoiceAccountAssignmentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSupplierInvoiceAccountAssignmentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSupplierInvoiceAccountAssignmentDatumUpdateCacheMut.RLock()
	cache, cached := sapSupplierInvoiceAccountAssignmentDatumUpdateCache[key]
	sapSupplierInvoiceAccountAssignmentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSupplierInvoiceAccountAssignmentDatumAllColumns,
			sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_supplier_invoice_account_assignment_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_supplier_invoice_account_assignment_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, append(wl, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_supplier_invoice_account_assignment_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_supplier_invoice_account_assignment_data")
	}

	if !cached {
		sapSupplierInvoiceAccountAssignmentDatumUpdateCacheMut.Lock()
		sapSupplierInvoiceAccountAssignmentDatumUpdateCache[key] = cache
		sapSupplierInvoiceAccountAssignmentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSupplierInvoiceAccountAssignmentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_supplier_invoice_account_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_supplier_invoice_account_assignment_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSupplierInvoiceAccountAssignmentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_supplier_invoice_account_assignment_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSupplierInvoiceAccountAssignmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSupplierInvoiceAccountAssignmentDatum")
	}
	return rowsAff, nil
}

var mySQLSapSupplierInvoiceAccountAssignmentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSupplierInvoiceAccountAssignmentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_supplier_invoice_account_assignment_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSupplierInvoiceAccountAssignmentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSupplierInvoiceAccountAssignmentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSupplierInvoiceAccountAssignmentDatumUpsertCacheMut.RLock()
	cache, cached := sapSupplierInvoiceAccountAssignmentDatumUpsertCache[key]
	sapSupplierInvoiceAccountAssignmentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSupplierInvoiceAccountAssignmentDatumAllColumns,
			sapSupplierInvoiceAccountAssignmentDatumColumnsWithDefault,
			sapSupplierInvoiceAccountAssignmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSupplierInvoiceAccountAssignmentDatumAllColumns,
			sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_supplier_invoice_account_assignment_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_supplier_invoice_account_assignment_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_supplier_invoice_account_assignment_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_supplier_invoice_account_assignment_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSupplierInvoiceAccountAssignmentDatumType, sapSupplierInvoiceAccountAssignmentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_supplier_invoice_account_assignment_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_supplier_invoice_account_assignment_data")
	}

CacheNoHooks:
	if !cached {
		sapSupplierInvoiceAccountAssignmentDatumUpsertCacheMut.Lock()
		sapSupplierInvoiceAccountAssignmentDatumUpsertCache[key] = cache
		sapSupplierInvoiceAccountAssignmentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSupplierInvoiceAccountAssignmentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSupplierInvoiceAccountAssignmentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSupplierInvoiceAccountAssignmentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_supplier_invoice_account_assignment_data` WHERE `SupplierInvoice`=? AND `FiscalYear`=? AND `SupplierInvoiceItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_supplier_invoice_account_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_supplier_invoice_account_assignment_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSupplierInvoiceAccountAssignmentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSupplierInvoiceAccountAssignmentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_supplier_invoice_account_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_supplier_invoice_account_assignment_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSupplierInvoiceAccountAssignmentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSupplierInvoiceAccountAssignmentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_supplier_invoice_account_assignment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSupplierInvoiceAccountAssignmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_supplier_invoice_account_assignment_data")
	}

	if len(sapSupplierInvoiceAccountAssignmentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSupplierInvoiceAccountAssignmentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSupplierInvoiceAccountAssignmentDatum(ctx, exec, o.SupplierInvoice, o.FiscalYear, o.SupplierInvoiceItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSupplierInvoiceAccountAssignmentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSupplierInvoiceAccountAssignmentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_supplier_invoice_account_assignment_data`.* FROM `sap_supplier_invoice_account_assignment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSupplierInvoiceAccountAssignmentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSupplierInvoiceAccountAssignmentDatumSlice")
	}

	*o = slice

	return nil
}

// SapSupplierInvoiceAccountAssignmentDatumExists checks if the SapSupplierInvoiceAccountAssignmentDatum row exists.
func SapSupplierInvoiceAccountAssignmentDatumExists(ctx context.Context, exec boil.ContextExecutor, supplierInvoice string, fiscalYear string, supplierInvoiceItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_supplier_invoice_account_assignment_data` where `SupplierInvoice`=? AND `FiscalYear`=? AND `SupplierInvoiceItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplierInvoice, fiscalYear, supplierInvoiceItem)
	}
	row := exec.QueryRowContext(ctx, sql, supplierInvoice, fiscalYear, supplierInvoiceItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_supplier_invoice_account_assignment_data exists")
	}

	return exists, nil
}
