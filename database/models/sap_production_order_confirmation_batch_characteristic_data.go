// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionOrderConfirmationBatchCharacteristicDatum is an object representing the database table.
type SapProductionOrderConfirmationBatchCharacteristicDatum struct {
	ConfirmationGroup    string      `boil:"ConfirmationGroup" json:"ConfirmationGroup" toml:"ConfirmationGroup" yaml:"ConfirmationGroup"`
	ConfirmationCount    string      `boil:"ConfirmationCount" json:"ConfirmationCount" toml:"ConfirmationCount" yaml:"ConfirmationCount"`
	MaterialDocument     string      `boil:"MaterialDocument" json:"MaterialDocument" toml:"MaterialDocument" yaml:"MaterialDocument"`
	MaterialDocumentItem string      `boil:"MaterialDocumentItem" json:"MaterialDocumentItem" toml:"MaterialDocumentItem" yaml:"MaterialDocumentItem"`
	MaterialDocumentYear string      `boil:"MaterialDocumentYear" json:"MaterialDocumentYear" toml:"MaterialDocumentYear" yaml:"MaterialDocumentYear"`
	Batch                null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	CharcInternalID      null.String `boil:"CharcInternalID" json:"CharcInternalID,omitempty" toml:"CharcInternalID" yaml:"CharcInternalID,omitempty"`
	Characteristic       null.String `boil:"Characteristic" json:"Characteristic,omitempty" toml:"Characteristic" yaml:"Characteristic,omitempty"`
	CharcValue           null.String `boil:"CharcValue" json:"CharcValue,omitempty" toml:"CharcValue" yaml:"CharcValue,omitempty"`

	R *sapProductionOrderConfirmationBatchCharacteristicDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionOrderConfirmationBatchCharacteristicDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionOrderConfirmationBatchCharacteristicDatumColumns = struct {
	ConfirmationGroup    string
	ConfirmationCount    string
	MaterialDocument     string
	MaterialDocumentItem string
	MaterialDocumentYear string
	Batch                string
	CharcInternalID      string
	Characteristic       string
	CharcValue           string
}{
	ConfirmationGroup:    "ConfirmationGroup",
	ConfirmationCount:    "ConfirmationCount",
	MaterialDocument:     "MaterialDocument",
	MaterialDocumentItem: "MaterialDocumentItem",
	MaterialDocumentYear: "MaterialDocumentYear",
	Batch:                "Batch",
	CharcInternalID:      "CharcInternalID",
	Characteristic:       "Characteristic",
	CharcValue:           "CharcValue",
}

var SapProductionOrderConfirmationBatchCharacteristicDatumTableColumns = struct {
	ConfirmationGroup    string
	ConfirmationCount    string
	MaterialDocument     string
	MaterialDocumentItem string
	MaterialDocumentYear string
	Batch                string
	CharcInternalID      string
	Characteristic       string
	CharcValue           string
}{
	ConfirmationGroup:    "sap_production_order_confirmation_batch_characteristic_data.ConfirmationGroup",
	ConfirmationCount:    "sap_production_order_confirmation_batch_characteristic_data.ConfirmationCount",
	MaterialDocument:     "sap_production_order_confirmation_batch_characteristic_data.MaterialDocument",
	MaterialDocumentItem: "sap_production_order_confirmation_batch_characteristic_data.MaterialDocumentItem",
	MaterialDocumentYear: "sap_production_order_confirmation_batch_characteristic_data.MaterialDocumentYear",
	Batch:                "sap_production_order_confirmation_batch_characteristic_data.Batch",
	CharcInternalID:      "sap_production_order_confirmation_batch_characteristic_data.CharcInternalID",
	Characteristic:       "sap_production_order_confirmation_batch_characteristic_data.Characteristic",
	CharcValue:           "sap_production_order_confirmation_batch_characteristic_data.CharcValue",
}

// Generated where

var SapProductionOrderConfirmationBatchCharacteristicDatumWhere = struct {
	ConfirmationGroup    whereHelperstring
	ConfirmationCount    whereHelperstring
	MaterialDocument     whereHelperstring
	MaterialDocumentItem whereHelperstring
	MaterialDocumentYear whereHelperstring
	Batch                whereHelpernull_String
	CharcInternalID      whereHelpernull_String
	Characteristic       whereHelpernull_String
	CharcValue           whereHelpernull_String
}{
	ConfirmationGroup:    whereHelperstring{field: "`sap_production_order_confirmation_batch_characteristic_data`.`ConfirmationGroup`"},
	ConfirmationCount:    whereHelperstring{field: "`sap_production_order_confirmation_batch_characteristic_data`.`ConfirmationCount`"},
	MaterialDocument:     whereHelperstring{field: "`sap_production_order_confirmation_batch_characteristic_data`.`MaterialDocument`"},
	MaterialDocumentItem: whereHelperstring{field: "`sap_production_order_confirmation_batch_characteristic_data`.`MaterialDocumentItem`"},
	MaterialDocumentYear: whereHelperstring{field: "`sap_production_order_confirmation_batch_characteristic_data`.`MaterialDocumentYear`"},
	Batch:                whereHelpernull_String{field: "`sap_production_order_confirmation_batch_characteristic_data`.`Batch`"},
	CharcInternalID:      whereHelpernull_String{field: "`sap_production_order_confirmation_batch_characteristic_data`.`CharcInternalID`"},
	Characteristic:       whereHelpernull_String{field: "`sap_production_order_confirmation_batch_characteristic_data`.`Characteristic`"},
	CharcValue:           whereHelpernull_String{field: "`sap_production_order_confirmation_batch_characteristic_data`.`CharcValue`"},
}

// SapProductionOrderConfirmationBatchCharacteristicDatumRels is where relationship names are stored.
var SapProductionOrderConfirmationBatchCharacteristicDatumRels = struct {
}{}

// sapProductionOrderConfirmationBatchCharacteristicDatumR is where relationships are stored.
type sapProductionOrderConfirmationBatchCharacteristicDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapProductionOrderConfirmationBatchCharacteristicDatumR) NewStruct() *sapProductionOrderConfirmationBatchCharacteristicDatumR {
	return &sapProductionOrderConfirmationBatchCharacteristicDatumR{}
}

// sapProductionOrderConfirmationBatchCharacteristicDatumL is where Load methods for each relationship are stored.
type sapProductionOrderConfirmationBatchCharacteristicDatumL struct{}

var (
	sapProductionOrderConfirmationBatchCharacteristicDatumAllColumns            = []string{"ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear", "Batch", "CharcInternalID", "Characteristic", "CharcValue"}
	sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithoutDefault = []string{"ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear", "Batch", "CharcInternalID", "Characteristic", "CharcValue"}
	sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithDefault    = []string{}
	sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns     = []string{"ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear"}
)

type (
	// SapProductionOrderConfirmationBatchCharacteristicDatumSlice is an alias for a slice of pointers to SapProductionOrderConfirmationBatchCharacteristicDatum.
	// This should almost always be used instead of []SapProductionOrderConfirmationBatchCharacteristicDatum.
	SapProductionOrderConfirmationBatchCharacteristicDatumSlice []*SapProductionOrderConfirmationBatchCharacteristicDatum
	// SapProductionOrderConfirmationBatchCharacteristicDatumHook is the signature for custom SapProductionOrderConfirmationBatchCharacteristicDatum hook methods
	SapProductionOrderConfirmationBatchCharacteristicDatumHook func(context.Context, boil.ContextExecutor, *SapProductionOrderConfirmationBatchCharacteristicDatum) error

	sapProductionOrderConfirmationBatchCharacteristicDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionOrderConfirmationBatchCharacteristicDatumType                 = reflect.TypeOf(&SapProductionOrderConfirmationBatchCharacteristicDatum{})
	sapProductionOrderConfirmationBatchCharacteristicDatumMapping              = queries.MakeStructMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType)
	sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns)
	sapProductionOrderConfirmationBatchCharacteristicDatumInsertCacheMut       sync.RWMutex
	sapProductionOrderConfirmationBatchCharacteristicDatumInsertCache          = make(map[string]insertCache)
	sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCacheMut       sync.RWMutex
	sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCache          = make(map[string]updateCache)
	sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCacheMut       sync.RWMutex
	sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook

var sapProductionOrderConfirmationBatchCharacteristicDatumAfterInsertHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumAfterSelectHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook
var sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks []SapProductionOrderConfirmationBatchCharacteristicDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionOrderConfirmationBatchCharacteristicDatumHook registers your hook function for all future operations.
func AddSapProductionOrderConfirmationBatchCharacteristicDatumHook(hookPoint boil.HookPoint, sapProductionOrderConfirmationBatchCharacteristicDatumHook SapProductionOrderConfirmationBatchCharacteristicDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterInsertHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumAfterInsertHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumAfterInsertHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterSelectHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumAfterSelectHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumAfterSelectHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterUpdateHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterDeleteHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterUpsertHook:
		sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks = append(sapProductionOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks, sapProductionOrderConfirmationBatchCharacteristicDatumHook)
	}
}

// One returns a single sapProductionOrderConfirmationBatchCharacteristicDatum record from the query.
func (q sapProductionOrderConfirmationBatchCharacteristicDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionOrderConfirmationBatchCharacteristicDatum, error) {
	o := &SapProductionOrderConfirmationBatchCharacteristicDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_order_confirmation_batch_characteristic_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionOrderConfirmationBatchCharacteristicDatum records from the query.
func (q sapProductionOrderConfirmationBatchCharacteristicDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionOrderConfirmationBatchCharacteristicDatumSlice, error) {
	var o []*SapProductionOrderConfirmationBatchCharacteristicDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionOrderConfirmationBatchCharacteristicDatum slice")
	}

	if len(sapProductionOrderConfirmationBatchCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionOrderConfirmationBatchCharacteristicDatum records in the query.
func (q sapProductionOrderConfirmationBatchCharacteristicDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_order_confirmation_batch_characteristic_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionOrderConfirmationBatchCharacteristicDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_order_confirmation_batch_characteristic_data exists")
	}

	return count > 0, nil
}

// SapProductionOrderConfirmationBatchCharacteristicData retrieves all the records using an executor.
func SapProductionOrderConfirmationBatchCharacteristicData(mods ...qm.QueryMod) sapProductionOrderConfirmationBatchCharacteristicDatumQuery {
	mods = append(mods, qm.From("`sap_production_order_confirmation_batch_characteristic_data`"))
	return sapProductionOrderConfirmationBatchCharacteristicDatumQuery{NewQuery(mods...)}
}

// FindSapProductionOrderConfirmationBatchCharacteristicDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionOrderConfirmationBatchCharacteristicDatum(ctx context.Context, exec boil.ContextExecutor, confirmationGroup string, confirmationCount string, materialDocument string, materialDocumentItem string, materialDocumentYear string, selectCols ...string) (*SapProductionOrderConfirmationBatchCharacteristicDatum, error) {
	sapProductionOrderConfirmationBatchCharacteristicDatumObj := &SapProductionOrderConfirmationBatchCharacteristicDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_order_confirmation_batch_characteristic_data` where `ConfirmationGroup`=? AND `ConfirmationCount`=? AND `MaterialDocument`=? AND `MaterialDocumentItem`=? AND `MaterialDocumentYear`=?", sel,
	)

	q := queries.Raw(query, confirmationGroup, confirmationCount, materialDocument, materialDocumentItem, materialDocumentYear)

	err := q.Bind(ctx, exec, sapProductionOrderConfirmationBatchCharacteristicDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_order_confirmation_batch_characteristic_data")
	}

	if err = sapProductionOrderConfirmationBatchCharacteristicDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionOrderConfirmationBatchCharacteristicDatumObj, err
	}

	return sapProductionOrderConfirmationBatchCharacteristicDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_confirmation_batch_characteristic_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionOrderConfirmationBatchCharacteristicDatumInsertCacheMut.RLock()
	cache, cached := sapProductionOrderConfirmationBatchCharacteristicDatumInsertCache[key]
	sapProductionOrderConfirmationBatchCharacteristicDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithDefault,
			sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_order_confirmation_batch_characteristic_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_order_confirmation_batch_characteristic_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_order_confirmation_batch_characteristic_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_order_confirmation_batch_characteristic_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ConfirmationGroup,
		o.ConfirmationCount,
		o.MaterialDocument,
		o.MaterialDocumentItem,
		o.MaterialDocumentYear,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_confirmation_batch_characteristic_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderConfirmationBatchCharacteristicDatumInsertCacheMut.Lock()
		sapProductionOrderConfirmationBatchCharacteristicDatumInsertCache[key] = cache
		sapProductionOrderConfirmationBatchCharacteristicDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionOrderConfirmationBatchCharacteristicDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCache[key]
	sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_order_confirmation_batch_characteristic_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_order_confirmation_batch_characteristic_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, append(wl, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_order_confirmation_batch_characteristic_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_order_confirmation_batch_characteristic_data")
	}

	if !cached {
		sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.Lock()
		sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCache[key] = cache
		sapProductionOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionOrderConfirmationBatchCharacteristicDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_order_confirmation_batch_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_order_confirmation_batch_characteristic_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionOrderConfirmationBatchCharacteristicDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_order_confirmation_batch_characteristic_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionOrderConfirmationBatchCharacteristicDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionOrderConfirmationBatchCharacteristicDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionOrderConfirmationBatchCharacteristicDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_order_confirmation_batch_characteristic_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionOrderConfirmationBatchCharacteristicDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCache[key]
	sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithDefault,
			sapProductionOrderConfirmationBatchCharacteristicDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapProductionOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_order_confirmation_batch_characteristic_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_order_confirmation_batch_characteristic_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_order_confirmation_batch_characteristic_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_order_confirmation_batch_characteristic_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionOrderConfirmationBatchCharacteristicDatumType, sapProductionOrderConfirmationBatchCharacteristicDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_order_confirmation_batch_characteristic_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_order_confirmation_batch_characteristic_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.Lock()
		sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCache[key] = cache
		sapProductionOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionOrderConfirmationBatchCharacteristicDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionOrderConfirmationBatchCharacteristicDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_order_confirmation_batch_characteristic_data` WHERE `ConfirmationGroup`=? AND `ConfirmationCount`=? AND `MaterialDocument`=? AND `MaterialDocumentItem`=? AND `MaterialDocumentYear`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_order_confirmation_batch_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_order_confirmation_batch_characteristic_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionOrderConfirmationBatchCharacteristicDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionOrderConfirmationBatchCharacteristicDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_order_confirmation_batch_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_confirmation_batch_characteristic_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionOrderConfirmationBatchCharacteristicDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_order_confirmation_batch_characteristic_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionOrderConfirmationBatchCharacteristicDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_order_confirmation_batch_characteristic_data")
	}

	if len(sapProductionOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionOrderConfirmationBatchCharacteristicDatum(ctx, exec, o.ConfirmationGroup, o.ConfirmationCount, o.MaterialDocument, o.MaterialDocumentItem, o.MaterialDocumentYear)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionOrderConfirmationBatchCharacteristicDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionOrderConfirmationBatchCharacteristicDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_order_confirmation_batch_characteristic_data`.* FROM `sap_production_order_confirmation_batch_characteristic_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionOrderConfirmationBatchCharacteristicDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionOrderConfirmationBatchCharacteristicDatumExists checks if the SapProductionOrderConfirmationBatchCharacteristicDatum row exists.
func SapProductionOrderConfirmationBatchCharacteristicDatumExists(ctx context.Context, exec boil.ContextExecutor, confirmationGroup string, confirmationCount string, materialDocument string, materialDocumentItem string, materialDocumentYear string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_order_confirmation_batch_characteristic_data` where `ConfirmationGroup`=? AND `ConfirmationCount`=? AND `MaterialDocument`=? AND `MaterialDocumentItem`=? AND `MaterialDocumentYear`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, confirmationGroup, confirmationCount, materialDocument, materialDocumentItem, materialDocumentYear)
	}
	row := exec.QueryRowContext(ctx, sql, confirmationGroup, confirmationCount, materialDocument, materialDocumentItem, materialDocumentYear)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_order_confirmation_batch_characteristic_data exists")
	}

	return exists, nil
}
