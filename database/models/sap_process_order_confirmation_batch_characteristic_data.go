// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProcessOrderConfirmationBatchCharacteristicDatum is an object representing the database table.
type SapProcessOrderConfirmationBatchCharacteristicDatum struct {
	Batch                string      `boil:"Batch" json:"Batch" toml:"Batch" yaml:"Batch"`
	OrderID              null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	ConfirmationGroup    null.String `boil:"ConfirmationGroup" json:"ConfirmationGroup,omitempty" toml:"ConfirmationGroup" yaml:"ConfirmationGroup,omitempty"`
	ConfirmationCount    null.String `boil:"ConfirmationCount" json:"ConfirmationCount,omitempty" toml:"ConfirmationCount" yaml:"ConfirmationCount,omitempty"`
	MaterialDocument     null.String `boil:"MaterialDocument" json:"MaterialDocument,omitempty" toml:"MaterialDocument" yaml:"MaterialDocument,omitempty"`
	MaterialDocumentItem null.String `boil:"MaterialDocumentItem" json:"MaterialDocumentItem,omitempty" toml:"MaterialDocumentItem" yaml:"MaterialDocumentItem,omitempty"`
	MaterialDocumentYear null.String `boil:"MaterialDocumentYear" json:"MaterialDocumentYear,omitempty" toml:"MaterialDocumentYear" yaml:"MaterialDocumentYear,omitempty"`
	Plant                null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	Material             null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	CharcInternalID      null.String `boil:"CharcInternalID" json:"CharcInternalID,omitempty" toml:"CharcInternalID" yaml:"CharcInternalID,omitempty"`
	Characteristic       null.String `boil:"Characteristic" json:"Characteristic,omitempty" toml:"Characteristic" yaml:"Characteristic,omitempty"`
	CharcValue           null.String `boil:"CharcValue" json:"CharcValue,omitempty" toml:"CharcValue" yaml:"CharcValue,omitempty"`

	R *sapProcessOrderConfirmationBatchCharacteristicDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProcessOrderConfirmationBatchCharacteristicDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProcessOrderConfirmationBatchCharacteristicDatumColumns = struct {
	Batch                string
	OrderID              string
	ConfirmationGroup    string
	ConfirmationCount    string
	MaterialDocument     string
	MaterialDocumentItem string
	MaterialDocumentYear string
	Plant                string
	Material             string
	CharcInternalID      string
	Characteristic       string
	CharcValue           string
}{
	Batch:                "Batch",
	OrderID:              "OrderID",
	ConfirmationGroup:    "ConfirmationGroup",
	ConfirmationCount:    "ConfirmationCount",
	MaterialDocument:     "MaterialDocument",
	MaterialDocumentItem: "MaterialDocumentItem",
	MaterialDocumentYear: "MaterialDocumentYear",
	Plant:                "Plant",
	Material:             "Material",
	CharcInternalID:      "CharcInternalID",
	Characteristic:       "Characteristic",
	CharcValue:           "CharcValue",
}

var SapProcessOrderConfirmationBatchCharacteristicDatumTableColumns = struct {
	Batch                string
	OrderID              string
	ConfirmationGroup    string
	ConfirmationCount    string
	MaterialDocument     string
	MaterialDocumentItem string
	MaterialDocumentYear string
	Plant                string
	Material             string
	CharcInternalID      string
	Characteristic       string
	CharcValue           string
}{
	Batch:                "sap_process_order_confirmation_batch_characteristic_data.Batch",
	OrderID:              "sap_process_order_confirmation_batch_characteristic_data.OrderID",
	ConfirmationGroup:    "sap_process_order_confirmation_batch_characteristic_data.ConfirmationGroup",
	ConfirmationCount:    "sap_process_order_confirmation_batch_characteristic_data.ConfirmationCount",
	MaterialDocument:     "sap_process_order_confirmation_batch_characteristic_data.MaterialDocument",
	MaterialDocumentItem: "sap_process_order_confirmation_batch_characteristic_data.MaterialDocumentItem",
	MaterialDocumentYear: "sap_process_order_confirmation_batch_characteristic_data.MaterialDocumentYear",
	Plant:                "sap_process_order_confirmation_batch_characteristic_data.Plant",
	Material:             "sap_process_order_confirmation_batch_characteristic_data.Material",
	CharcInternalID:      "sap_process_order_confirmation_batch_characteristic_data.CharcInternalID",
	Characteristic:       "sap_process_order_confirmation_batch_characteristic_data.Characteristic",
	CharcValue:           "sap_process_order_confirmation_batch_characteristic_data.CharcValue",
}

// Generated where

var SapProcessOrderConfirmationBatchCharacteristicDatumWhere = struct {
	Batch                whereHelperstring
	OrderID              whereHelpernull_String
	ConfirmationGroup    whereHelpernull_String
	ConfirmationCount    whereHelpernull_String
	MaterialDocument     whereHelpernull_String
	MaterialDocumentItem whereHelpernull_String
	MaterialDocumentYear whereHelpernull_String
	Plant                whereHelpernull_String
	Material             whereHelpernull_String
	CharcInternalID      whereHelpernull_String
	Characteristic       whereHelpernull_String
	CharcValue           whereHelpernull_String
}{
	Batch:                whereHelperstring{field: "`sap_process_order_confirmation_batch_characteristic_data`.`Batch`"},
	OrderID:              whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`OrderID`"},
	ConfirmationGroup:    whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`ConfirmationGroup`"},
	ConfirmationCount:    whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`ConfirmationCount`"},
	MaterialDocument:     whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`MaterialDocument`"},
	MaterialDocumentItem: whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`MaterialDocumentItem`"},
	MaterialDocumentYear: whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`MaterialDocumentYear`"},
	Plant:                whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`Plant`"},
	Material:             whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`Material`"},
	CharcInternalID:      whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`CharcInternalID`"},
	Characteristic:       whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`Characteristic`"},
	CharcValue:           whereHelpernull_String{field: "`sap_process_order_confirmation_batch_characteristic_data`.`CharcValue`"},
}

// SapProcessOrderConfirmationBatchCharacteristicDatumRels is where relationship names are stored.
var SapProcessOrderConfirmationBatchCharacteristicDatumRels = struct {
	OrderIDSapProcessOrderConfirmationConfirmationDatum string
}{
	OrderIDSapProcessOrderConfirmationConfirmationDatum: "OrderIDSapProcessOrderConfirmationConfirmationDatum",
}

// sapProcessOrderConfirmationBatchCharacteristicDatumR is where relationships are stored.
type sapProcessOrderConfirmationBatchCharacteristicDatumR struct {
	OrderIDSapProcessOrderConfirmationConfirmationDatum *SapProcessOrderConfirmationConfirmationDatum `boil:"OrderIDSapProcessOrderConfirmationConfirmationDatum" json:"OrderIDSapProcessOrderConfirmationConfirmationDatum" toml:"OrderIDSapProcessOrderConfirmationConfirmationDatum" yaml:"OrderIDSapProcessOrderConfirmationConfirmationDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProcessOrderConfirmationBatchCharacteristicDatumR) NewStruct() *sapProcessOrderConfirmationBatchCharacteristicDatumR {
	return &sapProcessOrderConfirmationBatchCharacteristicDatumR{}
}

// sapProcessOrderConfirmationBatchCharacteristicDatumL is where Load methods for each relationship are stored.
type sapProcessOrderConfirmationBatchCharacteristicDatumL struct{}

var (
	sapProcessOrderConfirmationBatchCharacteristicDatumAllColumns            = []string{"Batch", "OrderID", "ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear", "Plant", "Material", "CharcInternalID", "Characteristic", "CharcValue"}
	sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithoutDefault = []string{"Batch", "OrderID", "ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear", "Plant", "Material", "CharcInternalID", "Characteristic", "CharcValue"}
	sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithDefault    = []string{}
	sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns     = []string{"Batch"}
	sapProcessOrderConfirmationBatchCharacteristicDatumGeneratedColumns      = []string{}
)

type (
	// SapProcessOrderConfirmationBatchCharacteristicDatumSlice is an alias for a slice of pointers to SapProcessOrderConfirmationBatchCharacteristicDatum.
	// This should almost always be used instead of []SapProcessOrderConfirmationBatchCharacteristicDatum.
	SapProcessOrderConfirmationBatchCharacteristicDatumSlice []*SapProcessOrderConfirmationBatchCharacteristicDatum
	// SapProcessOrderConfirmationBatchCharacteristicDatumHook is the signature for custom SapProcessOrderConfirmationBatchCharacteristicDatum hook methods
	SapProcessOrderConfirmationBatchCharacteristicDatumHook func(context.Context, boil.ContextExecutor, *SapProcessOrderConfirmationBatchCharacteristicDatum) error

	sapProcessOrderConfirmationBatchCharacteristicDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProcessOrderConfirmationBatchCharacteristicDatumType                 = reflect.TypeOf(&SapProcessOrderConfirmationBatchCharacteristicDatum{})
	sapProcessOrderConfirmationBatchCharacteristicDatumMapping              = queries.MakeStructMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType)
	sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns)
	sapProcessOrderConfirmationBatchCharacteristicDatumInsertCacheMut       sync.RWMutex
	sapProcessOrderConfirmationBatchCharacteristicDatumInsertCache          = make(map[string]insertCache)
	sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCacheMut       sync.RWMutex
	sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCache          = make(map[string]updateCache)
	sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCacheMut       sync.RWMutex
	sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook

var sapProcessOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook
var sapProcessOrderConfirmationBatchCharacteristicDatumAfterInsertHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook

var sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook
var sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook

var sapProcessOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook
var sapProcessOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook

var sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook
var sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks []SapProcessOrderConfirmationBatchCharacteristicDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProcessOrderConfirmationBatchCharacteristicDatumHook registers your hook function for all future operations.
func AddSapProcessOrderConfirmationBatchCharacteristicDatumHook(hookPoint boil.HookPoint, sapProcessOrderConfirmationBatchCharacteristicDatumHook SapProcessOrderConfirmationBatchCharacteristicDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeInsertHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumBeforeInsertHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterInsertHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumAfterInsertHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumAfterInsertHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeUpdateHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpdateHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterUpdateHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpdateHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeDeleteHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterDeleteHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.BeforeUpsertHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumBeforeUpsertHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	case boil.AfterUpsertHook:
		sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks = append(sapProcessOrderConfirmationBatchCharacteristicDatumAfterUpsertHooks, sapProcessOrderConfirmationBatchCharacteristicDatumHook)
	}
}

// One returns a single sapProcessOrderConfirmationBatchCharacteristicDatum record from the query.
func (q sapProcessOrderConfirmationBatchCharacteristicDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProcessOrderConfirmationBatchCharacteristicDatum, error) {
	o := &SapProcessOrderConfirmationBatchCharacteristicDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_process_order_confirmation_batch_characteristic_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProcessOrderConfirmationBatchCharacteristicDatum records from the query.
func (q sapProcessOrderConfirmationBatchCharacteristicDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProcessOrderConfirmationBatchCharacteristicDatumSlice, error) {
	var o []*SapProcessOrderConfirmationBatchCharacteristicDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProcessOrderConfirmationBatchCharacteristicDatum slice")
	}

	if len(sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProcessOrderConfirmationBatchCharacteristicDatum records in the query.
func (q sapProcessOrderConfirmationBatchCharacteristicDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_process_order_confirmation_batch_characteristic_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProcessOrderConfirmationBatchCharacteristicDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_process_order_confirmation_batch_characteristic_data exists")
	}

	return count > 0, nil
}

// OrderIDSapProcessOrderConfirmationConfirmationDatum pointed to by the foreign key.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) OrderIDSapProcessOrderConfirmationConfirmationDatum(mods ...qm.QueryMod) sapProcessOrderConfirmationConfirmationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := SapProcessOrderConfirmationConfirmationData(queryMods...)
	queries.SetFrom(query.Query, "`sap_process_order_confirmation_confirmation_data`")

	return query
}

// LoadOrderIDSapProcessOrderConfirmationConfirmationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProcessOrderConfirmationBatchCharacteristicDatumL) LoadOrderIDSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProcessOrderConfirmationBatchCharacteristicDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProcessOrderConfirmationBatchCharacteristicDatum
	var object *SapProcessOrderConfirmationBatchCharacteristicDatum

	if singular {
		object = maybeSapProcessOrderConfirmationBatchCharacteristicDatum.(*SapProcessOrderConfirmationBatchCharacteristicDatum)
	} else {
		slice = *maybeSapProcessOrderConfirmationBatchCharacteristicDatum.(*[]*SapProcessOrderConfirmationBatchCharacteristicDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProcessOrderConfirmationBatchCharacteristicDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProcessOrderConfirmationBatchCharacteristicDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_process_order_confirmation_confirmation_data`),
		qm.WhereIn(`sap_process_order_confirmation_confirmation_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProcessOrderConfirmationConfirmationDatum")
	}

	var resultSlice []*SapProcessOrderConfirmationConfirmationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProcessOrderConfirmationConfirmationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_process_order_confirmation_confirmation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_process_order_confirmation_confirmation_data")
	}

	if len(sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProcessOrderConfirmationConfirmationDatumR{}
		}
		foreign.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = append(foreign.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProcessOrderConfirmationConfirmationDatumR{}
				}
				foreign.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = append(foreign.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData, local)
				break
			}
		}
	}

	return nil
}

// SetOrderIDSapProcessOrderConfirmationConfirmationDatum of the sapProcessOrderConfirmationBatchCharacteristicDatum to the related item.
// Sets o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum to related.
// Adds o to related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) SetOrderIDSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProcessOrderConfirmationConfirmationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_process_order_confirmation_batch_characteristic_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.Batch}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &sapProcessOrderConfirmationBatchCharacteristicDatumR{
			OrderIDSapProcessOrderConfirmationConfirmationDatum: related,
		}
	} else {
		o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = related
	}

	if related.R == nil {
		related.R = &sapProcessOrderConfirmationConfirmationDatumR{
			OrderIDSapProcessOrderConfirmationBatchCharacteristicData: SapProcessOrderConfirmationBatchCharacteristicDatumSlice{o},
		}
	} else {
		related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = append(related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData, o)
	}

	return nil
}

// RemoveOrderIDSapProcessOrderConfirmationConfirmationDatum relationship.
// Sets o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) RemoveOrderIDSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, exec boil.ContextExecutor, related *SapProcessOrderConfirmationConfirmationDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData)
		if ln > 1 && i < ln-1 {
			related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData[i] = related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData[ln-1]
		}
		related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = related.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData[:ln-1]
		break
	}
	return nil
}

// SapProcessOrderConfirmationBatchCharacteristicData retrieves all the records using an executor.
func SapProcessOrderConfirmationBatchCharacteristicData(mods ...qm.QueryMod) sapProcessOrderConfirmationBatchCharacteristicDatumQuery {
	mods = append(mods, qm.From("`sap_process_order_confirmation_batch_characteristic_data`"))
	return sapProcessOrderConfirmationBatchCharacteristicDatumQuery{NewQuery(mods...)}
}

// FindSapProcessOrderConfirmationBatchCharacteristicDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProcessOrderConfirmationBatchCharacteristicDatum(ctx context.Context, exec boil.ContextExecutor, batch string, selectCols ...string) (*SapProcessOrderConfirmationBatchCharacteristicDatum, error) {
	sapProcessOrderConfirmationBatchCharacteristicDatumObj := &SapProcessOrderConfirmationBatchCharacteristicDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_process_order_confirmation_batch_characteristic_data` where `Batch`=?", sel,
	)

	q := queries.Raw(query, batch)

	err := q.Bind(ctx, exec, sapProcessOrderConfirmationBatchCharacteristicDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_process_order_confirmation_batch_characteristic_data")
	}

	if err = sapProcessOrderConfirmationBatchCharacteristicDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProcessOrderConfirmationBatchCharacteristicDatumObj, err
	}

	return sapProcessOrderConfirmationBatchCharacteristicDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_process_order_confirmation_batch_characteristic_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProcessOrderConfirmationBatchCharacteristicDatumInsertCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationBatchCharacteristicDatumInsertCache[key]
	sapProcessOrderConfirmationBatchCharacteristicDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProcessOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithDefault,
			sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_process_order_confirmation_batch_characteristic_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_process_order_confirmation_batch_characteristic_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_process_order_confirmation_batch_characteristic_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_process_order_confirmation_batch_characteristic_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Batch,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_process_order_confirmation_batch_characteristic_data")
	}

CacheNoHooks:
	if !cached {
		sapProcessOrderConfirmationBatchCharacteristicDatumInsertCacheMut.Lock()
		sapProcessOrderConfirmationBatchCharacteristicDatumInsertCache[key] = cache
		sapProcessOrderConfirmationBatchCharacteristicDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProcessOrderConfirmationBatchCharacteristicDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCache[key]
	sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProcessOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_process_order_confirmation_batch_characteristic_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_process_order_confirmation_batch_characteristic_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, append(wl, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_process_order_confirmation_batch_characteristic_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_process_order_confirmation_batch_characteristic_data")
	}

	if !cached {
		sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.Lock()
		sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCache[key] = cache
		sapProcessOrderConfirmationBatchCharacteristicDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProcessOrderConfirmationBatchCharacteristicDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_process_order_confirmation_batch_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_process_order_confirmation_batch_characteristic_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProcessOrderConfirmationBatchCharacteristicDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_process_order_confirmation_batch_characteristic_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProcessOrderConfirmationBatchCharacteristicDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProcessOrderConfirmationBatchCharacteristicDatum")
	}
	return rowsAff, nil
}

var mySQLSapProcessOrderConfirmationBatchCharacteristicDatumUniqueColumns = []string{
	"Batch",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_process_order_confirmation_batch_characteristic_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProcessOrderConfirmationBatchCharacteristicDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCache[key]
	sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProcessOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithDefault,
			sapProcessOrderConfirmationBatchCharacteristicDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProcessOrderConfirmationBatchCharacteristicDatumAllColumns,
			sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_process_order_confirmation_batch_characteristic_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_process_order_confirmation_batch_characteristic_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_process_order_confirmation_batch_characteristic_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_process_order_confirmation_batch_characteristic_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProcessOrderConfirmationBatchCharacteristicDatumType, sapProcessOrderConfirmationBatchCharacteristicDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_process_order_confirmation_batch_characteristic_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_process_order_confirmation_batch_characteristic_data")
	}

CacheNoHooks:
	if !cached {
		sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.Lock()
		sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCache[key] = cache
		sapProcessOrderConfirmationBatchCharacteristicDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProcessOrderConfirmationBatchCharacteristicDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProcessOrderConfirmationBatchCharacteristicDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_process_order_confirmation_batch_characteristic_data` WHERE `Batch`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_process_order_confirmation_batch_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_process_order_confirmation_batch_characteristic_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProcessOrderConfirmationBatchCharacteristicDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProcessOrderConfirmationBatchCharacteristicDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_process_order_confirmation_batch_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_process_order_confirmation_batch_characteristic_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProcessOrderConfirmationBatchCharacteristicDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProcessOrderConfirmationBatchCharacteristicDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_process_order_confirmation_batch_characteristic_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProcessOrderConfirmationBatchCharacteristicDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_process_order_confirmation_batch_characteristic_data")
	}

	if len(sapProcessOrderConfirmationBatchCharacteristicDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProcessOrderConfirmationBatchCharacteristicDatum(ctx, exec, o.Batch)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProcessOrderConfirmationBatchCharacteristicDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProcessOrderConfirmationBatchCharacteristicDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_process_order_confirmation_batch_characteristic_data`.* FROM `sap_process_order_confirmation_batch_characteristic_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProcessOrderConfirmationBatchCharacteristicDatumSlice")
	}

	*o = slice

	return nil
}

// SapProcessOrderConfirmationBatchCharacteristicDatumExists checks if the SapProcessOrderConfirmationBatchCharacteristicDatum row exists.
func SapProcessOrderConfirmationBatchCharacteristicDatumExists(ctx context.Context, exec boil.ContextExecutor, batch string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_process_order_confirmation_batch_characteristic_data` where `Batch`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, batch)
	}
	row := exec.QueryRowContext(ctx, sql, batch)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_process_order_confirmation_batch_characteristic_data exists")
	}

	return exists, nil
}
