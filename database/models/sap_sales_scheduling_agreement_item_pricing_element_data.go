// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesSchedulingAgreementItemPricingElementDatum is an object representing the database table.
type SapSalesSchedulingAgreementItemPricingElementDatum struct {
	SalesSchedulingAgreement     string      `boil:"SalesSchedulingAgreement" json:"SalesSchedulingAgreement" toml:"SalesSchedulingAgreement" yaml:"SalesSchedulingAgreement"`
	SalesSchedulingAgreementItem string      `boil:"SalesSchedulingAgreementItem" json:"SalesSchedulingAgreementItem" toml:"SalesSchedulingAgreementItem" yaml:"SalesSchedulingAgreementItem"`
	PricingProcedureStep         string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter      string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionApplication         null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	ConditionType                null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PricingDateTime              null.String `boil:"PricingDateTime" json:"PricingDateTime,omitempty" toml:"PricingDateTime" yaml:"PricingDateTime,omitempty"`
	ConditionCalculationType     null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionBaseValue           null.String `boil:"ConditionBaseValue" json:"ConditionBaseValue,omitempty" toml:"ConditionBaseValue" yaml:"ConditionBaseValue,omitempty"`
	ConditionRateValue           null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency            null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity            null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit        null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	ConditionCategory            null.String `boil:"ConditionCategory" json:"ConditionCategory,omitempty" toml:"ConditionCategory" yaml:"ConditionCategory,omitempty"`
	PricingScaleType             null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	ConditionRecord              null.String `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber    null.String `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	TaxCode                      null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ConditionAmount              null.String `boil:"ConditionAmount" json:"ConditionAmount,omitempty" toml:"ConditionAmount" yaml:"ConditionAmount,omitempty"`
	TransactionCurrency          null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingScaleBasis            null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleBasisValue     null.String `boil:"ConditionScaleBasisValue" json:"ConditionScaleBasisValue,omitempty" toml:"ConditionScaleBasisValue" yaml:"ConditionScaleBasisValue,omitempty"`
	ConditionScaleBasisUnit      null.String `boil:"ConditionScaleBasisUnit" json:"ConditionScaleBasisUnit,omitempty" toml:"ConditionScaleBasisUnit" yaml:"ConditionScaleBasisUnit,omitempty"`
	ConditionScaleBasisCurrency  null.String `boil:"ConditionScaleBasisCurrency" json:"ConditionScaleBasisCurrency,omitempty" toml:"ConditionScaleBasisCurrency" yaml:"ConditionScaleBasisCurrency,omitempty"`
	ConditionIsManuallyChanged   null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`

	R *sapSalesSchedulingAgreementItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesSchedulingAgreementItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesSchedulingAgreementItemPricingElementDatumColumns = struct {
	SalesSchedulingAgreement     string
	SalesSchedulingAgreementItem string
	PricingProcedureStep         string
	PricingProcedureCounter      string
	ConditionApplication         string
	ConditionType                string
	PricingDateTime              string
	ConditionCalculationType     string
	ConditionBaseValue           string
	ConditionRateValue           string
	ConditionCurrency            string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	ConditionCategory            string
	PricingScaleType             string
	ConditionRecord              string
	ConditionSequentialNumber    string
	TaxCode                      string
	ConditionAmount              string
	TransactionCurrency          string
	PricingScaleBasis            string
	ConditionScaleBasisValue     string
	ConditionScaleBasisUnit      string
	ConditionScaleBasisCurrency  string
	ConditionIsManuallyChanged   string
}{
	SalesSchedulingAgreement:     "SalesSchedulingAgreement",
	SalesSchedulingAgreementItem: "SalesSchedulingAgreementItem",
	PricingProcedureStep:         "PricingProcedureStep",
	PricingProcedureCounter:      "PricingProcedureCounter",
	ConditionApplication:         "ConditionApplication",
	ConditionType:                "ConditionType",
	PricingDateTime:              "PricingDateTime",
	ConditionCalculationType:     "ConditionCalculationType",
	ConditionBaseValue:           "ConditionBaseValue",
	ConditionRateValue:           "ConditionRateValue",
	ConditionCurrency:            "ConditionCurrency",
	ConditionQuantity:            "ConditionQuantity",
	ConditionQuantityUnit:        "ConditionQuantityUnit",
	ConditionCategory:            "ConditionCategory",
	PricingScaleType:             "PricingScaleType",
	ConditionRecord:              "ConditionRecord",
	ConditionSequentialNumber:    "ConditionSequentialNumber",
	TaxCode:                      "TaxCode",
	ConditionAmount:              "ConditionAmount",
	TransactionCurrency:          "TransactionCurrency",
	PricingScaleBasis:            "PricingScaleBasis",
	ConditionScaleBasisValue:     "ConditionScaleBasisValue",
	ConditionScaleBasisUnit:      "ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency:  "ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:   "ConditionIsManuallyChanged",
}

var SapSalesSchedulingAgreementItemPricingElementDatumTableColumns = struct {
	SalesSchedulingAgreement     string
	SalesSchedulingAgreementItem string
	PricingProcedureStep         string
	PricingProcedureCounter      string
	ConditionApplication         string
	ConditionType                string
	PricingDateTime              string
	ConditionCalculationType     string
	ConditionBaseValue           string
	ConditionRateValue           string
	ConditionCurrency            string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	ConditionCategory            string
	PricingScaleType             string
	ConditionRecord              string
	ConditionSequentialNumber    string
	TaxCode                      string
	ConditionAmount              string
	TransactionCurrency          string
	PricingScaleBasis            string
	ConditionScaleBasisValue     string
	ConditionScaleBasisUnit      string
	ConditionScaleBasisCurrency  string
	ConditionIsManuallyChanged   string
}{
	SalesSchedulingAgreement:     "sap_sales_scheduling_agreement_item_pricing_element_data.SalesSchedulingAgreement",
	SalesSchedulingAgreementItem: "sap_sales_scheduling_agreement_item_pricing_element_data.SalesSchedulingAgreementItem",
	PricingProcedureStep:         "sap_sales_scheduling_agreement_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter:      "sap_sales_scheduling_agreement_item_pricing_element_data.PricingProcedureCounter",
	ConditionApplication:         "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionApplication",
	ConditionType:                "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionType",
	PricingDateTime:              "sap_sales_scheduling_agreement_item_pricing_element_data.PricingDateTime",
	ConditionCalculationType:     "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionCalculationType",
	ConditionBaseValue:           "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionBaseValue",
	ConditionRateValue:           "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:            "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:            "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:        "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionQuantityUnit",
	ConditionCategory:            "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionCategory",
	PricingScaleType:             "sap_sales_scheduling_agreement_item_pricing_element_data.PricingScaleType",
	ConditionRecord:              "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:    "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionSequentialNumber",
	TaxCode:                      "sap_sales_scheduling_agreement_item_pricing_element_data.TaxCode",
	ConditionAmount:              "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionAmount",
	TransactionCurrency:          "sap_sales_scheduling_agreement_item_pricing_element_data.TransactionCurrency",
	PricingScaleBasis:            "sap_sales_scheduling_agreement_item_pricing_element_data.PricingScaleBasis",
	ConditionScaleBasisValue:     "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionScaleBasisValue",
	ConditionScaleBasisUnit:      "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency:  "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:   "sap_sales_scheduling_agreement_item_pricing_element_data.ConditionIsManuallyChanged",
}

// Generated where

var SapSalesSchedulingAgreementItemPricingElementDatumWhere = struct {
	SalesSchedulingAgreement     whereHelperstring
	SalesSchedulingAgreementItem whereHelperstring
	PricingProcedureStep         whereHelperstring
	PricingProcedureCounter      whereHelperstring
	ConditionApplication         whereHelpernull_String
	ConditionType                whereHelpernull_String
	PricingDateTime              whereHelpernull_String
	ConditionCalculationType     whereHelpernull_String
	ConditionBaseValue           whereHelpernull_String
	ConditionRateValue           whereHelpernull_String
	ConditionCurrency            whereHelpernull_String
	ConditionQuantity            whereHelpernull_String
	ConditionQuantityUnit        whereHelpernull_String
	ConditionCategory            whereHelpernull_String
	PricingScaleType             whereHelpernull_String
	ConditionRecord              whereHelpernull_String
	ConditionSequentialNumber    whereHelpernull_String
	TaxCode                      whereHelpernull_String
	ConditionAmount              whereHelpernull_String
	TransactionCurrency          whereHelpernull_String
	PricingScaleBasis            whereHelpernull_String
	ConditionScaleBasisValue     whereHelpernull_String
	ConditionScaleBasisUnit      whereHelpernull_String
	ConditionScaleBasisCurrency  whereHelpernull_String
	ConditionIsManuallyChanged   whereHelpernull_Bool
}{
	SalesSchedulingAgreement:     whereHelperstring{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`SalesSchedulingAgreement`"},
	SalesSchedulingAgreementItem: whereHelperstring{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`SalesSchedulingAgreementItem`"},
	PricingProcedureStep:         whereHelperstring{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter:      whereHelperstring{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionApplication:         whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionApplication`"},
	ConditionType:                whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionType`"},
	PricingDateTime:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`PricingDateTime`"},
	ConditionCalculationType:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionCalculationType`"},
	ConditionBaseValue:           whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionBaseValue`"},
	ConditionRateValue:           whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:            whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:            whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:        whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionQuantityUnit`"},
	ConditionCategory:            whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionCategory`"},
	PricingScaleType:             whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`PricingScaleType`"},
	ConditionRecord:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:    whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionSequentialNumber`"},
	TaxCode:                      whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`TaxCode`"},
	ConditionAmount:              whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionAmount`"},
	TransactionCurrency:          whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`TransactionCurrency`"},
	PricingScaleBasis:            whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`PricingScaleBasis`"},
	ConditionScaleBasisValue:     whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionScaleBasisValue`"},
	ConditionScaleBasisUnit:      whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionScaleBasisUnit`"},
	ConditionScaleBasisCurrency:  whereHelpernull_String{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionScaleBasisCurrency`"},
	ConditionIsManuallyChanged:   whereHelpernull_Bool{field: "`sap_sales_scheduling_agreement_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
}

// SapSalesSchedulingAgreementItemPricingElementDatumRels is where relationship names are stored.
var SapSalesSchedulingAgreementItemPricingElementDatumRels = struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum string
}{
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: "SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum",
}

// sapSalesSchedulingAgreementItemPricingElementDatumR is where relationships are stored.
type sapSalesSchedulingAgreementItemPricingElementDatumR struct {
	SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum *SapSalesSchedulingAgreementHeaderDatum `boil:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" json:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" toml:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum" yaml:"SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesSchedulingAgreementItemPricingElementDatumR) NewStruct() *sapSalesSchedulingAgreementItemPricingElementDatumR {
	return &sapSalesSchedulingAgreementItemPricingElementDatumR{}
}

// sapSalesSchedulingAgreementItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapSalesSchedulingAgreementItemPricingElementDatumL struct{}

var (
	sapSalesSchedulingAgreementItemPricingElementDatumAllColumns            = []string{"SalesSchedulingAgreement", "SalesSchedulingAgreementItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionApplication", "ConditionType", "PricingDateTime", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithoutDefault = []string{"SalesSchedulingAgreement", "SalesSchedulingAgreementItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionApplication", "ConditionType", "PricingDateTime", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithDefault    = []string{}
	sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns     = []string{"SalesSchedulingAgreement", "SalesSchedulingAgreementItem", "PricingProcedureStep", "PricingProcedureCounter"}
	sapSalesSchedulingAgreementItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesSchedulingAgreementItemPricingElementDatumSlice is an alias for a slice of pointers to SapSalesSchedulingAgreementItemPricingElementDatum.
	// This should almost always be used instead of []SapSalesSchedulingAgreementItemPricingElementDatum.
	SapSalesSchedulingAgreementItemPricingElementDatumSlice []*SapSalesSchedulingAgreementItemPricingElementDatum
	// SapSalesSchedulingAgreementItemPricingElementDatumHook is the signature for custom SapSalesSchedulingAgreementItemPricingElementDatum hook methods
	SapSalesSchedulingAgreementItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapSalesSchedulingAgreementItemPricingElementDatum) error

	sapSalesSchedulingAgreementItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesSchedulingAgreementItemPricingElementDatumType                 = reflect.TypeOf(&SapSalesSchedulingAgreementItemPricingElementDatum{})
	sapSalesSchedulingAgreementItemPricingElementDatumMapping              = queries.MakeStructMapping(sapSalesSchedulingAgreementItemPricingElementDatumType)
	sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns)
	sapSalesSchedulingAgreementItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapSalesSchedulingAgreementItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapSalesSchedulingAgreementItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapSalesSchedulingAgreementItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook

var sapSalesSchedulingAgreementItemPricingElementDatumBeforeInsertHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook
var sapSalesSchedulingAgreementItemPricingElementDatumAfterInsertHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook

var sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpdateHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook
var sapSalesSchedulingAgreementItemPricingElementDatumAfterUpdateHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook

var sapSalesSchedulingAgreementItemPricingElementDatumBeforeDeleteHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook
var sapSalesSchedulingAgreementItemPricingElementDatumAfterDeleteHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook

var sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpsertHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook
var sapSalesSchedulingAgreementItemPricingElementDatumAfterUpsertHooks []SapSalesSchedulingAgreementItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesSchedulingAgreementItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesSchedulingAgreementItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapSalesSchedulingAgreementItemPricingElementDatumHook(hookPoint boil.HookPoint, sapSalesSchedulingAgreementItemPricingElementDatumHook SapSalesSchedulingAgreementItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapSalesSchedulingAgreementItemPricingElementDatumBeforeInsertHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumBeforeInsertHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapSalesSchedulingAgreementItemPricingElementDatumAfterInsertHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumAfterInsertHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpdateHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpdateHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapSalesSchedulingAgreementItemPricingElementDatumAfterUpdateHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumAfterUpdateHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesSchedulingAgreementItemPricingElementDatumBeforeDeleteHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumBeforeDeleteHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapSalesSchedulingAgreementItemPricingElementDatumAfterDeleteHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumAfterDeleteHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpsertHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumBeforeUpsertHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapSalesSchedulingAgreementItemPricingElementDatumAfterUpsertHooks = append(sapSalesSchedulingAgreementItemPricingElementDatumAfterUpsertHooks, sapSalesSchedulingAgreementItemPricingElementDatumHook)
	}
}

// One returns a single sapSalesSchedulingAgreementItemPricingElementDatum record from the query.
func (q sapSalesSchedulingAgreementItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesSchedulingAgreementItemPricingElementDatum, error) {
	o := &SapSalesSchedulingAgreementItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesSchedulingAgreementItemPricingElementDatum records from the query.
func (q sapSalesSchedulingAgreementItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesSchedulingAgreementItemPricingElementDatumSlice, error) {
	var o []*SapSalesSchedulingAgreementItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesSchedulingAgreementItemPricingElementDatum slice")
	}

	if len(sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesSchedulingAgreementItemPricingElementDatum records in the query.
func (q sapSalesSchedulingAgreementItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_scheduling_agreement_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesSchedulingAgreementItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_scheduling_agreement_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum pointed to by the foreign key.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(mods ...qm.QueryMod) sapSalesSchedulingAgreementHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesSchedulingAgreement` = ?", o.SalesSchedulingAgreement),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesSchedulingAgreementHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_scheduling_agreement_header_data`")

	return query
}

// LoadSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesSchedulingAgreementItemPricingElementDatumL) LoadSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesSchedulingAgreementItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesSchedulingAgreementItemPricingElementDatum
	var object *SapSalesSchedulingAgreementItemPricingElementDatum

	if singular {
		object = maybeSapSalesSchedulingAgreementItemPricingElementDatum.(*SapSalesSchedulingAgreementItemPricingElementDatum)
	} else {
		slice = *maybeSapSalesSchedulingAgreementItemPricingElementDatum.(*[]*SapSalesSchedulingAgreementItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesSchedulingAgreementItemPricingElementDatumR{}
		}
		args = append(args, object.SalesSchedulingAgreement)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesSchedulingAgreementItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesSchedulingAgreement {
					continue Outer
				}
			}

			args = append(args, obj.SalesSchedulingAgreement)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_scheduling_agreement_header_data`),
		qm.WhereIn(`sap_sales_scheduling_agreement_header_data.SalesSchedulingAgreement in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesSchedulingAgreementHeaderDatum")
	}

	var resultSlice []*SapSalesSchedulingAgreementHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesSchedulingAgreementHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_scheduling_agreement_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_scheduling_agreement_header_data")
	}

	if len(sapSalesSchedulingAgreementItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesSchedulingAgreementHeaderDatumR{}
		}
		foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData = append(foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesSchedulingAgreement == foreign.SalesSchedulingAgreement {
				local.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesSchedulingAgreementHeaderDatumR{}
				}
				foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData = append(foreign.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum of the sapSalesSchedulingAgreementItemPricingElementDatum to the related item.
// Sets o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum to related.
// Adds o to related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) SetSalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesSchedulingAgreementHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_scheduling_agreement_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesSchedulingAgreement"}),
		strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesSchedulingAgreement, o.SalesSchedulingAgreement, o.SalesSchedulingAgreementItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesSchedulingAgreement = related.SalesSchedulingAgreement
	if o.R == nil {
		o.R = &sapSalesSchedulingAgreementItemPricingElementDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum: related,
		}
	} else {
		o.R.SalesSchedulingAgreementSapSalesSchedulingAgreementHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesSchedulingAgreementHeaderDatumR{
			SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData: SapSalesSchedulingAgreementItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData = append(related.R.SalesSchedulingAgreementSapSalesSchedulingAgreementItemPricingElementData, o)
	}

	return nil
}

// SapSalesSchedulingAgreementItemPricingElementData retrieves all the records using an executor.
func SapSalesSchedulingAgreementItemPricingElementData(mods ...qm.QueryMod) sapSalesSchedulingAgreementItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_sales_scheduling_agreement_item_pricing_element_data`"))
	return sapSalesSchedulingAgreementItemPricingElementDatumQuery{NewQuery(mods...)}
}

// FindSapSalesSchedulingAgreementItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesSchedulingAgreementItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, salesSchedulingAgreementItem string, pricingProcedureStep string, pricingProcedureCounter string, selectCols ...string) (*SapSalesSchedulingAgreementItemPricingElementDatum, error) {
	sapSalesSchedulingAgreementItemPricingElementDatumObj := &SapSalesSchedulingAgreementItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_scheduling_agreement_item_pricing_element_data` where `SalesSchedulingAgreement`=? AND `SalesSchedulingAgreementItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, salesSchedulingAgreement, salesSchedulingAgreementItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, sapSalesSchedulingAgreementItemPricingElementDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if err = sapSalesSchedulingAgreementItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesSchedulingAgreementItemPricingElementDatumObj, err
	}

	return sapSalesSchedulingAgreementItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesSchedulingAgreementItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementItemPricingElementDatumInsertCache[key]
	sapSalesSchedulingAgreementItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesSchedulingAgreementItemPricingElementDatumAllColumns,
			sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithDefault,
			sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_scheduling_agreement_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_scheduling_agreement_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_scheduling_agreement_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesSchedulingAgreement,
		o.SalesSchedulingAgreementItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementItemPricingElementDatumInsertCacheMut.Lock()
		sapSalesSchedulingAgreementItemPricingElementDatumInsertCache[key] = cache
		sapSalesSchedulingAgreementItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesSchedulingAgreementItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesSchedulingAgreementItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementItemPricingElementDatumUpdateCache[key]
	sapSalesSchedulingAgreementItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesSchedulingAgreementItemPricingElementDatumAllColumns,
			sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_scheduling_agreement_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, append(wl, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_scheduling_agreement_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if !cached {
		sapSalesSchedulingAgreementItemPricingElementDatumUpdateCacheMut.Lock()
		sapSalesSchedulingAgreementItemPricingElementDatumUpdateCache[key] = cache
		sapSalesSchedulingAgreementItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesSchedulingAgreementItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesSchedulingAgreementItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_scheduling_agreement_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesSchedulingAgreementItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesSchedulingAgreementItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesSchedulingAgreementItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_scheduling_agreement_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesSchedulingAgreementItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesSchedulingAgreementItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesSchedulingAgreementItemPricingElementDatumUpsertCache[key]
	sapSalesSchedulingAgreementItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesSchedulingAgreementItemPricingElementDatumAllColumns,
			sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithDefault,
			sapSalesSchedulingAgreementItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesSchedulingAgreementItemPricingElementDatumAllColumns,
			sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_scheduling_agreement_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_scheduling_agreement_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_scheduling_agreement_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesSchedulingAgreementItemPricingElementDatumType, sapSalesSchedulingAgreementItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_scheduling_agreement_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesSchedulingAgreementItemPricingElementDatumUpsertCacheMut.Lock()
		sapSalesSchedulingAgreementItemPricingElementDatumUpsertCache[key] = cache
		sapSalesSchedulingAgreementItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesSchedulingAgreementItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesSchedulingAgreementItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_scheduling_agreement_item_pricing_element_data` WHERE `SalesSchedulingAgreement`=? AND `SalesSchedulingAgreementItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesSchedulingAgreementItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesSchedulingAgreementItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesSchedulingAgreementItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesSchedulingAgreementItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_scheduling_agreement_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesSchedulingAgreementItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_scheduling_agreement_item_pricing_element_data")
	}

	if len(sapSalesSchedulingAgreementItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesSchedulingAgreementItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesSchedulingAgreementItemPricingElementDatum(ctx, exec, o.SalesSchedulingAgreement, o.SalesSchedulingAgreementItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesSchedulingAgreementItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesSchedulingAgreementItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_scheduling_agreement_item_pricing_element_data`.* FROM `sap_sales_scheduling_agreement_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesSchedulingAgreementItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesSchedulingAgreementItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesSchedulingAgreementItemPricingElementDatumExists checks if the SapSalesSchedulingAgreementItemPricingElementDatum row exists.
func SapSalesSchedulingAgreementItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, salesSchedulingAgreement string, salesSchedulingAgreementItem string, pricingProcedureStep string, pricingProcedureCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_scheduling_agreement_item_pricing_element_data` where `SalesSchedulingAgreement`=? AND `SalesSchedulingAgreementItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesSchedulingAgreement, salesSchedulingAgreementItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, salesSchedulingAgreement, salesSchedulingAgreementItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_scheduling_agreement_item_pricing_element_data exists")
	}

	return exists, nil
}
