// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPlannedOrderComponentDatum is an object representing the database table.
type SapPlannedOrderComponentDatum struct {
	PlannedOrder                   string      `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	Reservation                    null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                null.String `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	BOMItem                        null.String `boil:"BOMItem" json:"BOMItem,omitempty" toml:"BOMItem" yaml:"BOMItem,omitempty"`
	BOMItemDescription             null.String `boil:"BOMItemDescription" json:"BOMItemDescription,omitempty" toml:"BOMItemDescription" yaml:"BOMItemDescription,omitempty"`
	BillOfMaterialCategory         null.String `boil:"BillOfMaterialCategory" json:"BillOfMaterialCategory,omitempty" toml:"BillOfMaterialCategory" yaml:"BillOfMaterialCategory,omitempty"`
	BOMItemSorter                  null.String `boil:"BOMItemSorter" json:"BOMItemSorter,omitempty" toml:"BOMItemSorter" yaml:"BOMItemSorter,omitempty"`
	BillOfMaterialItemNumber       null.String `boil:"BillOfMaterialItemNumber" json:"BillOfMaterialItemNumber,omitempty" toml:"BillOfMaterialItemNumber" yaml:"BillOfMaterialItemNumber,omitempty"`
	BillOfMaterialInternalID       null.String `boil:"BillOfMaterialInternalID" json:"BillOfMaterialInternalID,omitempty" toml:"BillOfMaterialInternalID" yaml:"BillOfMaterialInternalID,omitempty"`
	BillOfMaterialVariant          null.String `boil:"BillOfMaterialVariant" json:"BillOfMaterialVariant,omitempty" toml:"BillOfMaterialVariant" yaml:"BillOfMaterialVariant,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MatlCompRequirementDate        null.String `boil:"MatlCompRequirementDate" json:"MatlCompRequirementDate,omitempty" toml:"MatlCompRequirementDate" yaml:"MatlCompRequirementDate,omitempty"`
	GoodsMovementEntryQty          null.String `boil:"GoodsMovementEntryQty" json:"GoodsMovementEntryQty,omitempty" toml:"GoodsMovementEntryQty" yaml:"GoodsMovementEntryQty,omitempty"`
	EntryUnit                      null.String `boil:"EntryUnit" json:"EntryUnit,omitempty" toml:"EntryUnit" yaml:"EntryUnit,omitempty"`
	RequiredQuantity               null.String `boil:"RequiredQuantity" json:"RequiredQuantity,omitempty" toml:"RequiredQuantity" yaml:"RequiredQuantity,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	WithdrawnQuantity              null.String `boil:"WithdrawnQuantity" json:"WithdrawnQuantity,omitempty" toml:"WithdrawnQuantity" yaml:"WithdrawnQuantity,omitempty"`
	DebitCreditCode                null.String `boil:"DebitCreditCode" json:"DebitCreditCode,omitempty" toml:"DebitCreditCode" yaml:"DebitCreditCode,omitempty"`
	ComponentScrapInPercent        null.String `boil:"ComponentScrapInPercent" json:"ComponentScrapInPercent,omitempty" toml:"ComponentScrapInPercent" yaml:"ComponentScrapInPercent,omitempty"`
	QuantityIsFixed                null.Bool   `boil:"QuantityIsFixed" json:"QuantityIsFixed,omitempty" toml:"QuantityIsFixed" yaml:"QuantityIsFixed,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	SupplyArea                     null.String `boil:"SupplyArea" json:"SupplyArea,omitempty" toml:"SupplyArea" yaml:"SupplyArea,omitempty"`
	MRPController                  null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	PlannedOrderLastChangeDateTime null.String `boil:"PlannedOrderLastChangeDateTime" json:"PlannedOrderLastChangeDateTime,omitempty" toml:"PlannedOrderLastChangeDateTime" yaml:"PlannedOrderLastChangeDateTime,omitempty"`

	R *sapPlannedOrderComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPlannedOrderComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPlannedOrderComponentDatumColumns = struct {
	PlannedOrder                   string
	Reservation                    string
	ReservationItem                string
	BOMItem                        string
	BOMItemDescription             string
	BillOfMaterialCategory         string
	BOMItemSorter                  string
	BillOfMaterialItemNumber       string
	BillOfMaterialInternalID       string
	BillOfMaterialVariant          string
	Material                       string
	MatlCompRequirementDate        string
	GoodsMovementEntryQty          string
	EntryUnit                      string
	RequiredQuantity               string
	BaseUnit                       string
	WithdrawnQuantity              string
	DebitCreditCode                string
	ComponentScrapInPercent        string
	QuantityIsFixed                string
	Plant                          string
	StorageLocation                string
	SupplyArea                     string
	MRPController                  string
	PlannedOrderLastChangeDateTime string
}{
	PlannedOrder:                   "PlannedOrder",
	Reservation:                    "Reservation",
	ReservationItem:                "ReservationItem",
	BOMItem:                        "BOMItem",
	BOMItemDescription:             "BOMItemDescription",
	BillOfMaterialCategory:         "BillOfMaterialCategory",
	BOMItemSorter:                  "BOMItemSorter",
	BillOfMaterialItemNumber:       "BillOfMaterialItemNumber",
	BillOfMaterialInternalID:       "BillOfMaterialInternalID",
	BillOfMaterialVariant:          "BillOfMaterialVariant",
	Material:                       "Material",
	MatlCompRequirementDate:        "MatlCompRequirementDate",
	GoodsMovementEntryQty:          "GoodsMovementEntryQty",
	EntryUnit:                      "EntryUnit",
	RequiredQuantity:               "RequiredQuantity",
	BaseUnit:                       "BaseUnit",
	WithdrawnQuantity:              "WithdrawnQuantity",
	DebitCreditCode:                "DebitCreditCode",
	ComponentScrapInPercent:        "ComponentScrapInPercent",
	QuantityIsFixed:                "QuantityIsFixed",
	Plant:                          "Plant",
	StorageLocation:                "StorageLocation",
	SupplyArea:                     "SupplyArea",
	MRPController:                  "MRPController",
	PlannedOrderLastChangeDateTime: "PlannedOrderLastChangeDateTime",
}

var SapPlannedOrderComponentDatumTableColumns = struct {
	PlannedOrder                   string
	Reservation                    string
	ReservationItem                string
	BOMItem                        string
	BOMItemDescription             string
	BillOfMaterialCategory         string
	BOMItemSorter                  string
	BillOfMaterialItemNumber       string
	BillOfMaterialInternalID       string
	BillOfMaterialVariant          string
	Material                       string
	MatlCompRequirementDate        string
	GoodsMovementEntryQty          string
	EntryUnit                      string
	RequiredQuantity               string
	BaseUnit                       string
	WithdrawnQuantity              string
	DebitCreditCode                string
	ComponentScrapInPercent        string
	QuantityIsFixed                string
	Plant                          string
	StorageLocation                string
	SupplyArea                     string
	MRPController                  string
	PlannedOrderLastChangeDateTime string
}{
	PlannedOrder:                   "sap_planned_order_component_data.PlannedOrder",
	Reservation:                    "sap_planned_order_component_data.Reservation",
	ReservationItem:                "sap_planned_order_component_data.ReservationItem",
	BOMItem:                        "sap_planned_order_component_data.BOMItem",
	BOMItemDescription:             "sap_planned_order_component_data.BOMItemDescription",
	BillOfMaterialCategory:         "sap_planned_order_component_data.BillOfMaterialCategory",
	BOMItemSorter:                  "sap_planned_order_component_data.BOMItemSorter",
	BillOfMaterialItemNumber:       "sap_planned_order_component_data.BillOfMaterialItemNumber",
	BillOfMaterialInternalID:       "sap_planned_order_component_data.BillOfMaterialInternalID",
	BillOfMaterialVariant:          "sap_planned_order_component_data.BillOfMaterialVariant",
	Material:                       "sap_planned_order_component_data.Material",
	MatlCompRequirementDate:        "sap_planned_order_component_data.MatlCompRequirementDate",
	GoodsMovementEntryQty:          "sap_planned_order_component_data.GoodsMovementEntryQty",
	EntryUnit:                      "sap_planned_order_component_data.EntryUnit",
	RequiredQuantity:               "sap_planned_order_component_data.RequiredQuantity",
	BaseUnit:                       "sap_planned_order_component_data.BaseUnit",
	WithdrawnQuantity:              "sap_planned_order_component_data.WithdrawnQuantity",
	DebitCreditCode:                "sap_planned_order_component_data.DebitCreditCode",
	ComponentScrapInPercent:        "sap_planned_order_component_data.ComponentScrapInPercent",
	QuantityIsFixed:                "sap_planned_order_component_data.QuantityIsFixed",
	Plant:                          "sap_planned_order_component_data.Plant",
	StorageLocation:                "sap_planned_order_component_data.StorageLocation",
	SupplyArea:                     "sap_planned_order_component_data.SupplyArea",
	MRPController:                  "sap_planned_order_component_data.MRPController",
	PlannedOrderLastChangeDateTime: "sap_planned_order_component_data.PlannedOrderLastChangeDateTime",
}

// Generated where

var SapPlannedOrderComponentDatumWhere = struct {
	PlannedOrder                   whereHelperstring
	Reservation                    whereHelpernull_String
	ReservationItem                whereHelpernull_String
	BOMItem                        whereHelpernull_String
	BOMItemDescription             whereHelpernull_String
	BillOfMaterialCategory         whereHelpernull_String
	BOMItemSorter                  whereHelpernull_String
	BillOfMaterialItemNumber       whereHelpernull_String
	BillOfMaterialInternalID       whereHelpernull_String
	BillOfMaterialVariant          whereHelpernull_String
	Material                       whereHelpernull_String
	MatlCompRequirementDate        whereHelpernull_String
	GoodsMovementEntryQty          whereHelpernull_String
	EntryUnit                      whereHelpernull_String
	RequiredQuantity               whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	WithdrawnQuantity              whereHelpernull_String
	DebitCreditCode                whereHelpernull_String
	ComponentScrapInPercent        whereHelpernull_String
	QuantityIsFixed                whereHelpernull_Bool
	Plant                          whereHelpernull_String
	StorageLocation                whereHelpernull_String
	SupplyArea                     whereHelpernull_String
	MRPController                  whereHelpernull_String
	PlannedOrderLastChangeDateTime whereHelpernull_String
}{
	PlannedOrder:                   whereHelperstring{field: "`sap_planned_order_component_data`.`PlannedOrder`"},
	Reservation:                    whereHelpernull_String{field: "`sap_planned_order_component_data`.`Reservation`"},
	ReservationItem:                whereHelpernull_String{field: "`sap_planned_order_component_data`.`ReservationItem`"},
	BOMItem:                        whereHelpernull_String{field: "`sap_planned_order_component_data`.`BOMItem`"},
	BOMItemDescription:             whereHelpernull_String{field: "`sap_planned_order_component_data`.`BOMItemDescription`"},
	BillOfMaterialCategory:         whereHelpernull_String{field: "`sap_planned_order_component_data`.`BillOfMaterialCategory`"},
	BOMItemSorter:                  whereHelpernull_String{field: "`sap_planned_order_component_data`.`BOMItemSorter`"},
	BillOfMaterialItemNumber:       whereHelpernull_String{field: "`sap_planned_order_component_data`.`BillOfMaterialItemNumber`"},
	BillOfMaterialInternalID:       whereHelpernull_String{field: "`sap_planned_order_component_data`.`BillOfMaterialInternalID`"},
	BillOfMaterialVariant:          whereHelpernull_String{field: "`sap_planned_order_component_data`.`BillOfMaterialVariant`"},
	Material:                       whereHelpernull_String{field: "`sap_planned_order_component_data`.`Material`"},
	MatlCompRequirementDate:        whereHelpernull_String{field: "`sap_planned_order_component_data`.`MatlCompRequirementDate`"},
	GoodsMovementEntryQty:          whereHelpernull_String{field: "`sap_planned_order_component_data`.`GoodsMovementEntryQty`"},
	EntryUnit:                      whereHelpernull_String{field: "`sap_planned_order_component_data`.`EntryUnit`"},
	RequiredQuantity:               whereHelpernull_String{field: "`sap_planned_order_component_data`.`RequiredQuantity`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_planned_order_component_data`.`BaseUnit`"},
	WithdrawnQuantity:              whereHelpernull_String{field: "`sap_planned_order_component_data`.`WithdrawnQuantity`"},
	DebitCreditCode:                whereHelpernull_String{field: "`sap_planned_order_component_data`.`DebitCreditCode`"},
	ComponentScrapInPercent:        whereHelpernull_String{field: "`sap_planned_order_component_data`.`ComponentScrapInPercent`"},
	QuantityIsFixed:                whereHelpernull_Bool{field: "`sap_planned_order_component_data`.`QuantityIsFixed`"},
	Plant:                          whereHelpernull_String{field: "`sap_planned_order_component_data`.`Plant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_planned_order_component_data`.`StorageLocation`"},
	SupplyArea:                     whereHelpernull_String{field: "`sap_planned_order_component_data`.`SupplyArea`"},
	MRPController:                  whereHelpernull_String{field: "`sap_planned_order_component_data`.`MRPController`"},
	PlannedOrderLastChangeDateTime: whereHelpernull_String{field: "`sap_planned_order_component_data`.`PlannedOrderLastChangeDateTime`"},
}

// SapPlannedOrderComponentDatumRels is where relationship names are stored.
var SapPlannedOrderComponentDatumRels = struct {
	PlannedOrderSapPlannedOrderHeaderDatum string
}{
	PlannedOrderSapPlannedOrderHeaderDatum: "PlannedOrderSapPlannedOrderHeaderDatum",
}

// sapPlannedOrderComponentDatumR is where relationships are stored.
type sapPlannedOrderComponentDatumR struct {
	PlannedOrderSapPlannedOrderHeaderDatum *SapPlannedOrderHeaderDatum `boil:"PlannedOrderSapPlannedOrderHeaderDatum" json:"PlannedOrderSapPlannedOrderHeaderDatum" toml:"PlannedOrderSapPlannedOrderHeaderDatum" yaml:"PlannedOrderSapPlannedOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPlannedOrderComponentDatumR) NewStruct() *sapPlannedOrderComponentDatumR {
	return &sapPlannedOrderComponentDatumR{}
}

// sapPlannedOrderComponentDatumL is where Load methods for each relationship are stored.
type sapPlannedOrderComponentDatumL struct{}

var (
	sapPlannedOrderComponentDatumAllColumns            = []string{"PlannedOrder", "Reservation", "ReservationItem", "BOMItem", "BOMItemDescription", "BillOfMaterialCategory", "BOMItemSorter", "BillOfMaterialItemNumber", "BillOfMaterialInternalID", "BillOfMaterialVariant", "Material", "MatlCompRequirementDate", "GoodsMovementEntryQty", "EntryUnit", "RequiredQuantity", "BaseUnit", "WithdrawnQuantity", "DebitCreditCode", "ComponentScrapInPercent", "QuantityIsFixed", "Plant", "StorageLocation", "SupplyArea", "MRPController", "PlannedOrderLastChangeDateTime"}
	sapPlannedOrderComponentDatumColumnsWithoutDefault = []string{"PlannedOrder", "Reservation", "ReservationItem", "BOMItem", "BOMItemDescription", "BillOfMaterialCategory", "BOMItemSorter", "BillOfMaterialItemNumber", "BillOfMaterialInternalID", "BillOfMaterialVariant", "Material", "MatlCompRequirementDate", "GoodsMovementEntryQty", "EntryUnit", "RequiredQuantity", "BaseUnit", "WithdrawnQuantity", "DebitCreditCode", "ComponentScrapInPercent", "QuantityIsFixed", "Plant", "StorageLocation", "SupplyArea", "MRPController", "PlannedOrderLastChangeDateTime"}
	sapPlannedOrderComponentDatumColumnsWithDefault    = []string{}
	sapPlannedOrderComponentDatumPrimaryKeyColumns     = []string{"PlannedOrder"}
	sapPlannedOrderComponentDatumGeneratedColumns      = []string{}
)

type (
	// SapPlannedOrderComponentDatumSlice is an alias for a slice of pointers to SapPlannedOrderComponentDatum.
	// This should almost always be used instead of []SapPlannedOrderComponentDatum.
	SapPlannedOrderComponentDatumSlice []*SapPlannedOrderComponentDatum
	// SapPlannedOrderComponentDatumHook is the signature for custom SapPlannedOrderComponentDatum hook methods
	SapPlannedOrderComponentDatumHook func(context.Context, boil.ContextExecutor, *SapPlannedOrderComponentDatum) error

	sapPlannedOrderComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPlannedOrderComponentDatumType                 = reflect.TypeOf(&SapPlannedOrderComponentDatum{})
	sapPlannedOrderComponentDatumMapping              = queries.MakeStructMapping(sapPlannedOrderComponentDatumType)
	sapPlannedOrderComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, sapPlannedOrderComponentDatumPrimaryKeyColumns)
	sapPlannedOrderComponentDatumInsertCacheMut       sync.RWMutex
	sapPlannedOrderComponentDatumInsertCache          = make(map[string]insertCache)
	sapPlannedOrderComponentDatumUpdateCacheMut       sync.RWMutex
	sapPlannedOrderComponentDatumUpdateCache          = make(map[string]updateCache)
	sapPlannedOrderComponentDatumUpsertCacheMut       sync.RWMutex
	sapPlannedOrderComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPlannedOrderComponentDatumAfterSelectHooks []SapPlannedOrderComponentDatumHook

var sapPlannedOrderComponentDatumBeforeInsertHooks []SapPlannedOrderComponentDatumHook
var sapPlannedOrderComponentDatumAfterInsertHooks []SapPlannedOrderComponentDatumHook

var sapPlannedOrderComponentDatumBeforeUpdateHooks []SapPlannedOrderComponentDatumHook
var sapPlannedOrderComponentDatumAfterUpdateHooks []SapPlannedOrderComponentDatumHook

var sapPlannedOrderComponentDatumBeforeDeleteHooks []SapPlannedOrderComponentDatumHook
var sapPlannedOrderComponentDatumAfterDeleteHooks []SapPlannedOrderComponentDatumHook

var sapPlannedOrderComponentDatumBeforeUpsertHooks []SapPlannedOrderComponentDatumHook
var sapPlannedOrderComponentDatumAfterUpsertHooks []SapPlannedOrderComponentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPlannedOrderComponentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPlannedOrderComponentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPlannedOrderComponentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPlannedOrderComponentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPlannedOrderComponentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPlannedOrderComponentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPlannedOrderComponentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPlannedOrderComponentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPlannedOrderComponentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedOrderComponentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPlannedOrderComponentDatumHook registers your hook function for all future operations.
func AddSapPlannedOrderComponentDatumHook(hookPoint boil.HookPoint, sapPlannedOrderComponentDatumHook SapPlannedOrderComponentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPlannedOrderComponentDatumAfterSelectHooks = append(sapPlannedOrderComponentDatumAfterSelectHooks, sapPlannedOrderComponentDatumHook)
	case boil.BeforeInsertHook:
		sapPlannedOrderComponentDatumBeforeInsertHooks = append(sapPlannedOrderComponentDatumBeforeInsertHooks, sapPlannedOrderComponentDatumHook)
	case boil.AfterInsertHook:
		sapPlannedOrderComponentDatumAfterInsertHooks = append(sapPlannedOrderComponentDatumAfterInsertHooks, sapPlannedOrderComponentDatumHook)
	case boil.BeforeUpdateHook:
		sapPlannedOrderComponentDatumBeforeUpdateHooks = append(sapPlannedOrderComponentDatumBeforeUpdateHooks, sapPlannedOrderComponentDatumHook)
	case boil.AfterUpdateHook:
		sapPlannedOrderComponentDatumAfterUpdateHooks = append(sapPlannedOrderComponentDatumAfterUpdateHooks, sapPlannedOrderComponentDatumHook)
	case boil.BeforeDeleteHook:
		sapPlannedOrderComponentDatumBeforeDeleteHooks = append(sapPlannedOrderComponentDatumBeforeDeleteHooks, sapPlannedOrderComponentDatumHook)
	case boil.AfterDeleteHook:
		sapPlannedOrderComponentDatumAfterDeleteHooks = append(sapPlannedOrderComponentDatumAfterDeleteHooks, sapPlannedOrderComponentDatumHook)
	case boil.BeforeUpsertHook:
		sapPlannedOrderComponentDatumBeforeUpsertHooks = append(sapPlannedOrderComponentDatumBeforeUpsertHooks, sapPlannedOrderComponentDatumHook)
	case boil.AfterUpsertHook:
		sapPlannedOrderComponentDatumAfterUpsertHooks = append(sapPlannedOrderComponentDatumAfterUpsertHooks, sapPlannedOrderComponentDatumHook)
	}
}

// One returns a single sapPlannedOrderComponentDatum record from the query.
func (q sapPlannedOrderComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPlannedOrderComponentDatum, error) {
	o := &SapPlannedOrderComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_planned_order_component_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPlannedOrderComponentDatum records from the query.
func (q sapPlannedOrderComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPlannedOrderComponentDatumSlice, error) {
	var o []*SapPlannedOrderComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPlannedOrderComponentDatum slice")
	}

	if len(sapPlannedOrderComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPlannedOrderComponentDatum records in the query.
func (q sapPlannedOrderComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_planned_order_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPlannedOrderComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_planned_order_component_data exists")
	}

	return count > 0, nil
}

// PlannedOrderSapPlannedOrderHeaderDatum pointed to by the foreign key.
func (o *SapPlannedOrderComponentDatum) PlannedOrderSapPlannedOrderHeaderDatum(mods ...qm.QueryMod) sapPlannedOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapPlannedOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_planned_order_header_data`")

	return query
}

// LoadPlannedOrderSapPlannedOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPlannedOrderComponentDatumL) LoadPlannedOrderSapPlannedOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPlannedOrderComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPlannedOrderComponentDatum
	var object *SapPlannedOrderComponentDatum

	if singular {
		object = maybeSapPlannedOrderComponentDatum.(*SapPlannedOrderComponentDatum)
	} else {
		slice = *maybeSapPlannedOrderComponentDatum.(*[]*SapPlannedOrderComponentDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPlannedOrderComponentDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPlannedOrderComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_planned_order_header_data`),
		qm.WhereIn(`sap_planned_order_header_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPlannedOrderHeaderDatum")
	}

	var resultSlice []*SapPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPlannedOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_planned_order_header_data")
	}

	if len(sapPlannedOrderComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderSapPlannedOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPlannedOrderHeaderDatumR{}
		}
		foreign.R.PlannedOrderSapPlannedOrderComponentDatum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderSapPlannedOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPlannedOrderHeaderDatumR{}
				}
				foreign.R.PlannedOrderSapPlannedOrderComponentDatum = local
				break
			}
		}
	}

	return nil
}

// SetPlannedOrderSapPlannedOrderHeaderDatum of the sapPlannedOrderComponentDatum to the related item.
// Sets o.R.PlannedOrderSapPlannedOrderHeaderDatum to related.
// Adds o to related.R.PlannedOrderSapPlannedOrderComponentDatum.
func (o *SapPlannedOrderComponentDatum) SetPlannedOrderSapPlannedOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPlannedOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, sapPlannedOrderComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &sapPlannedOrderComponentDatumR{
			PlannedOrderSapPlannedOrderHeaderDatum: related,
		}
	} else {
		o.R.PlannedOrderSapPlannedOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPlannedOrderHeaderDatumR{
			PlannedOrderSapPlannedOrderComponentDatum: o,
		}
	} else {
		related.R.PlannedOrderSapPlannedOrderComponentDatum = o
	}

	return nil
}

// SapPlannedOrderComponentData retrieves all the records using an executor.
func SapPlannedOrderComponentData(mods ...qm.QueryMod) sapPlannedOrderComponentDatumQuery {
	mods = append(mods, qm.From("`sap_planned_order_component_data`"))
	return sapPlannedOrderComponentDatumQuery{NewQuery(mods...)}
}

// FindSapPlannedOrderComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPlannedOrderComponentDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder string, selectCols ...string) (*SapPlannedOrderComponentDatum, error) {
	sapPlannedOrderComponentDatumObj := &SapPlannedOrderComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_planned_order_component_data` where `PlannedOrder`=?", sel,
	)

	q := queries.Raw(query, plannedOrder)

	err := q.Bind(ctx, exec, sapPlannedOrderComponentDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_planned_order_component_data")
	}

	if err = sapPlannedOrderComponentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPlannedOrderComponentDatumObj, err
	}

	return sapPlannedOrderComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPlannedOrderComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_order_component_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedOrderComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPlannedOrderComponentDatumInsertCacheMut.RLock()
	cache, cached := sapPlannedOrderComponentDatumInsertCache[key]
	sapPlannedOrderComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPlannedOrderComponentDatumAllColumns,
			sapPlannedOrderComponentDatumColumnsWithDefault,
			sapPlannedOrderComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_planned_order_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_planned_order_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_planned_order_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPlannedOrderComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_planned_order_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_order_component_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedOrderComponentDatumInsertCacheMut.Lock()
		sapPlannedOrderComponentDatumInsertCache[key] = cache
		sapPlannedOrderComponentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPlannedOrderComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPlannedOrderComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPlannedOrderComponentDatumUpdateCacheMut.RLock()
	cache, cached := sapPlannedOrderComponentDatumUpdateCache[key]
	sapPlannedOrderComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPlannedOrderComponentDatumAllColumns,
			sapPlannedOrderComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_planned_order_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_planned_order_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPlannedOrderComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, append(wl, sapPlannedOrderComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_planned_order_component_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_planned_order_component_data")
	}

	if !cached {
		sapPlannedOrderComponentDatumUpdateCacheMut.Lock()
		sapPlannedOrderComponentDatumUpdateCache[key] = cache
		sapPlannedOrderComponentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPlannedOrderComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_planned_order_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_planned_order_component_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPlannedOrderComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedOrderComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPlannedOrderComponentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPlannedOrderComponentDatum")
	}
	return rowsAff, nil
}

var mySQLSapPlannedOrderComponentDatumUniqueColumns = []string{
	"PlannedOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPlannedOrderComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_order_component_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedOrderComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPlannedOrderComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPlannedOrderComponentDatumUpsertCacheMut.RLock()
	cache, cached := sapPlannedOrderComponentDatumUpsertCache[key]
	sapPlannedOrderComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPlannedOrderComponentDatumAllColumns,
			sapPlannedOrderComponentDatumColumnsWithDefault,
			sapPlannedOrderComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPlannedOrderComponentDatumAllColumns,
			sapPlannedOrderComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_planned_order_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_planned_order_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_planned_order_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_planned_order_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPlannedOrderComponentDatumType, sapPlannedOrderComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_planned_order_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_order_component_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedOrderComponentDatumUpsertCacheMut.Lock()
		sapPlannedOrderComponentDatumUpsertCache[key] = cache
		sapPlannedOrderComponentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPlannedOrderComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPlannedOrderComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPlannedOrderComponentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPlannedOrderComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_planned_order_component_data` WHERE `PlannedOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_planned_order_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_planned_order_component_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPlannedOrderComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPlannedOrderComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_planned_order_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_order_component_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPlannedOrderComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPlannedOrderComponentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_planned_order_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedOrderComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPlannedOrderComponentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_order_component_data")
	}

	if len(sapPlannedOrderComponentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPlannedOrderComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPlannedOrderComponentDatum(ctx, exec, o.PlannedOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPlannedOrderComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPlannedOrderComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_planned_order_component_data`.* FROM `sap_planned_order_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedOrderComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPlannedOrderComponentDatumSlice")
	}

	*o = slice

	return nil
}

// SapPlannedOrderComponentDatumExists checks if the SapPlannedOrderComponentDatum row exists.
func SapPlannedOrderComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_planned_order_component_data` where `PlannedOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_planned_order_component_data exists")
	}

	return exists, nil
}
