// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceOrderOperationComponentDatum is an object representing the database table.
type SapMaintenanceOrderOperationComponentDatum struct {
	MaintenanceOrder               string      `boil:"MaintenanceOrder" json:"MaintenanceOrder" toml:"MaintenanceOrder" yaml:"MaintenanceOrder"`
	MaintenanceOrderOperation      string      `boil:"MaintenanceOrderOperation" json:"MaintenanceOrderOperation" toml:"MaintenanceOrderOperation" yaml:"MaintenanceOrderOperation"`
	MaintenanceOrderSubOperation   string      `boil:"MaintenanceOrderSubOperation" json:"MaintenanceOrderSubOperation" toml:"MaintenanceOrderSubOperation" yaml:"MaintenanceOrderSubOperation"`
	MaintenanceOrderComponent      string      `boil:"MaintenanceOrderComponent" json:"MaintenanceOrderComponent" toml:"MaintenanceOrderComponent" yaml:"MaintenanceOrderComponent"`
	Reservation                    null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                null.String `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	ReservationType                null.String `boil:"ReservationType" json:"ReservationType,omitempty" toml:"ReservationType" yaml:"ReservationType,omitempty"`
	MaintOrderRoutingNumber        null.String `boil:"MaintOrderRoutingNumber" json:"MaintOrderRoutingNumber,omitempty" toml:"MaintOrderRoutingNumber" yaml:"MaintOrderRoutingNumber,omitempty"`
	MaintOrderOperationCounter     null.String `boil:"MaintOrderOperationCounter" json:"MaintOrderOperationCounter,omitempty" toml:"MaintOrderOperationCounter" yaml:"MaintOrderOperationCounter,omitempty"`
	Product                        null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	MaintOrdOperationComponentText null.String `boil:"MaintOrdOperationComponentText" json:"MaintOrdOperationComponentText,omitempty" toml:"MaintOrdOperationComponentText" yaml:"MaintOrdOperationComponentText,omitempty"`
	MaintOrdOpCompRequiredQuantity null.String `boil:"MaintOrdOpCompRequiredQuantity" json:"MaintOrdOpCompRequiredQuantity,omitempty" toml:"MaintOrdOpCompRequiredQuantity" yaml:"MaintOrdOpCompRequiredQuantity,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	QuantityInUnitOfEntry          null.String `boil:"QuantityInUnitOfEntry" json:"QuantityInUnitOfEntry,omitempty" toml:"QuantityInUnitOfEntry" yaml:"QuantityInUnitOfEntry,omitempty"`
	UnitOfEntry                    null.String `boil:"UnitOfEntry" json:"UnitOfEntry,omitempty" toml:"UnitOfEntry" yaml:"UnitOfEntry,omitempty"`
	RequirementDate                null.String `boil:"RequirementDate" json:"RequirementDate,omitempty" toml:"RequirementDate" yaml:"RequirementDate,omitempty"`
	RequirementTime                null.String `boil:"RequirementTime" json:"RequirementTime,omitempty" toml:"RequirementTime" yaml:"RequirementTime,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	MaintOrdOpCompItemCategory     null.String `boil:"MaintOrdOpCompItemCategory" json:"MaintOrdOpCompItemCategory,omitempty" toml:"MaintOrdOpCompItemCategory" yaml:"MaintOrdOpCompItemCategory,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	ReservationIsFinallyIssued     null.Bool   `boil:"ReservationIsFinallyIssued" json:"ReservationIsFinallyIssued,omitempty" toml:"ReservationIsFinallyIssued" yaml:"ReservationIsFinallyIssued,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	ProductTypeCode                null.String `boil:"ProductTypeCode" json:"ProductTypeCode,omitempty" toml:"ProductTypeCode" yaml:"ProductTypeCode,omitempty"`
	ServicePerformer               null.String `boil:"ServicePerformer" json:"ServicePerformer,omitempty" toml:"ServicePerformer" yaml:"ServicePerformer,omitempty"`
	PerformancePeriodStartDateTime null.String `boil:"PerformancePeriodStartDateTime" json:"PerformancePeriodStartDateTime,omitempty" toml:"PerformancePeriodStartDateTime" yaml:"PerformancePeriodStartDateTime,omitempty"`
	PerformancePeriodStartDate     null.String `boil:"PerformancePeriodStartDate" json:"PerformancePeriodStartDate,omitempty" toml:"PerformancePeriodStartDate" yaml:"PerformancePeriodStartDate,omitempty"`
	PerformancePeriodEndDate       null.String `boil:"PerformancePeriodEndDate" json:"PerformancePeriodEndDate,omitempty" toml:"PerformancePeriodEndDate" yaml:"PerformancePeriodEndDate,omitempty"`
	PerformancePeriodEndDateTime   null.String `boil:"PerformancePeriodEndDateTime" json:"PerformancePeriodEndDateTime,omitempty" toml:"PerformancePeriodEndDateTime" yaml:"PerformancePeriodEndDateTime,omitempty"`
	PerformancePeriodStartTime     null.String `boil:"PerformancePeriodStartTime" json:"PerformancePeriodStartTime,omitempty" toml:"PerformancePeriodStartTime" yaml:"PerformancePeriodStartTime,omitempty"`
	PerformancePeriodEndTime       null.String `boil:"PerformancePeriodEndTime" json:"PerformancePeriodEndTime,omitempty" toml:"PerformancePeriodEndTime" yaml:"PerformancePeriodEndTime,omitempty"`
	LeanServiceDuration            null.String `boil:"LeanServiceDuration" json:"LeanServiceDuration,omitempty" toml:"LeanServiceDuration" yaml:"LeanServiceDuration,omitempty"`
	LeanServiceDurationUnit        null.String `boil:"LeanServiceDurationUnit" json:"LeanServiceDurationUnit,omitempty" toml:"LeanServiceDurationUnit" yaml:"LeanServiceDurationUnit,omitempty"`
	DistributionFunction           null.String `boil:"DistributionFunction" json:"DistributionFunction,omitempty" toml:"DistributionFunction" yaml:"DistributionFunction,omitempty"`
	SrvcSchedgIsAlignedWthOpWrkCtr null.String `boil:"SrvcSchedgIsAlignedWthOpWrkCtr" json:"SrvcSchedgIsAlignedWthOpWrkCtr,omitempty" toml:"SrvcSchedgIsAlignedWthOpWrkCtr" yaml:"SrvcSchedgIsAlignedWthOpWrkCtr,omitempty"`
	MaintOrderCompDebitCreditCode  null.String `boil:"MaintOrderCompDebitCreditCode" json:"MaintOrderCompDebitCreditCode,omitempty" toml:"MaintOrderCompDebitCreditCode" yaml:"MaintOrderCompDebitCreditCode,omitempty"`
	GoodsMovementIsAllowed         null.Bool   `boil:"GoodsMovementIsAllowed" json:"GoodsMovementIsAllowed,omitempty" toml:"GoodsMovementIsAllowed" yaml:"GoodsMovementIsAllowed,omitempty"`
	MaintenanceOrderComponentBatch null.String `boil:"MaintenanceOrderComponentBatch" json:"MaintenanceOrderComponentBatch,omitempty" toml:"MaintenanceOrderComponentBatch" yaml:"MaintenanceOrderComponentBatch,omitempty"`
	QuantityIsFixed                null.Bool   `boil:"QuantityIsFixed" json:"QuantityIsFixed,omitempty" toml:"QuantityIsFixed" yaml:"QuantityIsFixed,omitempty"`
	MaintOrdOpComponentGLAccount   null.String `boil:"MaintOrdOpComponentGLAccount" json:"MaintOrdOpComponentGLAccount,omitempty" toml:"MaintOrdOpComponentGLAccount" yaml:"MaintOrdOpComponentGLAccount,omitempty"`
	MaintOrdOpCompCostingRelevancy null.String `boil:"MaintOrdOpCompCostingRelevancy" json:"MaintOrdOpCompCostingRelevancy,omitempty" toml:"MaintOrdOpCompCostingRelevancy" yaml:"MaintOrdOpCompCostingRelevancy,omitempty"`
	MaintCompAltvProdUsgeRateInPct null.String `boil:"MaintCompAltvProdUsgeRateInPct" json:"MaintCompAltvProdUsgeRateInPct,omitempty" toml:"MaintCompAltvProdUsgeRateInPct" yaml:"MaintCompAltvProdUsgeRateInPct,omitempty"`
	MaintOrderOpComponentSortText  null.String `boil:"MaintOrderOpComponentSortText" json:"MaintOrderOpComponentSortText,omitempty" toml:"MaintOrderOpComponentSortText" yaml:"MaintOrderOpComponentSortText,omitempty"`
	MaintOrdOpCompIsBulkProduct    null.Bool   `boil:"MaintOrdOpCompIsBulkProduct" json:"MaintOrdOpCompIsBulkProduct,omitempty" toml:"MaintOrdOpCompIsBulkProduct" yaml:"MaintOrdOpCompIsBulkProduct,omitempty"`
	MaterialProvisionType          null.String `boil:"MaterialProvisionType" json:"MaterialProvisionType,omitempty" toml:"MaterialProvisionType" yaml:"MaterialProvisionType,omitempty"`
	MaintOrdOpCompAssgdWBSElmntInt null.String `boil:"MaintOrdOpCompAssgdWBSElmntInt" json:"MaintOrdOpCompAssgdWBSElmntInt,omitempty" toml:"MaintOrdOpCompAssgdWBSElmntInt" yaml:"MaintOrdOpCompAssgdWBSElmntInt,omitempty"`
	MaintOrderOpComponentPrice     null.String `boil:"MaintOrderOpComponentPrice" json:"MaintOrderOpComponentPrice,omitempty" toml:"MaintOrderOpComponentPrice" yaml:"MaintOrderOpComponentPrice,omitempty"`
	MaintOrdOpComponentCurrency    null.String `boil:"MaintOrdOpComponentCurrency" json:"MaintOrdOpComponentCurrency,omitempty" toml:"MaintOrdOpComponentCurrency" yaml:"MaintOrdOpComponentCurrency,omitempty"`
	MatlCompIsMarkedForBackflush   null.Bool   `boil:"MatlCompIsMarkedForBackflush" json:"MatlCompIsMarkedForBackflush,omitempty" toml:"MatlCompIsMarkedForBackflush" yaml:"MatlCompIsMarkedForBackflush,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	DeliveryTimeInDays             null.String `boil:"DeliveryTimeInDays" json:"DeliveryTimeInDays,omitempty" toml:"DeliveryTimeInDays" yaml:"DeliveryTimeInDays,omitempty"`
	MaintOrdOpCompGdsRecipientName null.String `boil:"MaintOrdOpCompGdsRecipientName" json:"MaintOrdOpCompGdsRecipientName,omitempty" toml:"MaintOrdOpCompGdsRecipientName" yaml:"MaintOrdOpCompGdsRecipientName,omitempty"`
	MaintOrdOpCompUnloadingPtTxt   null.String `boil:"MaintOrdOpCompUnloadingPtTxt" json:"MaintOrdOpCompUnloadingPtTxt,omitempty" toml:"MaintOrdOpCompUnloadingPtTxt" yaml:"MaintOrdOpCompUnloadingPtTxt,omitempty"`
	GoodsReceiptDurationInWorkDays null.String `boil:"GoodsReceiptDurationInWorkDays" json:"GoodsReceiptDurationInWorkDays,omitempty" toml:"GoodsReceiptDurationInWorkDays" yaml:"GoodsReceiptDurationInWorkDays,omitempty"`
	PurchasingInfoRecord           null.String `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord,omitempty" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord,omitempty"`
	OperationLeadTimeOffset        null.String `boil:"OperationLeadTimeOffset" json:"OperationLeadTimeOffset,omitempty" toml:"OperationLeadTimeOffset" yaml:"OperationLeadTimeOffset,omitempty"`
	OpsLeadTimeOffsetUnit          null.String `boil:"OpsLeadTimeOffsetUnit" json:"OpsLeadTimeOffsetUnit,omitempty" toml:"OpsLeadTimeOffsetUnit" yaml:"OpsLeadTimeOffsetUnit,omitempty"`
	MaintOrdOpCompRequisitioner    null.String `boil:"MaintOrdOpCompRequisitioner" json:"MaintOrdOpCompRequisitioner,omitempty" toml:"MaintOrdOpCompRequisitioner" yaml:"MaintOrdOpCompRequisitioner,omitempty"`
	MaintOrdOpCompProcmtTrckgNmbr  null.String `boil:"MaintOrdOpCompProcmtTrckgNmbr" json:"MaintOrdOpCompProcmtTrckgNmbr,omitempty" toml:"MaintOrdOpCompProcmtTrckgNmbr" yaml:"MaintOrdOpCompProcmtTrckgNmbr,omitempty"`
	ResponsiblePurchaseOrg         null.String `boil:"ResponsiblePurchaseOrg" json:"ResponsiblePurchaseOrg,omitempty" toml:"ResponsiblePurchaseOrg" yaml:"ResponsiblePurchaseOrg,omitempty"`
	MaintOrdOpCompSpecialStockType null.String `boil:"MaintOrdOpCompSpecialStockType" json:"MaintOrdOpCompSpecialStockType,omitempty" toml:"MaintOrdOpCompSpecialStockType" yaml:"MaintOrdOpCompSpecialStockType,omitempty"`
	VariableSizeDimension1         null.String `boil:"VariableSizeDimension1" json:"VariableSizeDimension1,omitempty" toml:"VariableSizeDimension1" yaml:"VariableSizeDimension1,omitempty"`
	VariableSizeDimensionUnit      null.String `boil:"VariableSizeDimensionUnit" json:"VariableSizeDimensionUnit,omitempty" toml:"VariableSizeDimensionUnit" yaml:"VariableSizeDimensionUnit,omitempty"`
	VariableSizeCompFormulaKey     null.String `boil:"VariableSizeCompFormulaKey" json:"VariableSizeCompFormulaKey,omitempty" toml:"VariableSizeCompFormulaKey" yaml:"VariableSizeCompFormulaKey,omitempty"`
	VariableSizeDimension2         null.String `boil:"VariableSizeDimension2" json:"VariableSizeDimension2,omitempty" toml:"VariableSizeDimension2" yaml:"VariableSizeDimension2,omitempty"`
	NumberOfVariableSizeItem       null.Int    `boil:"NumberOfVariableSizeItem" json:"NumberOfVariableSizeItem,omitempty" toml:"NumberOfVariableSizeItem" yaml:"NumberOfVariableSizeItem,omitempty"`
	VariableSizeDimension3         null.String `boil:"VariableSizeDimension3" json:"VariableSizeDimension3,omitempty" toml:"VariableSizeDimension3" yaml:"VariableSizeDimension3,omitempty"`
	VariableSizeItemQuantity       null.String `boil:"VariableSizeItemQuantity" json:"VariableSizeItemQuantity,omitempty" toml:"VariableSizeItemQuantity" yaml:"VariableSizeItemQuantity,omitempty"`
	VariableSizeComponentUnit      null.String `boil:"VariableSizeComponentUnit" json:"VariableSizeComponentUnit,omitempty" toml:"VariableSizeComponentUnit" yaml:"VariableSizeComponentUnit,omitempty"`
	RqmtDateIsEnteredManually      null.Bool   `boil:"RqmtDateIsEnteredManually" json:"RqmtDateIsEnteredManually,omitempty" toml:"RqmtDateIsEnteredManually" yaml:"RqmtDateIsEnteredManually,omitempty"`
	SupplierProduct                null.String `boil:"SupplierProduct" json:"SupplierProduct,omitempty" toml:"SupplierProduct" yaml:"SupplierProduct,omitempty"`
	MaintOrdCompPurOutlineAgrmtItm null.String `boil:"MaintOrdCompPurOutlineAgrmtItm" json:"MaintOrdCompPurOutlineAgrmtItm,omitempty" toml:"MaintOrdCompPurOutlineAgrmtItm" yaml:"MaintOrdCompPurOutlineAgrmtItm,omitempty"`
	MaintOrderComponentInternalID  null.String `boil:"MaintOrderComponentInternalID" json:"MaintOrderComponentInternalID,omitempty" toml:"MaintOrderComponentInternalID" yaml:"MaintOrderComponentInternalID,omitempty"`
	PurchaseRequisition            null.String `boil:"PurchaseRequisition" json:"PurchaseRequisition,omitempty" toml:"PurchaseRequisition" yaml:"PurchaseRequisition,omitempty"`
	PurchaseRequisitionItem        null.String `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem,omitempty" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem,omitempty"`
	OverallLimitAmount             null.String `boil:"OverallLimitAmount" json:"OverallLimitAmount,omitempty" toml:"OverallLimitAmount" yaml:"OverallLimitAmount,omitempty"`
	ExpectedOverallLimitAmount     null.String `boil:"ExpectedOverallLimitAmount" json:"ExpectedOverallLimitAmount,omitempty" toml:"ExpectedOverallLimitAmount" yaml:"ExpectedOverallLimitAmount,omitempty"`

	R *sapMaintenanceOrderOperationComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceOrderOperationComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceOrderOperationComponentDatumColumns = struct {
	MaintenanceOrder               string
	MaintenanceOrderOperation      string
	MaintenanceOrderSubOperation   string
	MaintenanceOrderComponent      string
	Reservation                    string
	ReservationItem                string
	ReservationType                string
	MaintOrderRoutingNumber        string
	MaintOrderOperationCounter     string
	Product                        string
	MaintOrdOperationComponentText string
	MaintOrdOpCompRequiredQuantity string
	BaseUnit                       string
	QuantityInUnitOfEntry          string
	UnitOfEntry                    string
	RequirementDate                string
	RequirementTime                string
	Supplier                       string
	Plant                          string
	StorageLocation                string
	MaintOrdOpCompItemCategory     string
	GoodsMovementType              string
	ReservationIsFinallyIssued     string
	MaterialGroup                  string
	ProductTypeCode                string
	ServicePerformer               string
	PerformancePeriodStartDateTime string
	PerformancePeriodStartDate     string
	PerformancePeriodEndDate       string
	PerformancePeriodEndDateTime   string
	PerformancePeriodStartTime     string
	PerformancePeriodEndTime       string
	LeanServiceDuration            string
	LeanServiceDurationUnit        string
	DistributionFunction           string
	SrvcSchedgIsAlignedWthOpWrkCtr string
	MaintOrderCompDebitCreditCode  string
	GoodsMovementIsAllowed         string
	MaintenanceOrderComponentBatch string
	QuantityIsFixed                string
	MaintOrdOpComponentGLAccount   string
	MaintOrdOpCompCostingRelevancy string
	MaintCompAltvProdUsgeRateInPct string
	MaintOrderOpComponentSortText  string
	MaintOrdOpCompIsBulkProduct    string
	MaterialProvisionType          string
	MaintOrdOpCompAssgdWBSElmntInt string
	MaintOrderOpComponentPrice     string
	MaintOrdOpComponentCurrency    string
	MatlCompIsMarkedForBackflush   string
	PurchasingGroup                string
	DeliveryTimeInDays             string
	MaintOrdOpCompGdsRecipientName string
	MaintOrdOpCompUnloadingPtTxt   string
	GoodsReceiptDurationInWorkDays string
	PurchasingInfoRecord           string
	OperationLeadTimeOffset        string
	OpsLeadTimeOffsetUnit          string
	MaintOrdOpCompRequisitioner    string
	MaintOrdOpCompProcmtTrckgNmbr  string
	ResponsiblePurchaseOrg         string
	MaintOrdOpCompSpecialStockType string
	VariableSizeDimension1         string
	VariableSizeDimensionUnit      string
	VariableSizeCompFormulaKey     string
	VariableSizeDimension2         string
	NumberOfVariableSizeItem       string
	VariableSizeDimension3         string
	VariableSizeItemQuantity       string
	VariableSizeComponentUnit      string
	RqmtDateIsEnteredManually      string
	SupplierProduct                string
	MaintOrdCompPurOutlineAgrmtItm string
	MaintOrderComponentInternalID  string
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	OverallLimitAmount             string
	ExpectedOverallLimitAmount     string
}{
	MaintenanceOrder:               "MaintenanceOrder",
	MaintenanceOrderOperation:      "MaintenanceOrderOperation",
	MaintenanceOrderSubOperation:   "MaintenanceOrderSubOperation",
	MaintenanceOrderComponent:      "MaintenanceOrderComponent",
	Reservation:                    "Reservation",
	ReservationItem:                "ReservationItem",
	ReservationType:                "ReservationType",
	MaintOrderRoutingNumber:        "MaintOrderRoutingNumber",
	MaintOrderOperationCounter:     "MaintOrderOperationCounter",
	Product:                        "Product",
	MaintOrdOperationComponentText: "MaintOrdOperationComponentText",
	MaintOrdOpCompRequiredQuantity: "MaintOrdOpCompRequiredQuantity",
	BaseUnit:                       "BaseUnit",
	QuantityInUnitOfEntry:          "QuantityInUnitOfEntry",
	UnitOfEntry:                    "UnitOfEntry",
	RequirementDate:                "RequirementDate",
	RequirementTime:                "RequirementTime",
	Supplier:                       "Supplier",
	Plant:                          "Plant",
	StorageLocation:                "StorageLocation",
	MaintOrdOpCompItemCategory:     "MaintOrdOpCompItemCategory",
	GoodsMovementType:              "GoodsMovementType",
	ReservationIsFinallyIssued:     "ReservationIsFinallyIssued",
	MaterialGroup:                  "MaterialGroup",
	ProductTypeCode:                "ProductTypeCode",
	ServicePerformer:               "ServicePerformer",
	PerformancePeriodStartDateTime: "PerformancePeriodStartDateTime",
	PerformancePeriodStartDate:     "PerformancePeriodStartDate",
	PerformancePeriodEndDate:       "PerformancePeriodEndDate",
	PerformancePeriodEndDateTime:   "PerformancePeriodEndDateTime",
	PerformancePeriodStartTime:     "PerformancePeriodStartTime",
	PerformancePeriodEndTime:       "PerformancePeriodEndTime",
	LeanServiceDuration:            "LeanServiceDuration",
	LeanServiceDurationUnit:        "LeanServiceDurationUnit",
	DistributionFunction:           "DistributionFunction",
	SrvcSchedgIsAlignedWthOpWrkCtr: "SrvcSchedgIsAlignedWthOpWrkCtr",
	MaintOrderCompDebitCreditCode:  "MaintOrderCompDebitCreditCode",
	GoodsMovementIsAllowed:         "GoodsMovementIsAllowed",
	MaintenanceOrderComponentBatch: "MaintenanceOrderComponentBatch",
	QuantityIsFixed:                "QuantityIsFixed",
	MaintOrdOpComponentGLAccount:   "MaintOrdOpComponentGLAccount",
	MaintOrdOpCompCostingRelevancy: "MaintOrdOpCompCostingRelevancy",
	MaintCompAltvProdUsgeRateInPct: "MaintCompAltvProdUsgeRateInPct",
	MaintOrderOpComponentSortText:  "MaintOrderOpComponentSortText",
	MaintOrdOpCompIsBulkProduct:    "MaintOrdOpCompIsBulkProduct",
	MaterialProvisionType:          "MaterialProvisionType",
	MaintOrdOpCompAssgdWBSElmntInt: "MaintOrdOpCompAssgdWBSElmntInt",
	MaintOrderOpComponentPrice:     "MaintOrderOpComponentPrice",
	MaintOrdOpComponentCurrency:    "MaintOrdOpComponentCurrency",
	MatlCompIsMarkedForBackflush:   "MatlCompIsMarkedForBackflush",
	PurchasingGroup:                "PurchasingGroup",
	DeliveryTimeInDays:             "DeliveryTimeInDays",
	MaintOrdOpCompGdsRecipientName: "MaintOrdOpCompGdsRecipientName",
	MaintOrdOpCompUnloadingPtTxt:   "MaintOrdOpCompUnloadingPtTxt",
	GoodsReceiptDurationInWorkDays: "GoodsReceiptDurationInWorkDays",
	PurchasingInfoRecord:           "PurchasingInfoRecord",
	OperationLeadTimeOffset:        "OperationLeadTimeOffset",
	OpsLeadTimeOffsetUnit:          "OpsLeadTimeOffsetUnit",
	MaintOrdOpCompRequisitioner:    "MaintOrdOpCompRequisitioner",
	MaintOrdOpCompProcmtTrckgNmbr:  "MaintOrdOpCompProcmtTrckgNmbr",
	ResponsiblePurchaseOrg:         "ResponsiblePurchaseOrg",
	MaintOrdOpCompSpecialStockType: "MaintOrdOpCompSpecialStockType",
	VariableSizeDimension1:         "VariableSizeDimension1",
	VariableSizeDimensionUnit:      "VariableSizeDimensionUnit",
	VariableSizeCompFormulaKey:     "VariableSizeCompFormulaKey",
	VariableSizeDimension2:         "VariableSizeDimension2",
	NumberOfVariableSizeItem:       "NumberOfVariableSizeItem",
	VariableSizeDimension3:         "VariableSizeDimension3",
	VariableSizeItemQuantity:       "VariableSizeItemQuantity",
	VariableSizeComponentUnit:      "VariableSizeComponentUnit",
	RqmtDateIsEnteredManually:      "RqmtDateIsEnteredManually",
	SupplierProduct:                "SupplierProduct",
	MaintOrdCompPurOutlineAgrmtItm: "MaintOrdCompPurOutlineAgrmtItm",
	MaintOrderComponentInternalID:  "MaintOrderComponentInternalID",
	PurchaseRequisition:            "PurchaseRequisition",
	PurchaseRequisitionItem:        "PurchaseRequisitionItem",
	OverallLimitAmount:             "OverallLimitAmount",
	ExpectedOverallLimitAmount:     "ExpectedOverallLimitAmount",
}

var SapMaintenanceOrderOperationComponentDatumTableColumns = struct {
	MaintenanceOrder               string
	MaintenanceOrderOperation      string
	MaintenanceOrderSubOperation   string
	MaintenanceOrderComponent      string
	Reservation                    string
	ReservationItem                string
	ReservationType                string
	MaintOrderRoutingNumber        string
	MaintOrderOperationCounter     string
	Product                        string
	MaintOrdOperationComponentText string
	MaintOrdOpCompRequiredQuantity string
	BaseUnit                       string
	QuantityInUnitOfEntry          string
	UnitOfEntry                    string
	RequirementDate                string
	RequirementTime                string
	Supplier                       string
	Plant                          string
	StorageLocation                string
	MaintOrdOpCompItemCategory     string
	GoodsMovementType              string
	ReservationIsFinallyIssued     string
	MaterialGroup                  string
	ProductTypeCode                string
	ServicePerformer               string
	PerformancePeriodStartDateTime string
	PerformancePeriodStartDate     string
	PerformancePeriodEndDate       string
	PerformancePeriodEndDateTime   string
	PerformancePeriodStartTime     string
	PerformancePeriodEndTime       string
	LeanServiceDuration            string
	LeanServiceDurationUnit        string
	DistributionFunction           string
	SrvcSchedgIsAlignedWthOpWrkCtr string
	MaintOrderCompDebitCreditCode  string
	GoodsMovementIsAllowed         string
	MaintenanceOrderComponentBatch string
	QuantityIsFixed                string
	MaintOrdOpComponentGLAccount   string
	MaintOrdOpCompCostingRelevancy string
	MaintCompAltvProdUsgeRateInPct string
	MaintOrderOpComponentSortText  string
	MaintOrdOpCompIsBulkProduct    string
	MaterialProvisionType          string
	MaintOrdOpCompAssgdWBSElmntInt string
	MaintOrderOpComponentPrice     string
	MaintOrdOpComponentCurrency    string
	MatlCompIsMarkedForBackflush   string
	PurchasingGroup                string
	DeliveryTimeInDays             string
	MaintOrdOpCompGdsRecipientName string
	MaintOrdOpCompUnloadingPtTxt   string
	GoodsReceiptDurationInWorkDays string
	PurchasingInfoRecord           string
	OperationLeadTimeOffset        string
	OpsLeadTimeOffsetUnit          string
	MaintOrdOpCompRequisitioner    string
	MaintOrdOpCompProcmtTrckgNmbr  string
	ResponsiblePurchaseOrg         string
	MaintOrdOpCompSpecialStockType string
	VariableSizeDimension1         string
	VariableSizeDimensionUnit      string
	VariableSizeCompFormulaKey     string
	VariableSizeDimension2         string
	NumberOfVariableSizeItem       string
	VariableSizeDimension3         string
	VariableSizeItemQuantity       string
	VariableSizeComponentUnit      string
	RqmtDateIsEnteredManually      string
	SupplierProduct                string
	MaintOrdCompPurOutlineAgrmtItm string
	MaintOrderComponentInternalID  string
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	OverallLimitAmount             string
	ExpectedOverallLimitAmount     string
}{
	MaintenanceOrder:               "sap_maintenance_order_operation_component_data.MaintenanceOrder",
	MaintenanceOrderOperation:      "sap_maintenance_order_operation_component_data.MaintenanceOrderOperation",
	MaintenanceOrderSubOperation:   "sap_maintenance_order_operation_component_data.MaintenanceOrderSubOperation",
	MaintenanceOrderComponent:      "sap_maintenance_order_operation_component_data.MaintenanceOrderComponent",
	Reservation:                    "sap_maintenance_order_operation_component_data.Reservation",
	ReservationItem:                "sap_maintenance_order_operation_component_data.ReservationItem",
	ReservationType:                "sap_maintenance_order_operation_component_data.ReservationType",
	MaintOrderRoutingNumber:        "sap_maintenance_order_operation_component_data.MaintOrderRoutingNumber",
	MaintOrderOperationCounter:     "sap_maintenance_order_operation_component_data.MaintOrderOperationCounter",
	Product:                        "sap_maintenance_order_operation_component_data.Product",
	MaintOrdOperationComponentText: "sap_maintenance_order_operation_component_data.MaintOrdOperationComponentText",
	MaintOrdOpCompRequiredQuantity: "sap_maintenance_order_operation_component_data.MaintOrdOpCompRequiredQuantity",
	BaseUnit:                       "sap_maintenance_order_operation_component_data.BaseUnit",
	QuantityInUnitOfEntry:          "sap_maintenance_order_operation_component_data.QuantityInUnitOfEntry",
	UnitOfEntry:                    "sap_maintenance_order_operation_component_data.UnitOfEntry",
	RequirementDate:                "sap_maintenance_order_operation_component_data.RequirementDate",
	RequirementTime:                "sap_maintenance_order_operation_component_data.RequirementTime",
	Supplier:                       "sap_maintenance_order_operation_component_data.Supplier",
	Plant:                          "sap_maintenance_order_operation_component_data.Plant",
	StorageLocation:                "sap_maintenance_order_operation_component_data.StorageLocation",
	MaintOrdOpCompItemCategory:     "sap_maintenance_order_operation_component_data.MaintOrdOpCompItemCategory",
	GoodsMovementType:              "sap_maintenance_order_operation_component_data.GoodsMovementType",
	ReservationIsFinallyIssued:     "sap_maintenance_order_operation_component_data.ReservationIsFinallyIssued",
	MaterialGroup:                  "sap_maintenance_order_operation_component_data.MaterialGroup",
	ProductTypeCode:                "sap_maintenance_order_operation_component_data.ProductTypeCode",
	ServicePerformer:               "sap_maintenance_order_operation_component_data.ServicePerformer",
	PerformancePeriodStartDateTime: "sap_maintenance_order_operation_component_data.PerformancePeriodStartDateTime",
	PerformancePeriodStartDate:     "sap_maintenance_order_operation_component_data.PerformancePeriodStartDate",
	PerformancePeriodEndDate:       "sap_maintenance_order_operation_component_data.PerformancePeriodEndDate",
	PerformancePeriodEndDateTime:   "sap_maintenance_order_operation_component_data.PerformancePeriodEndDateTime",
	PerformancePeriodStartTime:     "sap_maintenance_order_operation_component_data.PerformancePeriodStartTime",
	PerformancePeriodEndTime:       "sap_maintenance_order_operation_component_data.PerformancePeriodEndTime",
	LeanServiceDuration:            "sap_maintenance_order_operation_component_data.LeanServiceDuration",
	LeanServiceDurationUnit:        "sap_maintenance_order_operation_component_data.LeanServiceDurationUnit",
	DistributionFunction:           "sap_maintenance_order_operation_component_data.DistributionFunction",
	SrvcSchedgIsAlignedWthOpWrkCtr: "sap_maintenance_order_operation_component_data.SrvcSchedgIsAlignedWthOpWrkCtr",
	MaintOrderCompDebitCreditCode:  "sap_maintenance_order_operation_component_data.MaintOrderCompDebitCreditCode",
	GoodsMovementIsAllowed:         "sap_maintenance_order_operation_component_data.GoodsMovementIsAllowed",
	MaintenanceOrderComponentBatch: "sap_maintenance_order_operation_component_data.MaintenanceOrderComponentBatch",
	QuantityIsFixed:                "sap_maintenance_order_operation_component_data.QuantityIsFixed",
	MaintOrdOpComponentGLAccount:   "sap_maintenance_order_operation_component_data.MaintOrdOpComponentGLAccount",
	MaintOrdOpCompCostingRelevancy: "sap_maintenance_order_operation_component_data.MaintOrdOpCompCostingRelevancy",
	MaintCompAltvProdUsgeRateInPct: "sap_maintenance_order_operation_component_data.MaintCompAltvProdUsgeRateInPct",
	MaintOrderOpComponentSortText:  "sap_maintenance_order_operation_component_data.MaintOrderOpComponentSortText",
	MaintOrdOpCompIsBulkProduct:    "sap_maintenance_order_operation_component_data.MaintOrdOpCompIsBulkProduct",
	MaterialProvisionType:          "sap_maintenance_order_operation_component_data.MaterialProvisionType",
	MaintOrdOpCompAssgdWBSElmntInt: "sap_maintenance_order_operation_component_data.MaintOrdOpCompAssgdWBSElmntInt",
	MaintOrderOpComponentPrice:     "sap_maintenance_order_operation_component_data.MaintOrderOpComponentPrice",
	MaintOrdOpComponentCurrency:    "sap_maintenance_order_operation_component_data.MaintOrdOpComponentCurrency",
	MatlCompIsMarkedForBackflush:   "sap_maintenance_order_operation_component_data.MatlCompIsMarkedForBackflush",
	PurchasingGroup:                "sap_maintenance_order_operation_component_data.PurchasingGroup",
	DeliveryTimeInDays:             "sap_maintenance_order_operation_component_data.DeliveryTimeInDays",
	MaintOrdOpCompGdsRecipientName: "sap_maintenance_order_operation_component_data.MaintOrdOpCompGdsRecipientName",
	MaintOrdOpCompUnloadingPtTxt:   "sap_maintenance_order_operation_component_data.MaintOrdOpCompUnloadingPtTxt",
	GoodsReceiptDurationInWorkDays: "sap_maintenance_order_operation_component_data.GoodsReceiptDurationInWorkDays",
	PurchasingInfoRecord:           "sap_maintenance_order_operation_component_data.PurchasingInfoRecord",
	OperationLeadTimeOffset:        "sap_maintenance_order_operation_component_data.OperationLeadTimeOffset",
	OpsLeadTimeOffsetUnit:          "sap_maintenance_order_operation_component_data.OpsLeadTimeOffsetUnit",
	MaintOrdOpCompRequisitioner:    "sap_maintenance_order_operation_component_data.MaintOrdOpCompRequisitioner",
	MaintOrdOpCompProcmtTrckgNmbr:  "sap_maintenance_order_operation_component_data.MaintOrdOpCompProcmtTrckgNmbr",
	ResponsiblePurchaseOrg:         "sap_maintenance_order_operation_component_data.ResponsiblePurchaseOrg",
	MaintOrdOpCompSpecialStockType: "sap_maintenance_order_operation_component_data.MaintOrdOpCompSpecialStockType",
	VariableSizeDimension1:         "sap_maintenance_order_operation_component_data.VariableSizeDimension1",
	VariableSizeDimensionUnit:      "sap_maintenance_order_operation_component_data.VariableSizeDimensionUnit",
	VariableSizeCompFormulaKey:     "sap_maintenance_order_operation_component_data.VariableSizeCompFormulaKey",
	VariableSizeDimension2:         "sap_maintenance_order_operation_component_data.VariableSizeDimension2",
	NumberOfVariableSizeItem:       "sap_maintenance_order_operation_component_data.NumberOfVariableSizeItem",
	VariableSizeDimension3:         "sap_maintenance_order_operation_component_data.VariableSizeDimension3",
	VariableSizeItemQuantity:       "sap_maintenance_order_operation_component_data.VariableSizeItemQuantity",
	VariableSizeComponentUnit:      "sap_maintenance_order_operation_component_data.VariableSizeComponentUnit",
	RqmtDateIsEnteredManually:      "sap_maintenance_order_operation_component_data.RqmtDateIsEnteredManually",
	SupplierProduct:                "sap_maintenance_order_operation_component_data.SupplierProduct",
	MaintOrdCompPurOutlineAgrmtItm: "sap_maintenance_order_operation_component_data.MaintOrdCompPurOutlineAgrmtItm",
	MaintOrderComponentInternalID:  "sap_maintenance_order_operation_component_data.MaintOrderComponentInternalID",
	PurchaseRequisition:            "sap_maintenance_order_operation_component_data.PurchaseRequisition",
	PurchaseRequisitionItem:        "sap_maintenance_order_operation_component_data.PurchaseRequisitionItem",
	OverallLimitAmount:             "sap_maintenance_order_operation_component_data.OverallLimitAmount",
	ExpectedOverallLimitAmount:     "sap_maintenance_order_operation_component_data.ExpectedOverallLimitAmount",
}

// Generated where

var SapMaintenanceOrderOperationComponentDatumWhere = struct {
	MaintenanceOrder               whereHelperstring
	MaintenanceOrderOperation      whereHelperstring
	MaintenanceOrderSubOperation   whereHelperstring
	MaintenanceOrderComponent      whereHelperstring
	Reservation                    whereHelpernull_String
	ReservationItem                whereHelpernull_String
	ReservationType                whereHelpernull_String
	MaintOrderRoutingNumber        whereHelpernull_String
	MaintOrderOperationCounter     whereHelpernull_String
	Product                        whereHelpernull_String
	MaintOrdOperationComponentText whereHelpernull_String
	MaintOrdOpCompRequiredQuantity whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	QuantityInUnitOfEntry          whereHelpernull_String
	UnitOfEntry                    whereHelpernull_String
	RequirementDate                whereHelpernull_String
	RequirementTime                whereHelpernull_String
	Supplier                       whereHelpernull_String
	Plant                          whereHelpernull_String
	StorageLocation                whereHelpernull_String
	MaintOrdOpCompItemCategory     whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
	ReservationIsFinallyIssued     whereHelpernull_Bool
	MaterialGroup                  whereHelpernull_String
	ProductTypeCode                whereHelpernull_String
	ServicePerformer               whereHelpernull_String
	PerformancePeriodStartDateTime whereHelpernull_String
	PerformancePeriodStartDate     whereHelpernull_String
	PerformancePeriodEndDate       whereHelpernull_String
	PerformancePeriodEndDateTime   whereHelpernull_String
	PerformancePeriodStartTime     whereHelpernull_String
	PerformancePeriodEndTime       whereHelpernull_String
	LeanServiceDuration            whereHelpernull_String
	LeanServiceDurationUnit        whereHelpernull_String
	DistributionFunction           whereHelpernull_String
	SrvcSchedgIsAlignedWthOpWrkCtr whereHelpernull_String
	MaintOrderCompDebitCreditCode  whereHelpernull_String
	GoodsMovementIsAllowed         whereHelpernull_Bool
	MaintenanceOrderComponentBatch whereHelpernull_String
	QuantityIsFixed                whereHelpernull_Bool
	MaintOrdOpComponentGLAccount   whereHelpernull_String
	MaintOrdOpCompCostingRelevancy whereHelpernull_String
	MaintCompAltvProdUsgeRateInPct whereHelpernull_String
	MaintOrderOpComponentSortText  whereHelpernull_String
	MaintOrdOpCompIsBulkProduct    whereHelpernull_Bool
	MaterialProvisionType          whereHelpernull_String
	MaintOrdOpCompAssgdWBSElmntInt whereHelpernull_String
	MaintOrderOpComponentPrice     whereHelpernull_String
	MaintOrdOpComponentCurrency    whereHelpernull_String
	MatlCompIsMarkedForBackflush   whereHelpernull_Bool
	PurchasingGroup                whereHelpernull_String
	DeliveryTimeInDays             whereHelpernull_String
	MaintOrdOpCompGdsRecipientName whereHelpernull_String
	MaintOrdOpCompUnloadingPtTxt   whereHelpernull_String
	GoodsReceiptDurationInWorkDays whereHelpernull_String
	PurchasingInfoRecord           whereHelpernull_String
	OperationLeadTimeOffset        whereHelpernull_String
	OpsLeadTimeOffsetUnit          whereHelpernull_String
	MaintOrdOpCompRequisitioner    whereHelpernull_String
	MaintOrdOpCompProcmtTrckgNmbr  whereHelpernull_String
	ResponsiblePurchaseOrg         whereHelpernull_String
	MaintOrdOpCompSpecialStockType whereHelpernull_String
	VariableSizeDimension1         whereHelpernull_String
	VariableSizeDimensionUnit      whereHelpernull_String
	VariableSizeCompFormulaKey     whereHelpernull_String
	VariableSizeDimension2         whereHelpernull_String
	NumberOfVariableSizeItem       whereHelpernull_Int
	VariableSizeDimension3         whereHelpernull_String
	VariableSizeItemQuantity       whereHelpernull_String
	VariableSizeComponentUnit      whereHelpernull_String
	RqmtDateIsEnteredManually      whereHelpernull_Bool
	SupplierProduct                whereHelpernull_String
	MaintOrdCompPurOutlineAgrmtItm whereHelpernull_String
	MaintOrderComponentInternalID  whereHelpernull_String
	PurchaseRequisition            whereHelpernull_String
	PurchaseRequisitionItem        whereHelpernull_String
	OverallLimitAmount             whereHelpernull_String
	ExpectedOverallLimitAmount     whereHelpernull_String
}{
	MaintenanceOrder:               whereHelperstring{field: "`sap_maintenance_order_operation_component_data`.`MaintenanceOrder`"},
	MaintenanceOrderOperation:      whereHelperstring{field: "`sap_maintenance_order_operation_component_data`.`MaintenanceOrderOperation`"},
	MaintenanceOrderSubOperation:   whereHelperstring{field: "`sap_maintenance_order_operation_component_data`.`MaintenanceOrderSubOperation`"},
	MaintenanceOrderComponent:      whereHelperstring{field: "`sap_maintenance_order_operation_component_data`.`MaintenanceOrderComponent`"},
	Reservation:                    whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`Reservation`"},
	ReservationItem:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`ReservationItem`"},
	ReservationType:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`ReservationType`"},
	MaintOrderRoutingNumber:        whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrderRoutingNumber`"},
	MaintOrderOperationCounter:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrderOperationCounter`"},
	Product:                        whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`Product`"},
	MaintOrdOperationComponentText: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOperationComponentText`"},
	MaintOrdOpCompRequiredQuantity: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompRequiredQuantity`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`BaseUnit`"},
	QuantityInUnitOfEntry:          whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`QuantityInUnitOfEntry`"},
	UnitOfEntry:                    whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`UnitOfEntry`"},
	RequirementDate:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`RequirementDate`"},
	RequirementTime:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`RequirementTime`"},
	Supplier:                       whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`Supplier`"},
	Plant:                          whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`Plant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`StorageLocation`"},
	MaintOrdOpCompItemCategory:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompItemCategory`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`GoodsMovementType`"},
	ReservationIsFinallyIssued:     whereHelpernull_Bool{field: "`sap_maintenance_order_operation_component_data`.`ReservationIsFinallyIssued`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaterialGroup`"},
	ProductTypeCode:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`ProductTypeCode`"},
	ServicePerformer:               whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`ServicePerformer`"},
	PerformancePeriodStartDateTime: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PerformancePeriodStartDateTime`"},
	PerformancePeriodStartDate:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PerformancePeriodStartDate`"},
	PerformancePeriodEndDate:       whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PerformancePeriodEndDate`"},
	PerformancePeriodEndDateTime:   whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PerformancePeriodEndDateTime`"},
	PerformancePeriodStartTime:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PerformancePeriodStartTime`"},
	PerformancePeriodEndTime:       whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PerformancePeriodEndTime`"},
	LeanServiceDuration:            whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`LeanServiceDuration`"},
	LeanServiceDurationUnit:        whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`LeanServiceDurationUnit`"},
	DistributionFunction:           whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`DistributionFunction`"},
	SrvcSchedgIsAlignedWthOpWrkCtr: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`SrvcSchedgIsAlignedWthOpWrkCtr`"},
	MaintOrderCompDebitCreditCode:  whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrderCompDebitCreditCode`"},
	GoodsMovementIsAllowed:         whereHelpernull_Bool{field: "`sap_maintenance_order_operation_component_data`.`GoodsMovementIsAllowed`"},
	MaintenanceOrderComponentBatch: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintenanceOrderComponentBatch`"},
	QuantityIsFixed:                whereHelpernull_Bool{field: "`sap_maintenance_order_operation_component_data`.`QuantityIsFixed`"},
	MaintOrdOpComponentGLAccount:   whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpComponentGLAccount`"},
	MaintOrdOpCompCostingRelevancy: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompCostingRelevancy`"},
	MaintCompAltvProdUsgeRateInPct: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintCompAltvProdUsgeRateInPct`"},
	MaintOrderOpComponentSortText:  whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrderOpComponentSortText`"},
	MaintOrdOpCompIsBulkProduct:    whereHelpernull_Bool{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompIsBulkProduct`"},
	MaterialProvisionType:          whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaterialProvisionType`"},
	MaintOrdOpCompAssgdWBSElmntInt: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompAssgdWBSElmntInt`"},
	MaintOrderOpComponentPrice:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrderOpComponentPrice`"},
	MaintOrdOpComponentCurrency:    whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpComponentCurrency`"},
	MatlCompIsMarkedForBackflush:   whereHelpernull_Bool{field: "`sap_maintenance_order_operation_component_data`.`MatlCompIsMarkedForBackflush`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PurchasingGroup`"},
	DeliveryTimeInDays:             whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`DeliveryTimeInDays`"},
	MaintOrdOpCompGdsRecipientName: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompGdsRecipientName`"},
	MaintOrdOpCompUnloadingPtTxt:   whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompUnloadingPtTxt`"},
	GoodsReceiptDurationInWorkDays: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`GoodsReceiptDurationInWorkDays`"},
	PurchasingInfoRecord:           whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PurchasingInfoRecord`"},
	OperationLeadTimeOffset:        whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`OperationLeadTimeOffset`"},
	OpsLeadTimeOffsetUnit:          whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`OpsLeadTimeOffsetUnit`"},
	MaintOrdOpCompRequisitioner:    whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompRequisitioner`"},
	MaintOrdOpCompProcmtTrckgNmbr:  whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompProcmtTrckgNmbr`"},
	ResponsiblePurchaseOrg:         whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`ResponsiblePurchaseOrg`"},
	MaintOrdOpCompSpecialStockType: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdOpCompSpecialStockType`"},
	VariableSizeDimension1:         whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeDimension1`"},
	VariableSizeDimensionUnit:      whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeDimensionUnit`"},
	VariableSizeCompFormulaKey:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeCompFormulaKey`"},
	VariableSizeDimension2:         whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeDimension2`"},
	NumberOfVariableSizeItem:       whereHelpernull_Int{field: "`sap_maintenance_order_operation_component_data`.`NumberOfVariableSizeItem`"},
	VariableSizeDimension3:         whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeDimension3`"},
	VariableSizeItemQuantity:       whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeItemQuantity`"},
	VariableSizeComponentUnit:      whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`VariableSizeComponentUnit`"},
	RqmtDateIsEnteredManually:      whereHelpernull_Bool{field: "`sap_maintenance_order_operation_component_data`.`RqmtDateIsEnteredManually`"},
	SupplierProduct:                whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`SupplierProduct`"},
	MaintOrdCompPurOutlineAgrmtItm: whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrdCompPurOutlineAgrmtItm`"},
	MaintOrderComponentInternalID:  whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`MaintOrderComponentInternalID`"},
	PurchaseRequisition:            whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PurchaseRequisition`"},
	PurchaseRequisitionItem:        whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`PurchaseRequisitionItem`"},
	OverallLimitAmount:             whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`OverallLimitAmount`"},
	ExpectedOverallLimitAmount:     whereHelpernull_String{field: "`sap_maintenance_order_operation_component_data`.`ExpectedOverallLimitAmount`"},
}

// SapMaintenanceOrderOperationComponentDatumRels is where relationship names are stored.
var SapMaintenanceOrderOperationComponentDatumRels = struct {
	MaintenanceOrderSapMaintenanceOrderHeaderDatum string
}{
	MaintenanceOrderSapMaintenanceOrderHeaderDatum: "MaintenanceOrderSapMaintenanceOrderHeaderDatum",
}

// sapMaintenanceOrderOperationComponentDatumR is where relationships are stored.
type sapMaintenanceOrderOperationComponentDatumR struct {
	MaintenanceOrderSapMaintenanceOrderHeaderDatum *SapMaintenanceOrderHeaderDatum `boil:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" json:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" toml:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" yaml:"MaintenanceOrderSapMaintenanceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceOrderOperationComponentDatumR) NewStruct() *sapMaintenanceOrderOperationComponentDatumR {
	return &sapMaintenanceOrderOperationComponentDatumR{}
}

func (r *sapMaintenanceOrderOperationComponentDatumR) GetMaintenanceOrderSapMaintenanceOrderHeaderDatum() *SapMaintenanceOrderHeaderDatum {
	if r == nil {
		return nil
	}
	return r.MaintenanceOrderSapMaintenanceOrderHeaderDatum
}

// sapMaintenanceOrderOperationComponentDatumL is where Load methods for each relationship are stored.
type sapMaintenanceOrderOperationComponentDatumL struct{}

var (
	sapMaintenanceOrderOperationComponentDatumAllColumns            = []string{"MaintenanceOrder", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "MaintenanceOrderComponent", "Reservation", "ReservationItem", "ReservationType", "MaintOrderRoutingNumber", "MaintOrderOperationCounter", "Product", "MaintOrdOperationComponentText", "MaintOrdOpCompRequiredQuantity", "BaseUnit", "QuantityInUnitOfEntry", "UnitOfEntry", "RequirementDate", "RequirementTime", "Supplier", "Plant", "StorageLocation", "MaintOrdOpCompItemCategory", "GoodsMovementType", "ReservationIsFinallyIssued", "MaterialGroup", "ProductTypeCode", "ServicePerformer", "PerformancePeriodStartDateTime", "PerformancePeriodStartDate", "PerformancePeriodEndDate", "PerformancePeriodEndDateTime", "PerformancePeriodStartTime", "PerformancePeriodEndTime", "LeanServiceDuration", "LeanServiceDurationUnit", "DistributionFunction", "SrvcSchedgIsAlignedWthOpWrkCtr", "MaintOrderCompDebitCreditCode", "GoodsMovementIsAllowed", "MaintenanceOrderComponentBatch", "QuantityIsFixed", "MaintOrdOpComponentGLAccount", "MaintOrdOpCompCostingRelevancy", "MaintCompAltvProdUsgeRateInPct", "MaintOrderOpComponentSortText", "MaintOrdOpCompIsBulkProduct", "MaterialProvisionType", "MaintOrdOpCompAssgdWBSElmntInt", "MaintOrderOpComponentPrice", "MaintOrdOpComponentCurrency", "MatlCompIsMarkedForBackflush", "PurchasingGroup", "DeliveryTimeInDays", "MaintOrdOpCompGdsRecipientName", "MaintOrdOpCompUnloadingPtTxt", "GoodsReceiptDurationInWorkDays", "PurchasingInfoRecord", "OperationLeadTimeOffset", "OpsLeadTimeOffsetUnit", "MaintOrdOpCompRequisitioner", "MaintOrdOpCompProcmtTrckgNmbr", "ResponsiblePurchaseOrg", "MaintOrdOpCompSpecialStockType", "VariableSizeDimension1", "VariableSizeDimensionUnit", "VariableSizeCompFormulaKey", "VariableSizeDimension2", "NumberOfVariableSizeItem", "VariableSizeDimension3", "VariableSizeItemQuantity", "VariableSizeComponentUnit", "RqmtDateIsEnteredManually", "SupplierProduct", "MaintOrdCompPurOutlineAgrmtItm", "MaintOrderComponentInternalID", "PurchaseRequisition", "PurchaseRequisitionItem", "OverallLimitAmount", "ExpectedOverallLimitAmount"}
	sapMaintenanceOrderOperationComponentDatumColumnsWithoutDefault = []string{"MaintenanceOrder", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "MaintenanceOrderComponent", "Reservation", "ReservationItem", "ReservationType", "MaintOrderRoutingNumber", "MaintOrderOperationCounter", "Product", "MaintOrdOperationComponentText", "MaintOrdOpCompRequiredQuantity", "BaseUnit", "QuantityInUnitOfEntry", "UnitOfEntry", "RequirementDate", "RequirementTime", "Supplier", "Plant", "StorageLocation", "MaintOrdOpCompItemCategory", "GoodsMovementType", "ReservationIsFinallyIssued", "MaterialGroup", "ProductTypeCode", "ServicePerformer", "PerformancePeriodStartDateTime", "PerformancePeriodStartDate", "PerformancePeriodEndDate", "PerformancePeriodEndDateTime", "PerformancePeriodStartTime", "PerformancePeriodEndTime", "LeanServiceDuration", "LeanServiceDurationUnit", "DistributionFunction", "SrvcSchedgIsAlignedWthOpWrkCtr", "MaintOrderCompDebitCreditCode", "GoodsMovementIsAllowed", "MaintenanceOrderComponentBatch", "QuantityIsFixed", "MaintOrdOpComponentGLAccount", "MaintOrdOpCompCostingRelevancy", "MaintCompAltvProdUsgeRateInPct", "MaintOrderOpComponentSortText", "MaintOrdOpCompIsBulkProduct", "MaterialProvisionType", "MaintOrdOpCompAssgdWBSElmntInt", "MaintOrderOpComponentPrice", "MaintOrdOpComponentCurrency", "MatlCompIsMarkedForBackflush", "PurchasingGroup", "DeliveryTimeInDays", "MaintOrdOpCompGdsRecipientName", "MaintOrdOpCompUnloadingPtTxt", "GoodsReceiptDurationInWorkDays", "PurchasingInfoRecord", "OperationLeadTimeOffset", "OpsLeadTimeOffsetUnit", "MaintOrdOpCompRequisitioner", "MaintOrdOpCompProcmtTrckgNmbr", "ResponsiblePurchaseOrg", "MaintOrdOpCompSpecialStockType", "VariableSizeDimension1", "VariableSizeDimensionUnit", "VariableSizeCompFormulaKey", "VariableSizeDimension2", "NumberOfVariableSizeItem", "VariableSizeDimension3", "VariableSizeItemQuantity", "VariableSizeComponentUnit", "RqmtDateIsEnteredManually", "SupplierProduct", "MaintOrdCompPurOutlineAgrmtItm", "MaintOrderComponentInternalID", "PurchaseRequisition", "PurchaseRequisitionItem", "OverallLimitAmount", "ExpectedOverallLimitAmount"}
	sapMaintenanceOrderOperationComponentDatumColumnsWithDefault    = []string{}
	sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns     = []string{"MaintenanceOrder", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "MaintenanceOrderComponent"}
	sapMaintenanceOrderOperationComponentDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceOrderOperationComponentDatumSlice is an alias for a slice of pointers to SapMaintenanceOrderOperationComponentDatum.
	// This should almost always be used instead of []SapMaintenanceOrderOperationComponentDatum.
	SapMaintenanceOrderOperationComponentDatumSlice []*SapMaintenanceOrderOperationComponentDatum
	// SapMaintenanceOrderOperationComponentDatumHook is the signature for custom SapMaintenanceOrderOperationComponentDatum hook methods
	SapMaintenanceOrderOperationComponentDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceOrderOperationComponentDatum) error

	sapMaintenanceOrderOperationComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceOrderOperationComponentDatumType                 = reflect.TypeOf(&SapMaintenanceOrderOperationComponentDatum{})
	sapMaintenanceOrderOperationComponentDatumMapping              = queries.MakeStructMapping(sapMaintenanceOrderOperationComponentDatumType)
	sapMaintenanceOrderOperationComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns)
	sapMaintenanceOrderOperationComponentDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceOrderOperationComponentDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceOrderOperationComponentDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceOrderOperationComponentDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceOrderOperationComponentDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceOrderOperationComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceOrderOperationComponentDatumAfterSelectHooks []SapMaintenanceOrderOperationComponentDatumHook

var sapMaintenanceOrderOperationComponentDatumBeforeInsertHooks []SapMaintenanceOrderOperationComponentDatumHook
var sapMaintenanceOrderOperationComponentDatumAfterInsertHooks []SapMaintenanceOrderOperationComponentDatumHook

var sapMaintenanceOrderOperationComponentDatumBeforeUpdateHooks []SapMaintenanceOrderOperationComponentDatumHook
var sapMaintenanceOrderOperationComponentDatumAfterUpdateHooks []SapMaintenanceOrderOperationComponentDatumHook

var sapMaintenanceOrderOperationComponentDatumBeforeDeleteHooks []SapMaintenanceOrderOperationComponentDatumHook
var sapMaintenanceOrderOperationComponentDatumAfterDeleteHooks []SapMaintenanceOrderOperationComponentDatumHook

var sapMaintenanceOrderOperationComponentDatumBeforeUpsertHooks []SapMaintenanceOrderOperationComponentDatumHook
var sapMaintenanceOrderOperationComponentDatumAfterUpsertHooks []SapMaintenanceOrderOperationComponentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceOrderOperationComponentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationComponentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceOrderOperationComponentDatumHook registers your hook function for all future operations.
func AddSapMaintenanceOrderOperationComponentDatumHook(hookPoint boil.HookPoint, sapMaintenanceOrderOperationComponentDatumHook SapMaintenanceOrderOperationComponentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceOrderOperationComponentDatumAfterSelectHooks = append(sapMaintenanceOrderOperationComponentDatumAfterSelectHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceOrderOperationComponentDatumBeforeInsertHooks = append(sapMaintenanceOrderOperationComponentDatumBeforeInsertHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceOrderOperationComponentDatumAfterInsertHooks = append(sapMaintenanceOrderOperationComponentDatumAfterInsertHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceOrderOperationComponentDatumBeforeUpdateHooks = append(sapMaintenanceOrderOperationComponentDatumBeforeUpdateHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceOrderOperationComponentDatumAfterUpdateHooks = append(sapMaintenanceOrderOperationComponentDatumAfterUpdateHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceOrderOperationComponentDatumBeforeDeleteHooks = append(sapMaintenanceOrderOperationComponentDatumBeforeDeleteHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceOrderOperationComponentDatumAfterDeleteHooks = append(sapMaintenanceOrderOperationComponentDatumAfterDeleteHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceOrderOperationComponentDatumBeforeUpsertHooks = append(sapMaintenanceOrderOperationComponentDatumBeforeUpsertHooks, sapMaintenanceOrderOperationComponentDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceOrderOperationComponentDatumAfterUpsertHooks = append(sapMaintenanceOrderOperationComponentDatumAfterUpsertHooks, sapMaintenanceOrderOperationComponentDatumHook)
	}
}

// One returns a single sapMaintenanceOrderOperationComponentDatum record from the query.
func (q sapMaintenanceOrderOperationComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceOrderOperationComponentDatum, error) {
	o := &SapMaintenanceOrderOperationComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_order_operation_component_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceOrderOperationComponentDatum records from the query.
func (q sapMaintenanceOrderOperationComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceOrderOperationComponentDatumSlice, error) {
	var o []*SapMaintenanceOrderOperationComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceOrderOperationComponentDatum slice")
	}

	if len(sapMaintenanceOrderOperationComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceOrderOperationComponentDatum records in the query.
func (q sapMaintenanceOrderOperationComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_order_operation_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceOrderOperationComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_order_operation_component_data exists")
	}

	return count > 0, nil
}

// MaintenanceOrderSapMaintenanceOrderHeaderDatum pointed to by the foreign key.
func (o *SapMaintenanceOrderOperationComponentDatum) MaintenanceOrderSapMaintenanceOrderHeaderDatum(mods ...qm.QueryMod) sapMaintenanceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenanceOrder` = ?", o.MaintenanceOrder),
	}

	queryMods = append(queryMods, mods...)

	return SapMaintenanceOrderHeaderData(queryMods...)
}

// LoadMaintenanceOrderSapMaintenanceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenanceOrderOperationComponentDatumL) LoadMaintenanceOrderSapMaintenanceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceOrderOperationComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceOrderOperationComponentDatum
	var object *SapMaintenanceOrderOperationComponentDatum

	if singular {
		object = maybeSapMaintenanceOrderOperationComponentDatum.(*SapMaintenanceOrderOperationComponentDatum)
	} else {
		slice = *maybeSapMaintenanceOrderOperationComponentDatum.(*[]*SapMaintenanceOrderOperationComponentDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceOrderOperationComponentDatumR{}
		}
		args = append(args, object.MaintenanceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceOrderOperationComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceOrder {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_order_header_data`),
		qm.WhereIn(`sap_maintenance_order_header_data.MaintenanceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenanceOrderHeaderDatum")
	}

	var resultSlice []*SapMaintenanceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenanceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_order_header_data")
	}

	if len(sapMaintenanceOrderOperationComponentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenanceOrderHeaderDatumR{}
		}
		foreign.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData = append(foreign.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenanceOrder == foreign.MaintenanceOrder {
				local.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenanceOrderHeaderDatumR{}
				}
				foreign.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData = append(foreign.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenanceOrderSapMaintenanceOrderHeaderDatum of the sapMaintenanceOrderOperationComponentDatum to the related item.
// Sets o.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum to related.
// Adds o to related.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData.
func (o *SapMaintenanceOrderOperationComponentDatum) SetMaintenanceOrderSapMaintenanceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenanceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_order_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenanceOrder, o.MaintenanceOrder, o.MaintenanceOrderOperation, o.MaintenanceOrderSubOperation, o.MaintenanceOrderComponent}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenanceOrder = related.MaintenanceOrder
	if o.R == nil {
		o.R = &sapMaintenanceOrderOperationComponentDatumR{
			MaintenanceOrderSapMaintenanceOrderHeaderDatum: related,
		}
	} else {
		o.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenanceOrderHeaderDatumR{
			MaintenanceOrderSapMaintenanceOrderOperationComponentData: SapMaintenanceOrderOperationComponentDatumSlice{o},
		}
	} else {
		related.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData = append(related.R.MaintenanceOrderSapMaintenanceOrderOperationComponentData, o)
	}

	return nil
}

// SapMaintenanceOrderOperationComponentData retrieves all the records using an executor.
func SapMaintenanceOrderOperationComponentData(mods ...qm.QueryMod) sapMaintenanceOrderOperationComponentDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_order_operation_component_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_maintenance_order_operation_component_data`.*"})
	}

	return sapMaintenanceOrderOperationComponentDatumQuery{q}
}

// FindSapMaintenanceOrderOperationComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceOrderOperationComponentDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, maintenanceOrderOperation string, maintenanceOrderSubOperation string, maintenanceOrderComponent string, selectCols ...string) (*SapMaintenanceOrderOperationComponentDatum, error) {
	sapMaintenanceOrderOperationComponentDatumObj := &SapMaintenanceOrderOperationComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_order_operation_component_data` where `MaintenanceOrder`=? AND `MaintenanceOrderOperation`=? AND `MaintenanceOrderSubOperation`=? AND `MaintenanceOrderComponent`=?", sel,
	)

	q := queries.Raw(query, maintenanceOrder, maintenanceOrderOperation, maintenanceOrderSubOperation, maintenanceOrderComponent)

	err := q.Bind(ctx, exec, sapMaintenanceOrderOperationComponentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_order_operation_component_data")
	}

	if err = sapMaintenanceOrderOperationComponentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceOrderOperationComponentDatumObj, err
	}

	return sapMaintenanceOrderOperationComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceOrderOperationComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_operation_component_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderOperationComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceOrderOperationComponentDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderOperationComponentDatumInsertCache[key]
	sapMaintenanceOrderOperationComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceOrderOperationComponentDatumAllColumns,
			sapMaintenanceOrderOperationComponentDatumColumnsWithDefault,
			sapMaintenanceOrderOperationComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_order_operation_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_order_operation_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_order_operation_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_order_operation_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceOrder,
		o.MaintenanceOrderOperation,
		o.MaintenanceOrderSubOperation,
		o.MaintenanceOrderComponent,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_operation_component_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderOperationComponentDatumInsertCacheMut.Lock()
		sapMaintenanceOrderOperationComponentDatumInsertCache[key] = cache
		sapMaintenanceOrderOperationComponentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceOrderOperationComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceOrderOperationComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceOrderOperationComponentDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceOrderOperationComponentDatumUpdateCache[key]
	sapMaintenanceOrderOperationComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceOrderOperationComponentDatumAllColumns,
			sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_order_operation_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_order_operation_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, append(wl, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_order_operation_component_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_order_operation_component_data")
	}

	if !cached {
		sapMaintenanceOrderOperationComponentDatumUpdateCacheMut.Lock()
		sapMaintenanceOrderOperationComponentDatumUpdateCache[key] = cache
		sapMaintenanceOrderOperationComponentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceOrderOperationComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_order_operation_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_order_operation_component_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceOrderOperationComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderOperationComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_order_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceOrderOperationComponentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceOrderOperationComponentDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceOrderOperationComponentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceOrderOperationComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_operation_component_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderOperationComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceOrderOperationComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceOrderOperationComponentDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderOperationComponentDatumUpsertCache[key]
	sapMaintenanceOrderOperationComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceOrderOperationComponentDatumAllColumns,
			sapMaintenanceOrderOperationComponentDatumColumnsWithDefault,
			sapMaintenanceOrderOperationComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceOrderOperationComponentDatumAllColumns,
			sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_order_operation_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_order_operation_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_order_operation_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_order_operation_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceOrderOperationComponentDatumType, sapMaintenanceOrderOperationComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_order_operation_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_operation_component_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderOperationComponentDatumUpsertCacheMut.Lock()
		sapMaintenanceOrderOperationComponentDatumUpsertCache[key] = cache
		sapMaintenanceOrderOperationComponentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceOrderOperationComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceOrderOperationComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceOrderOperationComponentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceOrderOperationComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_order_operation_component_data` WHERE `MaintenanceOrder`=? AND `MaintenanceOrderOperation`=? AND `MaintenanceOrderSubOperation`=? AND `MaintenanceOrderComponent`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_order_operation_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_order_operation_component_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceOrderOperationComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceOrderOperationComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_order_operation_component_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_operation_component_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceOrderOperationComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceOrderOperationComponentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderOperationComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_order_operation_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceOrderOperationComponentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_operation_component_data")
	}

	if len(sapMaintenanceOrderOperationComponentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceOrderOperationComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceOrderOperationComponentDatum(ctx, exec, o.MaintenanceOrder, o.MaintenanceOrderOperation, o.MaintenanceOrderSubOperation, o.MaintenanceOrderComponent)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceOrderOperationComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceOrderOperationComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderOperationComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_order_operation_component_data`.* FROM `sap_maintenance_order_operation_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderOperationComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceOrderOperationComponentDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceOrderOperationComponentDatumExists checks if the SapMaintenanceOrderOperationComponentDatum row exists.
func SapMaintenanceOrderOperationComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, maintenanceOrderOperation string, maintenanceOrderSubOperation string, maintenanceOrderComponent string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_order_operation_component_data` where `MaintenanceOrder`=? AND `MaintenanceOrderOperation`=? AND `MaintenanceOrderSubOperation`=? AND `MaintenanceOrderComponent`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceOrder, maintenanceOrderOperation, maintenanceOrderSubOperation, maintenanceOrderComponent)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceOrder, maintenanceOrderOperation, maintenanceOrderSubOperation, maintenanceOrderComponent)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_order_operation_component_data exists")
	}

	return exists, nil
}
