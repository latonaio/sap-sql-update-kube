// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCreditMemoRequestHeaderDatum is an object representing the database table.
type SapCreditMemoRequestHeaderDatum struct {
	CreditMemoRequest              string      `boil:"CreditMemoRequest" json:"CreditMemoRequest" toml:"CreditMemoRequest" yaml:"CreditMemoRequest"`
	CreditMemoRequestType          null.String `boil:"CreditMemoRequestType" json:"CreditMemoRequestType,omitempty" toml:"CreditMemoRequestType" yaml:"CreditMemoRequestType,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision           null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                  null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderType      null.String `boil:"CustomerPurchaseOrderType" json:"CustomerPurchaseOrderType,omitempty" toml:"CustomerPurchaseOrderType" yaml:"CustomerPurchaseOrderType,omitempty"`
	CustomerPurchaseOrderDate      null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	CreditMemoRequestDate          null.String `boil:"CreditMemoRequestDate" json:"CreditMemoRequestDate,omitempty" toml:"CreditMemoRequestDate" yaml:"CreditMemoRequestDate,omitempty"`
	TotalNetAmount                 null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	SDDocumentReason               null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PricingDate                    null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	CustomerTaxClassification1     null.String `boil:"CustomerTaxClassification1" json:"CustomerTaxClassification1,omitempty" toml:"CustomerTaxClassification1" yaml:"CustomerTaxClassification1,omitempty"`
	CustomerAccountAssignmentGroup null.String `boil:"CustomerAccountAssignmentGroup" json:"CustomerAccountAssignmentGroup,omitempty" toml:"CustomerAccountAssignmentGroup" yaml:"CustomerAccountAssignmentGroup,omitempty"`
	HeaderBillingBlockReason       null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                  null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	BillingDocumentDate            null.String `boil:"BillingDocumentDate" json:"BillingDocumentDate,omitempty" toml:"BillingDocumentDate" yaml:"BillingDocumentDate,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentCategory    null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	CreditMemoReqApprovalReason    null.String `boil:"CreditMemoReqApprovalReason" json:"CreditMemoReqApprovalReason,omitempty" toml:"CreditMemoReqApprovalReason" yaml:"CreditMemoReqApprovalReason,omitempty"`
	SalesDocApprovalStatus         null.String `boil:"SalesDocApprovalStatus" json:"SalesDocApprovalStatus,omitempty" toml:"SalesDocApprovalStatus" yaml:"SalesDocApprovalStatus,omitempty"`
	OverallSDProcessStatus         null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	TotalCreditCheckStatus         null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	OverallSDDocumentRejectionSts  null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`
	OverallOrdReltdBillgStatus     null.String `boil:"OverallOrdReltdBillgStatus" json:"OverallOrdReltdBillgStatus,omitempty" toml:"OverallOrdReltdBillgStatus" yaml:"OverallOrdReltdBillgStatus,omitempty"`

	R *sapCreditMemoRequestHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCreditMemoRequestHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCreditMemoRequestHeaderDatumColumns = struct {
	CreditMemoRequest              string
	CreditMemoRequestType          string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	LastChangeDateTime             string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderType      string
	CustomerPurchaseOrderDate      string
	CreditMemoRequestDate          string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	CustomerTaxClassification1     string
	CustomerAccountAssignmentGroup string
	HeaderBillingBlockReason       string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	BillingDocumentDate            string
	ReferenceSDDocument            string
	ReferenceSDDocumentCategory    string
	CreditMemoReqApprovalReason    string
	SalesDocApprovalStatus         string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
	OverallOrdReltdBillgStatus     string
}{
	CreditMemoRequest:              "CreditMemoRequest",
	CreditMemoRequestType:          "CreditMemoRequestType",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	OrganizationDivision:           "OrganizationDivision",
	SalesGroup:                     "SalesGroup",
	SalesOffice:                    "SalesOffice",
	SalesDistrict:                  "SalesDistrict",
	SoldToParty:                    "SoldToParty",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	LastChangeDateTime:             "LastChangeDateTime",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:      "CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:      "CustomerPurchaseOrderDate",
	CreditMemoRequestDate:          "CreditMemoRequestDate",
	TotalNetAmount:                 "TotalNetAmount",
	TransactionCurrency:            "TransactionCurrency",
	SDDocumentReason:               "SDDocumentReason",
	PricingDate:                    "PricingDate",
	CustomerTaxClassification1:     "CustomerTaxClassification1",
	CustomerAccountAssignmentGroup: "CustomerAccountAssignmentGroup",
	HeaderBillingBlockReason:       "HeaderBillingBlockReason",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	PaymentMethod:                  "PaymentMethod",
	BillingDocumentDate:            "BillingDocumentDate",
	ReferenceSDDocument:            "ReferenceSDDocument",
	ReferenceSDDocumentCategory:    "ReferenceSDDocumentCategory",
	CreditMemoReqApprovalReason:    "CreditMemoReqApprovalReason",
	SalesDocApprovalStatus:         "SalesDocApprovalStatus",
	OverallSDProcessStatus:         "OverallSDProcessStatus",
	TotalCreditCheckStatus:         "TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "OverallSDDocumentRejectionSts",
	OverallOrdReltdBillgStatus:     "OverallOrdReltdBillgStatus",
}

var SapCreditMemoRequestHeaderDatumTableColumns = struct {
	CreditMemoRequest              string
	CreditMemoRequestType          string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	LastChangeDateTime             string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderType      string
	CustomerPurchaseOrderDate      string
	CreditMemoRequestDate          string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	CustomerTaxClassification1     string
	CustomerAccountAssignmentGroup string
	HeaderBillingBlockReason       string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	BillingDocumentDate            string
	ReferenceSDDocument            string
	ReferenceSDDocumentCategory    string
	CreditMemoReqApprovalReason    string
	SalesDocApprovalStatus         string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
	OverallOrdReltdBillgStatus     string
}{
	CreditMemoRequest:              "sap_credit_memo_request_header_data.CreditMemoRequest",
	CreditMemoRequestType:          "sap_credit_memo_request_header_data.CreditMemoRequestType",
	SalesOrganization:              "sap_credit_memo_request_header_data.SalesOrganization",
	DistributionChannel:            "sap_credit_memo_request_header_data.DistributionChannel",
	OrganizationDivision:           "sap_credit_memo_request_header_data.OrganizationDivision",
	SalesGroup:                     "sap_credit_memo_request_header_data.SalesGroup",
	SalesOffice:                    "sap_credit_memo_request_header_data.SalesOffice",
	SalesDistrict:                  "sap_credit_memo_request_header_data.SalesDistrict",
	SoldToParty:                    "sap_credit_memo_request_header_data.SoldToParty",
	CreationDate:                   "sap_credit_memo_request_header_data.CreationDate",
	LastChangeDate:                 "sap_credit_memo_request_header_data.LastChangeDate",
	LastChangeDateTime:             "sap_credit_memo_request_header_data.LastChangeDateTime",
	PurchaseOrderByCustomer:        "sap_credit_memo_request_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:      "sap_credit_memo_request_header_data.CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:      "sap_credit_memo_request_header_data.CustomerPurchaseOrderDate",
	CreditMemoRequestDate:          "sap_credit_memo_request_header_data.CreditMemoRequestDate",
	TotalNetAmount:                 "sap_credit_memo_request_header_data.TotalNetAmount",
	TransactionCurrency:            "sap_credit_memo_request_header_data.TransactionCurrency",
	SDDocumentReason:               "sap_credit_memo_request_header_data.SDDocumentReason",
	PricingDate:                    "sap_credit_memo_request_header_data.PricingDate",
	CustomerTaxClassification1:     "sap_credit_memo_request_header_data.CustomerTaxClassification1",
	CustomerAccountAssignmentGroup: "sap_credit_memo_request_header_data.CustomerAccountAssignmentGroup",
	HeaderBillingBlockReason:       "sap_credit_memo_request_header_data.HeaderBillingBlockReason",
	IncotermsClassification:        "sap_credit_memo_request_header_data.IncotermsClassification",
	CustomerPaymentTerms:           "sap_credit_memo_request_header_data.CustomerPaymentTerms",
	PaymentMethod:                  "sap_credit_memo_request_header_data.PaymentMethod",
	BillingDocumentDate:            "sap_credit_memo_request_header_data.BillingDocumentDate",
	ReferenceSDDocument:            "sap_credit_memo_request_header_data.ReferenceSDDocument",
	ReferenceSDDocumentCategory:    "sap_credit_memo_request_header_data.ReferenceSDDocumentCategory",
	CreditMemoReqApprovalReason:    "sap_credit_memo_request_header_data.CreditMemoReqApprovalReason",
	SalesDocApprovalStatus:         "sap_credit_memo_request_header_data.SalesDocApprovalStatus",
	OverallSDProcessStatus:         "sap_credit_memo_request_header_data.OverallSDProcessStatus",
	TotalCreditCheckStatus:         "sap_credit_memo_request_header_data.TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "sap_credit_memo_request_header_data.OverallSDDocumentRejectionSts",
	OverallOrdReltdBillgStatus:     "sap_credit_memo_request_header_data.OverallOrdReltdBillgStatus",
}

// Generated where

var SapCreditMemoRequestHeaderDatumWhere = struct {
	CreditMemoRequest              whereHelperstring
	CreditMemoRequestType          whereHelpernull_String
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	OrganizationDivision           whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SalesDistrict                  whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	CustomerPurchaseOrderType      whereHelpernull_String
	CustomerPurchaseOrderDate      whereHelpernull_String
	CreditMemoRequestDate          whereHelpernull_String
	TotalNetAmount                 whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	SDDocumentReason               whereHelpernull_String
	PricingDate                    whereHelpernull_String
	CustomerTaxClassification1     whereHelpernull_String
	CustomerAccountAssignmentGroup whereHelpernull_String
	HeaderBillingBlockReason       whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	PaymentMethod                  whereHelpernull_String
	BillingDocumentDate            whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	ReferenceSDDocumentCategory    whereHelpernull_String
	CreditMemoReqApprovalReason    whereHelpernull_String
	SalesDocApprovalStatus         whereHelpernull_String
	OverallSDProcessStatus         whereHelpernull_String
	TotalCreditCheckStatus         whereHelpernull_String
	OverallSDDocumentRejectionSts  whereHelpernull_String
	OverallOrdReltdBillgStatus     whereHelpernull_String
}{
	CreditMemoRequest:              whereHelperstring{field: "`sap_credit_memo_request_header_data`.`CreditMemoRequest`"},
	CreditMemoRequestType:          whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CreditMemoRequestType`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`DistributionChannel`"},
	OrganizationDivision:           whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`OrganizationDivision`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SalesGroup`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SalesOffice`"},
	SalesDistrict:                  whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SalesDistrict`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SoldToParty`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`LastChangeDate`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`LastChangeDateTime`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderType:      whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CustomerPurchaseOrderType`"},
	CustomerPurchaseOrderDate:      whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CustomerPurchaseOrderDate`"},
	CreditMemoRequestDate:          whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CreditMemoRequestDate`"},
	TotalNetAmount:                 whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`TotalNetAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`TransactionCurrency`"},
	SDDocumentReason:               whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SDDocumentReason`"},
	PricingDate:                    whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`PricingDate`"},
	CustomerTaxClassification1:     whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CustomerTaxClassification1`"},
	CustomerAccountAssignmentGroup: whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CustomerAccountAssignmentGroup`"},
	HeaderBillingBlockReason:       whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`HeaderBillingBlockReason`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                  whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`PaymentMethod`"},
	BillingDocumentDate:            whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`BillingDocumentDate`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentCategory:    whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`ReferenceSDDocumentCategory`"},
	CreditMemoReqApprovalReason:    whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`CreditMemoReqApprovalReason`"},
	SalesDocApprovalStatus:         whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`SalesDocApprovalStatus`"},
	OverallSDProcessStatus:         whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`OverallSDProcessStatus`"},
	TotalCreditCheckStatus:         whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`TotalCreditCheckStatus`"},
	OverallSDDocumentRejectionSts:  whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`OverallSDDocumentRejectionSts`"},
	OverallOrdReltdBillgStatus:     whereHelpernull_String{field: "`sap_credit_memo_request_header_data`.`OverallOrdReltdBillgStatus`"},
}

// SapCreditMemoRequestHeaderDatumRels is where relationship names are stored.
var SapCreditMemoRequestHeaderDatumRels = struct {
	CreditMemoRequestSapCreditMemoRequestHeaderPartnerData      string
	CreditMemoRequestSapCreditMemoRequestItemData               string
	CreditMemoRequestSapCreditMemoRequestItemPricingElementData string
}{
	CreditMemoRequestSapCreditMemoRequestHeaderPartnerData:      "CreditMemoRequestSapCreditMemoRequestHeaderPartnerData",
	CreditMemoRequestSapCreditMemoRequestItemData:               "CreditMemoRequestSapCreditMemoRequestItemData",
	CreditMemoRequestSapCreditMemoRequestItemPricingElementData: "CreditMemoRequestSapCreditMemoRequestItemPricingElementData",
}

// sapCreditMemoRequestHeaderDatumR is where relationships are stored.
type sapCreditMemoRequestHeaderDatumR struct {
	CreditMemoRequestSapCreditMemoRequestHeaderPartnerData      SapCreditMemoRequestHeaderPartnerDatumSlice      `boil:"CreditMemoRequestSapCreditMemoRequestHeaderPartnerData" json:"CreditMemoRequestSapCreditMemoRequestHeaderPartnerData" toml:"CreditMemoRequestSapCreditMemoRequestHeaderPartnerData" yaml:"CreditMemoRequestSapCreditMemoRequestHeaderPartnerData"`
	CreditMemoRequestSapCreditMemoRequestItemData               SapCreditMemoRequestItemDatumSlice               `boil:"CreditMemoRequestSapCreditMemoRequestItemData" json:"CreditMemoRequestSapCreditMemoRequestItemData" toml:"CreditMemoRequestSapCreditMemoRequestItemData" yaml:"CreditMemoRequestSapCreditMemoRequestItemData"`
	CreditMemoRequestSapCreditMemoRequestItemPricingElementData SapCreditMemoRequestItemPricingElementDatumSlice `boil:"CreditMemoRequestSapCreditMemoRequestItemPricingElementData" json:"CreditMemoRequestSapCreditMemoRequestItemPricingElementData" toml:"CreditMemoRequestSapCreditMemoRequestItemPricingElementData" yaml:"CreditMemoRequestSapCreditMemoRequestItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapCreditMemoRequestHeaderDatumR) NewStruct() *sapCreditMemoRequestHeaderDatumR {
	return &sapCreditMemoRequestHeaderDatumR{}
}

func (r *sapCreditMemoRequestHeaderDatumR) GetCreditMemoRequestSapCreditMemoRequestHeaderPartnerData() SapCreditMemoRequestHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData
}

func (r *sapCreditMemoRequestHeaderDatumR) GetCreditMemoRequestSapCreditMemoRequestItemData() SapCreditMemoRequestItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CreditMemoRequestSapCreditMemoRequestItemData
}

func (r *sapCreditMemoRequestHeaderDatumR) GetCreditMemoRequestSapCreditMemoRequestItemPricingElementData() SapCreditMemoRequestItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.CreditMemoRequestSapCreditMemoRequestItemPricingElementData
}

// sapCreditMemoRequestHeaderDatumL is where Load methods for each relationship are stored.
type sapCreditMemoRequestHeaderDatumL struct{}

var (
	sapCreditMemoRequestHeaderDatumAllColumns            = []string{"CreditMemoRequest", "CreditMemoRequestType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "LastChangeDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "CreditMemoRequestDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "CustomerTaxClassification1", "CustomerAccountAssignmentGroup", "HeaderBillingBlockReason", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "BillingDocumentDate", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "CreditMemoReqApprovalReason", "SalesDocApprovalStatus", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts", "OverallOrdReltdBillgStatus"}
	sapCreditMemoRequestHeaderDatumColumnsWithoutDefault = []string{"CreditMemoRequest", "CreditMemoRequestType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "LastChangeDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "CreditMemoRequestDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "CustomerTaxClassification1", "CustomerAccountAssignmentGroup", "HeaderBillingBlockReason", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "BillingDocumentDate", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "CreditMemoReqApprovalReason", "SalesDocApprovalStatus", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts", "OverallOrdReltdBillgStatus"}
	sapCreditMemoRequestHeaderDatumColumnsWithDefault    = []string{}
	sapCreditMemoRequestHeaderDatumPrimaryKeyColumns     = []string{"CreditMemoRequest"}
	sapCreditMemoRequestHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapCreditMemoRequestHeaderDatumSlice is an alias for a slice of pointers to SapCreditMemoRequestHeaderDatum.
	// This should almost always be used instead of []SapCreditMemoRequestHeaderDatum.
	SapCreditMemoRequestHeaderDatumSlice []*SapCreditMemoRequestHeaderDatum
	// SapCreditMemoRequestHeaderDatumHook is the signature for custom SapCreditMemoRequestHeaderDatum hook methods
	SapCreditMemoRequestHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapCreditMemoRequestHeaderDatum) error

	sapCreditMemoRequestHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCreditMemoRequestHeaderDatumType                 = reflect.TypeOf(&SapCreditMemoRequestHeaderDatum{})
	sapCreditMemoRequestHeaderDatumMapping              = queries.MakeStructMapping(sapCreditMemoRequestHeaderDatumType)
	sapCreditMemoRequestHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns)
	sapCreditMemoRequestHeaderDatumInsertCacheMut       sync.RWMutex
	sapCreditMemoRequestHeaderDatumInsertCache          = make(map[string]insertCache)
	sapCreditMemoRequestHeaderDatumUpdateCacheMut       sync.RWMutex
	sapCreditMemoRequestHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapCreditMemoRequestHeaderDatumUpsertCacheMut       sync.RWMutex
	sapCreditMemoRequestHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCreditMemoRequestHeaderDatumAfterSelectHooks []SapCreditMemoRequestHeaderDatumHook

var sapCreditMemoRequestHeaderDatumBeforeInsertHooks []SapCreditMemoRequestHeaderDatumHook
var sapCreditMemoRequestHeaderDatumAfterInsertHooks []SapCreditMemoRequestHeaderDatumHook

var sapCreditMemoRequestHeaderDatumBeforeUpdateHooks []SapCreditMemoRequestHeaderDatumHook
var sapCreditMemoRequestHeaderDatumAfterUpdateHooks []SapCreditMemoRequestHeaderDatumHook

var sapCreditMemoRequestHeaderDatumBeforeDeleteHooks []SapCreditMemoRequestHeaderDatumHook
var sapCreditMemoRequestHeaderDatumAfterDeleteHooks []SapCreditMemoRequestHeaderDatumHook

var sapCreditMemoRequestHeaderDatumBeforeUpsertHooks []SapCreditMemoRequestHeaderDatumHook
var sapCreditMemoRequestHeaderDatumAfterUpsertHooks []SapCreditMemoRequestHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCreditMemoRequestHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCreditMemoRequestHeaderDatumHook registers your hook function for all future operations.
func AddSapCreditMemoRequestHeaderDatumHook(hookPoint boil.HookPoint, sapCreditMemoRequestHeaderDatumHook SapCreditMemoRequestHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCreditMemoRequestHeaderDatumAfterSelectHooks = append(sapCreditMemoRequestHeaderDatumAfterSelectHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapCreditMemoRequestHeaderDatumBeforeInsertHooks = append(sapCreditMemoRequestHeaderDatumBeforeInsertHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.AfterInsertHook:
		sapCreditMemoRequestHeaderDatumAfterInsertHooks = append(sapCreditMemoRequestHeaderDatumAfterInsertHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapCreditMemoRequestHeaderDatumBeforeUpdateHooks = append(sapCreditMemoRequestHeaderDatumBeforeUpdateHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapCreditMemoRequestHeaderDatumAfterUpdateHooks = append(sapCreditMemoRequestHeaderDatumAfterUpdateHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapCreditMemoRequestHeaderDatumBeforeDeleteHooks = append(sapCreditMemoRequestHeaderDatumBeforeDeleteHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapCreditMemoRequestHeaderDatumAfterDeleteHooks = append(sapCreditMemoRequestHeaderDatumAfterDeleteHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapCreditMemoRequestHeaderDatumBeforeUpsertHooks = append(sapCreditMemoRequestHeaderDatumBeforeUpsertHooks, sapCreditMemoRequestHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapCreditMemoRequestHeaderDatumAfterUpsertHooks = append(sapCreditMemoRequestHeaderDatumAfterUpsertHooks, sapCreditMemoRequestHeaderDatumHook)
	}
}

// One returns a single sapCreditMemoRequestHeaderDatum record from the query.
func (q sapCreditMemoRequestHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCreditMemoRequestHeaderDatum, error) {
	o := &SapCreditMemoRequestHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_credit_memo_request_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCreditMemoRequestHeaderDatum records from the query.
func (q sapCreditMemoRequestHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCreditMemoRequestHeaderDatumSlice, error) {
	var o []*SapCreditMemoRequestHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCreditMemoRequestHeaderDatum slice")
	}

	if len(sapCreditMemoRequestHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCreditMemoRequestHeaderDatum records in the query.
func (q sapCreditMemoRequestHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_credit_memo_request_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCreditMemoRequestHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_credit_memo_request_header_data exists")
	}

	return count > 0, nil
}

// CreditMemoRequestSapCreditMemoRequestHeaderPartnerData retrieves all the sap_credit_memo_request_header_partner_datum's SapCreditMemoRequestHeaderPartnerData with an executor via CreditMemoRequest column.
func (o *SapCreditMemoRequestHeaderDatum) CreditMemoRequestSapCreditMemoRequestHeaderPartnerData(mods ...qm.QueryMod) sapCreditMemoRequestHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_credit_memo_request_header_partner_data`.`CreditMemoRequest`=?", o.CreditMemoRequest),
	)

	return SapCreditMemoRequestHeaderPartnerData(queryMods...)
}

// CreditMemoRequestSapCreditMemoRequestItemData retrieves all the sap_credit_memo_request_item_datum's SapCreditMemoRequestItemData with an executor via CreditMemoRequest column.
func (o *SapCreditMemoRequestHeaderDatum) CreditMemoRequestSapCreditMemoRequestItemData(mods ...qm.QueryMod) sapCreditMemoRequestItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_credit_memo_request_item_data`.`CreditMemoRequest`=?", o.CreditMemoRequest),
	)

	return SapCreditMemoRequestItemData(queryMods...)
}

// CreditMemoRequestSapCreditMemoRequestItemPricingElementData retrieves all the sap_credit_memo_request_item_pricing_element_datum's SapCreditMemoRequestItemPricingElementData with an executor via CreditMemoRequest column.
func (o *SapCreditMemoRequestHeaderDatum) CreditMemoRequestSapCreditMemoRequestItemPricingElementData(mods ...qm.QueryMod) sapCreditMemoRequestItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_credit_memo_request_item_pricing_element_data`.`CreditMemoRequest`=?", o.CreditMemoRequest),
	)

	return SapCreditMemoRequestItemPricingElementData(queryMods...)
}

// LoadCreditMemoRequestSapCreditMemoRequestHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCreditMemoRequestHeaderDatumL) LoadCreditMemoRequestSapCreditMemoRequestHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditMemoRequestHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditMemoRequestHeaderDatum
	var object *SapCreditMemoRequestHeaderDatum

	if singular {
		object = maybeSapCreditMemoRequestHeaderDatum.(*SapCreditMemoRequestHeaderDatum)
	} else {
		slice = *maybeSapCreditMemoRequestHeaderDatum.(*[]*SapCreditMemoRequestHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditMemoRequestHeaderDatumR{}
		}
		args = append(args, object.CreditMemoRequest)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditMemoRequestHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CreditMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.CreditMemoRequest)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_memo_request_header_partner_data`),
		qm.WhereIn(`sap_credit_memo_request_header_partner_data.CreditMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_credit_memo_request_header_partner_data")
	}

	var resultSlice []*SapCreditMemoRequestHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_credit_memo_request_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_credit_memo_request_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_memo_request_header_partner_data")
	}

	if len(sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCreditMemoRequestHeaderPartnerDatumR{}
			}
			foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CreditMemoRequest == foreign.CreditMemoRequest {
				local.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData = append(local.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCreditMemoRequestHeaderPartnerDatumR{}
				}
				foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCreditMemoRequestSapCreditMemoRequestItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCreditMemoRequestHeaderDatumL) LoadCreditMemoRequestSapCreditMemoRequestItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditMemoRequestHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditMemoRequestHeaderDatum
	var object *SapCreditMemoRequestHeaderDatum

	if singular {
		object = maybeSapCreditMemoRequestHeaderDatum.(*SapCreditMemoRequestHeaderDatum)
	} else {
		slice = *maybeSapCreditMemoRequestHeaderDatum.(*[]*SapCreditMemoRequestHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditMemoRequestHeaderDatumR{}
		}
		args = append(args, object.CreditMemoRequest)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditMemoRequestHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CreditMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.CreditMemoRequest)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_memo_request_item_data`),
		qm.WhereIn(`sap_credit_memo_request_item_data.CreditMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_credit_memo_request_item_data")
	}

	var resultSlice []*SapCreditMemoRequestItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_credit_memo_request_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_credit_memo_request_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_memo_request_item_data")
	}

	if len(sapCreditMemoRequestItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreditMemoRequestSapCreditMemoRequestItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCreditMemoRequestItemDatumR{}
			}
			foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CreditMemoRequest == foreign.CreditMemoRequest {
				local.R.CreditMemoRequestSapCreditMemoRequestItemData = append(local.R.CreditMemoRequestSapCreditMemoRequestItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCreditMemoRequestItemDatumR{}
				}
				foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCreditMemoRequestSapCreditMemoRequestItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCreditMemoRequestHeaderDatumL) LoadCreditMemoRequestSapCreditMemoRequestItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditMemoRequestHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditMemoRequestHeaderDatum
	var object *SapCreditMemoRequestHeaderDatum

	if singular {
		object = maybeSapCreditMemoRequestHeaderDatum.(*SapCreditMemoRequestHeaderDatum)
	} else {
		slice = *maybeSapCreditMemoRequestHeaderDatum.(*[]*SapCreditMemoRequestHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditMemoRequestHeaderDatumR{}
		}
		args = append(args, object.CreditMemoRequest)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditMemoRequestHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CreditMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.CreditMemoRequest)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_memo_request_item_pricing_element_data`),
		qm.WhereIn(`sap_credit_memo_request_item_pricing_element_data.CreditMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_credit_memo_request_item_pricing_element_data")
	}

	var resultSlice []*SapCreditMemoRequestItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_credit_memo_request_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_credit_memo_request_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_memo_request_item_pricing_element_data")
	}

	if len(sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCreditMemoRequestItemPricingElementDatumR{}
			}
			foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CreditMemoRequest == foreign.CreditMemoRequest {
				local.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData = append(local.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCreditMemoRequestItemPricingElementDatumR{}
				}
				foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddCreditMemoRequestSapCreditMemoRequestHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_credit_memo_request_header_datum, optionally inserting them as new records.
// Appends related to o.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData.
// Sets related.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum appropriately.
func (o *SapCreditMemoRequestHeaderDatum) AddCreditMemoRequestSapCreditMemoRequestHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCreditMemoRequestHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreditMemoRequest = o.CreditMemoRequest
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_credit_memo_request_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CreditMemoRequest"}),
				strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CreditMemoRequest, rel.CreditMemoRequest, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreditMemoRequest = o.CreditMemoRequest
		}
	}

	if o.R == nil {
		o.R = &sapCreditMemoRequestHeaderDatumR{
			CreditMemoRequestSapCreditMemoRequestHeaderPartnerData: related,
		}
	} else {
		o.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData = append(o.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCreditMemoRequestHeaderPartnerDatumR{
				CreditMemoRequestSapCreditMemoRequestHeaderDatum: o,
			}
		} else {
			rel.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = o
		}
	}
	return nil
}

// AddCreditMemoRequestSapCreditMemoRequestItemData adds the given related objects to the existing relationships
// of the sap_credit_memo_request_header_datum, optionally inserting them as new records.
// Appends related to o.R.CreditMemoRequestSapCreditMemoRequestItemData.
// Sets related.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum appropriately.
func (o *SapCreditMemoRequestHeaderDatum) AddCreditMemoRequestSapCreditMemoRequestItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCreditMemoRequestItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreditMemoRequest = o.CreditMemoRequest
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_credit_memo_request_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CreditMemoRequest"}),
				strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CreditMemoRequest, rel.CreditMemoRequest, rel.CreditMemoRequestItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreditMemoRequest = o.CreditMemoRequest
		}
	}

	if o.R == nil {
		o.R = &sapCreditMemoRequestHeaderDatumR{
			CreditMemoRequestSapCreditMemoRequestItemData: related,
		}
	} else {
		o.R.CreditMemoRequestSapCreditMemoRequestItemData = append(o.R.CreditMemoRequestSapCreditMemoRequestItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCreditMemoRequestItemDatumR{
				CreditMemoRequestSapCreditMemoRequestHeaderDatum: o,
			}
		} else {
			rel.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = o
		}
	}
	return nil
}

// AddCreditMemoRequestSapCreditMemoRequestItemPricingElementData adds the given related objects to the existing relationships
// of the sap_credit_memo_request_header_datum, optionally inserting them as new records.
// Appends related to o.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData.
// Sets related.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum appropriately.
func (o *SapCreditMemoRequestHeaderDatum) AddCreditMemoRequestSapCreditMemoRequestItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCreditMemoRequestItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreditMemoRequest = o.CreditMemoRequest
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_credit_memo_request_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CreditMemoRequest"}),
				strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CreditMemoRequest, rel.CreditMemoRequest, rel.CreditMemoRequestItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreditMemoRequest = o.CreditMemoRequest
		}
	}

	if o.R == nil {
		o.R = &sapCreditMemoRequestHeaderDatumR{
			CreditMemoRequestSapCreditMemoRequestItemPricingElementData: related,
		}
	} else {
		o.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData = append(o.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCreditMemoRequestItemPricingElementDatumR{
				CreditMemoRequestSapCreditMemoRequestHeaderDatum: o,
			}
		} else {
			rel.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = o
		}
	}
	return nil
}

// SapCreditMemoRequestHeaderData retrieves all the records using an executor.
func SapCreditMemoRequestHeaderData(mods ...qm.QueryMod) sapCreditMemoRequestHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_credit_memo_request_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_credit_memo_request_header_data`.*"})
	}

	return sapCreditMemoRequestHeaderDatumQuery{q}
}

// FindSapCreditMemoRequestHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCreditMemoRequestHeaderDatum(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, selectCols ...string) (*SapCreditMemoRequestHeaderDatum, error) {
	sapCreditMemoRequestHeaderDatumObj := &SapCreditMemoRequestHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_credit_memo_request_header_data` where `CreditMemoRequest`=?", sel,
	)

	q := queries.Raw(query, creditMemoRequest)

	err := q.Bind(ctx, exec, sapCreditMemoRequestHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_credit_memo_request_header_data")
	}

	if err = sapCreditMemoRequestHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCreditMemoRequestHeaderDatumObj, err
	}

	return sapCreditMemoRequestHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCreditMemoRequestHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCreditMemoRequestHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestHeaderDatumInsertCache[key]
	sapCreditMemoRequestHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCreditMemoRequestHeaderDatumAllColumns,
			sapCreditMemoRequestHeaderDatumColumnsWithDefault,
			sapCreditMemoRequestHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_credit_memo_request_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_credit_memo_request_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_credit_memo_request_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_credit_memo_request_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreditMemoRequest,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_header_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestHeaderDatumInsertCacheMut.Lock()
		sapCreditMemoRequestHeaderDatumInsertCache[key] = cache
		sapCreditMemoRequestHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCreditMemoRequestHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCreditMemoRequestHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCreditMemoRequestHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapCreditMemoRequestHeaderDatumUpdateCache[key]
	sapCreditMemoRequestHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCreditMemoRequestHeaderDatumAllColumns,
			sapCreditMemoRequestHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_credit_memo_request_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_credit_memo_request_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, append(wl, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_credit_memo_request_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_credit_memo_request_header_data")
	}

	if !cached {
		sapCreditMemoRequestHeaderDatumUpdateCacheMut.Lock()
		sapCreditMemoRequestHeaderDatumUpdateCache[key] = cache
		sapCreditMemoRequestHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCreditMemoRequestHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_credit_memo_request_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_credit_memo_request_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCreditMemoRequestHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_credit_memo_request_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCreditMemoRequestHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCreditMemoRequestHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapCreditMemoRequestHeaderDatumUniqueColumns = []string{
	"CreditMemoRequest",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCreditMemoRequestHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCreditMemoRequestHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCreditMemoRequestHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestHeaderDatumUpsertCache[key]
	sapCreditMemoRequestHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCreditMemoRequestHeaderDatumAllColumns,
			sapCreditMemoRequestHeaderDatumColumnsWithDefault,
			sapCreditMemoRequestHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCreditMemoRequestHeaderDatumAllColumns,
			sapCreditMemoRequestHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_credit_memo_request_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_credit_memo_request_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_credit_memo_request_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_credit_memo_request_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCreditMemoRequestHeaderDatumType, sapCreditMemoRequestHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_credit_memo_request_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_header_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestHeaderDatumUpsertCacheMut.Lock()
		sapCreditMemoRequestHeaderDatumUpsertCache[key] = cache
		sapCreditMemoRequestHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCreditMemoRequestHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCreditMemoRequestHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCreditMemoRequestHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCreditMemoRequestHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_credit_memo_request_header_data` WHERE `CreditMemoRequest`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_credit_memo_request_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_credit_memo_request_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCreditMemoRequestHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCreditMemoRequestHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_credit_memo_request_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCreditMemoRequestHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCreditMemoRequestHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_credit_memo_request_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCreditMemoRequestHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_header_data")
	}

	if len(sapCreditMemoRequestHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCreditMemoRequestHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCreditMemoRequestHeaderDatum(ctx, exec, o.CreditMemoRequest)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCreditMemoRequestHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCreditMemoRequestHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_credit_memo_request_header_data`.* FROM `sap_credit_memo_request_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCreditMemoRequestHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapCreditMemoRequestHeaderDatumExists checks if the SapCreditMemoRequestHeaderDatum row exists.
func SapCreditMemoRequestHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_credit_memo_request_header_data` where `CreditMemoRequest`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, creditMemoRequest)
	}
	row := exec.QueryRowContext(ctx, sql, creditMemoRequest)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_credit_memo_request_header_data exists")
	}

	return exists, nil
}
