// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseRequisitionItemDatum is an object representing the database table.
type SapPurchaseRequisitionItemDatum struct {
	PurchaseRequisition            string      `boil:"PurchaseRequisition" json:"PurchaseRequisition" toml:"PurchaseRequisition" yaml:"PurchaseRequisition"`
	PurchaseRequisitionItem        string      `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem"`
	PurchaseRequisitionType        null.String `boil:"PurchaseRequisitionType" json:"PurchaseRequisitionType,omitempty" toml:"PurchaseRequisitionType" yaml:"PurchaseRequisitionType,omitempty"`
	SourceDetermination            null.Bool   `boil:"SourceDetermination" json:"SourceDetermination,omitempty" toml:"SourceDetermination" yaml:"SourceDetermination,omitempty"`
	PurchasingDocument             null.String `boil:"PurchasingDocument" json:"PurchasingDocument,omitempty" toml:"PurchasingDocument" yaml:"PurchasingDocument,omitempty"`
	PurchasingDocumentItem         null.String `boil:"PurchasingDocumentItem" json:"PurchasingDocumentItem,omitempty" toml:"PurchasingDocumentItem" yaml:"PurchasingDocumentItem,omitempty"`
	PurReqnReleaseStatus           null.String `boil:"PurReqnReleaseStatus" json:"PurReqnReleaseStatus,omitempty" toml:"PurReqnReleaseStatus" yaml:"PurReqnReleaseStatus,omitempty"`
	PurchasingDocumentItemCategory null.String `boil:"PurchasingDocumentItemCategory" json:"PurchasingDocumentItemCategory,omitempty" toml:"PurchasingDocumentItemCategory" yaml:"PurchasingDocumentItemCategory,omitempty"`
	PurchaseRequisitionItemText    null.String `boil:"PurchaseRequisitionItemText" json:"PurchaseRequisitionItemText,omitempty" toml:"PurchaseRequisitionItemText" yaml:"PurchaseRequisitionItemText,omitempty"`
	AccountAssignmentCategory      null.String `boil:"AccountAssignmentCategory" json:"AccountAssignmentCategory,omitempty" toml:"AccountAssignmentCategory" yaml:"AccountAssignmentCategory,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	PurchasingDocumentCategory     null.String `boil:"PurchasingDocumentCategory" json:"PurchasingDocumentCategory,omitempty" toml:"PurchasingDocumentCategory" yaml:"PurchasingDocumentCategory,omitempty"`
	RequestedQuantity              null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	PurchaseRequisitionPrice       null.String `boil:"PurchaseRequisitionPrice" json:"PurchaseRequisitionPrice,omitempty" toml:"PurchaseRequisitionPrice" yaml:"PurchaseRequisitionPrice,omitempty"`
	PurReqnPriceQuantity           null.String `boil:"PurReqnPriceQuantity" json:"PurReqnPriceQuantity,omitempty" toml:"PurReqnPriceQuantity" yaml:"PurReqnPriceQuantity,omitempty"`
	MaterialGoodsReceiptDuration   null.String `boil:"MaterialGoodsReceiptDuration" json:"MaterialGoodsReceiptDuration,omitempty" toml:"MaterialGoodsReceiptDuration" yaml:"MaterialGoodsReceiptDuration,omitempty"`
	ReleaseCode                    null.String `boil:"ReleaseCode" json:"ReleaseCode,omitempty" toml:"ReleaseCode" yaml:"ReleaseCode,omitempty"`
	PurchaseRequisitionReleaseDate null.String `boil:"PurchaseRequisitionReleaseDate" json:"PurchaseRequisitionReleaseDate,omitempty" toml:"PurchaseRequisitionReleaseDate" yaml:"PurchaseRequisitionReleaseDate,omitempty"`
	PurchasingOrganization         null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	CompanyCode                    null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	SourceOfSupplyIsAssigned       null.Bool   `boil:"SourceOfSupplyIsAssigned" json:"SourceOfSupplyIsAssigned,omitempty" toml:"SourceOfSupplyIsAssigned" yaml:"SourceOfSupplyIsAssigned,omitempty"`
	SupplyingPlant                 null.String `boil:"SupplyingPlant" json:"SupplyingPlant,omitempty" toml:"SupplyingPlant" yaml:"SupplyingPlant,omitempty"`
	OrderedQuantity                null.String `boil:"OrderedQuantity" json:"OrderedQuantity,omitempty" toml:"OrderedQuantity" yaml:"OrderedQuantity,omitempty"`
	DeliveryDate                   null.String `boil:"DeliveryDate" json:"DeliveryDate,omitempty" toml:"DeliveryDate" yaml:"DeliveryDate,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	ProcessingStatus               null.String `boil:"ProcessingStatus" json:"ProcessingStatus,omitempty" toml:"ProcessingStatus" yaml:"ProcessingStatus,omitempty"`
	ExternalApprovalStatus         null.String `boil:"ExternalApprovalStatus" json:"ExternalApprovalStatus,omitempty" toml:"ExternalApprovalStatus" yaml:"ExternalApprovalStatus,omitempty"`
	PurchasingInfoRecord           null.String `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord,omitempty" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	FixedSupplier                  null.String `boil:"FixedSupplier" json:"FixedSupplier,omitempty" toml:"FixedSupplier" yaml:"FixedSupplier,omitempty"`
	RequisitionerName              null.String `boil:"RequisitionerName" json:"RequisitionerName,omitempty" toml:"RequisitionerName" yaml:"RequisitionerName,omitempty"`
	PurReqnItemCurrency            null.String `boil:"PurReqnItemCurrency" json:"PurReqnItemCurrency,omitempty" toml:"PurReqnItemCurrency" yaml:"PurReqnItemCurrency,omitempty"`
	MaterialPlannedDeliveryDurn    null.String `boil:"MaterialPlannedDeliveryDurn" json:"MaterialPlannedDeliveryDurn,omitempty" toml:"MaterialPlannedDeliveryDurn" yaml:"MaterialPlannedDeliveryDurn,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	PurReqnSourceOfSupplyType      null.String `boil:"PurReqnSourceOfSupplyType" json:"PurReqnSourceOfSupplyType,omitempty" toml:"PurReqnSourceOfSupplyType" yaml:"PurReqnSourceOfSupplyType,omitempty"`
	ConsumptionPosting             null.String `boil:"ConsumptionPosting" json:"ConsumptionPosting,omitempty" toml:"ConsumptionPosting" yaml:"ConsumptionPosting,omitempty"`
	PurReqnOrigin                  null.String `boil:"PurReqnOrigin" json:"PurReqnOrigin,omitempty" toml:"PurReqnOrigin" yaml:"PurReqnOrigin,omitempty"`
	IsPurReqnBlocked               null.String `boil:"IsPurReqnBlocked" json:"IsPurReqnBlocked,omitempty" toml:"IsPurReqnBlocked" yaml:"IsPurReqnBlocked,omitempty"`
	PurchaseRequisitionStatus      null.String `boil:"PurchaseRequisitionStatus" json:"PurchaseRequisitionStatus,omitempty" toml:"PurchaseRequisitionStatus" yaml:"PurchaseRequisitionStatus,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	GoodsReceiptIsExpected         null.Bool   `boil:"GoodsReceiptIsExpected" json:"GoodsReceiptIsExpected,omitempty" toml:"GoodsReceiptIsExpected" yaml:"GoodsReceiptIsExpected,omitempty"`
	GoodsReceiptIsNonValuated      null.Bool   `boil:"GoodsReceiptIsNonValuated" json:"GoodsReceiptIsNonValuated,omitempty" toml:"GoodsReceiptIsNonValuated" yaml:"GoodsReceiptIsNonValuated,omitempty"`
	RequirementTracking            null.String `boil:"RequirementTracking" json:"RequirementTracking,omitempty" toml:"RequirementTracking" yaml:"RequirementTracking,omitempty"`
	MRPController                  null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	Reservation                    null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	IsDeleted                      null.String `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapPurchaseRequisitionItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseRequisitionItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseRequisitionItemDatumColumns = struct {
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	PurchaseRequisitionType        string
	SourceDetermination            string
	PurchasingDocument             string
	PurchasingDocumentItem         string
	PurReqnReleaseStatus           string
	PurchasingDocumentItemCategory string
	PurchaseRequisitionItemText    string
	AccountAssignmentCategory      string
	Material                       string
	MaterialGroup                  string
	PurchasingDocumentCategory     string
	RequestedQuantity              string
	BaseUnit                       string
	PurchaseRequisitionPrice       string
	PurReqnPriceQuantity           string
	MaterialGoodsReceiptDuration   string
	ReleaseCode                    string
	PurchaseRequisitionReleaseDate string
	PurchasingOrganization         string
	PurchasingGroup                string
	Plant                          string
	CompanyCode                    string
	SourceOfSupplyIsAssigned       string
	SupplyingPlant                 string
	OrderedQuantity                string
	DeliveryDate                   string
	CreationDate                   string
	ProcessingStatus               string
	ExternalApprovalStatus         string
	PurchasingInfoRecord           string
	Supplier                       string
	FixedSupplier                  string
	RequisitionerName              string
	PurReqnItemCurrency            string
	MaterialPlannedDeliveryDurn    string
	StorageLocation                string
	PurReqnSourceOfSupplyType      string
	ConsumptionPosting             string
	PurReqnOrigin                  string
	IsPurReqnBlocked               string
	PurchaseRequisitionStatus      string
	Batch                          string
	GoodsReceiptIsExpected         string
	GoodsReceiptIsNonValuated      string
	RequirementTracking            string
	MRPController                  string
	Reservation                    string
	LastChangeDateTime             string
	IsDeleted                      string
}{
	PurchaseRequisition:            "PurchaseRequisition",
	PurchaseRequisitionItem:        "PurchaseRequisitionItem",
	PurchaseRequisitionType:        "PurchaseRequisitionType",
	SourceDetermination:            "SourceDetermination",
	PurchasingDocument:             "PurchasingDocument",
	PurchasingDocumentItem:         "PurchasingDocumentItem",
	PurReqnReleaseStatus:           "PurReqnReleaseStatus",
	PurchasingDocumentItemCategory: "PurchasingDocumentItemCategory",
	PurchaseRequisitionItemText:    "PurchaseRequisitionItemText",
	AccountAssignmentCategory:      "AccountAssignmentCategory",
	Material:                       "Material",
	MaterialGroup:                  "MaterialGroup",
	PurchasingDocumentCategory:     "PurchasingDocumentCategory",
	RequestedQuantity:              "RequestedQuantity",
	BaseUnit:                       "BaseUnit",
	PurchaseRequisitionPrice:       "PurchaseRequisitionPrice",
	PurReqnPriceQuantity:           "PurReqnPriceQuantity",
	MaterialGoodsReceiptDuration:   "MaterialGoodsReceiptDuration",
	ReleaseCode:                    "ReleaseCode",
	PurchaseRequisitionReleaseDate: "PurchaseRequisitionReleaseDate",
	PurchasingOrganization:         "PurchasingOrganization",
	PurchasingGroup:                "PurchasingGroup",
	Plant:                          "Plant",
	CompanyCode:                    "CompanyCode",
	SourceOfSupplyIsAssigned:       "SourceOfSupplyIsAssigned",
	SupplyingPlant:                 "SupplyingPlant",
	OrderedQuantity:                "OrderedQuantity",
	DeliveryDate:                   "DeliveryDate",
	CreationDate:                   "CreationDate",
	ProcessingStatus:               "ProcessingStatus",
	ExternalApprovalStatus:         "ExternalApprovalStatus",
	PurchasingInfoRecord:           "PurchasingInfoRecord",
	Supplier:                       "Supplier",
	FixedSupplier:                  "FixedSupplier",
	RequisitionerName:              "RequisitionerName",
	PurReqnItemCurrency:            "PurReqnItemCurrency",
	MaterialPlannedDeliveryDurn:    "MaterialPlannedDeliveryDurn",
	StorageLocation:                "StorageLocation",
	PurReqnSourceOfSupplyType:      "PurReqnSourceOfSupplyType",
	ConsumptionPosting:             "ConsumptionPosting",
	PurReqnOrigin:                  "PurReqnOrigin",
	IsPurReqnBlocked:               "IsPurReqnBlocked",
	PurchaseRequisitionStatus:      "PurchaseRequisitionStatus",
	Batch:                          "Batch",
	GoodsReceiptIsExpected:         "GoodsReceiptIsExpected",
	GoodsReceiptIsNonValuated:      "GoodsReceiptIsNonValuated",
	RequirementTracking:            "RequirementTracking",
	MRPController:                  "MRPController",
	Reservation:                    "Reservation",
	LastChangeDateTime:             "LastChangeDateTime",
	IsDeleted:                      "IsDeleted",
}

var SapPurchaseRequisitionItemDatumTableColumns = struct {
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	PurchaseRequisitionType        string
	SourceDetermination            string
	PurchasingDocument             string
	PurchasingDocumentItem         string
	PurReqnReleaseStatus           string
	PurchasingDocumentItemCategory string
	PurchaseRequisitionItemText    string
	AccountAssignmentCategory      string
	Material                       string
	MaterialGroup                  string
	PurchasingDocumentCategory     string
	RequestedQuantity              string
	BaseUnit                       string
	PurchaseRequisitionPrice       string
	PurReqnPriceQuantity           string
	MaterialGoodsReceiptDuration   string
	ReleaseCode                    string
	PurchaseRequisitionReleaseDate string
	PurchasingOrganization         string
	PurchasingGroup                string
	Plant                          string
	CompanyCode                    string
	SourceOfSupplyIsAssigned       string
	SupplyingPlant                 string
	OrderedQuantity                string
	DeliveryDate                   string
	CreationDate                   string
	ProcessingStatus               string
	ExternalApprovalStatus         string
	PurchasingInfoRecord           string
	Supplier                       string
	FixedSupplier                  string
	RequisitionerName              string
	PurReqnItemCurrency            string
	MaterialPlannedDeliveryDurn    string
	StorageLocation                string
	PurReqnSourceOfSupplyType      string
	ConsumptionPosting             string
	PurReqnOrigin                  string
	IsPurReqnBlocked               string
	PurchaseRequisitionStatus      string
	Batch                          string
	GoodsReceiptIsExpected         string
	GoodsReceiptIsNonValuated      string
	RequirementTracking            string
	MRPController                  string
	Reservation                    string
	LastChangeDateTime             string
	IsDeleted                      string
}{
	PurchaseRequisition:            "sap_purchase_requisition_item_data.PurchaseRequisition",
	PurchaseRequisitionItem:        "sap_purchase_requisition_item_data.PurchaseRequisitionItem",
	PurchaseRequisitionType:        "sap_purchase_requisition_item_data.PurchaseRequisitionType",
	SourceDetermination:            "sap_purchase_requisition_item_data.SourceDetermination",
	PurchasingDocument:             "sap_purchase_requisition_item_data.PurchasingDocument",
	PurchasingDocumentItem:         "sap_purchase_requisition_item_data.PurchasingDocumentItem",
	PurReqnReleaseStatus:           "sap_purchase_requisition_item_data.PurReqnReleaseStatus",
	PurchasingDocumentItemCategory: "sap_purchase_requisition_item_data.PurchasingDocumentItemCategory",
	PurchaseRequisitionItemText:    "sap_purchase_requisition_item_data.PurchaseRequisitionItemText",
	AccountAssignmentCategory:      "sap_purchase_requisition_item_data.AccountAssignmentCategory",
	Material:                       "sap_purchase_requisition_item_data.Material",
	MaterialGroup:                  "sap_purchase_requisition_item_data.MaterialGroup",
	PurchasingDocumentCategory:     "sap_purchase_requisition_item_data.PurchasingDocumentCategory",
	RequestedQuantity:              "sap_purchase_requisition_item_data.RequestedQuantity",
	BaseUnit:                       "sap_purchase_requisition_item_data.BaseUnit",
	PurchaseRequisitionPrice:       "sap_purchase_requisition_item_data.PurchaseRequisitionPrice",
	PurReqnPriceQuantity:           "sap_purchase_requisition_item_data.PurReqnPriceQuantity",
	MaterialGoodsReceiptDuration:   "sap_purchase_requisition_item_data.MaterialGoodsReceiptDuration",
	ReleaseCode:                    "sap_purchase_requisition_item_data.ReleaseCode",
	PurchaseRequisitionReleaseDate: "sap_purchase_requisition_item_data.PurchaseRequisitionReleaseDate",
	PurchasingOrganization:         "sap_purchase_requisition_item_data.PurchasingOrganization",
	PurchasingGroup:                "sap_purchase_requisition_item_data.PurchasingGroup",
	Plant:                          "sap_purchase_requisition_item_data.Plant",
	CompanyCode:                    "sap_purchase_requisition_item_data.CompanyCode",
	SourceOfSupplyIsAssigned:       "sap_purchase_requisition_item_data.SourceOfSupplyIsAssigned",
	SupplyingPlant:                 "sap_purchase_requisition_item_data.SupplyingPlant",
	OrderedQuantity:                "sap_purchase_requisition_item_data.OrderedQuantity",
	DeliveryDate:                   "sap_purchase_requisition_item_data.DeliveryDate",
	CreationDate:                   "sap_purchase_requisition_item_data.CreationDate",
	ProcessingStatus:               "sap_purchase_requisition_item_data.ProcessingStatus",
	ExternalApprovalStatus:         "sap_purchase_requisition_item_data.ExternalApprovalStatus",
	PurchasingInfoRecord:           "sap_purchase_requisition_item_data.PurchasingInfoRecord",
	Supplier:                       "sap_purchase_requisition_item_data.Supplier",
	FixedSupplier:                  "sap_purchase_requisition_item_data.FixedSupplier",
	RequisitionerName:              "sap_purchase_requisition_item_data.RequisitionerName",
	PurReqnItemCurrency:            "sap_purchase_requisition_item_data.PurReqnItemCurrency",
	MaterialPlannedDeliveryDurn:    "sap_purchase_requisition_item_data.MaterialPlannedDeliveryDurn",
	StorageLocation:                "sap_purchase_requisition_item_data.StorageLocation",
	PurReqnSourceOfSupplyType:      "sap_purchase_requisition_item_data.PurReqnSourceOfSupplyType",
	ConsumptionPosting:             "sap_purchase_requisition_item_data.ConsumptionPosting",
	PurReqnOrigin:                  "sap_purchase_requisition_item_data.PurReqnOrigin",
	IsPurReqnBlocked:               "sap_purchase_requisition_item_data.IsPurReqnBlocked",
	PurchaseRequisitionStatus:      "sap_purchase_requisition_item_data.PurchaseRequisitionStatus",
	Batch:                          "sap_purchase_requisition_item_data.Batch",
	GoodsReceiptIsExpected:         "sap_purchase_requisition_item_data.GoodsReceiptIsExpected",
	GoodsReceiptIsNonValuated:      "sap_purchase_requisition_item_data.GoodsReceiptIsNonValuated",
	RequirementTracking:            "sap_purchase_requisition_item_data.RequirementTracking",
	MRPController:                  "sap_purchase_requisition_item_data.MRPController",
	Reservation:                    "sap_purchase_requisition_item_data.Reservation",
	LastChangeDateTime:             "sap_purchase_requisition_item_data.LastChangeDateTime",
	IsDeleted:                      "sap_purchase_requisition_item_data.IsDeleted",
}

// Generated where

var SapPurchaseRequisitionItemDatumWhere = struct {
	PurchaseRequisition            whereHelperstring
	PurchaseRequisitionItem        whereHelperstring
	PurchaseRequisitionType        whereHelpernull_String
	SourceDetermination            whereHelpernull_Bool
	PurchasingDocument             whereHelpernull_String
	PurchasingDocumentItem         whereHelpernull_String
	PurReqnReleaseStatus           whereHelpernull_String
	PurchasingDocumentItemCategory whereHelpernull_String
	PurchaseRequisitionItemText    whereHelpernull_String
	AccountAssignmentCategory      whereHelpernull_String
	Material                       whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	PurchasingDocumentCategory     whereHelpernull_String
	RequestedQuantity              whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	PurchaseRequisitionPrice       whereHelpernull_String
	PurReqnPriceQuantity           whereHelpernull_String
	MaterialGoodsReceiptDuration   whereHelpernull_String
	ReleaseCode                    whereHelpernull_String
	PurchaseRequisitionReleaseDate whereHelpernull_String
	PurchasingOrganization         whereHelpernull_String
	PurchasingGroup                whereHelpernull_String
	Plant                          whereHelpernull_String
	CompanyCode                    whereHelpernull_String
	SourceOfSupplyIsAssigned       whereHelpernull_Bool
	SupplyingPlant                 whereHelpernull_String
	OrderedQuantity                whereHelpernull_String
	DeliveryDate                   whereHelpernull_String
	CreationDate                   whereHelpernull_String
	ProcessingStatus               whereHelpernull_String
	ExternalApprovalStatus         whereHelpernull_String
	PurchasingInfoRecord           whereHelpernull_String
	Supplier                       whereHelpernull_String
	FixedSupplier                  whereHelpernull_String
	RequisitionerName              whereHelpernull_String
	PurReqnItemCurrency            whereHelpernull_String
	MaterialPlannedDeliveryDurn    whereHelpernull_String
	StorageLocation                whereHelpernull_String
	PurReqnSourceOfSupplyType      whereHelpernull_String
	ConsumptionPosting             whereHelpernull_String
	PurReqnOrigin                  whereHelpernull_String
	IsPurReqnBlocked               whereHelpernull_String
	PurchaseRequisitionStatus      whereHelpernull_String
	Batch                          whereHelpernull_String
	GoodsReceiptIsExpected         whereHelpernull_Bool
	GoodsReceiptIsNonValuated      whereHelpernull_Bool
	RequirementTracking            whereHelpernull_String
	MRPController                  whereHelpernull_String
	Reservation                    whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
	IsDeleted                      whereHelpernull_String
}{
	PurchaseRequisition:            whereHelperstring{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisition`"},
	PurchaseRequisitionItem:        whereHelperstring{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisitionItem`"},
	PurchaseRequisitionType:        whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisitionType`"},
	SourceDetermination:            whereHelpernull_Bool{field: "`sap_purchase_requisition_item_data`.`SourceDetermination`"},
	PurchasingDocument:             whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingDocument`"},
	PurchasingDocumentItem:         whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingDocumentItem`"},
	PurReqnReleaseStatus:           whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurReqnReleaseStatus`"},
	PurchasingDocumentItemCategory: whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingDocumentItemCategory`"},
	PurchaseRequisitionItemText:    whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisitionItemText`"},
	AccountAssignmentCategory:      whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`AccountAssignmentCategory`"},
	Material:                       whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`Material`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`MaterialGroup`"},
	PurchasingDocumentCategory:     whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingDocumentCategory`"},
	RequestedQuantity:              whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`RequestedQuantity`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`BaseUnit`"},
	PurchaseRequisitionPrice:       whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisitionPrice`"},
	PurReqnPriceQuantity:           whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurReqnPriceQuantity`"},
	MaterialGoodsReceiptDuration:   whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`MaterialGoodsReceiptDuration`"},
	ReleaseCode:                    whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`ReleaseCode`"},
	PurchaseRequisitionReleaseDate: whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisitionReleaseDate`"},
	PurchasingOrganization:         whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingOrganization`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingGroup`"},
	Plant:                          whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`Plant`"},
	CompanyCode:                    whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`CompanyCode`"},
	SourceOfSupplyIsAssigned:       whereHelpernull_Bool{field: "`sap_purchase_requisition_item_data`.`SourceOfSupplyIsAssigned`"},
	SupplyingPlant:                 whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`SupplyingPlant`"},
	OrderedQuantity:                whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`OrderedQuantity`"},
	DeliveryDate:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`DeliveryDate`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`CreationDate`"},
	ProcessingStatus:               whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`ProcessingStatus`"},
	ExternalApprovalStatus:         whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`ExternalApprovalStatus`"},
	PurchasingInfoRecord:           whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchasingInfoRecord`"},
	Supplier:                       whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`Supplier`"},
	FixedSupplier:                  whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`FixedSupplier`"},
	RequisitionerName:              whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`RequisitionerName`"},
	PurReqnItemCurrency:            whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurReqnItemCurrency`"},
	MaterialPlannedDeliveryDurn:    whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`MaterialPlannedDeliveryDurn`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`StorageLocation`"},
	PurReqnSourceOfSupplyType:      whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurReqnSourceOfSupplyType`"},
	ConsumptionPosting:             whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`ConsumptionPosting`"},
	PurReqnOrigin:                  whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurReqnOrigin`"},
	IsPurReqnBlocked:               whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`IsPurReqnBlocked`"},
	PurchaseRequisitionStatus:      whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`PurchaseRequisitionStatus`"},
	Batch:                          whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`Batch`"},
	GoodsReceiptIsExpected:         whereHelpernull_Bool{field: "`sap_purchase_requisition_item_data`.`GoodsReceiptIsExpected`"},
	GoodsReceiptIsNonValuated:      whereHelpernull_Bool{field: "`sap_purchase_requisition_item_data`.`GoodsReceiptIsNonValuated`"},
	RequirementTracking:            whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`RequirementTracking`"},
	MRPController:                  whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`MRPController`"},
	Reservation:                    whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`Reservation`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`LastChangeDateTime`"},
	IsDeleted:                      whereHelpernull_String{field: "`sap_purchase_requisition_item_data`.`IsDeleted`"},
}

// SapPurchaseRequisitionItemDatumRels is where relationship names are stored.
var SapPurchaseRequisitionItemDatumRels = struct {
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum string
}{
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: "PurchaseRequisitionSapPurchaseRequisitionHeaderDatum",
}

// sapPurchaseRequisitionItemDatumR is where relationships are stored.
type sapPurchaseRequisitionItemDatumR struct {
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum *SapPurchaseRequisitionHeaderDatum `boil:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" json:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" toml:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" yaml:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseRequisitionItemDatumR) NewStruct() *sapPurchaseRequisitionItemDatumR {
	return &sapPurchaseRequisitionItemDatumR{}
}

// sapPurchaseRequisitionItemDatumL is where Load methods for each relationship are stored.
type sapPurchaseRequisitionItemDatumL struct{}

var (
	sapPurchaseRequisitionItemDatumAllColumns            = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "PurchaseRequisitionType", "SourceDetermination", "PurchasingDocument", "PurchasingDocumentItem", "PurReqnReleaseStatus", "PurchasingDocumentItemCategory", "PurchaseRequisitionItemText", "AccountAssignmentCategory", "Material", "MaterialGroup", "PurchasingDocumentCategory", "RequestedQuantity", "BaseUnit", "PurchaseRequisitionPrice", "PurReqnPriceQuantity", "MaterialGoodsReceiptDuration", "ReleaseCode", "PurchaseRequisitionReleaseDate", "PurchasingOrganization", "PurchasingGroup", "Plant", "CompanyCode", "SourceOfSupplyIsAssigned", "SupplyingPlant", "OrderedQuantity", "DeliveryDate", "CreationDate", "ProcessingStatus", "ExternalApprovalStatus", "PurchasingInfoRecord", "Supplier", "FixedSupplier", "RequisitionerName", "PurReqnItemCurrency", "MaterialPlannedDeliveryDurn", "StorageLocation", "PurReqnSourceOfSupplyType", "ConsumptionPosting", "PurReqnOrigin", "IsPurReqnBlocked", "PurchaseRequisitionStatus", "Batch", "GoodsReceiptIsExpected", "GoodsReceiptIsNonValuated", "RequirementTracking", "MRPController", "Reservation", "LastChangeDateTime", "IsDeleted"}
	sapPurchaseRequisitionItemDatumColumnsWithoutDefault = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "PurchaseRequisitionType", "SourceDetermination", "PurchasingDocument", "PurchasingDocumentItem", "PurReqnReleaseStatus", "PurchasingDocumentItemCategory", "PurchaseRequisitionItemText", "AccountAssignmentCategory", "Material", "MaterialGroup", "PurchasingDocumentCategory", "RequestedQuantity", "BaseUnit", "PurchaseRequisitionPrice", "PurReqnPriceQuantity", "MaterialGoodsReceiptDuration", "ReleaseCode", "PurchaseRequisitionReleaseDate", "PurchasingOrganization", "PurchasingGroup", "Plant", "CompanyCode", "SourceOfSupplyIsAssigned", "SupplyingPlant", "OrderedQuantity", "DeliveryDate", "CreationDate", "ProcessingStatus", "ExternalApprovalStatus", "PurchasingInfoRecord", "Supplier", "FixedSupplier", "RequisitionerName", "PurReqnItemCurrency", "MaterialPlannedDeliveryDurn", "StorageLocation", "PurReqnSourceOfSupplyType", "ConsumptionPosting", "PurReqnOrigin", "IsPurReqnBlocked", "PurchaseRequisitionStatus", "Batch", "GoodsReceiptIsExpected", "GoodsReceiptIsNonValuated", "RequirementTracking", "MRPController", "Reservation", "LastChangeDateTime", "IsDeleted"}
	sapPurchaseRequisitionItemDatumColumnsWithDefault    = []string{}
	sapPurchaseRequisitionItemDatumPrimaryKeyColumns     = []string{"PurchaseRequisition", "PurchaseRequisitionItem"}
	sapPurchaseRequisitionItemDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseRequisitionItemDatumSlice is an alias for a slice of pointers to SapPurchaseRequisitionItemDatum.
	// This should almost always be used instead of []SapPurchaseRequisitionItemDatum.
	SapPurchaseRequisitionItemDatumSlice []*SapPurchaseRequisitionItemDatum
	// SapPurchaseRequisitionItemDatumHook is the signature for custom SapPurchaseRequisitionItemDatum hook methods
	SapPurchaseRequisitionItemDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseRequisitionItemDatum) error

	sapPurchaseRequisitionItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseRequisitionItemDatumType                 = reflect.TypeOf(&SapPurchaseRequisitionItemDatum{})
	sapPurchaseRequisitionItemDatumMapping              = queries.MakeStructMapping(sapPurchaseRequisitionItemDatumType)
	sapPurchaseRequisitionItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, sapPurchaseRequisitionItemDatumPrimaryKeyColumns)
	sapPurchaseRequisitionItemDatumInsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseRequisitionItemDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseRequisitionItemDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseRequisitionItemDatumAfterSelectHooks []SapPurchaseRequisitionItemDatumHook

var sapPurchaseRequisitionItemDatumBeforeInsertHooks []SapPurchaseRequisitionItemDatumHook
var sapPurchaseRequisitionItemDatumAfterInsertHooks []SapPurchaseRequisitionItemDatumHook

var sapPurchaseRequisitionItemDatumBeforeUpdateHooks []SapPurchaseRequisitionItemDatumHook
var sapPurchaseRequisitionItemDatumAfterUpdateHooks []SapPurchaseRequisitionItemDatumHook

var sapPurchaseRequisitionItemDatumBeforeDeleteHooks []SapPurchaseRequisitionItemDatumHook
var sapPurchaseRequisitionItemDatumAfterDeleteHooks []SapPurchaseRequisitionItemDatumHook

var sapPurchaseRequisitionItemDatumBeforeUpsertHooks []SapPurchaseRequisitionItemDatumHook
var sapPurchaseRequisitionItemDatumAfterUpsertHooks []SapPurchaseRequisitionItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseRequisitionItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseRequisitionItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseRequisitionItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseRequisitionItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseRequisitionItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseRequisitionItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseRequisitionItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseRequisitionItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseRequisitionItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseRequisitionItemDatumHook registers your hook function for all future operations.
func AddSapPurchaseRequisitionItemDatumHook(hookPoint boil.HookPoint, sapPurchaseRequisitionItemDatumHook SapPurchaseRequisitionItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseRequisitionItemDatumAfterSelectHooks = append(sapPurchaseRequisitionItemDatumAfterSelectHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseRequisitionItemDatumBeforeInsertHooks = append(sapPurchaseRequisitionItemDatumBeforeInsertHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseRequisitionItemDatumAfterInsertHooks = append(sapPurchaseRequisitionItemDatumAfterInsertHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseRequisitionItemDatumBeforeUpdateHooks = append(sapPurchaseRequisitionItemDatumBeforeUpdateHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseRequisitionItemDatumAfterUpdateHooks = append(sapPurchaseRequisitionItemDatumAfterUpdateHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseRequisitionItemDatumBeforeDeleteHooks = append(sapPurchaseRequisitionItemDatumBeforeDeleteHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseRequisitionItemDatumAfterDeleteHooks = append(sapPurchaseRequisitionItemDatumAfterDeleteHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseRequisitionItemDatumBeforeUpsertHooks = append(sapPurchaseRequisitionItemDatumBeforeUpsertHooks, sapPurchaseRequisitionItemDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseRequisitionItemDatumAfterUpsertHooks = append(sapPurchaseRequisitionItemDatumAfterUpsertHooks, sapPurchaseRequisitionItemDatumHook)
	}
}

// One returns a single sapPurchaseRequisitionItemDatum record from the query.
func (q sapPurchaseRequisitionItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseRequisitionItemDatum, error) {
	o := &SapPurchaseRequisitionItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_requisition_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseRequisitionItemDatum records from the query.
func (q sapPurchaseRequisitionItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseRequisitionItemDatumSlice, error) {
	var o []*SapPurchaseRequisitionItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseRequisitionItemDatum slice")
	}

	if len(sapPurchaseRequisitionItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseRequisitionItemDatum records in the query.
func (q sapPurchaseRequisitionItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_requisition_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseRequisitionItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_requisition_item_data exists")
	}

	return count > 0, nil
}

// PurchaseRequisitionSapPurchaseRequisitionHeaderDatum pointed to by the foreign key.
func (o *SapPurchaseRequisitionItemDatum) PurchaseRequisitionSapPurchaseRequisitionHeaderDatum(mods ...qm.QueryMod) sapPurchaseRequisitionHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseRequisition` = ?", o.PurchaseRequisition),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseRequisitionHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_requisition_header_data`")

	return query
}

// LoadPurchaseRequisitionSapPurchaseRequisitionHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseRequisitionItemDatumL) LoadPurchaseRequisitionSapPurchaseRequisitionHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseRequisitionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseRequisitionItemDatum
	var object *SapPurchaseRequisitionItemDatum

	if singular {
		object = maybeSapPurchaseRequisitionItemDatum.(*SapPurchaseRequisitionItemDatum)
	} else {
		slice = *maybeSapPurchaseRequisitionItemDatum.(*[]*SapPurchaseRequisitionItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseRequisitionItemDatumR{}
		}
		args = append(args, object.PurchaseRequisition)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseRequisitionItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseRequisition {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseRequisition)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_requisition_header_data`),
		qm.WhereIn(`sap_purchase_requisition_header_data.PurchaseRequisition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseRequisitionHeaderDatum")
	}

	var resultSlice []*SapPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseRequisitionHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_requisition_header_data")
	}

	if len(sapPurchaseRequisitionItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseRequisitionHeaderDatumR{}
		}
		foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemData = append(foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseRequisition == foreign.PurchaseRequisition {
				local.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseRequisitionHeaderDatumR{}
				}
				foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemData = append(foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseRequisitionSapPurchaseRequisitionHeaderDatum of the sapPurchaseRequisitionItemDatum to the related item.
// Sets o.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum to related.
// Adds o to related.R.PurchaseRequisitionSapPurchaseRequisitionItemData.
func (o *SapPurchaseRequisitionItemDatum) SetPurchaseRequisitionSapPurchaseRequisitionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseRequisitionHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_requisition_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseRequisition"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseRequisition, o.PurchaseRequisition, o.PurchaseRequisitionItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseRequisition = related.PurchaseRequisition
	if o.R == nil {
		o.R = &sapPurchaseRequisitionItemDatumR{
			PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: related,
		}
	} else {
		o.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchaseRequisitionHeaderDatumR{
			PurchaseRequisitionSapPurchaseRequisitionItemData: SapPurchaseRequisitionItemDatumSlice{o},
		}
	} else {
		related.R.PurchaseRequisitionSapPurchaseRequisitionItemData = append(related.R.PurchaseRequisitionSapPurchaseRequisitionItemData, o)
	}

	return nil
}

// SapPurchaseRequisitionItemData retrieves all the records using an executor.
func SapPurchaseRequisitionItemData(mods ...qm.QueryMod) sapPurchaseRequisitionItemDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_requisition_item_data`"))
	return sapPurchaseRequisitionItemDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseRequisitionItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseRequisitionItemDatum(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, purchaseRequisitionItem string, selectCols ...string) (*SapPurchaseRequisitionItemDatum, error) {
	sapPurchaseRequisitionItemDatumObj := &SapPurchaseRequisitionItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_requisition_item_data` where `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=?", sel,
	)

	q := queries.Raw(query, purchaseRequisition, purchaseRequisitionItem)

	err := q.Bind(ctx, exec, sapPurchaseRequisitionItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_requisition_item_data")
	}

	if err = sapPurchaseRequisitionItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseRequisitionItemDatumObj, err
	}

	return sapPurchaseRequisitionItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseRequisitionItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseRequisitionItemDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemDatumInsertCache[key]
	sapPurchaseRequisitionItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseRequisitionItemDatumAllColumns,
			sapPurchaseRequisitionItemDatumColumnsWithDefault,
			sapPurchaseRequisitionItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_requisition_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_requisition_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_requisition_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_requisition_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseRequisition,
		o.PurchaseRequisitionItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_item_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionItemDatumInsertCacheMut.Lock()
		sapPurchaseRequisitionItemDatumInsertCache[key] = cache
		sapPurchaseRequisitionItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseRequisitionItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseRequisitionItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseRequisitionItemDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemDatumUpdateCache[key]
	sapPurchaseRequisitionItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseRequisitionItemDatumAllColumns,
			sapPurchaseRequisitionItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_requisition_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_requisition_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, append(wl, sapPurchaseRequisitionItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_requisition_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_requisition_item_data")
	}

	if !cached {
		sapPurchaseRequisitionItemDatumUpdateCacheMut.Lock()
		sapPurchaseRequisitionItemDatumUpdateCache[key] = cache
		sapPurchaseRequisitionItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseRequisitionItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_requisition_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_requisition_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseRequisitionItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_requisition_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseRequisitionItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseRequisitionItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseRequisitionItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseRequisitionItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseRequisitionItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseRequisitionItemDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemDatumUpsertCache[key]
	sapPurchaseRequisitionItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseRequisitionItemDatumAllColumns,
			sapPurchaseRequisitionItemDatumColumnsWithDefault,
			sapPurchaseRequisitionItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseRequisitionItemDatumAllColumns,
			sapPurchaseRequisitionItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_requisition_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_requisition_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_requisition_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_requisition_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseRequisitionItemDatumType, sapPurchaseRequisitionItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_requisition_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_item_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionItemDatumUpsertCacheMut.Lock()
		sapPurchaseRequisitionItemDatumUpsertCache[key] = cache
		sapPurchaseRequisitionItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseRequisitionItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseRequisitionItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseRequisitionItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseRequisitionItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_requisition_item_data` WHERE `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_requisition_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_requisition_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseRequisitionItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseRequisitionItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_requisition_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseRequisitionItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseRequisitionItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_requisition_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseRequisitionItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_item_data")
	}

	if len(sapPurchaseRequisitionItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseRequisitionItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseRequisitionItemDatum(ctx, exec, o.PurchaseRequisition, o.PurchaseRequisitionItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseRequisitionItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseRequisitionItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_requisition_item_data`.* FROM `sap_purchase_requisition_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseRequisitionItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseRequisitionItemDatumExists checks if the SapPurchaseRequisitionItemDatum row exists.
func SapPurchaseRequisitionItemDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, purchaseRequisitionItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_requisition_item_data` where `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseRequisition, purchaseRequisitionItem)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseRequisition, purchaseRequisitionItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_requisition_item_data exists")
	}

	return exists, nil
}
