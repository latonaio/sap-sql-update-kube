// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapOutboundDeliveryItemDocumentFlowDatum is an object representing the database table.
type SapOutboundDeliveryItemDocumentFlowDatum struct {
	PrecedingDocument              string      `boil:"PrecedingDocument" json:"PrecedingDocument" toml:"PrecedingDocument" yaml:"PrecedingDocument"`
	PrecedingDocumentItem          string      `boil:"PrecedingDocumentItem" json:"PrecedingDocumentItem" toml:"PrecedingDocumentItem" yaml:"PrecedingDocumentItem"`
	Deliveryversion                string      `boil:"Deliveryversion" json:"Deliveryversion" toml:"Deliveryversion" yaml:"Deliveryversion"`
	Subsequentdocument             string      `boil:"Subsequentdocument" json:"Subsequentdocument" toml:"Subsequentdocument" yaml:"Subsequentdocument"`
	SubsequentDocumentItem         string      `boil:"SubsequentDocumentItem" json:"SubsequentDocumentItem" toml:"SubsequentDocumentItem" yaml:"SubsequentDocumentItem"`
	PrecedingDocumentCategory      null.String `boil:"PrecedingDocumentCategory" json:"PrecedingDocumentCategory,omitempty" toml:"PrecedingDocumentCategory" yaml:"PrecedingDocumentCategory,omitempty"`
	QuantityInBaseUnit             null.String `boil:"QuantityInBaseUnit" json:"QuantityInBaseUnit,omitempty" toml:"QuantityInBaseUnit" yaml:"QuantityInBaseUnit,omitempty"`
	SDFulfillmentCalculationRule   null.String `boil:"SDFulfillmentCalculationRule" json:"SDFulfillmentCalculationRule,omitempty" toml:"SDFulfillmentCalculationRule" yaml:"SDFulfillmentCalculationRule,omitempty"`
	SubsequentDocumentCategory     null.String `boil:"SubsequentDocumentCategory" json:"SubsequentDocumentCategory,omitempty" toml:"SubsequentDocumentCategory" yaml:"SubsequentDocumentCategory,omitempty"`
	TransferOrderInWrhsMgmtIsConfd null.Bool   `boil:"TransferOrderInWrhsMgmtIsConfd" json:"TransferOrderInWrhsMgmtIsConfd,omitempty" toml:"TransferOrderInWrhsMgmtIsConfd" yaml:"TransferOrderInWrhsMgmtIsConfd,omitempty"`

	R *sapOutboundDeliveryItemDocumentFlowDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapOutboundDeliveryItemDocumentFlowDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapOutboundDeliveryItemDocumentFlowDatumColumns = struct {
	PrecedingDocument              string
	PrecedingDocumentItem          string
	Deliveryversion                string
	Subsequentdocument             string
	SubsequentDocumentItem         string
	PrecedingDocumentCategory      string
	QuantityInBaseUnit             string
	SDFulfillmentCalculationRule   string
	SubsequentDocumentCategory     string
	TransferOrderInWrhsMgmtIsConfd string
}{
	PrecedingDocument:              "PrecedingDocument",
	PrecedingDocumentItem:          "PrecedingDocumentItem",
	Deliveryversion:                "Deliveryversion",
	Subsequentdocument:             "Subsequentdocument",
	SubsequentDocumentItem:         "SubsequentDocumentItem",
	PrecedingDocumentCategory:      "PrecedingDocumentCategory",
	QuantityInBaseUnit:             "QuantityInBaseUnit",
	SDFulfillmentCalculationRule:   "SDFulfillmentCalculationRule",
	SubsequentDocumentCategory:     "SubsequentDocumentCategory",
	TransferOrderInWrhsMgmtIsConfd: "TransferOrderInWrhsMgmtIsConfd",
}

var SapOutboundDeliveryItemDocumentFlowDatumTableColumns = struct {
	PrecedingDocument              string
	PrecedingDocumentItem          string
	Deliveryversion                string
	Subsequentdocument             string
	SubsequentDocumentItem         string
	PrecedingDocumentCategory      string
	QuantityInBaseUnit             string
	SDFulfillmentCalculationRule   string
	SubsequentDocumentCategory     string
	TransferOrderInWrhsMgmtIsConfd string
}{
	PrecedingDocument:              "sap_outbound_delivery_item_document_flow_data.PrecedingDocument",
	PrecedingDocumentItem:          "sap_outbound_delivery_item_document_flow_data.PrecedingDocumentItem",
	Deliveryversion:                "sap_outbound_delivery_item_document_flow_data.Deliveryversion",
	Subsequentdocument:             "sap_outbound_delivery_item_document_flow_data.Subsequentdocument",
	SubsequentDocumentItem:         "sap_outbound_delivery_item_document_flow_data.SubsequentDocumentItem",
	PrecedingDocumentCategory:      "sap_outbound_delivery_item_document_flow_data.PrecedingDocumentCategory",
	QuantityInBaseUnit:             "sap_outbound_delivery_item_document_flow_data.QuantityInBaseUnit",
	SDFulfillmentCalculationRule:   "sap_outbound_delivery_item_document_flow_data.SDFulfillmentCalculationRule",
	SubsequentDocumentCategory:     "sap_outbound_delivery_item_document_flow_data.SubsequentDocumentCategory",
	TransferOrderInWrhsMgmtIsConfd: "sap_outbound_delivery_item_document_flow_data.TransferOrderInWrhsMgmtIsConfd",
}

// Generated where

var SapOutboundDeliveryItemDocumentFlowDatumWhere = struct {
	PrecedingDocument              whereHelperstring
	PrecedingDocumentItem          whereHelperstring
	Deliveryversion                whereHelperstring
	Subsequentdocument             whereHelperstring
	SubsequentDocumentItem         whereHelperstring
	PrecedingDocumentCategory      whereHelpernull_String
	QuantityInBaseUnit             whereHelpernull_String
	SDFulfillmentCalculationRule   whereHelpernull_String
	SubsequentDocumentCategory     whereHelpernull_String
	TransferOrderInWrhsMgmtIsConfd whereHelpernull_Bool
}{
	PrecedingDocument:              whereHelperstring{field: "`sap_outbound_delivery_item_document_flow_data`.`PrecedingDocument`"},
	PrecedingDocumentItem:          whereHelperstring{field: "`sap_outbound_delivery_item_document_flow_data`.`PrecedingDocumentItem`"},
	Deliveryversion:                whereHelperstring{field: "`sap_outbound_delivery_item_document_flow_data`.`Deliveryversion`"},
	Subsequentdocument:             whereHelperstring{field: "`sap_outbound_delivery_item_document_flow_data`.`Subsequentdocument`"},
	SubsequentDocumentItem:         whereHelperstring{field: "`sap_outbound_delivery_item_document_flow_data`.`SubsequentDocumentItem`"},
	PrecedingDocumentCategory:      whereHelpernull_String{field: "`sap_outbound_delivery_item_document_flow_data`.`PrecedingDocumentCategory`"},
	QuantityInBaseUnit:             whereHelpernull_String{field: "`sap_outbound_delivery_item_document_flow_data`.`QuantityInBaseUnit`"},
	SDFulfillmentCalculationRule:   whereHelpernull_String{field: "`sap_outbound_delivery_item_document_flow_data`.`SDFulfillmentCalculationRule`"},
	SubsequentDocumentCategory:     whereHelpernull_String{field: "`sap_outbound_delivery_item_document_flow_data`.`SubsequentDocumentCategory`"},
	TransferOrderInWrhsMgmtIsConfd: whereHelpernull_Bool{field: "`sap_outbound_delivery_item_document_flow_data`.`TransferOrderInWrhsMgmtIsConfd`"},
}

// SapOutboundDeliveryItemDocumentFlowDatumRels is where relationship names are stored.
var SapOutboundDeliveryItemDocumentFlowDatumRels = struct {
	PrecedingDocumentSapOutboundDeliveryHeaderDatum string
}{
	PrecedingDocumentSapOutboundDeliveryHeaderDatum: "PrecedingDocumentSapOutboundDeliveryHeaderDatum",
}

// sapOutboundDeliveryItemDocumentFlowDatumR is where relationships are stored.
type sapOutboundDeliveryItemDocumentFlowDatumR struct {
	PrecedingDocumentSapOutboundDeliveryHeaderDatum *SapOutboundDeliveryHeaderDatum `boil:"PrecedingDocumentSapOutboundDeliveryHeaderDatum" json:"PrecedingDocumentSapOutboundDeliveryHeaderDatum" toml:"PrecedingDocumentSapOutboundDeliveryHeaderDatum" yaml:"PrecedingDocumentSapOutboundDeliveryHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapOutboundDeliveryItemDocumentFlowDatumR) NewStruct() *sapOutboundDeliveryItemDocumentFlowDatumR {
	return &sapOutboundDeliveryItemDocumentFlowDatumR{}
}

// sapOutboundDeliveryItemDocumentFlowDatumL is where Load methods for each relationship are stored.
type sapOutboundDeliveryItemDocumentFlowDatumL struct{}

var (
	sapOutboundDeliveryItemDocumentFlowDatumAllColumns            = []string{"PrecedingDocument", "PrecedingDocumentItem", "Deliveryversion", "Subsequentdocument", "SubsequentDocumentItem", "PrecedingDocumentCategory", "QuantityInBaseUnit", "SDFulfillmentCalculationRule", "SubsequentDocumentCategory", "TransferOrderInWrhsMgmtIsConfd"}
	sapOutboundDeliveryItemDocumentFlowDatumColumnsWithoutDefault = []string{"PrecedingDocument", "PrecedingDocumentItem", "Deliveryversion", "Subsequentdocument", "SubsequentDocumentItem", "PrecedingDocumentCategory", "QuantityInBaseUnit", "SDFulfillmentCalculationRule", "SubsequentDocumentCategory", "TransferOrderInWrhsMgmtIsConfd"}
	sapOutboundDeliveryItemDocumentFlowDatumColumnsWithDefault    = []string{}
	sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns     = []string{"PrecedingDocument", "PrecedingDocumentItem", "Deliveryversion", "Subsequentdocument", "SubsequentDocumentItem"}
)

type (
	// SapOutboundDeliveryItemDocumentFlowDatumSlice is an alias for a slice of pointers to SapOutboundDeliveryItemDocumentFlowDatum.
	// This should almost always be used instead of []SapOutboundDeliveryItemDocumentFlowDatum.
	SapOutboundDeliveryItemDocumentFlowDatumSlice []*SapOutboundDeliveryItemDocumentFlowDatum
	// SapOutboundDeliveryItemDocumentFlowDatumHook is the signature for custom SapOutboundDeliveryItemDocumentFlowDatum hook methods
	SapOutboundDeliveryItemDocumentFlowDatumHook func(context.Context, boil.ContextExecutor, *SapOutboundDeliveryItemDocumentFlowDatum) error

	sapOutboundDeliveryItemDocumentFlowDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapOutboundDeliveryItemDocumentFlowDatumType                 = reflect.TypeOf(&SapOutboundDeliveryItemDocumentFlowDatum{})
	sapOutboundDeliveryItemDocumentFlowDatumMapping              = queries.MakeStructMapping(sapOutboundDeliveryItemDocumentFlowDatumType)
	sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyMapping, _ = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns)
	sapOutboundDeliveryItemDocumentFlowDatumInsertCacheMut       sync.RWMutex
	sapOutboundDeliveryItemDocumentFlowDatumInsertCache          = make(map[string]insertCache)
	sapOutboundDeliveryItemDocumentFlowDatumUpdateCacheMut       sync.RWMutex
	sapOutboundDeliveryItemDocumentFlowDatumUpdateCache          = make(map[string]updateCache)
	sapOutboundDeliveryItemDocumentFlowDatumUpsertCacheMut       sync.RWMutex
	sapOutboundDeliveryItemDocumentFlowDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapOutboundDeliveryItemDocumentFlowDatumBeforeInsertHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumBeforeUpdateHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumBeforeDeleteHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumBeforeUpsertHooks []SapOutboundDeliveryItemDocumentFlowDatumHook

var sapOutboundDeliveryItemDocumentFlowDatumAfterInsertHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumAfterSelectHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumAfterUpdateHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumAfterDeleteHooks []SapOutboundDeliveryItemDocumentFlowDatumHook
var sapOutboundDeliveryItemDocumentFlowDatumAfterUpsertHooks []SapOutboundDeliveryItemDocumentFlowDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapOutboundDeliveryItemDocumentFlowDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapOutboundDeliveryItemDocumentFlowDatumHook registers your hook function for all future operations.
func AddSapOutboundDeliveryItemDocumentFlowDatumHook(hookPoint boil.HookPoint, sapOutboundDeliveryItemDocumentFlowDatumHook SapOutboundDeliveryItemDocumentFlowDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapOutboundDeliveryItemDocumentFlowDatumBeforeInsertHooks = append(sapOutboundDeliveryItemDocumentFlowDatumBeforeInsertHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.BeforeUpdateHook:
		sapOutboundDeliveryItemDocumentFlowDatumBeforeUpdateHooks = append(sapOutboundDeliveryItemDocumentFlowDatumBeforeUpdateHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.BeforeDeleteHook:
		sapOutboundDeliveryItemDocumentFlowDatumBeforeDeleteHooks = append(sapOutboundDeliveryItemDocumentFlowDatumBeforeDeleteHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.BeforeUpsertHook:
		sapOutboundDeliveryItemDocumentFlowDatumBeforeUpsertHooks = append(sapOutboundDeliveryItemDocumentFlowDatumBeforeUpsertHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.AfterInsertHook:
		sapOutboundDeliveryItemDocumentFlowDatumAfterInsertHooks = append(sapOutboundDeliveryItemDocumentFlowDatumAfterInsertHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.AfterSelectHook:
		sapOutboundDeliveryItemDocumentFlowDatumAfterSelectHooks = append(sapOutboundDeliveryItemDocumentFlowDatumAfterSelectHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.AfterUpdateHook:
		sapOutboundDeliveryItemDocumentFlowDatumAfterUpdateHooks = append(sapOutboundDeliveryItemDocumentFlowDatumAfterUpdateHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.AfterDeleteHook:
		sapOutboundDeliveryItemDocumentFlowDatumAfterDeleteHooks = append(sapOutboundDeliveryItemDocumentFlowDatumAfterDeleteHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	case boil.AfterUpsertHook:
		sapOutboundDeliveryItemDocumentFlowDatumAfterUpsertHooks = append(sapOutboundDeliveryItemDocumentFlowDatumAfterUpsertHooks, sapOutboundDeliveryItemDocumentFlowDatumHook)
	}
}

// One returns a single sapOutboundDeliveryItemDocumentFlowDatum record from the query.
func (q sapOutboundDeliveryItemDocumentFlowDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapOutboundDeliveryItemDocumentFlowDatum, error) {
	o := &SapOutboundDeliveryItemDocumentFlowDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_outbound_delivery_item_document_flow_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapOutboundDeliveryItemDocumentFlowDatum records from the query.
func (q sapOutboundDeliveryItemDocumentFlowDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapOutboundDeliveryItemDocumentFlowDatumSlice, error) {
	var o []*SapOutboundDeliveryItemDocumentFlowDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapOutboundDeliveryItemDocumentFlowDatum slice")
	}

	if len(sapOutboundDeliveryItemDocumentFlowDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapOutboundDeliveryItemDocumentFlowDatum records in the query.
func (q sapOutboundDeliveryItemDocumentFlowDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_outbound_delivery_item_document_flow_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapOutboundDeliveryItemDocumentFlowDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_outbound_delivery_item_document_flow_data exists")
	}

	return count > 0, nil
}

// PrecedingDocumentSapOutboundDeliveryHeaderDatum pointed to by the foreign key.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) PrecedingDocumentSapOutboundDeliveryHeaderDatum(mods ...qm.QueryMod) sapOutboundDeliveryHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DeliveryDocument` = ?", o.PrecedingDocument),
	}

	queryMods = append(queryMods, mods...)

	query := SapOutboundDeliveryHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_outbound_delivery_header_data`")

	return query
}

// LoadPrecedingDocumentSapOutboundDeliveryHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapOutboundDeliveryItemDocumentFlowDatumL) LoadPrecedingDocumentSapOutboundDeliveryHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapOutboundDeliveryItemDocumentFlowDatum interface{}, mods queries.Applicator) error {
	var slice []*SapOutboundDeliveryItemDocumentFlowDatum
	var object *SapOutboundDeliveryItemDocumentFlowDatum

	if singular {
		object = maybeSapOutboundDeliveryItemDocumentFlowDatum.(*SapOutboundDeliveryItemDocumentFlowDatum)
	} else {
		slice = *maybeSapOutboundDeliveryItemDocumentFlowDatum.(*[]*SapOutboundDeliveryItemDocumentFlowDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapOutboundDeliveryItemDocumentFlowDatumR{}
		}
		args = append(args, object.PrecedingDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapOutboundDeliveryItemDocumentFlowDatumR{}
			}

			for _, a := range args {
				if a == obj.PrecedingDocument {
					continue Outer
				}
			}

			args = append(args, obj.PrecedingDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_outbound_delivery_header_data`),
		qm.WhereIn(`sap_outbound_delivery_header_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapOutboundDeliveryHeaderDatum")
	}

	var resultSlice []*SapOutboundDeliveryHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapOutboundDeliveryHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_outbound_delivery_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_outbound_delivery_header_data")
	}

	if len(sapOutboundDeliveryItemDocumentFlowDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PrecedingDocumentSapOutboundDeliveryHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapOutboundDeliveryHeaderDatumR{}
		}
		foreign.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData = append(foreign.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PrecedingDocument == foreign.DeliveryDocument {
				local.R.PrecedingDocumentSapOutboundDeliveryHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapOutboundDeliveryHeaderDatumR{}
				}
				foreign.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData = append(foreign.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData, local)
				break
			}
		}
	}

	return nil
}

// SetPrecedingDocumentSapOutboundDeliveryHeaderDatum of the sapOutboundDeliveryItemDocumentFlowDatum to the related item.
// Sets o.R.PrecedingDocumentSapOutboundDeliveryHeaderDatum to related.
// Adds o to related.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) SetPrecedingDocumentSapOutboundDeliveryHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapOutboundDeliveryHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_outbound_delivery_item_document_flow_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PrecedingDocument"}),
		strmangle.WhereClause("`", "`", 0, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DeliveryDocument, o.PrecedingDocument, o.PrecedingDocumentItem, o.Deliveryversion, o.Subsequentdocument, o.SubsequentDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PrecedingDocument = related.DeliveryDocument
	if o.R == nil {
		o.R = &sapOutboundDeliveryItemDocumentFlowDatumR{
			PrecedingDocumentSapOutboundDeliveryHeaderDatum: related,
		}
	} else {
		o.R.PrecedingDocumentSapOutboundDeliveryHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapOutboundDeliveryHeaderDatumR{
			PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData: SapOutboundDeliveryItemDocumentFlowDatumSlice{o},
		}
	} else {
		related.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData = append(related.R.PrecedingDocumentSapOutboundDeliveryItemDocumentFlowData, o)
	}

	return nil
}

// SapOutboundDeliveryItemDocumentFlowData retrieves all the records using an executor.
func SapOutboundDeliveryItemDocumentFlowData(mods ...qm.QueryMod) sapOutboundDeliveryItemDocumentFlowDatumQuery {
	mods = append(mods, qm.From("`sap_outbound_delivery_item_document_flow_data`"))
	return sapOutboundDeliveryItemDocumentFlowDatumQuery{NewQuery(mods...)}
}

// FindSapOutboundDeliveryItemDocumentFlowDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapOutboundDeliveryItemDocumentFlowDatum(ctx context.Context, exec boil.ContextExecutor, precedingDocument string, precedingDocumentItem string, deliveryversion string, subsequentdocument string, subsequentDocumentItem string, selectCols ...string) (*SapOutboundDeliveryItemDocumentFlowDatum, error) {
	sapOutboundDeliveryItemDocumentFlowDatumObj := &SapOutboundDeliveryItemDocumentFlowDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_outbound_delivery_item_document_flow_data` where `PrecedingDocument`=? AND `PrecedingDocumentItem`=? AND `Deliveryversion`=? AND `Subsequentdocument`=? AND `SubsequentDocumentItem`=?", sel,
	)

	q := queries.Raw(query, precedingDocument, precedingDocumentItem, deliveryversion, subsequentdocument, subsequentDocumentItem)

	err := q.Bind(ctx, exec, sapOutboundDeliveryItemDocumentFlowDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_outbound_delivery_item_document_flow_data")
	}

	if err = sapOutboundDeliveryItemDocumentFlowDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapOutboundDeliveryItemDocumentFlowDatumObj, err
	}

	return sapOutboundDeliveryItemDocumentFlowDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_outbound_delivery_item_document_flow_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapOutboundDeliveryItemDocumentFlowDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapOutboundDeliveryItemDocumentFlowDatumInsertCacheMut.RLock()
	cache, cached := sapOutboundDeliveryItemDocumentFlowDatumInsertCache[key]
	sapOutboundDeliveryItemDocumentFlowDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapOutboundDeliveryItemDocumentFlowDatumAllColumns,
			sapOutboundDeliveryItemDocumentFlowDatumColumnsWithDefault,
			sapOutboundDeliveryItemDocumentFlowDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_outbound_delivery_item_document_flow_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_outbound_delivery_item_document_flow_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_outbound_delivery_item_document_flow_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_outbound_delivery_item_document_flow_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PrecedingDocument,
		o.PrecedingDocumentItem,
		o.Deliveryversion,
		o.Subsequentdocument,
		o.SubsequentDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_outbound_delivery_item_document_flow_data")
	}

CacheNoHooks:
	if !cached {
		sapOutboundDeliveryItemDocumentFlowDatumInsertCacheMut.Lock()
		sapOutboundDeliveryItemDocumentFlowDatumInsertCache[key] = cache
		sapOutboundDeliveryItemDocumentFlowDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapOutboundDeliveryItemDocumentFlowDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapOutboundDeliveryItemDocumentFlowDatumUpdateCacheMut.RLock()
	cache, cached := sapOutboundDeliveryItemDocumentFlowDatumUpdateCache[key]
	sapOutboundDeliveryItemDocumentFlowDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapOutboundDeliveryItemDocumentFlowDatumAllColumns,
			sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_outbound_delivery_item_document_flow_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_outbound_delivery_item_document_flow_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, append(wl, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_outbound_delivery_item_document_flow_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_outbound_delivery_item_document_flow_data")
	}

	if !cached {
		sapOutboundDeliveryItemDocumentFlowDatumUpdateCacheMut.Lock()
		sapOutboundDeliveryItemDocumentFlowDatumUpdateCache[key] = cache
		sapOutboundDeliveryItemDocumentFlowDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapOutboundDeliveryItemDocumentFlowDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_outbound_delivery_item_document_flow_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_outbound_delivery_item_document_flow_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapOutboundDeliveryItemDocumentFlowDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_outbound_delivery_item_document_flow_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapOutboundDeliveryItemDocumentFlowDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapOutboundDeliveryItemDocumentFlowDatum")
	}
	return rowsAff, nil
}

var mySQLSapOutboundDeliveryItemDocumentFlowDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_outbound_delivery_item_document_flow_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapOutboundDeliveryItemDocumentFlowDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapOutboundDeliveryItemDocumentFlowDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapOutboundDeliveryItemDocumentFlowDatumUpsertCacheMut.RLock()
	cache, cached := sapOutboundDeliveryItemDocumentFlowDatumUpsertCache[key]
	sapOutboundDeliveryItemDocumentFlowDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapOutboundDeliveryItemDocumentFlowDatumAllColumns,
			sapOutboundDeliveryItemDocumentFlowDatumColumnsWithDefault,
			sapOutboundDeliveryItemDocumentFlowDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapOutboundDeliveryItemDocumentFlowDatumAllColumns,
			sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_outbound_delivery_item_document_flow_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_outbound_delivery_item_document_flow_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_outbound_delivery_item_document_flow_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_outbound_delivery_item_document_flow_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapOutboundDeliveryItemDocumentFlowDatumType, sapOutboundDeliveryItemDocumentFlowDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_outbound_delivery_item_document_flow_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_outbound_delivery_item_document_flow_data")
	}

CacheNoHooks:
	if !cached {
		sapOutboundDeliveryItemDocumentFlowDatumUpsertCacheMut.Lock()
		sapOutboundDeliveryItemDocumentFlowDatumUpsertCache[key] = cache
		sapOutboundDeliveryItemDocumentFlowDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapOutboundDeliveryItemDocumentFlowDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapOutboundDeliveryItemDocumentFlowDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_outbound_delivery_item_document_flow_data` WHERE `PrecedingDocument`=? AND `PrecedingDocumentItem`=? AND `Deliveryversion`=? AND `Subsequentdocument`=? AND `SubsequentDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_outbound_delivery_item_document_flow_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_outbound_delivery_item_document_flow_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapOutboundDeliveryItemDocumentFlowDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapOutboundDeliveryItemDocumentFlowDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_outbound_delivery_item_document_flow_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_outbound_delivery_item_document_flow_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapOutboundDeliveryItemDocumentFlowDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapOutboundDeliveryItemDocumentFlowDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_outbound_delivery_item_document_flow_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapOutboundDeliveryItemDocumentFlowDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_outbound_delivery_item_document_flow_data")
	}

	if len(sapOutboundDeliveryItemDocumentFlowDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapOutboundDeliveryItemDocumentFlowDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapOutboundDeliveryItemDocumentFlowDatum(ctx, exec, o.PrecedingDocument, o.PrecedingDocumentItem, o.Deliveryversion, o.Subsequentdocument, o.SubsequentDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapOutboundDeliveryItemDocumentFlowDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapOutboundDeliveryItemDocumentFlowDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_outbound_delivery_item_document_flow_data`.* FROM `sap_outbound_delivery_item_document_flow_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapOutboundDeliveryItemDocumentFlowDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapOutboundDeliveryItemDocumentFlowDatumSlice")
	}

	*o = slice

	return nil
}

// SapOutboundDeliveryItemDocumentFlowDatumExists checks if the SapOutboundDeliveryItemDocumentFlowDatum row exists.
func SapOutboundDeliveryItemDocumentFlowDatumExists(ctx context.Context, exec boil.ContextExecutor, precedingDocument string, precedingDocumentItem string, deliveryversion string, subsequentdocument string, subsequentDocumentItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_outbound_delivery_item_document_flow_data` where `PrecedingDocument`=? AND `PrecedingDocumentItem`=? AND `Deliveryversion`=? AND `Subsequentdocument`=? AND `SubsequentDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, precedingDocument, precedingDocumentItem, deliveryversion, subsequentdocument, subsequentDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, precedingDocument, precedingDocumentItem, deliveryversion, subsequentdocument, subsequentDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_outbound_delivery_item_document_flow_data exists")
	}

	return exists, nil
}
