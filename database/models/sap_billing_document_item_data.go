// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBillingDocumentItemDatum is an object representing the database table.
type SapBillingDocumentItemDatum struct {
	BillingDocument              string      `boil:"BillingDocument" json:"BillingDocument" toml:"BillingDocument" yaml:"BillingDocument"`
	BillingDocumentItem          string      `boil:"BillingDocumentItem" json:"BillingDocumentItem" toml:"BillingDocumentItem" yaml:"BillingDocumentItem"`
	SalesDocumentItemCategory    null.String `boil:"SalesDocumentItemCategory" json:"SalesDocumentItemCategory,omitempty" toml:"SalesDocumentItemCategory" yaml:"SalesDocumentItemCategory,omitempty"`
	ReturnItemProcessingType     null.String `boil:"ReturnItemProcessingType" json:"ReturnItemProcessingType,omitempty" toml:"ReturnItemProcessingType" yaml:"ReturnItemProcessingType,omitempty"`
	CreationDate                 null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	Division                     null.String `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	Material                     null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	InternationalArticleNumber   null.String `boil:"InternationalArticleNumber" json:"InternationalArticleNumber,omitempty" toml:"InternationalArticleNumber" yaml:"InternationalArticleNumber,omitempty"`
	Batch                        null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	MaterialGroup                null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	Plant                        null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	StorageLocation              null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	BillingDocumentItemText      null.String `boil:"BillingDocumentItemText" json:"BillingDocumentItemText,omitempty" toml:"BillingDocumentItemText" yaml:"BillingDocumentItemText,omitempty"`
	BillingQuantity              null.String `boil:"BillingQuantity" json:"BillingQuantity,omitempty" toml:"BillingQuantity" yaml:"BillingQuantity,omitempty"`
	BillingQuantityUnit          null.String `boil:"BillingQuantityUnit" json:"BillingQuantityUnit,omitempty" toml:"BillingQuantityUnit" yaml:"BillingQuantityUnit,omitempty"`
	NetAmount                    null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	TransactionCurrency          null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	GrossAmount                  null.String `boil:"GrossAmount" json:"GrossAmount,omitempty" toml:"GrossAmount" yaml:"GrossAmount,omitempty"`
	PricingDate                  null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	TaxAmount                    null.String `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	MaterialPricingGroup         null.String `boil:"MaterialPricingGroup" json:"MaterialPricingGroup,omitempty" toml:"MaterialPricingGroup" yaml:"MaterialPricingGroup,omitempty"`
	MainItemMaterialPricingGroup null.String `boil:"MainItemMaterialPricingGroup" json:"MainItemMaterialPricingGroup,omitempty" toml:"MainItemMaterialPricingGroup" yaml:"MainItemMaterialPricingGroup,omitempty"`
	BusinessArea                 null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	ProfitCenter                 null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	WBSElement                   null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ControllingArea              null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	ProfitabilitySegment         null.String `boil:"ProfitabilitySegment" json:"ProfitabilitySegment,omitempty" toml:"ProfitabilitySegment" yaml:"ProfitabilitySegment,omitempty"`
	OrderID                      null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	CostCenter                   null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	ReferenceSDDocument          null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem      null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	MatlAccountAssignmentGroup   null.String `boil:"MatlAccountAssignmentGroup" json:"MatlAccountAssignmentGroup,omitempty" toml:"MatlAccountAssignmentGroup" yaml:"MatlAccountAssignmentGroup,omitempty"`
	SalesDocument                null.String `boil:"SalesDocument" json:"SalesDocument,omitempty" toml:"SalesDocument" yaml:"SalesDocument,omitempty"`
	SalesDocumentItem            null.String `boil:"SalesDocumentItem" json:"SalesDocumentItem,omitempty" toml:"SalesDocumentItem" yaml:"SalesDocumentItem,omitempty"`
	SDDocumentReason             null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	ShippingPoint                null.String `boil:"ShippingPoint" json:"ShippingPoint,omitempty" toml:"ShippingPoint" yaml:"ShippingPoint,omitempty"`

	R *sapBillingDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBillingDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBillingDocumentItemDatumColumns = struct {
	BillingDocument              string
	BillingDocumentItem          string
	SalesDocumentItemCategory    string
	ReturnItemProcessingType     string
	CreationDate                 string
	Division                     string
	Material                     string
	InternationalArticleNumber   string
	Batch                        string
	MaterialGroup                string
	Plant                        string
	StorageLocation              string
	BillingDocumentItemText      string
	BillingQuantity              string
	BillingQuantityUnit          string
	NetAmount                    string
	TransactionCurrency          string
	GrossAmount                  string
	PricingDate                  string
	TaxAmount                    string
	MaterialPricingGroup         string
	MainItemMaterialPricingGroup string
	BusinessArea                 string
	ProfitCenter                 string
	WBSElement                   string
	ControllingArea              string
	ProfitabilitySegment         string
	OrderID                      string
	CostCenter                   string
	ReferenceSDDocument          string
	ReferenceSDDocumentItem      string
	MatlAccountAssignmentGroup   string
	SalesDocument                string
	SalesDocumentItem            string
	SDDocumentReason             string
	ShippingPoint                string
}{
	BillingDocument:              "BillingDocument",
	BillingDocumentItem:          "BillingDocumentItem",
	SalesDocumentItemCategory:    "SalesDocumentItemCategory",
	ReturnItemProcessingType:     "ReturnItemProcessingType",
	CreationDate:                 "CreationDate",
	Division:                     "Division",
	Material:                     "Material",
	InternationalArticleNumber:   "InternationalArticleNumber",
	Batch:                        "Batch",
	MaterialGroup:                "MaterialGroup",
	Plant:                        "Plant",
	StorageLocation:              "StorageLocation",
	BillingDocumentItemText:      "BillingDocumentItemText",
	BillingQuantity:              "BillingQuantity",
	BillingQuantityUnit:          "BillingQuantityUnit",
	NetAmount:                    "NetAmount",
	TransactionCurrency:          "TransactionCurrency",
	GrossAmount:                  "GrossAmount",
	PricingDate:                  "PricingDate",
	TaxAmount:                    "TaxAmount",
	MaterialPricingGroup:         "MaterialPricingGroup",
	MainItemMaterialPricingGroup: "MainItemMaterialPricingGroup",
	BusinessArea:                 "BusinessArea",
	ProfitCenter:                 "ProfitCenter",
	WBSElement:                   "WBSElement",
	ControllingArea:              "ControllingArea",
	ProfitabilitySegment:         "ProfitabilitySegment",
	OrderID:                      "OrderID",
	CostCenter:                   "CostCenter",
	ReferenceSDDocument:          "ReferenceSDDocument",
	ReferenceSDDocumentItem:      "ReferenceSDDocumentItem",
	MatlAccountAssignmentGroup:   "MatlAccountAssignmentGroup",
	SalesDocument:                "SalesDocument",
	SalesDocumentItem:            "SalesDocumentItem",
	SDDocumentReason:             "SDDocumentReason",
	ShippingPoint:                "ShippingPoint",
}

var SapBillingDocumentItemDatumTableColumns = struct {
	BillingDocument              string
	BillingDocumentItem          string
	SalesDocumentItemCategory    string
	ReturnItemProcessingType     string
	CreationDate                 string
	Division                     string
	Material                     string
	InternationalArticleNumber   string
	Batch                        string
	MaterialGroup                string
	Plant                        string
	StorageLocation              string
	BillingDocumentItemText      string
	BillingQuantity              string
	BillingQuantityUnit          string
	NetAmount                    string
	TransactionCurrency          string
	GrossAmount                  string
	PricingDate                  string
	TaxAmount                    string
	MaterialPricingGroup         string
	MainItemMaterialPricingGroup string
	BusinessArea                 string
	ProfitCenter                 string
	WBSElement                   string
	ControllingArea              string
	ProfitabilitySegment         string
	OrderID                      string
	CostCenter                   string
	ReferenceSDDocument          string
	ReferenceSDDocumentItem      string
	MatlAccountAssignmentGroup   string
	SalesDocument                string
	SalesDocumentItem            string
	SDDocumentReason             string
	ShippingPoint                string
}{
	BillingDocument:              "sap_billing_document_item_data.BillingDocument",
	BillingDocumentItem:          "sap_billing_document_item_data.BillingDocumentItem",
	SalesDocumentItemCategory:    "sap_billing_document_item_data.SalesDocumentItemCategory",
	ReturnItemProcessingType:     "sap_billing_document_item_data.ReturnItemProcessingType",
	CreationDate:                 "sap_billing_document_item_data.CreationDate",
	Division:                     "sap_billing_document_item_data.Division",
	Material:                     "sap_billing_document_item_data.Material",
	InternationalArticleNumber:   "sap_billing_document_item_data.InternationalArticleNumber",
	Batch:                        "sap_billing_document_item_data.Batch",
	MaterialGroup:                "sap_billing_document_item_data.MaterialGroup",
	Plant:                        "sap_billing_document_item_data.Plant",
	StorageLocation:              "sap_billing_document_item_data.StorageLocation",
	BillingDocumentItemText:      "sap_billing_document_item_data.BillingDocumentItemText",
	BillingQuantity:              "sap_billing_document_item_data.BillingQuantity",
	BillingQuantityUnit:          "sap_billing_document_item_data.BillingQuantityUnit",
	NetAmount:                    "sap_billing_document_item_data.NetAmount",
	TransactionCurrency:          "sap_billing_document_item_data.TransactionCurrency",
	GrossAmount:                  "sap_billing_document_item_data.GrossAmount",
	PricingDate:                  "sap_billing_document_item_data.PricingDate",
	TaxAmount:                    "sap_billing_document_item_data.TaxAmount",
	MaterialPricingGroup:         "sap_billing_document_item_data.MaterialPricingGroup",
	MainItemMaterialPricingGroup: "sap_billing_document_item_data.MainItemMaterialPricingGroup",
	BusinessArea:                 "sap_billing_document_item_data.BusinessArea",
	ProfitCenter:                 "sap_billing_document_item_data.ProfitCenter",
	WBSElement:                   "sap_billing_document_item_data.WBSElement",
	ControllingArea:              "sap_billing_document_item_data.ControllingArea",
	ProfitabilitySegment:         "sap_billing_document_item_data.ProfitabilitySegment",
	OrderID:                      "sap_billing_document_item_data.OrderID",
	CostCenter:                   "sap_billing_document_item_data.CostCenter",
	ReferenceSDDocument:          "sap_billing_document_item_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:      "sap_billing_document_item_data.ReferenceSDDocumentItem",
	MatlAccountAssignmentGroup:   "sap_billing_document_item_data.MatlAccountAssignmentGroup",
	SalesDocument:                "sap_billing_document_item_data.SalesDocument",
	SalesDocumentItem:            "sap_billing_document_item_data.SalesDocumentItem",
	SDDocumentReason:             "sap_billing_document_item_data.SDDocumentReason",
	ShippingPoint:                "sap_billing_document_item_data.ShippingPoint",
}

// Generated where

var SapBillingDocumentItemDatumWhere = struct {
	BillingDocument              whereHelperstring
	BillingDocumentItem          whereHelperstring
	SalesDocumentItemCategory    whereHelpernull_String
	ReturnItemProcessingType     whereHelpernull_String
	CreationDate                 whereHelpernull_String
	Division                     whereHelpernull_String
	Material                     whereHelpernull_String
	InternationalArticleNumber   whereHelpernull_String
	Batch                        whereHelpernull_String
	MaterialGroup                whereHelpernull_String
	Plant                        whereHelpernull_String
	StorageLocation              whereHelpernull_String
	BillingDocumentItemText      whereHelpernull_String
	BillingQuantity              whereHelpernull_String
	BillingQuantityUnit          whereHelpernull_String
	NetAmount                    whereHelpernull_String
	TransactionCurrency          whereHelpernull_String
	GrossAmount                  whereHelpernull_String
	PricingDate                  whereHelpernull_String
	TaxAmount                    whereHelpernull_String
	MaterialPricingGroup         whereHelpernull_String
	MainItemMaterialPricingGroup whereHelpernull_String
	BusinessArea                 whereHelpernull_String
	ProfitCenter                 whereHelpernull_String
	WBSElement                   whereHelpernull_String
	ControllingArea              whereHelpernull_String
	ProfitabilitySegment         whereHelpernull_String
	OrderID                      whereHelpernull_String
	CostCenter                   whereHelpernull_String
	ReferenceSDDocument          whereHelpernull_String
	ReferenceSDDocumentItem      whereHelpernull_String
	MatlAccountAssignmentGroup   whereHelpernull_String
	SalesDocument                whereHelpernull_String
	SalesDocumentItem            whereHelpernull_String
	SDDocumentReason             whereHelpernull_String
	ShippingPoint                whereHelpernull_String
}{
	BillingDocument:              whereHelperstring{field: "`sap_billing_document_item_data`.`BillingDocument`"},
	BillingDocumentItem:          whereHelperstring{field: "`sap_billing_document_item_data`.`BillingDocumentItem`"},
	SalesDocumentItemCategory:    whereHelpernull_String{field: "`sap_billing_document_item_data`.`SalesDocumentItemCategory`"},
	ReturnItemProcessingType:     whereHelpernull_String{field: "`sap_billing_document_item_data`.`ReturnItemProcessingType`"},
	CreationDate:                 whereHelpernull_String{field: "`sap_billing_document_item_data`.`CreationDate`"},
	Division:                     whereHelpernull_String{field: "`sap_billing_document_item_data`.`Division`"},
	Material:                     whereHelpernull_String{field: "`sap_billing_document_item_data`.`Material`"},
	InternationalArticleNumber:   whereHelpernull_String{field: "`sap_billing_document_item_data`.`InternationalArticleNumber`"},
	Batch:                        whereHelpernull_String{field: "`sap_billing_document_item_data`.`Batch`"},
	MaterialGroup:                whereHelpernull_String{field: "`sap_billing_document_item_data`.`MaterialGroup`"},
	Plant:                        whereHelpernull_String{field: "`sap_billing_document_item_data`.`Plant`"},
	StorageLocation:              whereHelpernull_String{field: "`sap_billing_document_item_data`.`StorageLocation`"},
	BillingDocumentItemText:      whereHelpernull_String{field: "`sap_billing_document_item_data`.`BillingDocumentItemText`"},
	BillingQuantity:              whereHelpernull_String{field: "`sap_billing_document_item_data`.`BillingQuantity`"},
	BillingQuantityUnit:          whereHelpernull_String{field: "`sap_billing_document_item_data`.`BillingQuantityUnit`"},
	NetAmount:                    whereHelpernull_String{field: "`sap_billing_document_item_data`.`NetAmount`"},
	TransactionCurrency:          whereHelpernull_String{field: "`sap_billing_document_item_data`.`TransactionCurrency`"},
	GrossAmount:                  whereHelpernull_String{field: "`sap_billing_document_item_data`.`GrossAmount`"},
	PricingDate:                  whereHelpernull_String{field: "`sap_billing_document_item_data`.`PricingDate`"},
	TaxAmount:                    whereHelpernull_String{field: "`sap_billing_document_item_data`.`TaxAmount`"},
	MaterialPricingGroup:         whereHelpernull_String{field: "`sap_billing_document_item_data`.`MaterialPricingGroup`"},
	MainItemMaterialPricingGroup: whereHelpernull_String{field: "`sap_billing_document_item_data`.`MainItemMaterialPricingGroup`"},
	BusinessArea:                 whereHelpernull_String{field: "`sap_billing_document_item_data`.`BusinessArea`"},
	ProfitCenter:                 whereHelpernull_String{field: "`sap_billing_document_item_data`.`ProfitCenter`"},
	WBSElement:                   whereHelpernull_String{field: "`sap_billing_document_item_data`.`WBSElement`"},
	ControllingArea:              whereHelpernull_String{field: "`sap_billing_document_item_data`.`ControllingArea`"},
	ProfitabilitySegment:         whereHelpernull_String{field: "`sap_billing_document_item_data`.`ProfitabilitySegment`"},
	OrderID:                      whereHelpernull_String{field: "`sap_billing_document_item_data`.`OrderID`"},
	CostCenter:                   whereHelpernull_String{field: "`sap_billing_document_item_data`.`CostCenter`"},
	ReferenceSDDocument:          whereHelpernull_String{field: "`sap_billing_document_item_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:      whereHelpernull_String{field: "`sap_billing_document_item_data`.`ReferenceSDDocumentItem`"},
	MatlAccountAssignmentGroup:   whereHelpernull_String{field: "`sap_billing_document_item_data`.`MatlAccountAssignmentGroup`"},
	SalesDocument:                whereHelpernull_String{field: "`sap_billing_document_item_data`.`SalesDocument`"},
	SalesDocumentItem:            whereHelpernull_String{field: "`sap_billing_document_item_data`.`SalesDocumentItem`"},
	SDDocumentReason:             whereHelpernull_String{field: "`sap_billing_document_item_data`.`SDDocumentReason`"},
	ShippingPoint:                whereHelpernull_String{field: "`sap_billing_document_item_data`.`ShippingPoint`"},
}

// SapBillingDocumentItemDatumRels is where relationship names are stored.
var SapBillingDocumentItemDatumRels = struct {
	BillingDocumentSapBillingDocumentHeaderDatum string
}{
	BillingDocumentSapBillingDocumentHeaderDatum: "BillingDocumentSapBillingDocumentHeaderDatum",
}

// sapBillingDocumentItemDatumR is where relationships are stored.
type sapBillingDocumentItemDatumR struct {
	BillingDocumentSapBillingDocumentHeaderDatum *SapBillingDocumentHeaderDatum `boil:"BillingDocumentSapBillingDocumentHeaderDatum" json:"BillingDocumentSapBillingDocumentHeaderDatum" toml:"BillingDocumentSapBillingDocumentHeaderDatum" yaml:"BillingDocumentSapBillingDocumentHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBillingDocumentItemDatumR) NewStruct() *sapBillingDocumentItemDatumR {
	return &sapBillingDocumentItemDatumR{}
}

// sapBillingDocumentItemDatumL is where Load methods for each relationship are stored.
type sapBillingDocumentItemDatumL struct{}

var (
	sapBillingDocumentItemDatumAllColumns            = []string{"BillingDocument", "BillingDocumentItem", "SalesDocumentItemCategory", "ReturnItemProcessingType", "CreationDate", "Division", "Material", "InternationalArticleNumber", "Batch", "MaterialGroup", "Plant", "StorageLocation", "BillingDocumentItemText", "BillingQuantity", "BillingQuantityUnit", "NetAmount", "TransactionCurrency", "GrossAmount", "PricingDate", "TaxAmount", "MaterialPricingGroup", "MainItemMaterialPricingGroup", "BusinessArea", "ProfitCenter", "WBSElement", "ControllingArea", "ProfitabilitySegment", "OrderID", "CostCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "MatlAccountAssignmentGroup", "SalesDocument", "SalesDocumentItem", "SDDocumentReason", "ShippingPoint"}
	sapBillingDocumentItemDatumColumnsWithoutDefault = []string{"BillingDocument", "BillingDocumentItem", "SalesDocumentItemCategory", "ReturnItemProcessingType", "CreationDate", "Division", "Material", "InternationalArticleNumber", "Batch", "MaterialGroup", "Plant", "StorageLocation", "BillingDocumentItemText", "BillingQuantity", "BillingQuantityUnit", "NetAmount", "TransactionCurrency", "GrossAmount", "PricingDate", "TaxAmount", "MaterialPricingGroup", "MainItemMaterialPricingGroup", "BusinessArea", "ProfitCenter", "WBSElement", "ControllingArea", "ProfitabilitySegment", "OrderID", "CostCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "MatlAccountAssignmentGroup", "SalesDocument", "SalesDocumentItem", "SDDocumentReason", "ShippingPoint"}
	sapBillingDocumentItemDatumColumnsWithDefault    = []string{}
	sapBillingDocumentItemDatumPrimaryKeyColumns     = []string{"BillingDocument", "BillingDocumentItem"}
	sapBillingDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// SapBillingDocumentItemDatumSlice is an alias for a slice of pointers to SapBillingDocumentItemDatum.
	// This should almost always be used instead of []SapBillingDocumentItemDatum.
	SapBillingDocumentItemDatumSlice []*SapBillingDocumentItemDatum
	// SapBillingDocumentItemDatumHook is the signature for custom SapBillingDocumentItemDatum hook methods
	SapBillingDocumentItemDatumHook func(context.Context, boil.ContextExecutor, *SapBillingDocumentItemDatum) error

	sapBillingDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBillingDocumentItemDatumType                 = reflect.TypeOf(&SapBillingDocumentItemDatum{})
	sapBillingDocumentItemDatumMapping              = queries.MakeStructMapping(sapBillingDocumentItemDatumType)
	sapBillingDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, sapBillingDocumentItemDatumPrimaryKeyColumns)
	sapBillingDocumentItemDatumInsertCacheMut       sync.RWMutex
	sapBillingDocumentItemDatumInsertCache          = make(map[string]insertCache)
	sapBillingDocumentItemDatumUpdateCacheMut       sync.RWMutex
	sapBillingDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	sapBillingDocumentItemDatumUpsertCacheMut       sync.RWMutex
	sapBillingDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBillingDocumentItemDatumAfterSelectHooks []SapBillingDocumentItemDatumHook

var sapBillingDocumentItemDatumBeforeInsertHooks []SapBillingDocumentItemDatumHook
var sapBillingDocumentItemDatumAfterInsertHooks []SapBillingDocumentItemDatumHook

var sapBillingDocumentItemDatumBeforeUpdateHooks []SapBillingDocumentItemDatumHook
var sapBillingDocumentItemDatumAfterUpdateHooks []SapBillingDocumentItemDatumHook

var sapBillingDocumentItemDatumBeforeDeleteHooks []SapBillingDocumentItemDatumHook
var sapBillingDocumentItemDatumAfterDeleteHooks []SapBillingDocumentItemDatumHook

var sapBillingDocumentItemDatumBeforeUpsertHooks []SapBillingDocumentItemDatumHook
var sapBillingDocumentItemDatumAfterUpsertHooks []SapBillingDocumentItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBillingDocumentItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBillingDocumentItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBillingDocumentItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBillingDocumentItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBillingDocumentItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBillingDocumentItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBillingDocumentItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBillingDocumentItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBillingDocumentItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBillingDocumentItemDatumHook registers your hook function for all future operations.
func AddSapBillingDocumentItemDatumHook(hookPoint boil.HookPoint, sapBillingDocumentItemDatumHook SapBillingDocumentItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBillingDocumentItemDatumAfterSelectHooks = append(sapBillingDocumentItemDatumAfterSelectHooks, sapBillingDocumentItemDatumHook)
	case boil.BeforeInsertHook:
		sapBillingDocumentItemDatumBeforeInsertHooks = append(sapBillingDocumentItemDatumBeforeInsertHooks, sapBillingDocumentItemDatumHook)
	case boil.AfterInsertHook:
		sapBillingDocumentItemDatumAfterInsertHooks = append(sapBillingDocumentItemDatumAfterInsertHooks, sapBillingDocumentItemDatumHook)
	case boil.BeforeUpdateHook:
		sapBillingDocumentItemDatumBeforeUpdateHooks = append(sapBillingDocumentItemDatumBeforeUpdateHooks, sapBillingDocumentItemDatumHook)
	case boil.AfterUpdateHook:
		sapBillingDocumentItemDatumAfterUpdateHooks = append(sapBillingDocumentItemDatumAfterUpdateHooks, sapBillingDocumentItemDatumHook)
	case boil.BeforeDeleteHook:
		sapBillingDocumentItemDatumBeforeDeleteHooks = append(sapBillingDocumentItemDatumBeforeDeleteHooks, sapBillingDocumentItemDatumHook)
	case boil.AfterDeleteHook:
		sapBillingDocumentItemDatumAfterDeleteHooks = append(sapBillingDocumentItemDatumAfterDeleteHooks, sapBillingDocumentItemDatumHook)
	case boil.BeforeUpsertHook:
		sapBillingDocumentItemDatumBeforeUpsertHooks = append(sapBillingDocumentItemDatumBeforeUpsertHooks, sapBillingDocumentItemDatumHook)
	case boil.AfterUpsertHook:
		sapBillingDocumentItemDatumAfterUpsertHooks = append(sapBillingDocumentItemDatumAfterUpsertHooks, sapBillingDocumentItemDatumHook)
	}
}

// One returns a single sapBillingDocumentItemDatum record from the query.
func (q sapBillingDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBillingDocumentItemDatum, error) {
	o := &SapBillingDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_billing_document_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBillingDocumentItemDatum records from the query.
func (q sapBillingDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBillingDocumentItemDatumSlice, error) {
	var o []*SapBillingDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBillingDocumentItemDatum slice")
	}

	if len(sapBillingDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBillingDocumentItemDatum records in the query.
func (q sapBillingDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_billing_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBillingDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_billing_document_item_data exists")
	}

	return count > 0, nil
}

// BillingDocumentSapBillingDocumentHeaderDatum pointed to by the foreign key.
func (o *SapBillingDocumentItemDatum) BillingDocumentSapBillingDocumentHeaderDatum(mods ...qm.QueryMod) sapBillingDocumentHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillingDocument` = ?", o.BillingDocument),
	}

	queryMods = append(queryMods, mods...)

	query := SapBillingDocumentHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_billing_document_header_data`")

	return query
}

// LoadBillingDocumentSapBillingDocumentHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBillingDocumentItemDatumL) LoadBillingDocumentSapBillingDocumentHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillingDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillingDocumentItemDatum
	var object *SapBillingDocumentItemDatum

	if singular {
		object = maybeSapBillingDocumentItemDatum.(*SapBillingDocumentItemDatum)
	} else {
		slice = *maybeSapBillingDocumentItemDatum.(*[]*SapBillingDocumentItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillingDocumentItemDatumR{}
		}
		args = append(args, object.BillingDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillingDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BillingDocument {
					continue Outer
				}
			}

			args = append(args, obj.BillingDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_billing_document_header_data`),
		qm.WhereIn(`sap_billing_document_header_data.BillingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBillingDocumentHeaderDatum")
	}

	var resultSlice []*SapBillingDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBillingDocumentHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_billing_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_billing_document_header_data")
	}

	if len(sapBillingDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillingDocumentSapBillingDocumentHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBillingDocumentHeaderDatumR{}
		}
		foreign.R.BillingDocumentSapBillingDocumentItemData = append(foreign.R.BillingDocumentSapBillingDocumentItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillingDocument == foreign.BillingDocument {
				local.R.BillingDocumentSapBillingDocumentHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBillingDocumentHeaderDatumR{}
				}
				foreign.R.BillingDocumentSapBillingDocumentItemData = append(foreign.R.BillingDocumentSapBillingDocumentItemData, local)
				break
			}
		}
	}

	return nil
}

// SetBillingDocumentSapBillingDocumentHeaderDatum of the sapBillingDocumentItemDatum to the related item.
// Sets o.R.BillingDocumentSapBillingDocumentHeaderDatum to related.
// Adds o to related.R.BillingDocumentSapBillingDocumentItemData.
func (o *SapBillingDocumentItemDatum) SetBillingDocumentSapBillingDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBillingDocumentHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_billing_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillingDocument"}),
		strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillingDocument, o.BillingDocument, o.BillingDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillingDocument = related.BillingDocument
	if o.R == nil {
		o.R = &sapBillingDocumentItemDatumR{
			BillingDocumentSapBillingDocumentHeaderDatum: related,
		}
	} else {
		o.R.BillingDocumentSapBillingDocumentHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapBillingDocumentHeaderDatumR{
			BillingDocumentSapBillingDocumentItemData: SapBillingDocumentItemDatumSlice{o},
		}
	} else {
		related.R.BillingDocumentSapBillingDocumentItemData = append(related.R.BillingDocumentSapBillingDocumentItemData, o)
	}

	return nil
}

// SapBillingDocumentItemData retrieves all the records using an executor.
func SapBillingDocumentItemData(mods ...qm.QueryMod) sapBillingDocumentItemDatumQuery {
	mods = append(mods, qm.From("`sap_billing_document_item_data`"))
	return sapBillingDocumentItemDatumQuery{NewQuery(mods...)}
}

// FindSapBillingDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBillingDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, billingDocument string, billingDocumentItem string, selectCols ...string) (*SapBillingDocumentItemDatum, error) {
	sapBillingDocumentItemDatumObj := &SapBillingDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_billing_document_item_data` where `BillingDocument`=? AND `BillingDocumentItem`=?", sel,
	)

	q := queries.Raw(query, billingDocument, billingDocumentItem)

	err := q.Bind(ctx, exec, sapBillingDocumentItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_billing_document_item_data")
	}

	if err = sapBillingDocumentItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBillingDocumentItemDatumObj, err
	}

	return sapBillingDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBillingDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_billing_document_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillingDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBillingDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := sapBillingDocumentItemDatumInsertCache[key]
	sapBillingDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBillingDocumentItemDatumAllColumns,
			sapBillingDocumentItemDatumColumnsWithDefault,
			sapBillingDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_billing_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_billing_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_billing_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_billing_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillingDocument,
		o.BillingDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_billing_document_item_data")
	}

CacheNoHooks:
	if !cached {
		sapBillingDocumentItemDatumInsertCacheMut.Lock()
		sapBillingDocumentItemDatumInsertCache[key] = cache
		sapBillingDocumentItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBillingDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBillingDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBillingDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := sapBillingDocumentItemDatumUpdateCache[key]
	sapBillingDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBillingDocumentItemDatumAllColumns,
			sapBillingDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_billing_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_billing_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, append(wl, sapBillingDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_billing_document_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_billing_document_item_data")
	}

	if !cached {
		sapBillingDocumentItemDatumUpdateCacheMut.Lock()
		sapBillingDocumentItemDatumUpdateCache[key] = cache
		sapBillingDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBillingDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_billing_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_billing_document_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBillingDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_billing_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBillingDocumentItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBillingDocumentItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapBillingDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBillingDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_billing_document_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillingDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBillingDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBillingDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := sapBillingDocumentItemDatumUpsertCache[key]
	sapBillingDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBillingDocumentItemDatumAllColumns,
			sapBillingDocumentItemDatumColumnsWithDefault,
			sapBillingDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBillingDocumentItemDatumAllColumns,
			sapBillingDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_billing_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_billing_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_billing_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_billing_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBillingDocumentItemDatumType, sapBillingDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_billing_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_billing_document_item_data")
	}

CacheNoHooks:
	if !cached {
		sapBillingDocumentItemDatumUpsertCacheMut.Lock()
		sapBillingDocumentItemDatumUpsertCache[key] = cache
		sapBillingDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBillingDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBillingDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBillingDocumentItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBillingDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_billing_document_item_data` WHERE `BillingDocument`=? AND `BillingDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_billing_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_billing_document_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBillingDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBillingDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_billing_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_billing_document_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBillingDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBillingDocumentItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_billing_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBillingDocumentItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_billing_document_item_data")
	}

	if len(sapBillingDocumentItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBillingDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBillingDocumentItemDatum(ctx, exec, o.BillingDocument, o.BillingDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBillingDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBillingDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_billing_document_item_data`.* FROM `sap_billing_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBillingDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapBillingDocumentItemDatumExists checks if the SapBillingDocumentItemDatum row exists.
func SapBillingDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, billingDocument string, billingDocumentItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_billing_document_item_data` where `BillingDocument`=? AND `BillingDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billingDocument, billingDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, billingDocument, billingDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_billing_document_item_data exists")
	}

	return exists, nil
}
