// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterClassProductCharacteristicDatum is an object representing the database table.
type SapProductMasterClassProductCharacteristicDatum struct {
	Product         string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ClassInternalID string      `boil:"ClassInternalID" json:"ClassInternalID" toml:"ClassInternalID" yaml:"ClassInternalID"`
	CharcInternalID string      `boil:"CharcInternalID" json:"CharcInternalID" toml:"CharcInternalID" yaml:"CharcInternalID"`
	KeyDate         null.String `boil:"KeyDate" json:"KeyDate,omitempty" toml:"KeyDate" yaml:"KeyDate,omitempty"`
	ChangeNumber    null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ClassType       null.String `boil:"ClassType" json:"ClassType,omitempty" toml:"ClassType" yaml:"ClassType,omitempty"`

	R *sapProductMasterClassProductCharacteristicDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterClassProductCharacteristicDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterClassProductCharacteristicDatumColumns = struct {
	Product         string
	ClassInternalID string
	CharcInternalID string
	KeyDate         string
	ChangeNumber    string
	ClassType       string
}{
	Product:         "Product",
	ClassInternalID: "ClassInternalID",
	CharcInternalID: "CharcInternalID",
	KeyDate:         "KeyDate",
	ChangeNumber:    "ChangeNumber",
	ClassType:       "ClassType",
}

var SapProductMasterClassProductCharacteristicDatumTableColumns = struct {
	Product         string
	ClassInternalID string
	CharcInternalID string
	KeyDate         string
	ChangeNumber    string
	ClassType       string
}{
	Product:         "sap_product_master_class_product_characteristic_data.Product",
	ClassInternalID: "sap_product_master_class_product_characteristic_data.ClassInternalID",
	CharcInternalID: "sap_product_master_class_product_characteristic_data.CharcInternalID",
	KeyDate:         "sap_product_master_class_product_characteristic_data.KeyDate",
	ChangeNumber:    "sap_product_master_class_product_characteristic_data.ChangeNumber",
	ClassType:       "sap_product_master_class_product_characteristic_data.ClassType",
}

// Generated where

var SapProductMasterClassProductCharacteristicDatumWhere = struct {
	Product         whereHelperstring
	ClassInternalID whereHelperstring
	CharcInternalID whereHelperstring
	KeyDate         whereHelpernull_String
	ChangeNumber    whereHelpernull_String
	ClassType       whereHelpernull_String
}{
	Product:         whereHelperstring{field: "`sap_product_master_class_product_characteristic_data`.`Product`"},
	ClassInternalID: whereHelperstring{field: "`sap_product_master_class_product_characteristic_data`.`ClassInternalID`"},
	CharcInternalID: whereHelperstring{field: "`sap_product_master_class_product_characteristic_data`.`CharcInternalID`"},
	KeyDate:         whereHelpernull_String{field: "`sap_product_master_class_product_characteristic_data`.`KeyDate`"},
	ChangeNumber:    whereHelpernull_String{field: "`sap_product_master_class_product_characteristic_data`.`ChangeNumber`"},
	ClassType:       whereHelpernull_String{field: "`sap_product_master_class_product_characteristic_data`.`ClassType`"},
}

// SapProductMasterClassProductCharacteristicDatumRels is where relationship names are stored.
var SapProductMasterClassProductCharacteristicDatumRels = struct {
	ProductSapProductMasterClassProductGeneralDatum string
}{
	ProductSapProductMasterClassProductGeneralDatum: "ProductSapProductMasterClassProductGeneralDatum",
}

// sapProductMasterClassProductCharacteristicDatumR is where relationships are stored.
type sapProductMasterClassProductCharacteristicDatumR struct {
	ProductSapProductMasterClassProductGeneralDatum *SapProductMasterClassProductGeneralDatum `boil:"ProductSapProductMasterClassProductGeneralDatum" json:"ProductSapProductMasterClassProductGeneralDatum" toml:"ProductSapProductMasterClassProductGeneralDatum" yaml:"ProductSapProductMasterClassProductGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterClassProductCharacteristicDatumR) NewStruct() *sapProductMasterClassProductCharacteristicDatumR {
	return &sapProductMasterClassProductCharacteristicDatumR{}
}

// sapProductMasterClassProductCharacteristicDatumL is where Load methods for each relationship are stored.
type sapProductMasterClassProductCharacteristicDatumL struct{}

var (
	sapProductMasterClassProductCharacteristicDatumAllColumns            = []string{"Product", "ClassInternalID", "CharcInternalID", "KeyDate", "ChangeNumber", "ClassType"}
	sapProductMasterClassProductCharacteristicDatumColumnsWithoutDefault = []string{"Product", "ClassInternalID", "CharcInternalID", "KeyDate", "ChangeNumber", "ClassType"}
	sapProductMasterClassProductCharacteristicDatumColumnsWithDefault    = []string{}
	sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns     = []string{"Product", "ClassInternalID", "CharcInternalID"}
	sapProductMasterClassProductCharacteristicDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterClassProductCharacteristicDatumSlice is an alias for a slice of pointers to SapProductMasterClassProductCharacteristicDatum.
	// This should almost always be used instead of []SapProductMasterClassProductCharacteristicDatum.
	SapProductMasterClassProductCharacteristicDatumSlice []*SapProductMasterClassProductCharacteristicDatum
	// SapProductMasterClassProductCharacteristicDatumHook is the signature for custom SapProductMasterClassProductCharacteristicDatum hook methods
	SapProductMasterClassProductCharacteristicDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterClassProductCharacteristicDatum) error

	sapProductMasterClassProductCharacteristicDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterClassProductCharacteristicDatumType                 = reflect.TypeOf(&SapProductMasterClassProductCharacteristicDatum{})
	sapProductMasterClassProductCharacteristicDatumMapping              = queries.MakeStructMapping(sapProductMasterClassProductCharacteristicDatumType)
	sapProductMasterClassProductCharacteristicDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns)
	sapProductMasterClassProductCharacteristicDatumInsertCacheMut       sync.RWMutex
	sapProductMasterClassProductCharacteristicDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterClassProductCharacteristicDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterClassProductCharacteristicDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterClassProductCharacteristicDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterClassProductCharacteristicDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterClassProductCharacteristicDatumAfterSelectHooks []SapProductMasterClassProductCharacteristicDatumHook

var sapProductMasterClassProductCharacteristicDatumBeforeInsertHooks []SapProductMasterClassProductCharacteristicDatumHook
var sapProductMasterClassProductCharacteristicDatumAfterInsertHooks []SapProductMasterClassProductCharacteristicDatumHook

var sapProductMasterClassProductCharacteristicDatumBeforeUpdateHooks []SapProductMasterClassProductCharacteristicDatumHook
var sapProductMasterClassProductCharacteristicDatumAfterUpdateHooks []SapProductMasterClassProductCharacteristicDatumHook

var sapProductMasterClassProductCharacteristicDatumBeforeDeleteHooks []SapProductMasterClassProductCharacteristicDatumHook
var sapProductMasterClassProductCharacteristicDatumAfterDeleteHooks []SapProductMasterClassProductCharacteristicDatumHook

var sapProductMasterClassProductCharacteristicDatumBeforeUpsertHooks []SapProductMasterClassProductCharacteristicDatumHook
var sapProductMasterClassProductCharacteristicDatumAfterUpsertHooks []SapProductMasterClassProductCharacteristicDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterClassProductCharacteristicDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductCharacteristicDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterClassProductCharacteristicDatumHook registers your hook function for all future operations.
func AddSapProductMasterClassProductCharacteristicDatumHook(hookPoint boil.HookPoint, sapProductMasterClassProductCharacteristicDatumHook SapProductMasterClassProductCharacteristicDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterClassProductCharacteristicDatumAfterSelectHooks = append(sapProductMasterClassProductCharacteristicDatumAfterSelectHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterClassProductCharacteristicDatumBeforeInsertHooks = append(sapProductMasterClassProductCharacteristicDatumBeforeInsertHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterClassProductCharacteristicDatumAfterInsertHooks = append(sapProductMasterClassProductCharacteristicDatumAfterInsertHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterClassProductCharacteristicDatumBeforeUpdateHooks = append(sapProductMasterClassProductCharacteristicDatumBeforeUpdateHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterClassProductCharacteristicDatumAfterUpdateHooks = append(sapProductMasterClassProductCharacteristicDatumAfterUpdateHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterClassProductCharacteristicDatumBeforeDeleteHooks = append(sapProductMasterClassProductCharacteristicDatumBeforeDeleteHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterClassProductCharacteristicDatumAfterDeleteHooks = append(sapProductMasterClassProductCharacteristicDatumAfterDeleteHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterClassProductCharacteristicDatumBeforeUpsertHooks = append(sapProductMasterClassProductCharacteristicDatumBeforeUpsertHooks, sapProductMasterClassProductCharacteristicDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterClassProductCharacteristicDatumAfterUpsertHooks = append(sapProductMasterClassProductCharacteristicDatumAfterUpsertHooks, sapProductMasterClassProductCharacteristicDatumHook)
	}
}

// One returns a single sapProductMasterClassProductCharacteristicDatum record from the query.
func (q sapProductMasterClassProductCharacteristicDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterClassProductCharacteristicDatum, error) {
	o := &SapProductMasterClassProductCharacteristicDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_class_product_characteristic_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterClassProductCharacteristicDatum records from the query.
func (q sapProductMasterClassProductCharacteristicDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterClassProductCharacteristicDatumSlice, error) {
	var o []*SapProductMasterClassProductCharacteristicDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterClassProductCharacteristicDatum slice")
	}

	if len(sapProductMasterClassProductCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterClassProductCharacteristicDatum records in the query.
func (q sapProductMasterClassProductCharacteristicDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_class_product_characteristic_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterClassProductCharacteristicDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_class_product_characteristic_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterClassProductGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterClassProductCharacteristicDatum) ProductSapProductMasterClassProductGeneralDatum(mods ...qm.QueryMod) sapProductMasterClassProductGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterClassProductGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_class_product_general_data`")

	return query
}

// LoadProductSapProductMasterClassProductGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterClassProductCharacteristicDatumL) LoadProductSapProductMasterClassProductGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterClassProductCharacteristicDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterClassProductCharacteristicDatum
	var object *SapProductMasterClassProductCharacteristicDatum

	if singular {
		object = maybeSapProductMasterClassProductCharacteristicDatum.(*SapProductMasterClassProductCharacteristicDatum)
	} else {
		slice = *maybeSapProductMasterClassProductCharacteristicDatum.(*[]*SapProductMasterClassProductCharacteristicDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterClassProductCharacteristicDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterClassProductCharacteristicDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_class_product_general_data`),
		qm.WhereIn(`sap_product_master_class_product_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterClassProductGeneralDatum")
	}

	var resultSlice []*SapProductMasterClassProductGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterClassProductGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_class_product_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_class_product_general_data")
	}

	if len(sapProductMasterClassProductCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterClassProductGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterClassProductGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterClassProductCharacteristicData = append(foreign.R.ProductSapProductMasterClassProductCharacteristicData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterClassProductGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterClassProductGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterClassProductCharacteristicData = append(foreign.R.ProductSapProductMasterClassProductCharacteristicData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterClassProductGeneralDatum of the sapProductMasterClassProductCharacteristicDatum to the related item.
// Sets o.R.ProductSapProductMasterClassProductGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterClassProductCharacteristicData.
func (o *SapProductMasterClassProductCharacteristicDatum) SetProductSapProductMasterClassProductGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterClassProductGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_class_product_characteristic_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.ClassInternalID, o.CharcInternalID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterClassProductCharacteristicDatumR{
			ProductSapProductMasterClassProductGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterClassProductGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterClassProductGeneralDatumR{
			ProductSapProductMasterClassProductCharacteristicData: SapProductMasterClassProductCharacteristicDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterClassProductCharacteristicData = append(related.R.ProductSapProductMasterClassProductCharacteristicData, o)
	}

	return nil
}

// SapProductMasterClassProductCharacteristicData retrieves all the records using an executor.
func SapProductMasterClassProductCharacteristicData(mods ...qm.QueryMod) sapProductMasterClassProductCharacteristicDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_class_product_characteristic_data`"))
	return sapProductMasterClassProductCharacteristicDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterClassProductCharacteristicDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterClassProductCharacteristicDatum(ctx context.Context, exec boil.ContextExecutor, product string, classInternalID string, charcInternalID string, selectCols ...string) (*SapProductMasterClassProductCharacteristicDatum, error) {
	sapProductMasterClassProductCharacteristicDatumObj := &SapProductMasterClassProductCharacteristicDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_class_product_characteristic_data` where `Product`=? AND `ClassInternalID`=? AND `CharcInternalID`=?", sel,
	)

	q := queries.Raw(query, product, classInternalID, charcInternalID)

	err := q.Bind(ctx, exec, sapProductMasterClassProductCharacteristicDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_class_product_characteristic_data")
	}

	if err = sapProductMasterClassProductCharacteristicDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterClassProductCharacteristicDatumObj, err
	}

	return sapProductMasterClassProductCharacteristicDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterClassProductCharacteristicDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_product_characteristic_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassProductCharacteristicDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterClassProductCharacteristicDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterClassProductCharacteristicDatumInsertCache[key]
	sapProductMasterClassProductCharacteristicDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterClassProductCharacteristicDatumAllColumns,
			sapProductMasterClassProductCharacteristicDatumColumnsWithDefault,
			sapProductMasterClassProductCharacteristicDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_class_product_characteristic_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_class_product_characteristic_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_class_product_characteristic_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_class_product_characteristic_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.ClassInternalID,
		o.CharcInternalID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_product_characteristic_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassProductCharacteristicDatumInsertCacheMut.Lock()
		sapProductMasterClassProductCharacteristicDatumInsertCache[key] = cache
		sapProductMasterClassProductCharacteristicDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterClassProductCharacteristicDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterClassProductCharacteristicDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterClassProductCharacteristicDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterClassProductCharacteristicDatumUpdateCache[key]
	sapProductMasterClassProductCharacteristicDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterClassProductCharacteristicDatumAllColumns,
			sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_class_product_characteristic_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_class_product_characteristic_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, append(wl, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_class_product_characteristic_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_class_product_characteristic_data")
	}

	if !cached {
		sapProductMasterClassProductCharacteristicDatumUpdateCacheMut.Lock()
		sapProductMasterClassProductCharacteristicDatumUpdateCache[key] = cache
		sapProductMasterClassProductCharacteristicDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterClassProductCharacteristicDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_class_product_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_class_product_characteristic_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterClassProductCharacteristicDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_class_product_characteristic_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterClassProductCharacteristicDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterClassProductCharacteristicDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterClassProductCharacteristicDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterClassProductCharacteristicDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_product_characteristic_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassProductCharacteristicDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterClassProductCharacteristicDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterClassProductCharacteristicDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterClassProductCharacteristicDatumUpsertCache[key]
	sapProductMasterClassProductCharacteristicDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterClassProductCharacteristicDatumAllColumns,
			sapProductMasterClassProductCharacteristicDatumColumnsWithDefault,
			sapProductMasterClassProductCharacteristicDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterClassProductCharacteristicDatumAllColumns,
			sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_class_product_characteristic_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_class_product_characteristic_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_class_product_characteristic_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_class_product_characteristic_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterClassProductCharacteristicDatumType, sapProductMasterClassProductCharacteristicDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_class_product_characteristic_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_product_characteristic_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassProductCharacteristicDatumUpsertCacheMut.Lock()
		sapProductMasterClassProductCharacteristicDatumUpsertCache[key] = cache
		sapProductMasterClassProductCharacteristicDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterClassProductCharacteristicDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterClassProductCharacteristicDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterClassProductCharacteristicDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterClassProductCharacteristicDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_class_product_characteristic_data` WHERE `Product`=? AND `ClassInternalID`=? AND `CharcInternalID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_class_product_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_class_product_characteristic_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterClassProductCharacteristicDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterClassProductCharacteristicDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_class_product_characteristic_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_product_characteristic_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterClassProductCharacteristicDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterClassProductCharacteristicDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_class_product_characteristic_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterClassProductCharacteristicDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_product_characteristic_data")
	}

	if len(sapProductMasterClassProductCharacteristicDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterClassProductCharacteristicDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterClassProductCharacteristicDatum(ctx, exec, o.Product, o.ClassInternalID, o.CharcInternalID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterClassProductCharacteristicDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterClassProductCharacteristicDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductCharacteristicDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_class_product_characteristic_data`.* FROM `sap_product_master_class_product_characteristic_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterClassProductCharacteristicDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterClassProductCharacteristicDatumExists checks if the SapProductMasterClassProductCharacteristicDatum row exists.
func SapProductMasterClassProductCharacteristicDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, classInternalID string, charcInternalID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_class_product_characteristic_data` where `Product`=? AND `ClassInternalID`=? AND `CharcInternalID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, classInternalID, charcInternalID)
	}
	row := exec.QueryRowContext(ctx, sql, product, classInternalID, charcInternalID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_class_product_characteristic_data exists")
	}

	return exists, nil
}
