// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseOrderHeaderDataWithAddress is an object representing the database table.
type SapPurchaseOrderHeaderDataWithAddress struct {
	PurchaseOrder                  string      `boil:"PurchaseOrder" json:"PurchaseOrder" toml:"PurchaseOrder" yaml:"PurchaseOrder"`
	CompanyCode                    null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	PurchaseOrderType              null.String `boil:"PurchaseOrderType" json:"PurchaseOrderType,omitempty" toml:"PurchaseOrderType" yaml:"PurchaseOrderType,omitempty"`
	PurchasingProcessingStatus     null.String `boil:"PurchasingProcessingStatus" json:"PurchasingProcessingStatus,omitempty" toml:"PurchasingProcessingStatus" yaml:"PurchasingProcessingStatus,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	Language                       null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	PaymentTerms                   null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PurchasingOrganization         null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	PurchaseOrderDate              null.String `boil:"PurchaseOrderDate" json:"PurchaseOrderDate,omitempty" toml:"PurchaseOrderDate" yaml:"PurchaseOrderDate,omitempty"`
	DocumentCurrency               null.String `boil:"DocumentCurrency" json:"DocumentCurrency,omitempty" toml:"DocumentCurrency" yaml:"DocumentCurrency,omitempty"`
	ExchangeRate                   null.String `boil:"ExchangeRate" json:"ExchangeRate,omitempty" toml:"ExchangeRate" yaml:"ExchangeRate,omitempty"`
	ValidityStartDate              null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	SupplierRespSalesPersonName    null.String `boil:"SupplierRespSalesPersonName" json:"SupplierRespSalesPersonName,omitempty" toml:"SupplierRespSalesPersonName" yaml:"SupplierRespSalesPersonName,omitempty"`
	SupplierPhoneNumber            null.String `boil:"SupplierPhoneNumber" json:"SupplierPhoneNumber,omitempty" toml:"SupplierPhoneNumber" yaml:"SupplierPhoneNumber,omitempty"`
	SupplyingPlant                 null.String `boil:"SupplyingPlant" json:"SupplyingPlant,omitempty" toml:"SupplyingPlant" yaml:"SupplyingPlant,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	ManualSupplierAddressID        null.String `boil:"ManualSupplierAddressID" json:"ManualSupplierAddressID,omitempty" toml:"ManualSupplierAddressID" yaml:"ManualSupplierAddressID,omitempty"`
	AddressName                    null.String `boil:"AddressName" json:"AddressName,omitempty" toml:"AddressName" yaml:"AddressName,omitempty"`
	AddressCityName                null.String `boil:"AddressCityName" json:"AddressCityName,omitempty" toml:"AddressCityName" yaml:"AddressCityName,omitempty"`
	AddressFaxNumber               null.String `boil:"AddressFaxNumber" json:"AddressFaxNumber,omitempty" toml:"AddressFaxNumber" yaml:"AddressFaxNumber,omitempty"`
	AddressPostalCode              null.String `boil:"AddressPostalCode" json:"AddressPostalCode,omitempty" toml:"AddressPostalCode" yaml:"AddressPostalCode,omitempty"`
	AddressStreetName              null.String `boil:"AddressStreetName" json:"AddressStreetName,omitempty" toml:"AddressStreetName" yaml:"AddressStreetName,omitempty"`
	AddressPhoneNumber             null.String `boil:"AddressPhoneNumber" json:"AddressPhoneNumber,omitempty" toml:"AddressPhoneNumber" yaml:"AddressPhoneNumber,omitempty"`
	AddressRegion                  null.String `boil:"AddressRegion" json:"AddressRegion,omitempty" toml:"AddressRegion" yaml:"AddressRegion,omitempty"`
	AddressCountry                 null.String `boil:"AddressCountry" json:"AddressCountry,omitempty" toml:"AddressCountry" yaml:"AddressCountry,omitempty"`
	PurchasingDocumentDeletionCode null.Bool   `boil:"PurchasingDocumentDeletionCode" json:"PurchasingDocumentDeletionCode,omitempty" toml:"PurchasingDocumentDeletionCode" yaml:"PurchasingDocumentDeletionCode,omitempty"`

	R *sapPurchaseOrderHeaderDataWithAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseOrderHeaderDataWithAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseOrderHeaderDataWithAddressColumns = struct {
	PurchaseOrder                  string
	CompanyCode                    string
	PurchaseOrderType              string
	PurchasingProcessingStatus     string
	CreationDate                   string
	LastChangeDateTime             string
	Supplier                       string
	Language                       string
	PaymentTerms                   string
	PurchasingOrganization         string
	PurchasingGroup                string
	PurchaseOrderDate              string
	DocumentCurrency               string
	ExchangeRate                   string
	ValidityStartDate              string
	ValidityEndDate                string
	SupplierRespSalesPersonName    string
	SupplierPhoneNumber            string
	SupplyingPlant                 string
	IncotermsClassification        string
	ManualSupplierAddressID        string
	AddressName                    string
	AddressCityName                string
	AddressFaxNumber               string
	AddressPostalCode              string
	AddressStreetName              string
	AddressPhoneNumber             string
	AddressRegion                  string
	AddressCountry                 string
	PurchasingDocumentDeletionCode string
}{
	PurchaseOrder:                  "PurchaseOrder",
	CompanyCode:                    "CompanyCode",
	PurchaseOrderType:              "PurchaseOrderType",
	PurchasingProcessingStatus:     "PurchasingProcessingStatus",
	CreationDate:                   "CreationDate",
	LastChangeDateTime:             "LastChangeDateTime",
	Supplier:                       "Supplier",
	Language:                       "Language",
	PaymentTerms:                   "PaymentTerms",
	PurchasingOrganization:         "PurchasingOrganization",
	PurchasingGroup:                "PurchasingGroup",
	PurchaseOrderDate:              "PurchaseOrderDate",
	DocumentCurrency:               "DocumentCurrency",
	ExchangeRate:                   "ExchangeRate",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	SupplierRespSalesPersonName:    "SupplierRespSalesPersonName",
	SupplierPhoneNumber:            "SupplierPhoneNumber",
	SupplyingPlant:                 "SupplyingPlant",
	IncotermsClassification:        "IncotermsClassification",
	ManualSupplierAddressID:        "ManualSupplierAddressID",
	AddressName:                    "AddressName",
	AddressCityName:                "AddressCityName",
	AddressFaxNumber:               "AddressFaxNumber",
	AddressPostalCode:              "AddressPostalCode",
	AddressStreetName:              "AddressStreetName",
	AddressPhoneNumber:             "AddressPhoneNumber",
	AddressRegion:                  "AddressRegion",
	AddressCountry:                 "AddressCountry",
	PurchasingDocumentDeletionCode: "PurchasingDocumentDeletionCode",
}

var SapPurchaseOrderHeaderDataWithAddressTableColumns = struct {
	PurchaseOrder                  string
	CompanyCode                    string
	PurchaseOrderType              string
	PurchasingProcessingStatus     string
	CreationDate                   string
	LastChangeDateTime             string
	Supplier                       string
	Language                       string
	PaymentTerms                   string
	PurchasingOrganization         string
	PurchasingGroup                string
	PurchaseOrderDate              string
	DocumentCurrency               string
	ExchangeRate                   string
	ValidityStartDate              string
	ValidityEndDate                string
	SupplierRespSalesPersonName    string
	SupplierPhoneNumber            string
	SupplyingPlant                 string
	IncotermsClassification        string
	ManualSupplierAddressID        string
	AddressName                    string
	AddressCityName                string
	AddressFaxNumber               string
	AddressPostalCode              string
	AddressStreetName              string
	AddressPhoneNumber             string
	AddressRegion                  string
	AddressCountry                 string
	PurchasingDocumentDeletionCode string
}{
	PurchaseOrder:                  "sap_purchase_order_header_data_with_address.PurchaseOrder",
	CompanyCode:                    "sap_purchase_order_header_data_with_address.CompanyCode",
	PurchaseOrderType:              "sap_purchase_order_header_data_with_address.PurchaseOrderType",
	PurchasingProcessingStatus:     "sap_purchase_order_header_data_with_address.PurchasingProcessingStatus",
	CreationDate:                   "sap_purchase_order_header_data_with_address.CreationDate",
	LastChangeDateTime:             "sap_purchase_order_header_data_with_address.LastChangeDateTime",
	Supplier:                       "sap_purchase_order_header_data_with_address.Supplier",
	Language:                       "sap_purchase_order_header_data_with_address.Language",
	PaymentTerms:                   "sap_purchase_order_header_data_with_address.PaymentTerms",
	PurchasingOrganization:         "sap_purchase_order_header_data_with_address.PurchasingOrganization",
	PurchasingGroup:                "sap_purchase_order_header_data_with_address.PurchasingGroup",
	PurchaseOrderDate:              "sap_purchase_order_header_data_with_address.PurchaseOrderDate",
	DocumentCurrency:               "sap_purchase_order_header_data_with_address.DocumentCurrency",
	ExchangeRate:                   "sap_purchase_order_header_data_with_address.ExchangeRate",
	ValidityStartDate:              "sap_purchase_order_header_data_with_address.ValidityStartDate",
	ValidityEndDate:                "sap_purchase_order_header_data_with_address.ValidityEndDate",
	SupplierRespSalesPersonName:    "sap_purchase_order_header_data_with_address.SupplierRespSalesPersonName",
	SupplierPhoneNumber:            "sap_purchase_order_header_data_with_address.SupplierPhoneNumber",
	SupplyingPlant:                 "sap_purchase_order_header_data_with_address.SupplyingPlant",
	IncotermsClassification:        "sap_purchase_order_header_data_with_address.IncotermsClassification",
	ManualSupplierAddressID:        "sap_purchase_order_header_data_with_address.ManualSupplierAddressID",
	AddressName:                    "sap_purchase_order_header_data_with_address.AddressName",
	AddressCityName:                "sap_purchase_order_header_data_with_address.AddressCityName",
	AddressFaxNumber:               "sap_purchase_order_header_data_with_address.AddressFaxNumber",
	AddressPostalCode:              "sap_purchase_order_header_data_with_address.AddressPostalCode",
	AddressStreetName:              "sap_purchase_order_header_data_with_address.AddressStreetName",
	AddressPhoneNumber:             "sap_purchase_order_header_data_with_address.AddressPhoneNumber",
	AddressRegion:                  "sap_purchase_order_header_data_with_address.AddressRegion",
	AddressCountry:                 "sap_purchase_order_header_data_with_address.AddressCountry",
	PurchasingDocumentDeletionCode: "sap_purchase_order_header_data_with_address.PurchasingDocumentDeletionCode",
}

// Generated where

var SapPurchaseOrderHeaderDataWithAddressWhere = struct {
	PurchaseOrder                  whereHelperstring
	CompanyCode                    whereHelpernull_String
	PurchaseOrderType              whereHelpernull_String
	PurchasingProcessingStatus     whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
	Supplier                       whereHelpernull_String
	Language                       whereHelpernull_String
	PaymentTerms                   whereHelpernull_String
	PurchasingOrganization         whereHelpernull_String
	PurchasingGroup                whereHelpernull_String
	PurchaseOrderDate              whereHelpernull_String
	DocumentCurrency               whereHelpernull_String
	ExchangeRate                   whereHelpernull_String
	ValidityStartDate              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	SupplierRespSalesPersonName    whereHelpernull_String
	SupplierPhoneNumber            whereHelpernull_String
	SupplyingPlant                 whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	ManualSupplierAddressID        whereHelpernull_String
	AddressName                    whereHelpernull_String
	AddressCityName                whereHelpernull_String
	AddressFaxNumber               whereHelpernull_String
	AddressPostalCode              whereHelpernull_String
	AddressStreetName              whereHelpernull_String
	AddressPhoneNumber             whereHelpernull_String
	AddressRegion                  whereHelpernull_String
	AddressCountry                 whereHelpernull_String
	PurchasingDocumentDeletionCode whereHelpernull_Bool
}{
	PurchaseOrder:                  whereHelperstring{field: "`sap_purchase_order_header_data_with_address`.`PurchaseOrder`"},
	CompanyCode:                    whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`CompanyCode`"},
	PurchaseOrderType:              whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`PurchaseOrderType`"},
	PurchasingProcessingStatus:     whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`PurchasingProcessingStatus`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`CreationDate`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`LastChangeDateTime`"},
	Supplier:                       whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`Supplier`"},
	Language:                       whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`Language`"},
	PaymentTerms:                   whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`PaymentTerms`"},
	PurchasingOrganization:         whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`PurchasingOrganization`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`PurchasingGroup`"},
	PurchaseOrderDate:              whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`PurchaseOrderDate`"},
	DocumentCurrency:               whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`DocumentCurrency`"},
	ExchangeRate:                   whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`ExchangeRate`"},
	ValidityStartDate:              whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`ValidityEndDate`"},
	SupplierRespSalesPersonName:    whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`SupplierRespSalesPersonName`"},
	SupplierPhoneNumber:            whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`SupplierPhoneNumber`"},
	SupplyingPlant:                 whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`SupplyingPlant`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`IncotermsClassification`"},
	ManualSupplierAddressID:        whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`ManualSupplierAddressID`"},
	AddressName:                    whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressName`"},
	AddressCityName:                whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressCityName`"},
	AddressFaxNumber:               whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressFaxNumber`"},
	AddressPostalCode:              whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressPostalCode`"},
	AddressStreetName:              whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressStreetName`"},
	AddressPhoneNumber:             whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressPhoneNumber`"},
	AddressRegion:                  whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressRegion`"},
	AddressCountry:                 whereHelpernull_String{field: "`sap_purchase_order_header_data_with_address`.`AddressCountry`"},
	PurchasingDocumentDeletionCode: whereHelpernull_Bool{field: "`sap_purchase_order_header_data_with_address`.`PurchasingDocumentDeletionCode`"},
}

// SapPurchaseOrderHeaderDataWithAddressRels is where relationship names are stored.
var SapPurchaseOrderHeaderDataWithAddressRels = struct {
	PurchaseOrderSapPurchaseOrderItemAccountData           string
	PurchaseOrderSapPurchaseOrderItemDataWithAddresses     string
	PurchaseOrderSapPurchaseOrderItemPricingElementData    string
	PurchasingDocumentSapPurchaseOrderItemScheduleLineData string
}{
	PurchaseOrderSapPurchaseOrderItemAccountData:           "PurchaseOrderSapPurchaseOrderItemAccountData",
	PurchaseOrderSapPurchaseOrderItemDataWithAddresses:     "PurchaseOrderSapPurchaseOrderItemDataWithAddresses",
	PurchaseOrderSapPurchaseOrderItemPricingElementData:    "PurchaseOrderSapPurchaseOrderItemPricingElementData",
	PurchasingDocumentSapPurchaseOrderItemScheduleLineData: "PurchasingDocumentSapPurchaseOrderItemScheduleLineData",
}

// sapPurchaseOrderHeaderDataWithAddressR is where relationships are stored.
type sapPurchaseOrderHeaderDataWithAddressR struct {
	PurchaseOrderSapPurchaseOrderItemAccountData           SapPurchaseOrderItemAccountDatumSlice        `boil:"PurchaseOrderSapPurchaseOrderItemAccountData" json:"PurchaseOrderSapPurchaseOrderItemAccountData" toml:"PurchaseOrderSapPurchaseOrderItemAccountData" yaml:"PurchaseOrderSapPurchaseOrderItemAccountData"`
	PurchaseOrderSapPurchaseOrderItemDataWithAddresses     SapPurchaseOrderItemDataWithAddressSlice     `boil:"PurchaseOrderSapPurchaseOrderItemDataWithAddresses" json:"PurchaseOrderSapPurchaseOrderItemDataWithAddresses" toml:"PurchaseOrderSapPurchaseOrderItemDataWithAddresses" yaml:"PurchaseOrderSapPurchaseOrderItemDataWithAddresses"`
	PurchaseOrderSapPurchaseOrderItemPricingElementData    SapPurchaseOrderItemPricingElementDatumSlice `boil:"PurchaseOrderSapPurchaseOrderItemPricingElementData" json:"PurchaseOrderSapPurchaseOrderItemPricingElementData" toml:"PurchaseOrderSapPurchaseOrderItemPricingElementData" yaml:"PurchaseOrderSapPurchaseOrderItemPricingElementData"`
	PurchasingDocumentSapPurchaseOrderItemScheduleLineData SapPurchaseOrderItemScheduleLineDatumSlice   `boil:"PurchasingDocumentSapPurchaseOrderItemScheduleLineData" json:"PurchasingDocumentSapPurchaseOrderItemScheduleLineData" toml:"PurchasingDocumentSapPurchaseOrderItemScheduleLineData" yaml:"PurchasingDocumentSapPurchaseOrderItemScheduleLineData"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseOrderHeaderDataWithAddressR) NewStruct() *sapPurchaseOrderHeaderDataWithAddressR {
	return &sapPurchaseOrderHeaderDataWithAddressR{}
}

// sapPurchaseOrderHeaderDataWithAddressL is where Load methods for each relationship are stored.
type sapPurchaseOrderHeaderDataWithAddressL struct{}

var (
	sapPurchaseOrderHeaderDataWithAddressAllColumns            = []string{"PurchaseOrder", "CompanyCode", "PurchaseOrderType", "PurchasingProcessingStatus", "CreationDate", "LastChangeDateTime", "Supplier", "Language", "PaymentTerms", "PurchasingOrganization", "PurchasingGroup", "PurchaseOrderDate", "DocumentCurrency", "ExchangeRate", "ValidityStartDate", "ValidityEndDate", "SupplierRespSalesPersonName", "SupplierPhoneNumber", "SupplyingPlant", "IncotermsClassification", "ManualSupplierAddressID", "AddressName", "AddressCityName", "AddressFaxNumber", "AddressPostalCode", "AddressStreetName", "AddressPhoneNumber", "AddressRegion", "AddressCountry", "PurchasingDocumentDeletionCode"}
	sapPurchaseOrderHeaderDataWithAddressColumnsWithoutDefault = []string{"PurchaseOrder", "CompanyCode", "PurchaseOrderType", "PurchasingProcessingStatus", "CreationDate", "LastChangeDateTime", "Supplier", "Language", "PaymentTerms", "PurchasingOrganization", "PurchasingGroup", "PurchaseOrderDate", "DocumentCurrency", "ExchangeRate", "ValidityStartDate", "ValidityEndDate", "SupplierRespSalesPersonName", "SupplierPhoneNumber", "SupplyingPlant", "IncotermsClassification", "ManualSupplierAddressID", "AddressName", "AddressCityName", "AddressFaxNumber", "AddressPostalCode", "AddressStreetName", "AddressPhoneNumber", "AddressRegion", "AddressCountry", "PurchasingDocumentDeletionCode"}
	sapPurchaseOrderHeaderDataWithAddressColumnsWithDefault    = []string{}
	sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns     = []string{"PurchaseOrder"}
)

type (
	// SapPurchaseOrderHeaderDataWithAddressSlice is an alias for a slice of pointers to SapPurchaseOrderHeaderDataWithAddress.
	// This should almost always be used instead of []SapPurchaseOrderHeaderDataWithAddress.
	SapPurchaseOrderHeaderDataWithAddressSlice []*SapPurchaseOrderHeaderDataWithAddress
	// SapPurchaseOrderHeaderDataWithAddressHook is the signature for custom SapPurchaseOrderHeaderDataWithAddress hook methods
	SapPurchaseOrderHeaderDataWithAddressHook func(context.Context, boil.ContextExecutor, *SapPurchaseOrderHeaderDataWithAddress) error

	sapPurchaseOrderHeaderDataWithAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseOrderHeaderDataWithAddressType                 = reflect.TypeOf(&SapPurchaseOrderHeaderDataWithAddress{})
	sapPurchaseOrderHeaderDataWithAddressMapping              = queries.MakeStructMapping(sapPurchaseOrderHeaderDataWithAddressType)
	sapPurchaseOrderHeaderDataWithAddressPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns)
	sapPurchaseOrderHeaderDataWithAddressInsertCacheMut       sync.RWMutex
	sapPurchaseOrderHeaderDataWithAddressInsertCache          = make(map[string]insertCache)
	sapPurchaseOrderHeaderDataWithAddressUpdateCacheMut       sync.RWMutex
	sapPurchaseOrderHeaderDataWithAddressUpdateCache          = make(map[string]updateCache)
	sapPurchaseOrderHeaderDataWithAddressUpsertCacheMut       sync.RWMutex
	sapPurchaseOrderHeaderDataWithAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseOrderHeaderDataWithAddressBeforeInsertHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressBeforeUpdateHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressBeforeDeleteHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressBeforeUpsertHooks []SapPurchaseOrderHeaderDataWithAddressHook

var sapPurchaseOrderHeaderDataWithAddressAfterInsertHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressAfterSelectHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressAfterUpdateHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressAfterDeleteHooks []SapPurchaseOrderHeaderDataWithAddressHook
var sapPurchaseOrderHeaderDataWithAddressAfterUpsertHooks []SapPurchaseOrderHeaderDataWithAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseOrderHeaderDataWithAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderHeaderDataWithAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseOrderHeaderDataWithAddressHook registers your hook function for all future operations.
func AddSapPurchaseOrderHeaderDataWithAddressHook(hookPoint boil.HookPoint, sapPurchaseOrderHeaderDataWithAddressHook SapPurchaseOrderHeaderDataWithAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapPurchaseOrderHeaderDataWithAddressBeforeInsertHooks = append(sapPurchaseOrderHeaderDataWithAddressBeforeInsertHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.BeforeUpdateHook:
		sapPurchaseOrderHeaderDataWithAddressBeforeUpdateHooks = append(sapPurchaseOrderHeaderDataWithAddressBeforeUpdateHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.BeforeDeleteHook:
		sapPurchaseOrderHeaderDataWithAddressBeforeDeleteHooks = append(sapPurchaseOrderHeaderDataWithAddressBeforeDeleteHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.BeforeUpsertHook:
		sapPurchaseOrderHeaderDataWithAddressBeforeUpsertHooks = append(sapPurchaseOrderHeaderDataWithAddressBeforeUpsertHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.AfterInsertHook:
		sapPurchaseOrderHeaderDataWithAddressAfterInsertHooks = append(sapPurchaseOrderHeaderDataWithAddressAfterInsertHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.AfterSelectHook:
		sapPurchaseOrderHeaderDataWithAddressAfterSelectHooks = append(sapPurchaseOrderHeaderDataWithAddressAfterSelectHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.AfterUpdateHook:
		sapPurchaseOrderHeaderDataWithAddressAfterUpdateHooks = append(sapPurchaseOrderHeaderDataWithAddressAfterUpdateHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.AfterDeleteHook:
		sapPurchaseOrderHeaderDataWithAddressAfterDeleteHooks = append(sapPurchaseOrderHeaderDataWithAddressAfterDeleteHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	case boil.AfterUpsertHook:
		sapPurchaseOrderHeaderDataWithAddressAfterUpsertHooks = append(sapPurchaseOrderHeaderDataWithAddressAfterUpsertHooks, sapPurchaseOrderHeaderDataWithAddressHook)
	}
}

// One returns a single sapPurchaseOrderHeaderDataWithAddress record from the query.
func (q sapPurchaseOrderHeaderDataWithAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseOrderHeaderDataWithAddress, error) {
	o := &SapPurchaseOrderHeaderDataWithAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_order_header_data_with_address")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseOrderHeaderDataWithAddress records from the query.
func (q sapPurchaseOrderHeaderDataWithAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseOrderHeaderDataWithAddressSlice, error) {
	var o []*SapPurchaseOrderHeaderDataWithAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseOrderHeaderDataWithAddress slice")
	}

	if len(sapPurchaseOrderHeaderDataWithAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseOrderHeaderDataWithAddress records in the query.
func (q sapPurchaseOrderHeaderDataWithAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_order_header_data_with_address rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseOrderHeaderDataWithAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_order_header_data_with_address exists")
	}

	return count > 0, nil
}

// PurchaseOrderSapPurchaseOrderItemAccountData retrieves all the sap_purchase_order_item_account_datum's SapPurchaseOrderItemAccountData with an executor via PurchaseOrder column.
func (o *SapPurchaseOrderHeaderDataWithAddress) PurchaseOrderSapPurchaseOrderItemAccountData(mods ...qm.QueryMod) sapPurchaseOrderItemAccountDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_order_item_account_data`.`PurchaseOrder`=?", o.PurchaseOrder),
	)

	query := SapPurchaseOrderItemAccountData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_item_account_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_order_item_account_data`.*"})
	}

	return query
}

// PurchaseOrderSapPurchaseOrderItemDataWithAddresses retrieves all the sap_purchase_order_item_data_with_address's SapPurchaseOrderItemDataWithAddresses with an executor via PurchaseOrder column.
func (o *SapPurchaseOrderHeaderDataWithAddress) PurchaseOrderSapPurchaseOrderItemDataWithAddresses(mods ...qm.QueryMod) sapPurchaseOrderItemDataWithAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_order_item_data_with_address`.`PurchaseOrder`=?", o.PurchaseOrder),
	)

	query := SapPurchaseOrderItemDataWithAddresses(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_item_data_with_address`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_order_item_data_with_address`.*"})
	}

	return query
}

// PurchaseOrderSapPurchaseOrderItemPricingElementData retrieves all the sap_purchase_order_item_pricing_element_datum's SapPurchaseOrderItemPricingElementData with an executor via PurchaseOrder column.
func (o *SapPurchaseOrderHeaderDataWithAddress) PurchaseOrderSapPurchaseOrderItemPricingElementData(mods ...qm.QueryMod) sapPurchaseOrderItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_order_item_pricing_element_data`.`PurchaseOrder`=?", o.PurchaseOrder),
	)

	query := SapPurchaseOrderItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_order_item_pricing_element_data`.*"})
	}

	return query
}

// PurchasingDocumentSapPurchaseOrderItemScheduleLineData retrieves all the sap_purchase_order_item_schedule_line_datum's SapPurchaseOrderItemScheduleLineData with an executor via PurchasingDocument column.
func (o *SapPurchaseOrderHeaderDataWithAddress) PurchasingDocumentSapPurchaseOrderItemScheduleLineData(mods ...qm.QueryMod) sapPurchaseOrderItemScheduleLineDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchase_order_item_schedule_line_data`.`PurchasingDocument`=?", o.PurchaseOrder),
	)

	query := SapPurchaseOrderItemScheduleLineData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_item_schedule_line_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_purchase_order_item_schedule_line_data`.*"})
	}

	return query
}

// LoadPurchaseOrderSapPurchaseOrderItemAccountData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseOrderHeaderDataWithAddressL) LoadPurchaseOrderSapPurchaseOrderItemAccountData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderHeaderDataWithAddress interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderHeaderDataWithAddress
	var object *SapPurchaseOrderHeaderDataWithAddress

	if singular {
		object = maybeSapPurchaseOrderHeaderDataWithAddress.(*SapPurchaseOrderHeaderDataWithAddress)
	} else {
		slice = *maybeSapPurchaseOrderHeaderDataWithAddress.(*[]*SapPurchaseOrderHeaderDataWithAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		args = append(args, object.PurchaseOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderHeaderDataWithAddressR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_item_account_data`),
		qm.WhereIn(`sap_purchase_order_item_account_data.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_order_item_account_data")
	}

	var resultSlice []*SapPurchaseOrderItemAccountDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_order_item_account_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_order_item_account_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_item_account_data")
	}

	if len(sapPurchaseOrderItemAccountDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseOrderSapPurchaseOrderItemAccountData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseOrderItemAccountDatumR{}
			}
			foreign.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseOrder == foreign.PurchaseOrder {
				local.R.PurchaseOrderSapPurchaseOrderItemAccountData = append(local.R.PurchaseOrderSapPurchaseOrderItemAccountData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderItemAccountDatumR{}
				}
				foreign.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = local
				break
			}
		}
	}

	return nil
}

// LoadPurchaseOrderSapPurchaseOrderItemDataWithAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseOrderHeaderDataWithAddressL) LoadPurchaseOrderSapPurchaseOrderItemDataWithAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderHeaderDataWithAddress interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderHeaderDataWithAddress
	var object *SapPurchaseOrderHeaderDataWithAddress

	if singular {
		object = maybeSapPurchaseOrderHeaderDataWithAddress.(*SapPurchaseOrderHeaderDataWithAddress)
	} else {
		slice = *maybeSapPurchaseOrderHeaderDataWithAddress.(*[]*SapPurchaseOrderHeaderDataWithAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		args = append(args, object.PurchaseOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderHeaderDataWithAddressR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_item_data_with_address`),
		qm.WhereIn(`sap_purchase_order_item_data_with_address.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_order_item_data_with_address")
	}

	var resultSlice []*SapPurchaseOrderItemDataWithAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_order_item_data_with_address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_order_item_data_with_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_item_data_with_address")
	}

	if len(sapPurchaseOrderItemDataWithAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseOrderItemDataWithAddressR{}
			}
			foreign.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseOrder == foreign.PurchaseOrder {
				local.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses = append(local.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderItemDataWithAddressR{}
				}
				foreign.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = local
				break
			}
		}
	}

	return nil
}

// LoadPurchaseOrderSapPurchaseOrderItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseOrderHeaderDataWithAddressL) LoadPurchaseOrderSapPurchaseOrderItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderHeaderDataWithAddress interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderHeaderDataWithAddress
	var object *SapPurchaseOrderHeaderDataWithAddress

	if singular {
		object = maybeSapPurchaseOrderHeaderDataWithAddress.(*SapPurchaseOrderHeaderDataWithAddress)
	} else {
		slice = *maybeSapPurchaseOrderHeaderDataWithAddress.(*[]*SapPurchaseOrderHeaderDataWithAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		args = append(args, object.PurchaseOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderHeaderDataWithAddressR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_item_pricing_element_data`),
		qm.WhereIn(`sap_purchase_order_item_pricing_element_data.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_order_item_pricing_element_data")
	}

	var resultSlice []*SapPurchaseOrderItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_order_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_order_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_item_pricing_element_data")
	}

	if len(sapPurchaseOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseOrderSapPurchaseOrderItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseOrderItemPricingElementDatumR{}
			}
			foreign.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseOrder == foreign.PurchaseOrder {
				local.R.PurchaseOrderSapPurchaseOrderItemPricingElementData = append(local.R.PurchaseOrderSapPurchaseOrderItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderItemPricingElementDatumR{}
				}
				foreign.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = local
				break
			}
		}
	}

	return nil
}

// LoadPurchasingDocumentSapPurchaseOrderItemScheduleLineData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchaseOrderHeaderDataWithAddressL) LoadPurchasingDocumentSapPurchaseOrderItemScheduleLineData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderHeaderDataWithAddress interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderHeaderDataWithAddress
	var object *SapPurchaseOrderHeaderDataWithAddress

	if singular {
		object = maybeSapPurchaseOrderHeaderDataWithAddress.(*SapPurchaseOrderHeaderDataWithAddress)
	} else {
		slice = *maybeSapPurchaseOrderHeaderDataWithAddress.(*[]*SapPurchaseOrderHeaderDataWithAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		args = append(args, object.PurchaseOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderHeaderDataWithAddressR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_item_schedule_line_data`),
		qm.WhereIn(`sap_purchase_order_item_schedule_line_data.PurchasingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchase_order_item_schedule_line_data")
	}

	var resultSlice []*SapPurchaseOrderItemScheduleLineDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchase_order_item_schedule_line_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchase_order_item_schedule_line_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_item_schedule_line_data")
	}

	if len(sapPurchaseOrderItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchaseOrderItemScheduleLineDatumR{}
			}
			foreign.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchaseOrder == foreign.PurchasingDocument {
				local.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData = append(local.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderItemScheduleLineDatumR{}
				}
				foreign.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress = local
				break
			}
		}
	}

	return nil
}

// AddPurchaseOrderSapPurchaseOrderItemAccountData adds the given related objects to the existing relationships
// of the sap_purchase_order_header_data_with_address, optionally inserting them as new records.
// Appends related to o.R.PurchaseOrderSapPurchaseOrderItemAccountData.
// Sets related.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress appropriately.
func (o *SapPurchaseOrderHeaderDataWithAddress) AddPurchaseOrderSapPurchaseOrderItemAccountData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseOrderItemAccountDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseOrder = o.PurchaseOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_order_item_account_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchaseOrder"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseOrder, rel.PurchaseOrder, rel.PurchaseOrderItem, rel.AccountAssignmentNumber}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseOrder = o.PurchaseOrder
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchaseOrderSapPurchaseOrderItemAccountData: related,
		}
	} else {
		o.R.PurchaseOrderSapPurchaseOrderItemAccountData = append(o.R.PurchaseOrderSapPurchaseOrderItemAccountData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseOrderItemAccountDatumR{
				PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: o,
			}
		} else {
			rel.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = o
		}
	}
	return nil
}

// AddPurchaseOrderSapPurchaseOrderItemDataWithAddresses adds the given related objects to the existing relationships
// of the sap_purchase_order_header_data_with_address, optionally inserting them as new records.
// Appends related to o.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses.
// Sets related.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress appropriately.
func (o *SapPurchaseOrderHeaderDataWithAddress) AddPurchaseOrderSapPurchaseOrderItemDataWithAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseOrderItemDataWithAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseOrder = o.PurchaseOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_order_item_data_with_address` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchaseOrder"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemDataWithAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseOrder, rel.PurchaseOrder, rel.PurchaseOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseOrder = o.PurchaseOrder
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchaseOrderSapPurchaseOrderItemDataWithAddresses: related,
		}
	} else {
		o.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses = append(o.R.PurchaseOrderSapPurchaseOrderItemDataWithAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseOrderItemDataWithAddressR{
				PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: o,
			}
		} else {
			rel.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = o
		}
	}
	return nil
}

// AddPurchaseOrderSapPurchaseOrderItemPricingElementData adds the given related objects to the existing relationships
// of the sap_purchase_order_header_data_with_address, optionally inserting them as new records.
// Appends related to o.R.PurchaseOrderSapPurchaseOrderItemPricingElementData.
// Sets related.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress appropriately.
func (o *SapPurchaseOrderHeaderDataWithAddress) AddPurchaseOrderSapPurchaseOrderItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseOrderItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchaseOrder = o.PurchaseOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_order_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchaseOrder"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseOrder, rel.PurchaseOrder, rel.PurchaseOrderItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchaseOrder = o.PurchaseOrder
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchaseOrderSapPurchaseOrderItemPricingElementData: related,
		}
	} else {
		o.R.PurchaseOrderSapPurchaseOrderItemPricingElementData = append(o.R.PurchaseOrderSapPurchaseOrderItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseOrderItemPricingElementDatumR{
				PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: o,
			}
		} else {
			rel.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = o
		}
	}
	return nil
}

// AddPurchasingDocumentSapPurchaseOrderItemScheduleLineData adds the given related objects to the existing relationships
// of the sap_purchase_order_header_data_with_address, optionally inserting them as new records.
// Appends related to o.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData.
// Sets related.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress appropriately.
func (o *SapPurchaseOrderHeaderDataWithAddress) AddPurchasingDocumentSapPurchaseOrderItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchaseOrderItemScheduleLineDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchasingDocument = o.PurchaseOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchase_order_item_schedule_line_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchasingDocument"}),
				strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemScheduleLineDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchaseOrder, rel.PurchasingDocument, rel.PurchasingDocumentItem, rel.ScheduleLine}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchasingDocument = o.PurchaseOrder
		}
	}

	if o.R == nil {
		o.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchasingDocumentSapPurchaseOrderItemScheduleLineData: related,
		}
	} else {
		o.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData = append(o.R.PurchasingDocumentSapPurchaseOrderItemScheduleLineData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchaseOrderItemScheduleLineDatumR{
				PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress: o,
			}
		} else {
			rel.R.PurchasingDocumentSapPurchaseOrderHeaderDataWithAddress = o
		}
	}
	return nil
}

// SapPurchaseOrderHeaderDataWithAddresses retrieves all the records using an executor.
func SapPurchaseOrderHeaderDataWithAddresses(mods ...qm.QueryMod) sapPurchaseOrderHeaderDataWithAddressQuery {
	mods = append(mods, qm.From("`sap_purchase_order_header_data_with_address`"))
	return sapPurchaseOrderHeaderDataWithAddressQuery{NewQuery(mods...)}
}

// FindSapPurchaseOrderHeaderDataWithAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, selectCols ...string) (*SapPurchaseOrderHeaderDataWithAddress, error) {
	sapPurchaseOrderHeaderDataWithAddressObj := &SapPurchaseOrderHeaderDataWithAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_order_header_data_with_address` where `PurchaseOrder`=?", sel,
	)

	q := queries.Raw(query, purchaseOrder)

	err := q.Bind(ctx, exec, sapPurchaseOrderHeaderDataWithAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_order_header_data_with_address")
	}

	if err = sapPurchaseOrderHeaderDataWithAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseOrderHeaderDataWithAddressObj, err
	}

	return sapPurchaseOrderHeaderDataWithAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseOrderHeaderDataWithAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_header_data_with_address provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderHeaderDataWithAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseOrderHeaderDataWithAddressInsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderHeaderDataWithAddressInsertCache[key]
	sapPurchaseOrderHeaderDataWithAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseOrderHeaderDataWithAddressAllColumns,
			sapPurchaseOrderHeaderDataWithAddressColumnsWithDefault,
			sapPurchaseOrderHeaderDataWithAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_order_header_data_with_address` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_order_header_data_with_address` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_order_header_data_with_address` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_order_header_data_with_address")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_header_data_with_address")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderHeaderDataWithAddressInsertCacheMut.Lock()
		sapPurchaseOrderHeaderDataWithAddressInsertCache[key] = cache
		sapPurchaseOrderHeaderDataWithAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseOrderHeaderDataWithAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseOrderHeaderDataWithAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseOrderHeaderDataWithAddressUpdateCacheMut.RLock()
	cache, cached := sapPurchaseOrderHeaderDataWithAddressUpdateCache[key]
	sapPurchaseOrderHeaderDataWithAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseOrderHeaderDataWithAddressAllColumns,
			sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_order_header_data_with_address, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_order_header_data_with_address` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, append(wl, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_order_header_data_with_address row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_order_header_data_with_address")
	}

	if !cached {
		sapPurchaseOrderHeaderDataWithAddressUpdateCacheMut.Lock()
		sapPurchaseOrderHeaderDataWithAddressUpdateCache[key] = cache
		sapPurchaseOrderHeaderDataWithAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseOrderHeaderDataWithAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_order_header_data_with_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_order_header_data_with_address")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseOrderHeaderDataWithAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderHeaderDataWithAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_order_header_data_with_address` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseOrderHeaderDataWithAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseOrderHeaderDataWithAddress")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseOrderHeaderDataWithAddressUniqueColumns = []string{
	"PurchaseOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseOrderHeaderDataWithAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_header_data_with_address provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderHeaderDataWithAddressColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseOrderHeaderDataWithAddressUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseOrderHeaderDataWithAddressUpsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderHeaderDataWithAddressUpsertCache[key]
	sapPurchaseOrderHeaderDataWithAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseOrderHeaderDataWithAddressAllColumns,
			sapPurchaseOrderHeaderDataWithAddressColumnsWithDefault,
			sapPurchaseOrderHeaderDataWithAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapPurchaseOrderHeaderDataWithAddressAllColumns,
			sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_order_header_data_with_address, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_order_header_data_with_address`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_order_header_data_with_address` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_order_header_data_with_address")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseOrderHeaderDataWithAddressType, sapPurchaseOrderHeaderDataWithAddressMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_order_header_data_with_address")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_header_data_with_address")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderHeaderDataWithAddressUpsertCacheMut.Lock()
		sapPurchaseOrderHeaderDataWithAddressUpsertCache[key] = cache
		sapPurchaseOrderHeaderDataWithAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseOrderHeaderDataWithAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseOrderHeaderDataWithAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseOrderHeaderDataWithAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseOrderHeaderDataWithAddressPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_order_header_data_with_address` WHERE `PurchaseOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_order_header_data_with_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_order_header_data_with_address")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseOrderHeaderDataWithAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseOrderHeaderDataWithAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_order_header_data_with_address")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_header_data_with_address")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseOrderHeaderDataWithAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseOrderHeaderDataWithAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderHeaderDataWithAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_order_header_data_with_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseOrderHeaderDataWithAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_header_data_with_address")
	}

	if len(sapPurchaseOrderHeaderDataWithAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseOrderHeaderDataWithAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseOrderHeaderDataWithAddress(ctx, exec, o.PurchaseOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseOrderHeaderDataWithAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseOrderHeaderDataWithAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderHeaderDataWithAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_order_header_data_with_address`.* FROM `sap_purchase_order_header_data_with_address` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderHeaderDataWithAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseOrderHeaderDataWithAddressSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseOrderHeaderDataWithAddressExists checks if the SapPurchaseOrderHeaderDataWithAddress row exists.
func SapPurchaseOrderHeaderDataWithAddressExists(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_order_header_data_with_address` where `PurchaseOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseOrder)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_order_header_data_with_address exists")
	}

	return exists, nil
}
