// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBillOfMaterialItemDatum is an object representing the database table.
type SapBillOfMaterialItemDatum struct {
	BillOfMaterial               string      `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialCategory       string      `boil:"BillOfMaterialCategory" json:"BillOfMaterialCategory" toml:"BillOfMaterialCategory" yaml:"BillOfMaterialCategory"`
	BillOfMaterialVariant        string      `boil:"BillOfMaterialVariant" json:"BillOfMaterialVariant" toml:"BillOfMaterialVariant" yaml:"BillOfMaterialVariant"`
	BillOfMaterialVersion        string      `boil:"BillOfMaterialVersion" json:"BillOfMaterialVersion" toml:"BillOfMaterialVersion" yaml:"BillOfMaterialVersion"`
	HeaderChangeDocument         string      `boil:"HeaderChangeDocument" json:"HeaderChangeDocument" toml:"HeaderChangeDocument" yaml:"HeaderChangeDocument"`
	BillOfMaterialItemNodeNumber string      `boil:"BillOfMaterialItemNodeNumber" json:"BillOfMaterialItemNodeNumber" toml:"BillOfMaterialItemNodeNumber" yaml:"BillOfMaterialItemNodeNumber"`
	Material                     null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                        null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	ValidityStartDate            null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate              null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	BillOfMaterialComponent      null.String `boil:"BillOfMaterialComponent" json:"BillOfMaterialComponent,omitempty" toml:"BillOfMaterialComponent" yaml:"BillOfMaterialComponent,omitempty"`
	ComponentDescription         null.String `boil:"ComponentDescription" json:"ComponentDescription,omitempty" toml:"ComponentDescription" yaml:"ComponentDescription,omitempty"`
	BillOfMaterialItemQuantity   null.String `boil:"BillOfMaterialItemQuantity" json:"BillOfMaterialItemQuantity,omitempty" toml:"BillOfMaterialItemQuantity" yaml:"BillOfMaterialItemQuantity,omitempty"`
	ComponentScrapInPercent      null.String `boil:"ComponentScrapInPercent" json:"ComponentScrapInPercent,omitempty" toml:"ComponentScrapInPercent" yaml:"ComponentScrapInPercent,omitempty"`
	IsDeleted                    null.Bool   `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapBillOfMaterialItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBillOfMaterialItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBillOfMaterialItemDatumColumns = struct {
	BillOfMaterial               string
	BillOfMaterialCategory       string
	BillOfMaterialVariant        string
	BillOfMaterialVersion        string
	HeaderChangeDocument         string
	BillOfMaterialItemNodeNumber string
	Material                     string
	Plant                        string
	ValidityStartDate            string
	ValidityEndDate              string
	BillOfMaterialComponent      string
	ComponentDescription         string
	BillOfMaterialItemQuantity   string
	ComponentScrapInPercent      string
	IsDeleted                    string
}{
	BillOfMaterial:               "BillOfMaterial",
	BillOfMaterialCategory:       "BillOfMaterialCategory",
	BillOfMaterialVariant:        "BillOfMaterialVariant",
	BillOfMaterialVersion:        "BillOfMaterialVersion",
	HeaderChangeDocument:         "HeaderChangeDocument",
	BillOfMaterialItemNodeNumber: "BillOfMaterialItemNodeNumber",
	Material:                     "Material",
	Plant:                        "Plant",
	ValidityStartDate:            "ValidityStartDate",
	ValidityEndDate:              "ValidityEndDate",
	BillOfMaterialComponent:      "BillOfMaterialComponent",
	ComponentDescription:         "ComponentDescription",
	BillOfMaterialItemQuantity:   "BillOfMaterialItemQuantity",
	ComponentScrapInPercent:      "ComponentScrapInPercent",
	IsDeleted:                    "IsDeleted",
}

var SapBillOfMaterialItemDatumTableColumns = struct {
	BillOfMaterial               string
	BillOfMaterialCategory       string
	BillOfMaterialVariant        string
	BillOfMaterialVersion        string
	HeaderChangeDocument         string
	BillOfMaterialItemNodeNumber string
	Material                     string
	Plant                        string
	ValidityStartDate            string
	ValidityEndDate              string
	BillOfMaterialComponent      string
	ComponentDescription         string
	BillOfMaterialItemQuantity   string
	ComponentScrapInPercent      string
	IsDeleted                    string
}{
	BillOfMaterial:               "sap_bill_of_material_item_data.BillOfMaterial",
	BillOfMaterialCategory:       "sap_bill_of_material_item_data.BillOfMaterialCategory",
	BillOfMaterialVariant:        "sap_bill_of_material_item_data.BillOfMaterialVariant",
	BillOfMaterialVersion:        "sap_bill_of_material_item_data.BillOfMaterialVersion",
	HeaderChangeDocument:         "sap_bill_of_material_item_data.HeaderChangeDocument",
	BillOfMaterialItemNodeNumber: "sap_bill_of_material_item_data.BillOfMaterialItemNodeNumber",
	Material:                     "sap_bill_of_material_item_data.Material",
	Plant:                        "sap_bill_of_material_item_data.Plant",
	ValidityStartDate:            "sap_bill_of_material_item_data.ValidityStartDate",
	ValidityEndDate:              "sap_bill_of_material_item_data.ValidityEndDate",
	BillOfMaterialComponent:      "sap_bill_of_material_item_data.BillOfMaterialComponent",
	ComponentDescription:         "sap_bill_of_material_item_data.ComponentDescription",
	BillOfMaterialItemQuantity:   "sap_bill_of_material_item_data.BillOfMaterialItemQuantity",
	ComponentScrapInPercent:      "sap_bill_of_material_item_data.ComponentScrapInPercent",
	IsDeleted:                    "sap_bill_of_material_item_data.IsDeleted",
}

// Generated where

var SapBillOfMaterialItemDatumWhere = struct {
	BillOfMaterial               whereHelperstring
	BillOfMaterialCategory       whereHelperstring
	BillOfMaterialVariant        whereHelperstring
	BillOfMaterialVersion        whereHelperstring
	HeaderChangeDocument         whereHelperstring
	BillOfMaterialItemNodeNumber whereHelperstring
	Material                     whereHelpernull_String
	Plant                        whereHelpernull_String
	ValidityStartDate            whereHelpernull_String
	ValidityEndDate              whereHelpernull_String
	BillOfMaterialComponent      whereHelpernull_String
	ComponentDescription         whereHelpernull_String
	BillOfMaterialItemQuantity   whereHelpernull_String
	ComponentScrapInPercent      whereHelpernull_String
	IsDeleted                    whereHelpernull_Bool
}{
	BillOfMaterial:               whereHelperstring{field: "`sap_bill_of_material_item_data`.`BillOfMaterial`"},
	BillOfMaterialCategory:       whereHelperstring{field: "`sap_bill_of_material_item_data`.`BillOfMaterialCategory`"},
	BillOfMaterialVariant:        whereHelperstring{field: "`sap_bill_of_material_item_data`.`BillOfMaterialVariant`"},
	BillOfMaterialVersion:        whereHelperstring{field: "`sap_bill_of_material_item_data`.`BillOfMaterialVersion`"},
	HeaderChangeDocument:         whereHelperstring{field: "`sap_bill_of_material_item_data`.`HeaderChangeDocument`"},
	BillOfMaterialItemNodeNumber: whereHelperstring{field: "`sap_bill_of_material_item_data`.`BillOfMaterialItemNodeNumber`"},
	Material:                     whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`Material`"},
	Plant:                        whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`Plant`"},
	ValidityStartDate:            whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`ValidityStartDate`"},
	ValidityEndDate:              whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`ValidityEndDate`"},
	BillOfMaterialComponent:      whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`BillOfMaterialComponent`"},
	ComponentDescription:         whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`ComponentDescription`"},
	BillOfMaterialItemQuantity:   whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`BillOfMaterialItemQuantity`"},
	ComponentScrapInPercent:      whereHelpernull_String{field: "`sap_bill_of_material_item_data`.`ComponentScrapInPercent`"},
	IsDeleted:                    whereHelpernull_Bool{field: "`sap_bill_of_material_item_data`.`IsDeleted`"},
}

// SapBillOfMaterialItemDatumRels is where relationship names are stored.
var SapBillOfMaterialItemDatumRels = struct {
	BillOfMaterialSapBillOfMaterialHeaderDatum string
}{
	BillOfMaterialSapBillOfMaterialHeaderDatum: "BillOfMaterialSapBillOfMaterialHeaderDatum",
}

// sapBillOfMaterialItemDatumR is where relationships are stored.
type sapBillOfMaterialItemDatumR struct {
	BillOfMaterialSapBillOfMaterialHeaderDatum *SapBillOfMaterialHeaderDatum `boil:"BillOfMaterialSapBillOfMaterialHeaderDatum" json:"BillOfMaterialSapBillOfMaterialHeaderDatum" toml:"BillOfMaterialSapBillOfMaterialHeaderDatum" yaml:"BillOfMaterialSapBillOfMaterialHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBillOfMaterialItemDatumR) NewStruct() *sapBillOfMaterialItemDatumR {
	return &sapBillOfMaterialItemDatumR{}
}

// sapBillOfMaterialItemDatumL is where Load methods for each relationship are stored.
type sapBillOfMaterialItemDatumL struct{}

var (
	sapBillOfMaterialItemDatumAllColumns            = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "HeaderChangeDocument", "BillOfMaterialItemNodeNumber", "Material", "Plant", "ValidityStartDate", "ValidityEndDate", "BillOfMaterialComponent", "ComponentDescription", "BillOfMaterialItemQuantity", "ComponentScrapInPercent", "IsDeleted"}
	sapBillOfMaterialItemDatumColumnsWithoutDefault = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "HeaderChangeDocument", "BillOfMaterialItemNodeNumber", "Material", "Plant", "ValidityStartDate", "ValidityEndDate", "BillOfMaterialComponent", "ComponentDescription", "BillOfMaterialItemQuantity", "ComponentScrapInPercent", "IsDeleted"}
	sapBillOfMaterialItemDatumColumnsWithDefault    = []string{}
	sapBillOfMaterialItemDatumPrimaryKeyColumns     = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "HeaderChangeDocument", "BillOfMaterialItemNodeNumber"}
	sapBillOfMaterialItemDatumGeneratedColumns      = []string{}
)

type (
	// SapBillOfMaterialItemDatumSlice is an alias for a slice of pointers to SapBillOfMaterialItemDatum.
	// This should almost always be used instead of []SapBillOfMaterialItemDatum.
	SapBillOfMaterialItemDatumSlice []*SapBillOfMaterialItemDatum
	// SapBillOfMaterialItemDatumHook is the signature for custom SapBillOfMaterialItemDatum hook methods
	SapBillOfMaterialItemDatumHook func(context.Context, boil.ContextExecutor, *SapBillOfMaterialItemDatum) error

	sapBillOfMaterialItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBillOfMaterialItemDatumType                 = reflect.TypeOf(&SapBillOfMaterialItemDatum{})
	sapBillOfMaterialItemDatumMapping              = queries.MakeStructMapping(sapBillOfMaterialItemDatumType)
	sapBillOfMaterialItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, sapBillOfMaterialItemDatumPrimaryKeyColumns)
	sapBillOfMaterialItemDatumInsertCacheMut       sync.RWMutex
	sapBillOfMaterialItemDatumInsertCache          = make(map[string]insertCache)
	sapBillOfMaterialItemDatumUpdateCacheMut       sync.RWMutex
	sapBillOfMaterialItemDatumUpdateCache          = make(map[string]updateCache)
	sapBillOfMaterialItemDatumUpsertCacheMut       sync.RWMutex
	sapBillOfMaterialItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBillOfMaterialItemDatumAfterSelectHooks []SapBillOfMaterialItemDatumHook

var sapBillOfMaterialItemDatumBeforeInsertHooks []SapBillOfMaterialItemDatumHook
var sapBillOfMaterialItemDatumAfterInsertHooks []SapBillOfMaterialItemDatumHook

var sapBillOfMaterialItemDatumBeforeUpdateHooks []SapBillOfMaterialItemDatumHook
var sapBillOfMaterialItemDatumAfterUpdateHooks []SapBillOfMaterialItemDatumHook

var sapBillOfMaterialItemDatumBeforeDeleteHooks []SapBillOfMaterialItemDatumHook
var sapBillOfMaterialItemDatumAfterDeleteHooks []SapBillOfMaterialItemDatumHook

var sapBillOfMaterialItemDatumBeforeUpsertHooks []SapBillOfMaterialItemDatumHook
var sapBillOfMaterialItemDatumAfterUpsertHooks []SapBillOfMaterialItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBillOfMaterialItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBillOfMaterialItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBillOfMaterialItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBillOfMaterialItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBillOfMaterialItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBillOfMaterialItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBillOfMaterialItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBillOfMaterialItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBillOfMaterialItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBillOfMaterialItemDatumHook registers your hook function for all future operations.
func AddSapBillOfMaterialItemDatumHook(hookPoint boil.HookPoint, sapBillOfMaterialItemDatumHook SapBillOfMaterialItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBillOfMaterialItemDatumAfterSelectHooks = append(sapBillOfMaterialItemDatumAfterSelectHooks, sapBillOfMaterialItemDatumHook)
	case boil.BeforeInsertHook:
		sapBillOfMaterialItemDatumBeforeInsertHooks = append(sapBillOfMaterialItemDatumBeforeInsertHooks, sapBillOfMaterialItemDatumHook)
	case boil.AfterInsertHook:
		sapBillOfMaterialItemDatumAfterInsertHooks = append(sapBillOfMaterialItemDatumAfterInsertHooks, sapBillOfMaterialItemDatumHook)
	case boil.BeforeUpdateHook:
		sapBillOfMaterialItemDatumBeforeUpdateHooks = append(sapBillOfMaterialItemDatumBeforeUpdateHooks, sapBillOfMaterialItemDatumHook)
	case boil.AfterUpdateHook:
		sapBillOfMaterialItemDatumAfterUpdateHooks = append(sapBillOfMaterialItemDatumAfterUpdateHooks, sapBillOfMaterialItemDatumHook)
	case boil.BeforeDeleteHook:
		sapBillOfMaterialItemDatumBeforeDeleteHooks = append(sapBillOfMaterialItemDatumBeforeDeleteHooks, sapBillOfMaterialItemDatumHook)
	case boil.AfterDeleteHook:
		sapBillOfMaterialItemDatumAfterDeleteHooks = append(sapBillOfMaterialItemDatumAfterDeleteHooks, sapBillOfMaterialItemDatumHook)
	case boil.BeforeUpsertHook:
		sapBillOfMaterialItemDatumBeforeUpsertHooks = append(sapBillOfMaterialItemDatumBeforeUpsertHooks, sapBillOfMaterialItemDatumHook)
	case boil.AfterUpsertHook:
		sapBillOfMaterialItemDatumAfterUpsertHooks = append(sapBillOfMaterialItemDatumAfterUpsertHooks, sapBillOfMaterialItemDatumHook)
	}
}

// One returns a single sapBillOfMaterialItemDatum record from the query.
func (q sapBillOfMaterialItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBillOfMaterialItemDatum, error) {
	o := &SapBillOfMaterialItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_bill_of_material_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBillOfMaterialItemDatum records from the query.
func (q sapBillOfMaterialItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBillOfMaterialItemDatumSlice, error) {
	var o []*SapBillOfMaterialItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBillOfMaterialItemDatum slice")
	}

	if len(sapBillOfMaterialItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBillOfMaterialItemDatum records in the query.
func (q sapBillOfMaterialItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_bill_of_material_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBillOfMaterialItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_bill_of_material_item_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialSapBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *SapBillOfMaterialItemDatum) BillOfMaterialSapBillOfMaterialHeaderDatum(mods ...qm.QueryMod) sapBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	query := SapBillOfMaterialHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_bill_of_material_header_data`")

	return query
}

// LoadBillOfMaterialSapBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBillOfMaterialItemDatumL) LoadBillOfMaterialSapBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillOfMaterialItemDatum
	var object *SapBillOfMaterialItemDatum

	if singular {
		object = maybeSapBillOfMaterialItemDatum.(*SapBillOfMaterialItemDatum)
	} else {
		slice = *maybeSapBillOfMaterialItemDatum.(*[]*SapBillOfMaterialItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillOfMaterialItemDatumR{}
		}
		args = append(args, object.BillOfMaterial)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_bill_of_material_header_data`),
		qm.WhereIn(`sap_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBillOfMaterialHeaderDatum")
	}

	var resultSlice []*SapBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_bill_of_material_header_data")
	}

	if len(sapBillOfMaterialItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialSapBillOfMaterialHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBillOfMaterialHeaderDatumR{}
		}
		foreign.R.BillOfMaterialSapBillOfMaterialItemData = append(foreign.R.BillOfMaterialSapBillOfMaterialItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialSapBillOfMaterialHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBillOfMaterialHeaderDatumR{}
				}
				foreign.R.BillOfMaterialSapBillOfMaterialItemData = append(foreign.R.BillOfMaterialSapBillOfMaterialItemData, local)
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialSapBillOfMaterialHeaderDatum of the sapBillOfMaterialItemDatum to the related item.
// Sets o.R.BillOfMaterialSapBillOfMaterialHeaderDatum to related.
// Adds o to related.R.BillOfMaterialSapBillOfMaterialItemData.
func (o *SapBillOfMaterialItemDatum) SetBillOfMaterialSapBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, sapBillOfMaterialItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.BillOfMaterial, o.BillOfMaterialCategory, o.BillOfMaterialVariant, o.BillOfMaterialVersion, o.HeaderChangeDocument, o.BillOfMaterialItemNodeNumber}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillOfMaterial = related.BillOfMaterial
	if o.R == nil {
		o.R = &sapBillOfMaterialItemDatumR{
			BillOfMaterialSapBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialSapBillOfMaterialHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapBillOfMaterialHeaderDatumR{
			BillOfMaterialSapBillOfMaterialItemData: SapBillOfMaterialItemDatumSlice{o},
		}
	} else {
		related.R.BillOfMaterialSapBillOfMaterialItemData = append(related.R.BillOfMaterialSapBillOfMaterialItemData, o)
	}

	return nil
}

// SapBillOfMaterialItemData retrieves all the records using an executor.
func SapBillOfMaterialItemData(mods ...qm.QueryMod) sapBillOfMaterialItemDatumQuery {
	mods = append(mods, qm.From("`sap_bill_of_material_item_data`"))
	return sapBillOfMaterialItemDatumQuery{NewQuery(mods...)}
}

// FindSapBillOfMaterialItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBillOfMaterialItemDatum(ctx context.Context, exec boil.ContextExecutor, billOfMaterial string, billOfMaterialCategory string, billOfMaterialVariant string, billOfMaterialVersion string, headerChangeDocument string, billOfMaterialItemNodeNumber string, selectCols ...string) (*SapBillOfMaterialItemDatum, error) {
	sapBillOfMaterialItemDatumObj := &SapBillOfMaterialItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_bill_of_material_item_data` where `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `HeaderChangeDocument`=? AND `BillOfMaterialItemNodeNumber`=?", sel,
	)

	q := queries.Raw(query, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, headerChangeDocument, billOfMaterialItemNodeNumber)

	err := q.Bind(ctx, exec, sapBillOfMaterialItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_bill_of_material_item_data")
	}

	if err = sapBillOfMaterialItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBillOfMaterialItemDatumObj, err
	}

	return sapBillOfMaterialItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBillOfMaterialItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_bill_of_material_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillOfMaterialItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBillOfMaterialItemDatumInsertCacheMut.RLock()
	cache, cached := sapBillOfMaterialItemDatumInsertCache[key]
	sapBillOfMaterialItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBillOfMaterialItemDatumAllColumns,
			sapBillOfMaterialItemDatumColumnsWithDefault,
			sapBillOfMaterialItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_bill_of_material_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_bill_of_material_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_bill_of_material_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBillOfMaterialItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_bill_of_material_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillOfMaterial,
		o.BillOfMaterialCategory,
		o.BillOfMaterialVariant,
		o.BillOfMaterialVersion,
		o.HeaderChangeDocument,
		o.BillOfMaterialItemNodeNumber,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_bill_of_material_item_data")
	}

CacheNoHooks:
	if !cached {
		sapBillOfMaterialItemDatumInsertCacheMut.Lock()
		sapBillOfMaterialItemDatumInsertCache[key] = cache
		sapBillOfMaterialItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBillOfMaterialItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBillOfMaterialItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBillOfMaterialItemDatumUpdateCacheMut.RLock()
	cache, cached := sapBillOfMaterialItemDatumUpdateCache[key]
	sapBillOfMaterialItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBillOfMaterialItemDatumAllColumns,
			sapBillOfMaterialItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_bill_of_material_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_bill_of_material_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBillOfMaterialItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, append(wl, sapBillOfMaterialItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_bill_of_material_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_bill_of_material_item_data")
	}

	if !cached {
		sapBillOfMaterialItemDatumUpdateCacheMut.Lock()
		sapBillOfMaterialItemDatumUpdateCache[key] = cache
		sapBillOfMaterialItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBillOfMaterialItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_bill_of_material_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_bill_of_material_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBillOfMaterialItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillOfMaterialItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillOfMaterialItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBillOfMaterialItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBillOfMaterialItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapBillOfMaterialItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBillOfMaterialItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_bill_of_material_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillOfMaterialItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBillOfMaterialItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBillOfMaterialItemDatumUpsertCacheMut.RLock()
	cache, cached := sapBillOfMaterialItemDatumUpsertCache[key]
	sapBillOfMaterialItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBillOfMaterialItemDatumAllColumns,
			sapBillOfMaterialItemDatumColumnsWithDefault,
			sapBillOfMaterialItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBillOfMaterialItemDatumAllColumns,
			sapBillOfMaterialItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_bill_of_material_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_bill_of_material_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_bill_of_material_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_bill_of_material_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBillOfMaterialItemDatumType, sapBillOfMaterialItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_bill_of_material_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_bill_of_material_item_data")
	}

CacheNoHooks:
	if !cached {
		sapBillOfMaterialItemDatumUpsertCacheMut.Lock()
		sapBillOfMaterialItemDatumUpsertCache[key] = cache
		sapBillOfMaterialItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBillOfMaterialItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBillOfMaterialItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBillOfMaterialItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBillOfMaterialItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_bill_of_material_item_data` WHERE `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `HeaderChangeDocument`=? AND `BillOfMaterialItemNodeNumber`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_bill_of_material_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_bill_of_material_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBillOfMaterialItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBillOfMaterialItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_bill_of_material_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_bill_of_material_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBillOfMaterialItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBillOfMaterialItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillOfMaterialItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_bill_of_material_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillOfMaterialItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBillOfMaterialItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_bill_of_material_item_data")
	}

	if len(sapBillOfMaterialItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBillOfMaterialItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBillOfMaterialItemDatum(ctx, exec, o.BillOfMaterial, o.BillOfMaterialCategory, o.BillOfMaterialVariant, o.BillOfMaterialVersion, o.HeaderChangeDocument, o.BillOfMaterialItemNodeNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBillOfMaterialItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBillOfMaterialItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillOfMaterialItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_bill_of_material_item_data`.* FROM `sap_bill_of_material_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillOfMaterialItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBillOfMaterialItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapBillOfMaterialItemDatumExists checks if the SapBillOfMaterialItemDatum row exists.
func SapBillOfMaterialItemDatumExists(ctx context.Context, exec boil.ContextExecutor, billOfMaterial string, billOfMaterialCategory string, billOfMaterialVariant string, billOfMaterialVersion string, headerChangeDocument string, billOfMaterialItemNodeNumber string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_bill_of_material_item_data` where `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `HeaderChangeDocument`=? AND `BillOfMaterialItemNodeNumber`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, headerChangeDocument, billOfMaterialItemNodeNumber)
	}
	row := exec.QueryRowContext(ctx, sql, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, headerChangeDocument, billOfMaterialItemNodeNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_bill_of_material_item_data exists")
	}

	return exists, nil
}
