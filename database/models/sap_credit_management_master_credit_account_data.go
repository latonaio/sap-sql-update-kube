// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCreditManagementMasterCreditAccountDatum is an object representing the database table.
type SapCreditManagementMasterCreditAccountDatum struct {
	BusinessPartner                string      `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	CreditSegment                  string      `boil:"CreditSegment" json:"CreditSegment" toml:"CreditSegment" yaml:"CreditSegment"`
	BusinessPartnerIsCritical      null.Bool   `boil:"BusinessPartnerIsCritical" json:"BusinessPartnerIsCritical,omitempty" toml:"BusinessPartnerIsCritical" yaml:"BusinessPartnerIsCritical,omitempty"`
	CreditAccountIsBlocked         null.Bool   `boil:"CreditAccountIsBlocked" json:"CreditAccountIsBlocked,omitempty" toml:"CreditAccountIsBlocked" yaml:"CreditAccountIsBlocked,omitempty"`
	CreditAccountBlockReason       null.String `boil:"CreditAccountBlockReason" json:"CreditAccountBlockReason,omitempty" toml:"CreditAccountBlockReason" yaml:"CreditAccountBlockReason,omitempty"`
	CreditAccountResubmissionDate  null.String `boil:"CreditAccountResubmissionDate" json:"CreditAccountResubmissionDate,omitempty" toml:"CreditAccountResubmissionDate" yaml:"CreditAccountResubmissionDate,omitempty"`
	CreditLimitAmount              null.String `boil:"CreditLimitAmount" json:"CreditLimitAmount,omitempty" toml:"CreditLimitAmount" yaml:"CreditLimitAmount,omitempty"`
	CreditLimitValidityEndDate     null.String `boil:"CreditLimitValidityEndDate" json:"CreditLimitValidityEndDate,omitempty" toml:"CreditLimitValidityEndDate" yaml:"CreditLimitValidityEndDate,omitempty"`
	CreditLimitLastChangeDate      null.String `boil:"CreditLimitLastChangeDate" json:"CreditLimitLastChangeDate,omitempty" toml:"CreditLimitLastChangeDate" yaml:"CreditLimitLastChangeDate,omitempty"`
	CreditLimitCalculatedAmount    null.String `boil:"CreditLimitCalculatedAmount" json:"CreditLimitCalculatedAmount,omitempty" toml:"CreditLimitCalculatedAmount" yaml:"CreditLimitCalculatedAmount,omitempty"`
	CreditLimitIsZero              null.Bool   `boil:"CreditLimitIsZero" json:"CreditLimitIsZero,omitempty" toml:"CreditLimitIsZero" yaml:"CreditLimitIsZero,omitempty"`
	CreditLimitRequestedAmount     null.String `boil:"CreditLimitRequestedAmount" json:"CreditLimitRequestedAmount,omitempty" toml:"CreditLimitRequestedAmount" yaml:"CreditLimitRequestedAmount,omitempty"`
	CrdtLmtIsReqdFrmAutomCalc      null.Bool   `boil:"CrdtLmtIsReqdFrmAutomCalc" json:"CrdtLmtIsReqdFrmAutomCalc,omitempty" toml:"CrdtLmtIsReqdFrmAutomCalc" yaml:"CrdtLmtIsReqdFrmAutomCalc,omitempty"`
	CreditLimitReqdValidityEndDate null.String `boil:"CreditLimitReqdValidityEndDate" json:"CreditLimitReqdValidityEndDate,omitempty" toml:"CreditLimitReqdValidityEndDate" yaml:"CreditLimitReqdValidityEndDate,omitempty"`
	CreditLimitRequestDate         null.String `boil:"CreditLimitRequestDate" json:"CreditLimitRequestDate,omitempty" toml:"CreditLimitRequestDate" yaml:"CreditLimitRequestDate,omitempty"`
	CreditSegmentCurrency          null.String `boil:"CreditSegmentCurrency" json:"CreditSegmentCurrency,omitempty" toml:"CreditSegmentCurrency" yaml:"CreditSegmentCurrency,omitempty"`

	R *sapCreditManagementMasterCreditAccountDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCreditManagementMasterCreditAccountDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCreditManagementMasterCreditAccountDatumColumns = struct {
	BusinessPartner                string
	CreditSegment                  string
	BusinessPartnerIsCritical      string
	CreditAccountIsBlocked         string
	CreditAccountBlockReason       string
	CreditAccountResubmissionDate  string
	CreditLimitAmount              string
	CreditLimitValidityEndDate     string
	CreditLimitLastChangeDate      string
	CreditLimitCalculatedAmount    string
	CreditLimitIsZero              string
	CreditLimitRequestedAmount     string
	CrdtLmtIsReqdFrmAutomCalc      string
	CreditLimitReqdValidityEndDate string
	CreditLimitRequestDate         string
	CreditSegmentCurrency          string
}{
	BusinessPartner:                "BusinessPartner",
	CreditSegment:                  "CreditSegment",
	BusinessPartnerIsCritical:      "BusinessPartnerIsCritical",
	CreditAccountIsBlocked:         "CreditAccountIsBlocked",
	CreditAccountBlockReason:       "CreditAccountBlockReason",
	CreditAccountResubmissionDate:  "CreditAccountResubmissionDate",
	CreditLimitAmount:              "CreditLimitAmount",
	CreditLimitValidityEndDate:     "CreditLimitValidityEndDate",
	CreditLimitLastChangeDate:      "CreditLimitLastChangeDate",
	CreditLimitCalculatedAmount:    "CreditLimitCalculatedAmount",
	CreditLimitIsZero:              "CreditLimitIsZero",
	CreditLimitRequestedAmount:     "CreditLimitRequestedAmount",
	CrdtLmtIsReqdFrmAutomCalc:      "CrdtLmtIsReqdFrmAutomCalc",
	CreditLimitReqdValidityEndDate: "CreditLimitReqdValidityEndDate",
	CreditLimitRequestDate:         "CreditLimitRequestDate",
	CreditSegmentCurrency:          "CreditSegmentCurrency",
}

var SapCreditManagementMasterCreditAccountDatumTableColumns = struct {
	BusinessPartner                string
	CreditSegment                  string
	BusinessPartnerIsCritical      string
	CreditAccountIsBlocked         string
	CreditAccountBlockReason       string
	CreditAccountResubmissionDate  string
	CreditLimitAmount              string
	CreditLimitValidityEndDate     string
	CreditLimitLastChangeDate      string
	CreditLimitCalculatedAmount    string
	CreditLimitIsZero              string
	CreditLimitRequestedAmount     string
	CrdtLmtIsReqdFrmAutomCalc      string
	CreditLimitReqdValidityEndDate string
	CreditLimitRequestDate         string
	CreditSegmentCurrency          string
}{
	BusinessPartner:                "sap_credit_management_master_credit_account_data.BusinessPartner",
	CreditSegment:                  "sap_credit_management_master_credit_account_data.CreditSegment",
	BusinessPartnerIsCritical:      "sap_credit_management_master_credit_account_data.BusinessPartnerIsCritical",
	CreditAccountIsBlocked:         "sap_credit_management_master_credit_account_data.CreditAccountIsBlocked",
	CreditAccountBlockReason:       "sap_credit_management_master_credit_account_data.CreditAccountBlockReason",
	CreditAccountResubmissionDate:  "sap_credit_management_master_credit_account_data.CreditAccountResubmissionDate",
	CreditLimitAmount:              "sap_credit_management_master_credit_account_data.CreditLimitAmount",
	CreditLimitValidityEndDate:     "sap_credit_management_master_credit_account_data.CreditLimitValidityEndDate",
	CreditLimitLastChangeDate:      "sap_credit_management_master_credit_account_data.CreditLimitLastChangeDate",
	CreditLimitCalculatedAmount:    "sap_credit_management_master_credit_account_data.CreditLimitCalculatedAmount",
	CreditLimitIsZero:              "sap_credit_management_master_credit_account_data.CreditLimitIsZero",
	CreditLimitRequestedAmount:     "sap_credit_management_master_credit_account_data.CreditLimitRequestedAmount",
	CrdtLmtIsReqdFrmAutomCalc:      "sap_credit_management_master_credit_account_data.CrdtLmtIsReqdFrmAutomCalc",
	CreditLimitReqdValidityEndDate: "sap_credit_management_master_credit_account_data.CreditLimitReqdValidityEndDate",
	CreditLimitRequestDate:         "sap_credit_management_master_credit_account_data.CreditLimitRequestDate",
	CreditSegmentCurrency:          "sap_credit_management_master_credit_account_data.CreditSegmentCurrency",
}

// Generated where

var SapCreditManagementMasterCreditAccountDatumWhere = struct {
	BusinessPartner                whereHelperstring
	CreditSegment                  whereHelperstring
	BusinessPartnerIsCritical      whereHelpernull_Bool
	CreditAccountIsBlocked         whereHelpernull_Bool
	CreditAccountBlockReason       whereHelpernull_String
	CreditAccountResubmissionDate  whereHelpernull_String
	CreditLimitAmount              whereHelpernull_String
	CreditLimitValidityEndDate     whereHelpernull_String
	CreditLimitLastChangeDate      whereHelpernull_String
	CreditLimitCalculatedAmount    whereHelpernull_String
	CreditLimitIsZero              whereHelpernull_Bool
	CreditLimitRequestedAmount     whereHelpernull_String
	CrdtLmtIsReqdFrmAutomCalc      whereHelpernull_Bool
	CreditLimitReqdValidityEndDate whereHelpernull_String
	CreditLimitRequestDate         whereHelpernull_String
	CreditSegmentCurrency          whereHelpernull_String
}{
	BusinessPartner:                whereHelperstring{field: "`sap_credit_management_master_credit_account_data`.`BusinessPartner`"},
	CreditSegment:                  whereHelperstring{field: "`sap_credit_management_master_credit_account_data`.`CreditSegment`"},
	BusinessPartnerIsCritical:      whereHelpernull_Bool{field: "`sap_credit_management_master_credit_account_data`.`BusinessPartnerIsCritical`"},
	CreditAccountIsBlocked:         whereHelpernull_Bool{field: "`sap_credit_management_master_credit_account_data`.`CreditAccountIsBlocked`"},
	CreditAccountBlockReason:       whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditAccountBlockReason`"},
	CreditAccountResubmissionDate:  whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditAccountResubmissionDate`"},
	CreditLimitAmount:              whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitAmount`"},
	CreditLimitValidityEndDate:     whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitValidityEndDate`"},
	CreditLimitLastChangeDate:      whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitLastChangeDate`"},
	CreditLimitCalculatedAmount:    whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitCalculatedAmount`"},
	CreditLimitIsZero:              whereHelpernull_Bool{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitIsZero`"},
	CreditLimitRequestedAmount:     whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitRequestedAmount`"},
	CrdtLmtIsReqdFrmAutomCalc:      whereHelpernull_Bool{field: "`sap_credit_management_master_credit_account_data`.`CrdtLmtIsReqdFrmAutomCalc`"},
	CreditLimitReqdValidityEndDate: whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitReqdValidityEndDate`"},
	CreditLimitRequestDate:         whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditLimitRequestDate`"},
	CreditSegmentCurrency:          whereHelpernull_String{field: "`sap_credit_management_master_credit_account_data`.`CreditSegmentCurrency`"},
}

// SapCreditManagementMasterCreditAccountDatumRels is where relationship names are stored.
var SapCreditManagementMasterCreditAccountDatumRels = struct {
	BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum string
}{
	BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum: "BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum",
}

// sapCreditManagementMasterCreditAccountDatumR is where relationships are stored.
type sapCreditManagementMasterCreditAccountDatumR struct {
	BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum *SapCreditManagementMasterBusinessPartnerDatum `boil:"BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum" json:"BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum" toml:"BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum" yaml:"BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCreditManagementMasterCreditAccountDatumR) NewStruct() *sapCreditManagementMasterCreditAccountDatumR {
	return &sapCreditManagementMasterCreditAccountDatumR{}
}

func (r *sapCreditManagementMasterCreditAccountDatumR) GetBusinessPartnerSapCreditManagementMasterBusinessPartnerDatum() *SapCreditManagementMasterBusinessPartnerDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum
}

// sapCreditManagementMasterCreditAccountDatumL is where Load methods for each relationship are stored.
type sapCreditManagementMasterCreditAccountDatumL struct{}

var (
	sapCreditManagementMasterCreditAccountDatumAllColumns            = []string{"BusinessPartner", "CreditSegment", "BusinessPartnerIsCritical", "CreditAccountIsBlocked", "CreditAccountBlockReason", "CreditAccountResubmissionDate", "CreditLimitAmount", "CreditLimitValidityEndDate", "CreditLimitLastChangeDate", "CreditLimitCalculatedAmount", "CreditLimitIsZero", "CreditLimitRequestedAmount", "CrdtLmtIsReqdFrmAutomCalc", "CreditLimitReqdValidityEndDate", "CreditLimitRequestDate", "CreditSegmentCurrency"}
	sapCreditManagementMasterCreditAccountDatumColumnsWithoutDefault = []string{"BusinessPartner", "CreditSegment", "BusinessPartnerIsCritical", "CreditAccountIsBlocked", "CreditAccountBlockReason", "CreditAccountResubmissionDate", "CreditLimitAmount", "CreditLimitValidityEndDate", "CreditLimitLastChangeDate", "CreditLimitCalculatedAmount", "CreditLimitIsZero", "CreditLimitRequestedAmount", "CrdtLmtIsReqdFrmAutomCalc", "CreditLimitReqdValidityEndDate", "CreditLimitRequestDate", "CreditSegmentCurrency"}
	sapCreditManagementMasterCreditAccountDatumColumnsWithDefault    = []string{}
	sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns     = []string{"BusinessPartner", "CreditSegment"}
	sapCreditManagementMasterCreditAccountDatumGeneratedColumns      = []string{}
)

type (
	// SapCreditManagementMasterCreditAccountDatumSlice is an alias for a slice of pointers to SapCreditManagementMasterCreditAccountDatum.
	// This should almost always be used instead of []SapCreditManagementMasterCreditAccountDatum.
	SapCreditManagementMasterCreditAccountDatumSlice []*SapCreditManagementMasterCreditAccountDatum
	// SapCreditManagementMasterCreditAccountDatumHook is the signature for custom SapCreditManagementMasterCreditAccountDatum hook methods
	SapCreditManagementMasterCreditAccountDatumHook func(context.Context, boil.ContextExecutor, *SapCreditManagementMasterCreditAccountDatum) error

	sapCreditManagementMasterCreditAccountDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCreditManagementMasterCreditAccountDatumType                 = reflect.TypeOf(&SapCreditManagementMasterCreditAccountDatum{})
	sapCreditManagementMasterCreditAccountDatumMapping              = queries.MakeStructMapping(sapCreditManagementMasterCreditAccountDatumType)
	sapCreditManagementMasterCreditAccountDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns)
	sapCreditManagementMasterCreditAccountDatumInsertCacheMut       sync.RWMutex
	sapCreditManagementMasterCreditAccountDatumInsertCache          = make(map[string]insertCache)
	sapCreditManagementMasterCreditAccountDatumUpdateCacheMut       sync.RWMutex
	sapCreditManagementMasterCreditAccountDatumUpdateCache          = make(map[string]updateCache)
	sapCreditManagementMasterCreditAccountDatumUpsertCacheMut       sync.RWMutex
	sapCreditManagementMasterCreditAccountDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCreditManagementMasterCreditAccountDatumAfterSelectHooks []SapCreditManagementMasterCreditAccountDatumHook

var sapCreditManagementMasterCreditAccountDatumBeforeInsertHooks []SapCreditManagementMasterCreditAccountDatumHook
var sapCreditManagementMasterCreditAccountDatumAfterInsertHooks []SapCreditManagementMasterCreditAccountDatumHook

var sapCreditManagementMasterCreditAccountDatumBeforeUpdateHooks []SapCreditManagementMasterCreditAccountDatumHook
var sapCreditManagementMasterCreditAccountDatumAfterUpdateHooks []SapCreditManagementMasterCreditAccountDatumHook

var sapCreditManagementMasterCreditAccountDatumBeforeDeleteHooks []SapCreditManagementMasterCreditAccountDatumHook
var sapCreditManagementMasterCreditAccountDatumAfterDeleteHooks []SapCreditManagementMasterCreditAccountDatumHook

var sapCreditManagementMasterCreditAccountDatumBeforeUpsertHooks []SapCreditManagementMasterCreditAccountDatumHook
var sapCreditManagementMasterCreditAccountDatumAfterUpsertHooks []SapCreditManagementMasterCreditAccountDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCreditManagementMasterCreditAccountDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditManagementMasterCreditAccountDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCreditManagementMasterCreditAccountDatumHook registers your hook function for all future operations.
func AddSapCreditManagementMasterCreditAccountDatumHook(hookPoint boil.HookPoint, sapCreditManagementMasterCreditAccountDatumHook SapCreditManagementMasterCreditAccountDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCreditManagementMasterCreditAccountDatumAfterSelectHooks = append(sapCreditManagementMasterCreditAccountDatumAfterSelectHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.BeforeInsertHook:
		sapCreditManagementMasterCreditAccountDatumBeforeInsertHooks = append(sapCreditManagementMasterCreditAccountDatumBeforeInsertHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.AfterInsertHook:
		sapCreditManagementMasterCreditAccountDatumAfterInsertHooks = append(sapCreditManagementMasterCreditAccountDatumAfterInsertHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.BeforeUpdateHook:
		sapCreditManagementMasterCreditAccountDatumBeforeUpdateHooks = append(sapCreditManagementMasterCreditAccountDatumBeforeUpdateHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.AfterUpdateHook:
		sapCreditManagementMasterCreditAccountDatumAfterUpdateHooks = append(sapCreditManagementMasterCreditAccountDatumAfterUpdateHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.BeforeDeleteHook:
		sapCreditManagementMasterCreditAccountDatumBeforeDeleteHooks = append(sapCreditManagementMasterCreditAccountDatumBeforeDeleteHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.AfterDeleteHook:
		sapCreditManagementMasterCreditAccountDatumAfterDeleteHooks = append(sapCreditManagementMasterCreditAccountDatumAfterDeleteHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.BeforeUpsertHook:
		sapCreditManagementMasterCreditAccountDatumBeforeUpsertHooks = append(sapCreditManagementMasterCreditAccountDatumBeforeUpsertHooks, sapCreditManagementMasterCreditAccountDatumHook)
	case boil.AfterUpsertHook:
		sapCreditManagementMasterCreditAccountDatumAfterUpsertHooks = append(sapCreditManagementMasterCreditAccountDatumAfterUpsertHooks, sapCreditManagementMasterCreditAccountDatumHook)
	}
}

// One returns a single sapCreditManagementMasterCreditAccountDatum record from the query.
func (q sapCreditManagementMasterCreditAccountDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCreditManagementMasterCreditAccountDatum, error) {
	o := &SapCreditManagementMasterCreditAccountDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_credit_management_master_credit_account_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCreditManagementMasterCreditAccountDatum records from the query.
func (q sapCreditManagementMasterCreditAccountDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCreditManagementMasterCreditAccountDatumSlice, error) {
	var o []*SapCreditManagementMasterCreditAccountDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCreditManagementMasterCreditAccountDatum slice")
	}

	if len(sapCreditManagementMasterCreditAccountDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCreditManagementMasterCreditAccountDatum records in the query.
func (q sapCreditManagementMasterCreditAccountDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_credit_management_master_credit_account_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCreditManagementMasterCreditAccountDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_credit_management_master_credit_account_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum pointed to by the foreign key.
func (o *SapCreditManagementMasterCreditAccountDatum) BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum(mods ...qm.QueryMod) sapCreditManagementMasterBusinessPartnerDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return SapCreditManagementMasterBusinessPartnerData(queryMods...)
}

// LoadBusinessPartnerSapCreditManagementMasterBusinessPartnerDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCreditManagementMasterCreditAccountDatumL) LoadBusinessPartnerSapCreditManagementMasterBusinessPartnerDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditManagementMasterCreditAccountDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditManagementMasterCreditAccountDatum
	var object *SapCreditManagementMasterCreditAccountDatum

	if singular {
		object = maybeSapCreditManagementMasterCreditAccountDatum.(*SapCreditManagementMasterCreditAccountDatum)
	} else {
		slice = *maybeSapCreditManagementMasterCreditAccountDatum.(*[]*SapCreditManagementMasterCreditAccountDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditManagementMasterCreditAccountDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditManagementMasterCreditAccountDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_management_master_business_partner_data`),
		qm.WhereIn(`sap_credit_management_master_business_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCreditManagementMasterBusinessPartnerDatum")
	}

	var resultSlice []*SapCreditManagementMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCreditManagementMasterBusinessPartnerDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_credit_management_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_management_master_business_partner_data")
	}

	if len(sapCreditManagementMasterCreditAccountDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCreditManagementMasterBusinessPartnerDatumR{}
		}
		foreign.R.BusinessPartnerSapCreditManagementMasterCreditAccountData = append(foreign.R.BusinessPartnerSapCreditManagementMasterCreditAccountData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCreditManagementMasterBusinessPartnerDatumR{}
				}
				foreign.R.BusinessPartnerSapCreditManagementMasterCreditAccountData = append(foreign.R.BusinessPartnerSapCreditManagementMasterCreditAccountData, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerSapCreditManagementMasterBusinessPartnerDatum of the sapCreditManagementMasterCreditAccountDatum to the related item.
// Sets o.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum to related.
// Adds o to related.R.BusinessPartnerSapCreditManagementMasterCreditAccountData.
func (o *SapCreditManagementMasterCreditAccountDatum) SetBusinessPartnerSapCreditManagementMasterBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCreditManagementMasterBusinessPartnerDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_credit_management_master_credit_account_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.CreditSegment}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &sapCreditManagementMasterCreditAccountDatumR{
			BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum: related,
		}
	} else {
		o.R.BusinessPartnerSapCreditManagementMasterBusinessPartnerDatum = related
	}

	if related.R == nil {
		related.R = &sapCreditManagementMasterBusinessPartnerDatumR{
			BusinessPartnerSapCreditManagementMasterCreditAccountData: SapCreditManagementMasterCreditAccountDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerSapCreditManagementMasterCreditAccountData = append(related.R.BusinessPartnerSapCreditManagementMasterCreditAccountData, o)
	}

	return nil
}

// SapCreditManagementMasterCreditAccountData retrieves all the records using an executor.
func SapCreditManagementMasterCreditAccountData(mods ...qm.QueryMod) sapCreditManagementMasterCreditAccountDatumQuery {
	mods = append(mods, qm.From("`sap_credit_management_master_credit_account_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_credit_management_master_credit_account_data`.*"})
	}

	return sapCreditManagementMasterCreditAccountDatumQuery{q}
}

// FindSapCreditManagementMasterCreditAccountDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCreditManagementMasterCreditAccountDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner string, creditSegment string, selectCols ...string) (*SapCreditManagementMasterCreditAccountDatum, error) {
	sapCreditManagementMasterCreditAccountDatumObj := &SapCreditManagementMasterCreditAccountDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_credit_management_master_credit_account_data` where `BusinessPartner`=? AND `CreditSegment`=?", sel,
	)

	q := queries.Raw(query, businessPartner, creditSegment)

	err := q.Bind(ctx, exec, sapCreditManagementMasterCreditAccountDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_credit_management_master_credit_account_data")
	}

	if err = sapCreditManagementMasterCreditAccountDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCreditManagementMasterCreditAccountDatumObj, err
	}

	return sapCreditManagementMasterCreditAccountDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCreditManagementMasterCreditAccountDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_management_master_credit_account_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditManagementMasterCreditAccountDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCreditManagementMasterCreditAccountDatumInsertCacheMut.RLock()
	cache, cached := sapCreditManagementMasterCreditAccountDatumInsertCache[key]
	sapCreditManagementMasterCreditAccountDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCreditManagementMasterCreditAccountDatumAllColumns,
			sapCreditManagementMasterCreditAccountDatumColumnsWithDefault,
			sapCreditManagementMasterCreditAccountDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_credit_management_master_credit_account_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_credit_management_master_credit_account_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_credit_management_master_credit_account_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_credit_management_master_credit_account_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.CreditSegment,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_management_master_credit_account_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditManagementMasterCreditAccountDatumInsertCacheMut.Lock()
		sapCreditManagementMasterCreditAccountDatumInsertCache[key] = cache
		sapCreditManagementMasterCreditAccountDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCreditManagementMasterCreditAccountDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCreditManagementMasterCreditAccountDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCreditManagementMasterCreditAccountDatumUpdateCacheMut.RLock()
	cache, cached := sapCreditManagementMasterCreditAccountDatumUpdateCache[key]
	sapCreditManagementMasterCreditAccountDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCreditManagementMasterCreditAccountDatumAllColumns,
			sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_credit_management_master_credit_account_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_credit_management_master_credit_account_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, append(wl, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_credit_management_master_credit_account_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_credit_management_master_credit_account_data")
	}

	if !cached {
		sapCreditManagementMasterCreditAccountDatumUpdateCacheMut.Lock()
		sapCreditManagementMasterCreditAccountDatumUpdateCache[key] = cache
		sapCreditManagementMasterCreditAccountDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCreditManagementMasterCreditAccountDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_credit_management_master_credit_account_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_credit_management_master_credit_account_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCreditManagementMasterCreditAccountDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditManagementMasterCreditAccountDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_credit_management_master_credit_account_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCreditManagementMasterCreditAccountDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCreditManagementMasterCreditAccountDatum")
	}
	return rowsAff, nil
}

var mySQLSapCreditManagementMasterCreditAccountDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCreditManagementMasterCreditAccountDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_management_master_credit_account_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditManagementMasterCreditAccountDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCreditManagementMasterCreditAccountDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCreditManagementMasterCreditAccountDatumUpsertCacheMut.RLock()
	cache, cached := sapCreditManagementMasterCreditAccountDatumUpsertCache[key]
	sapCreditManagementMasterCreditAccountDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCreditManagementMasterCreditAccountDatumAllColumns,
			sapCreditManagementMasterCreditAccountDatumColumnsWithDefault,
			sapCreditManagementMasterCreditAccountDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCreditManagementMasterCreditAccountDatumAllColumns,
			sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_credit_management_master_credit_account_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_credit_management_master_credit_account_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_credit_management_master_credit_account_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_credit_management_master_credit_account_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCreditManagementMasterCreditAccountDatumType, sapCreditManagementMasterCreditAccountDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_credit_management_master_credit_account_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_management_master_credit_account_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditManagementMasterCreditAccountDatumUpsertCacheMut.Lock()
		sapCreditManagementMasterCreditAccountDatumUpsertCache[key] = cache
		sapCreditManagementMasterCreditAccountDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCreditManagementMasterCreditAccountDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCreditManagementMasterCreditAccountDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCreditManagementMasterCreditAccountDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCreditManagementMasterCreditAccountDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_credit_management_master_credit_account_data` WHERE `BusinessPartner`=? AND `CreditSegment`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_credit_management_master_credit_account_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_credit_management_master_credit_account_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCreditManagementMasterCreditAccountDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCreditManagementMasterCreditAccountDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_credit_management_master_credit_account_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_management_master_credit_account_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCreditManagementMasterCreditAccountDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCreditManagementMasterCreditAccountDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditManagementMasterCreditAccountDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_credit_management_master_credit_account_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCreditManagementMasterCreditAccountDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_management_master_credit_account_data")
	}

	if len(sapCreditManagementMasterCreditAccountDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCreditManagementMasterCreditAccountDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCreditManagementMasterCreditAccountDatum(ctx, exec, o.BusinessPartner, o.CreditSegment)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCreditManagementMasterCreditAccountDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCreditManagementMasterCreditAccountDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditManagementMasterCreditAccountDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_credit_management_master_credit_account_data`.* FROM `sap_credit_management_master_credit_account_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditManagementMasterCreditAccountDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCreditManagementMasterCreditAccountDatumSlice")
	}

	*o = slice

	return nil
}

// SapCreditManagementMasterCreditAccountDatumExists checks if the SapCreditManagementMasterCreditAccountDatum row exists.
func SapCreditManagementMasterCreditAccountDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner string, creditSegment string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_credit_management_master_credit_account_data` where `BusinessPartner`=? AND `CreditSegment`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, creditSegment)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, creditSegment)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_credit_management_master_credit_account_data exists")
	}

	return exists, nil
}
