// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseOrderItemPricingElementDatum is an object representing the database table.
type SapPurchaseOrderItemPricingElementDatum struct {
	PurchaseOrder               string      `boil:"PurchaseOrder" json:"PurchaseOrder" toml:"PurchaseOrder" yaml:"PurchaseOrder"`
	PurchaseOrderItem           string      `boil:"PurchaseOrderItem" json:"PurchaseOrderItem" toml:"PurchaseOrderItem" yaml:"PurchaseOrderItem"`
	PricingProcedureStep        string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter     string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	PricingDocument             null.String `boil:"PricingDocument" json:"PricingDocument,omitempty" toml:"PricingDocument" yaml:"PricingDocument,omitempty"`
	PricingDocumentItem         null.String `boil:"PricingDocumentItem" json:"PricingDocumentItem,omitempty" toml:"PricingDocumentItem" yaml:"PricingDocumentItem,omitempty"`
	ConditionType               null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	ConditionRateValue          null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency           null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	PriceDetnExchangeRate       null.String `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	TransactionCurrency         null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	ConditionAmount             null.String `boil:"ConditionAmount" json:"ConditionAmount,omitempty" toml:"ConditionAmount" yaml:"ConditionAmount,omitempty"`
	ConditionQuantityUnit       null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	ConditionQuantity           null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionApplication        null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	PricingDateTime             null.String `boil:"PricingDateTime" json:"PricingDateTime,omitempty" toml:"PricingDateTime" yaml:"PricingDateTime,omitempty"`
	ConditionCalculationType    null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionBaseValue          null.String `boil:"ConditionBaseValue" json:"ConditionBaseValue,omitempty" toml:"ConditionBaseValue" yaml:"ConditionBaseValue,omitempty"`
	ConditionToBaseQtyNmrtr     null.String `boil:"ConditionToBaseQtyNmrtr" json:"ConditionToBaseQtyNmrtr,omitempty" toml:"ConditionToBaseQtyNmrtr" yaml:"ConditionToBaseQtyNmrtr,omitempty"`
	ConditionToBaseQtyDnmntr    null.String `boil:"ConditionToBaseQtyDnmntr" json:"ConditionToBaseQtyDnmntr,omitempty" toml:"ConditionToBaseQtyDnmntr" yaml:"ConditionToBaseQtyDnmntr,omitempty"`
	ConditionCategory           null.String `boil:"ConditionCategory" json:"ConditionCategory,omitempty" toml:"ConditionCategory" yaml:"ConditionCategory,omitempty"`
	PricingScaleType            null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	ConditionOrigin             null.String `boil:"ConditionOrigin" json:"ConditionOrigin,omitempty" toml:"ConditionOrigin" yaml:"ConditionOrigin,omitempty"`
	IsGroupCondition            null.String `boil:"IsGroupCondition" json:"IsGroupCondition,omitempty" toml:"IsGroupCondition" yaml:"IsGroupCondition,omitempty"`
	ConditionSequentialNumber   null.String `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	ConditionInactiveReason     null.String `boil:"ConditionInactiveReason" json:"ConditionInactiveReason,omitempty" toml:"ConditionInactiveReason" yaml:"ConditionInactiveReason,omitempty"`
	PricingScaleBasis           null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleBasisValue    null.String `boil:"ConditionScaleBasisValue" json:"ConditionScaleBasisValue,omitempty" toml:"ConditionScaleBasisValue" yaml:"ConditionScaleBasisValue,omitempty"`
	ConditionScaleBasisCurrency null.String `boil:"ConditionScaleBasisCurrency" json:"ConditionScaleBasisCurrency,omitempty" toml:"ConditionScaleBasisCurrency" yaml:"ConditionScaleBasisCurrency,omitempty"`
	ConditionScaleBasisUnit     null.String `boil:"ConditionScaleBasisUnit" json:"ConditionScaleBasisUnit,omitempty" toml:"ConditionScaleBasisUnit" yaml:"ConditionScaleBasisUnit,omitempty"`
	ConditionIsManuallyChanged  null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`
	ConditionRecord             null.String `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`

	R *sapPurchaseOrderItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseOrderItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseOrderItemPricingElementDatumColumns = struct {
	PurchaseOrder               string
	PurchaseOrderItem           string
	PricingProcedureStep        string
	PricingProcedureCounter     string
	PricingDocument             string
	PricingDocumentItem         string
	ConditionType               string
	ConditionRateValue          string
	ConditionCurrency           string
	PriceDetnExchangeRate       string
	TransactionCurrency         string
	ConditionAmount             string
	ConditionQuantityUnit       string
	ConditionQuantity           string
	ConditionApplication        string
	PricingDateTime             string
	ConditionCalculationType    string
	ConditionBaseValue          string
	ConditionToBaseQtyNmrtr     string
	ConditionToBaseQtyDnmntr    string
	ConditionCategory           string
	PricingScaleType            string
	ConditionOrigin             string
	IsGroupCondition            string
	ConditionSequentialNumber   string
	ConditionInactiveReason     string
	PricingScaleBasis           string
	ConditionScaleBasisValue    string
	ConditionScaleBasisCurrency string
	ConditionScaleBasisUnit     string
	ConditionIsManuallyChanged  string
	ConditionRecord             string
}{
	PurchaseOrder:               "PurchaseOrder",
	PurchaseOrderItem:           "PurchaseOrderItem",
	PricingProcedureStep:        "PricingProcedureStep",
	PricingProcedureCounter:     "PricingProcedureCounter",
	PricingDocument:             "PricingDocument",
	PricingDocumentItem:         "PricingDocumentItem",
	ConditionType:               "ConditionType",
	ConditionRateValue:          "ConditionRateValue",
	ConditionCurrency:           "ConditionCurrency",
	PriceDetnExchangeRate:       "PriceDetnExchangeRate",
	TransactionCurrency:         "TransactionCurrency",
	ConditionAmount:             "ConditionAmount",
	ConditionQuantityUnit:       "ConditionQuantityUnit",
	ConditionQuantity:           "ConditionQuantity",
	ConditionApplication:        "ConditionApplication",
	PricingDateTime:             "PricingDateTime",
	ConditionCalculationType:    "ConditionCalculationType",
	ConditionBaseValue:          "ConditionBaseValue",
	ConditionToBaseQtyNmrtr:     "ConditionToBaseQtyNmrtr",
	ConditionToBaseQtyDnmntr:    "ConditionToBaseQtyDnmntr",
	ConditionCategory:           "ConditionCategory",
	PricingScaleType:            "PricingScaleType",
	ConditionOrigin:             "ConditionOrigin",
	IsGroupCondition:            "IsGroupCondition",
	ConditionSequentialNumber:   "ConditionSequentialNumber",
	ConditionInactiveReason:     "ConditionInactiveReason",
	PricingScaleBasis:           "PricingScaleBasis",
	ConditionScaleBasisValue:    "ConditionScaleBasisValue",
	ConditionScaleBasisCurrency: "ConditionScaleBasisCurrency",
	ConditionScaleBasisUnit:     "ConditionScaleBasisUnit",
	ConditionIsManuallyChanged:  "ConditionIsManuallyChanged",
	ConditionRecord:             "ConditionRecord",
}

var SapPurchaseOrderItemPricingElementDatumTableColumns = struct {
	PurchaseOrder               string
	PurchaseOrderItem           string
	PricingProcedureStep        string
	PricingProcedureCounter     string
	PricingDocument             string
	PricingDocumentItem         string
	ConditionType               string
	ConditionRateValue          string
	ConditionCurrency           string
	PriceDetnExchangeRate       string
	TransactionCurrency         string
	ConditionAmount             string
	ConditionQuantityUnit       string
	ConditionQuantity           string
	ConditionApplication        string
	PricingDateTime             string
	ConditionCalculationType    string
	ConditionBaseValue          string
	ConditionToBaseQtyNmrtr     string
	ConditionToBaseQtyDnmntr    string
	ConditionCategory           string
	PricingScaleType            string
	ConditionOrigin             string
	IsGroupCondition            string
	ConditionSequentialNumber   string
	ConditionInactiveReason     string
	PricingScaleBasis           string
	ConditionScaleBasisValue    string
	ConditionScaleBasisCurrency string
	ConditionScaleBasisUnit     string
	ConditionIsManuallyChanged  string
	ConditionRecord             string
}{
	PurchaseOrder:               "sap_purchase_order_item_pricing_element_data.PurchaseOrder",
	PurchaseOrderItem:           "sap_purchase_order_item_pricing_element_data.PurchaseOrderItem",
	PricingProcedureStep:        "sap_purchase_order_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter:     "sap_purchase_order_item_pricing_element_data.PricingProcedureCounter",
	PricingDocument:             "sap_purchase_order_item_pricing_element_data.PricingDocument",
	PricingDocumentItem:         "sap_purchase_order_item_pricing_element_data.PricingDocumentItem",
	ConditionType:               "sap_purchase_order_item_pricing_element_data.ConditionType",
	ConditionRateValue:          "sap_purchase_order_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:           "sap_purchase_order_item_pricing_element_data.ConditionCurrency",
	PriceDetnExchangeRate:       "sap_purchase_order_item_pricing_element_data.PriceDetnExchangeRate",
	TransactionCurrency:         "sap_purchase_order_item_pricing_element_data.TransactionCurrency",
	ConditionAmount:             "sap_purchase_order_item_pricing_element_data.ConditionAmount",
	ConditionQuantityUnit:       "sap_purchase_order_item_pricing_element_data.ConditionQuantityUnit",
	ConditionQuantity:           "sap_purchase_order_item_pricing_element_data.ConditionQuantity",
	ConditionApplication:        "sap_purchase_order_item_pricing_element_data.ConditionApplication",
	PricingDateTime:             "sap_purchase_order_item_pricing_element_data.PricingDateTime",
	ConditionCalculationType:    "sap_purchase_order_item_pricing_element_data.ConditionCalculationType",
	ConditionBaseValue:          "sap_purchase_order_item_pricing_element_data.ConditionBaseValue",
	ConditionToBaseQtyNmrtr:     "sap_purchase_order_item_pricing_element_data.ConditionToBaseQtyNmrtr",
	ConditionToBaseQtyDnmntr:    "sap_purchase_order_item_pricing_element_data.ConditionToBaseQtyDnmntr",
	ConditionCategory:           "sap_purchase_order_item_pricing_element_data.ConditionCategory",
	PricingScaleType:            "sap_purchase_order_item_pricing_element_data.PricingScaleType",
	ConditionOrigin:             "sap_purchase_order_item_pricing_element_data.ConditionOrigin",
	IsGroupCondition:            "sap_purchase_order_item_pricing_element_data.IsGroupCondition",
	ConditionSequentialNumber:   "sap_purchase_order_item_pricing_element_data.ConditionSequentialNumber",
	ConditionInactiveReason:     "sap_purchase_order_item_pricing_element_data.ConditionInactiveReason",
	PricingScaleBasis:           "sap_purchase_order_item_pricing_element_data.PricingScaleBasis",
	ConditionScaleBasisValue:    "sap_purchase_order_item_pricing_element_data.ConditionScaleBasisValue",
	ConditionScaleBasisCurrency: "sap_purchase_order_item_pricing_element_data.ConditionScaleBasisCurrency",
	ConditionScaleBasisUnit:     "sap_purchase_order_item_pricing_element_data.ConditionScaleBasisUnit",
	ConditionIsManuallyChanged:  "sap_purchase_order_item_pricing_element_data.ConditionIsManuallyChanged",
	ConditionRecord:             "sap_purchase_order_item_pricing_element_data.ConditionRecord",
}

// Generated where

var SapPurchaseOrderItemPricingElementDatumWhere = struct {
	PurchaseOrder               whereHelperstring
	PurchaseOrderItem           whereHelperstring
	PricingProcedureStep        whereHelperstring
	PricingProcedureCounter     whereHelperstring
	PricingDocument             whereHelpernull_String
	PricingDocumentItem         whereHelpernull_String
	ConditionType               whereHelpernull_String
	ConditionRateValue          whereHelpernull_String
	ConditionCurrency           whereHelpernull_String
	PriceDetnExchangeRate       whereHelpernull_String
	TransactionCurrency         whereHelpernull_String
	ConditionAmount             whereHelpernull_String
	ConditionQuantityUnit       whereHelpernull_String
	ConditionQuantity           whereHelpernull_String
	ConditionApplication        whereHelpernull_String
	PricingDateTime             whereHelpernull_String
	ConditionCalculationType    whereHelpernull_String
	ConditionBaseValue          whereHelpernull_String
	ConditionToBaseQtyNmrtr     whereHelpernull_String
	ConditionToBaseQtyDnmntr    whereHelpernull_String
	ConditionCategory           whereHelpernull_String
	PricingScaleType            whereHelpernull_String
	ConditionOrigin             whereHelpernull_String
	IsGroupCondition            whereHelpernull_String
	ConditionSequentialNumber   whereHelpernull_String
	ConditionInactiveReason     whereHelpernull_String
	PricingScaleBasis           whereHelpernull_String
	ConditionScaleBasisValue    whereHelpernull_String
	ConditionScaleBasisCurrency whereHelpernull_String
	ConditionScaleBasisUnit     whereHelpernull_String
	ConditionIsManuallyChanged  whereHelpernull_Bool
	ConditionRecord             whereHelpernull_String
}{
	PurchaseOrder:               whereHelperstring{field: "`sap_purchase_order_item_pricing_element_data`.`PurchaseOrder`"},
	PurchaseOrderItem:           whereHelperstring{field: "`sap_purchase_order_item_pricing_element_data`.`PurchaseOrderItem`"},
	PricingProcedureStep:        whereHelperstring{field: "`sap_purchase_order_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter:     whereHelperstring{field: "`sap_purchase_order_item_pricing_element_data`.`PricingProcedureCounter`"},
	PricingDocument:             whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`PricingDocument`"},
	PricingDocumentItem:         whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`PricingDocumentItem`"},
	ConditionType:               whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionType`"},
	ConditionRateValue:          whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:           whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionCurrency`"},
	PriceDetnExchangeRate:       whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`PriceDetnExchangeRate`"},
	TransactionCurrency:         whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`TransactionCurrency`"},
	ConditionAmount:             whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionAmount`"},
	ConditionQuantityUnit:       whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionQuantityUnit`"},
	ConditionQuantity:           whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionApplication:        whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionApplication`"},
	PricingDateTime:             whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`PricingDateTime`"},
	ConditionCalculationType:    whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionCalculationType`"},
	ConditionBaseValue:          whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionBaseValue`"},
	ConditionToBaseQtyNmrtr:     whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionToBaseQtyNmrtr`"},
	ConditionToBaseQtyDnmntr:    whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionToBaseQtyDnmntr`"},
	ConditionCategory:           whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionCategory`"},
	PricingScaleType:            whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`PricingScaleType`"},
	ConditionOrigin:             whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionOrigin`"},
	IsGroupCondition:            whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`IsGroupCondition`"},
	ConditionSequentialNumber:   whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionSequentialNumber`"},
	ConditionInactiveReason:     whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionInactiveReason`"},
	PricingScaleBasis:           whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`PricingScaleBasis`"},
	ConditionScaleBasisValue:    whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionScaleBasisValue`"},
	ConditionScaleBasisCurrency: whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionScaleBasisCurrency`"},
	ConditionScaleBasisUnit:     whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionScaleBasisUnit`"},
	ConditionIsManuallyChanged:  whereHelpernull_Bool{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
	ConditionRecord:             whereHelpernull_String{field: "`sap_purchase_order_item_pricing_element_data`.`ConditionRecord`"},
}

// SapPurchaseOrderItemPricingElementDatumRels is where relationship names are stored.
var SapPurchaseOrderItemPricingElementDatumRels = struct {
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress string
}{
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: "PurchaseOrderSapPurchaseOrderHeaderDataWithAddress",
}

// sapPurchaseOrderItemPricingElementDatumR is where relationships are stored.
type sapPurchaseOrderItemPricingElementDatumR struct {
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress *SapPurchaseOrderHeaderDataWithAddress `boil:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" json:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" toml:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" yaml:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseOrderItemPricingElementDatumR) NewStruct() *sapPurchaseOrderItemPricingElementDatumR {
	return &sapPurchaseOrderItemPricingElementDatumR{}
}

// sapPurchaseOrderItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapPurchaseOrderItemPricingElementDatumL struct{}

var (
	sapPurchaseOrderItemPricingElementDatumAllColumns            = []string{"PurchaseOrder", "PurchaseOrderItem", "PricingProcedureStep", "PricingProcedureCounter", "PricingDocument", "PricingDocumentItem", "ConditionType", "ConditionRateValue", "ConditionCurrency", "PriceDetnExchangeRate", "TransactionCurrency", "ConditionAmount", "ConditionQuantityUnit", "ConditionQuantity", "ConditionApplication", "PricingDateTime", "ConditionCalculationType", "ConditionBaseValue", "ConditionToBaseQtyNmrtr", "ConditionToBaseQtyDnmntr", "ConditionCategory", "PricingScaleType", "ConditionOrigin", "IsGroupCondition", "ConditionSequentialNumber", "ConditionInactiveReason", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisCurrency", "ConditionScaleBasisUnit", "ConditionIsManuallyChanged", "ConditionRecord"}
	sapPurchaseOrderItemPricingElementDatumColumnsWithoutDefault = []string{"PurchaseOrder", "PurchaseOrderItem", "PricingProcedureStep", "PricingProcedureCounter", "PricingDocument", "PricingDocumentItem", "ConditionType", "ConditionRateValue", "ConditionCurrency", "PriceDetnExchangeRate", "TransactionCurrency", "ConditionAmount", "ConditionQuantityUnit", "ConditionQuantity", "ConditionApplication", "PricingDateTime", "ConditionCalculationType", "ConditionBaseValue", "ConditionToBaseQtyNmrtr", "ConditionToBaseQtyDnmntr", "ConditionCategory", "PricingScaleType", "ConditionOrigin", "IsGroupCondition", "ConditionSequentialNumber", "ConditionInactiveReason", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisCurrency", "ConditionScaleBasisUnit", "ConditionIsManuallyChanged", "ConditionRecord"}
	sapPurchaseOrderItemPricingElementDatumColumnsWithDefault    = []string{}
	sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns     = []string{"PurchaseOrder", "PurchaseOrderItem", "PricingProcedureStep", "PricingProcedureCounter"}
	sapPurchaseOrderItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseOrderItemPricingElementDatumSlice is an alias for a slice of pointers to SapPurchaseOrderItemPricingElementDatum.
	// This should almost always be used instead of []SapPurchaseOrderItemPricingElementDatum.
	SapPurchaseOrderItemPricingElementDatumSlice []*SapPurchaseOrderItemPricingElementDatum
	// SapPurchaseOrderItemPricingElementDatumHook is the signature for custom SapPurchaseOrderItemPricingElementDatum hook methods
	SapPurchaseOrderItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseOrderItemPricingElementDatum) error

	sapPurchaseOrderItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseOrderItemPricingElementDatumType                 = reflect.TypeOf(&SapPurchaseOrderItemPricingElementDatum{})
	sapPurchaseOrderItemPricingElementDatumMapping              = queries.MakeStructMapping(sapPurchaseOrderItemPricingElementDatumType)
	sapPurchaseOrderItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns)
	sapPurchaseOrderItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseOrderItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseOrderItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseOrderItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseOrderItemPricingElementDatumAfterSelectHooks []SapPurchaseOrderItemPricingElementDatumHook

var sapPurchaseOrderItemPricingElementDatumBeforeInsertHooks []SapPurchaseOrderItemPricingElementDatumHook
var sapPurchaseOrderItemPricingElementDatumAfterInsertHooks []SapPurchaseOrderItemPricingElementDatumHook

var sapPurchaseOrderItemPricingElementDatumBeforeUpdateHooks []SapPurchaseOrderItemPricingElementDatumHook
var sapPurchaseOrderItemPricingElementDatumAfterUpdateHooks []SapPurchaseOrderItemPricingElementDatumHook

var sapPurchaseOrderItemPricingElementDatumBeforeDeleteHooks []SapPurchaseOrderItemPricingElementDatumHook
var sapPurchaseOrderItemPricingElementDatumAfterDeleteHooks []SapPurchaseOrderItemPricingElementDatumHook

var sapPurchaseOrderItemPricingElementDatumBeforeUpsertHooks []SapPurchaseOrderItemPricingElementDatumHook
var sapPurchaseOrderItemPricingElementDatumAfterUpsertHooks []SapPurchaseOrderItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseOrderItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseOrderItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapPurchaseOrderItemPricingElementDatumHook(hookPoint boil.HookPoint, sapPurchaseOrderItemPricingElementDatumHook SapPurchaseOrderItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseOrderItemPricingElementDatumAfterSelectHooks = append(sapPurchaseOrderItemPricingElementDatumAfterSelectHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseOrderItemPricingElementDatumBeforeInsertHooks = append(sapPurchaseOrderItemPricingElementDatumBeforeInsertHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseOrderItemPricingElementDatumAfterInsertHooks = append(sapPurchaseOrderItemPricingElementDatumAfterInsertHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseOrderItemPricingElementDatumBeforeUpdateHooks = append(sapPurchaseOrderItemPricingElementDatumBeforeUpdateHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseOrderItemPricingElementDatumAfterUpdateHooks = append(sapPurchaseOrderItemPricingElementDatumAfterUpdateHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseOrderItemPricingElementDatumBeforeDeleteHooks = append(sapPurchaseOrderItemPricingElementDatumBeforeDeleteHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseOrderItemPricingElementDatumAfterDeleteHooks = append(sapPurchaseOrderItemPricingElementDatumAfterDeleteHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseOrderItemPricingElementDatumBeforeUpsertHooks = append(sapPurchaseOrderItemPricingElementDatumBeforeUpsertHooks, sapPurchaseOrderItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseOrderItemPricingElementDatumAfterUpsertHooks = append(sapPurchaseOrderItemPricingElementDatumAfterUpsertHooks, sapPurchaseOrderItemPricingElementDatumHook)
	}
}

// One returns a single sapPurchaseOrderItemPricingElementDatum record from the query.
func (q sapPurchaseOrderItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseOrderItemPricingElementDatum, error) {
	o := &SapPurchaseOrderItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_order_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseOrderItemPricingElementDatum records from the query.
func (q sapPurchaseOrderItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseOrderItemPricingElementDatumSlice, error) {
	var o []*SapPurchaseOrderItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseOrderItemPricingElementDatum slice")
	}

	if len(sapPurchaseOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseOrderItemPricingElementDatum records in the query.
func (q sapPurchaseOrderItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_order_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseOrderItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_order_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// PurchaseOrderSapPurchaseOrderHeaderDataWithAddress pointed to by the foreign key.
func (o *SapPurchaseOrderItemPricingElementDatum) PurchaseOrderSapPurchaseOrderHeaderDataWithAddress(mods ...qm.QueryMod) sapPurchaseOrderHeaderDataWithAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseOrder` = ?", o.PurchaseOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseOrderHeaderDataWithAddresses(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_header_data_with_address`")

	return query
}

// LoadPurchaseOrderSapPurchaseOrderHeaderDataWithAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseOrderItemPricingElementDatumL) LoadPurchaseOrderSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderItemPricingElementDatum
	var object *SapPurchaseOrderItemPricingElementDatum

	if singular {
		object = maybeSapPurchaseOrderItemPricingElementDatum.(*SapPurchaseOrderItemPricingElementDatum)
	} else {
		slice = *maybeSapPurchaseOrderItemPricingElementDatum.(*[]*SapPurchaseOrderItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderItemPricingElementDatumR{}
		}
		args = append(args, object.PurchaseOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_header_data_with_address`),
		qm.WhereIn(`sap_purchase_order_header_data_with_address.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseOrderHeaderDataWithAddress")
	}

	var resultSlice []*SapPurchaseOrderHeaderDataWithAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseOrderHeaderDataWithAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_order_header_data_with_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_header_data_with_address")
	}

	if len(sapPurchaseOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		foreign.R.PurchaseOrderSapPurchaseOrderItemPricingElementData = append(foreign.R.PurchaseOrderSapPurchaseOrderItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseOrder == foreign.PurchaseOrder {
				local.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
				}
				foreign.R.PurchaseOrderSapPurchaseOrderItemPricingElementData = append(foreign.R.PurchaseOrderSapPurchaseOrderItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseOrderSapPurchaseOrderHeaderDataWithAddress of the sapPurchaseOrderItemPricingElementDatum to the related item.
// Sets o.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress to related.
// Adds o to related.R.PurchaseOrderSapPurchaseOrderItemPricingElementData.
func (o *SapPurchaseOrderItemPricingElementDatum) SetPurchaseOrderSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseOrderHeaderDataWithAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_order_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseOrder"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseOrder, o.PurchaseOrder, o.PurchaseOrderItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseOrder = related.PurchaseOrder
	if o.R == nil {
		o.R = &sapPurchaseOrderItemPricingElementDatumR{
			PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: related,
		}
	} else {
		o.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = related
	}

	if related.R == nil {
		related.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchaseOrderSapPurchaseOrderItemPricingElementData: SapPurchaseOrderItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.PurchaseOrderSapPurchaseOrderItemPricingElementData = append(related.R.PurchaseOrderSapPurchaseOrderItemPricingElementData, o)
	}

	return nil
}

// SapPurchaseOrderItemPricingElementData retrieves all the records using an executor.
func SapPurchaseOrderItemPricingElementData(mods ...qm.QueryMod) sapPurchaseOrderItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_order_item_pricing_element_data`"))
	return sapPurchaseOrderItemPricingElementDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseOrderItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseOrderItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, purchaseOrderItem string, pricingProcedureStep string, pricingProcedureCounter string, selectCols ...string) (*SapPurchaseOrderItemPricingElementDatum, error) {
	sapPurchaseOrderItemPricingElementDatumObj := &SapPurchaseOrderItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_order_item_pricing_element_data` where `PurchaseOrder`=? AND `PurchaseOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, purchaseOrder, purchaseOrderItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, sapPurchaseOrderItemPricingElementDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_order_item_pricing_element_data")
	}

	if err = sapPurchaseOrderItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseOrderItemPricingElementDatumObj, err
	}

	return sapPurchaseOrderItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseOrderItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseOrderItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemPricingElementDatumInsertCache[key]
	sapPurchaseOrderItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseOrderItemPricingElementDatumAllColumns,
			sapPurchaseOrderItemPricingElementDatumColumnsWithDefault,
			sapPurchaseOrderItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_order_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_order_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_order_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_order_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseOrder,
		o.PurchaseOrderItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemPricingElementDatumInsertCacheMut.Lock()
		sapPurchaseOrderItemPricingElementDatumInsertCache[key] = cache
		sapPurchaseOrderItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseOrderItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseOrderItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseOrderItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemPricingElementDatumUpdateCache[key]
	sapPurchaseOrderItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseOrderItemPricingElementDatumAllColumns,
			sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_order_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_order_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, append(wl, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_order_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_order_item_pricing_element_data")
	}

	if !cached {
		sapPurchaseOrderItemPricingElementDatumUpdateCacheMut.Lock()
		sapPurchaseOrderItemPricingElementDatumUpdateCache[key] = cache
		sapPurchaseOrderItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseOrderItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_order_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseOrderItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_order_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseOrderItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseOrderItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseOrderItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseOrderItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseOrderItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseOrderItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemPricingElementDatumUpsertCache[key]
	sapPurchaseOrderItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseOrderItemPricingElementDatumAllColumns,
			sapPurchaseOrderItemPricingElementDatumColumnsWithDefault,
			sapPurchaseOrderItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseOrderItemPricingElementDatumAllColumns,
			sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_order_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_order_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_order_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_order_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseOrderItemPricingElementDatumType, sapPurchaseOrderItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_order_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemPricingElementDatumUpsertCacheMut.Lock()
		sapPurchaseOrderItemPricingElementDatumUpsertCache[key] = cache
		sapPurchaseOrderItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseOrderItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseOrderItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseOrderItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseOrderItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_order_item_pricing_element_data` WHERE `PurchaseOrder`=? AND `PurchaseOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_order_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseOrderItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseOrderItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseOrderItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseOrderItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_order_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseOrderItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_pricing_element_data")
	}

	if len(sapPurchaseOrderItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseOrderItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseOrderItemPricingElementDatum(ctx, exec, o.PurchaseOrder, o.PurchaseOrderItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseOrderItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseOrderItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_order_item_pricing_element_data`.* FROM `sap_purchase_order_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseOrderItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseOrderItemPricingElementDatumExists checks if the SapPurchaseOrderItemPricingElementDatum row exists.
func SapPurchaseOrderItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, purchaseOrderItem string, pricingProcedureStep string, pricingProcedureCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_order_item_pricing_element_data` where `PurchaseOrder`=? AND `PurchaseOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseOrder, purchaseOrderItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseOrder, purchaseOrderItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_order_item_pricing_element_data exists")
	}

	return exists, nil
}
