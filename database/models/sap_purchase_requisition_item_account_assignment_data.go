// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseRequisitionItemAccountAssignmentDatum is an object representing the database table.
type SapPurchaseRequisitionItemAccountAssignmentDatum struct {
	PurchaseRequisition          string      `boil:"PurchaseRequisition" json:"PurchaseRequisition" toml:"PurchaseRequisition" yaml:"PurchaseRequisition"`
	PurchaseRequisitionItem      string      `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem"`
	PurchaseReqnAcctAssgmtNumber string      `boil:"PurchaseReqnAcctAssgmtNumber" json:"PurchaseReqnAcctAssgmtNumber" toml:"PurchaseReqnAcctAssgmtNumber" yaml:"PurchaseReqnAcctAssgmtNumber"`
	CostCenter                   null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	MasterFixedAsset             null.String `boil:"MasterFixedAsset" json:"MasterFixedAsset,omitempty" toml:"MasterFixedAsset" yaml:"MasterFixedAsset,omitempty"`
	FixedAsset                   null.String `boil:"FixedAsset" json:"FixedAsset,omitempty" toml:"FixedAsset" yaml:"FixedAsset,omitempty"`
	ProjectNetwork               null.String `boil:"ProjectNetwork" json:"ProjectNetwork,omitempty" toml:"ProjectNetwork" yaml:"ProjectNetwork,omitempty"`
	CostElement                  null.String `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	CostObject                   null.String `boil:"CostObject" json:"CostObject,omitempty" toml:"CostObject" yaml:"CostObject,omitempty"`
	GLAccount                    null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	BusinessArea                 null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	SalesOrder                   null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem               null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	SalesOrderScheduleLine       null.String `boil:"SalesOrderScheduleLine" json:"SalesOrderScheduleLine,omitempty" toml:"SalesOrderScheduleLine" yaml:"SalesOrderScheduleLine,omitempty"`
	OrderID                      null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	UnloadingPointName           null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	ControllingArea              null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	ProfitabilitySegment         null.String `boil:"ProfitabilitySegment" json:"ProfitabilitySegment,omitempty" toml:"ProfitabilitySegment" yaml:"ProfitabilitySegment,omitempty"`
	ProfitCenter                 null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	FunctionalArea               null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	GoodsRecipientName           null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	CostCtrActivityType          null.String `boil:"CostCtrActivityType" json:"CostCtrActivityType,omitempty" toml:"CostCtrActivityType" yaml:"CostCtrActivityType,omitempty"`
	WBSElement                   null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	IsDeleted                    null.String `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapPurchaseRequisitionItemAccountAssignmentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseRequisitionItemAccountAssignmentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseRequisitionItemAccountAssignmentDatumColumns = struct {
	PurchaseRequisition          string
	PurchaseRequisitionItem      string
	PurchaseReqnAcctAssgmtNumber string
	CostCenter                   string
	MasterFixedAsset             string
	FixedAsset                   string
	ProjectNetwork               string
	CostElement                  string
	CostObject                   string
	GLAccount                    string
	BusinessArea                 string
	SalesOrder                   string
	SalesOrderItem               string
	SalesOrderScheduleLine       string
	OrderID                      string
	UnloadingPointName           string
	ControllingArea              string
	ProfitabilitySegment         string
	ProfitCenter                 string
	FunctionalArea               string
	GoodsRecipientName           string
	CostCtrActivityType          string
	WBSElement                   string
	IsDeleted                    string
}{
	PurchaseRequisition:          "PurchaseRequisition",
	PurchaseRequisitionItem:      "PurchaseRequisitionItem",
	PurchaseReqnAcctAssgmtNumber: "PurchaseReqnAcctAssgmtNumber",
	CostCenter:                   "CostCenter",
	MasterFixedAsset:             "MasterFixedAsset",
	FixedAsset:                   "FixedAsset",
	ProjectNetwork:               "ProjectNetwork",
	CostElement:                  "CostElement",
	CostObject:                   "CostObject",
	GLAccount:                    "GLAccount",
	BusinessArea:                 "BusinessArea",
	SalesOrder:                   "SalesOrder",
	SalesOrderItem:               "SalesOrderItem",
	SalesOrderScheduleLine:       "SalesOrderScheduleLine",
	OrderID:                      "OrderID",
	UnloadingPointName:           "UnloadingPointName",
	ControllingArea:              "ControllingArea",
	ProfitabilitySegment:         "ProfitabilitySegment",
	ProfitCenter:                 "ProfitCenter",
	FunctionalArea:               "FunctionalArea",
	GoodsRecipientName:           "GoodsRecipientName",
	CostCtrActivityType:          "CostCtrActivityType",
	WBSElement:                   "WBSElement",
	IsDeleted:                    "IsDeleted",
}

var SapPurchaseRequisitionItemAccountAssignmentDatumTableColumns = struct {
	PurchaseRequisition          string
	PurchaseRequisitionItem      string
	PurchaseReqnAcctAssgmtNumber string
	CostCenter                   string
	MasterFixedAsset             string
	FixedAsset                   string
	ProjectNetwork               string
	CostElement                  string
	CostObject                   string
	GLAccount                    string
	BusinessArea                 string
	SalesOrder                   string
	SalesOrderItem               string
	SalesOrderScheduleLine       string
	OrderID                      string
	UnloadingPointName           string
	ControllingArea              string
	ProfitabilitySegment         string
	ProfitCenter                 string
	FunctionalArea               string
	GoodsRecipientName           string
	CostCtrActivityType          string
	WBSElement                   string
	IsDeleted                    string
}{
	PurchaseRequisition:          "sap_purchase_requisition_item_account_assignment_data.PurchaseRequisition",
	PurchaseRequisitionItem:      "sap_purchase_requisition_item_account_assignment_data.PurchaseRequisitionItem",
	PurchaseReqnAcctAssgmtNumber: "sap_purchase_requisition_item_account_assignment_data.PurchaseReqnAcctAssgmtNumber",
	CostCenter:                   "sap_purchase_requisition_item_account_assignment_data.CostCenter",
	MasterFixedAsset:             "sap_purchase_requisition_item_account_assignment_data.MasterFixedAsset",
	FixedAsset:                   "sap_purchase_requisition_item_account_assignment_data.FixedAsset",
	ProjectNetwork:               "sap_purchase_requisition_item_account_assignment_data.ProjectNetwork",
	CostElement:                  "sap_purchase_requisition_item_account_assignment_data.CostElement",
	CostObject:                   "sap_purchase_requisition_item_account_assignment_data.CostObject",
	GLAccount:                    "sap_purchase_requisition_item_account_assignment_data.GLAccount",
	BusinessArea:                 "sap_purchase_requisition_item_account_assignment_data.BusinessArea",
	SalesOrder:                   "sap_purchase_requisition_item_account_assignment_data.SalesOrder",
	SalesOrderItem:               "sap_purchase_requisition_item_account_assignment_data.SalesOrderItem",
	SalesOrderScheduleLine:       "sap_purchase_requisition_item_account_assignment_data.SalesOrderScheduleLine",
	OrderID:                      "sap_purchase_requisition_item_account_assignment_data.OrderID",
	UnloadingPointName:           "sap_purchase_requisition_item_account_assignment_data.UnloadingPointName",
	ControllingArea:              "sap_purchase_requisition_item_account_assignment_data.ControllingArea",
	ProfitabilitySegment:         "sap_purchase_requisition_item_account_assignment_data.ProfitabilitySegment",
	ProfitCenter:                 "sap_purchase_requisition_item_account_assignment_data.ProfitCenter",
	FunctionalArea:               "sap_purchase_requisition_item_account_assignment_data.FunctionalArea",
	GoodsRecipientName:           "sap_purchase_requisition_item_account_assignment_data.GoodsRecipientName",
	CostCtrActivityType:          "sap_purchase_requisition_item_account_assignment_data.CostCtrActivityType",
	WBSElement:                   "sap_purchase_requisition_item_account_assignment_data.WBSElement",
	IsDeleted:                    "sap_purchase_requisition_item_account_assignment_data.IsDeleted",
}

// Generated where

var SapPurchaseRequisitionItemAccountAssignmentDatumWhere = struct {
	PurchaseRequisition          whereHelperstring
	PurchaseRequisitionItem      whereHelperstring
	PurchaseReqnAcctAssgmtNumber whereHelperstring
	CostCenter                   whereHelpernull_String
	MasterFixedAsset             whereHelpernull_String
	FixedAsset                   whereHelpernull_String
	ProjectNetwork               whereHelpernull_String
	CostElement                  whereHelpernull_String
	CostObject                   whereHelpernull_String
	GLAccount                    whereHelpernull_String
	BusinessArea                 whereHelpernull_String
	SalesOrder                   whereHelpernull_String
	SalesOrderItem               whereHelpernull_String
	SalesOrderScheduleLine       whereHelpernull_String
	OrderID                      whereHelpernull_String
	UnloadingPointName           whereHelpernull_String
	ControllingArea              whereHelpernull_String
	ProfitabilitySegment         whereHelpernull_String
	ProfitCenter                 whereHelpernull_String
	FunctionalArea               whereHelpernull_String
	GoodsRecipientName           whereHelpernull_String
	CostCtrActivityType          whereHelpernull_String
	WBSElement                   whereHelpernull_String
	IsDeleted                    whereHelpernull_String
}{
	PurchaseRequisition:          whereHelperstring{field: "`sap_purchase_requisition_item_account_assignment_data`.`PurchaseRequisition`"},
	PurchaseRequisitionItem:      whereHelperstring{field: "`sap_purchase_requisition_item_account_assignment_data`.`PurchaseRequisitionItem`"},
	PurchaseReqnAcctAssgmtNumber: whereHelperstring{field: "`sap_purchase_requisition_item_account_assignment_data`.`PurchaseReqnAcctAssgmtNumber`"},
	CostCenter:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`CostCenter`"},
	MasterFixedAsset:             whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`MasterFixedAsset`"},
	FixedAsset:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`FixedAsset`"},
	ProjectNetwork:               whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`ProjectNetwork`"},
	CostElement:                  whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`CostElement`"},
	CostObject:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`CostObject`"},
	GLAccount:                    whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`GLAccount`"},
	BusinessArea:                 whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`BusinessArea`"},
	SalesOrder:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`SalesOrder`"},
	SalesOrderItem:               whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`SalesOrderItem`"},
	SalesOrderScheduleLine:       whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`SalesOrderScheduleLine`"},
	OrderID:                      whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`OrderID`"},
	UnloadingPointName:           whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`UnloadingPointName`"},
	ControllingArea:              whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`ControllingArea`"},
	ProfitabilitySegment:         whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`ProfitabilitySegment`"},
	ProfitCenter:                 whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`ProfitCenter`"},
	FunctionalArea:               whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`FunctionalArea`"},
	GoodsRecipientName:           whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`GoodsRecipientName`"},
	CostCtrActivityType:          whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`CostCtrActivityType`"},
	WBSElement:                   whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`WBSElement`"},
	IsDeleted:                    whereHelpernull_String{field: "`sap_purchase_requisition_item_account_assignment_data`.`IsDeleted`"},
}

// SapPurchaseRequisitionItemAccountAssignmentDatumRels is where relationship names are stored.
var SapPurchaseRequisitionItemAccountAssignmentDatumRels = struct {
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum string
}{
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: "PurchaseRequisitionSapPurchaseRequisitionHeaderDatum",
}

// sapPurchaseRequisitionItemAccountAssignmentDatumR is where relationships are stored.
type sapPurchaseRequisitionItemAccountAssignmentDatumR struct {
	PurchaseRequisitionSapPurchaseRequisitionHeaderDatum *SapPurchaseRequisitionHeaderDatum `boil:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" json:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" toml:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum" yaml:"PurchaseRequisitionSapPurchaseRequisitionHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseRequisitionItemAccountAssignmentDatumR) NewStruct() *sapPurchaseRequisitionItemAccountAssignmentDatumR {
	return &sapPurchaseRequisitionItemAccountAssignmentDatumR{}
}

// sapPurchaseRequisitionItemAccountAssignmentDatumL is where Load methods for each relationship are stored.
type sapPurchaseRequisitionItemAccountAssignmentDatumL struct{}

var (
	sapPurchaseRequisitionItemAccountAssignmentDatumAllColumns            = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "PurchaseReqnAcctAssgmtNumber", "CostCenter", "MasterFixedAsset", "FixedAsset", "ProjectNetwork", "CostElement", "CostObject", "GLAccount", "BusinessArea", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "OrderID", "UnloadingPointName", "ControllingArea", "ProfitabilitySegment", "ProfitCenter", "FunctionalArea", "GoodsRecipientName", "CostCtrActivityType", "WBSElement", "IsDeleted"}
	sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithoutDefault = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "PurchaseReqnAcctAssgmtNumber", "CostCenter", "MasterFixedAsset", "FixedAsset", "ProjectNetwork", "CostElement", "CostObject", "GLAccount", "BusinessArea", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "OrderID", "UnloadingPointName", "ControllingArea", "ProfitabilitySegment", "ProfitCenter", "FunctionalArea", "GoodsRecipientName", "CostCtrActivityType", "WBSElement", "IsDeleted"}
	sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithDefault    = []string{}
	sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns     = []string{"PurchaseRequisition", "PurchaseRequisitionItem", "PurchaseReqnAcctAssgmtNumber"}
	sapPurchaseRequisitionItemAccountAssignmentDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchaseRequisitionItemAccountAssignmentDatumSlice is an alias for a slice of pointers to SapPurchaseRequisitionItemAccountAssignmentDatum.
	// This should almost always be used instead of []SapPurchaseRequisitionItemAccountAssignmentDatum.
	SapPurchaseRequisitionItemAccountAssignmentDatumSlice []*SapPurchaseRequisitionItemAccountAssignmentDatum
	// SapPurchaseRequisitionItemAccountAssignmentDatumHook is the signature for custom SapPurchaseRequisitionItemAccountAssignmentDatum hook methods
	SapPurchaseRequisitionItemAccountAssignmentDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseRequisitionItemAccountAssignmentDatum) error

	sapPurchaseRequisitionItemAccountAssignmentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseRequisitionItemAccountAssignmentDatumType                 = reflect.TypeOf(&SapPurchaseRequisitionItemAccountAssignmentDatum{})
	sapPurchaseRequisitionItemAccountAssignmentDatumMapping              = queries.MakeStructMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType)
	sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns)
	sapPurchaseRequisitionItemAccountAssignmentDatumInsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemAccountAssignmentDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook

var sapPurchaseRequisitionItemAccountAssignmentDatumBeforeInsertHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook
var sapPurchaseRequisitionItemAccountAssignmentDatumAfterInsertHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook

var sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpdateHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook
var sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpdateHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook

var sapPurchaseRequisitionItemAccountAssignmentDatumBeforeDeleteHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook
var sapPurchaseRequisitionItemAccountAssignmentDatumAfterDeleteHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook

var sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpsertHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook
var sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpsertHooks []SapPurchaseRequisitionItemAccountAssignmentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseRequisitionItemAccountAssignmentDatumHook registers your hook function for all future operations.
func AddSapPurchaseRequisitionItemAccountAssignmentDatumHook(hookPoint boil.HookPoint, sapPurchaseRequisitionItemAccountAssignmentDatumHook SapPurchaseRequisitionItemAccountAssignmentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.BeforeInsertHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumBeforeInsertHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumBeforeInsertHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumAfterInsertHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumAfterInsertHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpdateHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpdateHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpdateHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpdateHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumBeforeDeleteHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumBeforeDeleteHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumAfterDeleteHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumAfterDeleteHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpsertHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumBeforeUpsertHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpsertHooks = append(sapPurchaseRequisitionItemAccountAssignmentDatumAfterUpsertHooks, sapPurchaseRequisitionItemAccountAssignmentDatumHook)
	}
}

// One returns a single sapPurchaseRequisitionItemAccountAssignmentDatum record from the query.
func (q sapPurchaseRequisitionItemAccountAssignmentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseRequisitionItemAccountAssignmentDatum, error) {
	o := &SapPurchaseRequisitionItemAccountAssignmentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_requisition_item_account_assignment_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseRequisitionItemAccountAssignmentDatum records from the query.
func (q sapPurchaseRequisitionItemAccountAssignmentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseRequisitionItemAccountAssignmentDatumSlice, error) {
	var o []*SapPurchaseRequisitionItemAccountAssignmentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseRequisitionItemAccountAssignmentDatum slice")
	}

	if len(sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseRequisitionItemAccountAssignmentDatum records in the query.
func (q sapPurchaseRequisitionItemAccountAssignmentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_requisition_item_account_assignment_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseRequisitionItemAccountAssignmentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_requisition_item_account_assignment_data exists")
	}

	return count > 0, nil
}

// PurchaseRequisitionSapPurchaseRequisitionHeaderDatum pointed to by the foreign key.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) PurchaseRequisitionSapPurchaseRequisitionHeaderDatum(mods ...qm.QueryMod) sapPurchaseRequisitionHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseRequisition` = ?", o.PurchaseRequisition),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseRequisitionHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_requisition_header_data`")

	return query
}

// LoadPurchaseRequisitionSapPurchaseRequisitionHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseRequisitionItemAccountAssignmentDatumL) LoadPurchaseRequisitionSapPurchaseRequisitionHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseRequisitionItemAccountAssignmentDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseRequisitionItemAccountAssignmentDatum
	var object *SapPurchaseRequisitionItemAccountAssignmentDatum

	if singular {
		object = maybeSapPurchaseRequisitionItemAccountAssignmentDatum.(*SapPurchaseRequisitionItemAccountAssignmentDatum)
	} else {
		slice = *maybeSapPurchaseRequisitionItemAccountAssignmentDatum.(*[]*SapPurchaseRequisitionItemAccountAssignmentDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseRequisitionItemAccountAssignmentDatumR{}
		}
		args = append(args, object.PurchaseRequisition)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseRequisitionItemAccountAssignmentDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseRequisition {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseRequisition)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_requisition_header_data`),
		qm.WhereIn(`sap_purchase_requisition_header_data.PurchaseRequisition in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseRequisitionHeaderDatum")
	}

	var resultSlice []*SapPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseRequisitionHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_requisition_header_data")
	}

	if len(sapPurchaseRequisitionItemAccountAssignmentDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseRequisitionHeaderDatumR{}
		}
		foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData = append(foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseRequisition == foreign.PurchaseRequisition {
				local.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseRequisitionHeaderDatumR{}
				}
				foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData = append(foreign.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseRequisitionSapPurchaseRequisitionHeaderDatum of the sapPurchaseRequisitionItemAccountAssignmentDatum to the related item.
// Sets o.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum to related.
// Adds o to related.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) SetPurchaseRequisitionSapPurchaseRequisitionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseRequisitionHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_requisition_item_account_assignment_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseRequisition"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseRequisition, o.PurchaseRequisition, o.PurchaseRequisitionItem, o.PurchaseReqnAcctAssgmtNumber}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseRequisition = related.PurchaseRequisition
	if o.R == nil {
		o.R = &sapPurchaseRequisitionItemAccountAssignmentDatumR{
			PurchaseRequisitionSapPurchaseRequisitionHeaderDatum: related,
		}
	} else {
		o.R.PurchaseRequisitionSapPurchaseRequisitionHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchaseRequisitionHeaderDatumR{
			PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData: SapPurchaseRequisitionItemAccountAssignmentDatumSlice{o},
		}
	} else {
		related.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData = append(related.R.PurchaseRequisitionSapPurchaseRequisitionItemAccountAssignmentData, o)
	}

	return nil
}

// SapPurchaseRequisitionItemAccountAssignmentData retrieves all the records using an executor.
func SapPurchaseRequisitionItemAccountAssignmentData(mods ...qm.QueryMod) sapPurchaseRequisitionItemAccountAssignmentDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_requisition_item_account_assignment_data`"))
	return sapPurchaseRequisitionItemAccountAssignmentDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseRequisitionItemAccountAssignmentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseRequisitionItemAccountAssignmentDatum(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, purchaseRequisitionItem string, purchaseReqnAcctAssgmtNumber string, selectCols ...string) (*SapPurchaseRequisitionItemAccountAssignmentDatum, error) {
	sapPurchaseRequisitionItemAccountAssignmentDatumObj := &SapPurchaseRequisitionItemAccountAssignmentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_requisition_item_account_assignment_data` where `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=? AND `PurchaseReqnAcctAssgmtNumber`=?", sel,
	)

	q := queries.Raw(query, purchaseRequisition, purchaseRequisitionItem, purchaseReqnAcctAssgmtNumber)

	err := q.Bind(ctx, exec, sapPurchaseRequisitionItemAccountAssignmentDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_requisition_item_account_assignment_data")
	}

	if err = sapPurchaseRequisitionItemAccountAssignmentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseRequisitionItemAccountAssignmentDatumObj, err
	}

	return sapPurchaseRequisitionItemAccountAssignmentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_item_account_assignment_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseRequisitionItemAccountAssignmentDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemAccountAssignmentDatumInsertCache[key]
	sapPurchaseRequisitionItemAccountAssignmentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseRequisitionItemAccountAssignmentDatumAllColumns,
			sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithDefault,
			sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_requisition_item_account_assignment_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_requisition_item_account_assignment_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_requisition_item_account_assignment_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_requisition_item_account_assignment_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseRequisition,
		o.PurchaseRequisitionItem,
		o.PurchaseReqnAcctAssgmtNumber,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_item_account_assignment_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionItemAccountAssignmentDatumInsertCacheMut.Lock()
		sapPurchaseRequisitionItemAccountAssignmentDatumInsertCache[key] = cache
		sapPurchaseRequisitionItemAccountAssignmentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseRequisitionItemAccountAssignmentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCache[key]
	sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseRequisitionItemAccountAssignmentDatumAllColumns,
			sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_requisition_item_account_assignment_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_requisition_item_account_assignment_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, append(wl, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_requisition_item_account_assignment_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_requisition_item_account_assignment_data")
	}

	if !cached {
		sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCacheMut.Lock()
		sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCache[key] = cache
		sapPurchaseRequisitionItemAccountAssignmentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseRequisitionItemAccountAssignmentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_requisition_item_account_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_requisition_item_account_assignment_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseRequisitionItemAccountAssignmentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_requisition_item_account_assignment_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseRequisitionItemAccountAssignmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseRequisitionItemAccountAssignmentDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseRequisitionItemAccountAssignmentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_requisition_item_account_assignment_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseRequisitionItemAccountAssignmentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCache[key]
	sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseRequisitionItemAccountAssignmentDatumAllColumns,
			sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithDefault,
			sapPurchaseRequisitionItemAccountAssignmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchaseRequisitionItemAccountAssignmentDatumAllColumns,
			sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_requisition_item_account_assignment_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_requisition_item_account_assignment_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_requisition_item_account_assignment_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_requisition_item_account_assignment_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseRequisitionItemAccountAssignmentDatumType, sapPurchaseRequisitionItemAccountAssignmentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_requisition_item_account_assignment_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_requisition_item_account_assignment_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCacheMut.Lock()
		sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCache[key] = cache
		sapPurchaseRequisitionItemAccountAssignmentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseRequisitionItemAccountAssignmentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseRequisitionItemAccountAssignmentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_requisition_item_account_assignment_data` WHERE `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=? AND `PurchaseReqnAcctAssgmtNumber`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_requisition_item_account_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_requisition_item_account_assignment_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseRequisitionItemAccountAssignmentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseRequisitionItemAccountAssignmentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_requisition_item_account_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_item_account_assignment_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseRequisitionItemAccountAssignmentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseRequisitionItemAccountAssignmentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_requisition_item_account_assignment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseRequisitionItemAccountAssignmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_requisition_item_account_assignment_data")
	}

	if len(sapPurchaseRequisitionItemAccountAssignmentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseRequisitionItemAccountAssignmentDatum(ctx, exec, o.PurchaseRequisition, o.PurchaseRequisitionItem, o.PurchaseReqnAcctAssgmtNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseRequisitionItemAccountAssignmentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseRequisitionItemAccountAssignmentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_requisition_item_account_assignment_data`.* FROM `sap_purchase_requisition_item_account_assignment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseRequisitionItemAccountAssignmentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseRequisitionItemAccountAssignmentDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseRequisitionItemAccountAssignmentDatumExists checks if the SapPurchaseRequisitionItemAccountAssignmentDatum row exists.
func SapPurchaseRequisitionItemAccountAssignmentDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition string, purchaseRequisitionItem string, purchaseReqnAcctAssgmtNumber string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_requisition_item_account_assignment_data` where `PurchaseRequisition`=? AND `PurchaseRequisitionItem`=? AND `PurchaseReqnAcctAssgmtNumber`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseRequisition, purchaseRequisitionItem, purchaseReqnAcctAssgmtNumber)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseRequisition, purchaseRequisitionItem, purchaseReqnAcctAssgmtNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_requisition_item_account_assignment_data exists")
	}

	return exists, nil
}
