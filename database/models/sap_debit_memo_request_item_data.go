// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapDebitMemoRequestItemDatum is an object representing the database table.
type SapDebitMemoRequestItemDatum struct {
	DebitMemoRequest             string      `boil:"DebitMemoRequest" json:"DebitMemoRequest" toml:"DebitMemoRequest" yaml:"DebitMemoRequest"`
	DebitMemoRequestItem         string      `boil:"DebitMemoRequestItem" json:"DebitMemoRequestItem" toml:"DebitMemoRequestItem" yaml:"DebitMemoRequestItem"`
	HigherLevelItem              null.String `boil:"HigherLevelItem" json:"HigherLevelItem,omitempty" toml:"HigherLevelItem" yaml:"HigherLevelItem,omitempty"`
	DebitMemoRequestItemCategory null.String `boil:"DebitMemoRequestItemCategory" json:"DebitMemoRequestItemCategory,omitempty" toml:"DebitMemoRequestItemCategory" yaml:"DebitMemoRequestItemCategory,omitempty"`
	DebitMemoRequestItemText     null.String `boil:"DebitMemoRequestItemText" json:"DebitMemoRequestItemText,omitempty" toml:"DebitMemoRequestItemText" yaml:"DebitMemoRequestItemText,omitempty"`
	PurchaseOrderByCustomer      null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	Material                     null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer           null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	PricingDate                  null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	RequestedQuantity            null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	RequestedQuantityUnit        null.String `boil:"RequestedQuantityUnit" json:"RequestedQuantityUnit,omitempty" toml:"RequestedQuantityUnit" yaml:"RequestedQuantityUnit,omitempty"`
	ItemGrossWeight              null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit               null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemVolume                   null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit               null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	TransactionCurrency          null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	NetAmount                    null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	MaterialGroup                null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	MaterialPricingGroup         null.String `boil:"MaterialPricingGroup" json:"MaterialPricingGroup,omitempty" toml:"MaterialPricingGroup" yaml:"MaterialPricingGroup,omitempty"`
	ProductTaxClassification1    null.String `boil:"ProductTaxClassification1" json:"ProductTaxClassification1,omitempty" toml:"ProductTaxClassification1" yaml:"ProductTaxClassification1,omitempty"`
	Batch                        null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	Plant                        null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	IncotermsClassification      null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms         null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	ItemBillingBlockReason       null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	SalesDocumentRjcnReason      null.String `boil:"SalesDocumentRjcnReason" json:"SalesDocumentRjcnReason,omitempty" toml:"SalesDocumentRjcnReason" yaml:"SalesDocumentRjcnReason,omitempty"`
	WBSElement                   null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ProfitCenter                 null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	ReferenceSDDocument          null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem      null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	SDProcessStatus              null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`
	OrderRelatedBillingStatus    null.String `boil:"OrderRelatedBillingStatus" json:"OrderRelatedBillingStatus,omitempty" toml:"OrderRelatedBillingStatus" yaml:"OrderRelatedBillingStatus,omitempty"`

	R *sapDebitMemoRequestItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapDebitMemoRequestItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapDebitMemoRequestItemDatumColumns = struct {
	DebitMemoRequest             string
	DebitMemoRequestItem         string
	HigherLevelItem              string
	DebitMemoRequestItemCategory string
	DebitMemoRequestItemText     string
	PurchaseOrderByCustomer      string
	Material                     string
	MaterialByCustomer           string
	PricingDate                  string
	RequestedQuantity            string
	RequestedQuantityUnit        string
	ItemGrossWeight              string
	ItemNetWeight                string
	ItemWeightUnit               string
	ItemVolume                   string
	ItemVolumeUnit               string
	TransactionCurrency          string
	NetAmount                    string
	MaterialGroup                string
	MaterialPricingGroup         string
	ProductTaxClassification1    string
	Batch                        string
	Plant                        string
	IncotermsClassification      string
	CustomerPaymentTerms         string
	ItemBillingBlockReason       string
	SalesDocumentRjcnReason      string
	WBSElement                   string
	ProfitCenter                 string
	ReferenceSDDocument          string
	ReferenceSDDocumentItem      string
	SDProcessStatus              string
	OrderRelatedBillingStatus    string
}{
	DebitMemoRequest:             "DebitMemoRequest",
	DebitMemoRequestItem:         "DebitMemoRequestItem",
	HigherLevelItem:              "HigherLevelItem",
	DebitMemoRequestItemCategory: "DebitMemoRequestItemCategory",
	DebitMemoRequestItemText:     "DebitMemoRequestItemText",
	PurchaseOrderByCustomer:      "PurchaseOrderByCustomer",
	Material:                     "Material",
	MaterialByCustomer:           "MaterialByCustomer",
	PricingDate:                  "PricingDate",
	RequestedQuantity:            "RequestedQuantity",
	RequestedQuantityUnit:        "RequestedQuantityUnit",
	ItemGrossWeight:              "ItemGrossWeight",
	ItemNetWeight:                "ItemNetWeight",
	ItemWeightUnit:               "ItemWeightUnit",
	ItemVolume:                   "ItemVolume",
	ItemVolumeUnit:               "ItemVolumeUnit",
	TransactionCurrency:          "TransactionCurrency",
	NetAmount:                    "NetAmount",
	MaterialGroup:                "MaterialGroup",
	MaterialPricingGroup:         "MaterialPricingGroup",
	ProductTaxClassification1:    "ProductTaxClassification1",
	Batch:                        "Batch",
	Plant:                        "Plant",
	IncotermsClassification:      "IncotermsClassification",
	CustomerPaymentTerms:         "CustomerPaymentTerms",
	ItemBillingBlockReason:       "ItemBillingBlockReason",
	SalesDocumentRjcnReason:      "SalesDocumentRjcnReason",
	WBSElement:                   "WBSElement",
	ProfitCenter:                 "ProfitCenter",
	ReferenceSDDocument:          "ReferenceSDDocument",
	ReferenceSDDocumentItem:      "ReferenceSDDocumentItem",
	SDProcessStatus:              "SDProcessStatus",
	OrderRelatedBillingStatus:    "OrderRelatedBillingStatus",
}

var SapDebitMemoRequestItemDatumTableColumns = struct {
	DebitMemoRequest             string
	DebitMemoRequestItem         string
	HigherLevelItem              string
	DebitMemoRequestItemCategory string
	DebitMemoRequestItemText     string
	PurchaseOrderByCustomer      string
	Material                     string
	MaterialByCustomer           string
	PricingDate                  string
	RequestedQuantity            string
	RequestedQuantityUnit        string
	ItemGrossWeight              string
	ItemNetWeight                string
	ItemWeightUnit               string
	ItemVolume                   string
	ItemVolumeUnit               string
	TransactionCurrency          string
	NetAmount                    string
	MaterialGroup                string
	MaterialPricingGroup         string
	ProductTaxClassification1    string
	Batch                        string
	Plant                        string
	IncotermsClassification      string
	CustomerPaymentTerms         string
	ItemBillingBlockReason       string
	SalesDocumentRjcnReason      string
	WBSElement                   string
	ProfitCenter                 string
	ReferenceSDDocument          string
	ReferenceSDDocumentItem      string
	SDProcessStatus              string
	OrderRelatedBillingStatus    string
}{
	DebitMemoRequest:             "sap_debit_memo_request_item_data.DebitMemoRequest",
	DebitMemoRequestItem:         "sap_debit_memo_request_item_data.DebitMemoRequestItem",
	HigherLevelItem:              "sap_debit_memo_request_item_data.HigherLevelItem",
	DebitMemoRequestItemCategory: "sap_debit_memo_request_item_data.DebitMemoRequestItemCategory",
	DebitMemoRequestItemText:     "sap_debit_memo_request_item_data.DebitMemoRequestItemText",
	PurchaseOrderByCustomer:      "sap_debit_memo_request_item_data.PurchaseOrderByCustomer",
	Material:                     "sap_debit_memo_request_item_data.Material",
	MaterialByCustomer:           "sap_debit_memo_request_item_data.MaterialByCustomer",
	PricingDate:                  "sap_debit_memo_request_item_data.PricingDate",
	RequestedQuantity:            "sap_debit_memo_request_item_data.RequestedQuantity",
	RequestedQuantityUnit:        "sap_debit_memo_request_item_data.RequestedQuantityUnit",
	ItemGrossWeight:              "sap_debit_memo_request_item_data.ItemGrossWeight",
	ItemNetWeight:                "sap_debit_memo_request_item_data.ItemNetWeight",
	ItemWeightUnit:               "sap_debit_memo_request_item_data.ItemWeightUnit",
	ItemVolume:                   "sap_debit_memo_request_item_data.ItemVolume",
	ItemVolumeUnit:               "sap_debit_memo_request_item_data.ItemVolumeUnit",
	TransactionCurrency:          "sap_debit_memo_request_item_data.TransactionCurrency",
	NetAmount:                    "sap_debit_memo_request_item_data.NetAmount",
	MaterialGroup:                "sap_debit_memo_request_item_data.MaterialGroup",
	MaterialPricingGroup:         "sap_debit_memo_request_item_data.MaterialPricingGroup",
	ProductTaxClassification1:    "sap_debit_memo_request_item_data.ProductTaxClassification1",
	Batch:                        "sap_debit_memo_request_item_data.Batch",
	Plant:                        "sap_debit_memo_request_item_data.Plant",
	IncotermsClassification:      "sap_debit_memo_request_item_data.IncotermsClassification",
	CustomerPaymentTerms:         "sap_debit_memo_request_item_data.CustomerPaymentTerms",
	ItemBillingBlockReason:       "sap_debit_memo_request_item_data.ItemBillingBlockReason",
	SalesDocumentRjcnReason:      "sap_debit_memo_request_item_data.SalesDocumentRjcnReason",
	WBSElement:                   "sap_debit_memo_request_item_data.WBSElement",
	ProfitCenter:                 "sap_debit_memo_request_item_data.ProfitCenter",
	ReferenceSDDocument:          "sap_debit_memo_request_item_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:      "sap_debit_memo_request_item_data.ReferenceSDDocumentItem",
	SDProcessStatus:              "sap_debit_memo_request_item_data.SDProcessStatus",
	OrderRelatedBillingStatus:    "sap_debit_memo_request_item_data.OrderRelatedBillingStatus",
}

// Generated where

var SapDebitMemoRequestItemDatumWhere = struct {
	DebitMemoRequest             whereHelperstring
	DebitMemoRequestItem         whereHelperstring
	HigherLevelItem              whereHelpernull_String
	DebitMemoRequestItemCategory whereHelpernull_String
	DebitMemoRequestItemText     whereHelpernull_String
	PurchaseOrderByCustomer      whereHelpernull_String
	Material                     whereHelpernull_String
	MaterialByCustomer           whereHelpernull_String
	PricingDate                  whereHelpernull_String
	RequestedQuantity            whereHelpernull_String
	RequestedQuantityUnit        whereHelpernull_String
	ItemGrossWeight              whereHelpernull_String
	ItemNetWeight                whereHelpernull_String
	ItemWeightUnit               whereHelpernull_String
	ItemVolume                   whereHelpernull_String
	ItemVolumeUnit               whereHelpernull_String
	TransactionCurrency          whereHelpernull_String
	NetAmount                    whereHelpernull_String
	MaterialGroup                whereHelpernull_String
	MaterialPricingGroup         whereHelpernull_String
	ProductTaxClassification1    whereHelpernull_String
	Batch                        whereHelpernull_String
	Plant                        whereHelpernull_String
	IncotermsClassification      whereHelpernull_String
	CustomerPaymentTerms         whereHelpernull_String
	ItemBillingBlockReason       whereHelpernull_String
	SalesDocumentRjcnReason      whereHelpernull_String
	WBSElement                   whereHelpernull_String
	ProfitCenter                 whereHelpernull_String
	ReferenceSDDocument          whereHelpernull_String
	ReferenceSDDocumentItem      whereHelpernull_String
	SDProcessStatus              whereHelpernull_String
	OrderRelatedBillingStatus    whereHelpernull_String
}{
	DebitMemoRequest:             whereHelperstring{field: "`sap_debit_memo_request_item_data`.`DebitMemoRequest`"},
	DebitMemoRequestItem:         whereHelperstring{field: "`sap_debit_memo_request_item_data`.`DebitMemoRequestItem`"},
	HigherLevelItem:              whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`HigherLevelItem`"},
	DebitMemoRequestItemCategory: whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`DebitMemoRequestItemCategory`"},
	DebitMemoRequestItemText:     whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`DebitMemoRequestItemText`"},
	PurchaseOrderByCustomer:      whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`PurchaseOrderByCustomer`"},
	Material:                     whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`Material`"},
	MaterialByCustomer:           whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`MaterialByCustomer`"},
	PricingDate:                  whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`PricingDate`"},
	RequestedQuantity:            whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`RequestedQuantity`"},
	RequestedQuantityUnit:        whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`RequestedQuantityUnit`"},
	ItemGrossWeight:              whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:               whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ItemWeightUnit`"},
	ItemVolume:                   whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ItemVolume`"},
	ItemVolumeUnit:               whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ItemVolumeUnit`"},
	TransactionCurrency:          whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`TransactionCurrency`"},
	NetAmount:                    whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`NetAmount`"},
	MaterialGroup:                whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`MaterialGroup`"},
	MaterialPricingGroup:         whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`MaterialPricingGroup`"},
	ProductTaxClassification1:    whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ProductTaxClassification1`"},
	Batch:                        whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`Batch`"},
	Plant:                        whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`Plant`"},
	IncotermsClassification:      whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:         whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`CustomerPaymentTerms`"},
	ItemBillingBlockReason:       whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ItemBillingBlockReason`"},
	SalesDocumentRjcnReason:      whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`SalesDocumentRjcnReason`"},
	WBSElement:                   whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`WBSElement`"},
	ProfitCenter:                 whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ProfitCenter`"},
	ReferenceSDDocument:          whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:      whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`ReferenceSDDocumentItem`"},
	SDProcessStatus:              whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`SDProcessStatus`"},
	OrderRelatedBillingStatus:    whereHelpernull_String{field: "`sap_debit_memo_request_item_data`.`OrderRelatedBillingStatus`"},
}

// SapDebitMemoRequestItemDatumRels is where relationship names are stored.
var SapDebitMemoRequestItemDatumRels = struct {
	DebitMemoRequestSapDebitMemoRequestHeaderDatum string
}{
	DebitMemoRequestSapDebitMemoRequestHeaderDatum: "DebitMemoRequestSapDebitMemoRequestHeaderDatum",
}

// sapDebitMemoRequestItemDatumR is where relationships are stored.
type sapDebitMemoRequestItemDatumR struct {
	DebitMemoRequestSapDebitMemoRequestHeaderDatum *SapDebitMemoRequestHeaderDatum `boil:"DebitMemoRequestSapDebitMemoRequestHeaderDatum" json:"DebitMemoRequestSapDebitMemoRequestHeaderDatum" toml:"DebitMemoRequestSapDebitMemoRequestHeaderDatum" yaml:"DebitMemoRequestSapDebitMemoRequestHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapDebitMemoRequestItemDatumR) NewStruct() *sapDebitMemoRequestItemDatumR {
	return &sapDebitMemoRequestItemDatumR{}
}

func (r *sapDebitMemoRequestItemDatumR) GetDebitMemoRequestSapDebitMemoRequestHeaderDatum() *SapDebitMemoRequestHeaderDatum {
	if r == nil {
		return nil
	}
	return r.DebitMemoRequestSapDebitMemoRequestHeaderDatum
}

// sapDebitMemoRequestItemDatumL is where Load methods for each relationship are stored.
type sapDebitMemoRequestItemDatumL struct{}

var (
	sapDebitMemoRequestItemDatumAllColumns            = []string{"DebitMemoRequest", "DebitMemoRequestItem", "HigherLevelItem", "DebitMemoRequestItemCategory", "DebitMemoRequestItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "ProductTaxClassification1", "Batch", "Plant", "IncotermsClassification", "CustomerPaymentTerms", "ItemBillingBlockReason", "SalesDocumentRjcnReason", "WBSElement", "ProfitCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "OrderRelatedBillingStatus"}
	sapDebitMemoRequestItemDatumColumnsWithoutDefault = []string{"DebitMemoRequest", "DebitMemoRequestItem", "HigherLevelItem", "DebitMemoRequestItemCategory", "DebitMemoRequestItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "ProductTaxClassification1", "Batch", "Plant", "IncotermsClassification", "CustomerPaymentTerms", "ItemBillingBlockReason", "SalesDocumentRjcnReason", "WBSElement", "ProfitCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "OrderRelatedBillingStatus"}
	sapDebitMemoRequestItemDatumColumnsWithDefault    = []string{}
	sapDebitMemoRequestItemDatumPrimaryKeyColumns     = []string{"DebitMemoRequest", "DebitMemoRequestItem"}
	sapDebitMemoRequestItemDatumGeneratedColumns      = []string{}
)

type (
	// SapDebitMemoRequestItemDatumSlice is an alias for a slice of pointers to SapDebitMemoRequestItemDatum.
	// This should almost always be used instead of []SapDebitMemoRequestItemDatum.
	SapDebitMemoRequestItemDatumSlice []*SapDebitMemoRequestItemDatum
	// SapDebitMemoRequestItemDatumHook is the signature for custom SapDebitMemoRequestItemDatum hook methods
	SapDebitMemoRequestItemDatumHook func(context.Context, boil.ContextExecutor, *SapDebitMemoRequestItemDatum) error

	sapDebitMemoRequestItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapDebitMemoRequestItemDatumType                 = reflect.TypeOf(&SapDebitMemoRequestItemDatum{})
	sapDebitMemoRequestItemDatumMapping              = queries.MakeStructMapping(sapDebitMemoRequestItemDatumType)
	sapDebitMemoRequestItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, sapDebitMemoRequestItemDatumPrimaryKeyColumns)
	sapDebitMemoRequestItemDatumInsertCacheMut       sync.RWMutex
	sapDebitMemoRequestItemDatumInsertCache          = make(map[string]insertCache)
	sapDebitMemoRequestItemDatumUpdateCacheMut       sync.RWMutex
	sapDebitMemoRequestItemDatumUpdateCache          = make(map[string]updateCache)
	sapDebitMemoRequestItemDatumUpsertCacheMut       sync.RWMutex
	sapDebitMemoRequestItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapDebitMemoRequestItemDatumAfterSelectHooks []SapDebitMemoRequestItemDatumHook

var sapDebitMemoRequestItemDatumBeforeInsertHooks []SapDebitMemoRequestItemDatumHook
var sapDebitMemoRequestItemDatumAfterInsertHooks []SapDebitMemoRequestItemDatumHook

var sapDebitMemoRequestItemDatumBeforeUpdateHooks []SapDebitMemoRequestItemDatumHook
var sapDebitMemoRequestItemDatumAfterUpdateHooks []SapDebitMemoRequestItemDatumHook

var sapDebitMemoRequestItemDatumBeforeDeleteHooks []SapDebitMemoRequestItemDatumHook
var sapDebitMemoRequestItemDatumAfterDeleteHooks []SapDebitMemoRequestItemDatumHook

var sapDebitMemoRequestItemDatumBeforeUpsertHooks []SapDebitMemoRequestItemDatumHook
var sapDebitMemoRequestItemDatumAfterUpsertHooks []SapDebitMemoRequestItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapDebitMemoRequestItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapDebitMemoRequestItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapDebitMemoRequestItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapDebitMemoRequestItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapDebitMemoRequestItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapDebitMemoRequestItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapDebitMemoRequestItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapDebitMemoRequestItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapDebitMemoRequestItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapDebitMemoRequestItemDatumHook registers your hook function for all future operations.
func AddSapDebitMemoRequestItemDatumHook(hookPoint boil.HookPoint, sapDebitMemoRequestItemDatumHook SapDebitMemoRequestItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapDebitMemoRequestItemDatumAfterSelectHooks = append(sapDebitMemoRequestItemDatumAfterSelectHooks, sapDebitMemoRequestItemDatumHook)
	case boil.BeforeInsertHook:
		sapDebitMemoRequestItemDatumBeforeInsertHooks = append(sapDebitMemoRequestItemDatumBeforeInsertHooks, sapDebitMemoRequestItemDatumHook)
	case boil.AfterInsertHook:
		sapDebitMemoRequestItemDatumAfterInsertHooks = append(sapDebitMemoRequestItemDatumAfterInsertHooks, sapDebitMemoRequestItemDatumHook)
	case boil.BeforeUpdateHook:
		sapDebitMemoRequestItemDatumBeforeUpdateHooks = append(sapDebitMemoRequestItemDatumBeforeUpdateHooks, sapDebitMemoRequestItemDatumHook)
	case boil.AfterUpdateHook:
		sapDebitMemoRequestItemDatumAfterUpdateHooks = append(sapDebitMemoRequestItemDatumAfterUpdateHooks, sapDebitMemoRequestItemDatumHook)
	case boil.BeforeDeleteHook:
		sapDebitMemoRequestItemDatumBeforeDeleteHooks = append(sapDebitMemoRequestItemDatumBeforeDeleteHooks, sapDebitMemoRequestItemDatumHook)
	case boil.AfterDeleteHook:
		sapDebitMemoRequestItemDatumAfterDeleteHooks = append(sapDebitMemoRequestItemDatumAfterDeleteHooks, sapDebitMemoRequestItemDatumHook)
	case boil.BeforeUpsertHook:
		sapDebitMemoRequestItemDatumBeforeUpsertHooks = append(sapDebitMemoRequestItemDatumBeforeUpsertHooks, sapDebitMemoRequestItemDatumHook)
	case boil.AfterUpsertHook:
		sapDebitMemoRequestItemDatumAfterUpsertHooks = append(sapDebitMemoRequestItemDatumAfterUpsertHooks, sapDebitMemoRequestItemDatumHook)
	}
}

// One returns a single sapDebitMemoRequestItemDatum record from the query.
func (q sapDebitMemoRequestItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapDebitMemoRequestItemDatum, error) {
	o := &SapDebitMemoRequestItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_debit_memo_request_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapDebitMemoRequestItemDatum records from the query.
func (q sapDebitMemoRequestItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapDebitMemoRequestItemDatumSlice, error) {
	var o []*SapDebitMemoRequestItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapDebitMemoRequestItemDatum slice")
	}

	if len(sapDebitMemoRequestItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapDebitMemoRequestItemDatum records in the query.
func (q sapDebitMemoRequestItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_debit_memo_request_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapDebitMemoRequestItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_debit_memo_request_item_data exists")
	}

	return count > 0, nil
}

// DebitMemoRequestSapDebitMemoRequestHeaderDatum pointed to by the foreign key.
func (o *SapDebitMemoRequestItemDatum) DebitMemoRequestSapDebitMemoRequestHeaderDatum(mods ...qm.QueryMod) sapDebitMemoRequestHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DebitMemoRequest` = ?", o.DebitMemoRequest),
	}

	queryMods = append(queryMods, mods...)

	return SapDebitMemoRequestHeaderData(queryMods...)
}

// LoadDebitMemoRequestSapDebitMemoRequestHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapDebitMemoRequestItemDatumL) LoadDebitMemoRequestSapDebitMemoRequestHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapDebitMemoRequestItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapDebitMemoRequestItemDatum
	var object *SapDebitMemoRequestItemDatum

	if singular {
		object = maybeSapDebitMemoRequestItemDatum.(*SapDebitMemoRequestItemDatum)
	} else {
		slice = *maybeSapDebitMemoRequestItemDatum.(*[]*SapDebitMemoRequestItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapDebitMemoRequestItemDatumR{}
		}
		args = append(args, object.DebitMemoRequest)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapDebitMemoRequestItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DebitMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.DebitMemoRequest)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_debit_memo_request_header_data`),
		qm.WhereIn(`sap_debit_memo_request_header_data.DebitMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapDebitMemoRequestHeaderDatum")
	}

	var resultSlice []*SapDebitMemoRequestHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapDebitMemoRequestHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_debit_memo_request_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_debit_memo_request_header_data")
	}

	if len(sapDebitMemoRequestItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapDebitMemoRequestHeaderDatumR{}
		}
		foreign.R.DebitMemoRequestSapDebitMemoRequestItemData = append(foreign.R.DebitMemoRequestSapDebitMemoRequestItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DebitMemoRequest == foreign.DebitMemoRequest {
				local.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapDebitMemoRequestHeaderDatumR{}
				}
				foreign.R.DebitMemoRequestSapDebitMemoRequestItemData = append(foreign.R.DebitMemoRequestSapDebitMemoRequestItemData, local)
				break
			}
		}
	}

	return nil
}

// SetDebitMemoRequestSapDebitMemoRequestHeaderDatum of the sapDebitMemoRequestItemDatum to the related item.
// Sets o.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum to related.
// Adds o to related.R.DebitMemoRequestSapDebitMemoRequestItemData.
func (o *SapDebitMemoRequestItemDatum) SetDebitMemoRequestSapDebitMemoRequestHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapDebitMemoRequestHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_debit_memo_request_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DebitMemoRequest"}),
		strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DebitMemoRequest, o.DebitMemoRequest, o.DebitMemoRequestItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DebitMemoRequest = related.DebitMemoRequest
	if o.R == nil {
		o.R = &sapDebitMemoRequestItemDatumR{
			DebitMemoRequestSapDebitMemoRequestHeaderDatum: related,
		}
	} else {
		o.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapDebitMemoRequestHeaderDatumR{
			DebitMemoRequestSapDebitMemoRequestItemData: SapDebitMemoRequestItemDatumSlice{o},
		}
	} else {
		related.R.DebitMemoRequestSapDebitMemoRequestItemData = append(related.R.DebitMemoRequestSapDebitMemoRequestItemData, o)
	}

	return nil
}

// SapDebitMemoRequestItemData retrieves all the records using an executor.
func SapDebitMemoRequestItemData(mods ...qm.QueryMod) sapDebitMemoRequestItemDatumQuery {
	mods = append(mods, qm.From("`sap_debit_memo_request_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_debit_memo_request_item_data`.*"})
	}

	return sapDebitMemoRequestItemDatumQuery{q}
}

// FindSapDebitMemoRequestItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapDebitMemoRequestItemDatum(ctx context.Context, exec boil.ContextExecutor, debitMemoRequest string, debitMemoRequestItem string, selectCols ...string) (*SapDebitMemoRequestItemDatum, error) {
	sapDebitMemoRequestItemDatumObj := &SapDebitMemoRequestItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_debit_memo_request_item_data` where `DebitMemoRequest`=? AND `DebitMemoRequestItem`=?", sel,
	)

	q := queries.Raw(query, debitMemoRequest, debitMemoRequestItem)

	err := q.Bind(ctx, exec, sapDebitMemoRequestItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_debit_memo_request_item_data")
	}

	if err = sapDebitMemoRequestItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapDebitMemoRequestItemDatumObj, err
	}

	return sapDebitMemoRequestItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapDebitMemoRequestItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_debit_memo_request_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapDebitMemoRequestItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapDebitMemoRequestItemDatumInsertCacheMut.RLock()
	cache, cached := sapDebitMemoRequestItemDatumInsertCache[key]
	sapDebitMemoRequestItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapDebitMemoRequestItemDatumAllColumns,
			sapDebitMemoRequestItemDatumColumnsWithDefault,
			sapDebitMemoRequestItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_debit_memo_request_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_debit_memo_request_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_debit_memo_request_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_debit_memo_request_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DebitMemoRequest,
		o.DebitMemoRequestItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_debit_memo_request_item_data")
	}

CacheNoHooks:
	if !cached {
		sapDebitMemoRequestItemDatumInsertCacheMut.Lock()
		sapDebitMemoRequestItemDatumInsertCache[key] = cache
		sapDebitMemoRequestItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapDebitMemoRequestItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapDebitMemoRequestItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapDebitMemoRequestItemDatumUpdateCacheMut.RLock()
	cache, cached := sapDebitMemoRequestItemDatumUpdateCache[key]
	sapDebitMemoRequestItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapDebitMemoRequestItemDatumAllColumns,
			sapDebitMemoRequestItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_debit_memo_request_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_debit_memo_request_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, append(wl, sapDebitMemoRequestItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_debit_memo_request_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_debit_memo_request_item_data")
	}

	if !cached {
		sapDebitMemoRequestItemDatumUpdateCacheMut.Lock()
		sapDebitMemoRequestItemDatumUpdateCache[key] = cache
		sapDebitMemoRequestItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapDebitMemoRequestItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_debit_memo_request_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_debit_memo_request_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapDebitMemoRequestItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDebitMemoRequestItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_debit_memo_request_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapDebitMemoRequestItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapDebitMemoRequestItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapDebitMemoRequestItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapDebitMemoRequestItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_debit_memo_request_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapDebitMemoRequestItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapDebitMemoRequestItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapDebitMemoRequestItemDatumUpsertCacheMut.RLock()
	cache, cached := sapDebitMemoRequestItemDatumUpsertCache[key]
	sapDebitMemoRequestItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapDebitMemoRequestItemDatumAllColumns,
			sapDebitMemoRequestItemDatumColumnsWithDefault,
			sapDebitMemoRequestItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapDebitMemoRequestItemDatumAllColumns,
			sapDebitMemoRequestItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_debit_memo_request_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_debit_memo_request_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_debit_memo_request_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_debit_memo_request_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapDebitMemoRequestItemDatumType, sapDebitMemoRequestItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_debit_memo_request_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_debit_memo_request_item_data")
	}

CacheNoHooks:
	if !cached {
		sapDebitMemoRequestItemDatumUpsertCacheMut.Lock()
		sapDebitMemoRequestItemDatumUpsertCache[key] = cache
		sapDebitMemoRequestItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapDebitMemoRequestItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapDebitMemoRequestItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapDebitMemoRequestItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapDebitMemoRequestItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_debit_memo_request_item_data` WHERE `DebitMemoRequest`=? AND `DebitMemoRequestItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_debit_memo_request_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_debit_memo_request_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapDebitMemoRequestItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapDebitMemoRequestItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_debit_memo_request_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_debit_memo_request_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapDebitMemoRequestItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapDebitMemoRequestItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDebitMemoRequestItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_debit_memo_request_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapDebitMemoRequestItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_debit_memo_request_item_data")
	}

	if len(sapDebitMemoRequestItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapDebitMemoRequestItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapDebitMemoRequestItemDatum(ctx, exec, o.DebitMemoRequest, o.DebitMemoRequestItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapDebitMemoRequestItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapDebitMemoRequestItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDebitMemoRequestItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_debit_memo_request_item_data`.* FROM `sap_debit_memo_request_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapDebitMemoRequestItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapDebitMemoRequestItemDatumExists checks if the SapDebitMemoRequestItemDatum row exists.
func SapDebitMemoRequestItemDatumExists(ctx context.Context, exec boil.ContextExecutor, debitMemoRequest string, debitMemoRequestItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_debit_memo_request_item_data` where `DebitMemoRequest`=? AND `DebitMemoRequestItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, debitMemoRequest, debitMemoRequestItem)
	}
	row := exec.QueryRowContext(ctx, sql, debitMemoRequest, debitMemoRequestItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_debit_memo_request_item_data exists")
	}

	return exists, nil
}
