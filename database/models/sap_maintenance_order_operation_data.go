// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceOrderOperationDatum is an object representing the database table.
type SapMaintenanceOrderOperationDatum struct {
	MaintenanceOrder               string      `boil:"MaintenanceOrder" json:"MaintenanceOrder" toml:"MaintenanceOrder" yaml:"MaintenanceOrder"`
	MaintenanceOrderOperation      string      `boil:"MaintenanceOrderOperation" json:"MaintenanceOrderOperation" toml:"MaintenanceOrderOperation" yaml:"MaintenanceOrderOperation"`
	MaintenanceOrderSubOperation   string      `boil:"MaintenanceOrderSubOperation" json:"MaintenanceOrderSubOperation" toml:"MaintenanceOrderSubOperation" yaml:"MaintenanceOrderSubOperation"`
	OperationControlKey            null.String `boil:"OperationControlKey" json:"OperationControlKey,omitempty" toml:"OperationControlKey" yaml:"OperationControlKey,omitempty"`
	OperationWorkCenterInternalID  null.String `boil:"OperationWorkCenterInternalID" json:"OperationWorkCenterInternalID,omitempty" toml:"OperationWorkCenterInternalID" yaml:"OperationWorkCenterInternalID,omitempty"`
	WorkCenter                     null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	OperationStandardTextCode      null.String `boil:"OperationStandardTextCode" json:"OperationStandardTextCode,omitempty" toml:"OperationStandardTextCode" yaml:"OperationStandardTextCode,omitempty"`
	OperationDescription           null.String `boil:"OperationDescription" json:"OperationDescription,omitempty" toml:"OperationDescription" yaml:"OperationDescription,omitempty"`
	MaintOrderRoutingNumber        null.String `boil:"MaintOrderRoutingNumber" json:"MaintOrderRoutingNumber,omitempty" toml:"MaintOrderRoutingNumber" yaml:"MaintOrderRoutingNumber,omitempty"`
	MaintenanceOrderRoutingNode    null.String `boil:"MaintenanceOrderRoutingNode" json:"MaintenanceOrderRoutingNode,omitempty" toml:"MaintenanceOrderRoutingNode" yaml:"MaintenanceOrderRoutingNode,omitempty"`
	SuperiorOperationInternalID    null.String `boil:"SuperiorOperationInternalID" json:"SuperiorOperationInternalID,omitempty" toml:"SuperiorOperationInternalID" yaml:"SuperiorOperationInternalID,omitempty"`
	OperationWorkCenterTypeCode    null.String `boil:"OperationWorkCenterTypeCode" json:"OperationWorkCenterTypeCode,omitempty" toml:"OperationWorkCenterTypeCode" yaml:"OperationWorkCenterTypeCode,omitempty"`
	Language                       null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	NumberOfTimeTickets            null.String `boil:"NumberOfTimeTickets" json:"NumberOfTimeTickets,omitempty" toml:"NumberOfTimeTickets" yaml:"NumberOfTimeTickets,omitempty"`
	OperationPurgInfoRecdSearchTxt null.String `boil:"OperationPurgInfoRecdSearchTxt" json:"OperationPurgInfoRecdSearchTxt,omitempty" toml:"OperationPurgInfoRecdSearchTxt" yaml:"OperationPurgInfoRecdSearchTxt,omitempty"`
	OperationSupplier              null.String `boil:"OperationSupplier" json:"OperationSupplier,omitempty" toml:"OperationSupplier" yaml:"OperationSupplier,omitempty"`
	CostElement                    null.String `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	OperationPurchasingInfoRecord  null.String `boil:"OperationPurchasingInfoRecord" json:"OperationPurchasingInfoRecord,omitempty" toml:"OperationPurchasingInfoRecord" yaml:"OperationPurchasingInfoRecord,omitempty"`
	PurchasingOrganization         null.String `boil:"PurchasingOrganization" json:"PurchasingOrganization,omitempty" toml:"PurchasingOrganization" yaml:"PurchasingOrganization,omitempty"`
	PurchasingGroup                null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	OpPurchaseOutlineAgreement     null.String `boil:"OpPurchaseOutlineAgreement" json:"OpPurchaseOutlineAgreement,omitempty" toml:"OpPurchaseOutlineAgreement" yaml:"OpPurchaseOutlineAgreement,omitempty"`
	OpPurchaseOutlineAgreementItem null.String `boil:"OpPurchaseOutlineAgreementItem" json:"OpPurchaseOutlineAgreementItem,omitempty" toml:"OpPurchaseOutlineAgreementItem" yaml:"OpPurchaseOutlineAgreementItem,omitempty"`
	OperationRequisitionerName     null.String `boil:"OperationRequisitionerName" json:"OperationRequisitionerName,omitempty" toml:"OperationRequisitionerName" yaml:"OperationRequisitionerName,omitempty"`
	OperationTrackingNumber        null.String `boil:"OperationTrackingNumber" json:"OperationTrackingNumber,omitempty" toml:"OperationTrackingNumber" yaml:"OperationTrackingNumber,omitempty"`
	NumberOfCapacities             null.Int    `boil:"NumberOfCapacities" json:"NumberOfCapacities,omitempty" toml:"NumberOfCapacities" yaml:"NumberOfCapacities,omitempty"`
	OperationWorkPercent           null.Int    `boil:"OperationWorkPercent" json:"OperationWorkPercent,omitempty" toml:"OperationWorkPercent" yaml:"OperationWorkPercent,omitempty"`
	OperationCalculationControl    null.String `boil:"OperationCalculationControl" json:"OperationCalculationControl,omitempty" toml:"OperationCalculationControl" yaml:"OperationCalculationControl,omitempty"`
	ActivityType                   null.String `boil:"ActivityType" json:"ActivityType,omitempty" toml:"ActivityType" yaml:"ActivityType,omitempty"`
	OperationSystemCondition       null.String `boil:"OperationSystemCondition" json:"OperationSystemCondition,omitempty" toml:"OperationSystemCondition" yaml:"OperationSystemCondition,omitempty"`
	OperationGoodsRecipientName    null.String `boil:"OperationGoodsRecipientName" json:"OperationGoodsRecipientName,omitempty" toml:"OperationGoodsRecipientName" yaml:"OperationGoodsRecipientName,omitempty"`
	OperationUnloadingPointName    null.String `boil:"OperationUnloadingPointName" json:"OperationUnloadingPointName,omitempty" toml:"OperationUnloadingPointName" yaml:"OperationUnloadingPointName,omitempty"`
	OperationPersonResponsible     null.String `boil:"OperationPersonResponsible" json:"OperationPersonResponsible,omitempty" toml:"OperationPersonResponsible" yaml:"OperationPersonResponsible,omitempty"`
	DeliveryTimeInDays             null.String `boil:"DeliveryTimeInDays" json:"DeliveryTimeInDays,omitempty" toml:"DeliveryTimeInDays" yaml:"DeliveryTimeInDays,omitempty"`
	MaintOrderOperationDuration    null.String `boil:"MaintOrderOperationDuration" json:"MaintOrderOperationDuration,omitempty" toml:"MaintOrderOperationDuration" yaml:"MaintOrderOperationDuration,omitempty"`
	MaintOrdOperationDurationUnit  null.String `boil:"MaintOrdOperationDurationUnit" json:"MaintOrdOperationDurationUnit,omitempty" toml:"MaintOrdOperationDurationUnit" yaml:"MaintOrdOperationDurationUnit,omitempty"`
	OpBscStartDateConstraintType   null.String `boil:"OpBscStartDateConstraintType" json:"OpBscStartDateConstraintType,omitempty" toml:"OpBscStartDateConstraintType" yaml:"OpBscStartDateConstraintType,omitempty"`
	OpBscEndDateConstraintType     null.String `boil:"OpBscEndDateConstraintType" json:"OpBscEndDateConstraintType,omitempty" toml:"OpBscEndDateConstraintType" yaml:"OpBscEndDateConstraintType,omitempty"`
	MaintOrdOperationWorkDuration  null.String `boil:"MaintOrdOperationWorkDuration" json:"MaintOrdOperationWorkDuration,omitempty" toml:"MaintOrdOperationWorkDuration" yaml:"MaintOrdOperationWorkDuration,omitempty"`
	MaintOrdOpWorkDurationUnit     null.String `boil:"MaintOrdOpWorkDurationUnit" json:"MaintOrdOpWorkDurationUnit,omitempty" toml:"MaintOrdOpWorkDurationUnit" yaml:"MaintOrdOpWorkDurationUnit,omitempty"`
	MaintOrdOpConstraintStrtDteTme null.String `boil:"MaintOrdOpConstraintStrtDteTme" json:"MaintOrdOpConstraintStrtDteTme,omitempty" toml:"MaintOrdOpConstraintStrtDteTme" yaml:"MaintOrdOpConstraintStrtDteTme,omitempty"`
	ConstraintDateForBscStartDate  null.String `boil:"ConstraintDateForBscStartDate" json:"ConstraintDateForBscStartDate,omitempty" toml:"ConstraintDateForBscStartDate" yaml:"ConstraintDateForBscStartDate,omitempty"`
	ConstraintTimeForBscStartTime  null.String `boil:"ConstraintTimeForBscStartTime" json:"ConstraintTimeForBscStartTime,omitempty" toml:"ConstraintTimeForBscStartTime" yaml:"ConstraintTimeForBscStartTime,omitempty"`
	MaintOrdOpCstrtFinishDteTme    null.String `boil:"MaintOrdOpCstrtFinishDteTme" json:"MaintOrdOpCstrtFinishDteTme,omitempty" toml:"MaintOrdOpCstrtFinishDteTme" yaml:"MaintOrdOpCstrtFinishDteTme,omitempty"`
	ConstraintDateForBscFinishDate null.String `boil:"ConstraintDateForBscFinishDate" json:"ConstraintDateForBscFinishDate,omitempty" toml:"ConstraintDateForBscFinishDate" yaml:"ConstraintDateForBscFinishDate,omitempty"`
	ConstraintTimeForBscFinishTime null.String `boil:"ConstraintTimeForBscFinishTime" json:"ConstraintTimeForBscFinishTime,omitempty" toml:"ConstraintTimeForBscFinishTime" yaml:"ConstraintTimeForBscFinishTime,omitempty"`
	MaintOrdOperationExecutionRate null.String `boil:"MaintOrdOperationExecutionRate" json:"MaintOrdOperationExecutionRate,omitempty" toml:"MaintOrdOperationExecutionRate" yaml:"MaintOrdOperationExecutionRate,omitempty"`
	Equipment                      null.String `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	FunctionalLocation             null.String `boil:"FunctionalLocation" json:"FunctionalLocation,omitempty" toml:"FunctionalLocation" yaml:"FunctionalLocation,omitempty"`
	MaintenanceActivityType        null.String `boil:"MaintenanceActivityType" json:"MaintenanceActivityType,omitempty" toml:"MaintenanceActivityType" yaml:"MaintenanceActivityType,omitempty"`
	BusinessArea                   null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	FunctionalArea                 null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	MaintControllingObjectClass    null.String `boil:"MaintControllingObjectClass" json:"MaintControllingObjectClass,omitempty" toml:"MaintControllingObjectClass" yaml:"MaintControllingObjectClass,omitempty"`
	WrkCtrIntCapRqmtsDistr         null.String `boil:"WrkCtrIntCapRqmtsDistr" json:"WrkCtrIntCapRqmtsDistr,omitempty" toml:"WrkCtrIntCapRqmtsDistr" yaml:"WrkCtrIntCapRqmtsDistr,omitempty"`
	MaintOrdOperationOverheadCode  null.String `boil:"MaintOrdOperationOverheadCode" json:"MaintOrdOperationOverheadCode,omitempty" toml:"MaintOrdOperationOverheadCode" yaml:"MaintOrdOperationOverheadCode,omitempty"`
	MaintOrderOperationQuantity    null.String `boil:"MaintOrderOperationQuantity" json:"MaintOrderOperationQuantity,omitempty" toml:"MaintOrderOperationQuantity" yaml:"MaintOrderOperationQuantity,omitempty"`
	MaintOrdOperationQuantityUnit  null.String `boil:"MaintOrdOperationQuantityUnit" json:"MaintOrdOperationQuantityUnit,omitempty" toml:"MaintOrdOperationQuantityUnit" yaml:"MaintOrdOperationQuantityUnit,omitempty"`
	Assembly                       null.String `boil:"Assembly" json:"Assembly,omitempty" toml:"Assembly" yaml:"Assembly,omitempty"`
	MaintOperationExecStageCode    null.String `boil:"MaintOperationExecStageCode" json:"MaintOperationExecStageCode,omitempty" toml:"MaintOperationExecStageCode" yaml:"MaintOperationExecStageCode,omitempty"`
	WBSElement                     null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	MaintOrderOperationInternalID  null.String `boil:"MaintOrderOperationInternalID" json:"MaintOrderOperationInternalID,omitempty" toml:"MaintOrderOperationInternalID" yaml:"MaintOrderOperationInternalID,omitempty"`
	MaintenanceObjectListItem      null.Int    `boil:"MaintenanceObjectListItem" json:"MaintenanceObjectListItem,omitempty" toml:"MaintenanceObjectListItem" yaml:"MaintenanceObjectListItem,omitempty"`
	PurchaseRequisition            null.String `boil:"PurchaseRequisition" json:"PurchaseRequisition,omitempty" toml:"PurchaseRequisition" yaml:"PurchaseRequisition,omitempty"`
	PurchaseRequisitionItem        null.String `boil:"PurchaseRequisitionItem" json:"PurchaseRequisitionItem,omitempty" toml:"PurchaseRequisitionItem" yaml:"PurchaseRequisitionItem,omitempty"`
	OpErlstSchedldExecStrtDte      null.String `boil:"OpErlstSchedldExecStrtDte" json:"OpErlstSchedldExecStrtDte,omitempty" toml:"OpErlstSchedldExecStrtDte" yaml:"OpErlstSchedldExecStrtDte,omitempty"`
	OpErlstSchedldExecStrtTme      null.String `boil:"OpErlstSchedldExecStrtTme" json:"OpErlstSchedldExecStrtTme,omitempty" toml:"OpErlstSchedldExecStrtTme" yaml:"OpErlstSchedldExecStrtTme,omitempty"`
	OpErlstSchedldExecEndDte       null.String `boil:"OpErlstSchedldExecEndDte" json:"OpErlstSchedldExecEndDte,omitempty" toml:"OpErlstSchedldExecEndDte" yaml:"OpErlstSchedldExecEndDte,omitempty"`
	OpErlstSchedldExecEndTme       null.String `boil:"OpErlstSchedldExecEndTme" json:"OpErlstSchedldExecEndTme,omitempty" toml:"OpErlstSchedldExecEndTme" yaml:"OpErlstSchedldExecEndTme,omitempty"`
	OpLtstSchedldExecStrtDte       null.String `boil:"OpLtstSchedldExecStrtDte" json:"OpLtstSchedldExecStrtDte,omitempty" toml:"OpLtstSchedldExecStrtDte" yaml:"OpLtstSchedldExecStrtDte,omitempty"`
	OpLtstSchedldExecStrtTme       null.String `boil:"OpLtstSchedldExecStrtTme" json:"OpLtstSchedldExecStrtTme,omitempty" toml:"OpLtstSchedldExecStrtTme" yaml:"OpLtstSchedldExecStrtTme,omitempty"`
	OpLtstSchedldExecEndDte        null.String `boil:"OpLtstSchedldExecEndDte" json:"OpLtstSchedldExecEndDte,omitempty" toml:"OpLtstSchedldExecEndDte" yaml:"OpLtstSchedldExecEndDte,omitempty"`
	OpLtstSchedldExecEndTme        null.String `boil:"OpLtstSchedldExecEndTme" json:"OpLtstSchedldExecEndTme,omitempty" toml:"OpLtstSchedldExecEndTme" yaml:"OpLtstSchedldExecEndTme,omitempty"`
	OpActualExecutionStartDate     null.String `boil:"OpActualExecutionStartDate" json:"OpActualExecutionStartDate,omitempty" toml:"OpActualExecutionStartDate" yaml:"OpActualExecutionStartDate,omitempty"`
	OpActualExecutionStartTime     null.String `boil:"OpActualExecutionStartTime" json:"OpActualExecutionStartTime,omitempty" toml:"OpActualExecutionStartTime" yaml:"OpActualExecutionStartTime,omitempty"`
	OpActualExecutionEndDate       null.String `boil:"OpActualExecutionEndDate" json:"OpActualExecutionEndDate,omitempty" toml:"OpActualExecutionEndDate" yaml:"OpActualExecutionEndDate,omitempty"`
	OpActualExecutionEndTime       null.String `boil:"OpActualExecutionEndTime" json:"OpActualExecutionEndTime,omitempty" toml:"OpActualExecutionEndTime" yaml:"OpActualExecutionEndTime,omitempty"`
	ForecastWorkQuantity           null.String `boil:"ForecastWorkQuantity" json:"ForecastWorkQuantity,omitempty" toml:"ForecastWorkQuantity" yaml:"ForecastWorkQuantity,omitempty"`
	ActualWorkQuantity             null.String `boil:"ActualWorkQuantity" json:"ActualWorkQuantity,omitempty" toml:"ActualWorkQuantity" yaml:"ActualWorkQuantity,omitempty"`
	MaintOrdOpProcessPhaseCode     null.String `boil:"MaintOrdOpProcessPhaseCode" json:"MaintOrdOpProcessPhaseCode,omitempty" toml:"MaintOrdOpProcessPhaseCode" yaml:"MaintOrdOpProcessPhaseCode,omitempty"`
	MaintOrdOpProcessSubPhaseCode  null.String `boil:"MaintOrdOpProcessSubPhaseCode" json:"MaintOrdOpProcessSubPhaseCode,omitempty" toml:"MaintOrdOpProcessSubPhaseCode" yaml:"MaintOrdOpProcessSubPhaseCode,omitempty"`
	SystemStatusText               null.String `boil:"SystemStatusText" json:"SystemStatusText,omitempty" toml:"SystemStatusText" yaml:"SystemStatusText,omitempty"`
	UserStatusText                 null.String `boil:"UserStatusText" json:"UserStatusText,omitempty" toml:"UserStatusText" yaml:"UserStatusText,omitempty"`

	R *sapMaintenanceOrderOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceOrderOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceOrderOperationDatumColumns = struct {
	MaintenanceOrder               string
	MaintenanceOrderOperation      string
	MaintenanceOrderSubOperation   string
	OperationControlKey            string
	OperationWorkCenterInternalID  string
	WorkCenter                     string
	Plant                          string
	OperationStandardTextCode      string
	OperationDescription           string
	MaintOrderRoutingNumber        string
	MaintenanceOrderRoutingNode    string
	SuperiorOperationInternalID    string
	OperationWorkCenterTypeCode    string
	Language                       string
	NumberOfTimeTickets            string
	OperationPurgInfoRecdSearchTxt string
	OperationSupplier              string
	CostElement                    string
	OperationPurchasingInfoRecord  string
	PurchasingOrganization         string
	PurchasingGroup                string
	MaterialGroup                  string
	OpPurchaseOutlineAgreement     string
	OpPurchaseOutlineAgreementItem string
	OperationRequisitionerName     string
	OperationTrackingNumber        string
	NumberOfCapacities             string
	OperationWorkPercent           string
	OperationCalculationControl    string
	ActivityType                   string
	OperationSystemCondition       string
	OperationGoodsRecipientName    string
	OperationUnloadingPointName    string
	OperationPersonResponsible     string
	DeliveryTimeInDays             string
	MaintOrderOperationDuration    string
	MaintOrdOperationDurationUnit  string
	OpBscStartDateConstraintType   string
	OpBscEndDateConstraintType     string
	MaintOrdOperationWorkDuration  string
	MaintOrdOpWorkDurationUnit     string
	MaintOrdOpConstraintStrtDteTme string
	ConstraintDateForBscStartDate  string
	ConstraintTimeForBscStartTime  string
	MaintOrdOpCstrtFinishDteTme    string
	ConstraintDateForBscFinishDate string
	ConstraintTimeForBscFinishTime string
	MaintOrdOperationExecutionRate string
	Equipment                      string
	FunctionalLocation             string
	MaintenanceActivityType        string
	BusinessArea                   string
	ProfitCenter                   string
	FunctionalArea                 string
	MaintControllingObjectClass    string
	WrkCtrIntCapRqmtsDistr         string
	MaintOrdOperationOverheadCode  string
	MaintOrderOperationQuantity    string
	MaintOrdOperationQuantityUnit  string
	Assembly                       string
	MaintOperationExecStageCode    string
	WBSElement                     string
	IsMarkedForDeletion            string
	MaintOrderOperationInternalID  string
	MaintenanceObjectListItem      string
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	OpErlstSchedldExecStrtDte      string
	OpErlstSchedldExecStrtTme      string
	OpErlstSchedldExecEndDte       string
	OpErlstSchedldExecEndTme       string
	OpLtstSchedldExecStrtDte       string
	OpLtstSchedldExecStrtTme       string
	OpLtstSchedldExecEndDte        string
	OpLtstSchedldExecEndTme        string
	OpActualExecutionStartDate     string
	OpActualExecutionStartTime     string
	OpActualExecutionEndDate       string
	OpActualExecutionEndTime       string
	ForecastWorkQuantity           string
	ActualWorkQuantity             string
	MaintOrdOpProcessPhaseCode     string
	MaintOrdOpProcessSubPhaseCode  string
	SystemStatusText               string
	UserStatusText                 string
}{
	MaintenanceOrder:               "MaintenanceOrder",
	MaintenanceOrderOperation:      "MaintenanceOrderOperation",
	MaintenanceOrderSubOperation:   "MaintenanceOrderSubOperation",
	OperationControlKey:            "OperationControlKey",
	OperationWorkCenterInternalID:  "OperationWorkCenterInternalID",
	WorkCenter:                     "WorkCenter",
	Plant:                          "Plant",
	OperationStandardTextCode:      "OperationStandardTextCode",
	OperationDescription:           "OperationDescription",
	MaintOrderRoutingNumber:        "MaintOrderRoutingNumber",
	MaintenanceOrderRoutingNode:    "MaintenanceOrderRoutingNode",
	SuperiorOperationInternalID:    "SuperiorOperationInternalID",
	OperationWorkCenterTypeCode:    "OperationWorkCenterTypeCode",
	Language:                       "Language",
	NumberOfTimeTickets:            "NumberOfTimeTickets",
	OperationPurgInfoRecdSearchTxt: "OperationPurgInfoRecdSearchTxt",
	OperationSupplier:              "OperationSupplier",
	CostElement:                    "CostElement",
	OperationPurchasingInfoRecord:  "OperationPurchasingInfoRecord",
	PurchasingOrganization:         "PurchasingOrganization",
	PurchasingGroup:                "PurchasingGroup",
	MaterialGroup:                  "MaterialGroup",
	OpPurchaseOutlineAgreement:     "OpPurchaseOutlineAgreement",
	OpPurchaseOutlineAgreementItem: "OpPurchaseOutlineAgreementItem",
	OperationRequisitionerName:     "OperationRequisitionerName",
	OperationTrackingNumber:        "OperationTrackingNumber",
	NumberOfCapacities:             "NumberOfCapacities",
	OperationWorkPercent:           "OperationWorkPercent",
	OperationCalculationControl:    "OperationCalculationControl",
	ActivityType:                   "ActivityType",
	OperationSystemCondition:       "OperationSystemCondition",
	OperationGoodsRecipientName:    "OperationGoodsRecipientName",
	OperationUnloadingPointName:    "OperationUnloadingPointName",
	OperationPersonResponsible:     "OperationPersonResponsible",
	DeliveryTimeInDays:             "DeliveryTimeInDays",
	MaintOrderOperationDuration:    "MaintOrderOperationDuration",
	MaintOrdOperationDurationUnit:  "MaintOrdOperationDurationUnit",
	OpBscStartDateConstraintType:   "OpBscStartDateConstraintType",
	OpBscEndDateConstraintType:     "OpBscEndDateConstraintType",
	MaintOrdOperationWorkDuration:  "MaintOrdOperationWorkDuration",
	MaintOrdOpWorkDurationUnit:     "MaintOrdOpWorkDurationUnit",
	MaintOrdOpConstraintStrtDteTme: "MaintOrdOpConstraintStrtDteTme",
	ConstraintDateForBscStartDate:  "ConstraintDateForBscStartDate",
	ConstraintTimeForBscStartTime:  "ConstraintTimeForBscStartTime",
	MaintOrdOpCstrtFinishDteTme:    "MaintOrdOpCstrtFinishDteTme",
	ConstraintDateForBscFinishDate: "ConstraintDateForBscFinishDate",
	ConstraintTimeForBscFinishTime: "ConstraintTimeForBscFinishTime",
	MaintOrdOperationExecutionRate: "MaintOrdOperationExecutionRate",
	Equipment:                      "Equipment",
	FunctionalLocation:             "FunctionalLocation",
	MaintenanceActivityType:        "MaintenanceActivityType",
	BusinessArea:                   "BusinessArea",
	ProfitCenter:                   "ProfitCenter",
	FunctionalArea:                 "FunctionalArea",
	MaintControllingObjectClass:    "MaintControllingObjectClass",
	WrkCtrIntCapRqmtsDistr:         "WrkCtrIntCapRqmtsDistr",
	MaintOrdOperationOverheadCode:  "MaintOrdOperationOverheadCode",
	MaintOrderOperationQuantity:    "MaintOrderOperationQuantity",
	MaintOrdOperationQuantityUnit:  "MaintOrdOperationQuantityUnit",
	Assembly:                       "Assembly",
	MaintOperationExecStageCode:    "MaintOperationExecStageCode",
	WBSElement:                     "WBSElement",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
	MaintOrderOperationInternalID:  "MaintOrderOperationInternalID",
	MaintenanceObjectListItem:      "MaintenanceObjectListItem",
	PurchaseRequisition:            "PurchaseRequisition",
	PurchaseRequisitionItem:        "PurchaseRequisitionItem",
	OpErlstSchedldExecStrtDte:      "OpErlstSchedldExecStrtDte",
	OpErlstSchedldExecStrtTme:      "OpErlstSchedldExecStrtTme",
	OpErlstSchedldExecEndDte:       "OpErlstSchedldExecEndDte",
	OpErlstSchedldExecEndTme:       "OpErlstSchedldExecEndTme",
	OpLtstSchedldExecStrtDte:       "OpLtstSchedldExecStrtDte",
	OpLtstSchedldExecStrtTme:       "OpLtstSchedldExecStrtTme",
	OpLtstSchedldExecEndDte:        "OpLtstSchedldExecEndDte",
	OpLtstSchedldExecEndTme:        "OpLtstSchedldExecEndTme",
	OpActualExecutionStartDate:     "OpActualExecutionStartDate",
	OpActualExecutionStartTime:     "OpActualExecutionStartTime",
	OpActualExecutionEndDate:       "OpActualExecutionEndDate",
	OpActualExecutionEndTime:       "OpActualExecutionEndTime",
	ForecastWorkQuantity:           "ForecastWorkQuantity",
	ActualWorkQuantity:             "ActualWorkQuantity",
	MaintOrdOpProcessPhaseCode:     "MaintOrdOpProcessPhaseCode",
	MaintOrdOpProcessSubPhaseCode:  "MaintOrdOpProcessSubPhaseCode",
	SystemStatusText:               "SystemStatusText",
	UserStatusText:                 "UserStatusText",
}

var SapMaintenanceOrderOperationDatumTableColumns = struct {
	MaintenanceOrder               string
	MaintenanceOrderOperation      string
	MaintenanceOrderSubOperation   string
	OperationControlKey            string
	OperationWorkCenterInternalID  string
	WorkCenter                     string
	Plant                          string
	OperationStandardTextCode      string
	OperationDescription           string
	MaintOrderRoutingNumber        string
	MaintenanceOrderRoutingNode    string
	SuperiorOperationInternalID    string
	OperationWorkCenterTypeCode    string
	Language                       string
	NumberOfTimeTickets            string
	OperationPurgInfoRecdSearchTxt string
	OperationSupplier              string
	CostElement                    string
	OperationPurchasingInfoRecord  string
	PurchasingOrganization         string
	PurchasingGroup                string
	MaterialGroup                  string
	OpPurchaseOutlineAgreement     string
	OpPurchaseOutlineAgreementItem string
	OperationRequisitionerName     string
	OperationTrackingNumber        string
	NumberOfCapacities             string
	OperationWorkPercent           string
	OperationCalculationControl    string
	ActivityType                   string
	OperationSystemCondition       string
	OperationGoodsRecipientName    string
	OperationUnloadingPointName    string
	OperationPersonResponsible     string
	DeliveryTimeInDays             string
	MaintOrderOperationDuration    string
	MaintOrdOperationDurationUnit  string
	OpBscStartDateConstraintType   string
	OpBscEndDateConstraintType     string
	MaintOrdOperationWorkDuration  string
	MaintOrdOpWorkDurationUnit     string
	MaintOrdOpConstraintStrtDteTme string
	ConstraintDateForBscStartDate  string
	ConstraintTimeForBscStartTime  string
	MaintOrdOpCstrtFinishDteTme    string
	ConstraintDateForBscFinishDate string
	ConstraintTimeForBscFinishTime string
	MaintOrdOperationExecutionRate string
	Equipment                      string
	FunctionalLocation             string
	MaintenanceActivityType        string
	BusinessArea                   string
	ProfitCenter                   string
	FunctionalArea                 string
	MaintControllingObjectClass    string
	WrkCtrIntCapRqmtsDistr         string
	MaintOrdOperationOverheadCode  string
	MaintOrderOperationQuantity    string
	MaintOrdOperationQuantityUnit  string
	Assembly                       string
	MaintOperationExecStageCode    string
	WBSElement                     string
	IsMarkedForDeletion            string
	MaintOrderOperationInternalID  string
	MaintenanceObjectListItem      string
	PurchaseRequisition            string
	PurchaseRequisitionItem        string
	OpErlstSchedldExecStrtDte      string
	OpErlstSchedldExecStrtTme      string
	OpErlstSchedldExecEndDte       string
	OpErlstSchedldExecEndTme       string
	OpLtstSchedldExecStrtDte       string
	OpLtstSchedldExecStrtTme       string
	OpLtstSchedldExecEndDte        string
	OpLtstSchedldExecEndTme        string
	OpActualExecutionStartDate     string
	OpActualExecutionStartTime     string
	OpActualExecutionEndDate       string
	OpActualExecutionEndTime       string
	ForecastWorkQuantity           string
	ActualWorkQuantity             string
	MaintOrdOpProcessPhaseCode     string
	MaintOrdOpProcessSubPhaseCode  string
	SystemStatusText               string
	UserStatusText                 string
}{
	MaintenanceOrder:               "sap_maintenance_order_operation_data.MaintenanceOrder",
	MaintenanceOrderOperation:      "sap_maintenance_order_operation_data.MaintenanceOrderOperation",
	MaintenanceOrderSubOperation:   "sap_maintenance_order_operation_data.MaintenanceOrderSubOperation",
	OperationControlKey:            "sap_maintenance_order_operation_data.OperationControlKey",
	OperationWorkCenterInternalID:  "sap_maintenance_order_operation_data.OperationWorkCenterInternalID",
	WorkCenter:                     "sap_maintenance_order_operation_data.WorkCenter",
	Plant:                          "sap_maintenance_order_operation_data.Plant",
	OperationStandardTextCode:      "sap_maintenance_order_operation_data.OperationStandardTextCode",
	OperationDescription:           "sap_maintenance_order_operation_data.OperationDescription",
	MaintOrderRoutingNumber:        "sap_maintenance_order_operation_data.MaintOrderRoutingNumber",
	MaintenanceOrderRoutingNode:    "sap_maintenance_order_operation_data.MaintenanceOrderRoutingNode",
	SuperiorOperationInternalID:    "sap_maintenance_order_operation_data.SuperiorOperationInternalID",
	OperationWorkCenterTypeCode:    "sap_maintenance_order_operation_data.OperationWorkCenterTypeCode",
	Language:                       "sap_maintenance_order_operation_data.Language",
	NumberOfTimeTickets:            "sap_maintenance_order_operation_data.NumberOfTimeTickets",
	OperationPurgInfoRecdSearchTxt: "sap_maintenance_order_operation_data.OperationPurgInfoRecdSearchTxt",
	OperationSupplier:              "sap_maintenance_order_operation_data.OperationSupplier",
	CostElement:                    "sap_maintenance_order_operation_data.CostElement",
	OperationPurchasingInfoRecord:  "sap_maintenance_order_operation_data.OperationPurchasingInfoRecord",
	PurchasingOrganization:         "sap_maintenance_order_operation_data.PurchasingOrganization",
	PurchasingGroup:                "sap_maintenance_order_operation_data.PurchasingGroup",
	MaterialGroup:                  "sap_maintenance_order_operation_data.MaterialGroup",
	OpPurchaseOutlineAgreement:     "sap_maintenance_order_operation_data.OpPurchaseOutlineAgreement",
	OpPurchaseOutlineAgreementItem: "sap_maintenance_order_operation_data.OpPurchaseOutlineAgreementItem",
	OperationRequisitionerName:     "sap_maintenance_order_operation_data.OperationRequisitionerName",
	OperationTrackingNumber:        "sap_maintenance_order_operation_data.OperationTrackingNumber",
	NumberOfCapacities:             "sap_maintenance_order_operation_data.NumberOfCapacities",
	OperationWorkPercent:           "sap_maintenance_order_operation_data.OperationWorkPercent",
	OperationCalculationControl:    "sap_maintenance_order_operation_data.OperationCalculationControl",
	ActivityType:                   "sap_maintenance_order_operation_data.ActivityType",
	OperationSystemCondition:       "sap_maintenance_order_operation_data.OperationSystemCondition",
	OperationGoodsRecipientName:    "sap_maintenance_order_operation_data.OperationGoodsRecipientName",
	OperationUnloadingPointName:    "sap_maintenance_order_operation_data.OperationUnloadingPointName",
	OperationPersonResponsible:     "sap_maintenance_order_operation_data.OperationPersonResponsible",
	DeliveryTimeInDays:             "sap_maintenance_order_operation_data.DeliveryTimeInDays",
	MaintOrderOperationDuration:    "sap_maintenance_order_operation_data.MaintOrderOperationDuration",
	MaintOrdOperationDurationUnit:  "sap_maintenance_order_operation_data.MaintOrdOperationDurationUnit",
	OpBscStartDateConstraintType:   "sap_maintenance_order_operation_data.OpBscStartDateConstraintType",
	OpBscEndDateConstraintType:     "sap_maintenance_order_operation_data.OpBscEndDateConstraintType",
	MaintOrdOperationWorkDuration:  "sap_maintenance_order_operation_data.MaintOrdOperationWorkDuration",
	MaintOrdOpWorkDurationUnit:     "sap_maintenance_order_operation_data.MaintOrdOpWorkDurationUnit",
	MaintOrdOpConstraintStrtDteTme: "sap_maintenance_order_operation_data.MaintOrdOpConstraintStrtDteTme",
	ConstraintDateForBscStartDate:  "sap_maintenance_order_operation_data.ConstraintDateForBscStartDate",
	ConstraintTimeForBscStartTime:  "sap_maintenance_order_operation_data.ConstraintTimeForBscStartTime",
	MaintOrdOpCstrtFinishDteTme:    "sap_maintenance_order_operation_data.MaintOrdOpCstrtFinishDteTme",
	ConstraintDateForBscFinishDate: "sap_maintenance_order_operation_data.ConstraintDateForBscFinishDate",
	ConstraintTimeForBscFinishTime: "sap_maintenance_order_operation_data.ConstraintTimeForBscFinishTime",
	MaintOrdOperationExecutionRate: "sap_maintenance_order_operation_data.MaintOrdOperationExecutionRate",
	Equipment:                      "sap_maintenance_order_operation_data.Equipment",
	FunctionalLocation:             "sap_maintenance_order_operation_data.FunctionalLocation",
	MaintenanceActivityType:        "sap_maintenance_order_operation_data.MaintenanceActivityType",
	BusinessArea:                   "sap_maintenance_order_operation_data.BusinessArea",
	ProfitCenter:                   "sap_maintenance_order_operation_data.ProfitCenter",
	FunctionalArea:                 "sap_maintenance_order_operation_data.FunctionalArea",
	MaintControllingObjectClass:    "sap_maintenance_order_operation_data.MaintControllingObjectClass",
	WrkCtrIntCapRqmtsDistr:         "sap_maintenance_order_operation_data.WrkCtrIntCapRqmtsDistr",
	MaintOrdOperationOverheadCode:  "sap_maintenance_order_operation_data.MaintOrdOperationOverheadCode",
	MaintOrderOperationQuantity:    "sap_maintenance_order_operation_data.MaintOrderOperationQuantity",
	MaintOrdOperationQuantityUnit:  "sap_maintenance_order_operation_data.MaintOrdOperationQuantityUnit",
	Assembly:                       "sap_maintenance_order_operation_data.Assembly",
	MaintOperationExecStageCode:    "sap_maintenance_order_operation_data.MaintOperationExecStageCode",
	WBSElement:                     "sap_maintenance_order_operation_data.WBSElement",
	IsMarkedForDeletion:            "sap_maintenance_order_operation_data.IsMarkedForDeletion",
	MaintOrderOperationInternalID:  "sap_maintenance_order_operation_data.MaintOrderOperationInternalID",
	MaintenanceObjectListItem:      "sap_maintenance_order_operation_data.MaintenanceObjectListItem",
	PurchaseRequisition:            "sap_maintenance_order_operation_data.PurchaseRequisition",
	PurchaseRequisitionItem:        "sap_maintenance_order_operation_data.PurchaseRequisitionItem",
	OpErlstSchedldExecStrtDte:      "sap_maintenance_order_operation_data.OpErlstSchedldExecStrtDte",
	OpErlstSchedldExecStrtTme:      "sap_maintenance_order_operation_data.OpErlstSchedldExecStrtTme",
	OpErlstSchedldExecEndDte:       "sap_maintenance_order_operation_data.OpErlstSchedldExecEndDte",
	OpErlstSchedldExecEndTme:       "sap_maintenance_order_operation_data.OpErlstSchedldExecEndTme",
	OpLtstSchedldExecStrtDte:       "sap_maintenance_order_operation_data.OpLtstSchedldExecStrtDte",
	OpLtstSchedldExecStrtTme:       "sap_maintenance_order_operation_data.OpLtstSchedldExecStrtTme",
	OpLtstSchedldExecEndDte:        "sap_maintenance_order_operation_data.OpLtstSchedldExecEndDte",
	OpLtstSchedldExecEndTme:        "sap_maintenance_order_operation_data.OpLtstSchedldExecEndTme",
	OpActualExecutionStartDate:     "sap_maintenance_order_operation_data.OpActualExecutionStartDate",
	OpActualExecutionStartTime:     "sap_maintenance_order_operation_data.OpActualExecutionStartTime",
	OpActualExecutionEndDate:       "sap_maintenance_order_operation_data.OpActualExecutionEndDate",
	OpActualExecutionEndTime:       "sap_maintenance_order_operation_data.OpActualExecutionEndTime",
	ForecastWorkQuantity:           "sap_maintenance_order_operation_data.ForecastWorkQuantity",
	ActualWorkQuantity:             "sap_maintenance_order_operation_data.ActualWorkQuantity",
	MaintOrdOpProcessPhaseCode:     "sap_maintenance_order_operation_data.MaintOrdOpProcessPhaseCode",
	MaintOrdOpProcessSubPhaseCode:  "sap_maintenance_order_operation_data.MaintOrdOpProcessSubPhaseCode",
	SystemStatusText:               "sap_maintenance_order_operation_data.SystemStatusText",
	UserStatusText:                 "sap_maintenance_order_operation_data.UserStatusText",
}

// Generated where

var SapMaintenanceOrderOperationDatumWhere = struct {
	MaintenanceOrder               whereHelperstring
	MaintenanceOrderOperation      whereHelperstring
	MaintenanceOrderSubOperation   whereHelperstring
	OperationControlKey            whereHelpernull_String
	OperationWorkCenterInternalID  whereHelpernull_String
	WorkCenter                     whereHelpernull_String
	Plant                          whereHelpernull_String
	OperationStandardTextCode      whereHelpernull_String
	OperationDescription           whereHelpernull_String
	MaintOrderRoutingNumber        whereHelpernull_String
	MaintenanceOrderRoutingNode    whereHelpernull_String
	SuperiorOperationInternalID    whereHelpernull_String
	OperationWorkCenterTypeCode    whereHelpernull_String
	Language                       whereHelpernull_String
	NumberOfTimeTickets            whereHelpernull_String
	OperationPurgInfoRecdSearchTxt whereHelpernull_String
	OperationSupplier              whereHelpernull_String
	CostElement                    whereHelpernull_String
	OperationPurchasingInfoRecord  whereHelpernull_String
	PurchasingOrganization         whereHelpernull_String
	PurchasingGroup                whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	OpPurchaseOutlineAgreement     whereHelpernull_String
	OpPurchaseOutlineAgreementItem whereHelpernull_String
	OperationRequisitionerName     whereHelpernull_String
	OperationTrackingNumber        whereHelpernull_String
	NumberOfCapacities             whereHelpernull_Int
	OperationWorkPercent           whereHelpernull_Int
	OperationCalculationControl    whereHelpernull_String
	ActivityType                   whereHelpernull_String
	OperationSystemCondition       whereHelpernull_String
	OperationGoodsRecipientName    whereHelpernull_String
	OperationUnloadingPointName    whereHelpernull_String
	OperationPersonResponsible     whereHelpernull_String
	DeliveryTimeInDays             whereHelpernull_String
	MaintOrderOperationDuration    whereHelpernull_String
	MaintOrdOperationDurationUnit  whereHelpernull_String
	OpBscStartDateConstraintType   whereHelpernull_String
	OpBscEndDateConstraintType     whereHelpernull_String
	MaintOrdOperationWorkDuration  whereHelpernull_String
	MaintOrdOpWorkDurationUnit     whereHelpernull_String
	MaintOrdOpConstraintStrtDteTme whereHelpernull_String
	ConstraintDateForBscStartDate  whereHelpernull_String
	ConstraintTimeForBscStartTime  whereHelpernull_String
	MaintOrdOpCstrtFinishDteTme    whereHelpernull_String
	ConstraintDateForBscFinishDate whereHelpernull_String
	ConstraintTimeForBscFinishTime whereHelpernull_String
	MaintOrdOperationExecutionRate whereHelpernull_String
	Equipment                      whereHelpernull_String
	FunctionalLocation             whereHelpernull_String
	MaintenanceActivityType        whereHelpernull_String
	BusinessArea                   whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	FunctionalArea                 whereHelpernull_String
	MaintControllingObjectClass    whereHelpernull_String
	WrkCtrIntCapRqmtsDistr         whereHelpernull_String
	MaintOrdOperationOverheadCode  whereHelpernull_String
	MaintOrderOperationQuantity    whereHelpernull_String
	MaintOrdOperationQuantityUnit  whereHelpernull_String
	Assembly                       whereHelpernull_String
	MaintOperationExecStageCode    whereHelpernull_String
	WBSElement                     whereHelpernull_String
	IsMarkedForDeletion            whereHelpernull_Bool
	MaintOrderOperationInternalID  whereHelpernull_String
	MaintenanceObjectListItem      whereHelpernull_Int
	PurchaseRequisition            whereHelpernull_String
	PurchaseRequisitionItem        whereHelpernull_String
	OpErlstSchedldExecStrtDte      whereHelpernull_String
	OpErlstSchedldExecStrtTme      whereHelpernull_String
	OpErlstSchedldExecEndDte       whereHelpernull_String
	OpErlstSchedldExecEndTme       whereHelpernull_String
	OpLtstSchedldExecStrtDte       whereHelpernull_String
	OpLtstSchedldExecStrtTme       whereHelpernull_String
	OpLtstSchedldExecEndDte        whereHelpernull_String
	OpLtstSchedldExecEndTme        whereHelpernull_String
	OpActualExecutionStartDate     whereHelpernull_String
	OpActualExecutionStartTime     whereHelpernull_String
	OpActualExecutionEndDate       whereHelpernull_String
	OpActualExecutionEndTime       whereHelpernull_String
	ForecastWorkQuantity           whereHelpernull_String
	ActualWorkQuantity             whereHelpernull_String
	MaintOrdOpProcessPhaseCode     whereHelpernull_String
	MaintOrdOpProcessSubPhaseCode  whereHelpernull_String
	SystemStatusText               whereHelpernull_String
	UserStatusText                 whereHelpernull_String
}{
	MaintenanceOrder:               whereHelperstring{field: "`sap_maintenance_order_operation_data`.`MaintenanceOrder`"},
	MaintenanceOrderOperation:      whereHelperstring{field: "`sap_maintenance_order_operation_data`.`MaintenanceOrderOperation`"},
	MaintenanceOrderSubOperation:   whereHelperstring{field: "`sap_maintenance_order_operation_data`.`MaintenanceOrderSubOperation`"},
	OperationControlKey:            whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationControlKey`"},
	OperationWorkCenterInternalID:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationWorkCenterInternalID`"},
	WorkCenter:                     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`WorkCenter`"},
	Plant:                          whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`Plant`"},
	OperationStandardTextCode:      whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationStandardTextCode`"},
	OperationDescription:           whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationDescription`"},
	MaintOrderRoutingNumber:        whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrderRoutingNumber`"},
	MaintenanceOrderRoutingNode:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintenanceOrderRoutingNode`"},
	SuperiorOperationInternalID:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`SuperiorOperationInternalID`"},
	OperationWorkCenterTypeCode:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationWorkCenterTypeCode`"},
	Language:                       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`Language`"},
	NumberOfTimeTickets:            whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`NumberOfTimeTickets`"},
	OperationPurgInfoRecdSearchTxt: whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationPurgInfoRecdSearchTxt`"},
	OperationSupplier:              whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationSupplier`"},
	CostElement:                    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`CostElement`"},
	OperationPurchasingInfoRecord:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationPurchasingInfoRecord`"},
	PurchasingOrganization:         whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`PurchasingOrganization`"},
	PurchasingGroup:                whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`PurchasingGroup`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaterialGroup`"},
	OpPurchaseOutlineAgreement:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpPurchaseOutlineAgreement`"},
	OpPurchaseOutlineAgreementItem: whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpPurchaseOutlineAgreementItem`"},
	OperationRequisitionerName:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationRequisitionerName`"},
	OperationTrackingNumber:        whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationTrackingNumber`"},
	NumberOfCapacities:             whereHelpernull_Int{field: "`sap_maintenance_order_operation_data`.`NumberOfCapacities`"},
	OperationWorkPercent:           whereHelpernull_Int{field: "`sap_maintenance_order_operation_data`.`OperationWorkPercent`"},
	OperationCalculationControl:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationCalculationControl`"},
	ActivityType:                   whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ActivityType`"},
	OperationSystemCondition:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationSystemCondition`"},
	OperationGoodsRecipientName:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationGoodsRecipientName`"},
	OperationUnloadingPointName:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationUnloadingPointName`"},
	OperationPersonResponsible:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OperationPersonResponsible`"},
	DeliveryTimeInDays:             whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`DeliveryTimeInDays`"},
	MaintOrderOperationDuration:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrderOperationDuration`"},
	MaintOrdOperationDurationUnit:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOperationDurationUnit`"},
	OpBscStartDateConstraintType:   whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpBscStartDateConstraintType`"},
	OpBscEndDateConstraintType:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpBscEndDateConstraintType`"},
	MaintOrdOperationWorkDuration:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOperationWorkDuration`"},
	MaintOrdOpWorkDurationUnit:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOpWorkDurationUnit`"},
	MaintOrdOpConstraintStrtDteTme: whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOpConstraintStrtDteTme`"},
	ConstraintDateForBscStartDate:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ConstraintDateForBscStartDate`"},
	ConstraintTimeForBscStartTime:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ConstraintTimeForBscStartTime`"},
	MaintOrdOpCstrtFinishDteTme:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOpCstrtFinishDteTme`"},
	ConstraintDateForBscFinishDate: whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ConstraintDateForBscFinishDate`"},
	ConstraintTimeForBscFinishTime: whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ConstraintTimeForBscFinishTime`"},
	MaintOrdOperationExecutionRate: whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOperationExecutionRate`"},
	Equipment:                      whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`Equipment`"},
	FunctionalLocation:             whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`FunctionalLocation`"},
	MaintenanceActivityType:        whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintenanceActivityType`"},
	BusinessArea:                   whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`BusinessArea`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ProfitCenter`"},
	FunctionalArea:                 whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`FunctionalArea`"},
	MaintControllingObjectClass:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintControllingObjectClass`"},
	WrkCtrIntCapRqmtsDistr:         whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`WrkCtrIntCapRqmtsDistr`"},
	MaintOrdOperationOverheadCode:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOperationOverheadCode`"},
	MaintOrderOperationQuantity:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrderOperationQuantity`"},
	MaintOrdOperationQuantityUnit:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOperationQuantityUnit`"},
	Assembly:                       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`Assembly`"},
	MaintOperationExecStageCode:    whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOperationExecStageCode`"},
	WBSElement:                     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`WBSElement`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`sap_maintenance_order_operation_data`.`IsMarkedForDeletion`"},
	MaintOrderOperationInternalID:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrderOperationInternalID`"},
	MaintenanceObjectListItem:      whereHelpernull_Int{field: "`sap_maintenance_order_operation_data`.`MaintenanceObjectListItem`"},
	PurchaseRequisition:            whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`PurchaseRequisition`"},
	PurchaseRequisitionItem:        whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`PurchaseRequisitionItem`"},
	OpErlstSchedldExecStrtDte:      whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpErlstSchedldExecStrtDte`"},
	OpErlstSchedldExecStrtTme:      whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpErlstSchedldExecStrtTme`"},
	OpErlstSchedldExecEndDte:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpErlstSchedldExecEndDte`"},
	OpErlstSchedldExecEndTme:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpErlstSchedldExecEndTme`"},
	OpLtstSchedldExecStrtDte:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpLtstSchedldExecStrtDte`"},
	OpLtstSchedldExecStrtTme:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpLtstSchedldExecStrtTme`"},
	OpLtstSchedldExecEndDte:        whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpLtstSchedldExecEndDte`"},
	OpLtstSchedldExecEndTme:        whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpLtstSchedldExecEndTme`"},
	OpActualExecutionStartDate:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpActualExecutionStartDate`"},
	OpActualExecutionStartTime:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpActualExecutionStartTime`"},
	OpActualExecutionEndDate:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpActualExecutionEndDate`"},
	OpActualExecutionEndTime:       whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`OpActualExecutionEndTime`"},
	ForecastWorkQuantity:           whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ForecastWorkQuantity`"},
	ActualWorkQuantity:             whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`ActualWorkQuantity`"},
	MaintOrdOpProcessPhaseCode:     whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOpProcessPhaseCode`"},
	MaintOrdOpProcessSubPhaseCode:  whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`MaintOrdOpProcessSubPhaseCode`"},
	SystemStatusText:               whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`SystemStatusText`"},
	UserStatusText:                 whereHelpernull_String{field: "`sap_maintenance_order_operation_data`.`UserStatusText`"},
}

// SapMaintenanceOrderOperationDatumRels is where relationship names are stored.
var SapMaintenanceOrderOperationDatumRels = struct {
	MaintenanceOrderSapMaintenanceOrderHeaderDatum string
}{
	MaintenanceOrderSapMaintenanceOrderHeaderDatum: "MaintenanceOrderSapMaintenanceOrderHeaderDatum",
}

// sapMaintenanceOrderOperationDatumR is where relationships are stored.
type sapMaintenanceOrderOperationDatumR struct {
	MaintenanceOrderSapMaintenanceOrderHeaderDatum *SapMaintenanceOrderHeaderDatum `boil:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" json:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" toml:"MaintenanceOrderSapMaintenanceOrderHeaderDatum" yaml:"MaintenanceOrderSapMaintenanceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceOrderOperationDatumR) NewStruct() *sapMaintenanceOrderOperationDatumR {
	return &sapMaintenanceOrderOperationDatumR{}
}

// sapMaintenanceOrderOperationDatumL is where Load methods for each relationship are stored.
type sapMaintenanceOrderOperationDatumL struct{}

var (
	sapMaintenanceOrderOperationDatumAllColumns            = []string{"MaintenanceOrder", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "OperationControlKey", "OperationWorkCenterInternalID", "WorkCenter", "Plant", "OperationStandardTextCode", "OperationDescription", "MaintOrderRoutingNumber", "MaintenanceOrderRoutingNode", "SuperiorOperationInternalID", "OperationWorkCenterTypeCode", "Language", "NumberOfTimeTickets", "OperationPurgInfoRecdSearchTxt", "OperationSupplier", "CostElement", "OperationPurchasingInfoRecord", "PurchasingOrganization", "PurchasingGroup", "MaterialGroup", "OpPurchaseOutlineAgreement", "OpPurchaseOutlineAgreementItem", "OperationRequisitionerName", "OperationTrackingNumber", "NumberOfCapacities", "OperationWorkPercent", "OperationCalculationControl", "ActivityType", "OperationSystemCondition", "OperationGoodsRecipientName", "OperationUnloadingPointName", "OperationPersonResponsible", "DeliveryTimeInDays", "MaintOrderOperationDuration", "MaintOrdOperationDurationUnit", "OpBscStartDateConstraintType", "OpBscEndDateConstraintType", "MaintOrdOperationWorkDuration", "MaintOrdOpWorkDurationUnit", "MaintOrdOpConstraintStrtDteTme", "ConstraintDateForBscStartDate", "ConstraintTimeForBscStartTime", "MaintOrdOpCstrtFinishDteTme", "ConstraintDateForBscFinishDate", "ConstraintTimeForBscFinishTime", "MaintOrdOperationExecutionRate", "Equipment", "FunctionalLocation", "MaintenanceActivityType", "BusinessArea", "ProfitCenter", "FunctionalArea", "MaintControllingObjectClass", "WrkCtrIntCapRqmtsDistr", "MaintOrdOperationOverheadCode", "MaintOrderOperationQuantity", "MaintOrdOperationQuantityUnit", "Assembly", "MaintOperationExecStageCode", "WBSElement", "IsMarkedForDeletion", "MaintOrderOperationInternalID", "MaintenanceObjectListItem", "PurchaseRequisition", "PurchaseRequisitionItem", "OpErlstSchedldExecStrtDte", "OpErlstSchedldExecStrtTme", "OpErlstSchedldExecEndDte", "OpErlstSchedldExecEndTme", "OpLtstSchedldExecStrtDte", "OpLtstSchedldExecStrtTme", "OpLtstSchedldExecEndDte", "OpLtstSchedldExecEndTme", "OpActualExecutionStartDate", "OpActualExecutionStartTime", "OpActualExecutionEndDate", "OpActualExecutionEndTime", "ForecastWorkQuantity", "ActualWorkQuantity", "MaintOrdOpProcessPhaseCode", "MaintOrdOpProcessSubPhaseCode", "SystemStatusText", "UserStatusText"}
	sapMaintenanceOrderOperationDatumColumnsWithoutDefault = []string{"MaintenanceOrder", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation", "OperationControlKey", "OperationWorkCenterInternalID", "WorkCenter", "Plant", "OperationStandardTextCode", "OperationDescription", "MaintOrderRoutingNumber", "MaintenanceOrderRoutingNode", "SuperiorOperationInternalID", "OperationWorkCenterTypeCode", "Language", "NumberOfTimeTickets", "OperationPurgInfoRecdSearchTxt", "OperationSupplier", "CostElement", "OperationPurchasingInfoRecord", "PurchasingOrganization", "PurchasingGroup", "MaterialGroup", "OpPurchaseOutlineAgreement", "OpPurchaseOutlineAgreementItem", "OperationRequisitionerName", "OperationTrackingNumber", "NumberOfCapacities", "OperationWorkPercent", "OperationCalculationControl", "ActivityType", "OperationSystemCondition", "OperationGoodsRecipientName", "OperationUnloadingPointName", "OperationPersonResponsible", "DeliveryTimeInDays", "MaintOrderOperationDuration", "MaintOrdOperationDurationUnit", "OpBscStartDateConstraintType", "OpBscEndDateConstraintType", "MaintOrdOperationWorkDuration", "MaintOrdOpWorkDurationUnit", "MaintOrdOpConstraintStrtDteTme", "ConstraintDateForBscStartDate", "ConstraintTimeForBscStartTime", "MaintOrdOpCstrtFinishDteTme", "ConstraintDateForBscFinishDate", "ConstraintTimeForBscFinishTime", "MaintOrdOperationExecutionRate", "Equipment", "FunctionalLocation", "MaintenanceActivityType", "BusinessArea", "ProfitCenter", "FunctionalArea", "MaintControllingObjectClass", "WrkCtrIntCapRqmtsDistr", "MaintOrdOperationOverheadCode", "MaintOrderOperationQuantity", "MaintOrdOperationQuantityUnit", "Assembly", "MaintOperationExecStageCode", "WBSElement", "IsMarkedForDeletion", "MaintOrderOperationInternalID", "MaintenanceObjectListItem", "PurchaseRequisition", "PurchaseRequisitionItem", "OpErlstSchedldExecStrtDte", "OpErlstSchedldExecStrtTme", "OpErlstSchedldExecEndDte", "OpErlstSchedldExecEndTme", "OpLtstSchedldExecStrtDte", "OpLtstSchedldExecStrtTme", "OpLtstSchedldExecEndDte", "OpLtstSchedldExecEndTme", "OpActualExecutionStartDate", "OpActualExecutionStartTime", "OpActualExecutionEndDate", "OpActualExecutionEndTime", "ForecastWorkQuantity", "ActualWorkQuantity", "MaintOrdOpProcessPhaseCode", "MaintOrdOpProcessSubPhaseCode", "SystemStatusText", "UserStatusText"}
	sapMaintenanceOrderOperationDatumColumnsWithDefault    = []string{}
	sapMaintenanceOrderOperationDatumPrimaryKeyColumns     = []string{"MaintenanceOrder", "MaintenanceOrderOperation", "MaintenanceOrderSubOperation"}
	sapMaintenanceOrderOperationDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceOrderOperationDatumSlice is an alias for a slice of pointers to SapMaintenanceOrderOperationDatum.
	// This should almost always be used instead of []SapMaintenanceOrderOperationDatum.
	SapMaintenanceOrderOperationDatumSlice []*SapMaintenanceOrderOperationDatum
	// SapMaintenanceOrderOperationDatumHook is the signature for custom SapMaintenanceOrderOperationDatum hook methods
	SapMaintenanceOrderOperationDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceOrderOperationDatum) error

	sapMaintenanceOrderOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceOrderOperationDatumType                 = reflect.TypeOf(&SapMaintenanceOrderOperationDatum{})
	sapMaintenanceOrderOperationDatumMapping              = queries.MakeStructMapping(sapMaintenanceOrderOperationDatumType)
	sapMaintenanceOrderOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, sapMaintenanceOrderOperationDatumPrimaryKeyColumns)
	sapMaintenanceOrderOperationDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceOrderOperationDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceOrderOperationDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceOrderOperationDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceOrderOperationDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceOrderOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceOrderOperationDatumAfterSelectHooks []SapMaintenanceOrderOperationDatumHook

var sapMaintenanceOrderOperationDatumBeforeInsertHooks []SapMaintenanceOrderOperationDatumHook
var sapMaintenanceOrderOperationDatumAfterInsertHooks []SapMaintenanceOrderOperationDatumHook

var sapMaintenanceOrderOperationDatumBeforeUpdateHooks []SapMaintenanceOrderOperationDatumHook
var sapMaintenanceOrderOperationDatumAfterUpdateHooks []SapMaintenanceOrderOperationDatumHook

var sapMaintenanceOrderOperationDatumBeforeDeleteHooks []SapMaintenanceOrderOperationDatumHook
var sapMaintenanceOrderOperationDatumAfterDeleteHooks []SapMaintenanceOrderOperationDatumHook

var sapMaintenanceOrderOperationDatumBeforeUpsertHooks []SapMaintenanceOrderOperationDatumHook
var sapMaintenanceOrderOperationDatumAfterUpsertHooks []SapMaintenanceOrderOperationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceOrderOperationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceOrderOperationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceOrderOperationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceOrderOperationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceOrderOperationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceOrderOperationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceOrderOperationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceOrderOperationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceOrderOperationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceOrderOperationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceOrderOperationDatumHook registers your hook function for all future operations.
func AddSapMaintenanceOrderOperationDatumHook(hookPoint boil.HookPoint, sapMaintenanceOrderOperationDatumHook SapMaintenanceOrderOperationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceOrderOperationDatumAfterSelectHooks = append(sapMaintenanceOrderOperationDatumAfterSelectHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceOrderOperationDatumBeforeInsertHooks = append(sapMaintenanceOrderOperationDatumBeforeInsertHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceOrderOperationDatumAfterInsertHooks = append(sapMaintenanceOrderOperationDatumAfterInsertHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceOrderOperationDatumBeforeUpdateHooks = append(sapMaintenanceOrderOperationDatumBeforeUpdateHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceOrderOperationDatumAfterUpdateHooks = append(sapMaintenanceOrderOperationDatumAfterUpdateHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceOrderOperationDatumBeforeDeleteHooks = append(sapMaintenanceOrderOperationDatumBeforeDeleteHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceOrderOperationDatumAfterDeleteHooks = append(sapMaintenanceOrderOperationDatumAfterDeleteHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceOrderOperationDatumBeforeUpsertHooks = append(sapMaintenanceOrderOperationDatumBeforeUpsertHooks, sapMaintenanceOrderOperationDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceOrderOperationDatumAfterUpsertHooks = append(sapMaintenanceOrderOperationDatumAfterUpsertHooks, sapMaintenanceOrderOperationDatumHook)
	}
}

// One returns a single sapMaintenanceOrderOperationDatum record from the query.
func (q sapMaintenanceOrderOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceOrderOperationDatum, error) {
	o := &SapMaintenanceOrderOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_order_operation_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceOrderOperationDatum records from the query.
func (q sapMaintenanceOrderOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceOrderOperationDatumSlice, error) {
	var o []*SapMaintenanceOrderOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceOrderOperationDatum slice")
	}

	if len(sapMaintenanceOrderOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceOrderOperationDatum records in the query.
func (q sapMaintenanceOrderOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_order_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceOrderOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_order_operation_data exists")
	}

	return count > 0, nil
}

// MaintenanceOrderSapMaintenanceOrderHeaderDatum pointed to by the foreign key.
func (o *SapMaintenanceOrderOperationDatum) MaintenanceOrderSapMaintenanceOrderHeaderDatum(mods ...qm.QueryMod) sapMaintenanceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenanceOrder` = ?", o.MaintenanceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenanceOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_order_header_data`")

	return query
}

// LoadMaintenanceOrderSapMaintenanceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenanceOrderOperationDatumL) LoadMaintenanceOrderSapMaintenanceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceOrderOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceOrderOperationDatum
	var object *SapMaintenanceOrderOperationDatum

	if singular {
		object = maybeSapMaintenanceOrderOperationDatum.(*SapMaintenanceOrderOperationDatum)
	} else {
		slice = *maybeSapMaintenanceOrderOperationDatum.(*[]*SapMaintenanceOrderOperationDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceOrderOperationDatumR{}
		}
		args = append(args, object.MaintenanceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceOrderOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceOrder {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_order_header_data`),
		qm.WhereIn(`sap_maintenance_order_header_data.MaintenanceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenanceOrderHeaderDatum")
	}

	var resultSlice []*SapMaintenanceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenanceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_order_header_data")
	}

	if len(sapMaintenanceOrderOperationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenanceOrderHeaderDatumR{}
		}
		foreign.R.MaintenanceOrderSapMaintenanceOrderOperationData = append(foreign.R.MaintenanceOrderSapMaintenanceOrderOperationData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenanceOrder == foreign.MaintenanceOrder {
				local.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenanceOrderHeaderDatumR{}
				}
				foreign.R.MaintenanceOrderSapMaintenanceOrderOperationData = append(foreign.R.MaintenanceOrderSapMaintenanceOrderOperationData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenanceOrderSapMaintenanceOrderHeaderDatum of the sapMaintenanceOrderOperationDatum to the related item.
// Sets o.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum to related.
// Adds o to related.R.MaintenanceOrderSapMaintenanceOrderOperationData.
func (o *SapMaintenanceOrderOperationDatum) SetMaintenanceOrderSapMaintenanceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenanceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_order_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenanceOrder, o.MaintenanceOrder, o.MaintenanceOrderOperation, o.MaintenanceOrderSubOperation}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenanceOrder = related.MaintenanceOrder
	if o.R == nil {
		o.R = &sapMaintenanceOrderOperationDatumR{
			MaintenanceOrderSapMaintenanceOrderHeaderDatum: related,
		}
	} else {
		o.R.MaintenanceOrderSapMaintenanceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenanceOrderHeaderDatumR{
			MaintenanceOrderSapMaintenanceOrderOperationData: SapMaintenanceOrderOperationDatumSlice{o},
		}
	} else {
		related.R.MaintenanceOrderSapMaintenanceOrderOperationData = append(related.R.MaintenanceOrderSapMaintenanceOrderOperationData, o)
	}

	return nil
}

// SapMaintenanceOrderOperationData retrieves all the records using an executor.
func SapMaintenanceOrderOperationData(mods ...qm.QueryMod) sapMaintenanceOrderOperationDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_order_operation_data`"))
	return sapMaintenanceOrderOperationDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceOrderOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceOrderOperationDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, maintenanceOrderOperation string, maintenanceOrderSubOperation string, selectCols ...string) (*SapMaintenanceOrderOperationDatum, error) {
	sapMaintenanceOrderOperationDatumObj := &SapMaintenanceOrderOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_order_operation_data` where `MaintenanceOrder`=? AND `MaintenanceOrderOperation`=? AND `MaintenanceOrderSubOperation`=?", sel,
	)

	q := queries.Raw(query, maintenanceOrder, maintenanceOrderOperation, maintenanceOrderSubOperation)

	err := q.Bind(ctx, exec, sapMaintenanceOrderOperationDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_order_operation_data")
	}

	if err = sapMaintenanceOrderOperationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceOrderOperationDatumObj, err
	}

	return sapMaintenanceOrderOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceOrderOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_operation_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceOrderOperationDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderOperationDatumInsertCache[key]
	sapMaintenanceOrderOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceOrderOperationDatumAllColumns,
			sapMaintenanceOrderOperationDatumColumnsWithDefault,
			sapMaintenanceOrderOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_order_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_order_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_order_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_order_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceOrder,
		o.MaintenanceOrderOperation,
		o.MaintenanceOrderSubOperation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderOperationDatumInsertCacheMut.Lock()
		sapMaintenanceOrderOperationDatumInsertCache[key] = cache
		sapMaintenanceOrderOperationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceOrderOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceOrderOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceOrderOperationDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceOrderOperationDatumUpdateCache[key]
	sapMaintenanceOrderOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceOrderOperationDatumAllColumns,
			sapMaintenanceOrderOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_order_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_order_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, append(wl, sapMaintenanceOrderOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_order_operation_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_order_operation_data")
	}

	if !cached {
		sapMaintenanceOrderOperationDatumUpdateCacheMut.Lock()
		sapMaintenanceOrderOperationDatumUpdateCache[key] = cache
		sapMaintenanceOrderOperationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceOrderOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_order_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_order_operation_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceOrderOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_order_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceOrderOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceOrderOperationDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceOrderOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceOrderOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_order_operation_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceOrderOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceOrderOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceOrderOperationDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceOrderOperationDatumUpsertCache[key]
	sapMaintenanceOrderOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceOrderOperationDatumAllColumns,
			sapMaintenanceOrderOperationDatumColumnsWithDefault,
			sapMaintenanceOrderOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceOrderOperationDatumAllColumns,
			sapMaintenanceOrderOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_order_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_order_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_order_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_order_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceOrderOperationDatumType, sapMaintenanceOrderOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_order_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_order_operation_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceOrderOperationDatumUpsertCacheMut.Lock()
		sapMaintenanceOrderOperationDatumUpsertCache[key] = cache
		sapMaintenanceOrderOperationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceOrderOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceOrderOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceOrderOperationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceOrderOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_order_operation_data` WHERE `MaintenanceOrder`=? AND `MaintenanceOrderOperation`=? AND `MaintenanceOrderSubOperation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_order_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_order_operation_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceOrderOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceOrderOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_order_operation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_operation_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceOrderOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceOrderOperationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_order_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceOrderOperationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_order_operation_data")
	}

	if len(sapMaintenanceOrderOperationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceOrderOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceOrderOperationDatum(ctx, exec, o.MaintenanceOrder, o.MaintenanceOrderOperation, o.MaintenanceOrderSubOperation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceOrderOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceOrderOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceOrderOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_order_operation_data`.* FROM `sap_maintenance_order_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceOrderOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceOrderOperationDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceOrderOperationDatumExists checks if the SapMaintenanceOrderOperationDatum row exists.
func SapMaintenanceOrderOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceOrder string, maintenanceOrderOperation string, maintenanceOrderSubOperation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_order_operation_data` where `MaintenanceOrder`=? AND `MaintenanceOrderOperation`=? AND `MaintenanceOrderSubOperation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceOrder, maintenanceOrderOperation, maintenanceOrderSubOperation)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceOrder, maintenanceOrderOperation, maintenanceOrderSubOperation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_order_operation_data exists")
	}

	return exists, nil
}
