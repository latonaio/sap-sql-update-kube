// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceConfirmationItemDatum is an object representing the database table.
type SapServiceConfirmationItemDatum struct {
	ServiceConfirmation           string      `boil:"ServiceConfirmation" json:"ServiceConfirmation" toml:"ServiceConfirmation" yaml:"ServiceConfirmation"`
	ServiceConfirmationItem       string      `boil:"ServiceConfirmationItem" json:"ServiceConfirmationItem" toml:"ServiceConfirmationItem" yaml:"ServiceConfirmationItem"`
	ServiceConfItemDescription    null.String `boil:"ServiceConfItemDescription" json:"ServiceConfItemDescription,omitempty" toml:"ServiceConfItemDescription" yaml:"ServiceConfItemDescription,omitempty"`
	ServiceObjectType             null.String `boil:"ServiceObjectType" json:"ServiceObjectType,omitempty" toml:"ServiceObjectType" yaml:"ServiceObjectType,omitempty"`
	ServiceDocumentItemObjectType null.String `boil:"ServiceDocumentItemObjectType" json:"ServiceDocumentItemObjectType,omitempty" toml:"ServiceDocumentItemObjectType" yaml:"ServiceDocumentItemObjectType,omitempty"`
	Language                      null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Product                       null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	Quantity                      null.String `boil:"Quantity" json:"Quantity,omitempty" toml:"Quantity" yaml:"Quantity,omitempty"`
	QuantityUnit                  null.String `boil:"QuantityUnit" json:"QuantityUnit,omitempty" toml:"QuantityUnit" yaml:"QuantityUnit,omitempty"`
	ActualServiceDuration         null.String `boil:"ActualServiceDuration" json:"ActualServiceDuration,omitempty" toml:"ActualServiceDuration" yaml:"ActualServiceDuration,omitempty"`
	ActualServiceDurationUnit     null.String `boil:"ActualServiceDurationUnit" json:"ActualServiceDurationUnit,omitempty" toml:"ActualServiceDurationUnit" yaml:"ActualServiceDurationUnit,omitempty"`
	ServiceConfItemCategory       null.String `boil:"ServiceConfItemCategory" json:"ServiceConfItemCategory,omitempty" toml:"ServiceConfItemCategory" yaml:"ServiceConfItemCategory,omitempty"`
	ServiceConfItemIsCompleted    null.String `boil:"ServiceConfItemIsCompleted" json:"ServiceConfItemIsCompleted,omitempty" toml:"ServiceConfItemIsCompleted" yaml:"ServiceConfItemIsCompleted,omitempty"`
	ExecutingServiceEmployee      null.String `boil:"ExecutingServiceEmployee" json:"ExecutingServiceEmployee,omitempty" toml:"ExecutingServiceEmployee" yaml:"ExecutingServiceEmployee,omitempty"`
	ServicePerformer              null.String `boil:"ServicePerformer" json:"ServicePerformer,omitempty" toml:"ServicePerformer" yaml:"ServicePerformer,omitempty"`
	BillableControl               null.String `boil:"BillableControl" json:"BillableControl,omitempty" toml:"BillableControl" yaml:"BillableControl,omitempty"`
	ReferenceServiceOrder         null.String `boil:"ReferenceServiceOrder" json:"ReferenceServiceOrder,omitempty" toml:"ReferenceServiceOrder" yaml:"ReferenceServiceOrder,omitempty"`
	ReferenceServiceOrderItem     null.String `boil:"ReferenceServiceOrderItem" json:"ReferenceServiceOrderItem,omitempty" toml:"ReferenceServiceOrderItem" yaml:"ReferenceServiceOrderItem,omitempty"`
	ParentServiceConfItem         null.String `boil:"ParentServiceConfItem" json:"ParentServiceConfItem,omitempty" toml:"ParentServiceConfItem" yaml:"ParentServiceConfItem,omitempty"`
	ActualServiceStartDateTime    null.String `boil:"ActualServiceStartDateTime" json:"ActualServiceStartDateTime,omitempty" toml:"ActualServiceStartDateTime" yaml:"ActualServiceStartDateTime,omitempty"`
	ActualServiceEndDateTime      null.String `boil:"ActualServiceEndDateTime" json:"ActualServiceEndDateTime,omitempty" toml:"ActualServiceEndDateTime" yaml:"ActualServiceEndDateTime,omitempty"`
	ServicesRenderedDate          null.String `boil:"ServicesRenderedDate" json:"ServicesRenderedDate,omitempty" toml:"ServicesRenderedDate" yaml:"ServicesRenderedDate,omitempty"`
	TimeSheetOvertimeCategory     null.String `boil:"TimeSheetOvertimeCategory" json:"TimeSheetOvertimeCategory,omitempty" toml:"TimeSheetOvertimeCategory" yaml:"TimeSheetOvertimeCategory,omitempty"`
	RespyMgmtServiceTeam          null.String `boil:"RespyMgmtServiceTeam" json:"RespyMgmtServiceTeam,omitempty" toml:"RespyMgmtServiceTeam" yaml:"RespyMgmtServiceTeam,omitempty"`
	RespyMgmtServiceTeamName      null.String `boil:"RespyMgmtServiceTeamName" json:"RespyMgmtServiceTeamName,omitempty" toml:"RespyMgmtServiceTeamName" yaml:"RespyMgmtServiceTeamName,omitempty"`

	R *sapServiceConfirmationItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceConfirmationItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceConfirmationItemDatumColumns = struct {
	ServiceConfirmation           string
	ServiceConfirmationItem       string
	ServiceConfItemDescription    string
	ServiceObjectType             string
	ServiceDocumentItemObjectType string
	Language                      string
	Product                       string
	Quantity                      string
	QuantityUnit                  string
	ActualServiceDuration         string
	ActualServiceDurationUnit     string
	ServiceConfItemCategory       string
	ServiceConfItemIsCompleted    string
	ExecutingServiceEmployee      string
	ServicePerformer              string
	BillableControl               string
	ReferenceServiceOrder         string
	ReferenceServiceOrderItem     string
	ParentServiceConfItem         string
	ActualServiceStartDateTime    string
	ActualServiceEndDateTime      string
	ServicesRenderedDate          string
	TimeSheetOvertimeCategory     string
	RespyMgmtServiceTeam          string
	RespyMgmtServiceTeamName      string
}{
	ServiceConfirmation:           "ServiceConfirmation",
	ServiceConfirmationItem:       "ServiceConfirmationItem",
	ServiceConfItemDescription:    "ServiceConfItemDescription",
	ServiceObjectType:             "ServiceObjectType",
	ServiceDocumentItemObjectType: "ServiceDocumentItemObjectType",
	Language:                      "Language",
	Product:                       "Product",
	Quantity:                      "Quantity",
	QuantityUnit:                  "QuantityUnit",
	ActualServiceDuration:         "ActualServiceDuration",
	ActualServiceDurationUnit:     "ActualServiceDurationUnit",
	ServiceConfItemCategory:       "ServiceConfItemCategory",
	ServiceConfItemIsCompleted:    "ServiceConfItemIsCompleted",
	ExecutingServiceEmployee:      "ExecutingServiceEmployee",
	ServicePerformer:              "ServicePerformer",
	BillableControl:               "BillableControl",
	ReferenceServiceOrder:         "ReferenceServiceOrder",
	ReferenceServiceOrderItem:     "ReferenceServiceOrderItem",
	ParentServiceConfItem:         "ParentServiceConfItem",
	ActualServiceStartDateTime:    "ActualServiceStartDateTime",
	ActualServiceEndDateTime:      "ActualServiceEndDateTime",
	ServicesRenderedDate:          "ServicesRenderedDate",
	TimeSheetOvertimeCategory:     "TimeSheetOvertimeCategory",
	RespyMgmtServiceTeam:          "RespyMgmtServiceTeam",
	RespyMgmtServiceTeamName:      "RespyMgmtServiceTeamName",
}

var SapServiceConfirmationItemDatumTableColumns = struct {
	ServiceConfirmation           string
	ServiceConfirmationItem       string
	ServiceConfItemDescription    string
	ServiceObjectType             string
	ServiceDocumentItemObjectType string
	Language                      string
	Product                       string
	Quantity                      string
	QuantityUnit                  string
	ActualServiceDuration         string
	ActualServiceDurationUnit     string
	ServiceConfItemCategory       string
	ServiceConfItemIsCompleted    string
	ExecutingServiceEmployee      string
	ServicePerformer              string
	BillableControl               string
	ReferenceServiceOrder         string
	ReferenceServiceOrderItem     string
	ParentServiceConfItem         string
	ActualServiceStartDateTime    string
	ActualServiceEndDateTime      string
	ServicesRenderedDate          string
	TimeSheetOvertimeCategory     string
	RespyMgmtServiceTeam          string
	RespyMgmtServiceTeamName      string
}{
	ServiceConfirmation:           "sap_service_confirmation_item_data.ServiceConfirmation",
	ServiceConfirmationItem:       "sap_service_confirmation_item_data.ServiceConfirmationItem",
	ServiceConfItemDescription:    "sap_service_confirmation_item_data.ServiceConfItemDescription",
	ServiceObjectType:             "sap_service_confirmation_item_data.ServiceObjectType",
	ServiceDocumentItemObjectType: "sap_service_confirmation_item_data.ServiceDocumentItemObjectType",
	Language:                      "sap_service_confirmation_item_data.Language",
	Product:                       "sap_service_confirmation_item_data.Product",
	Quantity:                      "sap_service_confirmation_item_data.Quantity",
	QuantityUnit:                  "sap_service_confirmation_item_data.QuantityUnit",
	ActualServiceDuration:         "sap_service_confirmation_item_data.ActualServiceDuration",
	ActualServiceDurationUnit:     "sap_service_confirmation_item_data.ActualServiceDurationUnit",
	ServiceConfItemCategory:       "sap_service_confirmation_item_data.ServiceConfItemCategory",
	ServiceConfItemIsCompleted:    "sap_service_confirmation_item_data.ServiceConfItemIsCompleted",
	ExecutingServiceEmployee:      "sap_service_confirmation_item_data.ExecutingServiceEmployee",
	ServicePerformer:              "sap_service_confirmation_item_data.ServicePerformer",
	BillableControl:               "sap_service_confirmation_item_data.BillableControl",
	ReferenceServiceOrder:         "sap_service_confirmation_item_data.ReferenceServiceOrder",
	ReferenceServiceOrderItem:     "sap_service_confirmation_item_data.ReferenceServiceOrderItem",
	ParentServiceConfItem:         "sap_service_confirmation_item_data.ParentServiceConfItem",
	ActualServiceStartDateTime:    "sap_service_confirmation_item_data.ActualServiceStartDateTime",
	ActualServiceEndDateTime:      "sap_service_confirmation_item_data.ActualServiceEndDateTime",
	ServicesRenderedDate:          "sap_service_confirmation_item_data.ServicesRenderedDate",
	TimeSheetOvertimeCategory:     "sap_service_confirmation_item_data.TimeSheetOvertimeCategory",
	RespyMgmtServiceTeam:          "sap_service_confirmation_item_data.RespyMgmtServiceTeam",
	RespyMgmtServiceTeamName:      "sap_service_confirmation_item_data.RespyMgmtServiceTeamName",
}

// Generated where

var SapServiceConfirmationItemDatumWhere = struct {
	ServiceConfirmation           whereHelperstring
	ServiceConfirmationItem       whereHelperstring
	ServiceConfItemDescription    whereHelpernull_String
	ServiceObjectType             whereHelpernull_String
	ServiceDocumentItemObjectType whereHelpernull_String
	Language                      whereHelpernull_String
	Product                       whereHelpernull_String
	Quantity                      whereHelpernull_String
	QuantityUnit                  whereHelpernull_String
	ActualServiceDuration         whereHelpernull_String
	ActualServiceDurationUnit     whereHelpernull_String
	ServiceConfItemCategory       whereHelpernull_String
	ServiceConfItemIsCompleted    whereHelpernull_String
	ExecutingServiceEmployee      whereHelpernull_String
	ServicePerformer              whereHelpernull_String
	BillableControl               whereHelpernull_String
	ReferenceServiceOrder         whereHelpernull_String
	ReferenceServiceOrderItem     whereHelpernull_String
	ParentServiceConfItem         whereHelpernull_String
	ActualServiceStartDateTime    whereHelpernull_String
	ActualServiceEndDateTime      whereHelpernull_String
	ServicesRenderedDate          whereHelpernull_String
	TimeSheetOvertimeCategory     whereHelpernull_String
	RespyMgmtServiceTeam          whereHelpernull_String
	RespyMgmtServiceTeamName      whereHelpernull_String
}{
	ServiceConfirmation:           whereHelperstring{field: "`sap_service_confirmation_item_data`.`ServiceConfirmation`"},
	ServiceConfirmationItem:       whereHelperstring{field: "`sap_service_confirmation_item_data`.`ServiceConfirmationItem`"},
	ServiceConfItemDescription:    whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServiceConfItemDescription`"},
	ServiceObjectType:             whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServiceObjectType`"},
	ServiceDocumentItemObjectType: whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServiceDocumentItemObjectType`"},
	Language:                      whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`Language`"},
	Product:                       whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`Product`"},
	Quantity:                      whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`Quantity`"},
	QuantityUnit:                  whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`QuantityUnit`"},
	ActualServiceDuration:         whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ActualServiceDuration`"},
	ActualServiceDurationUnit:     whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ActualServiceDurationUnit`"},
	ServiceConfItemCategory:       whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServiceConfItemCategory`"},
	ServiceConfItemIsCompleted:    whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServiceConfItemIsCompleted`"},
	ExecutingServiceEmployee:      whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ExecutingServiceEmployee`"},
	ServicePerformer:              whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServicePerformer`"},
	BillableControl:               whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`BillableControl`"},
	ReferenceServiceOrder:         whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ReferenceServiceOrder`"},
	ReferenceServiceOrderItem:     whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ReferenceServiceOrderItem`"},
	ParentServiceConfItem:         whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ParentServiceConfItem`"},
	ActualServiceStartDateTime:    whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ActualServiceStartDateTime`"},
	ActualServiceEndDateTime:      whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ActualServiceEndDateTime`"},
	ServicesRenderedDate:          whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`ServicesRenderedDate`"},
	TimeSheetOvertimeCategory:     whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`TimeSheetOvertimeCategory`"},
	RespyMgmtServiceTeam:          whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`RespyMgmtServiceTeam`"},
	RespyMgmtServiceTeamName:      whereHelpernull_String{field: "`sap_service_confirmation_item_data`.`RespyMgmtServiceTeamName`"},
}

// SapServiceConfirmationItemDatumRels is where relationship names are stored.
var SapServiceConfirmationItemDatumRels = struct {
	ServiceConfirmationSapServiceConfirmationHeaderDatum            string
	ServiceConfirmationSapServiceConfirmationItemPricingElementData string
}{
	ServiceConfirmationSapServiceConfirmationHeaderDatum:            "ServiceConfirmationSapServiceConfirmationHeaderDatum",
	ServiceConfirmationSapServiceConfirmationItemPricingElementData: "ServiceConfirmationSapServiceConfirmationItemPricingElementData",
}

// sapServiceConfirmationItemDatumR is where relationships are stored.
type sapServiceConfirmationItemDatumR struct {
	ServiceConfirmationSapServiceConfirmationHeaderDatum            *SapServiceConfirmationHeaderDatum                 `boil:"ServiceConfirmationSapServiceConfirmationHeaderDatum" json:"ServiceConfirmationSapServiceConfirmationHeaderDatum" toml:"ServiceConfirmationSapServiceConfirmationHeaderDatum" yaml:"ServiceConfirmationSapServiceConfirmationHeaderDatum"`
	ServiceConfirmationSapServiceConfirmationItemPricingElementData SapServiceConfirmationItemPricingElementDatumSlice `boil:"ServiceConfirmationSapServiceConfirmationItemPricingElementData" json:"ServiceConfirmationSapServiceConfirmationItemPricingElementData" toml:"ServiceConfirmationSapServiceConfirmationItemPricingElementData" yaml:"ServiceConfirmationSapServiceConfirmationItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapServiceConfirmationItemDatumR) NewStruct() *sapServiceConfirmationItemDatumR {
	return &sapServiceConfirmationItemDatumR{}
}

func (r *sapServiceConfirmationItemDatumR) GetServiceConfirmationSapServiceConfirmationHeaderDatum() *SapServiceConfirmationHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ServiceConfirmationSapServiceConfirmationHeaderDatum
}

func (r *sapServiceConfirmationItemDatumR) GetServiceConfirmationSapServiceConfirmationItemPricingElementData() SapServiceConfirmationItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.ServiceConfirmationSapServiceConfirmationItemPricingElementData
}

// sapServiceConfirmationItemDatumL is where Load methods for each relationship are stored.
type sapServiceConfirmationItemDatumL struct{}

var (
	sapServiceConfirmationItemDatumAllColumns            = []string{"ServiceConfirmation", "ServiceConfirmationItem", "ServiceConfItemDescription", "ServiceObjectType", "ServiceDocumentItemObjectType", "Language", "Product", "Quantity", "QuantityUnit", "ActualServiceDuration", "ActualServiceDurationUnit", "ServiceConfItemCategory", "ServiceConfItemIsCompleted", "ExecutingServiceEmployee", "ServicePerformer", "BillableControl", "ReferenceServiceOrder", "ReferenceServiceOrderItem", "ParentServiceConfItem", "ActualServiceStartDateTime", "ActualServiceEndDateTime", "ServicesRenderedDate", "TimeSheetOvertimeCategory", "RespyMgmtServiceTeam", "RespyMgmtServiceTeamName"}
	sapServiceConfirmationItemDatumColumnsWithoutDefault = []string{"ServiceConfirmation", "ServiceConfirmationItem", "ServiceConfItemDescription", "ServiceObjectType", "ServiceDocumentItemObjectType", "Language", "Product", "Quantity", "QuantityUnit", "ActualServiceDuration", "ActualServiceDurationUnit", "ServiceConfItemCategory", "ServiceConfItemIsCompleted", "ExecutingServiceEmployee", "ServicePerformer", "BillableControl", "ReferenceServiceOrder", "ReferenceServiceOrderItem", "ParentServiceConfItem", "ActualServiceStartDateTime", "ActualServiceEndDateTime", "ServicesRenderedDate", "TimeSheetOvertimeCategory", "RespyMgmtServiceTeam", "RespyMgmtServiceTeamName"}
	sapServiceConfirmationItemDatumColumnsWithDefault    = []string{}
	sapServiceConfirmationItemDatumPrimaryKeyColumns     = []string{"ServiceConfirmation", "ServiceConfirmationItem"}
	sapServiceConfirmationItemDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceConfirmationItemDatumSlice is an alias for a slice of pointers to SapServiceConfirmationItemDatum.
	// This should almost always be used instead of []SapServiceConfirmationItemDatum.
	SapServiceConfirmationItemDatumSlice []*SapServiceConfirmationItemDatum
	// SapServiceConfirmationItemDatumHook is the signature for custom SapServiceConfirmationItemDatum hook methods
	SapServiceConfirmationItemDatumHook func(context.Context, boil.ContextExecutor, *SapServiceConfirmationItemDatum) error

	sapServiceConfirmationItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceConfirmationItemDatumType                 = reflect.TypeOf(&SapServiceConfirmationItemDatum{})
	sapServiceConfirmationItemDatumMapping              = queries.MakeStructMapping(sapServiceConfirmationItemDatumType)
	sapServiceConfirmationItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, sapServiceConfirmationItemDatumPrimaryKeyColumns)
	sapServiceConfirmationItemDatumInsertCacheMut       sync.RWMutex
	sapServiceConfirmationItemDatumInsertCache          = make(map[string]insertCache)
	sapServiceConfirmationItemDatumUpdateCacheMut       sync.RWMutex
	sapServiceConfirmationItemDatumUpdateCache          = make(map[string]updateCache)
	sapServiceConfirmationItemDatumUpsertCacheMut       sync.RWMutex
	sapServiceConfirmationItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceConfirmationItemDatumAfterSelectHooks []SapServiceConfirmationItemDatumHook

var sapServiceConfirmationItemDatumBeforeInsertHooks []SapServiceConfirmationItemDatumHook
var sapServiceConfirmationItemDatumAfterInsertHooks []SapServiceConfirmationItemDatumHook

var sapServiceConfirmationItemDatumBeforeUpdateHooks []SapServiceConfirmationItemDatumHook
var sapServiceConfirmationItemDatumAfterUpdateHooks []SapServiceConfirmationItemDatumHook

var sapServiceConfirmationItemDatumBeforeDeleteHooks []SapServiceConfirmationItemDatumHook
var sapServiceConfirmationItemDatumAfterDeleteHooks []SapServiceConfirmationItemDatumHook

var sapServiceConfirmationItemDatumBeforeUpsertHooks []SapServiceConfirmationItemDatumHook
var sapServiceConfirmationItemDatumAfterUpsertHooks []SapServiceConfirmationItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceConfirmationItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceConfirmationItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceConfirmationItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceConfirmationItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceConfirmationItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceConfirmationItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceConfirmationItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceConfirmationItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceConfirmationItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceConfirmationItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceConfirmationItemDatumHook registers your hook function for all future operations.
func AddSapServiceConfirmationItemDatumHook(hookPoint boil.HookPoint, sapServiceConfirmationItemDatumHook SapServiceConfirmationItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceConfirmationItemDatumAfterSelectHooks = append(sapServiceConfirmationItemDatumAfterSelectHooks, sapServiceConfirmationItemDatumHook)
	case boil.BeforeInsertHook:
		sapServiceConfirmationItemDatumBeforeInsertHooks = append(sapServiceConfirmationItemDatumBeforeInsertHooks, sapServiceConfirmationItemDatumHook)
	case boil.AfterInsertHook:
		sapServiceConfirmationItemDatumAfterInsertHooks = append(sapServiceConfirmationItemDatumAfterInsertHooks, sapServiceConfirmationItemDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceConfirmationItemDatumBeforeUpdateHooks = append(sapServiceConfirmationItemDatumBeforeUpdateHooks, sapServiceConfirmationItemDatumHook)
	case boil.AfterUpdateHook:
		sapServiceConfirmationItemDatumAfterUpdateHooks = append(sapServiceConfirmationItemDatumAfterUpdateHooks, sapServiceConfirmationItemDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceConfirmationItemDatumBeforeDeleteHooks = append(sapServiceConfirmationItemDatumBeforeDeleteHooks, sapServiceConfirmationItemDatumHook)
	case boil.AfterDeleteHook:
		sapServiceConfirmationItemDatumAfterDeleteHooks = append(sapServiceConfirmationItemDatumAfterDeleteHooks, sapServiceConfirmationItemDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceConfirmationItemDatumBeforeUpsertHooks = append(sapServiceConfirmationItemDatumBeforeUpsertHooks, sapServiceConfirmationItemDatumHook)
	case boil.AfterUpsertHook:
		sapServiceConfirmationItemDatumAfterUpsertHooks = append(sapServiceConfirmationItemDatumAfterUpsertHooks, sapServiceConfirmationItemDatumHook)
	}
}

// One returns a single sapServiceConfirmationItemDatum record from the query.
func (q sapServiceConfirmationItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceConfirmationItemDatum, error) {
	o := &SapServiceConfirmationItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_confirmation_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceConfirmationItemDatum records from the query.
func (q sapServiceConfirmationItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceConfirmationItemDatumSlice, error) {
	var o []*SapServiceConfirmationItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceConfirmationItemDatum slice")
	}

	if len(sapServiceConfirmationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceConfirmationItemDatum records in the query.
func (q sapServiceConfirmationItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_confirmation_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceConfirmationItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_confirmation_item_data exists")
	}

	return count > 0, nil
}

// ServiceConfirmationSapServiceConfirmationHeaderDatum pointed to by the foreign key.
func (o *SapServiceConfirmationItemDatum) ServiceConfirmationSapServiceConfirmationHeaderDatum(mods ...qm.QueryMod) sapServiceConfirmationHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceConfirmation` = ?", o.ServiceConfirmation),
	}

	queryMods = append(queryMods, mods...)

	return SapServiceConfirmationHeaderData(queryMods...)
}

// ServiceConfirmationSapServiceConfirmationItemPricingElementData retrieves all the sap_service_confirmation_item_pricing_element_datum's SapServiceConfirmationItemPricingElementData with an executor via ServiceConfirmation column.
func (o *SapServiceConfirmationItemDatum) ServiceConfirmationSapServiceConfirmationItemPricingElementData(mods ...qm.QueryMod) sapServiceConfirmationItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_service_confirmation_item_pricing_element_data`.`ServiceConfirmation`=?", o.ServiceConfirmation),
	)

	return SapServiceConfirmationItemPricingElementData(queryMods...)
}

// LoadServiceConfirmationSapServiceConfirmationHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceConfirmationItemDatumL) LoadServiceConfirmationSapServiceConfirmationHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationItemDatum
	var object *SapServiceConfirmationItemDatum

	if singular {
		object = maybeSapServiceConfirmationItemDatum.(*SapServiceConfirmationItemDatum)
	} else {
		slice = *maybeSapServiceConfirmationItemDatum.(*[]*SapServiceConfirmationItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationItemDatumR{}
		}
		args = append(args, object.ServiceConfirmation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_header_data`),
		qm.WhereIn(`sap_service_confirmation_header_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceConfirmationHeaderDatum")
	}

	var resultSlice []*SapServiceConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceConfirmationHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_header_data")
	}

	if len(sapServiceConfirmationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceConfirmationHeaderDatumR{}
		}
		foreign.R.ServiceConfirmationSapServiceConfirmationItemData = append(foreign.R.ServiceConfirmationSapServiceConfirmationItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationHeaderDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationItemData = append(foreign.R.ServiceConfirmationSapServiceConfirmationItemData, local)
				break
			}
		}
	}

	return nil
}

// LoadServiceConfirmationSapServiceConfirmationItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapServiceConfirmationItemDatumL) LoadServiceConfirmationSapServiceConfirmationItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceConfirmationItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceConfirmationItemDatum
	var object *SapServiceConfirmationItemDatum

	if singular {
		object = maybeSapServiceConfirmationItemDatum.(*SapServiceConfirmationItemDatum)
	} else {
		slice = *maybeSapServiceConfirmationItemDatum.(*[]*SapServiceConfirmationItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceConfirmationItemDatumR{}
		}
		args = append(args, object.ServiceConfirmation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceConfirmationItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceConfirmation {
					continue Outer
				}
			}

			args = append(args, obj.ServiceConfirmation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_confirmation_item_pricing_element_data`),
		qm.WhereIn(`sap_service_confirmation_item_pricing_element_data.ServiceConfirmation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_service_confirmation_item_pricing_element_data")
	}

	var resultSlice []*SapServiceConfirmationItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_service_confirmation_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_service_confirmation_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_confirmation_item_pricing_element_data")
	}

	if len(sapServiceConfirmationItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapServiceConfirmationItemPricingElementDatumR{}
			}
			foreign.R.ServiceConfirmationSapServiceConfirmationItemDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ServiceConfirmation == foreign.ServiceConfirmation {
				local.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData = append(local.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapServiceConfirmationItemPricingElementDatumR{}
				}
				foreign.R.ServiceConfirmationSapServiceConfirmationItemDatum = local
				break
			}
		}
	}

	return nil
}

// SetServiceConfirmationSapServiceConfirmationHeaderDatum of the sapServiceConfirmationItemDatum to the related item.
// Sets o.R.ServiceConfirmationSapServiceConfirmationHeaderDatum to related.
// Adds o to related.R.ServiceConfirmationSapServiceConfirmationItemData.
func (o *SapServiceConfirmationItemDatum) SetServiceConfirmationSapServiceConfirmationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceConfirmationHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_confirmation_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
		strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceConfirmation, o.ServiceConfirmation, o.ServiceConfirmationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceConfirmation = related.ServiceConfirmation
	if o.R == nil {
		o.R = &sapServiceConfirmationItemDatumR{
			ServiceConfirmationSapServiceConfirmationHeaderDatum: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceConfirmationHeaderDatumR{
			ServiceConfirmationSapServiceConfirmationItemData: SapServiceConfirmationItemDatumSlice{o},
		}
	} else {
		related.R.ServiceConfirmationSapServiceConfirmationItemData = append(related.R.ServiceConfirmationSapServiceConfirmationItemData, o)
	}

	return nil
}

// AddServiceConfirmationSapServiceConfirmationItemPricingElementData adds the given related objects to the existing relationships
// of the sap_service_confirmation_item_datum, optionally inserting them as new records.
// Appends related to o.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData.
// Sets related.R.ServiceConfirmationSapServiceConfirmationItemDatum appropriately.
func (o *SapServiceConfirmationItemDatum) AddServiceConfirmationSapServiceConfirmationItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapServiceConfirmationItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceConfirmation = o.ServiceConfirmation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_service_confirmation_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ServiceConfirmation"}),
				strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ServiceConfirmation, rel.ServiceConfirmation, rel.ServiceConfirmationItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceConfirmation = o.ServiceConfirmation
		}
	}

	if o.R == nil {
		o.R = &sapServiceConfirmationItemDatumR{
			ServiceConfirmationSapServiceConfirmationItemPricingElementData: related,
		}
	} else {
		o.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData = append(o.R.ServiceConfirmationSapServiceConfirmationItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapServiceConfirmationItemPricingElementDatumR{
				ServiceConfirmationSapServiceConfirmationItemDatum: o,
			}
		} else {
			rel.R.ServiceConfirmationSapServiceConfirmationItemDatum = o
		}
	}
	return nil
}

// SapServiceConfirmationItemData retrieves all the records using an executor.
func SapServiceConfirmationItemData(mods ...qm.QueryMod) sapServiceConfirmationItemDatumQuery {
	mods = append(mods, qm.From("`sap_service_confirmation_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_service_confirmation_item_data`.*"})
	}

	return sapServiceConfirmationItemDatumQuery{q}
}

// FindSapServiceConfirmationItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceConfirmationItemDatum(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string, serviceConfirmationItem string, selectCols ...string) (*SapServiceConfirmationItemDatum, error) {
	sapServiceConfirmationItemDatumObj := &SapServiceConfirmationItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_confirmation_item_data` where `ServiceConfirmation`=? AND `ServiceConfirmationItem`=?", sel,
	)

	q := queries.Raw(query, serviceConfirmation, serviceConfirmationItem)

	err := q.Bind(ctx, exec, sapServiceConfirmationItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_confirmation_item_data")
	}

	if err = sapServiceConfirmationItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceConfirmationItemDatumObj, err
	}

	return sapServiceConfirmationItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceConfirmationItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceConfirmationItemDatumInsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationItemDatumInsertCache[key]
	sapServiceConfirmationItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceConfirmationItemDatumAllColumns,
			sapServiceConfirmationItemDatumColumnsWithDefault,
			sapServiceConfirmationItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_confirmation_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_confirmation_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_confirmation_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_confirmation_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceConfirmation,
		o.ServiceConfirmationItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_item_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationItemDatumInsertCacheMut.Lock()
		sapServiceConfirmationItemDatumInsertCache[key] = cache
		sapServiceConfirmationItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceConfirmationItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceConfirmationItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceConfirmationItemDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceConfirmationItemDatumUpdateCache[key]
	sapServiceConfirmationItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceConfirmationItemDatumAllColumns,
			sapServiceConfirmationItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_confirmation_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_confirmation_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceConfirmationItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, append(wl, sapServiceConfirmationItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_confirmation_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_confirmation_item_data")
	}

	if !cached {
		sapServiceConfirmationItemDatumUpdateCacheMut.Lock()
		sapServiceConfirmationItemDatumUpdateCache[key] = cache
		sapServiceConfirmationItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceConfirmationItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_confirmation_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_confirmation_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceConfirmationItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_confirmation_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceConfirmationItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceConfirmationItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceConfirmationItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceConfirmationItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_confirmation_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceConfirmationItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceConfirmationItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceConfirmationItemDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceConfirmationItemDatumUpsertCache[key]
	sapServiceConfirmationItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceConfirmationItemDatumAllColumns,
			sapServiceConfirmationItemDatumColumnsWithDefault,
			sapServiceConfirmationItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceConfirmationItemDatumAllColumns,
			sapServiceConfirmationItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_confirmation_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_confirmation_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_confirmation_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_confirmation_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceConfirmationItemDatumType, sapServiceConfirmationItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_confirmation_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_confirmation_item_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceConfirmationItemDatumUpsertCacheMut.Lock()
		sapServiceConfirmationItemDatumUpsertCache[key] = cache
		sapServiceConfirmationItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceConfirmationItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceConfirmationItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceConfirmationItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceConfirmationItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_confirmation_item_data` WHERE `ServiceConfirmation`=? AND `ServiceConfirmationItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_confirmation_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_confirmation_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceConfirmationItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceConfirmationItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_confirmation_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceConfirmationItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceConfirmationItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_confirmation_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceConfirmationItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_confirmation_item_data")
	}

	if len(sapServiceConfirmationItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceConfirmationItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceConfirmationItemDatum(ctx, exec, o.ServiceConfirmation, o.ServiceConfirmationItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceConfirmationItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceConfirmationItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceConfirmationItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_confirmation_item_data`.* FROM `sap_service_confirmation_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceConfirmationItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceConfirmationItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceConfirmationItemDatumExists checks if the SapServiceConfirmationItemDatum row exists.
func SapServiceConfirmationItemDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceConfirmation string, serviceConfirmationItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_confirmation_item_data` where `ServiceConfirmation`=? AND `ServiceConfirmationItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceConfirmation, serviceConfirmationItem)
	}
	row := exec.QueryRowContext(ctx, sql, serviceConfirmation, serviceConfirmationItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_confirmation_item_data exists")
	}

	return exists, nil
}
