// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapDebitMemoRequestHeaderDatum is an object representing the database table.
type SapDebitMemoRequestHeaderDatum struct {
	DebitMemoRequest              string      `boil:"DebitMemoRequest" json:"DebitMemoRequest" toml:"DebitMemoRequest" yaml:"DebitMemoRequest"`
	DebitMemoRequestType          null.String `boil:"DebitMemoRequestType" json:"DebitMemoRequestType,omitempty" toml:"DebitMemoRequestType" yaml:"DebitMemoRequestType,omitempty"`
	SalesOrganization             null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel           null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision          null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                    null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                   null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                 null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                   null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeDateTime            null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	PurchaseOrderByCustomer       null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderType     null.String `boil:"CustomerPurchaseOrderType" json:"CustomerPurchaseOrderType,omitempty" toml:"CustomerPurchaseOrderType" yaml:"CustomerPurchaseOrderType,omitempty"`
	CustomerPurchaseOrderDate     null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	DebitMemoRequestDate          null.String `boil:"DebitMemoRequestDate" json:"DebitMemoRequestDate,omitempty" toml:"DebitMemoRequestDate" yaml:"DebitMemoRequestDate,omitempty"`
	TotalNetAmount                null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency           null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	SDDocumentReason              null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PricingDate                   null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	CustomerTaxClassification1    null.String `boil:"CustomerTaxClassification1" json:"CustomerTaxClassification1,omitempty" toml:"CustomerTaxClassification1" yaml:"CustomerTaxClassification1,omitempty"`
	HeaderBillingBlockReason      null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	IncotermsClassification       null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms          null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                 null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	BillingDocumentDate           null.String `boil:"BillingDocumentDate" json:"BillingDocumentDate,omitempty" toml:"BillingDocumentDate" yaml:"BillingDocumentDate,omitempty"`
	ReferenceSDDocument           null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentCategory   null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	OverallSDProcessStatus        null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	TotalCreditCheckStatus        null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	OverallSDDocumentRejectionSts null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`
	OverallOrdReltdBillgStatus    null.String `boil:"OverallOrdReltdBillgStatus" json:"OverallOrdReltdBillgStatus,omitempty" toml:"OverallOrdReltdBillgStatus" yaml:"OverallOrdReltdBillgStatus,omitempty"`

	R *sapDebitMemoRequestHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapDebitMemoRequestHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapDebitMemoRequestHeaderDatumColumns = struct {
	DebitMemoRequest              string
	DebitMemoRequestType          string
	SalesOrganization             string
	DistributionChannel           string
	OrganizationDivision          string
	SalesGroup                    string
	SalesOffice                   string
	SalesDistrict                 string
	SoldToParty                   string
	CreationDate                  string
	LastChangeDate                string
	LastChangeDateTime            string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderType     string
	CustomerPurchaseOrderDate     string
	DebitMemoRequestDate          string
	TotalNetAmount                string
	TransactionCurrency           string
	SDDocumentReason              string
	PricingDate                   string
	CustomerTaxClassification1    string
	HeaderBillingBlockReason      string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	PaymentMethod                 string
	BillingDocumentDate           string
	ReferenceSDDocument           string
	ReferenceSDDocumentCategory   string
	OverallSDProcessStatus        string
	TotalCreditCheckStatus        string
	OverallSDDocumentRejectionSts string
	OverallOrdReltdBillgStatus    string
}{
	DebitMemoRequest:              "DebitMemoRequest",
	DebitMemoRequestType:          "DebitMemoRequestType",
	SalesOrganization:             "SalesOrganization",
	DistributionChannel:           "DistributionChannel",
	OrganizationDivision:          "OrganizationDivision",
	SalesGroup:                    "SalesGroup",
	SalesOffice:                   "SalesOffice",
	SalesDistrict:                 "SalesDistrict",
	SoldToParty:                   "SoldToParty",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	LastChangeDateTime:            "LastChangeDateTime",
	PurchaseOrderByCustomer:       "PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:     "CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:     "CustomerPurchaseOrderDate",
	DebitMemoRequestDate:          "DebitMemoRequestDate",
	TotalNetAmount:                "TotalNetAmount",
	TransactionCurrency:           "TransactionCurrency",
	SDDocumentReason:              "SDDocumentReason",
	PricingDate:                   "PricingDate",
	CustomerTaxClassification1:    "CustomerTaxClassification1",
	HeaderBillingBlockReason:      "HeaderBillingBlockReason",
	IncotermsClassification:       "IncotermsClassification",
	CustomerPaymentTerms:          "CustomerPaymentTerms",
	PaymentMethod:                 "PaymentMethod",
	BillingDocumentDate:           "BillingDocumentDate",
	ReferenceSDDocument:           "ReferenceSDDocument",
	ReferenceSDDocumentCategory:   "ReferenceSDDocumentCategory",
	OverallSDProcessStatus:        "OverallSDProcessStatus",
	TotalCreditCheckStatus:        "TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts: "OverallSDDocumentRejectionSts",
	OverallOrdReltdBillgStatus:    "OverallOrdReltdBillgStatus",
}

var SapDebitMemoRequestHeaderDatumTableColumns = struct {
	DebitMemoRequest              string
	DebitMemoRequestType          string
	SalesOrganization             string
	DistributionChannel           string
	OrganizationDivision          string
	SalesGroup                    string
	SalesOffice                   string
	SalesDistrict                 string
	SoldToParty                   string
	CreationDate                  string
	LastChangeDate                string
	LastChangeDateTime            string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderType     string
	CustomerPurchaseOrderDate     string
	DebitMemoRequestDate          string
	TotalNetAmount                string
	TransactionCurrency           string
	SDDocumentReason              string
	PricingDate                   string
	CustomerTaxClassification1    string
	HeaderBillingBlockReason      string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	PaymentMethod                 string
	BillingDocumentDate           string
	ReferenceSDDocument           string
	ReferenceSDDocumentCategory   string
	OverallSDProcessStatus        string
	TotalCreditCheckStatus        string
	OverallSDDocumentRejectionSts string
	OverallOrdReltdBillgStatus    string
}{
	DebitMemoRequest:              "sap_debit_memo_request_header_data.DebitMemoRequest",
	DebitMemoRequestType:          "sap_debit_memo_request_header_data.DebitMemoRequestType",
	SalesOrganization:             "sap_debit_memo_request_header_data.SalesOrganization",
	DistributionChannel:           "sap_debit_memo_request_header_data.DistributionChannel",
	OrganizationDivision:          "sap_debit_memo_request_header_data.OrganizationDivision",
	SalesGroup:                    "sap_debit_memo_request_header_data.SalesGroup",
	SalesOffice:                   "sap_debit_memo_request_header_data.SalesOffice",
	SalesDistrict:                 "sap_debit_memo_request_header_data.SalesDistrict",
	SoldToParty:                   "sap_debit_memo_request_header_data.SoldToParty",
	CreationDate:                  "sap_debit_memo_request_header_data.CreationDate",
	LastChangeDate:                "sap_debit_memo_request_header_data.LastChangeDate",
	LastChangeDateTime:            "sap_debit_memo_request_header_data.LastChangeDateTime",
	PurchaseOrderByCustomer:       "sap_debit_memo_request_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:     "sap_debit_memo_request_header_data.CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:     "sap_debit_memo_request_header_data.CustomerPurchaseOrderDate",
	DebitMemoRequestDate:          "sap_debit_memo_request_header_data.DebitMemoRequestDate",
	TotalNetAmount:                "sap_debit_memo_request_header_data.TotalNetAmount",
	TransactionCurrency:           "sap_debit_memo_request_header_data.TransactionCurrency",
	SDDocumentReason:              "sap_debit_memo_request_header_data.SDDocumentReason",
	PricingDate:                   "sap_debit_memo_request_header_data.PricingDate",
	CustomerTaxClassification1:    "sap_debit_memo_request_header_data.CustomerTaxClassification1",
	HeaderBillingBlockReason:      "sap_debit_memo_request_header_data.HeaderBillingBlockReason",
	IncotermsClassification:       "sap_debit_memo_request_header_data.IncotermsClassification",
	CustomerPaymentTerms:          "sap_debit_memo_request_header_data.CustomerPaymentTerms",
	PaymentMethod:                 "sap_debit_memo_request_header_data.PaymentMethod",
	BillingDocumentDate:           "sap_debit_memo_request_header_data.BillingDocumentDate",
	ReferenceSDDocument:           "sap_debit_memo_request_header_data.ReferenceSDDocument",
	ReferenceSDDocumentCategory:   "sap_debit_memo_request_header_data.ReferenceSDDocumentCategory",
	OverallSDProcessStatus:        "sap_debit_memo_request_header_data.OverallSDProcessStatus",
	TotalCreditCheckStatus:        "sap_debit_memo_request_header_data.TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts: "sap_debit_memo_request_header_data.OverallSDDocumentRejectionSts",
	OverallOrdReltdBillgStatus:    "sap_debit_memo_request_header_data.OverallOrdReltdBillgStatus",
}

// Generated where

var SapDebitMemoRequestHeaderDatumWhere = struct {
	DebitMemoRequest              whereHelperstring
	DebitMemoRequestType          whereHelpernull_String
	SalesOrganization             whereHelpernull_String
	DistributionChannel           whereHelpernull_String
	OrganizationDivision          whereHelpernull_String
	SalesGroup                    whereHelpernull_String
	SalesOffice                   whereHelpernull_String
	SalesDistrict                 whereHelpernull_String
	SoldToParty                   whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	LastChangeDateTime            whereHelpernull_String
	PurchaseOrderByCustomer       whereHelpernull_String
	CustomerPurchaseOrderType     whereHelpernull_String
	CustomerPurchaseOrderDate     whereHelpernull_String
	DebitMemoRequestDate          whereHelpernull_String
	TotalNetAmount                whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	SDDocumentReason              whereHelpernull_String
	PricingDate                   whereHelpernull_String
	CustomerTaxClassification1    whereHelpernull_String
	HeaderBillingBlockReason      whereHelpernull_String
	IncotermsClassification       whereHelpernull_String
	CustomerPaymentTerms          whereHelpernull_String
	PaymentMethod                 whereHelpernull_String
	BillingDocumentDate           whereHelpernull_String
	ReferenceSDDocument           whereHelpernull_String
	ReferenceSDDocumentCategory   whereHelpernull_String
	OverallSDProcessStatus        whereHelpernull_String
	TotalCreditCheckStatus        whereHelpernull_String
	OverallSDDocumentRejectionSts whereHelpernull_String
	OverallOrdReltdBillgStatus    whereHelpernull_String
}{
	DebitMemoRequest:              whereHelperstring{field: "`sap_debit_memo_request_header_data`.`DebitMemoRequest`"},
	DebitMemoRequestType:          whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`DebitMemoRequestType`"},
	SalesOrganization:             whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`SalesOrganization`"},
	DistributionChannel:           whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`DistributionChannel`"},
	OrganizationDivision:          whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`OrganizationDivision`"},
	SalesGroup:                    whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`SalesGroup`"},
	SalesOffice:                   whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`SalesOffice`"},
	SalesDistrict:                 whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`SalesDistrict`"},
	SoldToParty:                   whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`SoldToParty`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`LastChangeDate`"},
	LastChangeDateTime:            whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`LastChangeDateTime`"},
	PurchaseOrderByCustomer:       whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderType:     whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`CustomerPurchaseOrderType`"},
	CustomerPurchaseOrderDate:     whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`CustomerPurchaseOrderDate`"},
	DebitMemoRequestDate:          whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`DebitMemoRequestDate`"},
	TotalNetAmount:                whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`TotalNetAmount`"},
	TransactionCurrency:           whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`TransactionCurrency`"},
	SDDocumentReason:              whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`SDDocumentReason`"},
	PricingDate:                   whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`PricingDate`"},
	CustomerTaxClassification1:    whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`CustomerTaxClassification1`"},
	HeaderBillingBlockReason:      whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`HeaderBillingBlockReason`"},
	IncotermsClassification:       whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:          whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                 whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`PaymentMethod`"},
	BillingDocumentDate:           whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`BillingDocumentDate`"},
	ReferenceSDDocument:           whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentCategory:   whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`ReferenceSDDocumentCategory`"},
	OverallSDProcessStatus:        whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`OverallSDProcessStatus`"},
	TotalCreditCheckStatus:        whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`TotalCreditCheckStatus`"},
	OverallSDDocumentRejectionSts: whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`OverallSDDocumentRejectionSts`"},
	OverallOrdReltdBillgStatus:    whereHelpernull_String{field: "`sap_debit_memo_request_header_data`.`OverallOrdReltdBillgStatus`"},
}

// SapDebitMemoRequestHeaderDatumRels is where relationship names are stored.
var SapDebitMemoRequestHeaderDatumRels = struct {
	DebitMemoRequestSapDebitMemoRequestHeaderPartnerData      string
	DebitMemoRequestSapDebitMemoRequestItemData               string
	DebitMemoRequestSapDebitMemoRequestItemPricingElementData string
}{
	DebitMemoRequestSapDebitMemoRequestHeaderPartnerData:      "DebitMemoRequestSapDebitMemoRequestHeaderPartnerData",
	DebitMemoRequestSapDebitMemoRequestItemData:               "DebitMemoRequestSapDebitMemoRequestItemData",
	DebitMemoRequestSapDebitMemoRequestItemPricingElementData: "DebitMemoRequestSapDebitMemoRequestItemPricingElementData",
}

// sapDebitMemoRequestHeaderDatumR is where relationships are stored.
type sapDebitMemoRequestHeaderDatumR struct {
	DebitMemoRequestSapDebitMemoRequestHeaderPartnerData      SapDebitMemoRequestHeaderPartnerDatumSlice      `boil:"DebitMemoRequestSapDebitMemoRequestHeaderPartnerData" json:"DebitMemoRequestSapDebitMemoRequestHeaderPartnerData" toml:"DebitMemoRequestSapDebitMemoRequestHeaderPartnerData" yaml:"DebitMemoRequestSapDebitMemoRequestHeaderPartnerData"`
	DebitMemoRequestSapDebitMemoRequestItemData               SapDebitMemoRequestItemDatumSlice               `boil:"DebitMemoRequestSapDebitMemoRequestItemData" json:"DebitMemoRequestSapDebitMemoRequestItemData" toml:"DebitMemoRequestSapDebitMemoRequestItemData" yaml:"DebitMemoRequestSapDebitMemoRequestItemData"`
	DebitMemoRequestSapDebitMemoRequestItemPricingElementData SapDebitMemoRequestItemPricingElementDatumSlice `boil:"DebitMemoRequestSapDebitMemoRequestItemPricingElementData" json:"DebitMemoRequestSapDebitMemoRequestItemPricingElementData" toml:"DebitMemoRequestSapDebitMemoRequestItemPricingElementData" yaml:"DebitMemoRequestSapDebitMemoRequestItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapDebitMemoRequestHeaderDatumR) NewStruct() *sapDebitMemoRequestHeaderDatumR {
	return &sapDebitMemoRequestHeaderDatumR{}
}

func (r *sapDebitMemoRequestHeaderDatumR) GetDebitMemoRequestSapDebitMemoRequestHeaderPartnerData() SapDebitMemoRequestHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData
}

func (r *sapDebitMemoRequestHeaderDatumR) GetDebitMemoRequestSapDebitMemoRequestItemData() SapDebitMemoRequestItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DebitMemoRequestSapDebitMemoRequestItemData
}

func (r *sapDebitMemoRequestHeaderDatumR) GetDebitMemoRequestSapDebitMemoRequestItemPricingElementData() SapDebitMemoRequestItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.DebitMemoRequestSapDebitMemoRequestItemPricingElementData
}

// sapDebitMemoRequestHeaderDatumL is where Load methods for each relationship are stored.
type sapDebitMemoRequestHeaderDatumL struct{}

var (
	sapDebitMemoRequestHeaderDatumAllColumns            = []string{"DebitMemoRequest", "DebitMemoRequestType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "LastChangeDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "DebitMemoRequestDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "CustomerTaxClassification1", "HeaderBillingBlockReason", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "BillingDocumentDate", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts", "OverallOrdReltdBillgStatus"}
	sapDebitMemoRequestHeaderDatumColumnsWithoutDefault = []string{"DebitMemoRequest", "DebitMemoRequestType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "LastChangeDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "DebitMemoRequestDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "CustomerTaxClassification1", "HeaderBillingBlockReason", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "BillingDocumentDate", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts", "OverallOrdReltdBillgStatus"}
	sapDebitMemoRequestHeaderDatumColumnsWithDefault    = []string{}
	sapDebitMemoRequestHeaderDatumPrimaryKeyColumns     = []string{"DebitMemoRequest"}
	sapDebitMemoRequestHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapDebitMemoRequestHeaderDatumSlice is an alias for a slice of pointers to SapDebitMemoRequestHeaderDatum.
	// This should almost always be used instead of []SapDebitMemoRequestHeaderDatum.
	SapDebitMemoRequestHeaderDatumSlice []*SapDebitMemoRequestHeaderDatum
	// SapDebitMemoRequestHeaderDatumHook is the signature for custom SapDebitMemoRequestHeaderDatum hook methods
	SapDebitMemoRequestHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapDebitMemoRequestHeaderDatum) error

	sapDebitMemoRequestHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapDebitMemoRequestHeaderDatumType                 = reflect.TypeOf(&SapDebitMemoRequestHeaderDatum{})
	sapDebitMemoRequestHeaderDatumMapping              = queries.MakeStructMapping(sapDebitMemoRequestHeaderDatumType)
	sapDebitMemoRequestHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns)
	sapDebitMemoRequestHeaderDatumInsertCacheMut       sync.RWMutex
	sapDebitMemoRequestHeaderDatumInsertCache          = make(map[string]insertCache)
	sapDebitMemoRequestHeaderDatumUpdateCacheMut       sync.RWMutex
	sapDebitMemoRequestHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapDebitMemoRequestHeaderDatumUpsertCacheMut       sync.RWMutex
	sapDebitMemoRequestHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapDebitMemoRequestHeaderDatumAfterSelectHooks []SapDebitMemoRequestHeaderDatumHook

var sapDebitMemoRequestHeaderDatumBeforeInsertHooks []SapDebitMemoRequestHeaderDatumHook
var sapDebitMemoRequestHeaderDatumAfterInsertHooks []SapDebitMemoRequestHeaderDatumHook

var sapDebitMemoRequestHeaderDatumBeforeUpdateHooks []SapDebitMemoRequestHeaderDatumHook
var sapDebitMemoRequestHeaderDatumAfterUpdateHooks []SapDebitMemoRequestHeaderDatumHook

var sapDebitMemoRequestHeaderDatumBeforeDeleteHooks []SapDebitMemoRequestHeaderDatumHook
var sapDebitMemoRequestHeaderDatumAfterDeleteHooks []SapDebitMemoRequestHeaderDatumHook

var sapDebitMemoRequestHeaderDatumBeforeUpsertHooks []SapDebitMemoRequestHeaderDatumHook
var sapDebitMemoRequestHeaderDatumAfterUpsertHooks []SapDebitMemoRequestHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapDebitMemoRequestHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapDebitMemoRequestHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapDebitMemoRequestHeaderDatumHook registers your hook function for all future operations.
func AddSapDebitMemoRequestHeaderDatumHook(hookPoint boil.HookPoint, sapDebitMemoRequestHeaderDatumHook SapDebitMemoRequestHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapDebitMemoRequestHeaderDatumAfterSelectHooks = append(sapDebitMemoRequestHeaderDatumAfterSelectHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapDebitMemoRequestHeaderDatumBeforeInsertHooks = append(sapDebitMemoRequestHeaderDatumBeforeInsertHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.AfterInsertHook:
		sapDebitMemoRequestHeaderDatumAfterInsertHooks = append(sapDebitMemoRequestHeaderDatumAfterInsertHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapDebitMemoRequestHeaderDatumBeforeUpdateHooks = append(sapDebitMemoRequestHeaderDatumBeforeUpdateHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapDebitMemoRequestHeaderDatumAfterUpdateHooks = append(sapDebitMemoRequestHeaderDatumAfterUpdateHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapDebitMemoRequestHeaderDatumBeforeDeleteHooks = append(sapDebitMemoRequestHeaderDatumBeforeDeleteHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapDebitMemoRequestHeaderDatumAfterDeleteHooks = append(sapDebitMemoRequestHeaderDatumAfterDeleteHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapDebitMemoRequestHeaderDatumBeforeUpsertHooks = append(sapDebitMemoRequestHeaderDatumBeforeUpsertHooks, sapDebitMemoRequestHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapDebitMemoRequestHeaderDatumAfterUpsertHooks = append(sapDebitMemoRequestHeaderDatumAfterUpsertHooks, sapDebitMemoRequestHeaderDatumHook)
	}
}

// One returns a single sapDebitMemoRequestHeaderDatum record from the query.
func (q sapDebitMemoRequestHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapDebitMemoRequestHeaderDatum, error) {
	o := &SapDebitMemoRequestHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_debit_memo_request_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapDebitMemoRequestHeaderDatum records from the query.
func (q sapDebitMemoRequestHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapDebitMemoRequestHeaderDatumSlice, error) {
	var o []*SapDebitMemoRequestHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapDebitMemoRequestHeaderDatum slice")
	}

	if len(sapDebitMemoRequestHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapDebitMemoRequestHeaderDatum records in the query.
func (q sapDebitMemoRequestHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_debit_memo_request_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapDebitMemoRequestHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_debit_memo_request_header_data exists")
	}

	return count > 0, nil
}

// DebitMemoRequestSapDebitMemoRequestHeaderPartnerData retrieves all the sap_debit_memo_request_header_partner_datum's SapDebitMemoRequestHeaderPartnerData with an executor via DebitMemoRequest column.
func (o *SapDebitMemoRequestHeaderDatum) DebitMemoRequestSapDebitMemoRequestHeaderPartnerData(mods ...qm.QueryMod) sapDebitMemoRequestHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_debit_memo_request_header_partner_data`.`DebitMemoRequest`=?", o.DebitMemoRequest),
	)

	return SapDebitMemoRequestHeaderPartnerData(queryMods...)
}

// DebitMemoRequestSapDebitMemoRequestItemData retrieves all the sap_debit_memo_request_item_datum's SapDebitMemoRequestItemData with an executor via DebitMemoRequest column.
func (o *SapDebitMemoRequestHeaderDatum) DebitMemoRequestSapDebitMemoRequestItemData(mods ...qm.QueryMod) sapDebitMemoRequestItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_debit_memo_request_item_data`.`DebitMemoRequest`=?", o.DebitMemoRequest),
	)

	return SapDebitMemoRequestItemData(queryMods...)
}

// DebitMemoRequestSapDebitMemoRequestItemPricingElementData retrieves all the sap_debit_memo_request_item_pricing_element_datum's SapDebitMemoRequestItemPricingElementData with an executor via DebitMemoRequest column.
func (o *SapDebitMemoRequestHeaderDatum) DebitMemoRequestSapDebitMemoRequestItemPricingElementData(mods ...qm.QueryMod) sapDebitMemoRequestItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_debit_memo_request_item_pricing_element_data`.`DebitMemoRequest`=?", o.DebitMemoRequest),
	)

	return SapDebitMemoRequestItemPricingElementData(queryMods...)
}

// LoadDebitMemoRequestSapDebitMemoRequestHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapDebitMemoRequestHeaderDatumL) LoadDebitMemoRequestSapDebitMemoRequestHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapDebitMemoRequestHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapDebitMemoRequestHeaderDatum
	var object *SapDebitMemoRequestHeaderDatum

	if singular {
		object = maybeSapDebitMemoRequestHeaderDatum.(*SapDebitMemoRequestHeaderDatum)
	} else {
		slice = *maybeSapDebitMemoRequestHeaderDatum.(*[]*SapDebitMemoRequestHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapDebitMemoRequestHeaderDatumR{}
		}
		args = append(args, object.DebitMemoRequest)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapDebitMemoRequestHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.DebitMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.DebitMemoRequest)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_debit_memo_request_header_partner_data`),
		qm.WhereIn(`sap_debit_memo_request_header_partner_data.DebitMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_debit_memo_request_header_partner_data")
	}

	var resultSlice []*SapDebitMemoRequestHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_debit_memo_request_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_debit_memo_request_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_debit_memo_request_header_partner_data")
	}

	if len(sapDebitMemoRequestHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapDebitMemoRequestHeaderPartnerDatumR{}
			}
			foreign.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DebitMemoRequest == foreign.DebitMemoRequest {
				local.R.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData = append(local.R.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapDebitMemoRequestHeaderPartnerDatumR{}
				}
				foreign.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadDebitMemoRequestSapDebitMemoRequestItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapDebitMemoRequestHeaderDatumL) LoadDebitMemoRequestSapDebitMemoRequestItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapDebitMemoRequestHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapDebitMemoRequestHeaderDatum
	var object *SapDebitMemoRequestHeaderDatum

	if singular {
		object = maybeSapDebitMemoRequestHeaderDatum.(*SapDebitMemoRequestHeaderDatum)
	} else {
		slice = *maybeSapDebitMemoRequestHeaderDatum.(*[]*SapDebitMemoRequestHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapDebitMemoRequestHeaderDatumR{}
		}
		args = append(args, object.DebitMemoRequest)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapDebitMemoRequestHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.DebitMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.DebitMemoRequest)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_debit_memo_request_item_data`),
		qm.WhereIn(`sap_debit_memo_request_item_data.DebitMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_debit_memo_request_item_data")
	}

	var resultSlice []*SapDebitMemoRequestItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_debit_memo_request_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_debit_memo_request_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_debit_memo_request_item_data")
	}

	if len(sapDebitMemoRequestItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DebitMemoRequestSapDebitMemoRequestItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapDebitMemoRequestItemDatumR{}
			}
			foreign.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DebitMemoRequest == foreign.DebitMemoRequest {
				local.R.DebitMemoRequestSapDebitMemoRequestItemData = append(local.R.DebitMemoRequestSapDebitMemoRequestItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapDebitMemoRequestItemDatumR{}
				}
				foreign.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadDebitMemoRequestSapDebitMemoRequestItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapDebitMemoRequestHeaderDatumL) LoadDebitMemoRequestSapDebitMemoRequestItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapDebitMemoRequestHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapDebitMemoRequestHeaderDatum
	var object *SapDebitMemoRequestHeaderDatum

	if singular {
		object = maybeSapDebitMemoRequestHeaderDatum.(*SapDebitMemoRequestHeaderDatum)
	} else {
		slice = *maybeSapDebitMemoRequestHeaderDatum.(*[]*SapDebitMemoRequestHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapDebitMemoRequestHeaderDatumR{}
		}
		args = append(args, object.DebitMemoRequest)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapDebitMemoRequestHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.DebitMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.DebitMemoRequest)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_debit_memo_request_item_pricing_element_data`),
		qm.WhereIn(`sap_debit_memo_request_item_pricing_element_data.DebitMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_debit_memo_request_item_pricing_element_data")
	}

	var resultSlice []*SapDebitMemoRequestItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_debit_memo_request_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_debit_memo_request_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_debit_memo_request_item_pricing_element_data")
	}

	if len(sapDebitMemoRequestItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DebitMemoRequestSapDebitMemoRequestItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapDebitMemoRequestItemPricingElementDatumR{}
			}
			foreign.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DebitMemoRequest == foreign.DebitMemoRequest {
				local.R.DebitMemoRequestSapDebitMemoRequestItemPricingElementData = append(local.R.DebitMemoRequestSapDebitMemoRequestItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapDebitMemoRequestItemPricingElementDatumR{}
				}
				foreign.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddDebitMemoRequestSapDebitMemoRequestHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_debit_memo_request_header_datum, optionally inserting them as new records.
// Appends related to o.R.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData.
// Sets related.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum appropriately.
func (o *SapDebitMemoRequestHeaderDatum) AddDebitMemoRequestSapDebitMemoRequestHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapDebitMemoRequestHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DebitMemoRequest = o.DebitMemoRequest
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_debit_memo_request_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DebitMemoRequest"}),
				strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DebitMemoRequest, rel.DebitMemoRequest, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DebitMemoRequest = o.DebitMemoRequest
		}
	}

	if o.R == nil {
		o.R = &sapDebitMemoRequestHeaderDatumR{
			DebitMemoRequestSapDebitMemoRequestHeaderPartnerData: related,
		}
	} else {
		o.R.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData = append(o.R.DebitMemoRequestSapDebitMemoRequestHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapDebitMemoRequestHeaderPartnerDatumR{
				DebitMemoRequestSapDebitMemoRequestHeaderDatum: o,
			}
		} else {
			rel.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = o
		}
	}
	return nil
}

// AddDebitMemoRequestSapDebitMemoRequestItemData adds the given related objects to the existing relationships
// of the sap_debit_memo_request_header_datum, optionally inserting them as new records.
// Appends related to o.R.DebitMemoRequestSapDebitMemoRequestItemData.
// Sets related.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum appropriately.
func (o *SapDebitMemoRequestHeaderDatum) AddDebitMemoRequestSapDebitMemoRequestItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapDebitMemoRequestItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DebitMemoRequest = o.DebitMemoRequest
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_debit_memo_request_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DebitMemoRequest"}),
				strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DebitMemoRequest, rel.DebitMemoRequest, rel.DebitMemoRequestItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DebitMemoRequest = o.DebitMemoRequest
		}
	}

	if o.R == nil {
		o.R = &sapDebitMemoRequestHeaderDatumR{
			DebitMemoRequestSapDebitMemoRequestItemData: related,
		}
	} else {
		o.R.DebitMemoRequestSapDebitMemoRequestItemData = append(o.R.DebitMemoRequestSapDebitMemoRequestItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapDebitMemoRequestItemDatumR{
				DebitMemoRequestSapDebitMemoRequestHeaderDatum: o,
			}
		} else {
			rel.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = o
		}
	}
	return nil
}

// AddDebitMemoRequestSapDebitMemoRequestItemPricingElementData adds the given related objects to the existing relationships
// of the sap_debit_memo_request_header_datum, optionally inserting them as new records.
// Appends related to o.R.DebitMemoRequestSapDebitMemoRequestItemPricingElementData.
// Sets related.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum appropriately.
func (o *SapDebitMemoRequestHeaderDatum) AddDebitMemoRequestSapDebitMemoRequestItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapDebitMemoRequestItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DebitMemoRequest = o.DebitMemoRequest
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_debit_memo_request_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DebitMemoRequest"}),
				strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DebitMemoRequest, rel.DebitMemoRequest, rel.DebitMemoRequestItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DebitMemoRequest = o.DebitMemoRequest
		}
	}

	if o.R == nil {
		o.R = &sapDebitMemoRequestHeaderDatumR{
			DebitMemoRequestSapDebitMemoRequestItemPricingElementData: related,
		}
	} else {
		o.R.DebitMemoRequestSapDebitMemoRequestItemPricingElementData = append(o.R.DebitMemoRequestSapDebitMemoRequestItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapDebitMemoRequestItemPricingElementDatumR{
				DebitMemoRequestSapDebitMemoRequestHeaderDatum: o,
			}
		} else {
			rel.R.DebitMemoRequestSapDebitMemoRequestHeaderDatum = o
		}
	}
	return nil
}

// SapDebitMemoRequestHeaderData retrieves all the records using an executor.
func SapDebitMemoRequestHeaderData(mods ...qm.QueryMod) sapDebitMemoRequestHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_debit_memo_request_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_debit_memo_request_header_data`.*"})
	}

	return sapDebitMemoRequestHeaderDatumQuery{q}
}

// FindSapDebitMemoRequestHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapDebitMemoRequestHeaderDatum(ctx context.Context, exec boil.ContextExecutor, debitMemoRequest string, selectCols ...string) (*SapDebitMemoRequestHeaderDatum, error) {
	sapDebitMemoRequestHeaderDatumObj := &SapDebitMemoRequestHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_debit_memo_request_header_data` where `DebitMemoRequest`=?", sel,
	)

	q := queries.Raw(query, debitMemoRequest)

	err := q.Bind(ctx, exec, sapDebitMemoRequestHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_debit_memo_request_header_data")
	}

	if err = sapDebitMemoRequestHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapDebitMemoRequestHeaderDatumObj, err
	}

	return sapDebitMemoRequestHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapDebitMemoRequestHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_debit_memo_request_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapDebitMemoRequestHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapDebitMemoRequestHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapDebitMemoRequestHeaderDatumInsertCache[key]
	sapDebitMemoRequestHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapDebitMemoRequestHeaderDatumAllColumns,
			sapDebitMemoRequestHeaderDatumColumnsWithDefault,
			sapDebitMemoRequestHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_debit_memo_request_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_debit_memo_request_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_debit_memo_request_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_debit_memo_request_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DebitMemoRequest,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_debit_memo_request_header_data")
	}

CacheNoHooks:
	if !cached {
		sapDebitMemoRequestHeaderDatumInsertCacheMut.Lock()
		sapDebitMemoRequestHeaderDatumInsertCache[key] = cache
		sapDebitMemoRequestHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapDebitMemoRequestHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapDebitMemoRequestHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapDebitMemoRequestHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapDebitMemoRequestHeaderDatumUpdateCache[key]
	sapDebitMemoRequestHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapDebitMemoRequestHeaderDatumAllColumns,
			sapDebitMemoRequestHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_debit_memo_request_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_debit_memo_request_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, append(wl, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_debit_memo_request_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_debit_memo_request_header_data")
	}

	if !cached {
		sapDebitMemoRequestHeaderDatumUpdateCacheMut.Lock()
		sapDebitMemoRequestHeaderDatumUpdateCache[key] = cache
		sapDebitMemoRequestHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapDebitMemoRequestHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_debit_memo_request_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_debit_memo_request_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapDebitMemoRequestHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDebitMemoRequestHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_debit_memo_request_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapDebitMemoRequestHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapDebitMemoRequestHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapDebitMemoRequestHeaderDatumUniqueColumns = []string{
	"DebitMemoRequest",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapDebitMemoRequestHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_debit_memo_request_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapDebitMemoRequestHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapDebitMemoRequestHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapDebitMemoRequestHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapDebitMemoRequestHeaderDatumUpsertCache[key]
	sapDebitMemoRequestHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapDebitMemoRequestHeaderDatumAllColumns,
			sapDebitMemoRequestHeaderDatumColumnsWithDefault,
			sapDebitMemoRequestHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapDebitMemoRequestHeaderDatumAllColumns,
			sapDebitMemoRequestHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_debit_memo_request_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_debit_memo_request_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_debit_memo_request_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_debit_memo_request_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapDebitMemoRequestHeaderDatumType, sapDebitMemoRequestHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_debit_memo_request_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_debit_memo_request_header_data")
	}

CacheNoHooks:
	if !cached {
		sapDebitMemoRequestHeaderDatumUpsertCacheMut.Lock()
		sapDebitMemoRequestHeaderDatumUpsertCache[key] = cache
		sapDebitMemoRequestHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapDebitMemoRequestHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapDebitMemoRequestHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapDebitMemoRequestHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapDebitMemoRequestHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_debit_memo_request_header_data` WHERE `DebitMemoRequest`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_debit_memo_request_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_debit_memo_request_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapDebitMemoRequestHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapDebitMemoRequestHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_debit_memo_request_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_debit_memo_request_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapDebitMemoRequestHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapDebitMemoRequestHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDebitMemoRequestHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_debit_memo_request_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapDebitMemoRequestHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_debit_memo_request_header_data")
	}

	if len(sapDebitMemoRequestHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapDebitMemoRequestHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapDebitMemoRequestHeaderDatum(ctx, exec, o.DebitMemoRequest)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapDebitMemoRequestHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapDebitMemoRequestHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapDebitMemoRequestHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_debit_memo_request_header_data`.* FROM `sap_debit_memo_request_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapDebitMemoRequestHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapDebitMemoRequestHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapDebitMemoRequestHeaderDatumExists checks if the SapDebitMemoRequestHeaderDatum row exists.
func SapDebitMemoRequestHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, debitMemoRequest string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_debit_memo_request_header_data` where `DebitMemoRequest`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, debitMemoRequest)
	}
	row := exec.QueryRowContext(ctx, sql, debitMemoRequest)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_debit_memo_request_header_data exists")
	}

	return exists, nil
}
