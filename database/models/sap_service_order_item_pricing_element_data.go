// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceOrderItemPricingElementDatum is an object representing the database table.
type SapServiceOrderItemPricingElementDatum struct {
	ServiceOrder            string      `boil:"ServiceOrder" json:"ServiceOrder" toml:"ServiceOrder" yaml:"ServiceOrder"`
	ServiceOrderItem        string      `boil:"ServiceOrderItem" json:"ServiceOrderItem" toml:"ServiceOrderItem" yaml:"ServiceOrderItem"`
	PricingProcedureStep    string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionType           null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	ConditionRateValue      null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency       null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity       null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit   null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`

	R *sapServiceOrderItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceOrderItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceOrderItemPricingElementDatumColumns = struct {
	ServiceOrder            string
	ServiceOrderItem        string
	PricingProcedureStep    string
	PricingProcedureCounter string
	ConditionType           string
	ConditionRateValue      string
	ConditionCurrency       string
	ConditionQuantity       string
	ConditionQuantityUnit   string
}{
	ServiceOrder:            "ServiceOrder",
	ServiceOrderItem:        "ServiceOrderItem",
	PricingProcedureStep:    "PricingProcedureStep",
	PricingProcedureCounter: "PricingProcedureCounter",
	ConditionType:           "ConditionType",
	ConditionRateValue:      "ConditionRateValue",
	ConditionCurrency:       "ConditionCurrency",
	ConditionQuantity:       "ConditionQuantity",
	ConditionQuantityUnit:   "ConditionQuantityUnit",
}

var SapServiceOrderItemPricingElementDatumTableColumns = struct {
	ServiceOrder            string
	ServiceOrderItem        string
	PricingProcedureStep    string
	PricingProcedureCounter string
	ConditionType           string
	ConditionRateValue      string
	ConditionCurrency       string
	ConditionQuantity       string
	ConditionQuantityUnit   string
}{
	ServiceOrder:            "sap_service_order_item_pricing_element_data.ServiceOrder",
	ServiceOrderItem:        "sap_service_order_item_pricing_element_data.ServiceOrderItem",
	PricingProcedureStep:    "sap_service_order_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter: "sap_service_order_item_pricing_element_data.PricingProcedureCounter",
	ConditionType:           "sap_service_order_item_pricing_element_data.ConditionType",
	ConditionRateValue:      "sap_service_order_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:       "sap_service_order_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:       "sap_service_order_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:   "sap_service_order_item_pricing_element_data.ConditionQuantityUnit",
}

// Generated where

var SapServiceOrderItemPricingElementDatumWhere = struct {
	ServiceOrder            whereHelperstring
	ServiceOrderItem        whereHelperstring
	PricingProcedureStep    whereHelperstring
	PricingProcedureCounter whereHelperstring
	ConditionType           whereHelpernull_String
	ConditionRateValue      whereHelpernull_String
	ConditionCurrency       whereHelpernull_String
	ConditionQuantity       whereHelpernull_String
	ConditionQuantityUnit   whereHelpernull_String
}{
	ServiceOrder:            whereHelperstring{field: "`sap_service_order_item_pricing_element_data`.`ServiceOrder`"},
	ServiceOrderItem:        whereHelperstring{field: "`sap_service_order_item_pricing_element_data`.`ServiceOrderItem`"},
	PricingProcedureStep:    whereHelperstring{field: "`sap_service_order_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter: whereHelperstring{field: "`sap_service_order_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionType:           whereHelpernull_String{field: "`sap_service_order_item_pricing_element_data`.`ConditionType`"},
	ConditionRateValue:      whereHelpernull_String{field: "`sap_service_order_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:       whereHelpernull_String{field: "`sap_service_order_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:       whereHelpernull_String{field: "`sap_service_order_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:   whereHelpernull_String{field: "`sap_service_order_item_pricing_element_data`.`ConditionQuantityUnit`"},
}

// SapServiceOrderItemPricingElementDatumRels is where relationship names are stored.
var SapServiceOrderItemPricingElementDatumRels = struct {
	ServiceOrderSapServiceOrderHeaderDatum string
}{
	ServiceOrderSapServiceOrderHeaderDatum: "ServiceOrderSapServiceOrderHeaderDatum",
}

// sapServiceOrderItemPricingElementDatumR is where relationships are stored.
type sapServiceOrderItemPricingElementDatumR struct {
	ServiceOrderSapServiceOrderHeaderDatum *SapServiceOrderHeaderDatum `boil:"ServiceOrderSapServiceOrderHeaderDatum" json:"ServiceOrderSapServiceOrderHeaderDatum" toml:"ServiceOrderSapServiceOrderHeaderDatum" yaml:"ServiceOrderSapServiceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapServiceOrderItemPricingElementDatumR) NewStruct() *sapServiceOrderItemPricingElementDatumR {
	return &sapServiceOrderItemPricingElementDatumR{}
}

// sapServiceOrderItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapServiceOrderItemPricingElementDatumL struct{}

var (
	sapServiceOrderItemPricingElementDatumAllColumns            = []string{"ServiceOrder", "ServiceOrderItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit"}
	sapServiceOrderItemPricingElementDatumColumnsWithoutDefault = []string{"ServiceOrder", "ServiceOrderItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit"}
	sapServiceOrderItemPricingElementDatumColumnsWithDefault    = []string{}
	sapServiceOrderItemPricingElementDatumPrimaryKeyColumns     = []string{"ServiceOrder", "ServiceOrderItem", "PricingProcedureStep", "PricingProcedureCounter"}
	sapServiceOrderItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceOrderItemPricingElementDatumSlice is an alias for a slice of pointers to SapServiceOrderItemPricingElementDatum.
	// This should almost always be used instead of []SapServiceOrderItemPricingElementDatum.
	SapServiceOrderItemPricingElementDatumSlice []*SapServiceOrderItemPricingElementDatum
	// SapServiceOrderItemPricingElementDatumHook is the signature for custom SapServiceOrderItemPricingElementDatum hook methods
	SapServiceOrderItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapServiceOrderItemPricingElementDatum) error

	sapServiceOrderItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceOrderItemPricingElementDatumType                 = reflect.TypeOf(&SapServiceOrderItemPricingElementDatum{})
	sapServiceOrderItemPricingElementDatumMapping              = queries.MakeStructMapping(sapServiceOrderItemPricingElementDatumType)
	sapServiceOrderItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns)
	sapServiceOrderItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapServiceOrderItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapServiceOrderItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapServiceOrderItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapServiceOrderItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapServiceOrderItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceOrderItemPricingElementDatumAfterSelectHooks []SapServiceOrderItemPricingElementDatumHook

var sapServiceOrderItemPricingElementDatumBeforeInsertHooks []SapServiceOrderItemPricingElementDatumHook
var sapServiceOrderItemPricingElementDatumAfterInsertHooks []SapServiceOrderItemPricingElementDatumHook

var sapServiceOrderItemPricingElementDatumBeforeUpdateHooks []SapServiceOrderItemPricingElementDatumHook
var sapServiceOrderItemPricingElementDatumAfterUpdateHooks []SapServiceOrderItemPricingElementDatumHook

var sapServiceOrderItemPricingElementDatumBeforeDeleteHooks []SapServiceOrderItemPricingElementDatumHook
var sapServiceOrderItemPricingElementDatumAfterDeleteHooks []SapServiceOrderItemPricingElementDatumHook

var sapServiceOrderItemPricingElementDatumBeforeUpsertHooks []SapServiceOrderItemPricingElementDatumHook
var sapServiceOrderItemPricingElementDatumAfterUpsertHooks []SapServiceOrderItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceOrderItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceOrderItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapServiceOrderItemPricingElementDatumHook(hookPoint boil.HookPoint, sapServiceOrderItemPricingElementDatumHook SapServiceOrderItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceOrderItemPricingElementDatumAfterSelectHooks = append(sapServiceOrderItemPricingElementDatumAfterSelectHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapServiceOrderItemPricingElementDatumBeforeInsertHooks = append(sapServiceOrderItemPricingElementDatumBeforeInsertHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapServiceOrderItemPricingElementDatumAfterInsertHooks = append(sapServiceOrderItemPricingElementDatumAfterInsertHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceOrderItemPricingElementDatumBeforeUpdateHooks = append(sapServiceOrderItemPricingElementDatumBeforeUpdateHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapServiceOrderItemPricingElementDatumAfterUpdateHooks = append(sapServiceOrderItemPricingElementDatumAfterUpdateHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceOrderItemPricingElementDatumBeforeDeleteHooks = append(sapServiceOrderItemPricingElementDatumBeforeDeleteHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapServiceOrderItemPricingElementDatumAfterDeleteHooks = append(sapServiceOrderItemPricingElementDatumAfterDeleteHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceOrderItemPricingElementDatumBeforeUpsertHooks = append(sapServiceOrderItemPricingElementDatumBeforeUpsertHooks, sapServiceOrderItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapServiceOrderItemPricingElementDatumAfterUpsertHooks = append(sapServiceOrderItemPricingElementDatumAfterUpsertHooks, sapServiceOrderItemPricingElementDatumHook)
	}
}

// One returns a single sapServiceOrderItemPricingElementDatum record from the query.
func (q sapServiceOrderItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceOrderItemPricingElementDatum, error) {
	o := &SapServiceOrderItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_order_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceOrderItemPricingElementDatum records from the query.
func (q sapServiceOrderItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceOrderItemPricingElementDatumSlice, error) {
	var o []*SapServiceOrderItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceOrderItemPricingElementDatum slice")
	}

	if len(sapServiceOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceOrderItemPricingElementDatum records in the query.
func (q sapServiceOrderItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_order_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceOrderItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_order_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// ServiceOrderSapServiceOrderHeaderDatum pointed to by the foreign key.
func (o *SapServiceOrderItemPricingElementDatum) ServiceOrderSapServiceOrderHeaderDatum(mods ...qm.QueryMod) sapServiceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_header_data`")

	return query
}

// LoadServiceOrderSapServiceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceOrderItemPricingElementDatumL) LoadServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderItemPricingElementDatum
	var object *SapServiceOrderItemPricingElementDatum

	if singular {
		object = maybeSapServiceOrderItemPricingElementDatum.(*SapServiceOrderItemPricingElementDatum)
	} else {
		slice = *maybeSapServiceOrderItemPricingElementDatum.(*[]*SapServiceOrderItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderItemPricingElementDatumR{}
		}
		args = append(args, object.ServiceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_header_data`),
		qm.WhereIn(`sap_service_order_header_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderHeaderDatum")
	}

	var resultSlice []*SapServiceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_header_data")
	}

	if len(sapServiceOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderHeaderDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderItemPricingElementData = append(foreign.R.ServiceOrderSapServiceOrderItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderHeaderDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderItemPricingElementData = append(foreign.R.ServiceOrderSapServiceOrderItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetServiceOrderSapServiceOrderHeaderDatum of the sapServiceOrderItemPricingElementDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderHeaderDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderItemPricingElementData.
func (o *SapServiceOrderItemPricingElementDatum) SetServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_order_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceOrder, o.ServiceOrder, o.ServiceOrderItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceOrder = related.ServiceOrder
	if o.R == nil {
		o.R = &sapServiceOrderItemPricingElementDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderItemPricingElementData: SapServiceOrderItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.ServiceOrderSapServiceOrderItemPricingElementData = append(related.R.ServiceOrderSapServiceOrderItemPricingElementData, o)
	}

	return nil
}

// SapServiceOrderItemPricingElementData retrieves all the records using an executor.
func SapServiceOrderItemPricingElementData(mods ...qm.QueryMod) sapServiceOrderItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_service_order_item_pricing_element_data`"))
	return sapServiceOrderItemPricingElementDatumQuery{NewQuery(mods...)}
}

// FindSapServiceOrderItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceOrderItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, serviceOrderItem string, pricingProcedureStep string, pricingProcedureCounter string, selectCols ...string) (*SapServiceOrderItemPricingElementDatum, error) {
	sapServiceOrderItemPricingElementDatumObj := &SapServiceOrderItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_order_item_pricing_element_data` where `ServiceOrder`=? AND `ServiceOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, serviceOrder, serviceOrderItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, sapServiceOrderItemPricingElementDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_order_item_pricing_element_data")
	}

	if err = sapServiceOrderItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceOrderItemPricingElementDatumObj, err
	}

	return sapServiceOrderItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceOrderItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceOrderItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapServiceOrderItemPricingElementDatumInsertCache[key]
	sapServiceOrderItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceOrderItemPricingElementDatumAllColumns,
			sapServiceOrderItemPricingElementDatumColumnsWithDefault,
			sapServiceOrderItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_order_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_order_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_order_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_order_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceOrder,
		o.ServiceOrderItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderItemPricingElementDatumInsertCacheMut.Lock()
		sapServiceOrderItemPricingElementDatumInsertCache[key] = cache
		sapServiceOrderItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceOrderItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceOrderItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceOrderItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceOrderItemPricingElementDatumUpdateCache[key]
	sapServiceOrderItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceOrderItemPricingElementDatumAllColumns,
			sapServiceOrderItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_order_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_order_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, append(wl, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_order_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_order_item_pricing_element_data")
	}

	if !cached {
		sapServiceOrderItemPricingElementDatumUpdateCacheMut.Lock()
		sapServiceOrderItemPricingElementDatumUpdateCache[key] = cache
		sapServiceOrderItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceOrderItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_order_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceOrderItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_order_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceOrderItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceOrderItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceOrderItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceOrderItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceOrderItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceOrderItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceOrderItemPricingElementDatumUpsertCache[key]
	sapServiceOrderItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceOrderItemPricingElementDatumAllColumns,
			sapServiceOrderItemPricingElementDatumColumnsWithDefault,
			sapServiceOrderItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceOrderItemPricingElementDatumAllColumns,
			sapServiceOrderItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_order_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_order_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_order_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_order_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceOrderItemPricingElementDatumType, sapServiceOrderItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_order_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderItemPricingElementDatumUpsertCacheMut.Lock()
		sapServiceOrderItemPricingElementDatumUpsertCache[key] = cache
		sapServiceOrderItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceOrderItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceOrderItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceOrderItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceOrderItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_order_item_pricing_element_data` WHERE `ServiceOrder`=? AND `ServiceOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_order_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceOrderItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceOrderItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_order_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceOrderItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceOrderItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_order_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceOrderItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_item_pricing_element_data")
	}

	if len(sapServiceOrderItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceOrderItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceOrderItemPricingElementDatum(ctx, exec, o.ServiceOrder, o.ServiceOrderItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceOrderItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceOrderItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_order_item_pricing_element_data`.* FROM `sap_service_order_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceOrderItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceOrderItemPricingElementDatumExists checks if the SapServiceOrderItemPricingElementDatum row exists.
func SapServiceOrderItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, serviceOrderItem string, pricingProcedureStep string, pricingProcedureCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_order_item_pricing_element_data` where `ServiceOrder`=? AND `ServiceOrderItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceOrder, serviceOrderItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, serviceOrder, serviceOrderItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_order_item_pricing_element_data exists")
	}

	return exists, nil
}
