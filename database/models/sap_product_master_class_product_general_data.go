// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterClassProductGeneralDatum is an object representing the database table.
type SapProductMasterClassProductGeneralDatum struct {
	Product             string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductType         null.String `boil:"ProductType" json:"ProductType,omitempty" toml:"ProductType" yaml:"ProductType,omitempty"`
	CreationDate        null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate      null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	ProductGroup        null.String `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	BaseUnit            null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ProductHierarchy    null.String `boil:"ProductHierarchy" json:"ProductHierarchy,omitempty" toml:"ProductHierarchy" yaml:"ProductHierarchy,omitempty"`

	R *sapProductMasterClassProductGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterClassProductGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterClassProductGeneralDatumColumns = struct {
	Product             string
	ProductType         string
	CreationDate        string
	LastChangeDate      string
	IsMarkedForDeletion string
	ProductGroup        string
	BaseUnit            string
	ProductHierarchy    string
}{
	Product:             "Product",
	ProductType:         "ProductType",
	CreationDate:        "CreationDate",
	LastChangeDate:      "LastChangeDate",
	IsMarkedForDeletion: "IsMarkedForDeletion",
	ProductGroup:        "ProductGroup",
	BaseUnit:            "BaseUnit",
	ProductHierarchy:    "ProductHierarchy",
}

var SapProductMasterClassProductGeneralDatumTableColumns = struct {
	Product             string
	ProductType         string
	CreationDate        string
	LastChangeDate      string
	IsMarkedForDeletion string
	ProductGroup        string
	BaseUnit            string
	ProductHierarchy    string
}{
	Product:             "sap_product_master_class_product_general_data.Product",
	ProductType:         "sap_product_master_class_product_general_data.ProductType",
	CreationDate:        "sap_product_master_class_product_general_data.CreationDate",
	LastChangeDate:      "sap_product_master_class_product_general_data.LastChangeDate",
	IsMarkedForDeletion: "sap_product_master_class_product_general_data.IsMarkedForDeletion",
	ProductGroup:        "sap_product_master_class_product_general_data.ProductGroup",
	BaseUnit:            "sap_product_master_class_product_general_data.BaseUnit",
	ProductHierarchy:    "sap_product_master_class_product_general_data.ProductHierarchy",
}

// Generated where

var SapProductMasterClassProductGeneralDatumWhere = struct {
	Product             whereHelperstring
	ProductType         whereHelpernull_String
	CreationDate        whereHelpernull_String
	LastChangeDate      whereHelpernull_String
	IsMarkedForDeletion whereHelpernull_Bool
	ProductGroup        whereHelpernull_String
	BaseUnit            whereHelpernull_String
	ProductHierarchy    whereHelpernull_String
}{
	Product:             whereHelperstring{field: "`sap_product_master_class_product_general_data`.`Product`"},
	ProductType:         whereHelpernull_String{field: "`sap_product_master_class_product_general_data`.`ProductType`"},
	CreationDate:        whereHelpernull_String{field: "`sap_product_master_class_product_general_data`.`CreationDate`"},
	LastChangeDate:      whereHelpernull_String{field: "`sap_product_master_class_product_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`sap_product_master_class_product_general_data`.`IsMarkedForDeletion`"},
	ProductGroup:        whereHelpernull_String{field: "`sap_product_master_class_product_general_data`.`ProductGroup`"},
	BaseUnit:            whereHelpernull_String{field: "`sap_product_master_class_product_general_data`.`BaseUnit`"},
	ProductHierarchy:    whereHelpernull_String{field: "`sap_product_master_class_product_general_data`.`ProductHierarchy`"},
}

// SapProductMasterClassProductGeneralDatumRels is where relationship names are stored.
var SapProductMasterClassProductGeneralDatumRels = struct {
	ProductSapProductMasterClassProductCharacteristicData string
	ProductSapProductMasterClassProductClassData          string
}{
	ProductSapProductMasterClassProductCharacteristicData: "ProductSapProductMasterClassProductCharacteristicData",
	ProductSapProductMasterClassProductClassData:          "ProductSapProductMasterClassProductClassData",
}

// sapProductMasterClassProductGeneralDatumR is where relationships are stored.
type sapProductMasterClassProductGeneralDatumR struct {
	ProductSapProductMasterClassProductCharacteristicData SapProductMasterClassProductCharacteristicDatumSlice `boil:"ProductSapProductMasterClassProductCharacteristicData" json:"ProductSapProductMasterClassProductCharacteristicData" toml:"ProductSapProductMasterClassProductCharacteristicData" yaml:"ProductSapProductMasterClassProductCharacteristicData"`
	ProductSapProductMasterClassProductClassData          SapProductMasterClassProductClassDatumSlice          `boil:"ProductSapProductMasterClassProductClassData" json:"ProductSapProductMasterClassProductClassData" toml:"ProductSapProductMasterClassProductClassData" yaml:"ProductSapProductMasterClassProductClassData"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterClassProductGeneralDatumR) NewStruct() *sapProductMasterClassProductGeneralDatumR {
	return &sapProductMasterClassProductGeneralDatumR{}
}

func (r *sapProductMasterClassProductGeneralDatumR) GetProductSapProductMasterClassProductCharacteristicData() SapProductMasterClassProductCharacteristicDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductSapProductMasterClassProductCharacteristicData
}

func (r *sapProductMasterClassProductGeneralDatumR) GetProductSapProductMasterClassProductClassData() SapProductMasterClassProductClassDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductSapProductMasterClassProductClassData
}

// sapProductMasterClassProductGeneralDatumL is where Load methods for each relationship are stored.
type sapProductMasterClassProductGeneralDatumL struct{}

var (
	sapProductMasterClassProductGeneralDatumAllColumns            = []string{"Product", "ProductType", "CreationDate", "LastChangeDate", "IsMarkedForDeletion", "ProductGroup", "BaseUnit", "ProductHierarchy"}
	sapProductMasterClassProductGeneralDatumColumnsWithoutDefault = []string{"Product", "ProductType", "CreationDate", "LastChangeDate", "IsMarkedForDeletion", "ProductGroup", "BaseUnit", "ProductHierarchy"}
	sapProductMasterClassProductGeneralDatumColumnsWithDefault    = []string{}
	sapProductMasterClassProductGeneralDatumPrimaryKeyColumns     = []string{"Product"}
	sapProductMasterClassProductGeneralDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterClassProductGeneralDatumSlice is an alias for a slice of pointers to SapProductMasterClassProductGeneralDatum.
	// This should almost always be used instead of []SapProductMasterClassProductGeneralDatum.
	SapProductMasterClassProductGeneralDatumSlice []*SapProductMasterClassProductGeneralDatum
	// SapProductMasterClassProductGeneralDatumHook is the signature for custom SapProductMasterClassProductGeneralDatum hook methods
	SapProductMasterClassProductGeneralDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterClassProductGeneralDatum) error

	sapProductMasterClassProductGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterClassProductGeneralDatumType                 = reflect.TypeOf(&SapProductMasterClassProductGeneralDatum{})
	sapProductMasterClassProductGeneralDatumMapping              = queries.MakeStructMapping(sapProductMasterClassProductGeneralDatumType)
	sapProductMasterClassProductGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns)
	sapProductMasterClassProductGeneralDatumInsertCacheMut       sync.RWMutex
	sapProductMasterClassProductGeneralDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterClassProductGeneralDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterClassProductGeneralDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterClassProductGeneralDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterClassProductGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterClassProductGeneralDatumAfterSelectHooks []SapProductMasterClassProductGeneralDatumHook

var sapProductMasterClassProductGeneralDatumBeforeInsertHooks []SapProductMasterClassProductGeneralDatumHook
var sapProductMasterClassProductGeneralDatumAfterInsertHooks []SapProductMasterClassProductGeneralDatumHook

var sapProductMasterClassProductGeneralDatumBeforeUpdateHooks []SapProductMasterClassProductGeneralDatumHook
var sapProductMasterClassProductGeneralDatumAfterUpdateHooks []SapProductMasterClassProductGeneralDatumHook

var sapProductMasterClassProductGeneralDatumBeforeDeleteHooks []SapProductMasterClassProductGeneralDatumHook
var sapProductMasterClassProductGeneralDatumAfterDeleteHooks []SapProductMasterClassProductGeneralDatumHook

var sapProductMasterClassProductGeneralDatumBeforeUpsertHooks []SapProductMasterClassProductGeneralDatumHook
var sapProductMasterClassProductGeneralDatumAfterUpsertHooks []SapProductMasterClassProductGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterClassProductGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterClassProductGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterClassProductGeneralDatumHook registers your hook function for all future operations.
func AddSapProductMasterClassProductGeneralDatumHook(hookPoint boil.HookPoint, sapProductMasterClassProductGeneralDatumHook SapProductMasterClassProductGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterClassProductGeneralDatumAfterSelectHooks = append(sapProductMasterClassProductGeneralDatumAfterSelectHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterClassProductGeneralDatumBeforeInsertHooks = append(sapProductMasterClassProductGeneralDatumBeforeInsertHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterClassProductGeneralDatumAfterInsertHooks = append(sapProductMasterClassProductGeneralDatumAfterInsertHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterClassProductGeneralDatumBeforeUpdateHooks = append(sapProductMasterClassProductGeneralDatumBeforeUpdateHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterClassProductGeneralDatumAfterUpdateHooks = append(sapProductMasterClassProductGeneralDatumAfterUpdateHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterClassProductGeneralDatumBeforeDeleteHooks = append(sapProductMasterClassProductGeneralDatumBeforeDeleteHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterClassProductGeneralDatumAfterDeleteHooks = append(sapProductMasterClassProductGeneralDatumAfterDeleteHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterClassProductGeneralDatumBeforeUpsertHooks = append(sapProductMasterClassProductGeneralDatumBeforeUpsertHooks, sapProductMasterClassProductGeneralDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterClassProductGeneralDatumAfterUpsertHooks = append(sapProductMasterClassProductGeneralDatumAfterUpsertHooks, sapProductMasterClassProductGeneralDatumHook)
	}
}

// One returns a single sapProductMasterClassProductGeneralDatum record from the query.
func (q sapProductMasterClassProductGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterClassProductGeneralDatum, error) {
	o := &SapProductMasterClassProductGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_class_product_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterClassProductGeneralDatum records from the query.
func (q sapProductMasterClassProductGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterClassProductGeneralDatumSlice, error) {
	var o []*SapProductMasterClassProductGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterClassProductGeneralDatum slice")
	}

	if len(sapProductMasterClassProductGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterClassProductGeneralDatum records in the query.
func (q sapProductMasterClassProductGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_class_product_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterClassProductGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_class_product_general_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterClassProductCharacteristicData retrieves all the sap_product_master_class_product_characteristic_datum's SapProductMasterClassProductCharacteristicData with an executor via Product column.
func (o *SapProductMasterClassProductGeneralDatum) ProductSapProductMasterClassProductCharacteristicData(mods ...qm.QueryMod) sapProductMasterClassProductCharacteristicDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_product_master_class_product_characteristic_data`.`Product`=?", o.Product),
	)

	return SapProductMasterClassProductCharacteristicData(queryMods...)
}

// ProductSapProductMasterClassProductClassData retrieves all the sap_product_master_class_product_class_datum's SapProductMasterClassProductClassData with an executor via Product column.
func (o *SapProductMasterClassProductGeneralDatum) ProductSapProductMasterClassProductClassData(mods ...qm.QueryMod) sapProductMasterClassProductClassDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_product_master_class_product_class_data`.`Product`=?", o.Product),
	)

	return SapProductMasterClassProductClassData(queryMods...)
}

// LoadProductSapProductMasterClassProductCharacteristicData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProductMasterClassProductGeneralDatumL) LoadProductSapProductMasterClassProductCharacteristicData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterClassProductGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterClassProductGeneralDatum
	var object *SapProductMasterClassProductGeneralDatum

	if singular {
		object = maybeSapProductMasterClassProductGeneralDatum.(*SapProductMasterClassProductGeneralDatum)
	} else {
		slice = *maybeSapProductMasterClassProductGeneralDatum.(*[]*SapProductMasterClassProductGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterClassProductGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterClassProductGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_class_product_characteristic_data`),
		qm.WhereIn(`sap_product_master_class_product_characteristic_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_product_master_class_product_characteristic_data")
	}

	var resultSlice []*SapProductMasterClassProductCharacteristicDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_product_master_class_product_characteristic_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_product_master_class_product_characteristic_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_class_product_characteristic_data")
	}

	if len(sapProductMasterClassProductCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductSapProductMasterClassProductCharacteristicData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProductMasterClassProductCharacteristicDatumR{}
			}
			foreign.R.ProductSapProductMasterClassProductGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterClassProductCharacteristicData = append(local.R.ProductSapProductMasterClassProductCharacteristicData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProductMasterClassProductCharacteristicDatumR{}
				}
				foreign.R.ProductSapProductMasterClassProductGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadProductSapProductMasterClassProductClassData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProductMasterClassProductGeneralDatumL) LoadProductSapProductMasterClassProductClassData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterClassProductGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterClassProductGeneralDatum
	var object *SapProductMasterClassProductGeneralDatum

	if singular {
		object = maybeSapProductMasterClassProductGeneralDatum.(*SapProductMasterClassProductGeneralDatum)
	} else {
		slice = *maybeSapProductMasterClassProductGeneralDatum.(*[]*SapProductMasterClassProductGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterClassProductGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterClassProductGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_class_product_class_data`),
		qm.WhereIn(`sap_product_master_class_product_class_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_product_master_class_product_class_data")
	}

	var resultSlice []*SapProductMasterClassProductClassDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_product_master_class_product_class_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_product_master_class_product_class_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_class_product_class_data")
	}

	if len(sapProductMasterClassProductClassDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductSapProductMasterClassProductClassData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProductMasterClassProductClassDatumR{}
			}
			foreign.R.ProductSapProductMasterClassProductGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterClassProductClassData = append(local.R.ProductSapProductMasterClassProductClassData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProductMasterClassProductClassDatumR{}
				}
				foreign.R.ProductSapProductMasterClassProductGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// AddProductSapProductMasterClassProductCharacteristicData adds the given related objects to the existing relationships
// of the sap_product_master_class_product_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductSapProductMasterClassProductCharacteristicData.
// Sets related.R.ProductSapProductMasterClassProductGeneralDatum appropriately.
func (o *SapProductMasterClassProductGeneralDatum) AddProductSapProductMasterClassProductCharacteristicData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProductMasterClassProductCharacteristicDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Product = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_product_master_class_product_characteristic_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductCharacteristicDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.Product, rel.ClassInternalID, rel.CharcInternalID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Product = o.Product
		}
	}

	if o.R == nil {
		o.R = &sapProductMasterClassProductGeneralDatumR{
			ProductSapProductMasterClassProductCharacteristicData: related,
		}
	} else {
		o.R.ProductSapProductMasterClassProductCharacteristicData = append(o.R.ProductSapProductMasterClassProductCharacteristicData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProductMasterClassProductCharacteristicDatumR{
				ProductSapProductMasterClassProductGeneralDatum: o,
			}
		} else {
			rel.R.ProductSapProductMasterClassProductGeneralDatum = o
		}
	}
	return nil
}

// AddProductSapProductMasterClassProductClassData adds the given related objects to the existing relationships
// of the sap_product_master_class_product_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductSapProductMasterClassProductClassData.
// Sets related.R.ProductSapProductMasterClassProductGeneralDatum appropriately.
func (o *SapProductMasterClassProductGeneralDatum) AddProductSapProductMasterClassProductClassData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProductMasterClassProductClassDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Product = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_product_master_class_product_class_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductClassDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.Product, rel.ClassInternalID, rel.KeyDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Product = o.Product
		}
	}

	if o.R == nil {
		o.R = &sapProductMasterClassProductGeneralDatumR{
			ProductSapProductMasterClassProductClassData: related,
		}
	} else {
		o.R.ProductSapProductMasterClassProductClassData = append(o.R.ProductSapProductMasterClassProductClassData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProductMasterClassProductClassDatumR{
				ProductSapProductMasterClassProductGeneralDatum: o,
			}
		} else {
			rel.R.ProductSapProductMasterClassProductGeneralDatum = o
		}
	}
	return nil
}

// SapProductMasterClassProductGeneralData retrieves all the records using an executor.
func SapProductMasterClassProductGeneralData(mods ...qm.QueryMod) sapProductMasterClassProductGeneralDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_class_product_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_product_master_class_product_general_data`.*"})
	}

	return sapProductMasterClassProductGeneralDatumQuery{q}
}

// FindSapProductMasterClassProductGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterClassProductGeneralDatum(ctx context.Context, exec boil.ContextExecutor, product string, selectCols ...string) (*SapProductMasterClassProductGeneralDatum, error) {
	sapProductMasterClassProductGeneralDatumObj := &SapProductMasterClassProductGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_class_product_general_data` where `Product`=?", sel,
	)

	q := queries.Raw(query, product)

	err := q.Bind(ctx, exec, sapProductMasterClassProductGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_class_product_general_data")
	}

	if err = sapProductMasterClassProductGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterClassProductGeneralDatumObj, err
	}

	return sapProductMasterClassProductGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterClassProductGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_product_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassProductGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterClassProductGeneralDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterClassProductGeneralDatumInsertCache[key]
	sapProductMasterClassProductGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterClassProductGeneralDatumAllColumns,
			sapProductMasterClassProductGeneralDatumColumnsWithDefault,
			sapProductMasterClassProductGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_class_product_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_class_product_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_class_product_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_class_product_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_product_general_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassProductGeneralDatumInsertCacheMut.Lock()
		sapProductMasterClassProductGeneralDatumInsertCache[key] = cache
		sapProductMasterClassProductGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterClassProductGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterClassProductGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterClassProductGeneralDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterClassProductGeneralDatumUpdateCache[key]
	sapProductMasterClassProductGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterClassProductGeneralDatumAllColumns,
			sapProductMasterClassProductGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_class_product_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_class_product_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, append(wl, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_class_product_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_class_product_general_data")
	}

	if !cached {
		sapProductMasterClassProductGeneralDatumUpdateCacheMut.Lock()
		sapProductMasterClassProductGeneralDatumUpdateCache[key] = cache
		sapProductMasterClassProductGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterClassProductGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_class_product_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_class_product_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterClassProductGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_class_product_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterClassProductGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterClassProductGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterClassProductGeneralDatumUniqueColumns = []string{
	"Product",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterClassProductGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_class_product_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterClassProductGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterClassProductGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterClassProductGeneralDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterClassProductGeneralDatumUpsertCache[key]
	sapProductMasterClassProductGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterClassProductGeneralDatumAllColumns,
			sapProductMasterClassProductGeneralDatumColumnsWithDefault,
			sapProductMasterClassProductGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterClassProductGeneralDatumAllColumns,
			sapProductMasterClassProductGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_class_product_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_class_product_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_class_product_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_class_product_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterClassProductGeneralDatumType, sapProductMasterClassProductGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_class_product_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_class_product_general_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterClassProductGeneralDatumUpsertCacheMut.Lock()
		sapProductMasterClassProductGeneralDatumUpsertCache[key] = cache
		sapProductMasterClassProductGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterClassProductGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterClassProductGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterClassProductGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterClassProductGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_class_product_general_data` WHERE `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_class_product_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_class_product_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterClassProductGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterClassProductGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_class_product_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_product_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterClassProductGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterClassProductGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_class_product_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterClassProductGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_class_product_general_data")
	}

	if len(sapProductMasterClassProductGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterClassProductGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterClassProductGeneralDatum(ctx, exec, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterClassProductGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterClassProductGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterClassProductGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_class_product_general_data`.* FROM `sap_product_master_class_product_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterClassProductGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterClassProductGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterClassProductGeneralDatumExists checks if the SapProductMasterClassProductGeneralDatum row exists.
func SapProductMasterClassProductGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_class_product_general_data` where `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product)
	}
	row := exec.QueryRowContext(ctx, sql, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_class_product_general_data exists")
	}

	return exists, nil
}
