// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerSupplierDatum is an object representing the database table.
type SapBusinessPartnerSupplierDatum struct {
	Supplier                    string      `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	AuthorizationGroup          null.String `boil:"AuthorizationGroup" json:"AuthorizationGroup,omitempty" toml:"AuthorizationGroup" yaml:"AuthorizationGroup,omitempty"`
	CreationDate                null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	Customer                    null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	PaymentIsBlockedForSupplier null.Bool   `boil:"PaymentIsBlockedForSupplier" json:"PaymentIsBlockedForSupplier,omitempty" toml:"PaymentIsBlockedForSupplier" yaml:"PaymentIsBlockedForSupplier,omitempty"`
	PostingIsBlocked            null.Bool   `boil:"PostingIsBlocked" json:"PostingIsBlocked,omitempty" toml:"PostingIsBlocked" yaml:"PostingIsBlocked,omitempty"`
	PurchasingIsBlocked         null.Bool   `boil:"PurchasingIsBlocked" json:"PurchasingIsBlocked,omitempty" toml:"PurchasingIsBlocked" yaml:"PurchasingIsBlocked,omitempty"`
	SupplierAccountGroup        null.String `boil:"SupplierAccountGroup" json:"SupplierAccountGroup,omitempty" toml:"SupplierAccountGroup" yaml:"SupplierAccountGroup,omitempty"`
	SupplierFullName            null.String `boil:"SupplierFullName" json:"SupplierFullName,omitempty" toml:"SupplierFullName" yaml:"SupplierFullName,omitempty"`
	SupplierName                null.String `boil:"SupplierName" json:"SupplierName,omitempty" toml:"SupplierName" yaml:"SupplierName,omitempty"`
	BirthDate                   null.String `boil:"BirthDate" json:"BirthDate,omitempty" toml:"BirthDate" yaml:"BirthDate,omitempty"`
	DeletionIndicator           null.Bool   `boil:"DeletionIndicator" json:"DeletionIndicator,omitempty" toml:"DeletionIndicator" yaml:"DeletionIndicator,omitempty"`
	Industry                    null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	IsNaturalPerson             null.String `boil:"IsNaturalPerson" json:"IsNaturalPerson,omitempty" toml:"IsNaturalPerson" yaml:"IsNaturalPerson,omitempty"`
	SupplierCorporateGroup      null.String `boil:"SupplierCorporateGroup" json:"SupplierCorporateGroup,omitempty" toml:"SupplierCorporateGroup" yaml:"SupplierCorporateGroup,omitempty"`
	SupplierProcurementBlock    null.String `boil:"SupplierProcurementBlock" json:"SupplierProcurementBlock,omitempty" toml:"SupplierProcurementBlock" yaml:"SupplierProcurementBlock,omitempty"`

	R *sapBusinessPartnerSupplierDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerSupplierDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerSupplierDatumColumns = struct {
	Supplier                    string
	AuthorizationGroup          string
	CreationDate                string
	Customer                    string
	PaymentIsBlockedForSupplier string
	PostingIsBlocked            string
	PurchasingIsBlocked         string
	SupplierAccountGroup        string
	SupplierFullName            string
	SupplierName                string
	BirthDate                   string
	DeletionIndicator           string
	Industry                    string
	IsNaturalPerson             string
	SupplierCorporateGroup      string
	SupplierProcurementBlock    string
}{
	Supplier:                    "Supplier",
	AuthorizationGroup:          "AuthorizationGroup",
	CreationDate:                "CreationDate",
	Customer:                    "Customer",
	PaymentIsBlockedForSupplier: "PaymentIsBlockedForSupplier",
	PostingIsBlocked:            "PostingIsBlocked",
	PurchasingIsBlocked:         "PurchasingIsBlocked",
	SupplierAccountGroup:        "SupplierAccountGroup",
	SupplierFullName:            "SupplierFullName",
	SupplierName:                "SupplierName",
	BirthDate:                   "BirthDate",
	DeletionIndicator:           "DeletionIndicator",
	Industry:                    "Industry",
	IsNaturalPerson:             "IsNaturalPerson",
	SupplierCorporateGroup:      "SupplierCorporateGroup",
	SupplierProcurementBlock:    "SupplierProcurementBlock",
}

var SapBusinessPartnerSupplierDatumTableColumns = struct {
	Supplier                    string
	AuthorizationGroup          string
	CreationDate                string
	Customer                    string
	PaymentIsBlockedForSupplier string
	PostingIsBlocked            string
	PurchasingIsBlocked         string
	SupplierAccountGroup        string
	SupplierFullName            string
	SupplierName                string
	BirthDate                   string
	DeletionIndicator           string
	Industry                    string
	IsNaturalPerson             string
	SupplierCorporateGroup      string
	SupplierProcurementBlock    string
}{
	Supplier:                    "sap_business_partner_supplier_data.Supplier",
	AuthorizationGroup:          "sap_business_partner_supplier_data.AuthorizationGroup",
	CreationDate:                "sap_business_partner_supplier_data.CreationDate",
	Customer:                    "sap_business_partner_supplier_data.Customer",
	PaymentIsBlockedForSupplier: "sap_business_partner_supplier_data.PaymentIsBlockedForSupplier",
	PostingIsBlocked:            "sap_business_partner_supplier_data.PostingIsBlocked",
	PurchasingIsBlocked:         "sap_business_partner_supplier_data.PurchasingIsBlocked",
	SupplierAccountGroup:        "sap_business_partner_supplier_data.SupplierAccountGroup",
	SupplierFullName:            "sap_business_partner_supplier_data.SupplierFullName",
	SupplierName:                "sap_business_partner_supplier_data.SupplierName",
	BirthDate:                   "sap_business_partner_supplier_data.BirthDate",
	DeletionIndicator:           "sap_business_partner_supplier_data.DeletionIndicator",
	Industry:                    "sap_business_partner_supplier_data.Industry",
	IsNaturalPerson:             "sap_business_partner_supplier_data.IsNaturalPerson",
	SupplierCorporateGroup:      "sap_business_partner_supplier_data.SupplierCorporateGroup",
	SupplierProcurementBlock:    "sap_business_partner_supplier_data.SupplierProcurementBlock",
}

// Generated where

var SapBusinessPartnerSupplierDatumWhere = struct {
	Supplier                    whereHelperstring
	AuthorizationGroup          whereHelpernull_String
	CreationDate                whereHelpernull_String
	Customer                    whereHelpernull_String
	PaymentIsBlockedForSupplier whereHelpernull_Bool
	PostingIsBlocked            whereHelpernull_Bool
	PurchasingIsBlocked         whereHelpernull_Bool
	SupplierAccountGroup        whereHelpernull_String
	SupplierFullName            whereHelpernull_String
	SupplierName                whereHelpernull_String
	BirthDate                   whereHelpernull_String
	DeletionIndicator           whereHelpernull_Bool
	Industry                    whereHelpernull_String
	IsNaturalPerson             whereHelpernull_String
	SupplierCorporateGroup      whereHelpernull_String
	SupplierProcurementBlock    whereHelpernull_String
}{
	Supplier:                    whereHelperstring{field: "`sap_business_partner_supplier_data`.`Supplier`"},
	AuthorizationGroup:          whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`AuthorizationGroup`"},
	CreationDate:                whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`CreationDate`"},
	Customer:                    whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`Customer`"},
	PaymentIsBlockedForSupplier: whereHelpernull_Bool{field: "`sap_business_partner_supplier_data`.`PaymentIsBlockedForSupplier`"},
	PostingIsBlocked:            whereHelpernull_Bool{field: "`sap_business_partner_supplier_data`.`PostingIsBlocked`"},
	PurchasingIsBlocked:         whereHelpernull_Bool{field: "`sap_business_partner_supplier_data`.`PurchasingIsBlocked`"},
	SupplierAccountGroup:        whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`SupplierAccountGroup`"},
	SupplierFullName:            whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`SupplierFullName`"},
	SupplierName:                whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`SupplierName`"},
	BirthDate:                   whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`BirthDate`"},
	DeletionIndicator:           whereHelpernull_Bool{field: "`sap_business_partner_supplier_data`.`DeletionIndicator`"},
	Industry:                    whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`Industry`"},
	IsNaturalPerson:             whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`IsNaturalPerson`"},
	SupplierCorporateGroup:      whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`SupplierCorporateGroup`"},
	SupplierProcurementBlock:    whereHelpernull_String{field: "`sap_business_partner_supplier_data`.`SupplierProcurementBlock`"},
}

// SapBusinessPartnerSupplierDatumRels is where relationship names are stored.
var SapBusinessPartnerSupplierDatumRels = struct {
	SupplierSapBusinessPartnerGeneralDatum string
}{
	SupplierSapBusinessPartnerGeneralDatum: "SupplierSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerSupplierDatumR is where relationships are stored.
type sapBusinessPartnerSupplierDatumR struct {
	SupplierSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"SupplierSapBusinessPartnerGeneralDatum" json:"SupplierSapBusinessPartnerGeneralDatum" toml:"SupplierSapBusinessPartnerGeneralDatum" yaml:"SupplierSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerSupplierDatumR) NewStruct() *sapBusinessPartnerSupplierDatumR {
	return &sapBusinessPartnerSupplierDatumR{}
}

// sapBusinessPartnerSupplierDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerSupplierDatumL struct{}

var (
	sapBusinessPartnerSupplierDatumAllColumns            = []string{"Supplier", "AuthorizationGroup", "CreationDate", "Customer", "PaymentIsBlockedForSupplier", "PostingIsBlocked", "PurchasingIsBlocked", "SupplierAccountGroup", "SupplierFullName", "SupplierName", "BirthDate", "DeletionIndicator", "Industry", "IsNaturalPerson", "SupplierCorporateGroup", "SupplierProcurementBlock"}
	sapBusinessPartnerSupplierDatumColumnsWithoutDefault = []string{"Supplier", "AuthorizationGroup", "CreationDate", "Customer", "PaymentIsBlockedForSupplier", "PostingIsBlocked", "PurchasingIsBlocked", "SupplierAccountGroup", "SupplierFullName", "SupplierName", "BirthDate", "DeletionIndicator", "Industry", "IsNaturalPerson", "SupplierCorporateGroup", "SupplierProcurementBlock"}
	sapBusinessPartnerSupplierDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerSupplierDatumPrimaryKeyColumns     = []string{"Supplier"}
	sapBusinessPartnerSupplierDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerSupplierDatumSlice is an alias for a slice of pointers to SapBusinessPartnerSupplierDatum.
	// This should almost always be used instead of []SapBusinessPartnerSupplierDatum.
	SapBusinessPartnerSupplierDatumSlice []*SapBusinessPartnerSupplierDatum
	// SapBusinessPartnerSupplierDatumHook is the signature for custom SapBusinessPartnerSupplierDatum hook methods
	SapBusinessPartnerSupplierDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerSupplierDatum) error

	sapBusinessPartnerSupplierDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerSupplierDatumType                 = reflect.TypeOf(&SapBusinessPartnerSupplierDatum{})
	sapBusinessPartnerSupplierDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerSupplierDatumType)
	sapBusinessPartnerSupplierDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, sapBusinessPartnerSupplierDatumPrimaryKeyColumns)
	sapBusinessPartnerSupplierDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerSupplierDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerSupplierDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerSupplierDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerSupplierDatumAfterSelectHooks []SapBusinessPartnerSupplierDatumHook

var sapBusinessPartnerSupplierDatumBeforeInsertHooks []SapBusinessPartnerSupplierDatumHook
var sapBusinessPartnerSupplierDatumAfterInsertHooks []SapBusinessPartnerSupplierDatumHook

var sapBusinessPartnerSupplierDatumBeforeUpdateHooks []SapBusinessPartnerSupplierDatumHook
var sapBusinessPartnerSupplierDatumAfterUpdateHooks []SapBusinessPartnerSupplierDatumHook

var sapBusinessPartnerSupplierDatumBeforeDeleteHooks []SapBusinessPartnerSupplierDatumHook
var sapBusinessPartnerSupplierDatumAfterDeleteHooks []SapBusinessPartnerSupplierDatumHook

var sapBusinessPartnerSupplierDatumBeforeUpsertHooks []SapBusinessPartnerSupplierDatumHook
var sapBusinessPartnerSupplierDatumAfterUpsertHooks []SapBusinessPartnerSupplierDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerSupplierDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerSupplierDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerSupplierDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerSupplierDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerSupplierDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerSupplierDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerSupplierDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerSupplierDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerSupplierDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerSupplierDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerSupplierDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerSupplierDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerSupplierDatumHook SapBusinessPartnerSupplierDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerSupplierDatumAfterSelectHooks = append(sapBusinessPartnerSupplierDatumAfterSelectHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerSupplierDatumBeforeInsertHooks = append(sapBusinessPartnerSupplierDatumBeforeInsertHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerSupplierDatumAfterInsertHooks = append(sapBusinessPartnerSupplierDatumAfterInsertHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerSupplierDatumBeforeUpdateHooks = append(sapBusinessPartnerSupplierDatumBeforeUpdateHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerSupplierDatumAfterUpdateHooks = append(sapBusinessPartnerSupplierDatumAfterUpdateHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerSupplierDatumBeforeDeleteHooks = append(sapBusinessPartnerSupplierDatumBeforeDeleteHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerSupplierDatumAfterDeleteHooks = append(sapBusinessPartnerSupplierDatumAfterDeleteHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerSupplierDatumBeforeUpsertHooks = append(sapBusinessPartnerSupplierDatumBeforeUpsertHooks, sapBusinessPartnerSupplierDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerSupplierDatumAfterUpsertHooks = append(sapBusinessPartnerSupplierDatumAfterUpsertHooks, sapBusinessPartnerSupplierDatumHook)
	}
}

// One returns a single sapBusinessPartnerSupplierDatum record from the query.
func (q sapBusinessPartnerSupplierDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerSupplierDatum, error) {
	o := &SapBusinessPartnerSupplierDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_supplier_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerSupplierDatum records from the query.
func (q sapBusinessPartnerSupplierDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerSupplierDatumSlice, error) {
	var o []*SapBusinessPartnerSupplierDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerSupplierDatum slice")
	}

	if len(sapBusinessPartnerSupplierDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerSupplierDatum records in the query.
func (q sapBusinessPartnerSupplierDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_supplier_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerSupplierDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_supplier_data exists")
	}

	return count > 0, nil
}

// SupplierSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerSupplierDatum) SupplierSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Supplier),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadSupplierSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerSupplierDatumL) LoadSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerSupplierDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerSupplierDatum
	var object *SapBusinessPartnerSupplierDatum

	if singular {
		object = maybeSapBusinessPartnerSupplierDatum.(*SapBusinessPartnerSupplierDatum)
	} else {
		slice = *maybeSapBusinessPartnerSupplierDatum.(*[]*SapBusinessPartnerSupplierDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerSupplierDatumR{}
		}
		args = append(args, object.Supplier)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerSupplierDatumR{}
			}

			for _, a := range args {
				if a == obj.Supplier {
					continue Outer
				}
			}

			args = append(args, obj.Supplier)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerSupplierDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupplierSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.SupplierSapBusinessPartnerSupplierDatum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Supplier == foreign.BusinessPartner {
				local.R.SupplierSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerSupplierDatum = local
				break
			}
		}
	}

	return nil
}

// SetSupplierSapBusinessPartnerGeneralDatum of the sapBusinessPartnerSupplierDatum to the related item.
// Sets o.R.SupplierSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.SupplierSapBusinessPartnerSupplierDatum.
func (o *SapBusinessPartnerSupplierDatum) SetSupplierSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_supplier_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Supplier}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Supplier = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerSupplierDatumR{
			SupplierSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierDatum: o,
		}
	} else {
		related.R.SupplierSapBusinessPartnerSupplierDatum = o
	}

	return nil
}

// SapBusinessPartnerSupplierData retrieves all the records using an executor.
func SapBusinessPartnerSupplierData(mods ...qm.QueryMod) sapBusinessPartnerSupplierDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_supplier_data`"))
	return sapBusinessPartnerSupplierDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerSupplierDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerSupplierDatum(ctx context.Context, exec boil.ContextExecutor, supplier string, selectCols ...string) (*SapBusinessPartnerSupplierDatum, error) {
	sapBusinessPartnerSupplierDatumObj := &SapBusinessPartnerSupplierDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_supplier_data` where `Supplier`=?", sel,
	)

	q := queries.Raw(query, supplier)

	err := q.Bind(ctx, exec, sapBusinessPartnerSupplierDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_supplier_data")
	}

	if err = sapBusinessPartnerSupplierDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerSupplierDatumObj, err
	}

	return sapBusinessPartnerSupplierDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerSupplierDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerSupplierDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierDatumInsertCache[key]
	sapBusinessPartnerSupplierDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerSupplierDatumAllColumns,
			sapBusinessPartnerSupplierDatumColumnsWithDefault,
			sapBusinessPartnerSupplierDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_supplier_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_supplier_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_supplier_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_supplier_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Supplier,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierDatumInsertCacheMut.Lock()
		sapBusinessPartnerSupplierDatumInsertCache[key] = cache
		sapBusinessPartnerSupplierDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerSupplierDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerSupplierDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerSupplierDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierDatumUpdateCache[key]
	sapBusinessPartnerSupplierDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerSupplierDatumAllColumns,
			sapBusinessPartnerSupplierDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_supplier_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_supplier_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, append(wl, sapBusinessPartnerSupplierDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_supplier_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_supplier_data")
	}

	if !cached {
		sapBusinessPartnerSupplierDatumUpdateCacheMut.Lock()
		sapBusinessPartnerSupplierDatumUpdateCache[key] = cache
		sapBusinessPartnerSupplierDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerSupplierDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_supplier_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_supplier_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerSupplierDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_supplier_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerSupplierDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerSupplierDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerSupplierDatumUniqueColumns = []string{
	"Supplier",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerSupplierDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_supplier_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerSupplierDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerSupplierDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerSupplierDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerSupplierDatumUpsertCache[key]
	sapBusinessPartnerSupplierDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerSupplierDatumAllColumns,
			sapBusinessPartnerSupplierDatumColumnsWithDefault,
			sapBusinessPartnerSupplierDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerSupplierDatumAllColumns,
			sapBusinessPartnerSupplierDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_supplier_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_supplier_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_supplier_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_supplier_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerSupplierDatumType, sapBusinessPartnerSupplierDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_supplier_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_supplier_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerSupplierDatumUpsertCacheMut.Lock()
		sapBusinessPartnerSupplierDatumUpsertCache[key] = cache
		sapBusinessPartnerSupplierDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerSupplierDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerSupplierDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerSupplierDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerSupplierDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_supplier_data` WHERE `Supplier`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_supplier_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_supplier_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerSupplierDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerSupplierDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_supplier_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerSupplierDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerSupplierDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_supplier_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerSupplierDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_supplier_data")
	}

	if len(sapBusinessPartnerSupplierDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerSupplierDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerSupplierDatum(ctx, exec, o.Supplier)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerSupplierDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerSupplierDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerSupplierDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_supplier_data`.* FROM `sap_business_partner_supplier_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerSupplierDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerSupplierDatumExists checks if the SapBusinessPartnerSupplierDatum row exists.
func SapBusinessPartnerSupplierDatumExists(ctx context.Context, exec boil.ContextExecutor, supplier string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_supplier_data` where `Supplier`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplier)
	}
	row := exec.QueryRowContext(ctx, sql, supplier)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_supplier_data exists")
	}

	return exists, nil
}
