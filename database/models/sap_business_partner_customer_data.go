// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerCustomerDatum is an object representing the database table.
type SapBusinessPartnerCustomerDatum struct {
	Customer                    string      `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	AuthorizationGroup          null.String `boil:"AuthorizationGroup" json:"AuthorizationGroup,omitempty" toml:"AuthorizationGroup" yaml:"AuthorizationGroup,omitempty"`
	BillingIsBlockedForCustomer null.String `boil:"BillingIsBlockedForCustomer" json:"BillingIsBlockedForCustomer,omitempty" toml:"BillingIsBlockedForCustomer" yaml:"BillingIsBlockedForCustomer,omitempty"`
	CreationDate                null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CustomerAccountGroup        null.String `boil:"CustomerAccountGroup" json:"CustomerAccountGroup,omitempty" toml:"CustomerAccountGroup" yaml:"CustomerAccountGroup,omitempty"`
	CustomerClassification      null.String `boil:"CustomerClassification" json:"CustomerClassification,omitempty" toml:"CustomerClassification" yaml:"CustomerClassification,omitempty"`
	CustomerFullName            null.String `boil:"CustomerFullName" json:"CustomerFullName,omitempty" toml:"CustomerFullName" yaml:"CustomerFullName,omitempty"`
	CustomerName                null.String `boil:"CustomerName" json:"CustomerName,omitempty" toml:"CustomerName" yaml:"CustomerName,omitempty"`
	DeliveryIsBlocked           null.String `boil:"DeliveryIsBlocked" json:"DeliveryIsBlocked,omitempty" toml:"DeliveryIsBlocked" yaml:"DeliveryIsBlocked,omitempty"`
	OrderIsBlockedForCustomer   null.String `boil:"OrderIsBlockedForCustomer" json:"OrderIsBlockedForCustomer,omitempty" toml:"OrderIsBlockedForCustomer" yaml:"OrderIsBlockedForCustomer,omitempty"`
	PostingIsBlocked            null.Bool   `boil:"PostingIsBlocked" json:"PostingIsBlocked,omitempty" toml:"PostingIsBlocked" yaml:"PostingIsBlocked,omitempty"`
	Supplier                    null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	CustomerCorporateGroup      null.String `boil:"CustomerCorporateGroup" json:"CustomerCorporateGroup,omitempty" toml:"CustomerCorporateGroup" yaml:"CustomerCorporateGroup,omitempty"`
	Industry                    null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	TaxNumber1                  null.String `boil:"TaxNumber1" json:"TaxNumber1,omitempty" toml:"TaxNumber1" yaml:"TaxNumber1,omitempty"`
	DeletionIndicator           null.Bool   `boil:"DeletionIndicator" json:"DeletionIndicator,omitempty" toml:"DeletionIndicator" yaml:"DeletionIndicator,omitempty"`
	CityCode                    null.String `boil:"CityCode" json:"CityCode,omitempty" toml:"CityCode" yaml:"CityCode,omitempty"`
	County                      null.String `boil:"County" json:"County,omitempty" toml:"County" yaml:"County,omitempty"`

	R *sapBusinessPartnerCustomerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerCustomerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerCustomerDatumColumns = struct {
	Customer                    string
	AuthorizationGroup          string
	BillingIsBlockedForCustomer string
	CreationDate                string
	CustomerAccountGroup        string
	CustomerClassification      string
	CustomerFullName            string
	CustomerName                string
	DeliveryIsBlocked           string
	OrderIsBlockedForCustomer   string
	PostingIsBlocked            string
	Supplier                    string
	CustomerCorporateGroup      string
	Industry                    string
	TaxNumber1                  string
	DeletionIndicator           string
	CityCode                    string
	County                      string
}{
	Customer:                    "Customer",
	AuthorizationGroup:          "AuthorizationGroup",
	BillingIsBlockedForCustomer: "BillingIsBlockedForCustomer",
	CreationDate:                "CreationDate",
	CustomerAccountGroup:        "CustomerAccountGroup",
	CustomerClassification:      "CustomerClassification",
	CustomerFullName:            "CustomerFullName",
	CustomerName:                "CustomerName",
	DeliveryIsBlocked:           "DeliveryIsBlocked",
	OrderIsBlockedForCustomer:   "OrderIsBlockedForCustomer",
	PostingIsBlocked:            "PostingIsBlocked",
	Supplier:                    "Supplier",
	CustomerCorporateGroup:      "CustomerCorporateGroup",
	Industry:                    "Industry",
	TaxNumber1:                  "TaxNumber1",
	DeletionIndicator:           "DeletionIndicator",
	CityCode:                    "CityCode",
	County:                      "County",
}

var SapBusinessPartnerCustomerDatumTableColumns = struct {
	Customer                    string
	AuthorizationGroup          string
	BillingIsBlockedForCustomer string
	CreationDate                string
	CustomerAccountGroup        string
	CustomerClassification      string
	CustomerFullName            string
	CustomerName                string
	DeliveryIsBlocked           string
	OrderIsBlockedForCustomer   string
	PostingIsBlocked            string
	Supplier                    string
	CustomerCorporateGroup      string
	Industry                    string
	TaxNumber1                  string
	DeletionIndicator           string
	CityCode                    string
	County                      string
}{
	Customer:                    "sap_business_partner_customer_data.Customer",
	AuthorizationGroup:          "sap_business_partner_customer_data.AuthorizationGroup",
	BillingIsBlockedForCustomer: "sap_business_partner_customer_data.BillingIsBlockedForCustomer",
	CreationDate:                "sap_business_partner_customer_data.CreationDate",
	CustomerAccountGroup:        "sap_business_partner_customer_data.CustomerAccountGroup",
	CustomerClassification:      "sap_business_partner_customer_data.CustomerClassification",
	CustomerFullName:            "sap_business_partner_customer_data.CustomerFullName",
	CustomerName:                "sap_business_partner_customer_data.CustomerName",
	DeliveryIsBlocked:           "sap_business_partner_customer_data.DeliveryIsBlocked",
	OrderIsBlockedForCustomer:   "sap_business_partner_customer_data.OrderIsBlockedForCustomer",
	PostingIsBlocked:            "sap_business_partner_customer_data.PostingIsBlocked",
	Supplier:                    "sap_business_partner_customer_data.Supplier",
	CustomerCorporateGroup:      "sap_business_partner_customer_data.CustomerCorporateGroup",
	Industry:                    "sap_business_partner_customer_data.Industry",
	TaxNumber1:                  "sap_business_partner_customer_data.TaxNumber1",
	DeletionIndicator:           "sap_business_partner_customer_data.DeletionIndicator",
	CityCode:                    "sap_business_partner_customer_data.CityCode",
	County:                      "sap_business_partner_customer_data.County",
}

// Generated where

var SapBusinessPartnerCustomerDatumWhere = struct {
	Customer                    whereHelperstring
	AuthorizationGroup          whereHelpernull_String
	BillingIsBlockedForCustomer whereHelpernull_String
	CreationDate                whereHelpernull_String
	CustomerAccountGroup        whereHelpernull_String
	CustomerClassification      whereHelpernull_String
	CustomerFullName            whereHelpernull_String
	CustomerName                whereHelpernull_String
	DeliveryIsBlocked           whereHelpernull_String
	OrderIsBlockedForCustomer   whereHelpernull_String
	PostingIsBlocked            whereHelpernull_Bool
	Supplier                    whereHelpernull_String
	CustomerCorporateGroup      whereHelpernull_String
	Industry                    whereHelpernull_String
	TaxNumber1                  whereHelpernull_String
	DeletionIndicator           whereHelpernull_Bool
	CityCode                    whereHelpernull_String
	County                      whereHelpernull_String
}{
	Customer:                    whereHelperstring{field: "`sap_business_partner_customer_data`.`Customer`"},
	AuthorizationGroup:          whereHelpernull_String{field: "`sap_business_partner_customer_data`.`AuthorizationGroup`"},
	BillingIsBlockedForCustomer: whereHelpernull_String{field: "`sap_business_partner_customer_data`.`BillingIsBlockedForCustomer`"},
	CreationDate:                whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CreationDate`"},
	CustomerAccountGroup:        whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CustomerAccountGroup`"},
	CustomerClassification:      whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CustomerClassification`"},
	CustomerFullName:            whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CustomerFullName`"},
	CustomerName:                whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CustomerName`"},
	DeliveryIsBlocked:           whereHelpernull_String{field: "`sap_business_partner_customer_data`.`DeliveryIsBlocked`"},
	OrderIsBlockedForCustomer:   whereHelpernull_String{field: "`sap_business_partner_customer_data`.`OrderIsBlockedForCustomer`"},
	PostingIsBlocked:            whereHelpernull_Bool{field: "`sap_business_partner_customer_data`.`PostingIsBlocked`"},
	Supplier:                    whereHelpernull_String{field: "`sap_business_partner_customer_data`.`Supplier`"},
	CustomerCorporateGroup:      whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CustomerCorporateGroup`"},
	Industry:                    whereHelpernull_String{field: "`sap_business_partner_customer_data`.`Industry`"},
	TaxNumber1:                  whereHelpernull_String{field: "`sap_business_partner_customer_data`.`TaxNumber1`"},
	DeletionIndicator:           whereHelpernull_Bool{field: "`sap_business_partner_customer_data`.`DeletionIndicator`"},
	CityCode:                    whereHelpernull_String{field: "`sap_business_partner_customer_data`.`CityCode`"},
	County:                      whereHelpernull_String{field: "`sap_business_partner_customer_data`.`County`"},
}

// SapBusinessPartnerCustomerDatumRels is where relationship names are stored.
var SapBusinessPartnerCustomerDatumRels = struct {
	CustomerSapBusinessPartnerGeneralDatum string
}{
	CustomerSapBusinessPartnerGeneralDatum: "CustomerSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerCustomerDatumR is where relationships are stored.
type sapBusinessPartnerCustomerDatumR struct {
	CustomerSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"CustomerSapBusinessPartnerGeneralDatum" json:"CustomerSapBusinessPartnerGeneralDatum" toml:"CustomerSapBusinessPartnerGeneralDatum" yaml:"CustomerSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerCustomerDatumR) NewStruct() *sapBusinessPartnerCustomerDatumR {
	return &sapBusinessPartnerCustomerDatumR{}
}

// sapBusinessPartnerCustomerDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerCustomerDatumL struct{}

var (
	sapBusinessPartnerCustomerDatumAllColumns            = []string{"Customer", "AuthorizationGroup", "BillingIsBlockedForCustomer", "CreationDate", "CustomerAccountGroup", "CustomerClassification", "CustomerFullName", "CustomerName", "DeliveryIsBlocked", "OrderIsBlockedForCustomer", "PostingIsBlocked", "Supplier", "CustomerCorporateGroup", "Industry", "TaxNumber1", "DeletionIndicator", "CityCode", "County"}
	sapBusinessPartnerCustomerDatumColumnsWithoutDefault = []string{"Customer", "AuthorizationGroup", "BillingIsBlockedForCustomer", "CreationDate", "CustomerAccountGroup", "CustomerClassification", "CustomerFullName", "CustomerName", "DeliveryIsBlocked", "OrderIsBlockedForCustomer", "PostingIsBlocked", "Supplier", "CustomerCorporateGroup", "Industry", "TaxNumber1", "DeletionIndicator", "CityCode", "County"}
	sapBusinessPartnerCustomerDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerCustomerDatumPrimaryKeyColumns     = []string{"Customer"}
	sapBusinessPartnerCustomerDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerCustomerDatumSlice is an alias for a slice of pointers to SapBusinessPartnerCustomerDatum.
	// This should almost always be used instead of []SapBusinessPartnerCustomerDatum.
	SapBusinessPartnerCustomerDatumSlice []*SapBusinessPartnerCustomerDatum
	// SapBusinessPartnerCustomerDatumHook is the signature for custom SapBusinessPartnerCustomerDatum hook methods
	SapBusinessPartnerCustomerDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerCustomerDatum) error

	sapBusinessPartnerCustomerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerCustomerDatumType                 = reflect.TypeOf(&SapBusinessPartnerCustomerDatum{})
	sapBusinessPartnerCustomerDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerCustomerDatumType)
	sapBusinessPartnerCustomerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, sapBusinessPartnerCustomerDatumPrimaryKeyColumns)
	sapBusinessPartnerCustomerDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerCustomerDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerCustomerDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerCustomerDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerCustomerDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerCustomerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerCustomerDatumAfterSelectHooks []SapBusinessPartnerCustomerDatumHook

var sapBusinessPartnerCustomerDatumBeforeInsertHooks []SapBusinessPartnerCustomerDatumHook
var sapBusinessPartnerCustomerDatumAfterInsertHooks []SapBusinessPartnerCustomerDatumHook

var sapBusinessPartnerCustomerDatumBeforeUpdateHooks []SapBusinessPartnerCustomerDatumHook
var sapBusinessPartnerCustomerDatumAfterUpdateHooks []SapBusinessPartnerCustomerDatumHook

var sapBusinessPartnerCustomerDatumBeforeDeleteHooks []SapBusinessPartnerCustomerDatumHook
var sapBusinessPartnerCustomerDatumAfterDeleteHooks []SapBusinessPartnerCustomerDatumHook

var sapBusinessPartnerCustomerDatumBeforeUpsertHooks []SapBusinessPartnerCustomerDatumHook
var sapBusinessPartnerCustomerDatumAfterUpsertHooks []SapBusinessPartnerCustomerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerCustomerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerCustomerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerCustomerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerCustomerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerCustomerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerCustomerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerCustomerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerCustomerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerCustomerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerCustomerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerCustomerDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerCustomerDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerCustomerDatumHook SapBusinessPartnerCustomerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerCustomerDatumAfterSelectHooks = append(sapBusinessPartnerCustomerDatumAfterSelectHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerCustomerDatumBeforeInsertHooks = append(sapBusinessPartnerCustomerDatumBeforeInsertHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerCustomerDatumAfterInsertHooks = append(sapBusinessPartnerCustomerDatumAfterInsertHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerCustomerDatumBeforeUpdateHooks = append(sapBusinessPartnerCustomerDatumBeforeUpdateHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerCustomerDatumAfterUpdateHooks = append(sapBusinessPartnerCustomerDatumAfterUpdateHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerCustomerDatumBeforeDeleteHooks = append(sapBusinessPartnerCustomerDatumBeforeDeleteHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerCustomerDatumAfterDeleteHooks = append(sapBusinessPartnerCustomerDatumAfterDeleteHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerCustomerDatumBeforeUpsertHooks = append(sapBusinessPartnerCustomerDatumBeforeUpsertHooks, sapBusinessPartnerCustomerDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerCustomerDatumAfterUpsertHooks = append(sapBusinessPartnerCustomerDatumAfterUpsertHooks, sapBusinessPartnerCustomerDatumHook)
	}
}

// One returns a single sapBusinessPartnerCustomerDatum record from the query.
func (q sapBusinessPartnerCustomerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerCustomerDatum, error) {
	o := &SapBusinessPartnerCustomerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_customer_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerCustomerDatum records from the query.
func (q sapBusinessPartnerCustomerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerCustomerDatumSlice, error) {
	var o []*SapBusinessPartnerCustomerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerCustomerDatum slice")
	}

	if len(sapBusinessPartnerCustomerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerCustomerDatum records in the query.
func (q sapBusinessPartnerCustomerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_customer_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerCustomerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_customer_data exists")
	}

	return count > 0, nil
}

// CustomerSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerCustomerDatum) CustomerSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Customer),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadCustomerSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerCustomerDatumL) LoadCustomerSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerCustomerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerCustomerDatum
	var object *SapBusinessPartnerCustomerDatum

	if singular {
		object = maybeSapBusinessPartnerCustomerDatum.(*SapBusinessPartnerCustomerDatum)
	} else {
		slice = *maybeSapBusinessPartnerCustomerDatum.(*[]*SapBusinessPartnerCustomerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerCustomerDatumR{}
		}
		args = append(args, object.Customer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerCustomerDatumR{}
			}

			for _, a := range args {
				if a == obj.Customer {
					continue Outer
				}
			}

			args = append(args, obj.Customer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerCustomerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomerSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.CustomerSapBusinessPartnerCustomerDatum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Customer == foreign.BusinessPartner {
				local.R.CustomerSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.CustomerSapBusinessPartnerCustomerDatum = local
				break
			}
		}
	}

	return nil
}

// SetCustomerSapBusinessPartnerGeneralDatum of the sapBusinessPartnerCustomerDatum to the related item.
// Sets o.R.CustomerSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.CustomerSapBusinessPartnerCustomerDatum.
func (o *SapBusinessPartnerCustomerDatum) SetCustomerSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_customer_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Customer"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Customer}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Customer = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerCustomerDatumR{
			CustomerSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.CustomerSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			CustomerSapBusinessPartnerCustomerDatum: o,
		}
	} else {
		related.R.CustomerSapBusinessPartnerCustomerDatum = o
	}

	return nil
}

// SapBusinessPartnerCustomerData retrieves all the records using an executor.
func SapBusinessPartnerCustomerData(mods ...qm.QueryMod) sapBusinessPartnerCustomerDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_customer_data`"))
	return sapBusinessPartnerCustomerDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerCustomerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerCustomerDatum(ctx context.Context, exec boil.ContextExecutor, customer string, selectCols ...string) (*SapBusinessPartnerCustomerDatum, error) {
	sapBusinessPartnerCustomerDatumObj := &SapBusinessPartnerCustomerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_customer_data` where `Customer`=?", sel,
	)

	q := queries.Raw(query, customer)

	err := q.Bind(ctx, exec, sapBusinessPartnerCustomerDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_customer_data")
	}

	if err = sapBusinessPartnerCustomerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerCustomerDatumObj, err
	}

	return sapBusinessPartnerCustomerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerCustomerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_customer_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerCustomerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerCustomerDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerCustomerDatumInsertCache[key]
	sapBusinessPartnerCustomerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerCustomerDatumAllColumns,
			sapBusinessPartnerCustomerDatumColumnsWithDefault,
			sapBusinessPartnerCustomerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_customer_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_customer_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_customer_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_customer_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Customer,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_customer_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerCustomerDatumInsertCacheMut.Lock()
		sapBusinessPartnerCustomerDatumInsertCache[key] = cache
		sapBusinessPartnerCustomerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerCustomerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerCustomerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerCustomerDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerCustomerDatumUpdateCache[key]
	sapBusinessPartnerCustomerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerCustomerDatumAllColumns,
			sapBusinessPartnerCustomerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_customer_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_customer_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, append(wl, sapBusinessPartnerCustomerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_customer_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_customer_data")
	}

	if !cached {
		sapBusinessPartnerCustomerDatumUpdateCacheMut.Lock()
		sapBusinessPartnerCustomerDatumUpdateCache[key] = cache
		sapBusinessPartnerCustomerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerCustomerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_customer_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_customer_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerCustomerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerCustomerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_customer_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerCustomerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerCustomerDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerCustomerDatumUniqueColumns = []string{
	"Customer",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerCustomerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_customer_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerCustomerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerCustomerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerCustomerDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerCustomerDatumUpsertCache[key]
	sapBusinessPartnerCustomerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerCustomerDatumAllColumns,
			sapBusinessPartnerCustomerDatumColumnsWithDefault,
			sapBusinessPartnerCustomerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerCustomerDatumAllColumns,
			sapBusinessPartnerCustomerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_customer_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_customer_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_customer_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_customer_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerCustomerDatumType, sapBusinessPartnerCustomerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_customer_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_customer_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerCustomerDatumUpsertCacheMut.Lock()
		sapBusinessPartnerCustomerDatumUpsertCache[key] = cache
		sapBusinessPartnerCustomerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerCustomerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerCustomerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerCustomerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerCustomerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_customer_data` WHERE `Customer`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_customer_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_customer_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerCustomerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerCustomerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_customer_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_customer_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerCustomerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerCustomerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerCustomerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_customer_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerCustomerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_customer_data")
	}

	if len(sapBusinessPartnerCustomerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerCustomerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerCustomerDatum(ctx, exec, o.Customer)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerCustomerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerCustomerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerCustomerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_customer_data`.* FROM `sap_business_partner_customer_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerCustomerDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerCustomerDatumExists checks if the SapBusinessPartnerCustomerDatum row exists.
func SapBusinessPartnerCustomerDatumExists(ctx context.Context, exec boil.ContextExecutor, customer string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_customer_data` where `Customer`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customer)
	}
	row := exec.QueryRowContext(ctx, sql, customer)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_customer_data exists")
	}

	return exists, nil
}
