// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBillOfMaterialHeaderDatum is an object representing the database table.
type SapBillOfMaterialHeaderDatum struct {
	BillOfMaterial                string      `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialCategory        string      `boil:"BillOfMaterialCategory" json:"BillOfMaterialCategory" toml:"BillOfMaterialCategory" yaml:"BillOfMaterialCategory"`
	BillOfMaterialVariant         string      `boil:"BillOfMaterialVariant" json:"BillOfMaterialVariant" toml:"BillOfMaterialVariant" yaml:"BillOfMaterialVariant"`
	BillOfMaterialVersion         string      `boil:"BillOfMaterialVersion" json:"BillOfMaterialVersion" toml:"BillOfMaterialVersion" yaml:"BillOfMaterialVersion"`
	EngineeringChangeDocument     string      `boil:"EngineeringChangeDocument" json:"EngineeringChangeDocument" toml:"EngineeringChangeDocument" yaml:"EngineeringChangeDocument"`
	Material                      null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                         null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	BillOfMaterialHeaderUUID      null.String `boil:"BillOfMaterialHeaderUUID" json:"BillOfMaterialHeaderUUID,omitempty" toml:"BillOfMaterialHeaderUUID" yaml:"BillOfMaterialHeaderUUID,omitempty"`
	BillOfMaterialVariantUsage    null.String `boil:"BillOfMaterialVariantUsage" json:"BillOfMaterialVariantUsage,omitempty" toml:"BillOfMaterialVariantUsage" yaml:"BillOfMaterialVariantUsage,omitempty"`
	EngineeringChangeDocForEdit   null.String `boil:"EngineeringChangeDocForEdit" json:"EngineeringChangeDocForEdit,omitempty" toml:"EngineeringChangeDocForEdit" yaml:"EngineeringChangeDocForEdit,omitempty"`
	IsMultipleBOMAlt              null.Bool   `boil:"IsMultipleBOMAlt" json:"IsMultipleBOMAlt,omitempty" toml:"IsMultipleBOMAlt" yaml:"IsMultipleBOMAlt,omitempty"`
	BOMHeaderInternalChangeCount  null.String `boil:"BOMHeaderInternalChangeCount" json:"BOMHeaderInternalChangeCount,omitempty" toml:"BOMHeaderInternalChangeCount" yaml:"BOMHeaderInternalChangeCount,omitempty"`
	BOMUsagePriority              null.String `boil:"BOMUsagePriority" json:"BOMUsagePriority,omitempty" toml:"BOMUsagePriority" yaml:"BOMUsagePriority,omitempty"`
	BillOfMaterialAuthsnGrp       null.String `boil:"BillOfMaterialAuthsnGrp" json:"BillOfMaterialAuthsnGrp,omitempty" toml:"BillOfMaterialAuthsnGrp" yaml:"BillOfMaterialAuthsnGrp,omitempty"`
	BOMVersionStatus              null.String `boil:"BOMVersionStatus" json:"BOMVersionStatus,omitempty" toml:"BOMVersionStatus" yaml:"BOMVersionStatus,omitempty"`
	IsVersionBillOfMaterial       null.Bool   `boil:"IsVersionBillOfMaterial" json:"IsVersionBillOfMaterial,omitempty" toml:"IsVersionBillOfMaterial" yaml:"IsVersionBillOfMaterial,omitempty"`
	IsLatestBOMVersion            null.Bool   `boil:"IsLatestBOMVersion" json:"IsLatestBOMVersion,omitempty" toml:"IsLatestBOMVersion" yaml:"IsLatestBOMVersion,omitempty"`
	IsConfiguredMaterial          null.Bool   `boil:"IsConfiguredMaterial" json:"IsConfiguredMaterial,omitempty" toml:"IsConfiguredMaterial" yaml:"IsConfiguredMaterial,omitempty"`
	BOMTechnicalType              null.String `boil:"BOMTechnicalType" json:"BOMTechnicalType,omitempty" toml:"BOMTechnicalType" yaml:"BOMTechnicalType,omitempty"`
	BOMGroup                      null.String `boil:"BOMGroup" json:"BOMGroup,omitempty" toml:"BOMGroup" yaml:"BOMGroup,omitempty"`
	BOMHeaderText                 null.String `boil:"BOMHeaderText" json:"BOMHeaderText,omitempty" toml:"BOMHeaderText" yaml:"BOMHeaderText,omitempty"`
	BOMAlternativeText            null.String `boil:"BOMAlternativeText" json:"BOMAlternativeText,omitempty" toml:"BOMAlternativeText" yaml:"BOMAlternativeText,omitempty"`
	BillOfMaterialStatus          null.String `boil:"BillOfMaterialStatus" json:"BillOfMaterialStatus,omitempty" toml:"BillOfMaterialStatus" yaml:"BillOfMaterialStatus,omitempty"`
	HeaderValidityStartDate       null.String `boil:"HeaderValidityStartDate" json:"HeaderValidityStartDate,omitempty" toml:"HeaderValidityStartDate" yaml:"HeaderValidityStartDate,omitempty"`
	HeaderValidityEndDate         null.String `boil:"HeaderValidityEndDate" json:"HeaderValidityEndDate,omitempty" toml:"HeaderValidityEndDate" yaml:"HeaderValidityEndDate,omitempty"`
	ChgToEngineeringChgDocument   null.String `boil:"ChgToEngineeringChgDocument" json:"ChgToEngineeringChgDocument,omitempty" toml:"ChgToEngineeringChgDocument" yaml:"ChgToEngineeringChgDocument,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	ISALE                         null.Bool   `boil:"IsALE" json:"IsALE,omitempty" toml:"IsALE" yaml:"IsALE,omitempty"`
	MatFromLotSizeQuantity        null.String `boil:"MatFromLotSizeQuantity" json:"MatFromLotSizeQuantity,omitempty" toml:"MatFromLotSizeQuantity" yaml:"MatFromLotSizeQuantity,omitempty"`
	MaterialToLotSizeQuantity     null.String `boil:"MaterialToLotSizeQuantity" json:"MaterialToLotSizeQuantity,omitempty" toml:"MaterialToLotSizeQuantity" yaml:"MaterialToLotSizeQuantity,omitempty"`
	BOMHeaderBaseUnit             null.String `boil:"BOMHeaderBaseUnit" json:"BOMHeaderBaseUnit,omitempty" toml:"BOMHeaderBaseUnit" yaml:"BOMHeaderBaseUnit,omitempty"`
	BOMHeaderQuantityInBaseUnit   null.String `boil:"BOMHeaderQuantityInBaseUnit" json:"BOMHeaderQuantityInBaseUnit,omitempty" toml:"BOMHeaderQuantityInBaseUnit" yaml:"BOMHeaderQuantityInBaseUnit,omitempty"`
	RecordCreationDate            null.String `boil:"RecordCreationDate" json:"RecordCreationDate,omitempty" toml:"RecordCreationDate" yaml:"RecordCreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	BOMIsToBeDeleted              null.String `boil:"BOMIsToBeDeleted" json:"BOMIsToBeDeleted,omitempty" toml:"BOMIsToBeDeleted" yaml:"BOMIsToBeDeleted,omitempty"`
	DocumentIsCreatedByCAD        null.Bool   `boil:"DocumentIsCreatedByCAD" json:"DocumentIsCreatedByCAD,omitempty" toml:"DocumentIsCreatedByCAD" yaml:"DocumentIsCreatedByCAD,omitempty"`
	LaboratoryOrDesignOffice      null.String `boil:"LaboratoryOrDesignOffice" json:"LaboratoryOrDesignOffice,omitempty" toml:"LaboratoryOrDesignOffice" yaml:"LaboratoryOrDesignOffice,omitempty"`
	LastChangeDateTime            null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	ProductDescription            null.String `boil:"ProductDescription" json:"ProductDescription,omitempty" toml:"ProductDescription" yaml:"ProductDescription,omitempty"`
	PlantName                     null.String `boil:"PlantName" json:"PlantName,omitempty" toml:"PlantName" yaml:"PlantName,omitempty"`
	BillOfMaterialHdrDetailsText  null.String `boil:"BillOfMaterialHdrDetailsText" json:"BillOfMaterialHdrDetailsText,omitempty" toml:"BillOfMaterialHdrDetailsText" yaml:"BillOfMaterialHdrDetailsText,omitempty"`
	SelectedBillOfMaterialVersion null.String `boil:"SelectedBillOfMaterialVersion" json:"SelectedBillOfMaterialVersion,omitempty" toml:"SelectedBillOfMaterialVersion" yaml:"SelectedBillOfMaterialVersion,omitempty"`

	R *sapBillOfMaterialHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBillOfMaterialHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBillOfMaterialHeaderDatumColumns = struct {
	BillOfMaterial                string
	BillOfMaterialCategory        string
	BillOfMaterialVariant         string
	BillOfMaterialVersion         string
	EngineeringChangeDocument     string
	Material                      string
	Plant                         string
	BillOfMaterialHeaderUUID      string
	BillOfMaterialVariantUsage    string
	EngineeringChangeDocForEdit   string
	IsMultipleBOMAlt              string
	BOMHeaderInternalChangeCount  string
	BOMUsagePriority              string
	BillOfMaterialAuthsnGrp       string
	BOMVersionStatus              string
	IsVersionBillOfMaterial       string
	IsLatestBOMVersion            string
	IsConfiguredMaterial          string
	BOMTechnicalType              string
	BOMGroup                      string
	BOMHeaderText                 string
	BOMAlternativeText            string
	BillOfMaterialStatus          string
	HeaderValidityStartDate       string
	HeaderValidityEndDate         string
	ChgToEngineeringChgDocument   string
	IsMarkedForDeletion           string
	ISALE                         string
	MatFromLotSizeQuantity        string
	MaterialToLotSizeQuantity     string
	BOMHeaderBaseUnit             string
	BOMHeaderQuantityInBaseUnit   string
	RecordCreationDate            string
	LastChangeDate                string
	BOMIsToBeDeleted              string
	DocumentIsCreatedByCAD        string
	LaboratoryOrDesignOffice      string
	LastChangeDateTime            string
	ProductDescription            string
	PlantName                     string
	BillOfMaterialHdrDetailsText  string
	SelectedBillOfMaterialVersion string
}{
	BillOfMaterial:                "BillOfMaterial",
	BillOfMaterialCategory:        "BillOfMaterialCategory",
	BillOfMaterialVariant:         "BillOfMaterialVariant",
	BillOfMaterialVersion:         "BillOfMaterialVersion",
	EngineeringChangeDocument:     "EngineeringChangeDocument",
	Material:                      "Material",
	Plant:                         "Plant",
	BillOfMaterialHeaderUUID:      "BillOfMaterialHeaderUUID",
	BillOfMaterialVariantUsage:    "BillOfMaterialVariantUsage",
	EngineeringChangeDocForEdit:   "EngineeringChangeDocForEdit",
	IsMultipleBOMAlt:              "IsMultipleBOMAlt",
	BOMHeaderInternalChangeCount:  "BOMHeaderInternalChangeCount",
	BOMUsagePriority:              "BOMUsagePriority",
	BillOfMaterialAuthsnGrp:       "BillOfMaterialAuthsnGrp",
	BOMVersionStatus:              "BOMVersionStatus",
	IsVersionBillOfMaterial:       "IsVersionBillOfMaterial",
	IsLatestBOMVersion:            "IsLatestBOMVersion",
	IsConfiguredMaterial:          "IsConfiguredMaterial",
	BOMTechnicalType:              "BOMTechnicalType",
	BOMGroup:                      "BOMGroup",
	BOMHeaderText:                 "BOMHeaderText",
	BOMAlternativeText:            "BOMAlternativeText",
	BillOfMaterialStatus:          "BillOfMaterialStatus",
	HeaderValidityStartDate:       "HeaderValidityStartDate",
	HeaderValidityEndDate:         "HeaderValidityEndDate",
	ChgToEngineeringChgDocument:   "ChgToEngineeringChgDocument",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
	ISALE:                         "IsALE",
	MatFromLotSizeQuantity:        "MatFromLotSizeQuantity",
	MaterialToLotSizeQuantity:     "MaterialToLotSizeQuantity",
	BOMHeaderBaseUnit:             "BOMHeaderBaseUnit",
	BOMHeaderQuantityInBaseUnit:   "BOMHeaderQuantityInBaseUnit",
	RecordCreationDate:            "RecordCreationDate",
	LastChangeDate:                "LastChangeDate",
	BOMIsToBeDeleted:              "BOMIsToBeDeleted",
	DocumentIsCreatedByCAD:        "DocumentIsCreatedByCAD",
	LaboratoryOrDesignOffice:      "LaboratoryOrDesignOffice",
	LastChangeDateTime:            "LastChangeDateTime",
	ProductDescription:            "ProductDescription",
	PlantName:                     "PlantName",
	BillOfMaterialHdrDetailsText:  "BillOfMaterialHdrDetailsText",
	SelectedBillOfMaterialVersion: "SelectedBillOfMaterialVersion",
}

var SapBillOfMaterialHeaderDatumTableColumns = struct {
	BillOfMaterial                string
	BillOfMaterialCategory        string
	BillOfMaterialVariant         string
	BillOfMaterialVersion         string
	EngineeringChangeDocument     string
	Material                      string
	Plant                         string
	BillOfMaterialHeaderUUID      string
	BillOfMaterialVariantUsage    string
	EngineeringChangeDocForEdit   string
	IsMultipleBOMAlt              string
	BOMHeaderInternalChangeCount  string
	BOMUsagePriority              string
	BillOfMaterialAuthsnGrp       string
	BOMVersionStatus              string
	IsVersionBillOfMaterial       string
	IsLatestBOMVersion            string
	IsConfiguredMaterial          string
	BOMTechnicalType              string
	BOMGroup                      string
	BOMHeaderText                 string
	BOMAlternativeText            string
	BillOfMaterialStatus          string
	HeaderValidityStartDate       string
	HeaderValidityEndDate         string
	ChgToEngineeringChgDocument   string
	IsMarkedForDeletion           string
	ISALE                         string
	MatFromLotSizeQuantity        string
	MaterialToLotSizeQuantity     string
	BOMHeaderBaseUnit             string
	BOMHeaderQuantityInBaseUnit   string
	RecordCreationDate            string
	LastChangeDate                string
	BOMIsToBeDeleted              string
	DocumentIsCreatedByCAD        string
	LaboratoryOrDesignOffice      string
	LastChangeDateTime            string
	ProductDescription            string
	PlantName                     string
	BillOfMaterialHdrDetailsText  string
	SelectedBillOfMaterialVersion string
}{
	BillOfMaterial:                "sap_bill_of_material_header_data.BillOfMaterial",
	BillOfMaterialCategory:        "sap_bill_of_material_header_data.BillOfMaterialCategory",
	BillOfMaterialVariant:         "sap_bill_of_material_header_data.BillOfMaterialVariant",
	BillOfMaterialVersion:         "sap_bill_of_material_header_data.BillOfMaterialVersion",
	EngineeringChangeDocument:     "sap_bill_of_material_header_data.EngineeringChangeDocument",
	Material:                      "sap_bill_of_material_header_data.Material",
	Plant:                         "sap_bill_of_material_header_data.Plant",
	BillOfMaterialHeaderUUID:      "sap_bill_of_material_header_data.BillOfMaterialHeaderUUID",
	BillOfMaterialVariantUsage:    "sap_bill_of_material_header_data.BillOfMaterialVariantUsage",
	EngineeringChangeDocForEdit:   "sap_bill_of_material_header_data.EngineeringChangeDocForEdit",
	IsMultipleBOMAlt:              "sap_bill_of_material_header_data.IsMultipleBOMAlt",
	BOMHeaderInternalChangeCount:  "sap_bill_of_material_header_data.BOMHeaderInternalChangeCount",
	BOMUsagePriority:              "sap_bill_of_material_header_data.BOMUsagePriority",
	BillOfMaterialAuthsnGrp:       "sap_bill_of_material_header_data.BillOfMaterialAuthsnGrp",
	BOMVersionStatus:              "sap_bill_of_material_header_data.BOMVersionStatus",
	IsVersionBillOfMaterial:       "sap_bill_of_material_header_data.IsVersionBillOfMaterial",
	IsLatestBOMVersion:            "sap_bill_of_material_header_data.IsLatestBOMVersion",
	IsConfiguredMaterial:          "sap_bill_of_material_header_data.IsConfiguredMaterial",
	BOMTechnicalType:              "sap_bill_of_material_header_data.BOMTechnicalType",
	BOMGroup:                      "sap_bill_of_material_header_data.BOMGroup",
	BOMHeaderText:                 "sap_bill_of_material_header_data.BOMHeaderText",
	BOMAlternativeText:            "sap_bill_of_material_header_data.BOMAlternativeText",
	BillOfMaterialStatus:          "sap_bill_of_material_header_data.BillOfMaterialStatus",
	HeaderValidityStartDate:       "sap_bill_of_material_header_data.HeaderValidityStartDate",
	HeaderValidityEndDate:         "sap_bill_of_material_header_data.HeaderValidityEndDate",
	ChgToEngineeringChgDocument:   "sap_bill_of_material_header_data.ChgToEngineeringChgDocument",
	IsMarkedForDeletion:           "sap_bill_of_material_header_data.IsMarkedForDeletion",
	ISALE:                         "sap_bill_of_material_header_data.IsALE",
	MatFromLotSizeQuantity:        "sap_bill_of_material_header_data.MatFromLotSizeQuantity",
	MaterialToLotSizeQuantity:     "sap_bill_of_material_header_data.MaterialToLotSizeQuantity",
	BOMHeaderBaseUnit:             "sap_bill_of_material_header_data.BOMHeaderBaseUnit",
	BOMHeaderQuantityInBaseUnit:   "sap_bill_of_material_header_data.BOMHeaderQuantityInBaseUnit",
	RecordCreationDate:            "sap_bill_of_material_header_data.RecordCreationDate",
	LastChangeDate:                "sap_bill_of_material_header_data.LastChangeDate",
	BOMIsToBeDeleted:              "sap_bill_of_material_header_data.BOMIsToBeDeleted",
	DocumentIsCreatedByCAD:        "sap_bill_of_material_header_data.DocumentIsCreatedByCAD",
	LaboratoryOrDesignOffice:      "sap_bill_of_material_header_data.LaboratoryOrDesignOffice",
	LastChangeDateTime:            "sap_bill_of_material_header_data.LastChangeDateTime",
	ProductDescription:            "sap_bill_of_material_header_data.ProductDescription",
	PlantName:                     "sap_bill_of_material_header_data.PlantName",
	BillOfMaterialHdrDetailsText:  "sap_bill_of_material_header_data.BillOfMaterialHdrDetailsText",
	SelectedBillOfMaterialVersion: "sap_bill_of_material_header_data.SelectedBillOfMaterialVersion",
}

// Generated where

var SapBillOfMaterialHeaderDatumWhere = struct {
	BillOfMaterial                whereHelperstring
	BillOfMaterialCategory        whereHelperstring
	BillOfMaterialVariant         whereHelperstring
	BillOfMaterialVersion         whereHelperstring
	EngineeringChangeDocument     whereHelperstring
	Material                      whereHelpernull_String
	Plant                         whereHelpernull_String
	BillOfMaterialHeaderUUID      whereHelpernull_String
	BillOfMaterialVariantUsage    whereHelpernull_String
	EngineeringChangeDocForEdit   whereHelpernull_String
	IsMultipleBOMAlt              whereHelpernull_Bool
	BOMHeaderInternalChangeCount  whereHelpernull_String
	BOMUsagePriority              whereHelpernull_String
	BillOfMaterialAuthsnGrp       whereHelpernull_String
	BOMVersionStatus              whereHelpernull_String
	IsVersionBillOfMaterial       whereHelpernull_Bool
	IsLatestBOMVersion            whereHelpernull_Bool
	IsConfiguredMaterial          whereHelpernull_Bool
	BOMTechnicalType              whereHelpernull_String
	BOMGroup                      whereHelpernull_String
	BOMHeaderText                 whereHelpernull_String
	BOMAlternativeText            whereHelpernull_String
	BillOfMaterialStatus          whereHelpernull_String
	HeaderValidityStartDate       whereHelpernull_String
	HeaderValidityEndDate         whereHelpernull_String
	ChgToEngineeringChgDocument   whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
	ISALE                         whereHelpernull_Bool
	MatFromLotSizeQuantity        whereHelpernull_String
	MaterialToLotSizeQuantity     whereHelpernull_String
	BOMHeaderBaseUnit             whereHelpernull_String
	BOMHeaderQuantityInBaseUnit   whereHelpernull_String
	RecordCreationDate            whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	BOMIsToBeDeleted              whereHelpernull_String
	DocumentIsCreatedByCAD        whereHelpernull_Bool
	LaboratoryOrDesignOffice      whereHelpernull_String
	LastChangeDateTime            whereHelpernull_String
	ProductDescription            whereHelpernull_String
	PlantName                     whereHelpernull_String
	BillOfMaterialHdrDetailsText  whereHelpernull_String
	SelectedBillOfMaterialVersion whereHelpernull_String
}{
	BillOfMaterial:                whereHelperstring{field: "`sap_bill_of_material_header_data`.`BillOfMaterial`"},
	BillOfMaterialCategory:        whereHelperstring{field: "`sap_bill_of_material_header_data`.`BillOfMaterialCategory`"},
	BillOfMaterialVariant:         whereHelperstring{field: "`sap_bill_of_material_header_data`.`BillOfMaterialVariant`"},
	BillOfMaterialVersion:         whereHelperstring{field: "`sap_bill_of_material_header_data`.`BillOfMaterialVersion`"},
	EngineeringChangeDocument:     whereHelperstring{field: "`sap_bill_of_material_header_data`.`EngineeringChangeDocument`"},
	Material:                      whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`Material`"},
	Plant:                         whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`Plant`"},
	BillOfMaterialHeaderUUID:      whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BillOfMaterialHeaderUUID`"},
	BillOfMaterialVariantUsage:    whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BillOfMaterialVariantUsage`"},
	EngineeringChangeDocForEdit:   whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`EngineeringChangeDocForEdit`"},
	IsMultipleBOMAlt:              whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`IsMultipleBOMAlt`"},
	BOMHeaderInternalChangeCount:  whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMHeaderInternalChangeCount`"},
	BOMUsagePriority:              whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMUsagePriority`"},
	BillOfMaterialAuthsnGrp:       whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BillOfMaterialAuthsnGrp`"},
	BOMVersionStatus:              whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMVersionStatus`"},
	IsVersionBillOfMaterial:       whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`IsVersionBillOfMaterial`"},
	IsLatestBOMVersion:            whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`IsLatestBOMVersion`"},
	IsConfiguredMaterial:          whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`IsConfiguredMaterial`"},
	BOMTechnicalType:              whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMTechnicalType`"},
	BOMGroup:                      whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMGroup`"},
	BOMHeaderText:                 whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMHeaderText`"},
	BOMAlternativeText:            whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMAlternativeText`"},
	BillOfMaterialStatus:          whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BillOfMaterialStatus`"},
	HeaderValidityStartDate:       whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`HeaderValidityStartDate`"},
	HeaderValidityEndDate:         whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`HeaderValidityEndDate`"},
	ChgToEngineeringChgDocument:   whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`ChgToEngineeringChgDocument`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`IsMarkedForDeletion`"},
	ISALE:                         whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`IsALE`"},
	MatFromLotSizeQuantity:        whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`MatFromLotSizeQuantity`"},
	MaterialToLotSizeQuantity:     whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`MaterialToLotSizeQuantity`"},
	BOMHeaderBaseUnit:             whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMHeaderBaseUnit`"},
	BOMHeaderQuantityInBaseUnit:   whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMHeaderQuantityInBaseUnit`"},
	RecordCreationDate:            whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`RecordCreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`LastChangeDate`"},
	BOMIsToBeDeleted:              whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BOMIsToBeDeleted`"},
	DocumentIsCreatedByCAD:        whereHelpernull_Bool{field: "`sap_bill_of_material_header_data`.`DocumentIsCreatedByCAD`"},
	LaboratoryOrDesignOffice:      whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`LaboratoryOrDesignOffice`"},
	LastChangeDateTime:            whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`LastChangeDateTime`"},
	ProductDescription:            whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`ProductDescription`"},
	PlantName:                     whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`PlantName`"},
	BillOfMaterialHdrDetailsText:  whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`BillOfMaterialHdrDetailsText`"},
	SelectedBillOfMaterialVersion: whereHelpernull_String{field: "`sap_bill_of_material_header_data`.`SelectedBillOfMaterialVersion`"},
}

// SapBillOfMaterialHeaderDatumRels is where relationship names are stored.
var SapBillOfMaterialHeaderDatumRels = struct {
	BillOfMaterialSapBillOfMaterialItemData string
}{
	BillOfMaterialSapBillOfMaterialItemData: "BillOfMaterialSapBillOfMaterialItemData",
}

// sapBillOfMaterialHeaderDatumR is where relationships are stored.
type sapBillOfMaterialHeaderDatumR struct {
	BillOfMaterialSapBillOfMaterialItemData SapBillOfMaterialItemDatumSlice `boil:"BillOfMaterialSapBillOfMaterialItemData" json:"BillOfMaterialSapBillOfMaterialItemData" toml:"BillOfMaterialSapBillOfMaterialItemData" yaml:"BillOfMaterialSapBillOfMaterialItemData"`
}

// NewStruct creates a new relationship struct
func (*sapBillOfMaterialHeaderDatumR) NewStruct() *sapBillOfMaterialHeaderDatumR {
	return &sapBillOfMaterialHeaderDatumR{}
}

// sapBillOfMaterialHeaderDatumL is where Load methods for each relationship are stored.
type sapBillOfMaterialHeaderDatumL struct{}

var (
	sapBillOfMaterialHeaderDatumAllColumns            = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "EngineeringChangeDocument", "Material", "Plant", "BillOfMaterialHeaderUUID", "BillOfMaterialVariantUsage", "EngineeringChangeDocForEdit", "IsMultipleBOMAlt", "BOMHeaderInternalChangeCount", "BOMUsagePriority", "BillOfMaterialAuthsnGrp", "BOMVersionStatus", "IsVersionBillOfMaterial", "IsLatestBOMVersion", "IsConfiguredMaterial", "BOMTechnicalType", "BOMGroup", "BOMHeaderText", "BOMAlternativeText", "BillOfMaterialStatus", "HeaderValidityStartDate", "HeaderValidityEndDate", "ChgToEngineeringChgDocument", "IsMarkedForDeletion", "IsALE", "MatFromLotSizeQuantity", "MaterialToLotSizeQuantity", "BOMHeaderBaseUnit", "BOMHeaderQuantityInBaseUnit", "RecordCreationDate", "LastChangeDate", "BOMIsToBeDeleted", "DocumentIsCreatedByCAD", "LaboratoryOrDesignOffice", "LastChangeDateTime", "ProductDescription", "PlantName", "BillOfMaterialHdrDetailsText", "SelectedBillOfMaterialVersion"}
	sapBillOfMaterialHeaderDatumColumnsWithoutDefault = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "EngineeringChangeDocument", "Material", "Plant", "BillOfMaterialHeaderUUID", "BillOfMaterialVariantUsage", "EngineeringChangeDocForEdit", "IsMultipleBOMAlt", "BOMHeaderInternalChangeCount", "BOMUsagePriority", "BillOfMaterialAuthsnGrp", "BOMVersionStatus", "IsVersionBillOfMaterial", "IsLatestBOMVersion", "IsConfiguredMaterial", "BOMTechnicalType", "BOMGroup", "BOMHeaderText", "BOMAlternativeText", "BillOfMaterialStatus", "HeaderValidityStartDate", "HeaderValidityEndDate", "ChgToEngineeringChgDocument", "IsMarkedForDeletion", "IsALE", "MatFromLotSizeQuantity", "MaterialToLotSizeQuantity", "BOMHeaderBaseUnit", "BOMHeaderQuantityInBaseUnit", "RecordCreationDate", "LastChangeDate", "BOMIsToBeDeleted", "DocumentIsCreatedByCAD", "LaboratoryOrDesignOffice", "LastChangeDateTime", "ProductDescription", "PlantName", "BillOfMaterialHdrDetailsText", "SelectedBillOfMaterialVersion"}
	sapBillOfMaterialHeaderDatumColumnsWithDefault    = []string{}
	sapBillOfMaterialHeaderDatumPrimaryKeyColumns     = []string{"BillOfMaterial", "BillOfMaterialCategory", "BillOfMaterialVariant", "BillOfMaterialVersion", "EngineeringChangeDocument"}
)

type (
	// SapBillOfMaterialHeaderDatumSlice is an alias for a slice of pointers to SapBillOfMaterialHeaderDatum.
	// This should almost always be used instead of []SapBillOfMaterialHeaderDatum.
	SapBillOfMaterialHeaderDatumSlice []*SapBillOfMaterialHeaderDatum
	// SapBillOfMaterialHeaderDatumHook is the signature for custom SapBillOfMaterialHeaderDatum hook methods
	SapBillOfMaterialHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapBillOfMaterialHeaderDatum) error

	sapBillOfMaterialHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBillOfMaterialHeaderDatumType                 = reflect.TypeOf(&SapBillOfMaterialHeaderDatum{})
	sapBillOfMaterialHeaderDatumMapping              = queries.MakeStructMapping(sapBillOfMaterialHeaderDatumType)
	sapBillOfMaterialHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, sapBillOfMaterialHeaderDatumPrimaryKeyColumns)
	sapBillOfMaterialHeaderDatumInsertCacheMut       sync.RWMutex
	sapBillOfMaterialHeaderDatumInsertCache          = make(map[string]insertCache)
	sapBillOfMaterialHeaderDatumUpdateCacheMut       sync.RWMutex
	sapBillOfMaterialHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapBillOfMaterialHeaderDatumUpsertCacheMut       sync.RWMutex
	sapBillOfMaterialHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBillOfMaterialHeaderDatumBeforeInsertHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumBeforeUpdateHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumBeforeDeleteHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumBeforeUpsertHooks []SapBillOfMaterialHeaderDatumHook

var sapBillOfMaterialHeaderDatumAfterInsertHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumAfterSelectHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumAfterUpdateHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumAfterDeleteHooks []SapBillOfMaterialHeaderDatumHook
var sapBillOfMaterialHeaderDatumAfterUpsertHooks []SapBillOfMaterialHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBillOfMaterialHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBillOfMaterialHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBillOfMaterialHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBillOfMaterialHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBillOfMaterialHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBillOfMaterialHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBillOfMaterialHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBillOfMaterialHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBillOfMaterialHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillOfMaterialHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBillOfMaterialHeaderDatumHook registers your hook function for all future operations.
func AddSapBillOfMaterialHeaderDatumHook(hookPoint boil.HookPoint, sapBillOfMaterialHeaderDatumHook SapBillOfMaterialHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapBillOfMaterialHeaderDatumBeforeInsertHooks = append(sapBillOfMaterialHeaderDatumBeforeInsertHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapBillOfMaterialHeaderDatumBeforeUpdateHooks = append(sapBillOfMaterialHeaderDatumBeforeUpdateHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapBillOfMaterialHeaderDatumBeforeDeleteHooks = append(sapBillOfMaterialHeaderDatumBeforeDeleteHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapBillOfMaterialHeaderDatumBeforeUpsertHooks = append(sapBillOfMaterialHeaderDatumBeforeUpsertHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.AfterInsertHook:
		sapBillOfMaterialHeaderDatumAfterInsertHooks = append(sapBillOfMaterialHeaderDatumAfterInsertHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.AfterSelectHook:
		sapBillOfMaterialHeaderDatumAfterSelectHooks = append(sapBillOfMaterialHeaderDatumAfterSelectHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapBillOfMaterialHeaderDatumAfterUpdateHooks = append(sapBillOfMaterialHeaderDatumAfterUpdateHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapBillOfMaterialHeaderDatumAfterDeleteHooks = append(sapBillOfMaterialHeaderDatumAfterDeleteHooks, sapBillOfMaterialHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapBillOfMaterialHeaderDatumAfterUpsertHooks = append(sapBillOfMaterialHeaderDatumAfterUpsertHooks, sapBillOfMaterialHeaderDatumHook)
	}
}

// One returns a single sapBillOfMaterialHeaderDatum record from the query.
func (q sapBillOfMaterialHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBillOfMaterialHeaderDatum, error) {
	o := &SapBillOfMaterialHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_bill_of_material_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBillOfMaterialHeaderDatum records from the query.
func (q sapBillOfMaterialHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBillOfMaterialHeaderDatumSlice, error) {
	var o []*SapBillOfMaterialHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBillOfMaterialHeaderDatum slice")
	}

	if len(sapBillOfMaterialHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBillOfMaterialHeaderDatum records in the query.
func (q sapBillOfMaterialHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_bill_of_material_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBillOfMaterialHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_bill_of_material_header_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialSapBillOfMaterialItemData retrieves all the sap_bill_of_material_item_datum's SapBillOfMaterialItemData with an executor via BillOfMaterial column.
func (o *SapBillOfMaterialHeaderDatum) BillOfMaterialSapBillOfMaterialItemData(mods ...qm.QueryMod) sapBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_bill_of_material_item_data`.`BillOfMaterial`=?", o.BillOfMaterial),
	)

	query := SapBillOfMaterialItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_bill_of_material_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_bill_of_material_item_data`.*"})
	}

	return query
}

// LoadBillOfMaterialSapBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBillOfMaterialHeaderDatumL) LoadBillOfMaterialSapBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillOfMaterialHeaderDatum
	var object *SapBillOfMaterialHeaderDatum

	if singular {
		object = maybeSapBillOfMaterialHeaderDatum.(*SapBillOfMaterialHeaderDatum)
	} else {
		slice = *maybeSapBillOfMaterialHeaderDatum.(*[]*SapBillOfMaterialHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.BillOfMaterial)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_bill_of_material_item_data`),
		qm.WhereIn(`sap_bill_of_material_item_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_bill_of_material_item_data")
	}

	var resultSlice []*SapBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_bill_of_material_item_data")
	}

	if len(sapBillOfMaterialItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillOfMaterialSapBillOfMaterialItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBillOfMaterialItemDatumR{}
			}
			foreign.R.BillOfMaterialSapBillOfMaterialHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialSapBillOfMaterialItemData = append(local.R.BillOfMaterialSapBillOfMaterialItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBillOfMaterialItemDatumR{}
				}
				foreign.R.BillOfMaterialSapBillOfMaterialHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddBillOfMaterialSapBillOfMaterialItemData adds the given related objects to the existing relationships
// of the sap_bill_of_material_header_datum, optionally inserting them as new records.
// Appends related to o.R.BillOfMaterialSapBillOfMaterialItemData.
// Sets related.R.BillOfMaterialSapBillOfMaterialHeaderDatum appropriately.
func (o *SapBillOfMaterialHeaderDatum) AddBillOfMaterialSapBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillOfMaterial = o.BillOfMaterial
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
				strmangle.WhereClause("`", "`", 0, sapBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillOfMaterial, rel.BillOfMaterial, rel.BillOfMaterialCategory, rel.BillOfMaterialVariant, rel.BillOfMaterialVersion, rel.HeaderChangeDocument, rel.BillOfMaterialItemNodeNumber}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillOfMaterial = o.BillOfMaterial
		}
	}

	if o.R == nil {
		o.R = &sapBillOfMaterialHeaderDatumR{
			BillOfMaterialSapBillOfMaterialItemData: related,
		}
	} else {
		o.R.BillOfMaterialSapBillOfMaterialItemData = append(o.R.BillOfMaterialSapBillOfMaterialItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBillOfMaterialItemDatumR{
				BillOfMaterialSapBillOfMaterialHeaderDatum: o,
			}
		} else {
			rel.R.BillOfMaterialSapBillOfMaterialHeaderDatum = o
		}
	}
	return nil
}

// SapBillOfMaterialHeaderData retrieves all the records using an executor.
func SapBillOfMaterialHeaderData(mods ...qm.QueryMod) sapBillOfMaterialHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_bill_of_material_header_data`"))
	return sapBillOfMaterialHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapBillOfMaterialHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, billOfMaterial string, billOfMaterialCategory string, billOfMaterialVariant string, billOfMaterialVersion string, engineeringChangeDocument string, selectCols ...string) (*SapBillOfMaterialHeaderDatum, error) {
	sapBillOfMaterialHeaderDatumObj := &SapBillOfMaterialHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_bill_of_material_header_data` where `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `EngineeringChangeDocument`=?", sel,
	)

	q := queries.Raw(query, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, engineeringChangeDocument)

	err := q.Bind(ctx, exec, sapBillOfMaterialHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_bill_of_material_header_data")
	}

	if err = sapBillOfMaterialHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBillOfMaterialHeaderDatumObj, err
	}

	return sapBillOfMaterialHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBillOfMaterialHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_bill_of_material_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillOfMaterialHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBillOfMaterialHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapBillOfMaterialHeaderDatumInsertCache[key]
	sapBillOfMaterialHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBillOfMaterialHeaderDatumAllColumns,
			sapBillOfMaterialHeaderDatumColumnsWithDefault,
			sapBillOfMaterialHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_bill_of_material_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_bill_of_material_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_bill_of_material_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBillOfMaterialHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_bill_of_material_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillOfMaterial,
		o.BillOfMaterialCategory,
		o.BillOfMaterialVariant,
		o.BillOfMaterialVersion,
		o.EngineeringChangeDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_bill_of_material_header_data")
	}

CacheNoHooks:
	if !cached {
		sapBillOfMaterialHeaderDatumInsertCacheMut.Lock()
		sapBillOfMaterialHeaderDatumInsertCache[key] = cache
		sapBillOfMaterialHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBillOfMaterialHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBillOfMaterialHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBillOfMaterialHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapBillOfMaterialHeaderDatumUpdateCache[key]
	sapBillOfMaterialHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBillOfMaterialHeaderDatumAllColumns,
			sapBillOfMaterialHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_bill_of_material_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_bill_of_material_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBillOfMaterialHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, append(wl, sapBillOfMaterialHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_bill_of_material_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_bill_of_material_header_data")
	}

	if !cached {
		sapBillOfMaterialHeaderDatumUpdateCacheMut.Lock()
		sapBillOfMaterialHeaderDatumUpdateCache[key] = cache
		sapBillOfMaterialHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBillOfMaterialHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_bill_of_material_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_bill_of_material_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBillOfMaterialHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillOfMaterialHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBillOfMaterialHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBillOfMaterialHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapBillOfMaterialHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBillOfMaterialHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_bill_of_material_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillOfMaterialHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBillOfMaterialHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBillOfMaterialHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapBillOfMaterialHeaderDatumUpsertCache[key]
	sapBillOfMaterialHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBillOfMaterialHeaderDatumAllColumns,
			sapBillOfMaterialHeaderDatumColumnsWithDefault,
			sapBillOfMaterialHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapBillOfMaterialHeaderDatumAllColumns,
			sapBillOfMaterialHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_bill_of_material_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_bill_of_material_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_bill_of_material_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_bill_of_material_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBillOfMaterialHeaderDatumType, sapBillOfMaterialHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_bill_of_material_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_bill_of_material_header_data")
	}

CacheNoHooks:
	if !cached {
		sapBillOfMaterialHeaderDatumUpsertCacheMut.Lock()
		sapBillOfMaterialHeaderDatumUpsertCache[key] = cache
		sapBillOfMaterialHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBillOfMaterialHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBillOfMaterialHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBillOfMaterialHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBillOfMaterialHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_bill_of_material_header_data` WHERE `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `EngineeringChangeDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_bill_of_material_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_bill_of_material_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBillOfMaterialHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBillOfMaterialHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_bill_of_material_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_bill_of_material_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBillOfMaterialHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBillOfMaterialHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_bill_of_material_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillOfMaterialHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBillOfMaterialHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_bill_of_material_header_data")
	}

	if len(sapBillOfMaterialHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBillOfMaterialHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBillOfMaterialHeaderDatum(ctx, exec, o.BillOfMaterial, o.BillOfMaterialCategory, o.BillOfMaterialVariant, o.BillOfMaterialVersion, o.EngineeringChangeDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBillOfMaterialHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBillOfMaterialHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_bill_of_material_header_data`.* FROM `sap_bill_of_material_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillOfMaterialHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBillOfMaterialHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapBillOfMaterialHeaderDatumExists checks if the SapBillOfMaterialHeaderDatum row exists.
func SapBillOfMaterialHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, billOfMaterial string, billOfMaterialCategory string, billOfMaterialVariant string, billOfMaterialVersion string, engineeringChangeDocument string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_bill_of_material_header_data` where `BillOfMaterial`=? AND `BillOfMaterialCategory`=? AND `BillOfMaterialVariant`=? AND `BillOfMaterialVersion`=? AND `EngineeringChangeDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, engineeringChangeDocument)
	}
	row := exec.QueryRowContext(ctx, sql, billOfMaterial, billOfMaterialCategory, billOfMaterialVariant, billOfMaterialVersion, engineeringChangeDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_bill_of_material_header_data exists")
	}

	return exists, nil
}
