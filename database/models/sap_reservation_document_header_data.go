// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapReservationDocumentHeaderDatum is an object representing the database table.
type SapReservationDocumentHeaderDatum struct {
	Reservation                  string      `boil:"Reservation" json:"Reservation" toml:"Reservation" yaml:"Reservation"`
	OrderID                      null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	GoodsMovementType            null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	CostCenter                   null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	GoodsRecipientName           null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	ReservationDate              null.String `boil:"ReservationDate" json:"ReservationDate,omitempty" toml:"ReservationDate" yaml:"ReservationDate,omitempty"`
	Customer                     null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	WBSElement                   null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ControllingArea              null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	SalesOrder                   null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem               null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	SalesOrderScheduleLine       null.String `boil:"SalesOrderScheduleLine" json:"SalesOrderScheduleLine,omitempty" toml:"SalesOrderScheduleLine" yaml:"SalesOrderScheduleLine,omitempty"`
	AssetNumber                  null.String `boil:"AssetNumber" json:"AssetNumber,omitempty" toml:"AssetNumber" yaml:"AssetNumber,omitempty"`
	AssetSubNumber               null.String `boil:"AssetSubNumber" json:"AssetSubNumber,omitempty" toml:"AssetSubNumber" yaml:"AssetSubNumber,omitempty"`
	NetworkNumberForAcctAssgmt   null.String `boil:"NetworkNumberForAcctAssgmt" json:"NetworkNumberForAcctAssgmt,omitempty" toml:"NetworkNumberForAcctAssgmt" yaml:"NetworkNumberForAcctAssgmt,omitempty"`
	IssuingOrReceivingPlant      null.String `boil:"IssuingOrReceivingPlant" json:"IssuingOrReceivingPlant,omitempty" toml:"IssuingOrReceivingPlant" yaml:"IssuingOrReceivingPlant,omitempty"`
	IssuingOrReceivingStorageLoc null.String `boil:"IssuingOrReceivingStorageLoc" json:"IssuingOrReceivingStorageLoc,omitempty" toml:"IssuingOrReceivingStorageLoc" yaml:"IssuingOrReceivingStorageLoc,omitempty"`

	R *sapReservationDocumentHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapReservationDocumentHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapReservationDocumentHeaderDatumColumns = struct {
	Reservation                  string
	OrderID                      string
	GoodsMovementType            string
	CostCenter                   string
	GoodsRecipientName           string
	ReservationDate              string
	Customer                     string
	WBSElement                   string
	ControllingArea              string
	SalesOrder                   string
	SalesOrderItem               string
	SalesOrderScheduleLine       string
	AssetNumber                  string
	AssetSubNumber               string
	NetworkNumberForAcctAssgmt   string
	IssuingOrReceivingPlant      string
	IssuingOrReceivingStorageLoc string
}{
	Reservation:                  "Reservation",
	OrderID:                      "OrderID",
	GoodsMovementType:            "GoodsMovementType",
	CostCenter:                   "CostCenter",
	GoodsRecipientName:           "GoodsRecipientName",
	ReservationDate:              "ReservationDate",
	Customer:                     "Customer",
	WBSElement:                   "WBSElement",
	ControllingArea:              "ControllingArea",
	SalesOrder:                   "SalesOrder",
	SalesOrderItem:               "SalesOrderItem",
	SalesOrderScheduleLine:       "SalesOrderScheduleLine",
	AssetNumber:                  "AssetNumber",
	AssetSubNumber:               "AssetSubNumber",
	NetworkNumberForAcctAssgmt:   "NetworkNumberForAcctAssgmt",
	IssuingOrReceivingPlant:      "IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc: "IssuingOrReceivingStorageLoc",
}

var SapReservationDocumentHeaderDatumTableColumns = struct {
	Reservation                  string
	OrderID                      string
	GoodsMovementType            string
	CostCenter                   string
	GoodsRecipientName           string
	ReservationDate              string
	Customer                     string
	WBSElement                   string
	ControllingArea              string
	SalesOrder                   string
	SalesOrderItem               string
	SalesOrderScheduleLine       string
	AssetNumber                  string
	AssetSubNumber               string
	NetworkNumberForAcctAssgmt   string
	IssuingOrReceivingPlant      string
	IssuingOrReceivingStorageLoc string
}{
	Reservation:                  "sap_reservation_document_header_data.Reservation",
	OrderID:                      "sap_reservation_document_header_data.OrderID",
	GoodsMovementType:            "sap_reservation_document_header_data.GoodsMovementType",
	CostCenter:                   "sap_reservation_document_header_data.CostCenter",
	GoodsRecipientName:           "sap_reservation_document_header_data.GoodsRecipientName",
	ReservationDate:              "sap_reservation_document_header_data.ReservationDate",
	Customer:                     "sap_reservation_document_header_data.Customer",
	WBSElement:                   "sap_reservation_document_header_data.WBSElement",
	ControllingArea:              "sap_reservation_document_header_data.ControllingArea",
	SalesOrder:                   "sap_reservation_document_header_data.SalesOrder",
	SalesOrderItem:               "sap_reservation_document_header_data.SalesOrderItem",
	SalesOrderScheduleLine:       "sap_reservation_document_header_data.SalesOrderScheduleLine",
	AssetNumber:                  "sap_reservation_document_header_data.AssetNumber",
	AssetSubNumber:               "sap_reservation_document_header_data.AssetSubNumber",
	NetworkNumberForAcctAssgmt:   "sap_reservation_document_header_data.NetworkNumberForAcctAssgmt",
	IssuingOrReceivingPlant:      "sap_reservation_document_header_data.IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc: "sap_reservation_document_header_data.IssuingOrReceivingStorageLoc",
}

// Generated where

var SapReservationDocumentHeaderDatumWhere = struct {
	Reservation                  whereHelperstring
	OrderID                      whereHelpernull_String
	GoodsMovementType            whereHelpernull_String
	CostCenter                   whereHelpernull_String
	GoodsRecipientName           whereHelpernull_String
	ReservationDate              whereHelpernull_String
	Customer                     whereHelpernull_String
	WBSElement                   whereHelpernull_String
	ControllingArea              whereHelpernull_String
	SalesOrder                   whereHelpernull_String
	SalesOrderItem               whereHelpernull_String
	SalesOrderScheduleLine       whereHelpernull_String
	AssetNumber                  whereHelpernull_String
	AssetSubNumber               whereHelpernull_String
	NetworkNumberForAcctAssgmt   whereHelpernull_String
	IssuingOrReceivingPlant      whereHelpernull_String
	IssuingOrReceivingStorageLoc whereHelpernull_String
}{
	Reservation:                  whereHelperstring{field: "`sap_reservation_document_header_data`.`Reservation`"},
	OrderID:                      whereHelpernull_String{field: "`sap_reservation_document_header_data`.`OrderID`"},
	GoodsMovementType:            whereHelpernull_String{field: "`sap_reservation_document_header_data`.`GoodsMovementType`"},
	CostCenter:                   whereHelpernull_String{field: "`sap_reservation_document_header_data`.`CostCenter`"},
	GoodsRecipientName:           whereHelpernull_String{field: "`sap_reservation_document_header_data`.`GoodsRecipientName`"},
	ReservationDate:              whereHelpernull_String{field: "`sap_reservation_document_header_data`.`ReservationDate`"},
	Customer:                     whereHelpernull_String{field: "`sap_reservation_document_header_data`.`Customer`"},
	WBSElement:                   whereHelpernull_String{field: "`sap_reservation_document_header_data`.`WBSElement`"},
	ControllingArea:              whereHelpernull_String{field: "`sap_reservation_document_header_data`.`ControllingArea`"},
	SalesOrder:                   whereHelpernull_String{field: "`sap_reservation_document_header_data`.`SalesOrder`"},
	SalesOrderItem:               whereHelpernull_String{field: "`sap_reservation_document_header_data`.`SalesOrderItem`"},
	SalesOrderScheduleLine:       whereHelpernull_String{field: "`sap_reservation_document_header_data`.`SalesOrderScheduleLine`"},
	AssetNumber:                  whereHelpernull_String{field: "`sap_reservation_document_header_data`.`AssetNumber`"},
	AssetSubNumber:               whereHelpernull_String{field: "`sap_reservation_document_header_data`.`AssetSubNumber`"},
	NetworkNumberForAcctAssgmt:   whereHelpernull_String{field: "`sap_reservation_document_header_data`.`NetworkNumberForAcctAssgmt`"},
	IssuingOrReceivingPlant:      whereHelpernull_String{field: "`sap_reservation_document_header_data`.`IssuingOrReceivingPlant`"},
	IssuingOrReceivingStorageLoc: whereHelpernull_String{field: "`sap_reservation_document_header_data`.`IssuingOrReceivingStorageLoc`"},
}

// SapReservationDocumentHeaderDatumRels is where relationship names are stored.
var SapReservationDocumentHeaderDatumRels = struct {
	ReservationSapReservationDocumentItemData string
}{
	ReservationSapReservationDocumentItemData: "ReservationSapReservationDocumentItemData",
}

// sapReservationDocumentHeaderDatumR is where relationships are stored.
type sapReservationDocumentHeaderDatumR struct {
	ReservationSapReservationDocumentItemData SapReservationDocumentItemDatumSlice `boil:"ReservationSapReservationDocumentItemData" json:"ReservationSapReservationDocumentItemData" toml:"ReservationSapReservationDocumentItemData" yaml:"ReservationSapReservationDocumentItemData"`
}

// NewStruct creates a new relationship struct
func (*sapReservationDocumentHeaderDatumR) NewStruct() *sapReservationDocumentHeaderDatumR {
	return &sapReservationDocumentHeaderDatumR{}
}

// sapReservationDocumentHeaderDatumL is where Load methods for each relationship are stored.
type sapReservationDocumentHeaderDatumL struct{}

var (
	sapReservationDocumentHeaderDatumAllColumns            = []string{"Reservation", "OrderID", "GoodsMovementType", "CostCenter", "GoodsRecipientName", "ReservationDate", "Customer", "WBSElement", "ControllingArea", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "AssetNumber", "AssetSubNumber", "NetworkNumberForAcctAssgmt", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc"}
	sapReservationDocumentHeaderDatumColumnsWithoutDefault = []string{"Reservation", "OrderID", "GoodsMovementType", "CostCenter", "GoodsRecipientName", "ReservationDate", "Customer", "WBSElement", "ControllingArea", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "AssetNumber", "AssetSubNumber", "NetworkNumberForAcctAssgmt", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc"}
	sapReservationDocumentHeaderDatumColumnsWithDefault    = []string{}
	sapReservationDocumentHeaderDatumPrimaryKeyColumns     = []string{"Reservation"}
)

type (
	// SapReservationDocumentHeaderDatumSlice is an alias for a slice of pointers to SapReservationDocumentHeaderDatum.
	// This should almost always be used instead of []SapReservationDocumentHeaderDatum.
	SapReservationDocumentHeaderDatumSlice []*SapReservationDocumentHeaderDatum
	// SapReservationDocumentHeaderDatumHook is the signature for custom SapReservationDocumentHeaderDatum hook methods
	SapReservationDocumentHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapReservationDocumentHeaderDatum) error

	sapReservationDocumentHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapReservationDocumentHeaderDatumType                 = reflect.TypeOf(&SapReservationDocumentHeaderDatum{})
	sapReservationDocumentHeaderDatumMapping              = queries.MakeStructMapping(sapReservationDocumentHeaderDatumType)
	sapReservationDocumentHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, sapReservationDocumentHeaderDatumPrimaryKeyColumns)
	sapReservationDocumentHeaderDatumInsertCacheMut       sync.RWMutex
	sapReservationDocumentHeaderDatumInsertCache          = make(map[string]insertCache)
	sapReservationDocumentHeaderDatumUpdateCacheMut       sync.RWMutex
	sapReservationDocumentHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapReservationDocumentHeaderDatumUpsertCacheMut       sync.RWMutex
	sapReservationDocumentHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapReservationDocumentHeaderDatumBeforeInsertHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumBeforeUpdateHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumBeforeDeleteHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumBeforeUpsertHooks []SapReservationDocumentHeaderDatumHook

var sapReservationDocumentHeaderDatumAfterInsertHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumAfterSelectHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumAfterUpdateHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumAfterDeleteHooks []SapReservationDocumentHeaderDatumHook
var sapReservationDocumentHeaderDatumAfterUpsertHooks []SapReservationDocumentHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapReservationDocumentHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapReservationDocumentHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapReservationDocumentHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapReservationDocumentHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapReservationDocumentHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapReservationDocumentHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapReservationDocumentHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapReservationDocumentHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapReservationDocumentHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapReservationDocumentHeaderDatumHook registers your hook function for all future operations.
func AddSapReservationDocumentHeaderDatumHook(hookPoint boil.HookPoint, sapReservationDocumentHeaderDatumHook SapReservationDocumentHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapReservationDocumentHeaderDatumBeforeInsertHooks = append(sapReservationDocumentHeaderDatumBeforeInsertHooks, sapReservationDocumentHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapReservationDocumentHeaderDatumBeforeUpdateHooks = append(sapReservationDocumentHeaderDatumBeforeUpdateHooks, sapReservationDocumentHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapReservationDocumentHeaderDatumBeforeDeleteHooks = append(sapReservationDocumentHeaderDatumBeforeDeleteHooks, sapReservationDocumentHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapReservationDocumentHeaderDatumBeforeUpsertHooks = append(sapReservationDocumentHeaderDatumBeforeUpsertHooks, sapReservationDocumentHeaderDatumHook)
	case boil.AfterInsertHook:
		sapReservationDocumentHeaderDatumAfterInsertHooks = append(sapReservationDocumentHeaderDatumAfterInsertHooks, sapReservationDocumentHeaderDatumHook)
	case boil.AfterSelectHook:
		sapReservationDocumentHeaderDatumAfterSelectHooks = append(sapReservationDocumentHeaderDatumAfterSelectHooks, sapReservationDocumentHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapReservationDocumentHeaderDatumAfterUpdateHooks = append(sapReservationDocumentHeaderDatumAfterUpdateHooks, sapReservationDocumentHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapReservationDocumentHeaderDatumAfterDeleteHooks = append(sapReservationDocumentHeaderDatumAfterDeleteHooks, sapReservationDocumentHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapReservationDocumentHeaderDatumAfterUpsertHooks = append(sapReservationDocumentHeaderDatumAfterUpsertHooks, sapReservationDocumentHeaderDatumHook)
	}
}

// One returns a single sapReservationDocumentHeaderDatum record from the query.
func (q sapReservationDocumentHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapReservationDocumentHeaderDatum, error) {
	o := &SapReservationDocumentHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_reservation_document_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapReservationDocumentHeaderDatum records from the query.
func (q sapReservationDocumentHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapReservationDocumentHeaderDatumSlice, error) {
	var o []*SapReservationDocumentHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapReservationDocumentHeaderDatum slice")
	}

	if len(sapReservationDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapReservationDocumentHeaderDatum records in the query.
func (q sapReservationDocumentHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_reservation_document_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapReservationDocumentHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_reservation_document_header_data exists")
	}

	return count > 0, nil
}

// ReservationSapReservationDocumentItemData retrieves all the sap_reservation_document_item_datum's SapReservationDocumentItemData with an executor via Reservation column.
func (o *SapReservationDocumentHeaderDatum) ReservationSapReservationDocumentItemData(mods ...qm.QueryMod) sapReservationDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_reservation_document_item_data`.`Reservation`=?", o.Reservation),
	)

	query := SapReservationDocumentItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_reservation_document_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_reservation_document_item_data`.*"})
	}

	return query
}

// LoadReservationSapReservationDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapReservationDocumentHeaderDatumL) LoadReservationSapReservationDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapReservationDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapReservationDocumentHeaderDatum
	var object *SapReservationDocumentHeaderDatum

	if singular {
		object = maybeSapReservationDocumentHeaderDatum.(*SapReservationDocumentHeaderDatum)
	} else {
		slice = *maybeSapReservationDocumentHeaderDatum.(*[]*SapReservationDocumentHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapReservationDocumentHeaderDatumR{}
		}
		args = append(args, object.Reservation)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapReservationDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Reservation {
					continue Outer
				}
			}

			args = append(args, obj.Reservation)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_reservation_document_item_data`),
		qm.WhereIn(`sap_reservation_document_item_data.Reservation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_reservation_document_item_data")
	}

	var resultSlice []*SapReservationDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_reservation_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_reservation_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_reservation_document_item_data")
	}

	if len(sapReservationDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReservationSapReservationDocumentItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapReservationDocumentItemDatumR{}
			}
			foreign.R.ReservationSapReservationDocumentHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Reservation == foreign.Reservation {
				local.R.ReservationSapReservationDocumentItemData = append(local.R.ReservationSapReservationDocumentItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapReservationDocumentItemDatumR{}
				}
				foreign.R.ReservationSapReservationDocumentHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddReservationSapReservationDocumentItemData adds the given related objects to the existing relationships
// of the sap_reservation_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.ReservationSapReservationDocumentItemData.
// Sets related.R.ReservationSapReservationDocumentHeaderDatum appropriately.
func (o *SapReservationDocumentHeaderDatum) AddReservationSapReservationDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapReservationDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Reservation = o.Reservation
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_reservation_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Reservation"}),
				strmangle.WhereClause("`", "`", 0, sapReservationDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Reservation, rel.Reservation, rel.ReservationItem, rel.RecordType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Reservation = o.Reservation
		}
	}

	if o.R == nil {
		o.R = &sapReservationDocumentHeaderDatumR{
			ReservationSapReservationDocumentItemData: related,
		}
	} else {
		o.R.ReservationSapReservationDocumentItemData = append(o.R.ReservationSapReservationDocumentItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapReservationDocumentItemDatumR{
				ReservationSapReservationDocumentHeaderDatum: o,
			}
		} else {
			rel.R.ReservationSapReservationDocumentHeaderDatum = o
		}
	}
	return nil
}

// SapReservationDocumentHeaderData retrieves all the records using an executor.
func SapReservationDocumentHeaderData(mods ...qm.QueryMod) sapReservationDocumentHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_reservation_document_header_data`"))
	return sapReservationDocumentHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapReservationDocumentHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapReservationDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, reservation string, selectCols ...string) (*SapReservationDocumentHeaderDatum, error) {
	sapReservationDocumentHeaderDatumObj := &SapReservationDocumentHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_reservation_document_header_data` where `Reservation`=?", sel,
	)

	q := queries.Raw(query, reservation)

	err := q.Bind(ctx, exec, sapReservationDocumentHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_reservation_document_header_data")
	}

	if err = sapReservationDocumentHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapReservationDocumentHeaderDatumObj, err
	}

	return sapReservationDocumentHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapReservationDocumentHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_reservation_document_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapReservationDocumentHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapReservationDocumentHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapReservationDocumentHeaderDatumInsertCache[key]
	sapReservationDocumentHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapReservationDocumentHeaderDatumAllColumns,
			sapReservationDocumentHeaderDatumColumnsWithDefault,
			sapReservationDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_reservation_document_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_reservation_document_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_reservation_document_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapReservationDocumentHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_reservation_document_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Reservation,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_reservation_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapReservationDocumentHeaderDatumInsertCacheMut.Lock()
		sapReservationDocumentHeaderDatumInsertCache[key] = cache
		sapReservationDocumentHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapReservationDocumentHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapReservationDocumentHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapReservationDocumentHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapReservationDocumentHeaderDatumUpdateCache[key]
	sapReservationDocumentHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapReservationDocumentHeaderDatumAllColumns,
			sapReservationDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_reservation_document_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_reservation_document_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapReservationDocumentHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, append(wl, sapReservationDocumentHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_reservation_document_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_reservation_document_header_data")
	}

	if !cached {
		sapReservationDocumentHeaderDatumUpdateCacheMut.Lock()
		sapReservationDocumentHeaderDatumUpdateCache[key] = cache
		sapReservationDocumentHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapReservationDocumentHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_reservation_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_reservation_document_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapReservationDocumentHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapReservationDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_reservation_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapReservationDocumentHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapReservationDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapReservationDocumentHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapReservationDocumentHeaderDatumUniqueColumns = []string{
	"Reservation",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapReservationDocumentHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_reservation_document_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapReservationDocumentHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapReservationDocumentHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapReservationDocumentHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapReservationDocumentHeaderDatumUpsertCache[key]
	sapReservationDocumentHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapReservationDocumentHeaderDatumAllColumns,
			sapReservationDocumentHeaderDatumColumnsWithDefault,
			sapReservationDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapReservationDocumentHeaderDatumAllColumns,
			sapReservationDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_reservation_document_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_reservation_document_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_reservation_document_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_reservation_document_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapReservationDocumentHeaderDatumType, sapReservationDocumentHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_reservation_document_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_reservation_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapReservationDocumentHeaderDatumUpsertCacheMut.Lock()
		sapReservationDocumentHeaderDatumUpsertCache[key] = cache
		sapReservationDocumentHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapReservationDocumentHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapReservationDocumentHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapReservationDocumentHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapReservationDocumentHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_reservation_document_header_data` WHERE `Reservation`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_reservation_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_reservation_document_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapReservationDocumentHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapReservationDocumentHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_reservation_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_reservation_document_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapReservationDocumentHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapReservationDocumentHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapReservationDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_reservation_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapReservationDocumentHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapReservationDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_reservation_document_header_data")
	}

	if len(sapReservationDocumentHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapReservationDocumentHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapReservationDocumentHeaderDatum(ctx, exec, o.Reservation)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapReservationDocumentHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapReservationDocumentHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapReservationDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_reservation_document_header_data`.* FROM `sap_reservation_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapReservationDocumentHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapReservationDocumentHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapReservationDocumentHeaderDatumExists checks if the SapReservationDocumentHeaderDatum row exists.
func SapReservationDocumentHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, reservation string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_reservation_document_header_data` where `Reservation`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, reservation)
	}
	row := exec.QueryRowContext(ctx, sql, reservation)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_reservation_document_header_data exists")
	}

	return exists, nil
}
