// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchasingInfoRecordGeneralDatum is an object representing the database table.
type SapPurchasingInfoRecordGeneralDatum struct {
	PurchasingInfoRecord        string      `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord"`
	Supplier                    null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	Material                    null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialGroup               null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	PurgDocOrderQuantityUnit    null.String `boil:"PurgDocOrderQuantityUnit" json:"PurgDocOrderQuantityUnit,omitempty" toml:"PurgDocOrderQuantityUnit" yaml:"PurgDocOrderQuantityUnit,omitempty"`
	SupplierMaterialNumber      null.String `boil:"SupplierMaterialNumber" json:"SupplierMaterialNumber,omitempty" toml:"SupplierMaterialNumber" yaml:"SupplierMaterialNumber,omitempty"`
	SupplierRespSalesPersonName null.String `boil:"SupplierRespSalesPersonName" json:"SupplierRespSalesPersonName,omitempty" toml:"SupplierRespSalesPersonName" yaml:"SupplierRespSalesPersonName,omitempty"`
	SupplierPhoneNumber         null.String `boil:"SupplierPhoneNumber" json:"SupplierPhoneNumber,omitempty" toml:"SupplierPhoneNumber" yaml:"SupplierPhoneNumber,omitempty"`
	SupplierMaterialGroup       null.String `boil:"SupplierMaterialGroup" json:"SupplierMaterialGroup,omitempty" toml:"SupplierMaterialGroup" yaml:"SupplierMaterialGroup,omitempty"`
	IsRegularSupplier           null.Bool   `boil:"IsRegularSupplier" json:"IsRegularSupplier,omitempty" toml:"IsRegularSupplier" yaml:"IsRegularSupplier,omitempty"`
	AvailabilityStartDate       null.String `boil:"AvailabilityStartDate" json:"AvailabilityStartDate,omitempty" toml:"AvailabilityStartDate" yaml:"AvailabilityStartDate,omitempty"`
	AvailabilityEndDate         null.String `boil:"AvailabilityEndDate" json:"AvailabilityEndDate,omitempty" toml:"AvailabilityEndDate" yaml:"AvailabilityEndDate,omitempty"`
	Manufacturer                null.String `boil:"Manufacturer" json:"Manufacturer,omitempty" toml:"Manufacturer" yaml:"Manufacturer,omitempty"`
	CreationDate                null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	PurchasingInfoRecordDesc    null.String `boil:"PurchasingInfoRecordDesc" json:"PurchasingInfoRecordDesc,omitempty" toml:"PurchasingInfoRecordDesc" yaml:"PurchasingInfoRecordDesc,omitempty"`
	LastChangeDateTime          null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	IsDeleted                   null.Bool   `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapPurchasingInfoRecordGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchasingInfoRecordGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchasingInfoRecordGeneralDatumColumns = struct {
	PurchasingInfoRecord        string
	Supplier                    string
	Material                    string
	MaterialGroup               string
	PurgDocOrderQuantityUnit    string
	SupplierMaterialNumber      string
	SupplierRespSalesPersonName string
	SupplierPhoneNumber         string
	SupplierMaterialGroup       string
	IsRegularSupplier           string
	AvailabilityStartDate       string
	AvailabilityEndDate         string
	Manufacturer                string
	CreationDate                string
	PurchasingInfoRecordDesc    string
	LastChangeDateTime          string
	IsDeleted                   string
}{
	PurchasingInfoRecord:        "PurchasingInfoRecord",
	Supplier:                    "Supplier",
	Material:                    "Material",
	MaterialGroup:               "MaterialGroup",
	PurgDocOrderQuantityUnit:    "PurgDocOrderQuantityUnit",
	SupplierMaterialNumber:      "SupplierMaterialNumber",
	SupplierRespSalesPersonName: "SupplierRespSalesPersonName",
	SupplierPhoneNumber:         "SupplierPhoneNumber",
	SupplierMaterialGroup:       "SupplierMaterialGroup",
	IsRegularSupplier:           "IsRegularSupplier",
	AvailabilityStartDate:       "AvailabilityStartDate",
	AvailabilityEndDate:         "AvailabilityEndDate",
	Manufacturer:                "Manufacturer",
	CreationDate:                "CreationDate",
	PurchasingInfoRecordDesc:    "PurchasingInfoRecordDesc",
	LastChangeDateTime:          "LastChangeDateTime",
	IsDeleted:                   "IsDeleted",
}

var SapPurchasingInfoRecordGeneralDatumTableColumns = struct {
	PurchasingInfoRecord        string
	Supplier                    string
	Material                    string
	MaterialGroup               string
	PurgDocOrderQuantityUnit    string
	SupplierMaterialNumber      string
	SupplierRespSalesPersonName string
	SupplierPhoneNumber         string
	SupplierMaterialGroup       string
	IsRegularSupplier           string
	AvailabilityStartDate       string
	AvailabilityEndDate         string
	Manufacturer                string
	CreationDate                string
	PurchasingInfoRecordDesc    string
	LastChangeDateTime          string
	IsDeleted                   string
}{
	PurchasingInfoRecord:        "sap_purchasing_info_record_general_data.PurchasingInfoRecord",
	Supplier:                    "sap_purchasing_info_record_general_data.Supplier",
	Material:                    "sap_purchasing_info_record_general_data.Material",
	MaterialGroup:               "sap_purchasing_info_record_general_data.MaterialGroup",
	PurgDocOrderQuantityUnit:    "sap_purchasing_info_record_general_data.PurgDocOrderQuantityUnit",
	SupplierMaterialNumber:      "sap_purchasing_info_record_general_data.SupplierMaterialNumber",
	SupplierRespSalesPersonName: "sap_purchasing_info_record_general_data.SupplierRespSalesPersonName",
	SupplierPhoneNumber:         "sap_purchasing_info_record_general_data.SupplierPhoneNumber",
	SupplierMaterialGroup:       "sap_purchasing_info_record_general_data.SupplierMaterialGroup",
	IsRegularSupplier:           "sap_purchasing_info_record_general_data.IsRegularSupplier",
	AvailabilityStartDate:       "sap_purchasing_info_record_general_data.AvailabilityStartDate",
	AvailabilityEndDate:         "sap_purchasing_info_record_general_data.AvailabilityEndDate",
	Manufacturer:                "sap_purchasing_info_record_general_data.Manufacturer",
	CreationDate:                "sap_purchasing_info_record_general_data.CreationDate",
	PurchasingInfoRecordDesc:    "sap_purchasing_info_record_general_data.PurchasingInfoRecordDesc",
	LastChangeDateTime:          "sap_purchasing_info_record_general_data.LastChangeDateTime",
	IsDeleted:                   "sap_purchasing_info_record_general_data.IsDeleted",
}

// Generated where

var SapPurchasingInfoRecordGeneralDatumWhere = struct {
	PurchasingInfoRecord        whereHelperstring
	Supplier                    whereHelpernull_String
	Material                    whereHelpernull_String
	MaterialGroup               whereHelpernull_String
	PurgDocOrderQuantityUnit    whereHelpernull_String
	SupplierMaterialNumber      whereHelpernull_String
	SupplierRespSalesPersonName whereHelpernull_String
	SupplierPhoneNumber         whereHelpernull_String
	SupplierMaterialGroup       whereHelpernull_String
	IsRegularSupplier           whereHelpernull_Bool
	AvailabilityStartDate       whereHelpernull_String
	AvailabilityEndDate         whereHelpernull_String
	Manufacturer                whereHelpernull_String
	CreationDate                whereHelpernull_String
	PurchasingInfoRecordDesc    whereHelpernull_String
	LastChangeDateTime          whereHelpernull_String
	IsDeleted                   whereHelpernull_Bool
}{
	PurchasingInfoRecord:        whereHelperstring{field: "`sap_purchasing_info_record_general_data`.`PurchasingInfoRecord`"},
	Supplier:                    whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`Supplier`"},
	Material:                    whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`Material`"},
	MaterialGroup:               whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`MaterialGroup`"},
	PurgDocOrderQuantityUnit:    whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`PurgDocOrderQuantityUnit`"},
	SupplierMaterialNumber:      whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`SupplierMaterialNumber`"},
	SupplierRespSalesPersonName: whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`SupplierRespSalesPersonName`"},
	SupplierPhoneNumber:         whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`SupplierPhoneNumber`"},
	SupplierMaterialGroup:       whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`SupplierMaterialGroup`"},
	IsRegularSupplier:           whereHelpernull_Bool{field: "`sap_purchasing_info_record_general_data`.`IsRegularSupplier`"},
	AvailabilityStartDate:       whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`AvailabilityStartDate`"},
	AvailabilityEndDate:         whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`AvailabilityEndDate`"},
	Manufacturer:                whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`Manufacturer`"},
	CreationDate:                whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`CreationDate`"},
	PurchasingInfoRecordDesc:    whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`PurchasingInfoRecordDesc`"},
	LastChangeDateTime:          whereHelpernull_String{field: "`sap_purchasing_info_record_general_data`.`LastChangeDateTime`"},
	IsDeleted:                   whereHelpernull_Bool{field: "`sap_purchasing_info_record_general_data`.`IsDeleted`"},
}

// SapPurchasingInfoRecordGeneralDatumRels is where relationship names are stored.
var SapPurchasingInfoRecordGeneralDatumRels = struct {
	PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData        string
	PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData         string
	PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData string
}{
	PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData:        "PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData",
	PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData:         "PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData",
	PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData: "PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData",
}

// sapPurchasingInfoRecordGeneralDatumR is where relationships are stored.
type sapPurchasingInfoRecordGeneralDatumR struct {
	PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData        SapPurchasingInfoRecordOrganizationPlantDatumSlice        `boil:"PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData" json:"PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData" toml:"PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData" yaml:"PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData"`
	PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData         SapPurchasingInfoRecordPricingConditionDatumSlice         `boil:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData" json:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData" toml:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData" yaml:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData"`
	PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData SapPurchasingInfoRecordPricingConditionValidityDatumSlice `boil:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData" json:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData" toml:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData" yaml:"PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData"`
}

// NewStruct creates a new relationship struct
func (*sapPurchasingInfoRecordGeneralDatumR) NewStruct() *sapPurchasingInfoRecordGeneralDatumR {
	return &sapPurchasingInfoRecordGeneralDatumR{}
}

func (r *sapPurchasingInfoRecordGeneralDatumR) GetPurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData() SapPurchasingInfoRecordOrganizationPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData
}

func (r *sapPurchasingInfoRecordGeneralDatumR) GetPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData() SapPurchasingInfoRecordPricingConditionDatumSlice {
	if r == nil {
		return nil
	}
	return r.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData
}

func (r *sapPurchasingInfoRecordGeneralDatumR) GetPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData() SapPurchasingInfoRecordPricingConditionValidityDatumSlice {
	if r == nil {
		return nil
	}
	return r.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData
}

// sapPurchasingInfoRecordGeneralDatumL is where Load methods for each relationship are stored.
type sapPurchasingInfoRecordGeneralDatumL struct{}

var (
	sapPurchasingInfoRecordGeneralDatumAllColumns            = []string{"PurchasingInfoRecord", "Supplier", "Material", "MaterialGroup", "PurgDocOrderQuantityUnit", "SupplierMaterialNumber", "SupplierRespSalesPersonName", "SupplierPhoneNumber", "SupplierMaterialGroup", "IsRegularSupplier", "AvailabilityStartDate", "AvailabilityEndDate", "Manufacturer", "CreationDate", "PurchasingInfoRecordDesc", "LastChangeDateTime", "IsDeleted"}
	sapPurchasingInfoRecordGeneralDatumColumnsWithoutDefault = []string{"PurchasingInfoRecord", "Supplier", "Material", "MaterialGroup", "PurgDocOrderQuantityUnit", "SupplierMaterialNumber", "SupplierRespSalesPersonName", "SupplierPhoneNumber", "SupplierMaterialGroup", "IsRegularSupplier", "AvailabilityStartDate", "AvailabilityEndDate", "Manufacturer", "CreationDate", "PurchasingInfoRecordDesc", "LastChangeDateTime", "IsDeleted"}
	sapPurchasingInfoRecordGeneralDatumColumnsWithDefault    = []string{}
	sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns     = []string{"PurchasingInfoRecord"}
	sapPurchasingInfoRecordGeneralDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchasingInfoRecordGeneralDatumSlice is an alias for a slice of pointers to SapPurchasingInfoRecordGeneralDatum.
	// This should almost always be used instead of []SapPurchasingInfoRecordGeneralDatum.
	SapPurchasingInfoRecordGeneralDatumSlice []*SapPurchasingInfoRecordGeneralDatum
	// SapPurchasingInfoRecordGeneralDatumHook is the signature for custom SapPurchasingInfoRecordGeneralDatum hook methods
	SapPurchasingInfoRecordGeneralDatumHook func(context.Context, boil.ContextExecutor, *SapPurchasingInfoRecordGeneralDatum) error

	sapPurchasingInfoRecordGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchasingInfoRecordGeneralDatumType                 = reflect.TypeOf(&SapPurchasingInfoRecordGeneralDatum{})
	sapPurchasingInfoRecordGeneralDatumMapping              = queries.MakeStructMapping(sapPurchasingInfoRecordGeneralDatumType)
	sapPurchasingInfoRecordGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns)
	sapPurchasingInfoRecordGeneralDatumInsertCacheMut       sync.RWMutex
	sapPurchasingInfoRecordGeneralDatumInsertCache          = make(map[string]insertCache)
	sapPurchasingInfoRecordGeneralDatumUpdateCacheMut       sync.RWMutex
	sapPurchasingInfoRecordGeneralDatumUpdateCache          = make(map[string]updateCache)
	sapPurchasingInfoRecordGeneralDatumUpsertCacheMut       sync.RWMutex
	sapPurchasingInfoRecordGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchasingInfoRecordGeneralDatumAfterSelectHooks []SapPurchasingInfoRecordGeneralDatumHook

var sapPurchasingInfoRecordGeneralDatumBeforeInsertHooks []SapPurchasingInfoRecordGeneralDatumHook
var sapPurchasingInfoRecordGeneralDatumAfterInsertHooks []SapPurchasingInfoRecordGeneralDatumHook

var sapPurchasingInfoRecordGeneralDatumBeforeUpdateHooks []SapPurchasingInfoRecordGeneralDatumHook
var sapPurchasingInfoRecordGeneralDatumAfterUpdateHooks []SapPurchasingInfoRecordGeneralDatumHook

var sapPurchasingInfoRecordGeneralDatumBeforeDeleteHooks []SapPurchasingInfoRecordGeneralDatumHook
var sapPurchasingInfoRecordGeneralDatumAfterDeleteHooks []SapPurchasingInfoRecordGeneralDatumHook

var sapPurchasingInfoRecordGeneralDatumBeforeUpsertHooks []SapPurchasingInfoRecordGeneralDatumHook
var sapPurchasingInfoRecordGeneralDatumAfterUpsertHooks []SapPurchasingInfoRecordGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchasingInfoRecordGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchasingInfoRecordGeneralDatumHook registers your hook function for all future operations.
func AddSapPurchasingInfoRecordGeneralDatumHook(hookPoint boil.HookPoint, sapPurchasingInfoRecordGeneralDatumHook SapPurchasingInfoRecordGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchasingInfoRecordGeneralDatumAfterSelectHooks = append(sapPurchasingInfoRecordGeneralDatumAfterSelectHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.BeforeInsertHook:
		sapPurchasingInfoRecordGeneralDatumBeforeInsertHooks = append(sapPurchasingInfoRecordGeneralDatumBeforeInsertHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.AfterInsertHook:
		sapPurchasingInfoRecordGeneralDatumAfterInsertHooks = append(sapPurchasingInfoRecordGeneralDatumAfterInsertHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchasingInfoRecordGeneralDatumBeforeUpdateHooks = append(sapPurchasingInfoRecordGeneralDatumBeforeUpdateHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.AfterUpdateHook:
		sapPurchasingInfoRecordGeneralDatumAfterUpdateHooks = append(sapPurchasingInfoRecordGeneralDatumAfterUpdateHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchasingInfoRecordGeneralDatumBeforeDeleteHooks = append(sapPurchasingInfoRecordGeneralDatumBeforeDeleteHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.AfterDeleteHook:
		sapPurchasingInfoRecordGeneralDatumAfterDeleteHooks = append(sapPurchasingInfoRecordGeneralDatumAfterDeleteHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchasingInfoRecordGeneralDatumBeforeUpsertHooks = append(sapPurchasingInfoRecordGeneralDatumBeforeUpsertHooks, sapPurchasingInfoRecordGeneralDatumHook)
	case boil.AfterUpsertHook:
		sapPurchasingInfoRecordGeneralDatumAfterUpsertHooks = append(sapPurchasingInfoRecordGeneralDatumAfterUpsertHooks, sapPurchasingInfoRecordGeneralDatumHook)
	}
}

// One returns a single sapPurchasingInfoRecordGeneralDatum record from the query.
func (q sapPurchasingInfoRecordGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchasingInfoRecordGeneralDatum, error) {
	o := &SapPurchasingInfoRecordGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchasing_info_record_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchasingInfoRecordGeneralDatum records from the query.
func (q sapPurchasingInfoRecordGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchasingInfoRecordGeneralDatumSlice, error) {
	var o []*SapPurchasingInfoRecordGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchasingInfoRecordGeneralDatum slice")
	}

	if len(sapPurchasingInfoRecordGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchasingInfoRecordGeneralDatum records in the query.
func (q sapPurchasingInfoRecordGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchasing_info_record_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchasingInfoRecordGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchasing_info_record_general_data exists")
	}

	return count > 0, nil
}

// PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData retrieves all the sap_purchasing_info_record_organization_plant_datum's SapPurchasingInfoRecordOrganizationPlantData with an executor via PurchasingInfoRecord column.
func (o *SapPurchasingInfoRecordGeneralDatum) PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData(mods ...qm.QueryMod) sapPurchasingInfoRecordOrganizationPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchasing_info_record_organization_plant_data`.`PurchasingInfoRecord`=?", o.PurchasingInfoRecord),
	)

	return SapPurchasingInfoRecordOrganizationPlantData(queryMods...)
}

// PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData retrieves all the sap_purchasing_info_record_pricing_condition_datum's SapPurchasingInfoRecordPricingConditionData with an executor via PurchasingInfoRecord column.
func (o *SapPurchasingInfoRecordGeneralDatum) PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData(mods ...qm.QueryMod) sapPurchasingInfoRecordPricingConditionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchasing_info_record_pricing_condition_data`.`PurchasingInfoRecord`=?", o.PurchasingInfoRecord),
	)

	return SapPurchasingInfoRecordPricingConditionData(queryMods...)
}

// PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData retrieves all the sap_purchasing_info_record_pricing_condition_validity_datum's SapPurchasingInfoRecordPricingConditionValidityData with an executor via PurchasingInfoRecord column.
func (o *SapPurchasingInfoRecordGeneralDatum) PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData(mods ...qm.QueryMod) sapPurchasingInfoRecordPricingConditionValidityDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_purchasing_info_record_pricing_condition_validity_data`.`PurchasingInfoRecord`=?", o.PurchasingInfoRecord),
	)

	return SapPurchasingInfoRecordPricingConditionValidityData(queryMods...)
}

// LoadPurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchasingInfoRecordGeneralDatumL) LoadPurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchasingInfoRecordGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchasingInfoRecordGeneralDatum
	var object *SapPurchasingInfoRecordGeneralDatum

	if singular {
		object = maybeSapPurchasingInfoRecordGeneralDatum.(*SapPurchasingInfoRecordGeneralDatum)
	} else {
		slice = *maybeSapPurchasingInfoRecordGeneralDatum.(*[]*SapPurchasingInfoRecordGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchasingInfoRecordGeneralDatumR{}
		}
		args = append(args, object.PurchasingInfoRecord)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchasingInfoRecordGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchasingInfoRecord {
					continue Outer
				}
			}

			args = append(args, obj.PurchasingInfoRecord)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchasing_info_record_organization_plant_data`),
		qm.WhereIn(`sap_purchasing_info_record_organization_plant_data.PurchasingInfoRecord in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchasing_info_record_organization_plant_data")
	}

	var resultSlice []*SapPurchasingInfoRecordOrganizationPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchasing_info_record_organization_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchasing_info_record_organization_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchasing_info_record_organization_plant_data")
	}

	if len(sapPurchasingInfoRecordOrganizationPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchasingInfoRecordOrganizationPlantDatumR{}
			}
			foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchasingInfoRecord == foreign.PurchasingInfoRecord {
				local.R.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData = append(local.R.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchasingInfoRecordOrganizationPlantDatumR{}
				}
				foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchasingInfoRecordGeneralDatumL) LoadPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchasingInfoRecordGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchasingInfoRecordGeneralDatum
	var object *SapPurchasingInfoRecordGeneralDatum

	if singular {
		object = maybeSapPurchasingInfoRecordGeneralDatum.(*SapPurchasingInfoRecordGeneralDatum)
	} else {
		slice = *maybeSapPurchasingInfoRecordGeneralDatum.(*[]*SapPurchasingInfoRecordGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchasingInfoRecordGeneralDatumR{}
		}
		args = append(args, object.PurchasingInfoRecord)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchasingInfoRecordGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchasingInfoRecord {
					continue Outer
				}
			}

			args = append(args, obj.PurchasingInfoRecord)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchasing_info_record_pricing_condition_data`),
		qm.WhereIn(`sap_purchasing_info_record_pricing_condition_data.PurchasingInfoRecord in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchasing_info_record_pricing_condition_data")
	}

	var resultSlice []*SapPurchasingInfoRecordPricingConditionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchasing_info_record_pricing_condition_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchasing_info_record_pricing_condition_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchasing_info_record_pricing_condition_data")
	}

	if len(sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchasingInfoRecordPricingConditionDatumR{}
			}
			foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchasingInfoRecord == foreign.PurchasingInfoRecord {
				local.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData = append(local.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchasingInfoRecordPricingConditionDatumR{}
				}
				foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapPurchasingInfoRecordGeneralDatumL) LoadPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchasingInfoRecordGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchasingInfoRecordGeneralDatum
	var object *SapPurchasingInfoRecordGeneralDatum

	if singular {
		object = maybeSapPurchasingInfoRecordGeneralDatum.(*SapPurchasingInfoRecordGeneralDatum)
	} else {
		slice = *maybeSapPurchasingInfoRecordGeneralDatum.(*[]*SapPurchasingInfoRecordGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchasingInfoRecordGeneralDatumR{}
		}
		args = append(args, object.PurchasingInfoRecord)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchasingInfoRecordGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchasingInfoRecord {
					continue Outer
				}
			}

			args = append(args, obj.PurchasingInfoRecord)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchasing_info_record_pricing_condition_validity_data`),
		qm.WhereIn(`sap_purchasing_info_record_pricing_condition_validity_data.PurchasingInfoRecord in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_purchasing_info_record_pricing_condition_validity_data")
	}

	var resultSlice []*SapPurchasingInfoRecordPricingConditionValidityDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_purchasing_info_record_pricing_condition_validity_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchasing_info_record_pricing_condition_validity_data")
	}

	if len(sapPurchasingInfoRecordPricingConditionValidityDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapPurchasingInfoRecordPricingConditionValidityDatumR{}
			}
			foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PurchasingInfoRecord == foreign.PurchasingInfoRecord {
				local.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData = append(local.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData, foreign)
				if foreign.R == nil {
					foreign.R = &sapPurchasingInfoRecordPricingConditionValidityDatumR{}
				}
				foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// AddPurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData adds the given related objects to the existing relationships
// of the sap_purchasing_info_record_general_datum, optionally inserting them as new records.
// Appends related to o.R.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData.
// Sets related.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum appropriately.
func (o *SapPurchasingInfoRecordGeneralDatum) AddPurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchasingInfoRecordOrganizationPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchasingInfoRecord = o.PurchasingInfoRecord
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchasing_info_record_organization_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchasingInfoRecord"}),
				strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordOrganizationPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchasingInfoRecord, rel.PurchasingInfoRecord, rel.PurchasingInfoRecordCategory, rel.PurchasingOrganization, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchasingInfoRecord = o.PurchasingInfoRecord
		}
	}

	if o.R == nil {
		o.R = &sapPurchasingInfoRecordGeneralDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData: related,
		}
	} else {
		o.R.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData = append(o.R.PurchasingInfoRecordSapPurchasingInfoRecordOrganizationPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchasingInfoRecordOrganizationPlantDatumR{
				PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: o,
			}
		} else {
			rel.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = o
		}
	}
	return nil
}

// AddPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData adds the given related objects to the existing relationships
// of the sap_purchasing_info_record_general_datum, optionally inserting them as new records.
// Appends related to o.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData.
// Sets related.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum appropriately.
func (o *SapPurchasingInfoRecordGeneralDatum) AddPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchasingInfoRecordPricingConditionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchasingInfoRecord = o.PurchasingInfoRecord
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchasing_info_record_pricing_condition_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchasingInfoRecord"}),
				strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchasingInfoRecord, rel.PurchasingInfoRecord, rel.ConditionRecord, rel.ConditionSequentialNumber, rel.ConditionValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchasingInfoRecord = o.PurchasingInfoRecord
		}
	}

	if o.R == nil {
		o.R = &sapPurchasingInfoRecordGeneralDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData: related,
		}
	} else {
		o.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData = append(o.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchasingInfoRecordPricingConditionDatumR{
				PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: o,
			}
		} else {
			rel.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = o
		}
	}
	return nil
}

// AddPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData adds the given related objects to the existing relationships
// of the sap_purchasing_info_record_general_datum, optionally inserting them as new records.
// Appends related to o.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData.
// Sets related.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum appropriately.
func (o *SapPurchasingInfoRecordGeneralDatum) AddPurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapPurchasingInfoRecordPricingConditionValidityDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PurchasingInfoRecord = o.PurchasingInfoRecord
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_purchasing_info_record_pricing_condition_validity_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PurchasingInfoRecord"}),
				strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionValidityDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PurchasingInfoRecord, rel.PurchasingInfoRecord, rel.ConditionRecord}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PurchasingInfoRecord = o.PurchasingInfoRecord
		}
	}

	if o.R == nil {
		o.R = &sapPurchasingInfoRecordGeneralDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData: related,
		}
	} else {
		o.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData = append(o.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionValidityData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapPurchasingInfoRecordPricingConditionValidityDatumR{
				PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: o,
			}
		} else {
			rel.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = o
		}
	}
	return nil
}

// SapPurchasingInfoRecordGeneralData retrieves all the records using an executor.
func SapPurchasingInfoRecordGeneralData(mods ...qm.QueryMod) sapPurchasingInfoRecordGeneralDatumQuery {
	mods = append(mods, qm.From("`sap_purchasing_info_record_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_purchasing_info_record_general_data`.*"})
	}

	return sapPurchasingInfoRecordGeneralDatumQuery{q}
}

// FindSapPurchasingInfoRecordGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchasingInfoRecordGeneralDatum(ctx context.Context, exec boil.ContextExecutor, purchasingInfoRecord string, selectCols ...string) (*SapPurchasingInfoRecordGeneralDatum, error) {
	sapPurchasingInfoRecordGeneralDatumObj := &SapPurchasingInfoRecordGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchasing_info_record_general_data` where `PurchasingInfoRecord`=?", sel,
	)

	q := queries.Raw(query, purchasingInfoRecord)

	err := q.Bind(ctx, exec, sapPurchasingInfoRecordGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchasing_info_record_general_data")
	}

	if err = sapPurchasingInfoRecordGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchasingInfoRecordGeneralDatumObj, err
	}

	return sapPurchasingInfoRecordGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchasingInfoRecordGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_info_record_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingInfoRecordGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchasingInfoRecordGeneralDatumInsertCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordGeneralDatumInsertCache[key]
	sapPurchasingInfoRecordGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchasingInfoRecordGeneralDatumAllColumns,
			sapPurchasingInfoRecordGeneralDatumColumnsWithDefault,
			sapPurchasingInfoRecordGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchasing_info_record_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchasing_info_record_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchasing_info_record_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchasing_info_record_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchasingInfoRecord,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_info_record_general_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingInfoRecordGeneralDatumInsertCacheMut.Lock()
		sapPurchasingInfoRecordGeneralDatumInsertCache[key] = cache
		sapPurchasingInfoRecordGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchasingInfoRecordGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchasingInfoRecordGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchasingInfoRecordGeneralDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordGeneralDatumUpdateCache[key]
	sapPurchasingInfoRecordGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchasingInfoRecordGeneralDatumAllColumns,
			sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchasing_info_record_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchasing_info_record_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, append(wl, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchasing_info_record_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchasing_info_record_general_data")
	}

	if !cached {
		sapPurchasingInfoRecordGeneralDatumUpdateCacheMut.Lock()
		sapPurchasingInfoRecordGeneralDatumUpdateCache[key] = cache
		sapPurchasingInfoRecordGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchasingInfoRecordGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchasing_info_record_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchasing_info_record_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchasingInfoRecordGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchasing_info_record_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchasingInfoRecordGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchasingInfoRecordGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchasingInfoRecordGeneralDatumUniqueColumns = []string{
	"PurchasingInfoRecord",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchasingInfoRecordGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_info_record_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingInfoRecordGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchasingInfoRecordGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchasingInfoRecordGeneralDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordGeneralDatumUpsertCache[key]
	sapPurchasingInfoRecordGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchasingInfoRecordGeneralDatumAllColumns,
			sapPurchasingInfoRecordGeneralDatumColumnsWithDefault,
			sapPurchasingInfoRecordGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchasingInfoRecordGeneralDatumAllColumns,
			sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchasing_info_record_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchasing_info_record_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchasing_info_record_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchasing_info_record_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchasingInfoRecordGeneralDatumType, sapPurchasingInfoRecordGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchasing_info_record_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_info_record_general_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingInfoRecordGeneralDatumUpsertCacheMut.Lock()
		sapPurchasingInfoRecordGeneralDatumUpsertCache[key] = cache
		sapPurchasingInfoRecordGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchasingInfoRecordGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchasingInfoRecordGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchasingInfoRecordGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchasingInfoRecordGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchasing_info_record_general_data` WHERE `PurchasingInfoRecord`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchasing_info_record_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchasing_info_record_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchasingInfoRecordGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchasingInfoRecordGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchasing_info_record_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_info_record_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchasingInfoRecordGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchasingInfoRecordGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchasing_info_record_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchasingInfoRecordGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_info_record_general_data")
	}

	if len(sapPurchasingInfoRecordGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchasingInfoRecordGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchasingInfoRecordGeneralDatum(ctx, exec, o.PurchasingInfoRecord)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchasingInfoRecordGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchasingInfoRecordGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchasing_info_record_general_data`.* FROM `sap_purchasing_info_record_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchasingInfoRecordGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchasingInfoRecordGeneralDatumExists checks if the SapPurchasingInfoRecordGeneralDatum row exists.
func SapPurchasingInfoRecordGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, purchasingInfoRecord string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchasing_info_record_general_data` where `PurchasingInfoRecord`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchasingInfoRecord)
	}
	row := exec.QueryRowContext(ctx, sql, purchasingInfoRecord)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchasing_info_record_general_data exists")
	}

	return exists, nil
}
