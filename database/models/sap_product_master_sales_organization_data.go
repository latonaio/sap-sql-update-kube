// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterSalesOrganizationDatum is an object representing the database table.
type SapProductMasterSalesOrganizationDatum struct {
	Product                        string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductSalesOrg                string      `boil:"ProductSalesOrg" json:"ProductSalesOrg" toml:"ProductSalesOrg" yaml:"ProductSalesOrg"`
	ProductDistributionChnl        string      `boil:"ProductDistributionChnl" json:"ProductDistributionChnl" toml:"ProductDistributionChnl" yaml:"ProductDistributionChnl"`
	SupplyingPlant                 null.String `boil:"SupplyingPlant" json:"SupplyingPlant,omitempty" toml:"SupplyingPlant" yaml:"SupplyingPlant,omitempty"`
	PriceSpecificationProductGroup null.String `boil:"PriceSpecificationProductGroup" json:"PriceSpecificationProductGroup,omitempty" toml:"PriceSpecificationProductGroup" yaml:"PriceSpecificationProductGroup,omitempty"`
	AccountDetnProductGroup        null.String `boil:"AccountDetnProductGroup" json:"AccountDetnProductGroup,omitempty" toml:"AccountDetnProductGroup" yaml:"AccountDetnProductGroup,omitempty"`
	ItemCategoryGroup              null.String `boil:"ItemCategoryGroup" json:"ItemCategoryGroup,omitempty" toml:"ItemCategoryGroup" yaml:"ItemCategoryGroup,omitempty"`
	SalesMeasureUnit               null.String `boil:"SalesMeasureUnit" json:"SalesMeasureUnit,omitempty" toml:"SalesMeasureUnit" yaml:"SalesMeasureUnit,omitempty"`
	ProductHierarchy               null.String `boil:"ProductHierarchy" json:"ProductHierarchy,omitempty" toml:"ProductHierarchy" yaml:"ProductHierarchy,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *sapProductMasterSalesOrganizationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterSalesOrganizationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterSalesOrganizationDatumColumns = struct {
	Product                        string
	ProductSalesOrg                string
	ProductDistributionChnl        string
	SupplyingPlant                 string
	PriceSpecificationProductGroup string
	AccountDetnProductGroup        string
	ItemCategoryGroup              string
	SalesMeasureUnit               string
	ProductHierarchy               string
	IsMarkedForDeletion            string
}{
	Product:                        "Product",
	ProductSalesOrg:                "ProductSalesOrg",
	ProductDistributionChnl:        "ProductDistributionChnl",
	SupplyingPlant:                 "SupplyingPlant",
	PriceSpecificationProductGroup: "PriceSpecificationProductGroup",
	AccountDetnProductGroup:        "AccountDetnProductGroup",
	ItemCategoryGroup:              "ItemCategoryGroup",
	SalesMeasureUnit:               "SalesMeasureUnit",
	ProductHierarchy:               "ProductHierarchy",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var SapProductMasterSalesOrganizationDatumTableColumns = struct {
	Product                        string
	ProductSalesOrg                string
	ProductDistributionChnl        string
	SupplyingPlant                 string
	PriceSpecificationProductGroup string
	AccountDetnProductGroup        string
	ItemCategoryGroup              string
	SalesMeasureUnit               string
	ProductHierarchy               string
	IsMarkedForDeletion            string
}{
	Product:                        "sap_product_master_sales_organization_data.Product",
	ProductSalesOrg:                "sap_product_master_sales_organization_data.ProductSalesOrg",
	ProductDistributionChnl:        "sap_product_master_sales_organization_data.ProductDistributionChnl",
	SupplyingPlant:                 "sap_product_master_sales_organization_data.SupplyingPlant",
	PriceSpecificationProductGroup: "sap_product_master_sales_organization_data.PriceSpecificationProductGroup",
	AccountDetnProductGroup:        "sap_product_master_sales_organization_data.AccountDetnProductGroup",
	ItemCategoryGroup:              "sap_product_master_sales_organization_data.ItemCategoryGroup",
	SalesMeasureUnit:               "sap_product_master_sales_organization_data.SalesMeasureUnit",
	ProductHierarchy:               "sap_product_master_sales_organization_data.ProductHierarchy",
	IsMarkedForDeletion:            "sap_product_master_sales_organization_data.IsMarkedForDeletion",
}

// Generated where

var SapProductMasterSalesOrganizationDatumWhere = struct {
	Product                        whereHelperstring
	ProductSalesOrg                whereHelperstring
	ProductDistributionChnl        whereHelperstring
	SupplyingPlant                 whereHelpernull_String
	PriceSpecificationProductGroup whereHelpernull_String
	AccountDetnProductGroup        whereHelpernull_String
	ItemCategoryGroup              whereHelpernull_String
	SalesMeasureUnit               whereHelpernull_String
	ProductHierarchy               whereHelpernull_String
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	Product:                        whereHelperstring{field: "`sap_product_master_sales_organization_data`.`Product`"},
	ProductSalesOrg:                whereHelperstring{field: "`sap_product_master_sales_organization_data`.`ProductSalesOrg`"},
	ProductDistributionChnl:        whereHelperstring{field: "`sap_product_master_sales_organization_data`.`ProductDistributionChnl`"},
	SupplyingPlant:                 whereHelpernull_String{field: "`sap_product_master_sales_organization_data`.`SupplyingPlant`"},
	PriceSpecificationProductGroup: whereHelpernull_String{field: "`sap_product_master_sales_organization_data`.`PriceSpecificationProductGroup`"},
	AccountDetnProductGroup:        whereHelpernull_String{field: "`sap_product_master_sales_organization_data`.`AccountDetnProductGroup`"},
	ItemCategoryGroup:              whereHelpernull_String{field: "`sap_product_master_sales_organization_data`.`ItemCategoryGroup`"},
	SalesMeasureUnit:               whereHelpernull_String{field: "`sap_product_master_sales_organization_data`.`SalesMeasureUnit`"},
	ProductHierarchy:               whereHelpernull_String{field: "`sap_product_master_sales_organization_data`.`ProductHierarchy`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`sap_product_master_sales_organization_data`.`IsMarkedForDeletion`"},
}

// SapProductMasterSalesOrganizationDatumRels is where relationship names are stored.
var SapProductMasterSalesOrganizationDatumRels = struct {
	ProductSapProductMasterGeneralDatum string
}{
	ProductSapProductMasterGeneralDatum: "ProductSapProductMasterGeneralDatum",
}

// sapProductMasterSalesOrganizationDatumR is where relationships are stored.
type sapProductMasterSalesOrganizationDatumR struct {
	ProductSapProductMasterGeneralDatum *SapProductMasterGeneralDatum `boil:"ProductSapProductMasterGeneralDatum" json:"ProductSapProductMasterGeneralDatum" toml:"ProductSapProductMasterGeneralDatum" yaml:"ProductSapProductMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterSalesOrganizationDatumR) NewStruct() *sapProductMasterSalesOrganizationDatumR {
	return &sapProductMasterSalesOrganizationDatumR{}
}

// sapProductMasterSalesOrganizationDatumL is where Load methods for each relationship are stored.
type sapProductMasterSalesOrganizationDatumL struct{}

var (
	sapProductMasterSalesOrganizationDatumAllColumns            = []string{"Product", "ProductSalesOrg", "ProductDistributionChnl", "SupplyingPlant", "PriceSpecificationProductGroup", "AccountDetnProductGroup", "ItemCategoryGroup", "SalesMeasureUnit", "ProductHierarchy", "IsMarkedForDeletion"}
	sapProductMasterSalesOrganizationDatumColumnsWithoutDefault = []string{"Product", "ProductSalesOrg", "ProductDistributionChnl", "SupplyingPlant", "PriceSpecificationProductGroup", "AccountDetnProductGroup", "ItemCategoryGroup", "SalesMeasureUnit", "ProductHierarchy", "IsMarkedForDeletion"}
	sapProductMasterSalesOrganizationDatumColumnsWithDefault    = []string{}
	sapProductMasterSalesOrganizationDatumPrimaryKeyColumns     = []string{"Product", "ProductSalesOrg", "ProductDistributionChnl"}
	sapProductMasterSalesOrganizationDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterSalesOrganizationDatumSlice is an alias for a slice of pointers to SapProductMasterSalesOrganizationDatum.
	// This should almost always be used instead of []SapProductMasterSalesOrganizationDatum.
	SapProductMasterSalesOrganizationDatumSlice []*SapProductMasterSalesOrganizationDatum
	// SapProductMasterSalesOrganizationDatumHook is the signature for custom SapProductMasterSalesOrganizationDatum hook methods
	SapProductMasterSalesOrganizationDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterSalesOrganizationDatum) error

	sapProductMasterSalesOrganizationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterSalesOrganizationDatumType                 = reflect.TypeOf(&SapProductMasterSalesOrganizationDatum{})
	sapProductMasterSalesOrganizationDatumMapping              = queries.MakeStructMapping(sapProductMasterSalesOrganizationDatumType)
	sapProductMasterSalesOrganizationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns)
	sapProductMasterSalesOrganizationDatumInsertCacheMut       sync.RWMutex
	sapProductMasterSalesOrganizationDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterSalesOrganizationDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterSalesOrganizationDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterSalesOrganizationDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterSalesOrganizationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterSalesOrganizationDatumAfterSelectHooks []SapProductMasterSalesOrganizationDatumHook

var sapProductMasterSalesOrganizationDatumBeforeInsertHooks []SapProductMasterSalesOrganizationDatumHook
var sapProductMasterSalesOrganizationDatumAfterInsertHooks []SapProductMasterSalesOrganizationDatumHook

var sapProductMasterSalesOrganizationDatumBeforeUpdateHooks []SapProductMasterSalesOrganizationDatumHook
var sapProductMasterSalesOrganizationDatumAfterUpdateHooks []SapProductMasterSalesOrganizationDatumHook

var sapProductMasterSalesOrganizationDatumBeforeDeleteHooks []SapProductMasterSalesOrganizationDatumHook
var sapProductMasterSalesOrganizationDatumAfterDeleteHooks []SapProductMasterSalesOrganizationDatumHook

var sapProductMasterSalesOrganizationDatumBeforeUpsertHooks []SapProductMasterSalesOrganizationDatumHook
var sapProductMasterSalesOrganizationDatumAfterUpsertHooks []SapProductMasterSalesOrganizationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterSalesOrganizationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterSalesOrganizationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterSalesOrganizationDatumHook registers your hook function for all future operations.
func AddSapProductMasterSalesOrganizationDatumHook(hookPoint boil.HookPoint, sapProductMasterSalesOrganizationDatumHook SapProductMasterSalesOrganizationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterSalesOrganizationDatumAfterSelectHooks = append(sapProductMasterSalesOrganizationDatumAfterSelectHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterSalesOrganizationDatumBeforeInsertHooks = append(sapProductMasterSalesOrganizationDatumBeforeInsertHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterSalesOrganizationDatumAfterInsertHooks = append(sapProductMasterSalesOrganizationDatumAfterInsertHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterSalesOrganizationDatumBeforeUpdateHooks = append(sapProductMasterSalesOrganizationDatumBeforeUpdateHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterSalesOrganizationDatumAfterUpdateHooks = append(sapProductMasterSalesOrganizationDatumAfterUpdateHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterSalesOrganizationDatumBeforeDeleteHooks = append(sapProductMasterSalesOrganizationDatumBeforeDeleteHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterSalesOrganizationDatumAfterDeleteHooks = append(sapProductMasterSalesOrganizationDatumAfterDeleteHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterSalesOrganizationDatumBeforeUpsertHooks = append(sapProductMasterSalesOrganizationDatumBeforeUpsertHooks, sapProductMasterSalesOrganizationDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterSalesOrganizationDatumAfterUpsertHooks = append(sapProductMasterSalesOrganizationDatumAfterUpsertHooks, sapProductMasterSalesOrganizationDatumHook)
	}
}

// One returns a single sapProductMasterSalesOrganizationDatum record from the query.
func (q sapProductMasterSalesOrganizationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterSalesOrganizationDatum, error) {
	o := &SapProductMasterSalesOrganizationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_sales_organization_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterSalesOrganizationDatum records from the query.
func (q sapProductMasterSalesOrganizationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterSalesOrganizationDatumSlice, error) {
	var o []*SapProductMasterSalesOrganizationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterSalesOrganizationDatum slice")
	}

	if len(sapProductMasterSalesOrganizationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterSalesOrganizationDatum records in the query.
func (q sapProductMasterSalesOrganizationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_sales_organization_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterSalesOrganizationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_sales_organization_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterSalesOrganizationDatum) ProductSapProductMasterGeneralDatum(mods ...qm.QueryMod) sapProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_general_data`")

	return query
}

// LoadProductSapProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterSalesOrganizationDatumL) LoadProductSapProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterSalesOrganizationDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterSalesOrganizationDatum
	var object *SapProductMasterSalesOrganizationDatum

	if singular {
		object = maybeSapProductMasterSalesOrganizationDatum.(*SapProductMasterSalesOrganizationDatum)
	} else {
		slice = *maybeSapProductMasterSalesOrganizationDatum.(*[]*SapProductMasterSalesOrganizationDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterSalesOrganizationDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterSalesOrganizationDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_general_data`),
		qm.WhereIn(`sap_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterGeneralDatum")
	}

	var resultSlice []*SapProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_general_data")
	}

	if len(sapProductMasterSalesOrganizationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterSalesOrganizationData = append(foreign.R.ProductSapProductMasterSalesOrganizationData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterSalesOrganizationData = append(foreign.R.ProductSapProductMasterSalesOrganizationData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterGeneralDatum of the sapProductMasterSalesOrganizationDatum to the related item.
// Sets o.R.ProductSapProductMasterGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterSalesOrganizationData.
func (o *SapProductMasterSalesOrganizationDatum) SetProductSapProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_sales_organization_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.ProductSalesOrg, o.ProductDistributionChnl}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterSalesOrganizationDatumR{
			ProductSapProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterGeneralDatumR{
			ProductSapProductMasterSalesOrganizationData: SapProductMasterSalesOrganizationDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterSalesOrganizationData = append(related.R.ProductSapProductMasterSalesOrganizationData, o)
	}

	return nil
}

// SapProductMasterSalesOrganizationData retrieves all the records using an executor.
func SapProductMasterSalesOrganizationData(mods ...qm.QueryMod) sapProductMasterSalesOrganizationDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_sales_organization_data`"))
	return sapProductMasterSalesOrganizationDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterSalesOrganizationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterSalesOrganizationDatum(ctx context.Context, exec boil.ContextExecutor, product string, productSalesOrg string, productDistributionChnl string, selectCols ...string) (*SapProductMasterSalesOrganizationDatum, error) {
	sapProductMasterSalesOrganizationDatumObj := &SapProductMasterSalesOrganizationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_sales_organization_data` where `Product`=? AND `ProductSalesOrg`=? AND `ProductDistributionChnl`=?", sel,
	)

	q := queries.Raw(query, product, productSalesOrg, productDistributionChnl)

	err := q.Bind(ctx, exec, sapProductMasterSalesOrganizationDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_sales_organization_data")
	}

	if err = sapProductMasterSalesOrganizationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterSalesOrganizationDatumObj, err
	}

	return sapProductMasterSalesOrganizationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterSalesOrganizationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_sales_organization_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterSalesOrganizationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterSalesOrganizationDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterSalesOrganizationDatumInsertCache[key]
	sapProductMasterSalesOrganizationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterSalesOrganizationDatumAllColumns,
			sapProductMasterSalesOrganizationDatumColumnsWithDefault,
			sapProductMasterSalesOrganizationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_sales_organization_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_sales_organization_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_sales_organization_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_sales_organization_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.ProductSalesOrg,
		o.ProductDistributionChnl,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_sales_organization_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterSalesOrganizationDatumInsertCacheMut.Lock()
		sapProductMasterSalesOrganizationDatumInsertCache[key] = cache
		sapProductMasterSalesOrganizationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterSalesOrganizationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterSalesOrganizationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterSalesOrganizationDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterSalesOrganizationDatumUpdateCache[key]
	sapProductMasterSalesOrganizationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterSalesOrganizationDatumAllColumns,
			sapProductMasterSalesOrganizationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_sales_organization_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_sales_organization_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, append(wl, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_sales_organization_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_sales_organization_data")
	}

	if !cached {
		sapProductMasterSalesOrganizationDatumUpdateCacheMut.Lock()
		sapProductMasterSalesOrganizationDatumUpdateCache[key] = cache
		sapProductMasterSalesOrganizationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterSalesOrganizationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_sales_organization_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_sales_organization_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterSalesOrganizationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterSalesOrganizationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_sales_organization_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterSalesOrganizationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterSalesOrganizationDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterSalesOrganizationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterSalesOrganizationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_sales_organization_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterSalesOrganizationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterSalesOrganizationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterSalesOrganizationDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterSalesOrganizationDatumUpsertCache[key]
	sapProductMasterSalesOrganizationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterSalesOrganizationDatumAllColumns,
			sapProductMasterSalesOrganizationDatumColumnsWithDefault,
			sapProductMasterSalesOrganizationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterSalesOrganizationDatumAllColumns,
			sapProductMasterSalesOrganizationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_sales_organization_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_sales_organization_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_sales_organization_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_sales_organization_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterSalesOrganizationDatumType, sapProductMasterSalesOrganizationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_sales_organization_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_sales_organization_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterSalesOrganizationDatumUpsertCacheMut.Lock()
		sapProductMasterSalesOrganizationDatumUpsertCache[key] = cache
		sapProductMasterSalesOrganizationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterSalesOrganizationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterSalesOrganizationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterSalesOrganizationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterSalesOrganizationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_sales_organization_data` WHERE `Product`=? AND `ProductSalesOrg`=? AND `ProductDistributionChnl`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_sales_organization_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_sales_organization_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterSalesOrganizationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterSalesOrganizationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_sales_organization_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_sales_organization_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterSalesOrganizationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterSalesOrganizationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterSalesOrganizationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_sales_organization_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterSalesOrganizationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_sales_organization_data")
	}

	if len(sapProductMasterSalesOrganizationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterSalesOrganizationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterSalesOrganizationDatum(ctx, exec, o.Product, o.ProductSalesOrg, o.ProductDistributionChnl)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterSalesOrganizationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterSalesOrganizationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterSalesOrganizationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_sales_organization_data`.* FROM `sap_product_master_sales_organization_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterSalesOrganizationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterSalesOrganizationDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterSalesOrganizationDatumExists checks if the SapProductMasterSalesOrganizationDatum row exists.
func SapProductMasterSalesOrganizationDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, productSalesOrg string, productDistributionChnl string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_sales_organization_data` where `Product`=? AND `ProductSalesOrg`=? AND `ProductDistributionChnl`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, productSalesOrg, productDistributionChnl)
	}
	row := exec.QueryRowContext(ctx, sql, product, productSalesOrg, productDistributionChnl)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_sales_organization_data exists")
	}

	return exists, nil
}
