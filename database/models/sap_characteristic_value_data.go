// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCharacteristicValueDatum is an object representing the database table.
type SapCharacteristicValueDatum struct {
	CharcInternalID           string      `boil:"CharcInternalID" json:"CharcInternalID" toml:"CharcInternalID" yaml:"CharcInternalID"`
	CharcValuePositionNumber  string      `boil:"CharcValuePositionNumber" json:"CharcValuePositionNumber" toml:"CharcValuePositionNumber" yaml:"CharcValuePositionNumber"`
	DeleteMC                  null.Bool   `boil:"Delete_mc" json:"Delete_mc,omitempty" toml:"Delete_mc" yaml:"Delete_mc,omitempty"`
	UpdateMC                  null.Bool   `boil:"Update_mc" json:"Update_mc,omitempty" toml:"Update_mc" yaml:"Update_mc,omitempty"`
	ToCharcValueDescOc        null.Bool   `boil:"to_CharcValueDesc_oc" json:"to_CharcValueDesc_oc,omitempty" toml:"to_CharcValueDesc_oc" yaml:"to_CharcValueDesc_oc,omitempty"`
	CharcValueDependency      null.String `boil:"CharcValueDependency" json:"CharcValueDependency,omitempty" toml:"CharcValueDependency" yaml:"CharcValueDependency,omitempty"`
	CharcValue                null.String `boil:"CharcValue" json:"CharcValue,omitempty" toml:"CharcValue" yaml:"CharcValue,omitempty"`
	CharcFromNumericValue     null.String `boil:"CharcFromNumericValue" json:"CharcFromNumericValue,omitempty" toml:"CharcFromNumericValue" yaml:"CharcFromNumericValue,omitempty"`
	CharcToNumericValue       null.String `boil:"CharcToNumericValue" json:"CharcToNumericValue,omitempty" toml:"CharcToNumericValue" yaml:"CharcToNumericValue,omitempty"`
	IsDefaultValue            null.Bool   `boil:"IsDefaultValue" json:"IsDefaultValue,omitempty" toml:"IsDefaultValue" yaml:"IsDefaultValue,omitempty"`
	CharcFromNumericValueUnit null.String `boil:"CharcFromNumericValueUnit" json:"CharcFromNumericValueUnit,omitempty" toml:"CharcFromNumericValueUnit" yaml:"CharcFromNumericValueUnit,omitempty"`
	CharcToNumericValueUnit   null.String `boil:"CharcToNumericValueUnit" json:"CharcToNumericValueUnit,omitempty" toml:"CharcToNumericValueUnit" yaml:"CharcToNumericValueUnit,omitempty"`
	LongTextID                null.String `boil:"LongTextID" json:"LongTextID,omitempty" toml:"LongTextID" yaml:"LongTextID,omitempty"`
	ChangeNumber              null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	DocumentType              null.String `boil:"DocumentType" json:"DocumentType,omitempty" toml:"DocumentType" yaml:"DocumentType,omitempty"`
	DocNumber                 null.String `boil:"DocNumber" json:"DocNumber,omitempty" toml:"DocNumber" yaml:"DocNumber,omitempty"`
	DocumentPart              null.String `boil:"DocumentPart" json:"DocumentPart,omitempty" toml:"DocumentPart" yaml:"DocumentPart,omitempty"`
	DocumentVersion           null.String `boil:"DocumentVersion" json:"DocumentVersion,omitempty" toml:"DocumentVersion" yaml:"DocumentVersion,omitempty"`
	ValidityStartDate         null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate           null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	KeyDate                   null.String `boil:"KeyDate" json:"KeyDate,omitempty" toml:"KeyDate" yaml:"KeyDate,omitempty"`
	CharcLastChangedDateTime  null.String `boil:"CharcLastChangedDateTime" json:"CharcLastChangedDateTime,omitempty" toml:"CharcLastChangedDateTime" yaml:"CharcLastChangedDateTime,omitempty"`

	R *sapCharacteristicValueDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCharacteristicValueDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCharacteristicValueDatumColumns = struct {
	CharcInternalID           string
	CharcValuePositionNumber  string
	DeleteMC                  string
	UpdateMC                  string
	ToCharcValueDescOc        string
	CharcValueDependency      string
	CharcValue                string
	CharcFromNumericValue     string
	CharcToNumericValue       string
	IsDefaultValue            string
	CharcFromNumericValueUnit string
	CharcToNumericValueUnit   string
	LongTextID                string
	ChangeNumber              string
	DocumentType              string
	DocNumber                 string
	DocumentPart              string
	DocumentVersion           string
	ValidityStartDate         string
	ValidityEndDate           string
	KeyDate                   string
	CharcLastChangedDateTime  string
}{
	CharcInternalID:           "CharcInternalID",
	CharcValuePositionNumber:  "CharcValuePositionNumber",
	DeleteMC:                  "Delete_mc",
	UpdateMC:                  "Update_mc",
	ToCharcValueDescOc:        "to_CharcValueDesc_oc",
	CharcValueDependency:      "CharcValueDependency",
	CharcValue:                "CharcValue",
	CharcFromNumericValue:     "CharcFromNumericValue",
	CharcToNumericValue:       "CharcToNumericValue",
	IsDefaultValue:            "IsDefaultValue",
	CharcFromNumericValueUnit: "CharcFromNumericValueUnit",
	CharcToNumericValueUnit:   "CharcToNumericValueUnit",
	LongTextID:                "LongTextID",
	ChangeNumber:              "ChangeNumber",
	DocumentType:              "DocumentType",
	DocNumber:                 "DocNumber",
	DocumentPart:              "DocumentPart",
	DocumentVersion:           "DocumentVersion",
	ValidityStartDate:         "ValidityStartDate",
	ValidityEndDate:           "ValidityEndDate",
	KeyDate:                   "KeyDate",
	CharcLastChangedDateTime:  "CharcLastChangedDateTime",
}

var SapCharacteristicValueDatumTableColumns = struct {
	CharcInternalID           string
	CharcValuePositionNumber  string
	DeleteMC                  string
	UpdateMC                  string
	ToCharcValueDescOc        string
	CharcValueDependency      string
	CharcValue                string
	CharcFromNumericValue     string
	CharcToNumericValue       string
	IsDefaultValue            string
	CharcFromNumericValueUnit string
	CharcToNumericValueUnit   string
	LongTextID                string
	ChangeNumber              string
	DocumentType              string
	DocNumber                 string
	DocumentPart              string
	DocumentVersion           string
	ValidityStartDate         string
	ValidityEndDate           string
	KeyDate                   string
	CharcLastChangedDateTime  string
}{
	CharcInternalID:           "sap_characteristic_value_data.CharcInternalID",
	CharcValuePositionNumber:  "sap_characteristic_value_data.CharcValuePositionNumber",
	DeleteMC:                  "sap_characteristic_value_data.Delete_mc",
	UpdateMC:                  "sap_characteristic_value_data.Update_mc",
	ToCharcValueDescOc:        "sap_characteristic_value_data.to_CharcValueDesc_oc",
	CharcValueDependency:      "sap_characteristic_value_data.CharcValueDependency",
	CharcValue:                "sap_characteristic_value_data.CharcValue",
	CharcFromNumericValue:     "sap_characteristic_value_data.CharcFromNumericValue",
	CharcToNumericValue:       "sap_characteristic_value_data.CharcToNumericValue",
	IsDefaultValue:            "sap_characteristic_value_data.IsDefaultValue",
	CharcFromNumericValueUnit: "sap_characteristic_value_data.CharcFromNumericValueUnit",
	CharcToNumericValueUnit:   "sap_characteristic_value_data.CharcToNumericValueUnit",
	LongTextID:                "sap_characteristic_value_data.LongTextID",
	ChangeNumber:              "sap_characteristic_value_data.ChangeNumber",
	DocumentType:              "sap_characteristic_value_data.DocumentType",
	DocNumber:                 "sap_characteristic_value_data.DocNumber",
	DocumentPart:              "sap_characteristic_value_data.DocumentPart",
	DocumentVersion:           "sap_characteristic_value_data.DocumentVersion",
	ValidityStartDate:         "sap_characteristic_value_data.ValidityStartDate",
	ValidityEndDate:           "sap_characteristic_value_data.ValidityEndDate",
	KeyDate:                   "sap_characteristic_value_data.KeyDate",
	CharcLastChangedDateTime:  "sap_characteristic_value_data.CharcLastChangedDateTime",
}

// Generated where

var SapCharacteristicValueDatumWhere = struct {
	CharcInternalID           whereHelperstring
	CharcValuePositionNumber  whereHelperstring
	DeleteMC                  whereHelpernull_Bool
	UpdateMC                  whereHelpernull_Bool
	ToCharcValueDescOc        whereHelpernull_Bool
	CharcValueDependency      whereHelpernull_String
	CharcValue                whereHelpernull_String
	CharcFromNumericValue     whereHelpernull_String
	CharcToNumericValue       whereHelpernull_String
	IsDefaultValue            whereHelpernull_Bool
	CharcFromNumericValueUnit whereHelpernull_String
	CharcToNumericValueUnit   whereHelpernull_String
	LongTextID                whereHelpernull_String
	ChangeNumber              whereHelpernull_String
	DocumentType              whereHelpernull_String
	DocNumber                 whereHelpernull_String
	DocumentPart              whereHelpernull_String
	DocumentVersion           whereHelpernull_String
	ValidityStartDate         whereHelpernull_String
	ValidityEndDate           whereHelpernull_String
	KeyDate                   whereHelpernull_String
	CharcLastChangedDateTime  whereHelpernull_String
}{
	CharcInternalID:           whereHelperstring{field: "`sap_characteristic_value_data`.`CharcInternalID`"},
	CharcValuePositionNumber:  whereHelperstring{field: "`sap_characteristic_value_data`.`CharcValuePositionNumber`"},
	DeleteMC:                  whereHelpernull_Bool{field: "`sap_characteristic_value_data`.`Delete_mc`"},
	UpdateMC:                  whereHelpernull_Bool{field: "`sap_characteristic_value_data`.`Update_mc`"},
	ToCharcValueDescOc:        whereHelpernull_Bool{field: "`sap_characteristic_value_data`.`to_CharcValueDesc_oc`"},
	CharcValueDependency:      whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcValueDependency`"},
	CharcValue:                whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcValue`"},
	CharcFromNumericValue:     whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcFromNumericValue`"},
	CharcToNumericValue:       whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcToNumericValue`"},
	IsDefaultValue:            whereHelpernull_Bool{field: "`sap_characteristic_value_data`.`IsDefaultValue`"},
	CharcFromNumericValueUnit: whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcFromNumericValueUnit`"},
	CharcToNumericValueUnit:   whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcToNumericValueUnit`"},
	LongTextID:                whereHelpernull_String{field: "`sap_characteristic_value_data`.`LongTextID`"},
	ChangeNumber:              whereHelpernull_String{field: "`sap_characteristic_value_data`.`ChangeNumber`"},
	DocumentType:              whereHelpernull_String{field: "`sap_characteristic_value_data`.`DocumentType`"},
	DocNumber:                 whereHelpernull_String{field: "`sap_characteristic_value_data`.`DocNumber`"},
	DocumentPart:              whereHelpernull_String{field: "`sap_characteristic_value_data`.`DocumentPart`"},
	DocumentVersion:           whereHelpernull_String{field: "`sap_characteristic_value_data`.`DocumentVersion`"},
	ValidityStartDate:         whereHelpernull_String{field: "`sap_characteristic_value_data`.`ValidityStartDate`"},
	ValidityEndDate:           whereHelpernull_String{field: "`sap_characteristic_value_data`.`ValidityEndDate`"},
	KeyDate:                   whereHelpernull_String{field: "`sap_characteristic_value_data`.`KeyDate`"},
	CharcLastChangedDateTime:  whereHelpernull_String{field: "`sap_characteristic_value_data`.`CharcLastChangedDateTime`"},
}

// SapCharacteristicValueDatumRels is where relationship names are stored.
var SapCharacteristicValueDatumRels = struct {
	CharcInternalIDSapCharacteristicCharacteristicDatum string
}{
	CharcInternalIDSapCharacteristicCharacteristicDatum: "CharcInternalIDSapCharacteristicCharacteristicDatum",
}

// sapCharacteristicValueDatumR is where relationships are stored.
type sapCharacteristicValueDatumR struct {
	CharcInternalIDSapCharacteristicCharacteristicDatum *SapCharacteristicCharacteristicDatum `boil:"CharcInternalIDSapCharacteristicCharacteristicDatum" json:"CharcInternalIDSapCharacteristicCharacteristicDatum" toml:"CharcInternalIDSapCharacteristicCharacteristicDatum" yaml:"CharcInternalIDSapCharacteristicCharacteristicDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCharacteristicValueDatumR) NewStruct() *sapCharacteristicValueDatumR {
	return &sapCharacteristicValueDatumR{}
}

func (r *sapCharacteristicValueDatumR) GetCharcInternalIDSapCharacteristicCharacteristicDatum() *SapCharacteristicCharacteristicDatum {
	if r == nil {
		return nil
	}
	return r.CharcInternalIDSapCharacteristicCharacteristicDatum
}

// sapCharacteristicValueDatumL is where Load methods for each relationship are stored.
type sapCharacteristicValueDatumL struct{}

var (
	sapCharacteristicValueDatumAllColumns            = []string{"CharcInternalID", "CharcValuePositionNumber", "Delete_mc", "Update_mc", "to_CharcValueDesc_oc", "CharcValueDependency", "CharcValue", "CharcFromNumericValue", "CharcToNumericValue", "IsDefaultValue", "CharcFromNumericValueUnit", "CharcToNumericValueUnit", "LongTextID", "ChangeNumber", "DocumentType", "DocNumber", "DocumentPart", "DocumentVersion", "ValidityStartDate", "ValidityEndDate", "KeyDate", "CharcLastChangedDateTime"}
	sapCharacteristicValueDatumColumnsWithoutDefault = []string{"CharcInternalID", "CharcValuePositionNumber", "Delete_mc", "Update_mc", "to_CharcValueDesc_oc", "CharcValueDependency", "CharcValue", "CharcFromNumericValue", "CharcToNumericValue", "IsDefaultValue", "CharcFromNumericValueUnit", "CharcToNumericValueUnit", "LongTextID", "ChangeNumber", "DocumentType", "DocNumber", "DocumentPart", "DocumentVersion", "ValidityStartDate", "ValidityEndDate", "KeyDate", "CharcLastChangedDateTime"}
	sapCharacteristicValueDatumColumnsWithDefault    = []string{}
	sapCharacteristicValueDatumPrimaryKeyColumns     = []string{"CharcInternalID", "CharcValuePositionNumber"}
	sapCharacteristicValueDatumGeneratedColumns      = []string{}
)

type (
	// SapCharacteristicValueDatumSlice is an alias for a slice of pointers to SapCharacteristicValueDatum.
	// This should almost always be used instead of []SapCharacteristicValueDatum.
	SapCharacteristicValueDatumSlice []*SapCharacteristicValueDatum
	// SapCharacteristicValueDatumHook is the signature for custom SapCharacteristicValueDatum hook methods
	SapCharacteristicValueDatumHook func(context.Context, boil.ContextExecutor, *SapCharacteristicValueDatum) error

	sapCharacteristicValueDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCharacteristicValueDatumType                 = reflect.TypeOf(&SapCharacteristicValueDatum{})
	sapCharacteristicValueDatumMapping              = queries.MakeStructMapping(sapCharacteristicValueDatumType)
	sapCharacteristicValueDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, sapCharacteristicValueDatumPrimaryKeyColumns)
	sapCharacteristicValueDatumInsertCacheMut       sync.RWMutex
	sapCharacteristicValueDatumInsertCache          = make(map[string]insertCache)
	sapCharacteristicValueDatumUpdateCacheMut       sync.RWMutex
	sapCharacteristicValueDatumUpdateCache          = make(map[string]updateCache)
	sapCharacteristicValueDatumUpsertCacheMut       sync.RWMutex
	sapCharacteristicValueDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCharacteristicValueDatumAfterSelectHooks []SapCharacteristicValueDatumHook

var sapCharacteristicValueDatumBeforeInsertHooks []SapCharacteristicValueDatumHook
var sapCharacteristicValueDatumAfterInsertHooks []SapCharacteristicValueDatumHook

var sapCharacteristicValueDatumBeforeUpdateHooks []SapCharacteristicValueDatumHook
var sapCharacteristicValueDatumAfterUpdateHooks []SapCharacteristicValueDatumHook

var sapCharacteristicValueDatumBeforeDeleteHooks []SapCharacteristicValueDatumHook
var sapCharacteristicValueDatumAfterDeleteHooks []SapCharacteristicValueDatumHook

var sapCharacteristicValueDatumBeforeUpsertHooks []SapCharacteristicValueDatumHook
var sapCharacteristicValueDatumAfterUpsertHooks []SapCharacteristicValueDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCharacteristicValueDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCharacteristicValueDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCharacteristicValueDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCharacteristicValueDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCharacteristicValueDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCharacteristicValueDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCharacteristicValueDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCharacteristicValueDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCharacteristicValueDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCharacteristicValueDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCharacteristicValueDatumHook registers your hook function for all future operations.
func AddSapCharacteristicValueDatumHook(hookPoint boil.HookPoint, sapCharacteristicValueDatumHook SapCharacteristicValueDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCharacteristicValueDatumAfterSelectHooks = append(sapCharacteristicValueDatumAfterSelectHooks, sapCharacteristicValueDatumHook)
	case boil.BeforeInsertHook:
		sapCharacteristicValueDatumBeforeInsertHooks = append(sapCharacteristicValueDatumBeforeInsertHooks, sapCharacteristicValueDatumHook)
	case boil.AfterInsertHook:
		sapCharacteristicValueDatumAfterInsertHooks = append(sapCharacteristicValueDatumAfterInsertHooks, sapCharacteristicValueDatumHook)
	case boil.BeforeUpdateHook:
		sapCharacteristicValueDatumBeforeUpdateHooks = append(sapCharacteristicValueDatumBeforeUpdateHooks, sapCharacteristicValueDatumHook)
	case boil.AfterUpdateHook:
		sapCharacteristicValueDatumAfterUpdateHooks = append(sapCharacteristicValueDatumAfterUpdateHooks, sapCharacteristicValueDatumHook)
	case boil.BeforeDeleteHook:
		sapCharacteristicValueDatumBeforeDeleteHooks = append(sapCharacteristicValueDatumBeforeDeleteHooks, sapCharacteristicValueDatumHook)
	case boil.AfterDeleteHook:
		sapCharacteristicValueDatumAfterDeleteHooks = append(sapCharacteristicValueDatumAfterDeleteHooks, sapCharacteristicValueDatumHook)
	case boil.BeforeUpsertHook:
		sapCharacteristicValueDatumBeforeUpsertHooks = append(sapCharacteristicValueDatumBeforeUpsertHooks, sapCharacteristicValueDatumHook)
	case boil.AfterUpsertHook:
		sapCharacteristicValueDatumAfterUpsertHooks = append(sapCharacteristicValueDatumAfterUpsertHooks, sapCharacteristicValueDatumHook)
	}
}

// One returns a single sapCharacteristicValueDatum record from the query.
func (q sapCharacteristicValueDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCharacteristicValueDatum, error) {
	o := &SapCharacteristicValueDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_characteristic_value_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCharacteristicValueDatum records from the query.
func (q sapCharacteristicValueDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCharacteristicValueDatumSlice, error) {
	var o []*SapCharacteristicValueDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCharacteristicValueDatum slice")
	}

	if len(sapCharacteristicValueDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCharacteristicValueDatum records in the query.
func (q sapCharacteristicValueDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_characteristic_value_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCharacteristicValueDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_characteristic_value_data exists")
	}

	return count > 0, nil
}

// CharcInternalIDSapCharacteristicCharacteristicDatum pointed to by the foreign key.
func (o *SapCharacteristicValueDatum) CharcInternalIDSapCharacteristicCharacteristicDatum(mods ...qm.QueryMod) sapCharacteristicCharacteristicDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CharcInternalID` = ?", o.CharcInternalID),
	}

	queryMods = append(queryMods, mods...)

	return SapCharacteristicCharacteristicData(queryMods...)
}

// LoadCharcInternalIDSapCharacteristicCharacteristicDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCharacteristicValueDatumL) LoadCharcInternalIDSapCharacteristicCharacteristicDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCharacteristicValueDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCharacteristicValueDatum
	var object *SapCharacteristicValueDatum

	if singular {
		object = maybeSapCharacteristicValueDatum.(*SapCharacteristicValueDatum)
	} else {
		slice = *maybeSapCharacteristicValueDatum.(*[]*SapCharacteristicValueDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCharacteristicValueDatumR{}
		}
		args = append(args, object.CharcInternalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCharacteristicValueDatumR{}
			}

			for _, a := range args {
				if a == obj.CharcInternalID {
					continue Outer
				}
			}

			args = append(args, obj.CharcInternalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_characteristic_characteristic_data`),
		qm.WhereIn(`sap_characteristic_characteristic_data.CharcInternalID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCharacteristicCharacteristicDatum")
	}

	var resultSlice []*SapCharacteristicCharacteristicDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCharacteristicCharacteristicDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_characteristic_characteristic_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_characteristic_characteristic_data")
	}

	if len(sapCharacteristicValueDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CharcInternalIDSapCharacteristicCharacteristicDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCharacteristicCharacteristicDatumR{}
		}
		foreign.R.CharcInternalIDSapCharacteristicValueData = append(foreign.R.CharcInternalIDSapCharacteristicValueData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CharcInternalID == foreign.CharcInternalID {
				local.R.CharcInternalIDSapCharacteristicCharacteristicDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCharacteristicCharacteristicDatumR{}
				}
				foreign.R.CharcInternalIDSapCharacteristicValueData = append(foreign.R.CharcInternalIDSapCharacteristicValueData, local)
				break
			}
		}
	}

	return nil
}

// SetCharcInternalIDSapCharacteristicCharacteristicDatum of the sapCharacteristicValueDatum to the related item.
// Sets o.R.CharcInternalIDSapCharacteristicCharacteristicDatum to related.
// Adds o to related.R.CharcInternalIDSapCharacteristicValueData.
func (o *SapCharacteristicValueDatum) SetCharcInternalIDSapCharacteristicCharacteristicDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCharacteristicCharacteristicDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_characteristic_value_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CharcInternalID"}),
		strmangle.WhereClause("`", "`", 0, sapCharacteristicValueDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CharcInternalID, o.CharcInternalID, o.CharcValuePositionNumber}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CharcInternalID = related.CharcInternalID
	if o.R == nil {
		o.R = &sapCharacteristicValueDatumR{
			CharcInternalIDSapCharacteristicCharacteristicDatum: related,
		}
	} else {
		o.R.CharcInternalIDSapCharacteristicCharacteristicDatum = related
	}

	if related.R == nil {
		related.R = &sapCharacteristicCharacteristicDatumR{
			CharcInternalIDSapCharacteristicValueData: SapCharacteristicValueDatumSlice{o},
		}
	} else {
		related.R.CharcInternalIDSapCharacteristicValueData = append(related.R.CharcInternalIDSapCharacteristicValueData, o)
	}

	return nil
}

// SapCharacteristicValueData retrieves all the records using an executor.
func SapCharacteristicValueData(mods ...qm.QueryMod) sapCharacteristicValueDatumQuery {
	mods = append(mods, qm.From("`sap_characteristic_value_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_characteristic_value_data`.*"})
	}

	return sapCharacteristicValueDatumQuery{q}
}

// FindSapCharacteristicValueDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCharacteristicValueDatum(ctx context.Context, exec boil.ContextExecutor, charcInternalID string, charcValuePositionNumber string, selectCols ...string) (*SapCharacteristicValueDatum, error) {
	sapCharacteristicValueDatumObj := &SapCharacteristicValueDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_characteristic_value_data` where `CharcInternalID`=? AND `CharcValuePositionNumber`=?", sel,
	)

	q := queries.Raw(query, charcInternalID, charcValuePositionNumber)

	err := q.Bind(ctx, exec, sapCharacteristicValueDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_characteristic_value_data")
	}

	if err = sapCharacteristicValueDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCharacteristicValueDatumObj, err
	}

	return sapCharacteristicValueDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCharacteristicValueDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_characteristic_value_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCharacteristicValueDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCharacteristicValueDatumInsertCacheMut.RLock()
	cache, cached := sapCharacteristicValueDatumInsertCache[key]
	sapCharacteristicValueDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCharacteristicValueDatumAllColumns,
			sapCharacteristicValueDatumColumnsWithDefault,
			sapCharacteristicValueDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_characteristic_value_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_characteristic_value_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_characteristic_value_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCharacteristicValueDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_characteristic_value_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CharcInternalID,
		o.CharcValuePositionNumber,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_characteristic_value_data")
	}

CacheNoHooks:
	if !cached {
		sapCharacteristicValueDatumInsertCacheMut.Lock()
		sapCharacteristicValueDatumInsertCache[key] = cache
		sapCharacteristicValueDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCharacteristicValueDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCharacteristicValueDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCharacteristicValueDatumUpdateCacheMut.RLock()
	cache, cached := sapCharacteristicValueDatumUpdateCache[key]
	sapCharacteristicValueDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCharacteristicValueDatumAllColumns,
			sapCharacteristicValueDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_characteristic_value_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_characteristic_value_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCharacteristicValueDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, append(wl, sapCharacteristicValueDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_characteristic_value_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_characteristic_value_data")
	}

	if !cached {
		sapCharacteristicValueDatumUpdateCacheMut.Lock()
		sapCharacteristicValueDatumUpdateCache[key] = cache
		sapCharacteristicValueDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCharacteristicValueDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_characteristic_value_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_characteristic_value_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCharacteristicValueDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCharacteristicValueDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_characteristic_value_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCharacteristicValueDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCharacteristicValueDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCharacteristicValueDatum")
	}
	return rowsAff, nil
}

var mySQLSapCharacteristicValueDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCharacteristicValueDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_characteristic_value_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCharacteristicValueDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCharacteristicValueDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCharacteristicValueDatumUpsertCacheMut.RLock()
	cache, cached := sapCharacteristicValueDatumUpsertCache[key]
	sapCharacteristicValueDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCharacteristicValueDatumAllColumns,
			sapCharacteristicValueDatumColumnsWithDefault,
			sapCharacteristicValueDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCharacteristicValueDatumAllColumns,
			sapCharacteristicValueDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_characteristic_value_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_characteristic_value_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_characteristic_value_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_characteristic_value_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCharacteristicValueDatumType, sapCharacteristicValueDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_characteristic_value_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_characteristic_value_data")
	}

CacheNoHooks:
	if !cached {
		sapCharacteristicValueDatumUpsertCacheMut.Lock()
		sapCharacteristicValueDatumUpsertCache[key] = cache
		sapCharacteristicValueDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCharacteristicValueDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCharacteristicValueDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCharacteristicValueDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCharacteristicValueDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_characteristic_value_data` WHERE `CharcInternalID`=? AND `CharcValuePositionNumber`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_characteristic_value_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_characteristic_value_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCharacteristicValueDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCharacteristicValueDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_characteristic_value_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_characteristic_value_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCharacteristicValueDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCharacteristicValueDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCharacteristicValueDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_characteristic_value_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCharacteristicValueDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCharacteristicValueDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_characteristic_value_data")
	}

	if len(sapCharacteristicValueDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCharacteristicValueDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCharacteristicValueDatum(ctx, exec, o.CharcInternalID, o.CharcValuePositionNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCharacteristicValueDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCharacteristicValueDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCharacteristicValueDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_characteristic_value_data`.* FROM `sap_characteristic_value_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCharacteristicValueDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCharacteristicValueDatumSlice")
	}

	*o = slice

	return nil
}

// SapCharacteristicValueDatumExists checks if the SapCharacteristicValueDatum row exists.
func SapCharacteristicValueDatumExists(ctx context.Context, exec boil.ContextExecutor, charcInternalID string, charcValuePositionNumber string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_characteristic_value_data` where `CharcInternalID`=? AND `CharcValuePositionNumber`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, charcInternalID, charcValuePositionNumber)
	}
	row := exec.QueryRowContext(ctx, sql, charcInternalID, charcValuePositionNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_characteristic_value_data exists")
	}

	return exists, nil
}
