// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapInboundDeliveryAddressDatum is an object representing the database table.
type SapInboundDeliveryAddressDatum struct {
	AddressID              string      `boil:"AddressID" json:"AddressID" toml:"AddressID" yaml:"AddressID"`
	Building               null.String `boil:"Building" json:"Building,omitempty" toml:"Building" yaml:"Building,omitempty"`
	BusinessPartnerName1   null.String `boil:"BusinessPartnerName1" json:"BusinessPartnerName1,omitempty" toml:"BusinessPartnerName1" yaml:"BusinessPartnerName1,omitempty"`
	CityName               null.String `boil:"CityName" json:"CityName,omitempty" toml:"CityName" yaml:"CityName,omitempty"`
	CorrespondenceLanguage null.String `boil:"CorrespondenceLanguage" json:"CorrespondenceLanguage,omitempty" toml:"CorrespondenceLanguage" yaml:"CorrespondenceLanguage,omitempty"`
	Country                null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	FaxNumber              null.String `boil:"FaxNumber" json:"FaxNumber,omitempty" toml:"FaxNumber" yaml:"FaxNumber,omitempty"`
	Nation                 null.String `boil:"Nation" json:"Nation,omitempty" toml:"Nation" yaml:"Nation,omitempty"`
	PhoneNumber            null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	PostalCode             null.String `boil:"PostalCode" json:"PostalCode,omitempty" toml:"PostalCode" yaml:"PostalCode,omitempty"`
	Region                 null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	StreetName             null.String `boil:"StreetName" json:"StreetName,omitempty" toml:"StreetName" yaml:"StreetName,omitempty"`

	R *sapInboundDeliveryAddressDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapInboundDeliveryAddressDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapInboundDeliveryAddressDatumColumns = struct {
	AddressID              string
	Building               string
	BusinessPartnerName1   string
	CityName               string
	CorrespondenceLanguage string
	Country                string
	FaxNumber              string
	Nation                 string
	PhoneNumber            string
	PostalCode             string
	Region                 string
	StreetName             string
}{
	AddressID:              "AddressID",
	Building:               "Building",
	BusinessPartnerName1:   "BusinessPartnerName1",
	CityName:               "CityName",
	CorrespondenceLanguage: "CorrespondenceLanguage",
	Country:                "Country",
	FaxNumber:              "FaxNumber",
	Nation:                 "Nation",
	PhoneNumber:            "PhoneNumber",
	PostalCode:             "PostalCode",
	Region:                 "Region",
	StreetName:             "StreetName",
}

var SapInboundDeliveryAddressDatumTableColumns = struct {
	AddressID              string
	Building               string
	BusinessPartnerName1   string
	CityName               string
	CorrespondenceLanguage string
	Country                string
	FaxNumber              string
	Nation                 string
	PhoneNumber            string
	PostalCode             string
	Region                 string
	StreetName             string
}{
	AddressID:              "sap_inbound_delivery_address_data.AddressID",
	Building:               "sap_inbound_delivery_address_data.Building",
	BusinessPartnerName1:   "sap_inbound_delivery_address_data.BusinessPartnerName1",
	CityName:               "sap_inbound_delivery_address_data.CityName",
	CorrespondenceLanguage: "sap_inbound_delivery_address_data.CorrespondenceLanguage",
	Country:                "sap_inbound_delivery_address_data.Country",
	FaxNumber:              "sap_inbound_delivery_address_data.FaxNumber",
	Nation:                 "sap_inbound_delivery_address_data.Nation",
	PhoneNumber:            "sap_inbound_delivery_address_data.PhoneNumber",
	PostalCode:             "sap_inbound_delivery_address_data.PostalCode",
	Region:                 "sap_inbound_delivery_address_data.Region",
	StreetName:             "sap_inbound_delivery_address_data.StreetName",
}

// Generated where

var SapInboundDeliveryAddressDatumWhere = struct {
	AddressID              whereHelperstring
	Building               whereHelpernull_String
	BusinessPartnerName1   whereHelpernull_String
	CityName               whereHelpernull_String
	CorrespondenceLanguage whereHelpernull_String
	Country                whereHelpernull_String
	FaxNumber              whereHelpernull_String
	Nation                 whereHelpernull_String
	PhoneNumber            whereHelpernull_String
	PostalCode             whereHelpernull_String
	Region                 whereHelpernull_String
	StreetName             whereHelpernull_String
}{
	AddressID:              whereHelperstring{field: "`sap_inbound_delivery_address_data`.`AddressID`"},
	Building:               whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`Building`"},
	BusinessPartnerName1:   whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`BusinessPartnerName1`"},
	CityName:               whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`CityName`"},
	CorrespondenceLanguage: whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`CorrespondenceLanguage`"},
	Country:                whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`Country`"},
	FaxNumber:              whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`FaxNumber`"},
	Nation:                 whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`Nation`"},
	PhoneNumber:            whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`PhoneNumber`"},
	PostalCode:             whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`PostalCode`"},
	Region:                 whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`Region`"},
	StreetName:             whereHelpernull_String{field: "`sap_inbound_delivery_address_data`.`StreetName`"},
}

// SapInboundDeliveryAddressDatumRels is where relationship names are stored.
var SapInboundDeliveryAddressDatumRels = struct {
}{}

// sapInboundDeliveryAddressDatumR is where relationships are stored.
type sapInboundDeliveryAddressDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapInboundDeliveryAddressDatumR) NewStruct() *sapInboundDeliveryAddressDatumR {
	return &sapInboundDeliveryAddressDatumR{}
}

// sapInboundDeliveryAddressDatumL is where Load methods for each relationship are stored.
type sapInboundDeliveryAddressDatumL struct{}

var (
	sapInboundDeliveryAddressDatumAllColumns            = []string{"AddressID", "Building", "BusinessPartnerName1", "CityName", "CorrespondenceLanguage", "Country", "FaxNumber", "Nation", "PhoneNumber", "PostalCode", "Region", "StreetName"}
	sapInboundDeliveryAddressDatumColumnsWithoutDefault = []string{"AddressID", "Building", "BusinessPartnerName1", "CityName", "CorrespondenceLanguage", "Country", "FaxNumber", "Nation", "PhoneNumber", "PostalCode", "Region", "StreetName"}
	sapInboundDeliveryAddressDatumColumnsWithDefault    = []string{}
	sapInboundDeliveryAddressDatumPrimaryKeyColumns     = []string{"AddressID"}
	sapInboundDeliveryAddressDatumGeneratedColumns      = []string{}
)

type (
	// SapInboundDeliveryAddressDatumSlice is an alias for a slice of pointers to SapInboundDeliveryAddressDatum.
	// This should almost always be used instead of []SapInboundDeliveryAddressDatum.
	SapInboundDeliveryAddressDatumSlice []*SapInboundDeliveryAddressDatum
	// SapInboundDeliveryAddressDatumHook is the signature for custom SapInboundDeliveryAddressDatum hook methods
	SapInboundDeliveryAddressDatumHook func(context.Context, boil.ContextExecutor, *SapInboundDeliveryAddressDatum) error

	sapInboundDeliveryAddressDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapInboundDeliveryAddressDatumType                 = reflect.TypeOf(&SapInboundDeliveryAddressDatum{})
	sapInboundDeliveryAddressDatumMapping              = queries.MakeStructMapping(sapInboundDeliveryAddressDatumType)
	sapInboundDeliveryAddressDatumPrimaryKeyMapping, _ = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, sapInboundDeliveryAddressDatumPrimaryKeyColumns)
	sapInboundDeliveryAddressDatumInsertCacheMut       sync.RWMutex
	sapInboundDeliveryAddressDatumInsertCache          = make(map[string]insertCache)
	sapInboundDeliveryAddressDatumUpdateCacheMut       sync.RWMutex
	sapInboundDeliveryAddressDatumUpdateCache          = make(map[string]updateCache)
	sapInboundDeliveryAddressDatumUpsertCacheMut       sync.RWMutex
	sapInboundDeliveryAddressDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapInboundDeliveryAddressDatumAfterSelectHooks []SapInboundDeliveryAddressDatumHook

var sapInboundDeliveryAddressDatumBeforeInsertHooks []SapInboundDeliveryAddressDatumHook
var sapInboundDeliveryAddressDatumAfterInsertHooks []SapInboundDeliveryAddressDatumHook

var sapInboundDeliveryAddressDatumBeforeUpdateHooks []SapInboundDeliveryAddressDatumHook
var sapInboundDeliveryAddressDatumAfterUpdateHooks []SapInboundDeliveryAddressDatumHook

var sapInboundDeliveryAddressDatumBeforeDeleteHooks []SapInboundDeliveryAddressDatumHook
var sapInboundDeliveryAddressDatumAfterDeleteHooks []SapInboundDeliveryAddressDatumHook

var sapInboundDeliveryAddressDatumBeforeUpsertHooks []SapInboundDeliveryAddressDatumHook
var sapInboundDeliveryAddressDatumAfterUpsertHooks []SapInboundDeliveryAddressDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapInboundDeliveryAddressDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapInboundDeliveryAddressDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapInboundDeliveryAddressDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapInboundDeliveryAddressDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapInboundDeliveryAddressDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapInboundDeliveryAddressDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapInboundDeliveryAddressDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapInboundDeliveryAddressDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapInboundDeliveryAddressDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapInboundDeliveryAddressDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapInboundDeliveryAddressDatumHook registers your hook function for all future operations.
func AddSapInboundDeliveryAddressDatumHook(hookPoint boil.HookPoint, sapInboundDeliveryAddressDatumHook SapInboundDeliveryAddressDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapInboundDeliveryAddressDatumAfterSelectHooks = append(sapInboundDeliveryAddressDatumAfterSelectHooks, sapInboundDeliveryAddressDatumHook)
	case boil.BeforeInsertHook:
		sapInboundDeliveryAddressDatumBeforeInsertHooks = append(sapInboundDeliveryAddressDatumBeforeInsertHooks, sapInboundDeliveryAddressDatumHook)
	case boil.AfterInsertHook:
		sapInboundDeliveryAddressDatumAfterInsertHooks = append(sapInboundDeliveryAddressDatumAfterInsertHooks, sapInboundDeliveryAddressDatumHook)
	case boil.BeforeUpdateHook:
		sapInboundDeliveryAddressDatumBeforeUpdateHooks = append(sapInboundDeliveryAddressDatumBeforeUpdateHooks, sapInboundDeliveryAddressDatumHook)
	case boil.AfterUpdateHook:
		sapInboundDeliveryAddressDatumAfterUpdateHooks = append(sapInboundDeliveryAddressDatumAfterUpdateHooks, sapInboundDeliveryAddressDatumHook)
	case boil.BeforeDeleteHook:
		sapInboundDeliveryAddressDatumBeforeDeleteHooks = append(sapInboundDeliveryAddressDatumBeforeDeleteHooks, sapInboundDeliveryAddressDatumHook)
	case boil.AfterDeleteHook:
		sapInboundDeliveryAddressDatumAfterDeleteHooks = append(sapInboundDeliveryAddressDatumAfterDeleteHooks, sapInboundDeliveryAddressDatumHook)
	case boil.BeforeUpsertHook:
		sapInboundDeliveryAddressDatumBeforeUpsertHooks = append(sapInboundDeliveryAddressDatumBeforeUpsertHooks, sapInboundDeliveryAddressDatumHook)
	case boil.AfterUpsertHook:
		sapInboundDeliveryAddressDatumAfterUpsertHooks = append(sapInboundDeliveryAddressDatumAfterUpsertHooks, sapInboundDeliveryAddressDatumHook)
	}
}

// One returns a single sapInboundDeliveryAddressDatum record from the query.
func (q sapInboundDeliveryAddressDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapInboundDeliveryAddressDatum, error) {
	o := &SapInboundDeliveryAddressDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_inbound_delivery_address_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapInboundDeliveryAddressDatum records from the query.
func (q sapInboundDeliveryAddressDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapInboundDeliveryAddressDatumSlice, error) {
	var o []*SapInboundDeliveryAddressDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapInboundDeliveryAddressDatum slice")
	}

	if len(sapInboundDeliveryAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapInboundDeliveryAddressDatum records in the query.
func (q sapInboundDeliveryAddressDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_inbound_delivery_address_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapInboundDeliveryAddressDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_inbound_delivery_address_data exists")
	}

	return count > 0, nil
}

// SapInboundDeliveryAddressData retrieves all the records using an executor.
func SapInboundDeliveryAddressData(mods ...qm.QueryMod) sapInboundDeliveryAddressDatumQuery {
	mods = append(mods, qm.From("`sap_inbound_delivery_address_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_inbound_delivery_address_data`.*"})
	}

	return sapInboundDeliveryAddressDatumQuery{q}
}

// FindSapInboundDeliveryAddressDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapInboundDeliveryAddressDatum(ctx context.Context, exec boil.ContextExecutor, addressID string, selectCols ...string) (*SapInboundDeliveryAddressDatum, error) {
	sapInboundDeliveryAddressDatumObj := &SapInboundDeliveryAddressDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_inbound_delivery_address_data` where `AddressID`=?", sel,
	)

	q := queries.Raw(query, addressID)

	err := q.Bind(ctx, exec, sapInboundDeliveryAddressDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_inbound_delivery_address_data")
	}

	if err = sapInboundDeliveryAddressDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapInboundDeliveryAddressDatumObj, err
	}

	return sapInboundDeliveryAddressDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapInboundDeliveryAddressDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_inbound_delivery_address_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapInboundDeliveryAddressDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapInboundDeliveryAddressDatumInsertCacheMut.RLock()
	cache, cached := sapInboundDeliveryAddressDatumInsertCache[key]
	sapInboundDeliveryAddressDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapInboundDeliveryAddressDatumAllColumns,
			sapInboundDeliveryAddressDatumColumnsWithDefault,
			sapInboundDeliveryAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_inbound_delivery_address_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_inbound_delivery_address_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_inbound_delivery_address_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapInboundDeliveryAddressDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_inbound_delivery_address_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AddressID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_inbound_delivery_address_data")
	}

CacheNoHooks:
	if !cached {
		sapInboundDeliveryAddressDatumInsertCacheMut.Lock()
		sapInboundDeliveryAddressDatumInsertCache[key] = cache
		sapInboundDeliveryAddressDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapInboundDeliveryAddressDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapInboundDeliveryAddressDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapInboundDeliveryAddressDatumUpdateCacheMut.RLock()
	cache, cached := sapInboundDeliveryAddressDatumUpdateCache[key]
	sapInboundDeliveryAddressDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapInboundDeliveryAddressDatumAllColumns,
			sapInboundDeliveryAddressDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_inbound_delivery_address_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_inbound_delivery_address_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapInboundDeliveryAddressDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, append(wl, sapInboundDeliveryAddressDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_inbound_delivery_address_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_inbound_delivery_address_data")
	}

	if !cached {
		sapInboundDeliveryAddressDatumUpdateCacheMut.Lock()
		sapInboundDeliveryAddressDatumUpdateCache[key] = cache
		sapInboundDeliveryAddressDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapInboundDeliveryAddressDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_inbound_delivery_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_inbound_delivery_address_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapInboundDeliveryAddressDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_inbound_delivery_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryAddressDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapInboundDeliveryAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapInboundDeliveryAddressDatum")
	}
	return rowsAff, nil
}

var mySQLSapInboundDeliveryAddressDatumUniqueColumns = []string{
	"AddressID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapInboundDeliveryAddressDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_inbound_delivery_address_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapInboundDeliveryAddressDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapInboundDeliveryAddressDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapInboundDeliveryAddressDatumUpsertCacheMut.RLock()
	cache, cached := sapInboundDeliveryAddressDatumUpsertCache[key]
	sapInboundDeliveryAddressDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapInboundDeliveryAddressDatumAllColumns,
			sapInboundDeliveryAddressDatumColumnsWithDefault,
			sapInboundDeliveryAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapInboundDeliveryAddressDatumAllColumns,
			sapInboundDeliveryAddressDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_inbound_delivery_address_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_inbound_delivery_address_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_inbound_delivery_address_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_inbound_delivery_address_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapInboundDeliveryAddressDatumType, sapInboundDeliveryAddressDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_inbound_delivery_address_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_inbound_delivery_address_data")
	}

CacheNoHooks:
	if !cached {
		sapInboundDeliveryAddressDatumUpsertCacheMut.Lock()
		sapInboundDeliveryAddressDatumUpsertCache[key] = cache
		sapInboundDeliveryAddressDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapInboundDeliveryAddressDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapInboundDeliveryAddressDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapInboundDeliveryAddressDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapInboundDeliveryAddressDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_inbound_delivery_address_data` WHERE `AddressID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_inbound_delivery_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_inbound_delivery_address_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapInboundDeliveryAddressDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapInboundDeliveryAddressDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_inbound_delivery_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_inbound_delivery_address_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapInboundDeliveryAddressDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapInboundDeliveryAddressDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_inbound_delivery_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryAddressDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapInboundDeliveryAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_inbound_delivery_address_data")
	}

	if len(sapInboundDeliveryAddressDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapInboundDeliveryAddressDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapInboundDeliveryAddressDatum(ctx, exec, o.AddressID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapInboundDeliveryAddressDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapInboundDeliveryAddressDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapInboundDeliveryAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_inbound_delivery_address_data`.* FROM `sap_inbound_delivery_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapInboundDeliveryAddressDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapInboundDeliveryAddressDatumSlice")
	}

	*o = slice

	return nil
}

// SapInboundDeliveryAddressDatumExists checks if the SapInboundDeliveryAddressDatum row exists.
func SapInboundDeliveryAddressDatumExists(ctx context.Context, exec boil.ContextExecutor, addressID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_inbound_delivery_address_data` where `AddressID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, addressID)
	}
	row := exec.QueryRowContext(ctx, sql, addressID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_inbound_delivery_address_data exists")
	}

	return exists, nil
}
