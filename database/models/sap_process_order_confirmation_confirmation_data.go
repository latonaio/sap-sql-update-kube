// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProcessOrderConfirmationConfirmationDatum is an object representing the database table.
type SapProcessOrderConfirmationConfirmationDatum struct {
	OrderID                        string      `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	ConfirmationGroup              null.String `boil:"ConfirmationGroup" json:"ConfirmationGroup,omitempty" toml:"ConfirmationGroup" yaml:"ConfirmationGroup,omitempty"`
	ConfirmationCount              null.String `boil:"ConfirmationCount" json:"ConfirmationCount,omitempty" toml:"ConfirmationCount" yaml:"ConfirmationCount,omitempty"`
	OrderOperation                 null.String `boil:"OrderOperation" json:"OrderOperation,omitempty" toml:"OrderOperation" yaml:"OrderOperation,omitempty"`
	OrderSuboperation              null.String `boil:"OrderSuboperation" json:"OrderSuboperation,omitempty" toml:"OrderSuboperation" yaml:"OrderSuboperation,omitempty"`
	OrderType                      null.String `boil:"OrderType" json:"OrderType,omitempty" toml:"OrderType" yaml:"OrderType,omitempty"`
	OrderOperationInternalID       null.String `boil:"OrderOperationInternalID" json:"OrderOperationInternalID,omitempty" toml:"OrderOperationInternalID" yaml:"OrderOperationInternalID,omitempty"`
	ConfirmationText               null.String `boil:"ConfirmationText" json:"ConfirmationText,omitempty" toml:"ConfirmationText" yaml:"ConfirmationText,omitempty"`
	Language                       null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	OrderPlannedTotalQty           null.String `boil:"OrderPlannedTotalQty" json:"OrderPlannedTotalQty,omitempty" toml:"OrderPlannedTotalQty" yaml:"OrderPlannedTotalQty,omitempty"`
	ProductionUnit                 null.String `boil:"ProductionUnit" json:"ProductionUnit,omitempty" toml:"ProductionUnit" yaml:"ProductionUnit,omitempty"`
	FinalConfirmationType          null.String `boil:"FinalConfirmationType" json:"FinalConfirmationType,omitempty" toml:"FinalConfirmationType" yaml:"FinalConfirmationType,omitempty"`
	IsFinalConfirmation            null.Bool   `boil:"IsFinalConfirmation" json:"IsFinalConfirmation,omitempty" toml:"IsFinalConfirmation" yaml:"IsFinalConfirmation,omitempty"`
	OpenReservationsIsCleared      null.Bool   `boil:"OpenReservationsIsCleared" json:"OpenReservationsIsCleared,omitempty" toml:"OpenReservationsIsCleared" yaml:"OpenReservationsIsCleared,omitempty"`
	IsReversed                     null.Bool   `boil:"IsReversed" json:"IsReversed,omitempty" toml:"IsReversed" yaml:"IsReversed,omitempty"`
	IsReversal                     null.Bool   `boil:"IsReversal" json:"IsReversal,omitempty" toml:"IsReversal" yaml:"IsReversal,omitempty"`
	APIConfHasNoGoodsMovements     null.Bool   `boil:"APIConfHasNoGoodsMovements" json:"APIConfHasNoGoodsMovements,omitempty" toml:"APIConfHasNoGoodsMovements" yaml:"APIConfHasNoGoodsMovements,omitempty"`
	OrderConfirmationRecordType    null.String `boil:"OrderConfirmationRecordType" json:"OrderConfirmationRecordType,omitempty" toml:"OrderConfirmationRecordType" yaml:"OrderConfirmationRecordType,omitempty"`
	ConfirmationEntryDate          null.String `boil:"ConfirmationEntryDate" json:"ConfirmationEntryDate,omitempty" toml:"ConfirmationEntryDate" yaml:"ConfirmationEntryDate,omitempty"`
	ConfirmationEntryTime          null.String `boil:"ConfirmationEntryTime" json:"ConfirmationEntryTime,omitempty" toml:"ConfirmationEntryTime" yaml:"ConfirmationEntryTime,omitempty"`
	EnteredByUser                  null.String `boil:"EnteredByUser" json:"EnteredByUser,omitempty" toml:"EnteredByUser" yaml:"EnteredByUser,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangedByUser              null.String `boil:"LastChangedByUser" json:"LastChangedByUser,omitempty" toml:"LastChangedByUser" yaml:"LastChangedByUser,omitempty"`
	ConfirmationExternalEntryDate  null.String `boil:"ConfirmationExternalEntryDate" json:"ConfirmationExternalEntryDate,omitempty" toml:"ConfirmationExternalEntryDate" yaml:"ConfirmationExternalEntryDate,omitempty"`
	ConfirmationExternalEntryTime  null.String `boil:"ConfirmationExternalEntryTime" json:"ConfirmationExternalEntryTime,omitempty" toml:"ConfirmationExternalEntryTime" yaml:"ConfirmationExternalEntryTime,omitempty"`
	EnteredByExternalUser          null.String `boil:"EnteredByExternalUser" json:"EnteredByExternalUser,omitempty" toml:"EnteredByExternalUser" yaml:"EnteredByExternalUser,omitempty"`
	ExternalSystemConfirmation     null.String `boil:"ExternalSystemConfirmation" json:"ExternalSystemConfirmation,omitempty" toml:"ExternalSystemConfirmation" yaml:"ExternalSystemConfirmation,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	WorkCenterTypeCode             null.String `boil:"WorkCenterTypeCode" json:"WorkCenterTypeCode,omitempty" toml:"WorkCenterTypeCode" yaml:"WorkCenterTypeCode,omitempty"`
	WorkCenter                     null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	Personnel                      null.String `boil:"Personnel" json:"Personnel,omitempty" toml:"Personnel" yaml:"Personnel,omitempty"`
	TimeRecording                  null.String `boil:"TimeRecording" json:"TimeRecording,omitempty" toml:"TimeRecording" yaml:"TimeRecording,omitempty"`
	EmployeeWageType               null.String `boil:"EmployeeWageType" json:"EmployeeWageType,omitempty" toml:"EmployeeWageType" yaml:"EmployeeWageType,omitempty"`
	EmployeeWageGroup              null.String `boil:"EmployeeWageGroup" json:"EmployeeWageGroup,omitempty" toml:"EmployeeWageGroup" yaml:"EmployeeWageGroup,omitempty"`
	BreakDurationUnit              null.String `boil:"BreakDurationUnit" json:"BreakDurationUnit,omitempty" toml:"BreakDurationUnit" yaml:"BreakDurationUnit,omitempty"`
	ConfirmedBreakDuration         null.String `boil:"ConfirmedBreakDuration" json:"ConfirmedBreakDuration,omitempty" toml:"ConfirmedBreakDuration" yaml:"ConfirmedBreakDuration,omitempty"`
	EmployeeSuitability            null.String `boil:"EmployeeSuitability" json:"EmployeeSuitability,omitempty" toml:"EmployeeSuitability" yaml:"EmployeeSuitability,omitempty"`
	NumberOfEmployees              null.String `boil:"NumberOfEmployees" json:"NumberOfEmployees,omitempty" toml:"NumberOfEmployees" yaml:"NumberOfEmployees,omitempty"`
	PostingDate                    null.String `boil:"PostingDate" json:"PostingDate,omitempty" toml:"PostingDate" yaml:"PostingDate,omitempty"`
	ConfirmedExecutionStartDate    null.String `boil:"ConfirmedExecutionStartDate" json:"ConfirmedExecutionStartDate,omitempty" toml:"ConfirmedExecutionStartDate" yaml:"ConfirmedExecutionStartDate,omitempty"`
	ConfirmedExecutionStartTime    null.String `boil:"ConfirmedExecutionStartTime" json:"ConfirmedExecutionStartTime,omitempty" toml:"ConfirmedExecutionStartTime" yaml:"ConfirmedExecutionStartTime,omitempty"`
	ConfirmedSetupEndDate          null.String `boil:"ConfirmedSetupEndDate" json:"ConfirmedSetupEndDate,omitempty" toml:"ConfirmedSetupEndDate" yaml:"ConfirmedSetupEndDate,omitempty"`
	ConfirmedSetupEndTime          null.String `boil:"ConfirmedSetupEndTime" json:"ConfirmedSetupEndTime,omitempty" toml:"ConfirmedSetupEndTime" yaml:"ConfirmedSetupEndTime,omitempty"`
	ConfirmedProcessingStartDate   null.String `boil:"ConfirmedProcessingStartDate" json:"ConfirmedProcessingStartDate,omitempty" toml:"ConfirmedProcessingStartDate" yaml:"ConfirmedProcessingStartDate,omitempty"`
	ConfirmedProcessingStartTime   null.String `boil:"ConfirmedProcessingStartTime" json:"ConfirmedProcessingStartTime,omitempty" toml:"ConfirmedProcessingStartTime" yaml:"ConfirmedProcessingStartTime,omitempty"`
	ConfirmedProcessingEndDate     null.String `boil:"ConfirmedProcessingEndDate" json:"ConfirmedProcessingEndDate,omitempty" toml:"ConfirmedProcessingEndDate" yaml:"ConfirmedProcessingEndDate,omitempty"`
	ConfirmedProcessingEndTime     null.String `boil:"ConfirmedProcessingEndTime" json:"ConfirmedProcessingEndTime,omitempty" toml:"ConfirmedProcessingEndTime" yaml:"ConfirmedProcessingEndTime,omitempty"`
	ConfirmedTeardownStartDate     null.String `boil:"ConfirmedTeardownStartDate" json:"ConfirmedTeardownStartDate,omitempty" toml:"ConfirmedTeardownStartDate" yaml:"ConfirmedTeardownStartDate,omitempty"`
	ConfirmedTeardownStartTime     null.String `boil:"ConfirmedTeardownStartTime" json:"ConfirmedTeardownStartTime,omitempty" toml:"ConfirmedTeardownStartTime" yaml:"ConfirmedTeardownStartTime,omitempty"`
	ConfirmedExecutionEndDate      null.String `boil:"ConfirmedExecutionEndDate" json:"ConfirmedExecutionEndDate,omitempty" toml:"ConfirmedExecutionEndDate" yaml:"ConfirmedExecutionEndDate,omitempty"`
	ConfirmedExecutionEndTime      null.String `boil:"ConfirmedExecutionEndTime" json:"ConfirmedExecutionEndTime,omitempty" toml:"ConfirmedExecutionEndTime" yaml:"ConfirmedExecutionEndTime,omitempty"`
	ConfirmationUnit               null.String `boil:"ConfirmationUnit" json:"ConfirmationUnit,omitempty" toml:"ConfirmationUnit" yaml:"ConfirmationUnit,omitempty"`
	ConfirmationYieldQuantity      null.String `boil:"ConfirmationYieldQuantity" json:"ConfirmationYieldQuantity,omitempty" toml:"ConfirmationYieldQuantity" yaml:"ConfirmationYieldQuantity,omitempty"`
	ConfirmationScrapQuantity      null.String `boil:"ConfirmationScrapQuantity" json:"ConfirmationScrapQuantity,omitempty" toml:"ConfirmationScrapQuantity" yaml:"ConfirmationScrapQuantity,omitempty"`
	VarianceReasonCode             null.String `boil:"VarianceReasonCode" json:"VarianceReasonCode,omitempty" toml:"VarianceReasonCode" yaml:"VarianceReasonCode,omitempty"`
	OpWorkQuantityUnit1            null.String `boil:"OpWorkQuantityUnit1" json:"OpWorkQuantityUnit1,omitempty" toml:"OpWorkQuantityUnit1" yaml:"OpWorkQuantityUnit1,omitempty"`
	OpConfirmedWorkQuantity1       null.String `boil:"OpConfirmedWorkQuantity1" json:"OpConfirmedWorkQuantity1,omitempty" toml:"OpConfirmedWorkQuantity1" yaml:"OpConfirmedWorkQuantity1,omitempty"`
	NoFurtherOpWorkQuantity1IsExpd null.Bool   `boil:"NoFurtherOpWorkQuantity1IsExpd" json:"NoFurtherOpWorkQuantity1IsExpd,omitempty" toml:"NoFurtherOpWorkQuantity1IsExpd" yaml:"NoFurtherOpWorkQuantity1IsExpd,omitempty"`
	OpWorkQuantityUnit2            null.String `boil:"OpWorkQuantityUnit2" json:"OpWorkQuantityUnit2,omitempty" toml:"OpWorkQuantityUnit2" yaml:"OpWorkQuantityUnit2,omitempty"`
	OpConfirmedWorkQuantity2       null.String `boil:"OpConfirmedWorkQuantity2" json:"OpConfirmedWorkQuantity2,omitempty" toml:"OpConfirmedWorkQuantity2" yaml:"OpConfirmedWorkQuantity2,omitempty"`
	NoFurtherOpWorkQuantity2IsExpd null.Bool   `boil:"NoFurtherOpWorkQuantity2IsExpd" json:"NoFurtherOpWorkQuantity2IsExpd,omitempty" toml:"NoFurtherOpWorkQuantity2IsExpd" yaml:"NoFurtherOpWorkQuantity2IsExpd,omitempty"`
	OpWorkQuantityUnit3            null.String `boil:"OpWorkQuantityUnit3" json:"OpWorkQuantityUnit3,omitempty" toml:"OpWorkQuantityUnit3" yaml:"OpWorkQuantityUnit3,omitempty"`
	OpConfirmedWorkQuantity3       null.String `boil:"OpConfirmedWorkQuantity3" json:"OpConfirmedWorkQuantity3,omitempty" toml:"OpConfirmedWorkQuantity3" yaml:"OpConfirmedWorkQuantity3,omitempty"`
	NoFurtherOpWorkQuantity3IsExpd null.Bool   `boil:"NoFurtherOpWorkQuantity3IsExpd" json:"NoFurtherOpWorkQuantity3IsExpd,omitempty" toml:"NoFurtherOpWorkQuantity3IsExpd" yaml:"NoFurtherOpWorkQuantity3IsExpd,omitempty"`
	OpWorkQuantityUnit4            null.String `boil:"OpWorkQuantityUnit4" json:"OpWorkQuantityUnit4,omitempty" toml:"OpWorkQuantityUnit4" yaml:"OpWorkQuantityUnit4,omitempty"`
	OpConfirmedWorkQuantity4       null.String `boil:"OpConfirmedWorkQuantity4" json:"OpConfirmedWorkQuantity4,omitempty" toml:"OpConfirmedWorkQuantity4" yaml:"OpConfirmedWorkQuantity4,omitempty"`
	NoFurtherOpWorkQuantity4IsExpd null.Bool   `boil:"NoFurtherOpWorkQuantity4IsExpd" json:"NoFurtherOpWorkQuantity4IsExpd,omitempty" toml:"NoFurtherOpWorkQuantity4IsExpd" yaml:"NoFurtherOpWorkQuantity4IsExpd,omitempty"`
	OpWorkQuantityUnit5            null.String `boil:"OpWorkQuantityUnit5" json:"OpWorkQuantityUnit5,omitempty" toml:"OpWorkQuantityUnit5" yaml:"OpWorkQuantityUnit5,omitempty"`
	OpConfirmedWorkQuantity5       null.String `boil:"OpConfirmedWorkQuantity5" json:"OpConfirmedWorkQuantity5,omitempty" toml:"OpConfirmedWorkQuantity5" yaml:"OpConfirmedWorkQuantity5,omitempty"`
	NoFurtherOpWorkQuantity5IsExpd null.Bool   `boil:"NoFurtherOpWorkQuantity5IsExpd" json:"NoFurtherOpWorkQuantity5IsExpd,omitempty" toml:"NoFurtherOpWorkQuantity5IsExpd" yaml:"NoFurtherOpWorkQuantity5IsExpd,omitempty"`
	OpWorkQuantityUnit6            null.String `boil:"OpWorkQuantityUnit6" json:"OpWorkQuantityUnit6,omitempty" toml:"OpWorkQuantityUnit6" yaml:"OpWorkQuantityUnit6,omitempty"`
	OpConfirmedWorkQuantity6       null.String `boil:"OpConfirmedWorkQuantity6" json:"OpConfirmedWorkQuantity6,omitempty" toml:"OpConfirmedWorkQuantity6" yaml:"OpConfirmedWorkQuantity6,omitempty"`
	NoFurtherOpWorkQuantity6IsExpd null.Bool   `boil:"NoFurtherOpWorkQuantity6IsExpd" json:"NoFurtherOpWorkQuantity6IsExpd,omitempty" toml:"NoFurtherOpWorkQuantity6IsExpd" yaml:"NoFurtherOpWorkQuantity6IsExpd,omitempty"`
	BusinessProcessEntryUnit       null.String `boil:"BusinessProcessEntryUnit" json:"BusinessProcessEntryUnit,omitempty" toml:"BusinessProcessEntryUnit" yaml:"BusinessProcessEntryUnit,omitempty"`
	BusinessProcessConfirmedQty    null.String `boil:"BusinessProcessConfirmedQty" json:"BusinessProcessConfirmedQty,omitempty" toml:"BusinessProcessConfirmedQty" yaml:"BusinessProcessConfirmedQty,omitempty"`
	NoFurtherBusinessProcQtyIsExpd null.Bool   `boil:"NoFurtherBusinessProcQtyIsExpd" json:"NoFurtherBusinessProcQtyIsExpd,omitempty" toml:"NoFurtherBusinessProcQtyIsExpd" yaml:"NoFurtherBusinessProcQtyIsExpd,omitempty"`

	R *sapProcessOrderConfirmationConfirmationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProcessOrderConfirmationConfirmationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProcessOrderConfirmationConfirmationDatumColumns = struct {
	OrderID                        string
	ConfirmationGroup              string
	ConfirmationCount              string
	OrderOperation                 string
	OrderSuboperation              string
	OrderType                      string
	OrderOperationInternalID       string
	ConfirmationText               string
	Language                       string
	Material                       string
	OrderPlannedTotalQty           string
	ProductionUnit                 string
	FinalConfirmationType          string
	IsFinalConfirmation            string
	OpenReservationsIsCleared      string
	IsReversed                     string
	IsReversal                     string
	APIConfHasNoGoodsMovements     string
	OrderConfirmationRecordType    string
	ConfirmationEntryDate          string
	ConfirmationEntryTime          string
	EnteredByUser                  string
	LastChangeDate                 string
	LastChangedByUser              string
	ConfirmationExternalEntryDate  string
	ConfirmationExternalEntryTime  string
	EnteredByExternalUser          string
	ExternalSystemConfirmation     string
	Plant                          string
	WorkCenterTypeCode             string
	WorkCenter                     string
	Personnel                      string
	TimeRecording                  string
	EmployeeWageType               string
	EmployeeWageGroup              string
	BreakDurationUnit              string
	ConfirmedBreakDuration         string
	EmployeeSuitability            string
	NumberOfEmployees              string
	PostingDate                    string
	ConfirmedExecutionStartDate    string
	ConfirmedExecutionStartTime    string
	ConfirmedSetupEndDate          string
	ConfirmedSetupEndTime          string
	ConfirmedProcessingStartDate   string
	ConfirmedProcessingStartTime   string
	ConfirmedProcessingEndDate     string
	ConfirmedProcessingEndTime     string
	ConfirmedTeardownStartDate     string
	ConfirmedTeardownStartTime     string
	ConfirmedExecutionEndDate      string
	ConfirmedExecutionEndTime      string
	ConfirmationUnit               string
	ConfirmationYieldQuantity      string
	ConfirmationScrapQuantity      string
	VarianceReasonCode             string
	OpWorkQuantityUnit1            string
	OpConfirmedWorkQuantity1       string
	NoFurtherOpWorkQuantity1IsExpd string
	OpWorkQuantityUnit2            string
	OpConfirmedWorkQuantity2       string
	NoFurtherOpWorkQuantity2IsExpd string
	OpWorkQuantityUnit3            string
	OpConfirmedWorkQuantity3       string
	NoFurtherOpWorkQuantity3IsExpd string
	OpWorkQuantityUnit4            string
	OpConfirmedWorkQuantity4       string
	NoFurtherOpWorkQuantity4IsExpd string
	OpWorkQuantityUnit5            string
	OpConfirmedWorkQuantity5       string
	NoFurtherOpWorkQuantity5IsExpd string
	OpWorkQuantityUnit6            string
	OpConfirmedWorkQuantity6       string
	NoFurtherOpWorkQuantity6IsExpd string
	BusinessProcessEntryUnit       string
	BusinessProcessConfirmedQty    string
	NoFurtherBusinessProcQtyIsExpd string
}{
	OrderID:                        "OrderID",
	ConfirmationGroup:              "ConfirmationGroup",
	ConfirmationCount:              "ConfirmationCount",
	OrderOperation:                 "OrderOperation",
	OrderSuboperation:              "OrderSuboperation",
	OrderType:                      "OrderType",
	OrderOperationInternalID:       "OrderOperationInternalID",
	ConfirmationText:               "ConfirmationText",
	Language:                       "Language",
	Material:                       "Material",
	OrderPlannedTotalQty:           "OrderPlannedTotalQty",
	ProductionUnit:                 "ProductionUnit",
	FinalConfirmationType:          "FinalConfirmationType",
	IsFinalConfirmation:            "IsFinalConfirmation",
	OpenReservationsIsCleared:      "OpenReservationsIsCleared",
	IsReversed:                     "IsReversed",
	IsReversal:                     "IsReversal",
	APIConfHasNoGoodsMovements:     "APIConfHasNoGoodsMovements",
	OrderConfirmationRecordType:    "OrderConfirmationRecordType",
	ConfirmationEntryDate:          "ConfirmationEntryDate",
	ConfirmationEntryTime:          "ConfirmationEntryTime",
	EnteredByUser:                  "EnteredByUser",
	LastChangeDate:                 "LastChangeDate",
	LastChangedByUser:              "LastChangedByUser",
	ConfirmationExternalEntryDate:  "ConfirmationExternalEntryDate",
	ConfirmationExternalEntryTime:  "ConfirmationExternalEntryTime",
	EnteredByExternalUser:          "EnteredByExternalUser",
	ExternalSystemConfirmation:     "ExternalSystemConfirmation",
	Plant:                          "Plant",
	WorkCenterTypeCode:             "WorkCenterTypeCode",
	WorkCenter:                     "WorkCenter",
	Personnel:                      "Personnel",
	TimeRecording:                  "TimeRecording",
	EmployeeWageType:               "EmployeeWageType",
	EmployeeWageGroup:              "EmployeeWageGroup",
	BreakDurationUnit:              "BreakDurationUnit",
	ConfirmedBreakDuration:         "ConfirmedBreakDuration",
	EmployeeSuitability:            "EmployeeSuitability",
	NumberOfEmployees:              "NumberOfEmployees",
	PostingDate:                    "PostingDate",
	ConfirmedExecutionStartDate:    "ConfirmedExecutionStartDate",
	ConfirmedExecutionStartTime:    "ConfirmedExecutionStartTime",
	ConfirmedSetupEndDate:          "ConfirmedSetupEndDate",
	ConfirmedSetupEndTime:          "ConfirmedSetupEndTime",
	ConfirmedProcessingStartDate:   "ConfirmedProcessingStartDate",
	ConfirmedProcessingStartTime:   "ConfirmedProcessingStartTime",
	ConfirmedProcessingEndDate:     "ConfirmedProcessingEndDate",
	ConfirmedProcessingEndTime:     "ConfirmedProcessingEndTime",
	ConfirmedTeardownStartDate:     "ConfirmedTeardownStartDate",
	ConfirmedTeardownStartTime:     "ConfirmedTeardownStartTime",
	ConfirmedExecutionEndDate:      "ConfirmedExecutionEndDate",
	ConfirmedExecutionEndTime:      "ConfirmedExecutionEndTime",
	ConfirmationUnit:               "ConfirmationUnit",
	ConfirmationYieldQuantity:      "ConfirmationYieldQuantity",
	ConfirmationScrapQuantity:      "ConfirmationScrapQuantity",
	VarianceReasonCode:             "VarianceReasonCode",
	OpWorkQuantityUnit1:            "OpWorkQuantityUnit1",
	OpConfirmedWorkQuantity1:       "OpConfirmedWorkQuantity1",
	NoFurtherOpWorkQuantity1IsExpd: "NoFurtherOpWorkQuantity1IsExpd",
	OpWorkQuantityUnit2:            "OpWorkQuantityUnit2",
	OpConfirmedWorkQuantity2:       "OpConfirmedWorkQuantity2",
	NoFurtherOpWorkQuantity2IsExpd: "NoFurtherOpWorkQuantity2IsExpd",
	OpWorkQuantityUnit3:            "OpWorkQuantityUnit3",
	OpConfirmedWorkQuantity3:       "OpConfirmedWorkQuantity3",
	NoFurtherOpWorkQuantity3IsExpd: "NoFurtherOpWorkQuantity3IsExpd",
	OpWorkQuantityUnit4:            "OpWorkQuantityUnit4",
	OpConfirmedWorkQuantity4:       "OpConfirmedWorkQuantity4",
	NoFurtherOpWorkQuantity4IsExpd: "NoFurtherOpWorkQuantity4IsExpd",
	OpWorkQuantityUnit5:            "OpWorkQuantityUnit5",
	OpConfirmedWorkQuantity5:       "OpConfirmedWorkQuantity5",
	NoFurtherOpWorkQuantity5IsExpd: "NoFurtherOpWorkQuantity5IsExpd",
	OpWorkQuantityUnit6:            "OpWorkQuantityUnit6",
	OpConfirmedWorkQuantity6:       "OpConfirmedWorkQuantity6",
	NoFurtherOpWorkQuantity6IsExpd: "NoFurtherOpWorkQuantity6IsExpd",
	BusinessProcessEntryUnit:       "BusinessProcessEntryUnit",
	BusinessProcessConfirmedQty:    "BusinessProcessConfirmedQty",
	NoFurtherBusinessProcQtyIsExpd: "NoFurtherBusinessProcQtyIsExpd",
}

var SapProcessOrderConfirmationConfirmationDatumTableColumns = struct {
	OrderID                        string
	ConfirmationGroup              string
	ConfirmationCount              string
	OrderOperation                 string
	OrderSuboperation              string
	OrderType                      string
	OrderOperationInternalID       string
	ConfirmationText               string
	Language                       string
	Material                       string
	OrderPlannedTotalQty           string
	ProductionUnit                 string
	FinalConfirmationType          string
	IsFinalConfirmation            string
	OpenReservationsIsCleared      string
	IsReversed                     string
	IsReversal                     string
	APIConfHasNoGoodsMovements     string
	OrderConfirmationRecordType    string
	ConfirmationEntryDate          string
	ConfirmationEntryTime          string
	EnteredByUser                  string
	LastChangeDate                 string
	LastChangedByUser              string
	ConfirmationExternalEntryDate  string
	ConfirmationExternalEntryTime  string
	EnteredByExternalUser          string
	ExternalSystemConfirmation     string
	Plant                          string
	WorkCenterTypeCode             string
	WorkCenter                     string
	Personnel                      string
	TimeRecording                  string
	EmployeeWageType               string
	EmployeeWageGroup              string
	BreakDurationUnit              string
	ConfirmedBreakDuration         string
	EmployeeSuitability            string
	NumberOfEmployees              string
	PostingDate                    string
	ConfirmedExecutionStartDate    string
	ConfirmedExecutionStartTime    string
	ConfirmedSetupEndDate          string
	ConfirmedSetupEndTime          string
	ConfirmedProcessingStartDate   string
	ConfirmedProcessingStartTime   string
	ConfirmedProcessingEndDate     string
	ConfirmedProcessingEndTime     string
	ConfirmedTeardownStartDate     string
	ConfirmedTeardownStartTime     string
	ConfirmedExecutionEndDate      string
	ConfirmedExecutionEndTime      string
	ConfirmationUnit               string
	ConfirmationYieldQuantity      string
	ConfirmationScrapQuantity      string
	VarianceReasonCode             string
	OpWorkQuantityUnit1            string
	OpConfirmedWorkQuantity1       string
	NoFurtherOpWorkQuantity1IsExpd string
	OpWorkQuantityUnit2            string
	OpConfirmedWorkQuantity2       string
	NoFurtherOpWorkQuantity2IsExpd string
	OpWorkQuantityUnit3            string
	OpConfirmedWorkQuantity3       string
	NoFurtherOpWorkQuantity3IsExpd string
	OpWorkQuantityUnit4            string
	OpConfirmedWorkQuantity4       string
	NoFurtherOpWorkQuantity4IsExpd string
	OpWorkQuantityUnit5            string
	OpConfirmedWorkQuantity5       string
	NoFurtherOpWorkQuantity5IsExpd string
	OpWorkQuantityUnit6            string
	OpConfirmedWorkQuantity6       string
	NoFurtherOpWorkQuantity6IsExpd string
	BusinessProcessEntryUnit       string
	BusinessProcessConfirmedQty    string
	NoFurtherBusinessProcQtyIsExpd string
}{
	OrderID:                        "sap_process_order_confirmation_confirmation_data.OrderID",
	ConfirmationGroup:              "sap_process_order_confirmation_confirmation_data.ConfirmationGroup",
	ConfirmationCount:              "sap_process_order_confirmation_confirmation_data.ConfirmationCount",
	OrderOperation:                 "sap_process_order_confirmation_confirmation_data.OrderOperation",
	OrderSuboperation:              "sap_process_order_confirmation_confirmation_data.OrderSuboperation",
	OrderType:                      "sap_process_order_confirmation_confirmation_data.OrderType",
	OrderOperationInternalID:       "sap_process_order_confirmation_confirmation_data.OrderOperationInternalID",
	ConfirmationText:               "sap_process_order_confirmation_confirmation_data.ConfirmationText",
	Language:                       "sap_process_order_confirmation_confirmation_data.Language",
	Material:                       "sap_process_order_confirmation_confirmation_data.Material",
	OrderPlannedTotalQty:           "sap_process_order_confirmation_confirmation_data.OrderPlannedTotalQty",
	ProductionUnit:                 "sap_process_order_confirmation_confirmation_data.ProductionUnit",
	FinalConfirmationType:          "sap_process_order_confirmation_confirmation_data.FinalConfirmationType",
	IsFinalConfirmation:            "sap_process_order_confirmation_confirmation_data.IsFinalConfirmation",
	OpenReservationsIsCleared:      "sap_process_order_confirmation_confirmation_data.OpenReservationsIsCleared",
	IsReversed:                     "sap_process_order_confirmation_confirmation_data.IsReversed",
	IsReversal:                     "sap_process_order_confirmation_confirmation_data.IsReversal",
	APIConfHasNoGoodsMovements:     "sap_process_order_confirmation_confirmation_data.APIConfHasNoGoodsMovements",
	OrderConfirmationRecordType:    "sap_process_order_confirmation_confirmation_data.OrderConfirmationRecordType",
	ConfirmationEntryDate:          "sap_process_order_confirmation_confirmation_data.ConfirmationEntryDate",
	ConfirmationEntryTime:          "sap_process_order_confirmation_confirmation_data.ConfirmationEntryTime",
	EnteredByUser:                  "sap_process_order_confirmation_confirmation_data.EnteredByUser",
	LastChangeDate:                 "sap_process_order_confirmation_confirmation_data.LastChangeDate",
	LastChangedByUser:              "sap_process_order_confirmation_confirmation_data.LastChangedByUser",
	ConfirmationExternalEntryDate:  "sap_process_order_confirmation_confirmation_data.ConfirmationExternalEntryDate",
	ConfirmationExternalEntryTime:  "sap_process_order_confirmation_confirmation_data.ConfirmationExternalEntryTime",
	EnteredByExternalUser:          "sap_process_order_confirmation_confirmation_data.EnteredByExternalUser",
	ExternalSystemConfirmation:     "sap_process_order_confirmation_confirmation_data.ExternalSystemConfirmation",
	Plant:                          "sap_process_order_confirmation_confirmation_data.Plant",
	WorkCenterTypeCode:             "sap_process_order_confirmation_confirmation_data.WorkCenterTypeCode",
	WorkCenter:                     "sap_process_order_confirmation_confirmation_data.WorkCenter",
	Personnel:                      "sap_process_order_confirmation_confirmation_data.Personnel",
	TimeRecording:                  "sap_process_order_confirmation_confirmation_data.TimeRecording",
	EmployeeWageType:               "sap_process_order_confirmation_confirmation_data.EmployeeWageType",
	EmployeeWageGroup:              "sap_process_order_confirmation_confirmation_data.EmployeeWageGroup",
	BreakDurationUnit:              "sap_process_order_confirmation_confirmation_data.BreakDurationUnit",
	ConfirmedBreakDuration:         "sap_process_order_confirmation_confirmation_data.ConfirmedBreakDuration",
	EmployeeSuitability:            "sap_process_order_confirmation_confirmation_data.EmployeeSuitability",
	NumberOfEmployees:              "sap_process_order_confirmation_confirmation_data.NumberOfEmployees",
	PostingDate:                    "sap_process_order_confirmation_confirmation_data.PostingDate",
	ConfirmedExecutionStartDate:    "sap_process_order_confirmation_confirmation_data.ConfirmedExecutionStartDate",
	ConfirmedExecutionStartTime:    "sap_process_order_confirmation_confirmation_data.ConfirmedExecutionStartTime",
	ConfirmedSetupEndDate:          "sap_process_order_confirmation_confirmation_data.ConfirmedSetupEndDate",
	ConfirmedSetupEndTime:          "sap_process_order_confirmation_confirmation_data.ConfirmedSetupEndTime",
	ConfirmedProcessingStartDate:   "sap_process_order_confirmation_confirmation_data.ConfirmedProcessingStartDate",
	ConfirmedProcessingStartTime:   "sap_process_order_confirmation_confirmation_data.ConfirmedProcessingStartTime",
	ConfirmedProcessingEndDate:     "sap_process_order_confirmation_confirmation_data.ConfirmedProcessingEndDate",
	ConfirmedProcessingEndTime:     "sap_process_order_confirmation_confirmation_data.ConfirmedProcessingEndTime",
	ConfirmedTeardownStartDate:     "sap_process_order_confirmation_confirmation_data.ConfirmedTeardownStartDate",
	ConfirmedTeardownStartTime:     "sap_process_order_confirmation_confirmation_data.ConfirmedTeardownStartTime",
	ConfirmedExecutionEndDate:      "sap_process_order_confirmation_confirmation_data.ConfirmedExecutionEndDate",
	ConfirmedExecutionEndTime:      "sap_process_order_confirmation_confirmation_data.ConfirmedExecutionEndTime",
	ConfirmationUnit:               "sap_process_order_confirmation_confirmation_data.ConfirmationUnit",
	ConfirmationYieldQuantity:      "sap_process_order_confirmation_confirmation_data.ConfirmationYieldQuantity",
	ConfirmationScrapQuantity:      "sap_process_order_confirmation_confirmation_data.ConfirmationScrapQuantity",
	VarianceReasonCode:             "sap_process_order_confirmation_confirmation_data.VarianceReasonCode",
	OpWorkQuantityUnit1:            "sap_process_order_confirmation_confirmation_data.OpWorkQuantityUnit1",
	OpConfirmedWorkQuantity1:       "sap_process_order_confirmation_confirmation_data.OpConfirmedWorkQuantity1",
	NoFurtherOpWorkQuantity1IsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherOpWorkQuantity1IsExpd",
	OpWorkQuantityUnit2:            "sap_process_order_confirmation_confirmation_data.OpWorkQuantityUnit2",
	OpConfirmedWorkQuantity2:       "sap_process_order_confirmation_confirmation_data.OpConfirmedWorkQuantity2",
	NoFurtherOpWorkQuantity2IsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherOpWorkQuantity2IsExpd",
	OpWorkQuantityUnit3:            "sap_process_order_confirmation_confirmation_data.OpWorkQuantityUnit3",
	OpConfirmedWorkQuantity3:       "sap_process_order_confirmation_confirmation_data.OpConfirmedWorkQuantity3",
	NoFurtherOpWorkQuantity3IsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherOpWorkQuantity3IsExpd",
	OpWorkQuantityUnit4:            "sap_process_order_confirmation_confirmation_data.OpWorkQuantityUnit4",
	OpConfirmedWorkQuantity4:       "sap_process_order_confirmation_confirmation_data.OpConfirmedWorkQuantity4",
	NoFurtherOpWorkQuantity4IsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherOpWorkQuantity4IsExpd",
	OpWorkQuantityUnit5:            "sap_process_order_confirmation_confirmation_data.OpWorkQuantityUnit5",
	OpConfirmedWorkQuantity5:       "sap_process_order_confirmation_confirmation_data.OpConfirmedWorkQuantity5",
	NoFurtherOpWorkQuantity5IsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherOpWorkQuantity5IsExpd",
	OpWorkQuantityUnit6:            "sap_process_order_confirmation_confirmation_data.OpWorkQuantityUnit6",
	OpConfirmedWorkQuantity6:       "sap_process_order_confirmation_confirmation_data.OpConfirmedWorkQuantity6",
	NoFurtherOpWorkQuantity6IsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherOpWorkQuantity6IsExpd",
	BusinessProcessEntryUnit:       "sap_process_order_confirmation_confirmation_data.BusinessProcessEntryUnit",
	BusinessProcessConfirmedQty:    "sap_process_order_confirmation_confirmation_data.BusinessProcessConfirmedQty",
	NoFurtherBusinessProcQtyIsExpd: "sap_process_order_confirmation_confirmation_data.NoFurtherBusinessProcQtyIsExpd",
}

// Generated where

var SapProcessOrderConfirmationConfirmationDatumWhere = struct {
	OrderID                        whereHelperstring
	ConfirmationGroup              whereHelpernull_String
	ConfirmationCount              whereHelpernull_String
	OrderOperation                 whereHelpernull_String
	OrderSuboperation              whereHelpernull_String
	OrderType                      whereHelpernull_String
	OrderOperationInternalID       whereHelpernull_String
	ConfirmationText               whereHelpernull_String
	Language                       whereHelpernull_String
	Material                       whereHelpernull_String
	OrderPlannedTotalQty           whereHelpernull_String
	ProductionUnit                 whereHelpernull_String
	FinalConfirmationType          whereHelpernull_String
	IsFinalConfirmation            whereHelpernull_Bool
	OpenReservationsIsCleared      whereHelpernull_Bool
	IsReversed                     whereHelpernull_Bool
	IsReversal                     whereHelpernull_Bool
	APIConfHasNoGoodsMovements     whereHelpernull_Bool
	OrderConfirmationRecordType    whereHelpernull_String
	ConfirmationEntryDate          whereHelpernull_String
	ConfirmationEntryTime          whereHelpernull_String
	EnteredByUser                  whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	LastChangedByUser              whereHelpernull_String
	ConfirmationExternalEntryDate  whereHelpernull_String
	ConfirmationExternalEntryTime  whereHelpernull_String
	EnteredByExternalUser          whereHelpernull_String
	ExternalSystemConfirmation     whereHelpernull_String
	Plant                          whereHelpernull_String
	WorkCenterTypeCode             whereHelpernull_String
	WorkCenter                     whereHelpernull_String
	Personnel                      whereHelpernull_String
	TimeRecording                  whereHelpernull_String
	EmployeeWageType               whereHelpernull_String
	EmployeeWageGroup              whereHelpernull_String
	BreakDurationUnit              whereHelpernull_String
	ConfirmedBreakDuration         whereHelpernull_String
	EmployeeSuitability            whereHelpernull_String
	NumberOfEmployees              whereHelpernull_String
	PostingDate                    whereHelpernull_String
	ConfirmedExecutionStartDate    whereHelpernull_String
	ConfirmedExecutionStartTime    whereHelpernull_String
	ConfirmedSetupEndDate          whereHelpernull_String
	ConfirmedSetupEndTime          whereHelpernull_String
	ConfirmedProcessingStartDate   whereHelpernull_String
	ConfirmedProcessingStartTime   whereHelpernull_String
	ConfirmedProcessingEndDate     whereHelpernull_String
	ConfirmedProcessingEndTime     whereHelpernull_String
	ConfirmedTeardownStartDate     whereHelpernull_String
	ConfirmedTeardownStartTime     whereHelpernull_String
	ConfirmedExecutionEndDate      whereHelpernull_String
	ConfirmedExecutionEndTime      whereHelpernull_String
	ConfirmationUnit               whereHelpernull_String
	ConfirmationYieldQuantity      whereHelpernull_String
	ConfirmationScrapQuantity      whereHelpernull_String
	VarianceReasonCode             whereHelpernull_String
	OpWorkQuantityUnit1            whereHelpernull_String
	OpConfirmedWorkQuantity1       whereHelpernull_String
	NoFurtherOpWorkQuantity1IsExpd whereHelpernull_Bool
	OpWorkQuantityUnit2            whereHelpernull_String
	OpConfirmedWorkQuantity2       whereHelpernull_String
	NoFurtherOpWorkQuantity2IsExpd whereHelpernull_Bool
	OpWorkQuantityUnit3            whereHelpernull_String
	OpConfirmedWorkQuantity3       whereHelpernull_String
	NoFurtherOpWorkQuantity3IsExpd whereHelpernull_Bool
	OpWorkQuantityUnit4            whereHelpernull_String
	OpConfirmedWorkQuantity4       whereHelpernull_String
	NoFurtherOpWorkQuantity4IsExpd whereHelpernull_Bool
	OpWorkQuantityUnit5            whereHelpernull_String
	OpConfirmedWorkQuantity5       whereHelpernull_String
	NoFurtherOpWorkQuantity5IsExpd whereHelpernull_Bool
	OpWorkQuantityUnit6            whereHelpernull_String
	OpConfirmedWorkQuantity6       whereHelpernull_String
	NoFurtherOpWorkQuantity6IsExpd whereHelpernull_Bool
	BusinessProcessEntryUnit       whereHelpernull_String
	BusinessProcessConfirmedQty    whereHelpernull_String
	NoFurtherBusinessProcQtyIsExpd whereHelpernull_Bool
}{
	OrderID:                        whereHelperstring{field: "`sap_process_order_confirmation_confirmation_data`.`OrderID`"},
	ConfirmationGroup:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationGroup`"},
	ConfirmationCount:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationCount`"},
	OrderOperation:                 whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OrderOperation`"},
	OrderSuboperation:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OrderSuboperation`"},
	OrderType:                      whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OrderType`"},
	OrderOperationInternalID:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OrderOperationInternalID`"},
	ConfirmationText:               whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationText`"},
	Language:                       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`Language`"},
	Material:                       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`Material`"},
	OrderPlannedTotalQty:           whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OrderPlannedTotalQty`"},
	ProductionUnit:                 whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ProductionUnit`"},
	FinalConfirmationType:          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`FinalConfirmationType`"},
	IsFinalConfirmation:            whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`IsFinalConfirmation`"},
	OpenReservationsIsCleared:      whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`OpenReservationsIsCleared`"},
	IsReversed:                     whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`IsReversed`"},
	IsReversal:                     whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`IsReversal`"},
	APIConfHasNoGoodsMovements:     whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`APIConfHasNoGoodsMovements`"},
	OrderConfirmationRecordType:    whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OrderConfirmationRecordType`"},
	ConfirmationEntryDate:          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationEntryDate`"},
	ConfirmationEntryTime:          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationEntryTime`"},
	EnteredByUser:                  whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`EnteredByUser`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`LastChangeDate`"},
	LastChangedByUser:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`LastChangedByUser`"},
	ConfirmationExternalEntryDate:  whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationExternalEntryDate`"},
	ConfirmationExternalEntryTime:  whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationExternalEntryTime`"},
	EnteredByExternalUser:          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`EnteredByExternalUser`"},
	ExternalSystemConfirmation:     whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ExternalSystemConfirmation`"},
	Plant:                          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`Plant`"},
	WorkCenterTypeCode:             whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`WorkCenterTypeCode`"},
	WorkCenter:                     whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`WorkCenter`"},
	Personnel:                      whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`Personnel`"},
	TimeRecording:                  whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`TimeRecording`"},
	EmployeeWageType:               whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`EmployeeWageType`"},
	EmployeeWageGroup:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`EmployeeWageGroup`"},
	BreakDurationUnit:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`BreakDurationUnit`"},
	ConfirmedBreakDuration:         whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedBreakDuration`"},
	EmployeeSuitability:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`EmployeeSuitability`"},
	NumberOfEmployees:              whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`NumberOfEmployees`"},
	PostingDate:                    whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`PostingDate`"},
	ConfirmedExecutionStartDate:    whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedExecutionStartDate`"},
	ConfirmedExecutionStartTime:    whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedExecutionStartTime`"},
	ConfirmedSetupEndDate:          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedSetupEndDate`"},
	ConfirmedSetupEndTime:          whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedSetupEndTime`"},
	ConfirmedProcessingStartDate:   whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedProcessingStartDate`"},
	ConfirmedProcessingStartTime:   whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedProcessingStartTime`"},
	ConfirmedProcessingEndDate:     whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedProcessingEndDate`"},
	ConfirmedProcessingEndTime:     whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedProcessingEndTime`"},
	ConfirmedTeardownStartDate:     whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedTeardownStartDate`"},
	ConfirmedTeardownStartTime:     whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedTeardownStartTime`"},
	ConfirmedExecutionEndDate:      whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedExecutionEndDate`"},
	ConfirmedExecutionEndTime:      whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmedExecutionEndTime`"},
	ConfirmationUnit:               whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationUnit`"},
	ConfirmationYieldQuantity:      whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationYieldQuantity`"},
	ConfirmationScrapQuantity:      whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`ConfirmationScrapQuantity`"},
	VarianceReasonCode:             whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`VarianceReasonCode`"},
	OpWorkQuantityUnit1:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpWorkQuantityUnit1`"},
	OpConfirmedWorkQuantity1:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpConfirmedWorkQuantity1`"},
	NoFurtherOpWorkQuantity1IsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherOpWorkQuantity1IsExpd`"},
	OpWorkQuantityUnit2:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpWorkQuantityUnit2`"},
	OpConfirmedWorkQuantity2:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpConfirmedWorkQuantity2`"},
	NoFurtherOpWorkQuantity2IsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherOpWorkQuantity2IsExpd`"},
	OpWorkQuantityUnit3:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpWorkQuantityUnit3`"},
	OpConfirmedWorkQuantity3:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpConfirmedWorkQuantity3`"},
	NoFurtherOpWorkQuantity3IsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherOpWorkQuantity3IsExpd`"},
	OpWorkQuantityUnit4:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpWorkQuantityUnit4`"},
	OpConfirmedWorkQuantity4:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpConfirmedWorkQuantity4`"},
	NoFurtherOpWorkQuantity4IsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherOpWorkQuantity4IsExpd`"},
	OpWorkQuantityUnit5:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpWorkQuantityUnit5`"},
	OpConfirmedWorkQuantity5:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpConfirmedWorkQuantity5`"},
	NoFurtherOpWorkQuantity5IsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherOpWorkQuantity5IsExpd`"},
	OpWorkQuantityUnit6:            whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpWorkQuantityUnit6`"},
	OpConfirmedWorkQuantity6:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`OpConfirmedWorkQuantity6`"},
	NoFurtherOpWorkQuantity6IsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherOpWorkQuantity6IsExpd`"},
	BusinessProcessEntryUnit:       whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`BusinessProcessEntryUnit`"},
	BusinessProcessConfirmedQty:    whereHelpernull_String{field: "`sap_process_order_confirmation_confirmation_data`.`BusinessProcessConfirmedQty`"},
	NoFurtherBusinessProcQtyIsExpd: whereHelpernull_Bool{field: "`sap_process_order_confirmation_confirmation_data`.`NoFurtherBusinessProcQtyIsExpd`"},
}

// SapProcessOrderConfirmationConfirmationDatumRels is where relationship names are stored.
var SapProcessOrderConfirmationConfirmationDatumRels = struct {
	OrderIDSapProcessOrderConfirmationBatchCharacteristicData string
	OrderIDSapProcessOrderConfirmationMaterialMovementsData   string
}{
	OrderIDSapProcessOrderConfirmationBatchCharacteristicData: "OrderIDSapProcessOrderConfirmationBatchCharacteristicData",
	OrderIDSapProcessOrderConfirmationMaterialMovementsData:   "OrderIDSapProcessOrderConfirmationMaterialMovementsData",
}

// sapProcessOrderConfirmationConfirmationDatumR is where relationships are stored.
type sapProcessOrderConfirmationConfirmationDatumR struct {
	OrderIDSapProcessOrderConfirmationBatchCharacteristicData SapProcessOrderConfirmationBatchCharacteristicDatumSlice `boil:"OrderIDSapProcessOrderConfirmationBatchCharacteristicData" json:"OrderIDSapProcessOrderConfirmationBatchCharacteristicData" toml:"OrderIDSapProcessOrderConfirmationBatchCharacteristicData" yaml:"OrderIDSapProcessOrderConfirmationBatchCharacteristicData"`
	OrderIDSapProcessOrderConfirmationMaterialMovementsData   SapProcessOrderConfirmationMaterialMovementsDatumSlice   `boil:"OrderIDSapProcessOrderConfirmationMaterialMovementsData" json:"OrderIDSapProcessOrderConfirmationMaterialMovementsData" toml:"OrderIDSapProcessOrderConfirmationMaterialMovementsData" yaml:"OrderIDSapProcessOrderConfirmationMaterialMovementsData"`
}

// NewStruct creates a new relationship struct
func (*sapProcessOrderConfirmationConfirmationDatumR) NewStruct() *sapProcessOrderConfirmationConfirmationDatumR {
	return &sapProcessOrderConfirmationConfirmationDatumR{}
}

func (r *sapProcessOrderConfirmationConfirmationDatumR) GetOrderIDSapProcessOrderConfirmationBatchCharacteristicData() SapProcessOrderConfirmationBatchCharacteristicDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDSapProcessOrderConfirmationBatchCharacteristicData
}

func (r *sapProcessOrderConfirmationConfirmationDatumR) GetOrderIDSapProcessOrderConfirmationMaterialMovementsData() SapProcessOrderConfirmationMaterialMovementsDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDSapProcessOrderConfirmationMaterialMovementsData
}

// sapProcessOrderConfirmationConfirmationDatumL is where Load methods for each relationship are stored.
type sapProcessOrderConfirmationConfirmationDatumL struct{}

var (
	sapProcessOrderConfirmationConfirmationDatumAllColumns            = []string{"OrderID", "ConfirmationGroup", "ConfirmationCount", "OrderOperation", "OrderSuboperation", "OrderType", "OrderOperationInternalID", "ConfirmationText", "Language", "Material", "OrderPlannedTotalQty", "ProductionUnit", "FinalConfirmationType", "IsFinalConfirmation", "OpenReservationsIsCleared", "IsReversed", "IsReversal", "APIConfHasNoGoodsMovements", "OrderConfirmationRecordType", "ConfirmationEntryDate", "ConfirmationEntryTime", "EnteredByUser", "LastChangeDate", "LastChangedByUser", "ConfirmationExternalEntryDate", "ConfirmationExternalEntryTime", "EnteredByExternalUser", "ExternalSystemConfirmation", "Plant", "WorkCenterTypeCode", "WorkCenter", "Personnel", "TimeRecording", "EmployeeWageType", "EmployeeWageGroup", "BreakDurationUnit", "ConfirmedBreakDuration", "EmployeeSuitability", "NumberOfEmployees", "PostingDate", "ConfirmedExecutionStartDate", "ConfirmedExecutionStartTime", "ConfirmedSetupEndDate", "ConfirmedSetupEndTime", "ConfirmedProcessingStartDate", "ConfirmedProcessingStartTime", "ConfirmedProcessingEndDate", "ConfirmedProcessingEndTime", "ConfirmedTeardownStartDate", "ConfirmedTeardownStartTime", "ConfirmedExecutionEndDate", "ConfirmedExecutionEndTime", "ConfirmationUnit", "ConfirmationYieldQuantity", "ConfirmationScrapQuantity", "VarianceReasonCode", "OpWorkQuantityUnit1", "OpConfirmedWorkQuantity1", "NoFurtherOpWorkQuantity1IsExpd", "OpWorkQuantityUnit2", "OpConfirmedWorkQuantity2", "NoFurtherOpWorkQuantity2IsExpd", "OpWorkQuantityUnit3", "OpConfirmedWorkQuantity3", "NoFurtherOpWorkQuantity3IsExpd", "OpWorkQuantityUnit4", "OpConfirmedWorkQuantity4", "NoFurtherOpWorkQuantity4IsExpd", "OpWorkQuantityUnit5", "OpConfirmedWorkQuantity5", "NoFurtherOpWorkQuantity5IsExpd", "OpWorkQuantityUnit6", "OpConfirmedWorkQuantity6", "NoFurtherOpWorkQuantity6IsExpd", "BusinessProcessEntryUnit", "BusinessProcessConfirmedQty", "NoFurtherBusinessProcQtyIsExpd"}
	sapProcessOrderConfirmationConfirmationDatumColumnsWithoutDefault = []string{"OrderID", "ConfirmationGroup", "ConfirmationCount", "OrderOperation", "OrderSuboperation", "OrderType", "OrderOperationInternalID", "ConfirmationText", "Language", "Material", "OrderPlannedTotalQty", "ProductionUnit", "FinalConfirmationType", "IsFinalConfirmation", "OpenReservationsIsCleared", "IsReversed", "IsReversal", "APIConfHasNoGoodsMovements", "OrderConfirmationRecordType", "ConfirmationEntryDate", "ConfirmationEntryTime", "EnteredByUser", "LastChangeDate", "LastChangedByUser", "ConfirmationExternalEntryDate", "ConfirmationExternalEntryTime", "EnteredByExternalUser", "ExternalSystemConfirmation", "Plant", "WorkCenterTypeCode", "WorkCenter", "Personnel", "TimeRecording", "EmployeeWageType", "EmployeeWageGroup", "BreakDurationUnit", "ConfirmedBreakDuration", "EmployeeSuitability", "NumberOfEmployees", "PostingDate", "ConfirmedExecutionStartDate", "ConfirmedExecutionStartTime", "ConfirmedSetupEndDate", "ConfirmedSetupEndTime", "ConfirmedProcessingStartDate", "ConfirmedProcessingStartTime", "ConfirmedProcessingEndDate", "ConfirmedProcessingEndTime", "ConfirmedTeardownStartDate", "ConfirmedTeardownStartTime", "ConfirmedExecutionEndDate", "ConfirmedExecutionEndTime", "ConfirmationUnit", "ConfirmationYieldQuantity", "ConfirmationScrapQuantity", "VarianceReasonCode", "OpWorkQuantityUnit1", "OpConfirmedWorkQuantity1", "NoFurtherOpWorkQuantity1IsExpd", "OpWorkQuantityUnit2", "OpConfirmedWorkQuantity2", "NoFurtherOpWorkQuantity2IsExpd", "OpWorkQuantityUnit3", "OpConfirmedWorkQuantity3", "NoFurtherOpWorkQuantity3IsExpd", "OpWorkQuantityUnit4", "OpConfirmedWorkQuantity4", "NoFurtherOpWorkQuantity4IsExpd", "OpWorkQuantityUnit5", "OpConfirmedWorkQuantity5", "NoFurtherOpWorkQuantity5IsExpd", "OpWorkQuantityUnit6", "OpConfirmedWorkQuantity6", "NoFurtherOpWorkQuantity6IsExpd", "BusinessProcessEntryUnit", "BusinessProcessConfirmedQty", "NoFurtherBusinessProcQtyIsExpd"}
	sapProcessOrderConfirmationConfirmationDatumColumnsWithDefault    = []string{}
	sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns     = []string{"OrderID"}
	sapProcessOrderConfirmationConfirmationDatumGeneratedColumns      = []string{}
)

type (
	// SapProcessOrderConfirmationConfirmationDatumSlice is an alias for a slice of pointers to SapProcessOrderConfirmationConfirmationDatum.
	// This should almost always be used instead of []SapProcessOrderConfirmationConfirmationDatum.
	SapProcessOrderConfirmationConfirmationDatumSlice []*SapProcessOrderConfirmationConfirmationDatum
	// SapProcessOrderConfirmationConfirmationDatumHook is the signature for custom SapProcessOrderConfirmationConfirmationDatum hook methods
	SapProcessOrderConfirmationConfirmationDatumHook func(context.Context, boil.ContextExecutor, *SapProcessOrderConfirmationConfirmationDatum) error

	sapProcessOrderConfirmationConfirmationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProcessOrderConfirmationConfirmationDatumType                 = reflect.TypeOf(&SapProcessOrderConfirmationConfirmationDatum{})
	sapProcessOrderConfirmationConfirmationDatumMapping              = queries.MakeStructMapping(sapProcessOrderConfirmationConfirmationDatumType)
	sapProcessOrderConfirmationConfirmationDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns)
	sapProcessOrderConfirmationConfirmationDatumInsertCacheMut       sync.RWMutex
	sapProcessOrderConfirmationConfirmationDatumInsertCache          = make(map[string]insertCache)
	sapProcessOrderConfirmationConfirmationDatumUpdateCacheMut       sync.RWMutex
	sapProcessOrderConfirmationConfirmationDatumUpdateCache          = make(map[string]updateCache)
	sapProcessOrderConfirmationConfirmationDatumUpsertCacheMut       sync.RWMutex
	sapProcessOrderConfirmationConfirmationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProcessOrderConfirmationConfirmationDatumAfterSelectHooks []SapProcessOrderConfirmationConfirmationDatumHook

var sapProcessOrderConfirmationConfirmationDatumBeforeInsertHooks []SapProcessOrderConfirmationConfirmationDatumHook
var sapProcessOrderConfirmationConfirmationDatumAfterInsertHooks []SapProcessOrderConfirmationConfirmationDatumHook

var sapProcessOrderConfirmationConfirmationDatumBeforeUpdateHooks []SapProcessOrderConfirmationConfirmationDatumHook
var sapProcessOrderConfirmationConfirmationDatumAfterUpdateHooks []SapProcessOrderConfirmationConfirmationDatumHook

var sapProcessOrderConfirmationConfirmationDatumBeforeDeleteHooks []SapProcessOrderConfirmationConfirmationDatumHook
var sapProcessOrderConfirmationConfirmationDatumAfterDeleteHooks []SapProcessOrderConfirmationConfirmationDatumHook

var sapProcessOrderConfirmationConfirmationDatumBeforeUpsertHooks []SapProcessOrderConfirmationConfirmationDatumHook
var sapProcessOrderConfirmationConfirmationDatumAfterUpsertHooks []SapProcessOrderConfirmationConfirmationDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProcessOrderConfirmationConfirmationDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationConfirmationDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProcessOrderConfirmationConfirmationDatumHook registers your hook function for all future operations.
func AddSapProcessOrderConfirmationConfirmationDatumHook(hookPoint boil.HookPoint, sapProcessOrderConfirmationConfirmationDatumHook SapProcessOrderConfirmationConfirmationDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProcessOrderConfirmationConfirmationDatumAfterSelectHooks = append(sapProcessOrderConfirmationConfirmationDatumAfterSelectHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.BeforeInsertHook:
		sapProcessOrderConfirmationConfirmationDatumBeforeInsertHooks = append(sapProcessOrderConfirmationConfirmationDatumBeforeInsertHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.AfterInsertHook:
		sapProcessOrderConfirmationConfirmationDatumAfterInsertHooks = append(sapProcessOrderConfirmationConfirmationDatumAfterInsertHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.BeforeUpdateHook:
		sapProcessOrderConfirmationConfirmationDatumBeforeUpdateHooks = append(sapProcessOrderConfirmationConfirmationDatumBeforeUpdateHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.AfterUpdateHook:
		sapProcessOrderConfirmationConfirmationDatumAfterUpdateHooks = append(sapProcessOrderConfirmationConfirmationDatumAfterUpdateHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.BeforeDeleteHook:
		sapProcessOrderConfirmationConfirmationDatumBeforeDeleteHooks = append(sapProcessOrderConfirmationConfirmationDatumBeforeDeleteHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.AfterDeleteHook:
		sapProcessOrderConfirmationConfirmationDatumAfterDeleteHooks = append(sapProcessOrderConfirmationConfirmationDatumAfterDeleteHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.BeforeUpsertHook:
		sapProcessOrderConfirmationConfirmationDatumBeforeUpsertHooks = append(sapProcessOrderConfirmationConfirmationDatumBeforeUpsertHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	case boil.AfterUpsertHook:
		sapProcessOrderConfirmationConfirmationDatumAfterUpsertHooks = append(sapProcessOrderConfirmationConfirmationDatumAfterUpsertHooks, sapProcessOrderConfirmationConfirmationDatumHook)
	}
}

// One returns a single sapProcessOrderConfirmationConfirmationDatum record from the query.
func (q sapProcessOrderConfirmationConfirmationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProcessOrderConfirmationConfirmationDatum, error) {
	o := &SapProcessOrderConfirmationConfirmationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_process_order_confirmation_confirmation_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProcessOrderConfirmationConfirmationDatum records from the query.
func (q sapProcessOrderConfirmationConfirmationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProcessOrderConfirmationConfirmationDatumSlice, error) {
	var o []*SapProcessOrderConfirmationConfirmationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProcessOrderConfirmationConfirmationDatum slice")
	}

	if len(sapProcessOrderConfirmationConfirmationDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProcessOrderConfirmationConfirmationDatum records in the query.
func (q sapProcessOrderConfirmationConfirmationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_process_order_confirmation_confirmation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProcessOrderConfirmationConfirmationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_process_order_confirmation_confirmation_data exists")
	}

	return count > 0, nil
}

// OrderIDSapProcessOrderConfirmationBatchCharacteristicData retrieves all the sap_process_order_confirmation_batch_characteristic_datum's SapProcessOrderConfirmationBatchCharacteristicData with an executor via OrderID column.
func (o *SapProcessOrderConfirmationConfirmationDatum) OrderIDSapProcessOrderConfirmationBatchCharacteristicData(mods ...qm.QueryMod) sapProcessOrderConfirmationBatchCharacteristicDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_process_order_confirmation_batch_characteristic_data`.`OrderID`=?", o.OrderID),
	)

	return SapProcessOrderConfirmationBatchCharacteristicData(queryMods...)
}

// OrderIDSapProcessOrderConfirmationMaterialMovementsData retrieves all the sap_process_order_confirmation_material_movements_datum's SapProcessOrderConfirmationMaterialMovementsData with an executor via OrderID column.
func (o *SapProcessOrderConfirmationConfirmationDatum) OrderIDSapProcessOrderConfirmationMaterialMovementsData(mods ...qm.QueryMod) sapProcessOrderConfirmationMaterialMovementsDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_process_order_confirmation_material_movements_data`.`OrderID`=?", o.OrderID),
	)

	return SapProcessOrderConfirmationMaterialMovementsData(queryMods...)
}

// LoadOrderIDSapProcessOrderConfirmationBatchCharacteristicData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProcessOrderConfirmationConfirmationDatumL) LoadOrderIDSapProcessOrderConfirmationBatchCharacteristicData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProcessOrderConfirmationConfirmationDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProcessOrderConfirmationConfirmationDatum
	var object *SapProcessOrderConfirmationConfirmationDatum

	if singular {
		object = maybeSapProcessOrderConfirmationConfirmationDatum.(*SapProcessOrderConfirmationConfirmationDatum)
	} else {
		slice = *maybeSapProcessOrderConfirmationConfirmationDatum.(*[]*SapProcessOrderConfirmationConfirmationDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProcessOrderConfirmationConfirmationDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProcessOrderConfirmationConfirmationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_process_order_confirmation_batch_characteristic_data`),
		qm.WhereIn(`sap_process_order_confirmation_batch_characteristic_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_process_order_confirmation_batch_characteristic_data")
	}

	var resultSlice []*SapProcessOrderConfirmationBatchCharacteristicDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_process_order_confirmation_batch_characteristic_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_process_order_confirmation_batch_characteristic_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_process_order_confirmation_batch_characteristic_data")
	}

	if len(sapProcessOrderConfirmationBatchCharacteristicDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProcessOrderConfirmationBatchCharacteristicDatumR{}
			}
			foreign.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = append(local.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProcessOrderConfirmationBatchCharacteristicDatumR{}
				}
				foreign.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = local
				break
			}
		}
	}

	return nil
}

// LoadOrderIDSapProcessOrderConfirmationMaterialMovementsData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapProcessOrderConfirmationConfirmationDatumL) LoadOrderIDSapProcessOrderConfirmationMaterialMovementsData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProcessOrderConfirmationConfirmationDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProcessOrderConfirmationConfirmationDatum
	var object *SapProcessOrderConfirmationConfirmationDatum

	if singular {
		object = maybeSapProcessOrderConfirmationConfirmationDatum.(*SapProcessOrderConfirmationConfirmationDatum)
	} else {
		slice = *maybeSapProcessOrderConfirmationConfirmationDatum.(*[]*SapProcessOrderConfirmationConfirmationDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProcessOrderConfirmationConfirmationDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProcessOrderConfirmationConfirmationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_process_order_confirmation_material_movements_data`),
		qm.WhereIn(`sap_process_order_confirmation_material_movements_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_process_order_confirmation_material_movements_data")
	}

	var resultSlice []*SapProcessOrderConfirmationMaterialMovementsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_process_order_confirmation_material_movements_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_process_order_confirmation_material_movements_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_process_order_confirmation_material_movements_data")
	}

	if len(sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapProcessOrderConfirmationMaterialMovementsDatumR{}
			}
			foreign.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = append(local.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData, foreign)
				if foreign.R == nil {
					foreign.R = &sapProcessOrderConfirmationMaterialMovementsDatumR{}
				}
				foreign.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = local
				break
			}
		}
	}

	return nil
}

// AddOrderIDSapProcessOrderConfirmationBatchCharacteristicData adds the given related objects to the existing relationships
// of the sap_process_order_confirmation_confirmation_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData.
// Sets related.R.OrderIDSapProcessOrderConfirmationConfirmationDatum appropriately.
func (o *SapProcessOrderConfirmationConfirmationDatum) AddOrderIDSapProcessOrderConfirmationBatchCharacteristicData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProcessOrderConfirmationBatchCharacteristicDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_process_order_confirmation_batch_characteristic_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationBatchCharacteristicDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.Batch}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &sapProcessOrderConfirmationConfirmationDatumR{
			OrderIDSapProcessOrderConfirmationBatchCharacteristicData: related,
		}
	} else {
		o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = append(o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProcessOrderConfirmationBatchCharacteristicDatumR{
				OrderIDSapProcessOrderConfirmationConfirmationDatum: o,
			}
		} else {
			rel.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = o
		}
	}
	return nil
}

// SetOrderIDSapProcessOrderConfirmationBatchCharacteristicData removes all previously related items of the
// sap_process_order_confirmation_confirmation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum's OrderIDSapProcessOrderConfirmationBatchCharacteristicData accordingly.
// Replaces o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData with related.
// Sets related.R.OrderIDSapProcessOrderConfirmationConfirmationDatum's OrderIDSapProcessOrderConfirmationBatchCharacteristicData accordingly.
func (o *SapProcessOrderConfirmationConfirmationDatum) SetOrderIDSapProcessOrderConfirmationBatchCharacteristicData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProcessOrderConfirmationBatchCharacteristicDatum) error {
	query := "update `sap_process_order_confirmation_batch_characteristic_data` set `OrderID` = null where `OrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = nil
		}
		o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = nil
	}

	return o.AddOrderIDSapProcessOrderConfirmationBatchCharacteristicData(ctx, exec, insert, related...)
}

// RemoveOrderIDSapProcessOrderConfirmationBatchCharacteristicData relationships from objects passed in.
// Removes related items from R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderIDSapProcessOrderConfirmationConfirmationDatum.
func (o *SapProcessOrderConfirmationConfirmationDatum) RemoveOrderIDSapProcessOrderConfirmationBatchCharacteristicData(ctx context.Context, exec boil.ContextExecutor, related ...*SapProcessOrderConfirmationBatchCharacteristicDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData)
			if ln > 1 && i < ln-1 {
				o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData[i] = o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData[ln-1]
			}
			o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData = o.R.OrderIDSapProcessOrderConfirmationBatchCharacteristicData[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderIDSapProcessOrderConfirmationMaterialMovementsData adds the given related objects to the existing relationships
// of the sap_process_order_confirmation_confirmation_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData.
// Sets related.R.OrderIDSapProcessOrderConfirmationConfirmationDatum appropriately.
func (o *SapProcessOrderConfirmationConfirmationDatum) AddOrderIDSapProcessOrderConfirmationMaterialMovementsData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProcessOrderConfirmationMaterialMovementsDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_process_order_confirmation_material_movements_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.Batch}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &sapProcessOrderConfirmationConfirmationDatumR{
			OrderIDSapProcessOrderConfirmationMaterialMovementsData: related,
		}
	} else {
		o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = append(o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapProcessOrderConfirmationMaterialMovementsDatumR{
				OrderIDSapProcessOrderConfirmationConfirmationDatum: o,
			}
		} else {
			rel.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = o
		}
	}
	return nil
}

// SetOrderIDSapProcessOrderConfirmationMaterialMovementsData removes all previously related items of the
// sap_process_order_confirmation_confirmation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum's OrderIDSapProcessOrderConfirmationMaterialMovementsData accordingly.
// Replaces o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData with related.
// Sets related.R.OrderIDSapProcessOrderConfirmationConfirmationDatum's OrderIDSapProcessOrderConfirmationMaterialMovementsData accordingly.
func (o *SapProcessOrderConfirmationConfirmationDatum) SetOrderIDSapProcessOrderConfirmationMaterialMovementsData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapProcessOrderConfirmationMaterialMovementsDatum) error {
	query := "update `sap_process_order_confirmation_material_movements_data` set `OrderID` = null where `OrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = nil
		}
		o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = nil
	}

	return o.AddOrderIDSapProcessOrderConfirmationMaterialMovementsData(ctx, exec, insert, related...)
}

// RemoveOrderIDSapProcessOrderConfirmationMaterialMovementsData relationships from objects passed in.
// Removes related items from R.OrderIDSapProcessOrderConfirmationMaterialMovementsData (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderIDSapProcessOrderConfirmationConfirmationDatum.
func (o *SapProcessOrderConfirmationConfirmationDatum) RemoveOrderIDSapProcessOrderConfirmationMaterialMovementsData(ctx context.Context, exec boil.ContextExecutor, related ...*SapProcessOrderConfirmationMaterialMovementsDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData)
			if ln > 1 && i < ln-1 {
				o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData[i] = o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData[ln-1]
			}
			o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = o.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData[:ln-1]
			break
		}
	}

	return nil
}

// SapProcessOrderConfirmationConfirmationData retrieves all the records using an executor.
func SapProcessOrderConfirmationConfirmationData(mods ...qm.QueryMod) sapProcessOrderConfirmationConfirmationDatumQuery {
	mods = append(mods, qm.From("`sap_process_order_confirmation_confirmation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_process_order_confirmation_confirmation_data`.*"})
	}

	return sapProcessOrderConfirmationConfirmationDatumQuery{q}
}

// FindSapProcessOrderConfirmationConfirmationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, exec boil.ContextExecutor, orderID string, selectCols ...string) (*SapProcessOrderConfirmationConfirmationDatum, error) {
	sapProcessOrderConfirmationConfirmationDatumObj := &SapProcessOrderConfirmationConfirmationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_process_order_confirmation_confirmation_data` where `OrderID`=?", sel,
	)

	q := queries.Raw(query, orderID)

	err := q.Bind(ctx, exec, sapProcessOrderConfirmationConfirmationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_process_order_confirmation_confirmation_data")
	}

	if err = sapProcessOrderConfirmationConfirmationDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProcessOrderConfirmationConfirmationDatumObj, err
	}

	return sapProcessOrderConfirmationConfirmationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProcessOrderConfirmationConfirmationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_process_order_confirmation_confirmation_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProcessOrderConfirmationConfirmationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProcessOrderConfirmationConfirmationDatumInsertCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationConfirmationDatumInsertCache[key]
	sapProcessOrderConfirmationConfirmationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProcessOrderConfirmationConfirmationDatumAllColumns,
			sapProcessOrderConfirmationConfirmationDatumColumnsWithDefault,
			sapProcessOrderConfirmationConfirmationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_process_order_confirmation_confirmation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_process_order_confirmation_confirmation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_process_order_confirmation_confirmation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_process_order_confirmation_confirmation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_process_order_confirmation_confirmation_data")
	}

CacheNoHooks:
	if !cached {
		sapProcessOrderConfirmationConfirmationDatumInsertCacheMut.Lock()
		sapProcessOrderConfirmationConfirmationDatumInsertCache[key] = cache
		sapProcessOrderConfirmationConfirmationDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProcessOrderConfirmationConfirmationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProcessOrderConfirmationConfirmationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProcessOrderConfirmationConfirmationDatumUpdateCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationConfirmationDatumUpdateCache[key]
	sapProcessOrderConfirmationConfirmationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProcessOrderConfirmationConfirmationDatumAllColumns,
			sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_process_order_confirmation_confirmation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_process_order_confirmation_confirmation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, append(wl, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_process_order_confirmation_confirmation_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_process_order_confirmation_confirmation_data")
	}

	if !cached {
		sapProcessOrderConfirmationConfirmationDatumUpdateCacheMut.Lock()
		sapProcessOrderConfirmationConfirmationDatumUpdateCache[key] = cache
		sapProcessOrderConfirmationConfirmationDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProcessOrderConfirmationConfirmationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_process_order_confirmation_confirmation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_process_order_confirmation_confirmation_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProcessOrderConfirmationConfirmationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationConfirmationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_process_order_confirmation_confirmation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProcessOrderConfirmationConfirmationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProcessOrderConfirmationConfirmationDatum")
	}
	return rowsAff, nil
}

var mySQLSapProcessOrderConfirmationConfirmationDatumUniqueColumns = []string{
	"OrderID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProcessOrderConfirmationConfirmationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_process_order_confirmation_confirmation_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProcessOrderConfirmationConfirmationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProcessOrderConfirmationConfirmationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProcessOrderConfirmationConfirmationDatumUpsertCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationConfirmationDatumUpsertCache[key]
	sapProcessOrderConfirmationConfirmationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProcessOrderConfirmationConfirmationDatumAllColumns,
			sapProcessOrderConfirmationConfirmationDatumColumnsWithDefault,
			sapProcessOrderConfirmationConfirmationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProcessOrderConfirmationConfirmationDatumAllColumns,
			sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_process_order_confirmation_confirmation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_process_order_confirmation_confirmation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_process_order_confirmation_confirmation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_process_order_confirmation_confirmation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProcessOrderConfirmationConfirmationDatumType, sapProcessOrderConfirmationConfirmationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_process_order_confirmation_confirmation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_process_order_confirmation_confirmation_data")
	}

CacheNoHooks:
	if !cached {
		sapProcessOrderConfirmationConfirmationDatumUpsertCacheMut.Lock()
		sapProcessOrderConfirmationConfirmationDatumUpsertCache[key] = cache
		sapProcessOrderConfirmationConfirmationDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProcessOrderConfirmationConfirmationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProcessOrderConfirmationConfirmationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProcessOrderConfirmationConfirmationDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProcessOrderConfirmationConfirmationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_process_order_confirmation_confirmation_data` WHERE `OrderID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_process_order_confirmation_confirmation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_process_order_confirmation_confirmation_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProcessOrderConfirmationConfirmationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProcessOrderConfirmationConfirmationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_process_order_confirmation_confirmation_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_process_order_confirmation_confirmation_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProcessOrderConfirmationConfirmationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProcessOrderConfirmationConfirmationDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationConfirmationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_process_order_confirmation_confirmation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProcessOrderConfirmationConfirmationDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_process_order_confirmation_confirmation_data")
	}

	if len(sapProcessOrderConfirmationConfirmationDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProcessOrderConfirmationConfirmationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProcessOrderConfirmationConfirmationDatum(ctx, exec, o.OrderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProcessOrderConfirmationConfirmationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProcessOrderConfirmationConfirmationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationConfirmationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_process_order_confirmation_confirmation_data`.* FROM `sap_process_order_confirmation_confirmation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationConfirmationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProcessOrderConfirmationConfirmationDatumSlice")
	}

	*o = slice

	return nil
}

// SapProcessOrderConfirmationConfirmationDatumExists checks if the SapProcessOrderConfirmationConfirmationDatum row exists.
func SapProcessOrderConfirmationConfirmationDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_process_order_confirmation_confirmation_data` where `OrderID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_process_order_confirmation_confirmation_data exists")
	}

	return exists, nil
}
