// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceTaskListHeaderDatum is an object representing the database table.
type SapMaintenanceTaskListHeaderDatum struct {
	TaskListType                string      `boil:"TaskListType" json:"TaskListType" toml:"TaskListType" yaml:"TaskListType"`
	TaskListGroup               string      `boil:"TaskListGroup" json:"TaskListGroup" toml:"TaskListGroup" yaml:"TaskListGroup"`
	TaskListGroupCounter        string      `boil:"TaskListGroupCounter" json:"TaskListGroupCounter" toml:"TaskListGroupCounter" yaml:"TaskListGroupCounter"`
	TaskListVersionCounter      string      `boil:"TaskListVersionCounter" json:"TaskListVersionCounter" toml:"TaskListVersionCounter" yaml:"TaskListVersionCounter"`
	MaintenancePlanningPlant    null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	TaskListStatus              null.String `boil:"TaskListStatus" json:"TaskListStatus,omitempty" toml:"TaskListStatus" yaml:"TaskListStatus,omitempty"`
	TaskListStatusDesc          null.String `boil:"TaskListStatusDesc" json:"TaskListStatusDesc,omitempty" toml:"TaskListStatusDesc" yaml:"TaskListStatusDesc,omitempty"`
	TechnicalObject             null.String `boil:"TechnicalObject" json:"TechnicalObject,omitempty" toml:"TechnicalObject" yaml:"TechnicalObject,omitempty"`
	TaskListUsage               null.String `boil:"TaskListUsage" json:"TaskListUsage,omitempty" toml:"TaskListUsage" yaml:"TaskListUsage,omitempty"`
	TaskListDesc                null.String `boil:"TaskListDesc" json:"TaskListDesc,omitempty" toml:"TaskListDesc" yaml:"TaskListDesc,omitempty"`
	WorkCenter                  null.String `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	MaintenanceStrategy         null.String `boil:"MaintenanceStrategy" json:"MaintenanceStrategy,omitempty" toml:"MaintenanceStrategy" yaml:"MaintenanceStrategy,omitempty"`
	OperationSystemCondition    null.String `boil:"OperationSystemCondition" json:"OperationSystemCondition,omitempty" toml:"OperationSystemCondition" yaml:"OperationSystemCondition,omitempty"`
	Assembly                    null.String `boil:"Assembly" json:"Assembly,omitempty" toml:"Assembly" yaml:"Assembly,omitempty"`
	ChangeNumber                null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ValidityStartDate           null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate             null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	IsMarkedForDeletion         null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	LastChangeDate              null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	CreationDate                null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	Plant                       null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	ResponsiblePlannerGroup     null.String `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	Equipment                   null.String `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	FunctionalLocationLabelName null.String `boil:"FunctionalLocationLabelName" json:"FunctionalLocationLabelName,omitempty" toml:"FunctionalLocationLabelName" yaml:"FunctionalLocationLabelName,omitempty"`
	TaskListIsHierarchical      null.Bool   `boil:"TaskListIsHierarchical" json:"TaskListIsHierarchical,omitempty" toml:"TaskListIsHierarchical" yaml:"TaskListIsHierarchical,omitempty"`

	R *sapMaintenanceTaskListHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceTaskListHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceTaskListHeaderDatumColumns = struct {
	TaskListType                string
	TaskListGroup               string
	TaskListGroupCounter        string
	TaskListVersionCounter      string
	MaintenancePlanningPlant    string
	TaskListStatus              string
	TaskListStatusDesc          string
	TechnicalObject             string
	TaskListUsage               string
	TaskListDesc                string
	WorkCenter                  string
	MaintenanceStrategy         string
	OperationSystemCondition    string
	Assembly                    string
	ChangeNumber                string
	ValidityStartDate           string
	ValidityEndDate             string
	IsMarkedForDeletion         string
	LastChangeDate              string
	CreationDate                string
	Plant                       string
	ResponsiblePlannerGroup     string
	Equipment                   string
	FunctionalLocationLabelName string
	TaskListIsHierarchical      string
}{
	TaskListType:                "TaskListType",
	TaskListGroup:               "TaskListGroup",
	TaskListGroupCounter:        "TaskListGroupCounter",
	TaskListVersionCounter:      "TaskListVersionCounter",
	MaintenancePlanningPlant:    "MaintenancePlanningPlant",
	TaskListStatus:              "TaskListStatus",
	TaskListStatusDesc:          "TaskListStatusDesc",
	TechnicalObject:             "TechnicalObject",
	TaskListUsage:               "TaskListUsage",
	TaskListDesc:                "TaskListDesc",
	WorkCenter:                  "WorkCenter",
	MaintenanceStrategy:         "MaintenanceStrategy",
	OperationSystemCondition:    "OperationSystemCondition",
	Assembly:                    "Assembly",
	ChangeNumber:                "ChangeNumber",
	ValidityStartDate:           "ValidityStartDate",
	ValidityEndDate:             "ValidityEndDate",
	IsMarkedForDeletion:         "IsMarkedForDeletion",
	LastChangeDate:              "LastChangeDate",
	CreationDate:                "CreationDate",
	Plant:                       "Plant",
	ResponsiblePlannerGroup:     "ResponsiblePlannerGroup",
	Equipment:                   "Equipment",
	FunctionalLocationLabelName: "FunctionalLocationLabelName",
	TaskListIsHierarchical:      "TaskListIsHierarchical",
}

var SapMaintenanceTaskListHeaderDatumTableColumns = struct {
	TaskListType                string
	TaskListGroup               string
	TaskListGroupCounter        string
	TaskListVersionCounter      string
	MaintenancePlanningPlant    string
	TaskListStatus              string
	TaskListStatusDesc          string
	TechnicalObject             string
	TaskListUsage               string
	TaskListDesc                string
	WorkCenter                  string
	MaintenanceStrategy         string
	OperationSystemCondition    string
	Assembly                    string
	ChangeNumber                string
	ValidityStartDate           string
	ValidityEndDate             string
	IsMarkedForDeletion         string
	LastChangeDate              string
	CreationDate                string
	Plant                       string
	ResponsiblePlannerGroup     string
	Equipment                   string
	FunctionalLocationLabelName string
	TaskListIsHierarchical      string
}{
	TaskListType:                "sap_maintenance_task_list_header_data.TaskListType",
	TaskListGroup:               "sap_maintenance_task_list_header_data.TaskListGroup",
	TaskListGroupCounter:        "sap_maintenance_task_list_header_data.TaskListGroupCounter",
	TaskListVersionCounter:      "sap_maintenance_task_list_header_data.TaskListVersionCounter",
	MaintenancePlanningPlant:    "sap_maintenance_task_list_header_data.MaintenancePlanningPlant",
	TaskListStatus:              "sap_maintenance_task_list_header_data.TaskListStatus",
	TaskListStatusDesc:          "sap_maintenance_task_list_header_data.TaskListStatusDesc",
	TechnicalObject:             "sap_maintenance_task_list_header_data.TechnicalObject",
	TaskListUsage:               "sap_maintenance_task_list_header_data.TaskListUsage",
	TaskListDesc:                "sap_maintenance_task_list_header_data.TaskListDesc",
	WorkCenter:                  "sap_maintenance_task_list_header_data.WorkCenter",
	MaintenanceStrategy:         "sap_maintenance_task_list_header_data.MaintenanceStrategy",
	OperationSystemCondition:    "sap_maintenance_task_list_header_data.OperationSystemCondition",
	Assembly:                    "sap_maintenance_task_list_header_data.Assembly",
	ChangeNumber:                "sap_maintenance_task_list_header_data.ChangeNumber",
	ValidityStartDate:           "sap_maintenance_task_list_header_data.ValidityStartDate",
	ValidityEndDate:             "sap_maintenance_task_list_header_data.ValidityEndDate",
	IsMarkedForDeletion:         "sap_maintenance_task_list_header_data.IsMarkedForDeletion",
	LastChangeDate:              "sap_maintenance_task_list_header_data.LastChangeDate",
	CreationDate:                "sap_maintenance_task_list_header_data.CreationDate",
	Plant:                       "sap_maintenance_task_list_header_data.Plant",
	ResponsiblePlannerGroup:     "sap_maintenance_task_list_header_data.ResponsiblePlannerGroup",
	Equipment:                   "sap_maintenance_task_list_header_data.Equipment",
	FunctionalLocationLabelName: "sap_maintenance_task_list_header_data.FunctionalLocationLabelName",
	TaskListIsHierarchical:      "sap_maintenance_task_list_header_data.TaskListIsHierarchical",
}

// Generated where

var SapMaintenanceTaskListHeaderDatumWhere = struct {
	TaskListType                whereHelperstring
	TaskListGroup               whereHelperstring
	TaskListGroupCounter        whereHelperstring
	TaskListVersionCounter      whereHelperstring
	MaintenancePlanningPlant    whereHelpernull_String
	TaskListStatus              whereHelpernull_String
	TaskListStatusDesc          whereHelpernull_String
	TechnicalObject             whereHelpernull_String
	TaskListUsage               whereHelpernull_String
	TaskListDesc                whereHelpernull_String
	WorkCenter                  whereHelpernull_String
	MaintenanceStrategy         whereHelpernull_String
	OperationSystemCondition    whereHelpernull_String
	Assembly                    whereHelpernull_String
	ChangeNumber                whereHelpernull_String
	ValidityStartDate           whereHelpernull_String
	ValidityEndDate             whereHelpernull_String
	IsMarkedForDeletion         whereHelpernull_Bool
	LastChangeDate              whereHelpernull_String
	CreationDate                whereHelpernull_String
	Plant                       whereHelpernull_String
	ResponsiblePlannerGroup     whereHelpernull_String
	Equipment                   whereHelpernull_String
	FunctionalLocationLabelName whereHelpernull_String
	TaskListIsHierarchical      whereHelpernull_Bool
}{
	TaskListType:                whereHelperstring{field: "`sap_maintenance_task_list_header_data`.`TaskListType`"},
	TaskListGroup:               whereHelperstring{field: "`sap_maintenance_task_list_header_data`.`TaskListGroup`"},
	TaskListGroupCounter:        whereHelperstring{field: "`sap_maintenance_task_list_header_data`.`TaskListGroupCounter`"},
	TaskListVersionCounter:      whereHelperstring{field: "`sap_maintenance_task_list_header_data`.`TaskListVersionCounter`"},
	MaintenancePlanningPlant:    whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`MaintenancePlanningPlant`"},
	TaskListStatus:              whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`TaskListStatus`"},
	TaskListStatusDesc:          whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`TaskListStatusDesc`"},
	TechnicalObject:             whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`TechnicalObject`"},
	TaskListUsage:               whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`TaskListUsage`"},
	TaskListDesc:                whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`TaskListDesc`"},
	WorkCenter:                  whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`WorkCenter`"},
	MaintenanceStrategy:         whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`MaintenanceStrategy`"},
	OperationSystemCondition:    whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`OperationSystemCondition`"},
	Assembly:                    whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`Assembly`"},
	ChangeNumber:                whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`ChangeNumber`"},
	ValidityStartDate:           whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`ValidityStartDate`"},
	ValidityEndDate:             whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`ValidityEndDate`"},
	IsMarkedForDeletion:         whereHelpernull_Bool{field: "`sap_maintenance_task_list_header_data`.`IsMarkedForDeletion`"},
	LastChangeDate:              whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`LastChangeDate`"},
	CreationDate:                whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`CreationDate`"},
	Plant:                       whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`Plant`"},
	ResponsiblePlannerGroup:     whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`ResponsiblePlannerGroup`"},
	Equipment:                   whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`Equipment`"},
	FunctionalLocationLabelName: whereHelpernull_String{field: "`sap_maintenance_task_list_header_data`.`FunctionalLocationLabelName`"},
	TaskListIsHierarchical:      whereHelpernull_Bool{field: "`sap_maintenance_task_list_header_data`.`TaskListIsHierarchical`"},
}

// SapMaintenanceTaskListHeaderDatumRels is where relationship names are stored.
var SapMaintenanceTaskListHeaderDatumRels = struct {
}{}

// sapMaintenanceTaskListHeaderDatumR is where relationships are stored.
type sapMaintenanceTaskListHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceTaskListHeaderDatumR) NewStruct() *sapMaintenanceTaskListHeaderDatumR {
	return &sapMaintenanceTaskListHeaderDatumR{}
}

// sapMaintenanceTaskListHeaderDatumL is where Load methods for each relationship are stored.
type sapMaintenanceTaskListHeaderDatumL struct{}

var (
	sapMaintenanceTaskListHeaderDatumAllColumns            = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListVersionCounter", "MaintenancePlanningPlant", "TaskListStatus", "TaskListStatusDesc", "TechnicalObject", "TaskListUsage", "TaskListDesc", "WorkCenter", "MaintenanceStrategy", "OperationSystemCondition", "Assembly", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "IsMarkedForDeletion", "LastChangeDate", "CreationDate", "Plant", "ResponsiblePlannerGroup", "Equipment", "FunctionalLocationLabelName", "TaskListIsHierarchical"}
	sapMaintenanceTaskListHeaderDatumColumnsWithoutDefault = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListVersionCounter", "MaintenancePlanningPlant", "TaskListStatus", "TaskListStatusDesc", "TechnicalObject", "TaskListUsage", "TaskListDesc", "WorkCenter", "MaintenanceStrategy", "OperationSystemCondition", "Assembly", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "IsMarkedForDeletion", "LastChangeDate", "CreationDate", "Plant", "ResponsiblePlannerGroup", "Equipment", "FunctionalLocationLabelName", "TaskListIsHierarchical"}
	sapMaintenanceTaskListHeaderDatumColumnsWithDefault    = []string{}
	sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns     = []string{"TaskListType", "TaskListGroup", "TaskListGroupCounter", "TaskListVersionCounter"}
	sapMaintenanceTaskListHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceTaskListHeaderDatumSlice is an alias for a slice of pointers to SapMaintenanceTaskListHeaderDatum.
	// This should almost always be used instead of []SapMaintenanceTaskListHeaderDatum.
	SapMaintenanceTaskListHeaderDatumSlice []*SapMaintenanceTaskListHeaderDatum
	// SapMaintenanceTaskListHeaderDatumHook is the signature for custom SapMaintenanceTaskListHeaderDatum hook methods
	SapMaintenanceTaskListHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceTaskListHeaderDatum) error

	sapMaintenanceTaskListHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceTaskListHeaderDatumType                 = reflect.TypeOf(&SapMaintenanceTaskListHeaderDatum{})
	sapMaintenanceTaskListHeaderDatumMapping              = queries.MakeStructMapping(sapMaintenanceTaskListHeaderDatumType)
	sapMaintenanceTaskListHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns)
	sapMaintenanceTaskListHeaderDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceTaskListHeaderDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceTaskListHeaderDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceTaskListHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceTaskListHeaderDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceTaskListHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceTaskListHeaderDatumAfterSelectHooks []SapMaintenanceTaskListHeaderDatumHook

var sapMaintenanceTaskListHeaderDatumBeforeInsertHooks []SapMaintenanceTaskListHeaderDatumHook
var sapMaintenanceTaskListHeaderDatumAfterInsertHooks []SapMaintenanceTaskListHeaderDatumHook

var sapMaintenanceTaskListHeaderDatumBeforeUpdateHooks []SapMaintenanceTaskListHeaderDatumHook
var sapMaintenanceTaskListHeaderDatumAfterUpdateHooks []SapMaintenanceTaskListHeaderDatumHook

var sapMaintenanceTaskListHeaderDatumBeforeDeleteHooks []SapMaintenanceTaskListHeaderDatumHook
var sapMaintenanceTaskListHeaderDatumAfterDeleteHooks []SapMaintenanceTaskListHeaderDatumHook

var sapMaintenanceTaskListHeaderDatumBeforeUpsertHooks []SapMaintenanceTaskListHeaderDatumHook
var sapMaintenanceTaskListHeaderDatumAfterUpsertHooks []SapMaintenanceTaskListHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceTaskListHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceTaskListHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceTaskListHeaderDatumHook registers your hook function for all future operations.
func AddSapMaintenanceTaskListHeaderDatumHook(hookPoint boil.HookPoint, sapMaintenanceTaskListHeaderDatumHook SapMaintenanceTaskListHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceTaskListHeaderDatumAfterSelectHooks = append(sapMaintenanceTaskListHeaderDatumAfterSelectHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceTaskListHeaderDatumBeforeInsertHooks = append(sapMaintenanceTaskListHeaderDatumBeforeInsertHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceTaskListHeaderDatumAfterInsertHooks = append(sapMaintenanceTaskListHeaderDatumAfterInsertHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceTaskListHeaderDatumBeforeUpdateHooks = append(sapMaintenanceTaskListHeaderDatumBeforeUpdateHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceTaskListHeaderDatumAfterUpdateHooks = append(sapMaintenanceTaskListHeaderDatumAfterUpdateHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceTaskListHeaderDatumBeforeDeleteHooks = append(sapMaintenanceTaskListHeaderDatumBeforeDeleteHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceTaskListHeaderDatumAfterDeleteHooks = append(sapMaintenanceTaskListHeaderDatumAfterDeleteHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceTaskListHeaderDatumBeforeUpsertHooks = append(sapMaintenanceTaskListHeaderDatumBeforeUpsertHooks, sapMaintenanceTaskListHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceTaskListHeaderDatumAfterUpsertHooks = append(sapMaintenanceTaskListHeaderDatumAfterUpsertHooks, sapMaintenanceTaskListHeaderDatumHook)
	}
}

// One returns a single sapMaintenanceTaskListHeaderDatum record from the query.
func (q sapMaintenanceTaskListHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceTaskListHeaderDatum, error) {
	o := &SapMaintenanceTaskListHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_task_list_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceTaskListHeaderDatum records from the query.
func (q sapMaintenanceTaskListHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceTaskListHeaderDatumSlice, error) {
	var o []*SapMaintenanceTaskListHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceTaskListHeaderDatum slice")
	}

	if len(sapMaintenanceTaskListHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceTaskListHeaderDatum records in the query.
func (q sapMaintenanceTaskListHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_task_list_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceTaskListHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_task_list_header_data exists")
	}

	return count > 0, nil
}

// SapMaintenanceTaskListHeaderData retrieves all the records using an executor.
func SapMaintenanceTaskListHeaderData(mods ...qm.QueryMod) sapMaintenanceTaskListHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_task_list_header_data`"))
	return sapMaintenanceTaskListHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceTaskListHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceTaskListHeaderDatum(ctx context.Context, exec boil.ContextExecutor, taskListType string, taskListGroup string, taskListGroupCounter string, taskListVersionCounter string, selectCols ...string) (*SapMaintenanceTaskListHeaderDatum, error) {
	sapMaintenanceTaskListHeaderDatumObj := &SapMaintenanceTaskListHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_task_list_header_data` where `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListVersionCounter`=?", sel,
	)

	q := queries.Raw(query, taskListType, taskListGroup, taskListGroupCounter, taskListVersionCounter)

	err := q.Bind(ctx, exec, sapMaintenanceTaskListHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_task_list_header_data")
	}

	if err = sapMaintenanceTaskListHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceTaskListHeaderDatumObj, err
	}

	return sapMaintenanceTaskListHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceTaskListHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_task_list_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceTaskListHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceTaskListHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListHeaderDatumInsertCache[key]
	sapMaintenanceTaskListHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceTaskListHeaderDatumAllColumns,
			sapMaintenanceTaskListHeaderDatumColumnsWithDefault,
			sapMaintenanceTaskListHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_task_list_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_task_list_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_task_list_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_task_list_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TaskListType,
		o.TaskListGroup,
		o.TaskListGroupCounter,
		o.TaskListVersionCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_task_list_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceTaskListHeaderDatumInsertCacheMut.Lock()
		sapMaintenanceTaskListHeaderDatumInsertCache[key] = cache
		sapMaintenanceTaskListHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceTaskListHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceTaskListHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceTaskListHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListHeaderDatumUpdateCache[key]
	sapMaintenanceTaskListHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceTaskListHeaderDatumAllColumns,
			sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_task_list_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_task_list_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, append(wl, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_task_list_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_task_list_header_data")
	}

	if !cached {
		sapMaintenanceTaskListHeaderDatumUpdateCacheMut.Lock()
		sapMaintenanceTaskListHeaderDatumUpdateCache[key] = cache
		sapMaintenanceTaskListHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceTaskListHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_task_list_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_task_list_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceTaskListHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_task_list_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceTaskListHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceTaskListHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceTaskListHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceTaskListHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_task_list_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceTaskListHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceTaskListHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceTaskListHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceTaskListHeaderDatumUpsertCache[key]
	sapMaintenanceTaskListHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceTaskListHeaderDatumAllColumns,
			sapMaintenanceTaskListHeaderDatumColumnsWithDefault,
			sapMaintenanceTaskListHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceTaskListHeaderDatumAllColumns,
			sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_task_list_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_task_list_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_task_list_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_task_list_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceTaskListHeaderDatumType, sapMaintenanceTaskListHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_task_list_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_task_list_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceTaskListHeaderDatumUpsertCacheMut.Lock()
		sapMaintenanceTaskListHeaderDatumUpsertCache[key] = cache
		sapMaintenanceTaskListHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceTaskListHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceTaskListHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceTaskListHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceTaskListHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_task_list_header_data` WHERE `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListVersionCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_task_list_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_task_list_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceTaskListHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceTaskListHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_task_list_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_task_list_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceTaskListHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceTaskListHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_task_list_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceTaskListHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_task_list_header_data")
	}

	if len(sapMaintenanceTaskListHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceTaskListHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceTaskListHeaderDatum(ctx, exec, o.TaskListType, o.TaskListGroup, o.TaskListGroupCounter, o.TaskListVersionCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceTaskListHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceTaskListHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceTaskListHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_task_list_header_data`.* FROM `sap_maintenance_task_list_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceTaskListHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceTaskListHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceTaskListHeaderDatumExists checks if the SapMaintenanceTaskListHeaderDatum row exists.
func SapMaintenanceTaskListHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, taskListType string, taskListGroup string, taskListGroupCounter string, taskListVersionCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_task_list_header_data` where `TaskListType`=? AND `TaskListGroup`=? AND `TaskListGroupCounter`=? AND `TaskListVersionCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, taskListType, taskListGroup, taskListGroupCounter, taskListVersionCounter)
	}
	row := exec.QueryRowContext(ctx, sql, taskListType, taskListGroup, taskListGroupCounter, taskListVersionCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_task_list_header_data exists")
	}

	return exists, nil
}
