// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchaseOrderItemAccountDatum is an object representing the database table.
type SapPurchaseOrderItemAccountDatum struct {
	PurchaseOrder           string      `boil:"PurchaseOrder" json:"PurchaseOrder" toml:"PurchaseOrder" yaml:"PurchaseOrder"`
	PurchaseOrderItem       string      `boil:"PurchaseOrderItem" json:"PurchaseOrderItem" toml:"PurchaseOrderItem" yaml:"PurchaseOrderItem"`
	AccountAssignmentNumber string      `boil:"AccountAssignmentNumber" json:"AccountAssignmentNumber" toml:"AccountAssignmentNumber" yaml:"AccountAssignmentNumber"`
	GLAccount               null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	BusinessArea            null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	CostCenter              null.String `boil:"CostCenter" json:"CostCenter,omitempty" toml:"CostCenter" yaml:"CostCenter,omitempty"`
	SalesOrder              null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem          null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	SalesOrderScheduleLine  null.String `boil:"SalesOrderScheduleLine" json:"SalesOrderScheduleLine,omitempty" toml:"SalesOrderScheduleLine" yaml:"SalesOrderScheduleLine,omitempty"`
	MasterFixedAsset        null.String `boil:"MasterFixedAsset" json:"MasterFixedAsset,omitempty" toml:"MasterFixedAsset" yaml:"MasterFixedAsset,omitempty"`
	FixedAsset              null.String `boil:"FixedAsset" json:"FixedAsset,omitempty" toml:"FixedAsset" yaml:"FixedAsset,omitempty"`
	GoodsRecipientName      null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	UnloadingPointName      null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	ControllingArea         null.String `boil:"ControllingArea" json:"ControllingArea,omitempty" toml:"ControllingArea" yaml:"ControllingArea,omitempty"`
	CostObject              null.String `boil:"CostObject" json:"CostObject,omitempty" toml:"CostObject" yaml:"CostObject,omitempty"`
	OrderID                 null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	ProfitCenter            null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	WBSElement              null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ProjectNetwork          null.String `boil:"ProjectNetwork" json:"ProjectNetwork,omitempty" toml:"ProjectNetwork" yaml:"ProjectNetwork,omitempty"`
	FunctionalArea          null.String `boil:"FunctionalArea" json:"FunctionalArea,omitempty" toml:"FunctionalArea" yaml:"FunctionalArea,omitempty"`
	TaxCode                 null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	CostCtrActivityType     null.String `boil:"CostCtrActivityType" json:"CostCtrActivityType,omitempty" toml:"CostCtrActivityType" yaml:"CostCtrActivityType,omitempty"`
	IsDeleted               null.Bool   `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapPurchaseOrderItemAccountDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchaseOrderItemAccountDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchaseOrderItemAccountDatumColumns = struct {
	PurchaseOrder           string
	PurchaseOrderItem       string
	AccountAssignmentNumber string
	GLAccount               string
	BusinessArea            string
	CostCenter              string
	SalesOrder              string
	SalesOrderItem          string
	SalesOrderScheduleLine  string
	MasterFixedAsset        string
	FixedAsset              string
	GoodsRecipientName      string
	UnloadingPointName      string
	ControllingArea         string
	CostObject              string
	OrderID                 string
	ProfitCenter            string
	WBSElement              string
	ProjectNetwork          string
	FunctionalArea          string
	TaxCode                 string
	CostCtrActivityType     string
	IsDeleted               string
}{
	PurchaseOrder:           "PurchaseOrder",
	PurchaseOrderItem:       "PurchaseOrderItem",
	AccountAssignmentNumber: "AccountAssignmentNumber",
	GLAccount:               "GLAccount",
	BusinessArea:            "BusinessArea",
	CostCenter:              "CostCenter",
	SalesOrder:              "SalesOrder",
	SalesOrderItem:          "SalesOrderItem",
	SalesOrderScheduleLine:  "SalesOrderScheduleLine",
	MasterFixedAsset:        "MasterFixedAsset",
	FixedAsset:              "FixedAsset",
	GoodsRecipientName:      "GoodsRecipientName",
	UnloadingPointName:      "UnloadingPointName",
	ControllingArea:         "ControllingArea",
	CostObject:              "CostObject",
	OrderID:                 "OrderID",
	ProfitCenter:            "ProfitCenter",
	WBSElement:              "WBSElement",
	ProjectNetwork:          "ProjectNetwork",
	FunctionalArea:          "FunctionalArea",
	TaxCode:                 "TaxCode",
	CostCtrActivityType:     "CostCtrActivityType",
	IsDeleted:               "IsDeleted",
}

var SapPurchaseOrderItemAccountDatumTableColumns = struct {
	PurchaseOrder           string
	PurchaseOrderItem       string
	AccountAssignmentNumber string
	GLAccount               string
	BusinessArea            string
	CostCenter              string
	SalesOrder              string
	SalesOrderItem          string
	SalesOrderScheduleLine  string
	MasterFixedAsset        string
	FixedAsset              string
	GoodsRecipientName      string
	UnloadingPointName      string
	ControllingArea         string
	CostObject              string
	OrderID                 string
	ProfitCenter            string
	WBSElement              string
	ProjectNetwork          string
	FunctionalArea          string
	TaxCode                 string
	CostCtrActivityType     string
	IsDeleted               string
}{
	PurchaseOrder:           "sap_purchase_order_item_account_data.PurchaseOrder",
	PurchaseOrderItem:       "sap_purchase_order_item_account_data.PurchaseOrderItem",
	AccountAssignmentNumber: "sap_purchase_order_item_account_data.AccountAssignmentNumber",
	GLAccount:               "sap_purchase_order_item_account_data.GLAccount",
	BusinessArea:            "sap_purchase_order_item_account_data.BusinessArea",
	CostCenter:              "sap_purchase_order_item_account_data.CostCenter",
	SalesOrder:              "sap_purchase_order_item_account_data.SalesOrder",
	SalesOrderItem:          "sap_purchase_order_item_account_data.SalesOrderItem",
	SalesOrderScheduleLine:  "sap_purchase_order_item_account_data.SalesOrderScheduleLine",
	MasterFixedAsset:        "sap_purchase_order_item_account_data.MasterFixedAsset",
	FixedAsset:              "sap_purchase_order_item_account_data.FixedAsset",
	GoodsRecipientName:      "sap_purchase_order_item_account_data.GoodsRecipientName",
	UnloadingPointName:      "sap_purchase_order_item_account_data.UnloadingPointName",
	ControllingArea:         "sap_purchase_order_item_account_data.ControllingArea",
	CostObject:              "sap_purchase_order_item_account_data.CostObject",
	OrderID:                 "sap_purchase_order_item_account_data.OrderID",
	ProfitCenter:            "sap_purchase_order_item_account_data.ProfitCenter",
	WBSElement:              "sap_purchase_order_item_account_data.WBSElement",
	ProjectNetwork:          "sap_purchase_order_item_account_data.ProjectNetwork",
	FunctionalArea:          "sap_purchase_order_item_account_data.FunctionalArea",
	TaxCode:                 "sap_purchase_order_item_account_data.TaxCode",
	CostCtrActivityType:     "sap_purchase_order_item_account_data.CostCtrActivityType",
	IsDeleted:               "sap_purchase_order_item_account_data.IsDeleted",
}

// Generated where

var SapPurchaseOrderItemAccountDatumWhere = struct {
	PurchaseOrder           whereHelperstring
	PurchaseOrderItem       whereHelperstring
	AccountAssignmentNumber whereHelperstring
	GLAccount               whereHelpernull_String
	BusinessArea            whereHelpernull_String
	CostCenter              whereHelpernull_String
	SalesOrder              whereHelpernull_String
	SalesOrderItem          whereHelpernull_String
	SalesOrderScheduleLine  whereHelpernull_String
	MasterFixedAsset        whereHelpernull_String
	FixedAsset              whereHelpernull_String
	GoodsRecipientName      whereHelpernull_String
	UnloadingPointName      whereHelpernull_String
	ControllingArea         whereHelpernull_String
	CostObject              whereHelpernull_String
	OrderID                 whereHelpernull_String
	ProfitCenter            whereHelpernull_String
	WBSElement              whereHelpernull_String
	ProjectNetwork          whereHelpernull_String
	FunctionalArea          whereHelpernull_String
	TaxCode                 whereHelpernull_String
	CostCtrActivityType     whereHelpernull_String
	IsDeleted               whereHelpernull_Bool
}{
	PurchaseOrder:           whereHelperstring{field: "`sap_purchase_order_item_account_data`.`PurchaseOrder`"},
	PurchaseOrderItem:       whereHelperstring{field: "`sap_purchase_order_item_account_data`.`PurchaseOrderItem`"},
	AccountAssignmentNumber: whereHelperstring{field: "`sap_purchase_order_item_account_data`.`AccountAssignmentNumber`"},
	GLAccount:               whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`GLAccount`"},
	BusinessArea:            whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`BusinessArea`"},
	CostCenter:              whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`CostCenter`"},
	SalesOrder:              whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`SalesOrder`"},
	SalesOrderItem:          whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`SalesOrderItem`"},
	SalesOrderScheduleLine:  whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`SalesOrderScheduleLine`"},
	MasterFixedAsset:        whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`MasterFixedAsset`"},
	FixedAsset:              whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`FixedAsset`"},
	GoodsRecipientName:      whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`GoodsRecipientName`"},
	UnloadingPointName:      whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`UnloadingPointName`"},
	ControllingArea:         whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`ControllingArea`"},
	CostObject:              whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`CostObject`"},
	OrderID:                 whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`OrderID`"},
	ProfitCenter:            whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`ProfitCenter`"},
	WBSElement:              whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`WBSElement`"},
	ProjectNetwork:          whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`ProjectNetwork`"},
	FunctionalArea:          whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`FunctionalArea`"},
	TaxCode:                 whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`TaxCode`"},
	CostCtrActivityType:     whereHelpernull_String{field: "`sap_purchase_order_item_account_data`.`CostCtrActivityType`"},
	IsDeleted:               whereHelpernull_Bool{field: "`sap_purchase_order_item_account_data`.`IsDeleted`"},
}

// SapPurchaseOrderItemAccountDatumRels is where relationship names are stored.
var SapPurchaseOrderItemAccountDatumRels = struct {
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress string
}{
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: "PurchaseOrderSapPurchaseOrderHeaderDataWithAddress",
}

// sapPurchaseOrderItemAccountDatumR is where relationships are stored.
type sapPurchaseOrderItemAccountDatumR struct {
	PurchaseOrderSapPurchaseOrderHeaderDataWithAddress *SapPurchaseOrderHeaderDataWithAddress `boil:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" json:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" toml:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress" yaml:"PurchaseOrderSapPurchaseOrderHeaderDataWithAddress"`
}

// NewStruct creates a new relationship struct
func (*sapPurchaseOrderItemAccountDatumR) NewStruct() *sapPurchaseOrderItemAccountDatumR {
	return &sapPurchaseOrderItemAccountDatumR{}
}

// sapPurchaseOrderItemAccountDatumL is where Load methods for each relationship are stored.
type sapPurchaseOrderItemAccountDatumL struct{}

var (
	sapPurchaseOrderItemAccountDatumAllColumns            = []string{"PurchaseOrder", "PurchaseOrderItem", "AccountAssignmentNumber", "GLAccount", "BusinessArea", "CostCenter", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "MasterFixedAsset", "FixedAsset", "GoodsRecipientName", "UnloadingPointName", "ControllingArea", "CostObject", "OrderID", "ProfitCenter", "WBSElement", "ProjectNetwork", "FunctionalArea", "TaxCode", "CostCtrActivityType", "IsDeleted"}
	sapPurchaseOrderItemAccountDatumColumnsWithoutDefault = []string{"PurchaseOrder", "PurchaseOrderItem", "AccountAssignmentNumber", "GLAccount", "BusinessArea", "CostCenter", "SalesOrder", "SalesOrderItem", "SalesOrderScheduleLine", "MasterFixedAsset", "FixedAsset", "GoodsRecipientName", "UnloadingPointName", "ControllingArea", "CostObject", "OrderID", "ProfitCenter", "WBSElement", "ProjectNetwork", "FunctionalArea", "TaxCode", "CostCtrActivityType", "IsDeleted"}
	sapPurchaseOrderItemAccountDatumColumnsWithDefault    = []string{}
	sapPurchaseOrderItemAccountDatumPrimaryKeyColumns     = []string{"PurchaseOrder", "PurchaseOrderItem", "AccountAssignmentNumber"}
)

type (
	// SapPurchaseOrderItemAccountDatumSlice is an alias for a slice of pointers to SapPurchaseOrderItemAccountDatum.
	// This should almost always be used instead of []SapPurchaseOrderItemAccountDatum.
	SapPurchaseOrderItemAccountDatumSlice []*SapPurchaseOrderItemAccountDatum
	// SapPurchaseOrderItemAccountDatumHook is the signature for custom SapPurchaseOrderItemAccountDatum hook methods
	SapPurchaseOrderItemAccountDatumHook func(context.Context, boil.ContextExecutor, *SapPurchaseOrderItemAccountDatum) error

	sapPurchaseOrderItemAccountDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchaseOrderItemAccountDatumType                 = reflect.TypeOf(&SapPurchaseOrderItemAccountDatum{})
	sapPurchaseOrderItemAccountDatumMapping              = queries.MakeStructMapping(sapPurchaseOrderItemAccountDatumType)
	sapPurchaseOrderItemAccountDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns)
	sapPurchaseOrderItemAccountDatumInsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemAccountDatumInsertCache          = make(map[string]insertCache)
	sapPurchaseOrderItemAccountDatumUpdateCacheMut       sync.RWMutex
	sapPurchaseOrderItemAccountDatumUpdateCache          = make(map[string]updateCache)
	sapPurchaseOrderItemAccountDatumUpsertCacheMut       sync.RWMutex
	sapPurchaseOrderItemAccountDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchaseOrderItemAccountDatumBeforeInsertHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumBeforeUpdateHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumBeforeDeleteHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumBeforeUpsertHooks []SapPurchaseOrderItemAccountDatumHook

var sapPurchaseOrderItemAccountDatumAfterInsertHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumAfterSelectHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumAfterUpdateHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumAfterDeleteHooks []SapPurchaseOrderItemAccountDatumHook
var sapPurchaseOrderItemAccountDatumAfterUpsertHooks []SapPurchaseOrderItemAccountDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchaseOrderItemAccountDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchaseOrderItemAccountDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchaseOrderItemAccountDatumHook registers your hook function for all future operations.
func AddSapPurchaseOrderItemAccountDatumHook(hookPoint boil.HookPoint, sapPurchaseOrderItemAccountDatumHook SapPurchaseOrderItemAccountDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapPurchaseOrderItemAccountDatumBeforeInsertHooks = append(sapPurchaseOrderItemAccountDatumBeforeInsertHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchaseOrderItemAccountDatumBeforeUpdateHooks = append(sapPurchaseOrderItemAccountDatumBeforeUpdateHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchaseOrderItemAccountDatumBeforeDeleteHooks = append(sapPurchaseOrderItemAccountDatumBeforeDeleteHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchaseOrderItemAccountDatumBeforeUpsertHooks = append(sapPurchaseOrderItemAccountDatumBeforeUpsertHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.AfterInsertHook:
		sapPurchaseOrderItemAccountDatumAfterInsertHooks = append(sapPurchaseOrderItemAccountDatumAfterInsertHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.AfterSelectHook:
		sapPurchaseOrderItemAccountDatumAfterSelectHooks = append(sapPurchaseOrderItemAccountDatumAfterSelectHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.AfterUpdateHook:
		sapPurchaseOrderItemAccountDatumAfterUpdateHooks = append(sapPurchaseOrderItemAccountDatumAfterUpdateHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.AfterDeleteHook:
		sapPurchaseOrderItemAccountDatumAfterDeleteHooks = append(sapPurchaseOrderItemAccountDatumAfterDeleteHooks, sapPurchaseOrderItemAccountDatumHook)
	case boil.AfterUpsertHook:
		sapPurchaseOrderItemAccountDatumAfterUpsertHooks = append(sapPurchaseOrderItemAccountDatumAfterUpsertHooks, sapPurchaseOrderItemAccountDatumHook)
	}
}

// One returns a single sapPurchaseOrderItemAccountDatum record from the query.
func (q sapPurchaseOrderItemAccountDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchaseOrderItemAccountDatum, error) {
	o := &SapPurchaseOrderItemAccountDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchase_order_item_account_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchaseOrderItemAccountDatum records from the query.
func (q sapPurchaseOrderItemAccountDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchaseOrderItemAccountDatumSlice, error) {
	var o []*SapPurchaseOrderItemAccountDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchaseOrderItemAccountDatum slice")
	}

	if len(sapPurchaseOrderItemAccountDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchaseOrderItemAccountDatum records in the query.
func (q sapPurchaseOrderItemAccountDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchase_order_item_account_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchaseOrderItemAccountDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchase_order_item_account_data exists")
	}

	return count > 0, nil
}

// PurchaseOrderSapPurchaseOrderHeaderDataWithAddress pointed to by the foreign key.
func (o *SapPurchaseOrderItemAccountDatum) PurchaseOrderSapPurchaseOrderHeaderDataWithAddress(mods ...qm.QueryMod) sapPurchaseOrderHeaderDataWithAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchaseOrder` = ?", o.PurchaseOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapPurchaseOrderHeaderDataWithAddresses(queryMods...)
	queries.SetFrom(query.Query, "`sap_purchase_order_header_data_with_address`")

	return query
}

// LoadPurchaseOrderSapPurchaseOrderHeaderDataWithAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchaseOrderItemAccountDatumL) LoadPurchaseOrderSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchaseOrderItemAccountDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchaseOrderItemAccountDatum
	var object *SapPurchaseOrderItemAccountDatum

	if singular {
		object = maybeSapPurchaseOrderItemAccountDatum.(*SapPurchaseOrderItemAccountDatum)
	} else {
		slice = *maybeSapPurchaseOrderItemAccountDatum.(*[]*SapPurchaseOrderItemAccountDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchaseOrderItemAccountDatumR{}
		}
		args = append(args, object.PurchaseOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchaseOrderItemAccountDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchaseOrder {
					continue Outer
				}
			}

			args = append(args, obj.PurchaseOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchase_order_header_data_with_address`),
		qm.WhereIn(`sap_purchase_order_header_data_with_address.PurchaseOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchaseOrderHeaderDataWithAddress")
	}

	var resultSlice []*SapPurchaseOrderHeaderDataWithAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchaseOrderHeaderDataWithAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchase_order_header_data_with_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchase_order_header_data_with_address")
	}

	if len(sapPurchaseOrderItemAccountDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
		}
		foreign.R.PurchaseOrderSapPurchaseOrderItemAccountData = append(foreign.R.PurchaseOrderSapPurchaseOrderItemAccountData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchaseOrder == foreign.PurchaseOrder {
				local.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchaseOrderHeaderDataWithAddressR{}
				}
				foreign.R.PurchaseOrderSapPurchaseOrderItemAccountData = append(foreign.R.PurchaseOrderSapPurchaseOrderItemAccountData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchaseOrderSapPurchaseOrderHeaderDataWithAddress of the sapPurchaseOrderItemAccountDatum to the related item.
// Sets o.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress to related.
// Adds o to related.R.PurchaseOrderSapPurchaseOrderItemAccountData.
func (o *SapPurchaseOrderItemAccountDatum) SetPurchaseOrderSapPurchaseOrderHeaderDataWithAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchaseOrderHeaderDataWithAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchase_order_item_account_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchaseOrder"}),
		strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchaseOrder, o.PurchaseOrder, o.PurchaseOrderItem, o.AccountAssignmentNumber}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchaseOrder = related.PurchaseOrder
	if o.R == nil {
		o.R = &sapPurchaseOrderItemAccountDatumR{
			PurchaseOrderSapPurchaseOrderHeaderDataWithAddress: related,
		}
	} else {
		o.R.PurchaseOrderSapPurchaseOrderHeaderDataWithAddress = related
	}

	if related.R == nil {
		related.R = &sapPurchaseOrderHeaderDataWithAddressR{
			PurchaseOrderSapPurchaseOrderItemAccountData: SapPurchaseOrderItemAccountDatumSlice{o},
		}
	} else {
		related.R.PurchaseOrderSapPurchaseOrderItemAccountData = append(related.R.PurchaseOrderSapPurchaseOrderItemAccountData, o)
	}

	return nil
}

// SapPurchaseOrderItemAccountData retrieves all the records using an executor.
func SapPurchaseOrderItemAccountData(mods ...qm.QueryMod) sapPurchaseOrderItemAccountDatumQuery {
	mods = append(mods, qm.From("`sap_purchase_order_item_account_data`"))
	return sapPurchaseOrderItemAccountDatumQuery{NewQuery(mods...)}
}

// FindSapPurchaseOrderItemAccountDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchaseOrderItemAccountDatum(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, purchaseOrderItem string, accountAssignmentNumber string, selectCols ...string) (*SapPurchaseOrderItemAccountDatum, error) {
	sapPurchaseOrderItemAccountDatumObj := &SapPurchaseOrderItemAccountDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchase_order_item_account_data` where `PurchaseOrder`=? AND `PurchaseOrderItem`=? AND `AccountAssignmentNumber`=?", sel,
	)

	q := queries.Raw(query, purchaseOrder, purchaseOrderItem, accountAssignmentNumber)

	err := q.Bind(ctx, exec, sapPurchaseOrderItemAccountDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchase_order_item_account_data")
	}

	if err = sapPurchaseOrderItemAccountDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchaseOrderItemAccountDatumObj, err
	}

	return sapPurchaseOrderItemAccountDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchaseOrderItemAccountDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_account_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemAccountDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchaseOrderItemAccountDatumInsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemAccountDatumInsertCache[key]
	sapPurchaseOrderItemAccountDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchaseOrderItemAccountDatumAllColumns,
			sapPurchaseOrderItemAccountDatumColumnsWithDefault,
			sapPurchaseOrderItemAccountDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchase_order_item_account_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchase_order_item_account_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchase_order_item_account_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchase_order_item_account_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseOrder,
		o.PurchaseOrderItem,
		o.AccountAssignmentNumber,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_account_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemAccountDatumInsertCacheMut.Lock()
		sapPurchaseOrderItemAccountDatumInsertCache[key] = cache
		sapPurchaseOrderItemAccountDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchaseOrderItemAccountDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchaseOrderItemAccountDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchaseOrderItemAccountDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemAccountDatumUpdateCache[key]
	sapPurchaseOrderItemAccountDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchaseOrderItemAccountDatumAllColumns,
			sapPurchaseOrderItemAccountDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchase_order_item_account_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchase_order_item_account_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, append(wl, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchase_order_item_account_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchase_order_item_account_data")
	}

	if !cached {
		sapPurchaseOrderItemAccountDatumUpdateCacheMut.Lock()
		sapPurchaseOrderItemAccountDatumUpdateCache[key] = cache
		sapPurchaseOrderItemAccountDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchaseOrderItemAccountDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchase_order_item_account_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchase_order_item_account_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchaseOrderItemAccountDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemAccountDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchase_order_item_account_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchaseOrderItemAccountDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchaseOrderItemAccountDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchaseOrderItemAccountDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchaseOrderItemAccountDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchase_order_item_account_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchaseOrderItemAccountDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchaseOrderItemAccountDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchaseOrderItemAccountDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchaseOrderItemAccountDatumUpsertCache[key]
	sapPurchaseOrderItemAccountDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchaseOrderItemAccountDatumAllColumns,
			sapPurchaseOrderItemAccountDatumColumnsWithDefault,
			sapPurchaseOrderItemAccountDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapPurchaseOrderItemAccountDatumAllColumns,
			sapPurchaseOrderItemAccountDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchase_order_item_account_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchase_order_item_account_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchase_order_item_account_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchase_order_item_account_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchaseOrderItemAccountDatumType, sapPurchaseOrderItemAccountDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchase_order_item_account_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchase_order_item_account_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchaseOrderItemAccountDatumUpsertCacheMut.Lock()
		sapPurchaseOrderItemAccountDatumUpsertCache[key] = cache
		sapPurchaseOrderItemAccountDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchaseOrderItemAccountDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchaseOrderItemAccountDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchaseOrderItemAccountDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchaseOrderItemAccountDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchase_order_item_account_data` WHERE `PurchaseOrder`=? AND `PurchaseOrderItem`=? AND `AccountAssignmentNumber`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchase_order_item_account_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchase_order_item_account_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchaseOrderItemAccountDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchaseOrderItemAccountDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchase_order_item_account_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_account_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchaseOrderItemAccountDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchaseOrderItemAccountDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemAccountDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchase_order_item_account_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchaseOrderItemAccountDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchase_order_item_account_data")
	}

	if len(sapPurchaseOrderItemAccountDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchaseOrderItemAccountDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchaseOrderItemAccountDatum(ctx, exec, o.PurchaseOrder, o.PurchaseOrderItem, o.AccountAssignmentNumber)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchaseOrderItemAccountDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchaseOrderItemAccountDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchaseOrderItemAccountDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchase_order_item_account_data`.* FROM `sap_purchase_order_item_account_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchaseOrderItemAccountDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchaseOrderItemAccountDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchaseOrderItemAccountDatumExists checks if the SapPurchaseOrderItemAccountDatum row exists.
func SapPurchaseOrderItemAccountDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseOrder string, purchaseOrderItem string, accountAssignmentNumber string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchase_order_item_account_data` where `PurchaseOrder`=? AND `PurchaseOrderItem`=? AND `AccountAssignmentNumber`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseOrder, purchaseOrderItem, accountAssignmentNumber)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseOrder, purchaseOrderItem, accountAssignmentNumber)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchase_order_item_account_data exists")
	}

	return exists, nil
}
