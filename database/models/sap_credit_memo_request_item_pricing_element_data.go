// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCreditMemoRequestItemPricingElementDatum is an object representing the database table.
type SapCreditMemoRequestItemPricingElementDatum struct {
	CreditMemoRequest              string      `boil:"CreditMemoRequest" json:"CreditMemoRequest" toml:"CreditMemoRequest" yaml:"CreditMemoRequest"`
	CreditMemoRequestItem          string      `boil:"CreditMemoRequestItem" json:"CreditMemoRequestItem" toml:"CreditMemoRequestItem" yaml:"CreditMemoRequestItem"`
	PricingProcedureStep           string      `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter        string      `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionApplication           null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	ConditionType                  null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PricingDateTime                null.String `boil:"PricingDateTime" json:"PricingDateTime,omitempty" toml:"PricingDateTime" yaml:"PricingDateTime,omitempty"`
	PriceConditionDeterminationDte null.String `boil:"PriceConditionDeterminationDte" json:"PriceConditionDeterminationDte,omitempty" toml:"PriceConditionDeterminationDte" yaml:"PriceConditionDeterminationDte,omitempty"`
	ConditionCalculationType       null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionBaseValue             null.String `boil:"ConditionBaseValue" json:"ConditionBaseValue,omitempty" toml:"ConditionBaseValue" yaml:"ConditionBaseValue,omitempty"`
	ConditionRateValue             null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency              null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionQuantity              null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit          null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	ConditionToBaseQtyNmrtr        null.String `boil:"ConditionToBaseQtyNmrtr" json:"ConditionToBaseQtyNmrtr,omitempty" toml:"ConditionToBaseQtyNmrtr" yaml:"ConditionToBaseQtyNmrtr,omitempty"`
	ConditionToBaseQtyDnmntr       null.String `boil:"ConditionToBaseQtyDnmntr" json:"ConditionToBaseQtyDnmntr,omitempty" toml:"ConditionToBaseQtyDnmntr" yaml:"ConditionToBaseQtyDnmntr,omitempty"`
	ConditionCategory              null.String `boil:"ConditionCategory" json:"ConditionCategory,omitempty" toml:"ConditionCategory" yaml:"ConditionCategory,omitempty"`
	PricingScaleType               null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	ConditionRecord                null.String `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber      null.String `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	TaxCode                        null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ConditionAmount                null.String `boil:"ConditionAmount" json:"ConditionAmount,omitempty" toml:"ConditionAmount" yaml:"ConditionAmount,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingScaleBasis              null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleBasisValue       null.String `boil:"ConditionScaleBasisValue" json:"ConditionScaleBasisValue,omitempty" toml:"ConditionScaleBasisValue" yaml:"ConditionScaleBasisValue,omitempty"`
	ConditionScaleBasisUnit        null.String `boil:"ConditionScaleBasisUnit" json:"ConditionScaleBasisUnit,omitempty" toml:"ConditionScaleBasisUnit" yaml:"ConditionScaleBasisUnit,omitempty"`
	ConditionScaleBasisCurrency    null.String `boil:"ConditionScaleBasisCurrency" json:"ConditionScaleBasisCurrency,omitempty" toml:"ConditionScaleBasisCurrency" yaml:"ConditionScaleBasisCurrency,omitempty"`
	ConditionIsManuallyChanged     null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`

	R *sapCreditMemoRequestItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCreditMemoRequestItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCreditMemoRequestItemPricingElementDatumColumns = struct {
	CreditMemoRequest              string
	CreditMemoRequestItem          string
	PricingProcedureStep           string
	PricingProcedureCounter        string
	ConditionApplication           string
	ConditionType                  string
	PricingDateTime                string
	PriceConditionDeterminationDte string
	ConditionCalculationType       string
	ConditionBaseValue             string
	ConditionRateValue             string
	ConditionCurrency              string
	ConditionQuantity              string
	ConditionQuantityUnit          string
	ConditionToBaseQtyNmrtr        string
	ConditionToBaseQtyDnmntr       string
	ConditionCategory              string
	PricingScaleType               string
	ConditionRecord                string
	ConditionSequentialNumber      string
	TaxCode                        string
	ConditionAmount                string
	TransactionCurrency            string
	PricingScaleBasis              string
	ConditionScaleBasisValue       string
	ConditionScaleBasisUnit        string
	ConditionScaleBasisCurrency    string
	ConditionIsManuallyChanged     string
}{
	CreditMemoRequest:              "CreditMemoRequest",
	CreditMemoRequestItem:          "CreditMemoRequestItem",
	PricingProcedureStep:           "PricingProcedureStep",
	PricingProcedureCounter:        "PricingProcedureCounter",
	ConditionApplication:           "ConditionApplication",
	ConditionType:                  "ConditionType",
	PricingDateTime:                "PricingDateTime",
	PriceConditionDeterminationDte: "PriceConditionDeterminationDte",
	ConditionCalculationType:       "ConditionCalculationType",
	ConditionBaseValue:             "ConditionBaseValue",
	ConditionRateValue:             "ConditionRateValue",
	ConditionCurrency:              "ConditionCurrency",
	ConditionQuantity:              "ConditionQuantity",
	ConditionQuantityUnit:          "ConditionQuantityUnit",
	ConditionToBaseQtyNmrtr:        "ConditionToBaseQtyNmrtr",
	ConditionToBaseQtyDnmntr:       "ConditionToBaseQtyDnmntr",
	ConditionCategory:              "ConditionCategory",
	PricingScaleType:               "PricingScaleType",
	ConditionRecord:                "ConditionRecord",
	ConditionSequentialNumber:      "ConditionSequentialNumber",
	TaxCode:                        "TaxCode",
	ConditionAmount:                "ConditionAmount",
	TransactionCurrency:            "TransactionCurrency",
	PricingScaleBasis:              "PricingScaleBasis",
	ConditionScaleBasisValue:       "ConditionScaleBasisValue",
	ConditionScaleBasisUnit:        "ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency:    "ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:     "ConditionIsManuallyChanged",
}

var SapCreditMemoRequestItemPricingElementDatumTableColumns = struct {
	CreditMemoRequest              string
	CreditMemoRequestItem          string
	PricingProcedureStep           string
	PricingProcedureCounter        string
	ConditionApplication           string
	ConditionType                  string
	PricingDateTime                string
	PriceConditionDeterminationDte string
	ConditionCalculationType       string
	ConditionBaseValue             string
	ConditionRateValue             string
	ConditionCurrency              string
	ConditionQuantity              string
	ConditionQuantityUnit          string
	ConditionToBaseQtyNmrtr        string
	ConditionToBaseQtyDnmntr       string
	ConditionCategory              string
	PricingScaleType               string
	ConditionRecord                string
	ConditionSequentialNumber      string
	TaxCode                        string
	ConditionAmount                string
	TransactionCurrency            string
	PricingScaleBasis              string
	ConditionScaleBasisValue       string
	ConditionScaleBasisUnit        string
	ConditionScaleBasisCurrency    string
	ConditionIsManuallyChanged     string
}{
	CreditMemoRequest:              "sap_credit_memo_request_item_pricing_element_data.CreditMemoRequest",
	CreditMemoRequestItem:          "sap_credit_memo_request_item_pricing_element_data.CreditMemoRequestItem",
	PricingProcedureStep:           "sap_credit_memo_request_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter:        "sap_credit_memo_request_item_pricing_element_data.PricingProcedureCounter",
	ConditionApplication:           "sap_credit_memo_request_item_pricing_element_data.ConditionApplication",
	ConditionType:                  "sap_credit_memo_request_item_pricing_element_data.ConditionType",
	PricingDateTime:                "sap_credit_memo_request_item_pricing_element_data.PricingDateTime",
	PriceConditionDeterminationDte: "sap_credit_memo_request_item_pricing_element_data.PriceConditionDeterminationDte",
	ConditionCalculationType:       "sap_credit_memo_request_item_pricing_element_data.ConditionCalculationType",
	ConditionBaseValue:             "sap_credit_memo_request_item_pricing_element_data.ConditionBaseValue",
	ConditionRateValue:             "sap_credit_memo_request_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:              "sap_credit_memo_request_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:              "sap_credit_memo_request_item_pricing_element_data.ConditionQuantity",
	ConditionQuantityUnit:          "sap_credit_memo_request_item_pricing_element_data.ConditionQuantityUnit",
	ConditionToBaseQtyNmrtr:        "sap_credit_memo_request_item_pricing_element_data.ConditionToBaseQtyNmrtr",
	ConditionToBaseQtyDnmntr:       "sap_credit_memo_request_item_pricing_element_data.ConditionToBaseQtyDnmntr",
	ConditionCategory:              "sap_credit_memo_request_item_pricing_element_data.ConditionCategory",
	PricingScaleType:               "sap_credit_memo_request_item_pricing_element_data.PricingScaleType",
	ConditionRecord:                "sap_credit_memo_request_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:      "sap_credit_memo_request_item_pricing_element_data.ConditionSequentialNumber",
	TaxCode:                        "sap_credit_memo_request_item_pricing_element_data.TaxCode",
	ConditionAmount:                "sap_credit_memo_request_item_pricing_element_data.ConditionAmount",
	TransactionCurrency:            "sap_credit_memo_request_item_pricing_element_data.TransactionCurrency",
	PricingScaleBasis:              "sap_credit_memo_request_item_pricing_element_data.PricingScaleBasis",
	ConditionScaleBasisValue:       "sap_credit_memo_request_item_pricing_element_data.ConditionScaleBasisValue",
	ConditionScaleBasisUnit:        "sap_credit_memo_request_item_pricing_element_data.ConditionScaleBasisUnit",
	ConditionScaleBasisCurrency:    "sap_credit_memo_request_item_pricing_element_data.ConditionScaleBasisCurrency",
	ConditionIsManuallyChanged:     "sap_credit_memo_request_item_pricing_element_data.ConditionIsManuallyChanged",
}

// Generated where

var SapCreditMemoRequestItemPricingElementDatumWhere = struct {
	CreditMemoRequest              whereHelperstring
	CreditMemoRequestItem          whereHelperstring
	PricingProcedureStep           whereHelperstring
	PricingProcedureCounter        whereHelperstring
	ConditionApplication           whereHelpernull_String
	ConditionType                  whereHelpernull_String
	PricingDateTime                whereHelpernull_String
	PriceConditionDeterminationDte whereHelpernull_String
	ConditionCalculationType       whereHelpernull_String
	ConditionBaseValue             whereHelpernull_String
	ConditionRateValue             whereHelpernull_String
	ConditionCurrency              whereHelpernull_String
	ConditionQuantity              whereHelpernull_String
	ConditionQuantityUnit          whereHelpernull_String
	ConditionToBaseQtyNmrtr        whereHelpernull_String
	ConditionToBaseQtyDnmntr       whereHelpernull_String
	ConditionCategory              whereHelpernull_String
	PricingScaleType               whereHelpernull_String
	ConditionRecord                whereHelpernull_String
	ConditionSequentialNumber      whereHelpernull_String
	TaxCode                        whereHelpernull_String
	ConditionAmount                whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	PricingScaleBasis              whereHelpernull_String
	ConditionScaleBasisValue       whereHelpernull_String
	ConditionScaleBasisUnit        whereHelpernull_String
	ConditionScaleBasisCurrency    whereHelpernull_String
	ConditionIsManuallyChanged     whereHelpernull_Bool
}{
	CreditMemoRequest:              whereHelperstring{field: "`sap_credit_memo_request_item_pricing_element_data`.`CreditMemoRequest`"},
	CreditMemoRequestItem:          whereHelperstring{field: "`sap_credit_memo_request_item_pricing_element_data`.`CreditMemoRequestItem`"},
	PricingProcedureStep:           whereHelperstring{field: "`sap_credit_memo_request_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter:        whereHelperstring{field: "`sap_credit_memo_request_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionApplication:           whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionApplication`"},
	ConditionType:                  whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionType`"},
	PricingDateTime:                whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`PricingDateTime`"},
	PriceConditionDeterminationDte: whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`PriceConditionDeterminationDte`"},
	ConditionCalculationType:       whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionCalculationType`"},
	ConditionBaseValue:             whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionBaseValue`"},
	ConditionRateValue:             whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:              whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:              whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:          whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionQuantityUnit`"},
	ConditionToBaseQtyNmrtr:        whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionToBaseQtyNmrtr`"},
	ConditionToBaseQtyDnmntr:       whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionToBaseQtyDnmntr`"},
	ConditionCategory:              whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionCategory`"},
	PricingScaleType:               whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`PricingScaleType`"},
	ConditionRecord:                whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:      whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionSequentialNumber`"},
	TaxCode:                        whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`TaxCode`"},
	ConditionAmount:                whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`TransactionCurrency`"},
	PricingScaleBasis:              whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`PricingScaleBasis`"},
	ConditionScaleBasisValue:       whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionScaleBasisValue`"},
	ConditionScaleBasisUnit:        whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionScaleBasisUnit`"},
	ConditionScaleBasisCurrency:    whereHelpernull_String{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionScaleBasisCurrency`"},
	ConditionIsManuallyChanged:     whereHelpernull_Bool{field: "`sap_credit_memo_request_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
}

// SapCreditMemoRequestItemPricingElementDatumRels is where relationship names are stored.
var SapCreditMemoRequestItemPricingElementDatumRels = struct {
	CreditMemoRequestSapCreditMemoRequestHeaderDatum string
}{
	CreditMemoRequestSapCreditMemoRequestHeaderDatum: "CreditMemoRequestSapCreditMemoRequestHeaderDatum",
}

// sapCreditMemoRequestItemPricingElementDatumR is where relationships are stored.
type sapCreditMemoRequestItemPricingElementDatumR struct {
	CreditMemoRequestSapCreditMemoRequestHeaderDatum *SapCreditMemoRequestHeaderDatum `boil:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" json:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" toml:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" yaml:"CreditMemoRequestSapCreditMemoRequestHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCreditMemoRequestItemPricingElementDatumR) NewStruct() *sapCreditMemoRequestItemPricingElementDatumR {
	return &sapCreditMemoRequestItemPricingElementDatumR{}
}

// sapCreditMemoRequestItemPricingElementDatumL is where Load methods for each relationship are stored.
type sapCreditMemoRequestItemPricingElementDatumL struct{}

var (
	sapCreditMemoRequestItemPricingElementDatumAllColumns            = []string{"CreditMemoRequest", "CreditMemoRequestItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionApplication", "ConditionType", "PricingDateTime", "PriceConditionDeterminationDte", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionToBaseQtyNmrtr", "ConditionToBaseQtyDnmntr", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapCreditMemoRequestItemPricingElementDatumColumnsWithoutDefault = []string{"CreditMemoRequest", "CreditMemoRequestItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionApplication", "ConditionType", "PricingDateTime", "PriceConditionDeterminationDte", "ConditionCalculationType", "ConditionBaseValue", "ConditionRateValue", "ConditionCurrency", "ConditionQuantity", "ConditionQuantityUnit", "ConditionToBaseQtyNmrtr", "ConditionToBaseQtyDnmntr", "ConditionCategory", "PricingScaleType", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "ConditionAmount", "TransactionCurrency", "PricingScaleBasis", "ConditionScaleBasisValue", "ConditionScaleBasisUnit", "ConditionScaleBasisCurrency", "ConditionIsManuallyChanged"}
	sapCreditMemoRequestItemPricingElementDatumColumnsWithDefault    = []string{}
	sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns     = []string{"CreditMemoRequest", "CreditMemoRequestItem", "PricingProcedureStep", "PricingProcedureCounter"}
	sapCreditMemoRequestItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// SapCreditMemoRequestItemPricingElementDatumSlice is an alias for a slice of pointers to SapCreditMemoRequestItemPricingElementDatum.
	// This should almost always be used instead of []SapCreditMemoRequestItemPricingElementDatum.
	SapCreditMemoRequestItemPricingElementDatumSlice []*SapCreditMemoRequestItemPricingElementDatum
	// SapCreditMemoRequestItemPricingElementDatumHook is the signature for custom SapCreditMemoRequestItemPricingElementDatum hook methods
	SapCreditMemoRequestItemPricingElementDatumHook func(context.Context, boil.ContextExecutor, *SapCreditMemoRequestItemPricingElementDatum) error

	sapCreditMemoRequestItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCreditMemoRequestItemPricingElementDatumType                 = reflect.TypeOf(&SapCreditMemoRequestItemPricingElementDatum{})
	sapCreditMemoRequestItemPricingElementDatumMapping              = queries.MakeStructMapping(sapCreditMemoRequestItemPricingElementDatumType)
	sapCreditMemoRequestItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns)
	sapCreditMemoRequestItemPricingElementDatumInsertCacheMut       sync.RWMutex
	sapCreditMemoRequestItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	sapCreditMemoRequestItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	sapCreditMemoRequestItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	sapCreditMemoRequestItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	sapCreditMemoRequestItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks []SapCreditMemoRequestItemPricingElementDatumHook

var sapCreditMemoRequestItemPricingElementDatumBeforeInsertHooks []SapCreditMemoRequestItemPricingElementDatumHook
var sapCreditMemoRequestItemPricingElementDatumAfterInsertHooks []SapCreditMemoRequestItemPricingElementDatumHook

var sapCreditMemoRequestItemPricingElementDatumBeforeUpdateHooks []SapCreditMemoRequestItemPricingElementDatumHook
var sapCreditMemoRequestItemPricingElementDatumAfterUpdateHooks []SapCreditMemoRequestItemPricingElementDatumHook

var sapCreditMemoRequestItemPricingElementDatumBeforeDeleteHooks []SapCreditMemoRequestItemPricingElementDatumHook
var sapCreditMemoRequestItemPricingElementDatumAfterDeleteHooks []SapCreditMemoRequestItemPricingElementDatumHook

var sapCreditMemoRequestItemPricingElementDatumBeforeUpsertHooks []SapCreditMemoRequestItemPricingElementDatumHook
var sapCreditMemoRequestItemPricingElementDatumAfterUpsertHooks []SapCreditMemoRequestItemPricingElementDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCreditMemoRequestItemPricingElementDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemPricingElementDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCreditMemoRequestItemPricingElementDatumHook registers your hook function for all future operations.
func AddSapCreditMemoRequestItemPricingElementDatumHook(hookPoint boil.HookPoint, sapCreditMemoRequestItemPricingElementDatumHook SapCreditMemoRequestItemPricingElementDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks = append(sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.BeforeInsertHook:
		sapCreditMemoRequestItemPricingElementDatumBeforeInsertHooks = append(sapCreditMemoRequestItemPricingElementDatumBeforeInsertHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.AfterInsertHook:
		sapCreditMemoRequestItemPricingElementDatumAfterInsertHooks = append(sapCreditMemoRequestItemPricingElementDatumAfterInsertHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.BeforeUpdateHook:
		sapCreditMemoRequestItemPricingElementDatumBeforeUpdateHooks = append(sapCreditMemoRequestItemPricingElementDatumBeforeUpdateHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.AfterUpdateHook:
		sapCreditMemoRequestItemPricingElementDatumAfterUpdateHooks = append(sapCreditMemoRequestItemPricingElementDatumAfterUpdateHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.BeforeDeleteHook:
		sapCreditMemoRequestItemPricingElementDatumBeforeDeleteHooks = append(sapCreditMemoRequestItemPricingElementDatumBeforeDeleteHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.AfterDeleteHook:
		sapCreditMemoRequestItemPricingElementDatumAfterDeleteHooks = append(sapCreditMemoRequestItemPricingElementDatumAfterDeleteHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.BeforeUpsertHook:
		sapCreditMemoRequestItemPricingElementDatumBeforeUpsertHooks = append(sapCreditMemoRequestItemPricingElementDatumBeforeUpsertHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	case boil.AfterUpsertHook:
		sapCreditMemoRequestItemPricingElementDatumAfterUpsertHooks = append(sapCreditMemoRequestItemPricingElementDatumAfterUpsertHooks, sapCreditMemoRequestItemPricingElementDatumHook)
	}
}

// One returns a single sapCreditMemoRequestItemPricingElementDatum record from the query.
func (q sapCreditMemoRequestItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCreditMemoRequestItemPricingElementDatum, error) {
	o := &SapCreditMemoRequestItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_credit_memo_request_item_pricing_element_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCreditMemoRequestItemPricingElementDatum records from the query.
func (q sapCreditMemoRequestItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCreditMemoRequestItemPricingElementDatumSlice, error) {
	var o []*SapCreditMemoRequestItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCreditMemoRequestItemPricingElementDatum slice")
	}

	if len(sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCreditMemoRequestItemPricingElementDatum records in the query.
func (q sapCreditMemoRequestItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_credit_memo_request_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCreditMemoRequestItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_credit_memo_request_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// CreditMemoRequestSapCreditMemoRequestHeaderDatum pointed to by the foreign key.
func (o *SapCreditMemoRequestItemPricingElementDatum) CreditMemoRequestSapCreditMemoRequestHeaderDatum(mods ...qm.QueryMod) sapCreditMemoRequestHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CreditMemoRequest` = ?", o.CreditMemoRequest),
	}

	queryMods = append(queryMods, mods...)

	query := SapCreditMemoRequestHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_credit_memo_request_header_data`")

	return query
}

// LoadCreditMemoRequestSapCreditMemoRequestHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCreditMemoRequestItemPricingElementDatumL) LoadCreditMemoRequestSapCreditMemoRequestHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditMemoRequestItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditMemoRequestItemPricingElementDatum
	var object *SapCreditMemoRequestItemPricingElementDatum

	if singular {
		object = maybeSapCreditMemoRequestItemPricingElementDatum.(*SapCreditMemoRequestItemPricingElementDatum)
	} else {
		slice = *maybeSapCreditMemoRequestItemPricingElementDatum.(*[]*SapCreditMemoRequestItemPricingElementDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditMemoRequestItemPricingElementDatumR{}
		}
		args = append(args, object.CreditMemoRequest)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditMemoRequestItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.CreditMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.CreditMemoRequest)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_memo_request_header_data`),
		qm.WhereIn(`sap_credit_memo_request_header_data.CreditMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCreditMemoRequestHeaderDatum")
	}

	var resultSlice []*SapCreditMemoRequestHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCreditMemoRequestHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_credit_memo_request_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_memo_request_header_data")
	}

	if len(sapCreditMemoRequestItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCreditMemoRequestHeaderDatumR{}
		}
		foreign.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData = append(foreign.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreditMemoRequest == foreign.CreditMemoRequest {
				local.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCreditMemoRequestHeaderDatumR{}
				}
				foreign.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData = append(foreign.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData, local)
				break
			}
		}
	}

	return nil
}

// SetCreditMemoRequestSapCreditMemoRequestHeaderDatum of the sapCreditMemoRequestItemPricingElementDatum to the related item.
// Sets o.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum to related.
// Adds o to related.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData.
func (o *SapCreditMemoRequestItemPricingElementDatum) SetCreditMemoRequestSapCreditMemoRequestHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCreditMemoRequestHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_credit_memo_request_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CreditMemoRequest"}),
		strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CreditMemoRequest, o.CreditMemoRequest, o.CreditMemoRequestItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreditMemoRequest = related.CreditMemoRequest
	if o.R == nil {
		o.R = &sapCreditMemoRequestItemPricingElementDatumR{
			CreditMemoRequestSapCreditMemoRequestHeaderDatum: related,
		}
	} else {
		o.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapCreditMemoRequestHeaderDatumR{
			CreditMemoRequestSapCreditMemoRequestItemPricingElementData: SapCreditMemoRequestItemPricingElementDatumSlice{o},
		}
	} else {
		related.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData = append(related.R.CreditMemoRequestSapCreditMemoRequestItemPricingElementData, o)
	}

	return nil
}

// SapCreditMemoRequestItemPricingElementData retrieves all the records using an executor.
func SapCreditMemoRequestItemPricingElementData(mods ...qm.QueryMod) sapCreditMemoRequestItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`sap_credit_memo_request_item_pricing_element_data`"))
	return sapCreditMemoRequestItemPricingElementDatumQuery{NewQuery(mods...)}
}

// FindSapCreditMemoRequestItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCreditMemoRequestItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, creditMemoRequestItem string, pricingProcedureStep string, pricingProcedureCounter string, selectCols ...string) (*SapCreditMemoRequestItemPricingElementDatum, error) {
	sapCreditMemoRequestItemPricingElementDatumObj := &SapCreditMemoRequestItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_credit_memo_request_item_pricing_element_data` where `CreditMemoRequest`=? AND `CreditMemoRequestItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, creditMemoRequest, creditMemoRequestItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, sapCreditMemoRequestItemPricingElementDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_credit_memo_request_item_pricing_element_data")
	}

	if err = sapCreditMemoRequestItemPricingElementDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCreditMemoRequestItemPricingElementDatumObj, err
	}

	return sapCreditMemoRequestItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCreditMemoRequestItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_item_pricing_element_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCreditMemoRequestItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestItemPricingElementDatumInsertCache[key]
	sapCreditMemoRequestItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCreditMemoRequestItemPricingElementDatumAllColumns,
			sapCreditMemoRequestItemPricingElementDatumColumnsWithDefault,
			sapCreditMemoRequestItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_credit_memo_request_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_credit_memo_request_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_credit_memo_request_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_credit_memo_request_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreditMemoRequest,
		o.CreditMemoRequestItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestItemPricingElementDatumInsertCacheMut.Lock()
		sapCreditMemoRequestItemPricingElementDatumInsertCache[key] = cache
		sapCreditMemoRequestItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCreditMemoRequestItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCreditMemoRequestItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCreditMemoRequestItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := sapCreditMemoRequestItemPricingElementDatumUpdateCache[key]
	sapCreditMemoRequestItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCreditMemoRequestItemPricingElementDatumAllColumns,
			sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_credit_memo_request_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_credit_memo_request_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, append(wl, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_credit_memo_request_item_pricing_element_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_credit_memo_request_item_pricing_element_data")
	}

	if !cached {
		sapCreditMemoRequestItemPricingElementDatumUpdateCacheMut.Lock()
		sapCreditMemoRequestItemPricingElementDatumUpdateCache[key] = cache
		sapCreditMemoRequestItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCreditMemoRequestItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_credit_memo_request_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_credit_memo_request_item_pricing_element_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCreditMemoRequestItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_credit_memo_request_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCreditMemoRequestItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCreditMemoRequestItemPricingElementDatum")
	}
	return rowsAff, nil
}

var mySQLSapCreditMemoRequestItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCreditMemoRequestItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_item_pricing_element_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCreditMemoRequestItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCreditMemoRequestItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestItemPricingElementDatumUpsertCache[key]
	sapCreditMemoRequestItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCreditMemoRequestItemPricingElementDatumAllColumns,
			sapCreditMemoRequestItemPricingElementDatumColumnsWithDefault,
			sapCreditMemoRequestItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCreditMemoRequestItemPricingElementDatumAllColumns,
			sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_credit_memo_request_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_credit_memo_request_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_credit_memo_request_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_credit_memo_request_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCreditMemoRequestItemPricingElementDatumType, sapCreditMemoRequestItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_credit_memo_request_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestItemPricingElementDatumUpsertCacheMut.Lock()
		sapCreditMemoRequestItemPricingElementDatumUpsertCache[key] = cache
		sapCreditMemoRequestItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCreditMemoRequestItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCreditMemoRequestItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCreditMemoRequestItemPricingElementDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCreditMemoRequestItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_credit_memo_request_item_pricing_element_data` WHERE `CreditMemoRequest`=? AND `CreditMemoRequestItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_credit_memo_request_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_credit_memo_request_item_pricing_element_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCreditMemoRequestItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCreditMemoRequestItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_credit_memo_request_item_pricing_element_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_item_pricing_element_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCreditMemoRequestItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCreditMemoRequestItemPricingElementDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_credit_memo_request_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCreditMemoRequestItemPricingElementDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_item_pricing_element_data")
	}

	if len(sapCreditMemoRequestItemPricingElementDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCreditMemoRequestItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCreditMemoRequestItemPricingElementDatum(ctx, exec, o.CreditMemoRequest, o.CreditMemoRequestItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCreditMemoRequestItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCreditMemoRequestItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_credit_memo_request_item_pricing_element_data`.* FROM `sap_credit_memo_request_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCreditMemoRequestItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// SapCreditMemoRequestItemPricingElementDatumExists checks if the SapCreditMemoRequestItemPricingElementDatum row exists.
func SapCreditMemoRequestItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, creditMemoRequestItem string, pricingProcedureStep string, pricingProcedureCounter string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_credit_memo_request_item_pricing_element_data` where `CreditMemoRequest`=? AND `CreditMemoRequestItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, creditMemoRequest, creditMemoRequestItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, creditMemoRequest, creditMemoRequestItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_credit_memo_request_item_pricing_element_data exists")
	}

	return exists, nil
}
