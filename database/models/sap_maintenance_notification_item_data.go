// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceNotificationItemDatum is an object representing the database table.
type SapMaintenanceNotificationItemDatum struct {
	MaintenanceNotification       string      `boil:"MaintenanceNotification" json:"MaintenanceNotification" toml:"MaintenanceNotification" yaml:"MaintenanceNotification"`
	MaintenanceNotificationItem   string      `boil:"MaintenanceNotificationItem" json:"MaintenanceNotificationItem" toml:"MaintenanceNotificationItem" yaml:"MaintenanceNotificationItem"`
	MaintNotifItemText            null.String `boil:"MaintNotifItemText" json:"MaintNotifItemText,omitempty" toml:"MaintNotifItemText" yaml:"MaintNotifItemText,omitempty"`
	MaintNotifDamageCodeGroup     null.String `boil:"MaintNotifDamageCodeGroup" json:"MaintNotifDamageCodeGroup,omitempty" toml:"MaintNotifDamageCodeGroup" yaml:"MaintNotifDamageCodeGroup,omitempty"`
	MaintNotifDamageCodeGroupName null.String `boil:"MaintNotifDamageCodeGroupName" json:"MaintNotifDamageCodeGroupName,omitempty" toml:"MaintNotifDamageCodeGroupName" yaml:"MaintNotifDamageCodeGroupName,omitempty"`
	MaintNotificationDamageCode   null.String `boil:"MaintNotificationDamageCode" json:"MaintNotificationDamageCode,omitempty" toml:"MaintNotificationDamageCode" yaml:"MaintNotificationDamageCode,omitempty"`
	MaintNotifDamageCodeName      null.String `boil:"MaintNotifDamageCodeName" json:"MaintNotifDamageCodeName,omitempty" toml:"MaintNotifDamageCodeName" yaml:"MaintNotifDamageCodeName,omitempty"`
	MaintNotifObjPrtCodeGroup     null.String `boil:"MaintNotifObjPrtCodeGroup" json:"MaintNotifObjPrtCodeGroup,omitempty" toml:"MaintNotifObjPrtCodeGroup" yaml:"MaintNotifObjPrtCodeGroup,omitempty"`
	MaintNotifObjPrtCodeGroupName null.String `boil:"MaintNotifObjPrtCodeGroupName" json:"MaintNotifObjPrtCodeGroupName,omitempty" toml:"MaintNotifObjPrtCodeGroupName" yaml:"MaintNotifObjPrtCodeGroupName,omitempty"`
	MaintNotifObjPrtCode          null.String `boil:"MaintNotifObjPrtCode" json:"MaintNotifObjPrtCode,omitempty" toml:"MaintNotifObjPrtCode" yaml:"MaintNotifObjPrtCode,omitempty"`
	MaintNotifObjPrtCodeName      null.String `boil:"MaintNotifObjPrtCodeName" json:"MaintNotifObjPrtCodeName,omitempty" toml:"MaintNotifObjPrtCodeName" yaml:"MaintNotifObjPrtCodeName,omitempty"`
	IsDeleted                     null.Bool   `boil:"IsDeleted" json:"IsDeleted,omitempty" toml:"IsDeleted" yaml:"IsDeleted,omitempty"`

	R *sapMaintenanceNotificationItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceNotificationItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceNotificationItemDatumColumns = struct {
	MaintenanceNotification       string
	MaintenanceNotificationItem   string
	MaintNotifItemText            string
	MaintNotifDamageCodeGroup     string
	MaintNotifDamageCodeGroupName string
	MaintNotificationDamageCode   string
	MaintNotifDamageCodeName      string
	MaintNotifObjPrtCodeGroup     string
	MaintNotifObjPrtCodeGroupName string
	MaintNotifObjPrtCode          string
	MaintNotifObjPrtCodeName      string
	IsDeleted                     string
}{
	MaintenanceNotification:       "MaintenanceNotification",
	MaintenanceNotificationItem:   "MaintenanceNotificationItem",
	MaintNotifItemText:            "MaintNotifItemText",
	MaintNotifDamageCodeGroup:     "MaintNotifDamageCodeGroup",
	MaintNotifDamageCodeGroupName: "MaintNotifDamageCodeGroupName",
	MaintNotificationDamageCode:   "MaintNotificationDamageCode",
	MaintNotifDamageCodeName:      "MaintNotifDamageCodeName",
	MaintNotifObjPrtCodeGroup:     "MaintNotifObjPrtCodeGroup",
	MaintNotifObjPrtCodeGroupName: "MaintNotifObjPrtCodeGroupName",
	MaintNotifObjPrtCode:          "MaintNotifObjPrtCode",
	MaintNotifObjPrtCodeName:      "MaintNotifObjPrtCodeName",
	IsDeleted:                     "IsDeleted",
}

var SapMaintenanceNotificationItemDatumTableColumns = struct {
	MaintenanceNotification       string
	MaintenanceNotificationItem   string
	MaintNotifItemText            string
	MaintNotifDamageCodeGroup     string
	MaintNotifDamageCodeGroupName string
	MaintNotificationDamageCode   string
	MaintNotifDamageCodeName      string
	MaintNotifObjPrtCodeGroup     string
	MaintNotifObjPrtCodeGroupName string
	MaintNotifObjPrtCode          string
	MaintNotifObjPrtCodeName      string
	IsDeleted                     string
}{
	MaintenanceNotification:       "sap_maintenance_notification_item_data.MaintenanceNotification",
	MaintenanceNotificationItem:   "sap_maintenance_notification_item_data.MaintenanceNotificationItem",
	MaintNotifItemText:            "sap_maintenance_notification_item_data.MaintNotifItemText",
	MaintNotifDamageCodeGroup:     "sap_maintenance_notification_item_data.MaintNotifDamageCodeGroup",
	MaintNotifDamageCodeGroupName: "sap_maintenance_notification_item_data.MaintNotifDamageCodeGroupName",
	MaintNotificationDamageCode:   "sap_maintenance_notification_item_data.MaintNotificationDamageCode",
	MaintNotifDamageCodeName:      "sap_maintenance_notification_item_data.MaintNotifDamageCodeName",
	MaintNotifObjPrtCodeGroup:     "sap_maintenance_notification_item_data.MaintNotifObjPrtCodeGroup",
	MaintNotifObjPrtCodeGroupName: "sap_maintenance_notification_item_data.MaintNotifObjPrtCodeGroupName",
	MaintNotifObjPrtCode:          "sap_maintenance_notification_item_data.MaintNotifObjPrtCode",
	MaintNotifObjPrtCodeName:      "sap_maintenance_notification_item_data.MaintNotifObjPrtCodeName",
	IsDeleted:                     "sap_maintenance_notification_item_data.IsDeleted",
}

// Generated where

var SapMaintenanceNotificationItemDatumWhere = struct {
	MaintenanceNotification       whereHelperstring
	MaintenanceNotificationItem   whereHelperstring
	MaintNotifItemText            whereHelpernull_String
	MaintNotifDamageCodeGroup     whereHelpernull_String
	MaintNotifDamageCodeGroupName whereHelpernull_String
	MaintNotificationDamageCode   whereHelpernull_String
	MaintNotifDamageCodeName      whereHelpernull_String
	MaintNotifObjPrtCodeGroup     whereHelpernull_String
	MaintNotifObjPrtCodeGroupName whereHelpernull_String
	MaintNotifObjPrtCode          whereHelpernull_String
	MaintNotifObjPrtCodeName      whereHelpernull_String
	IsDeleted                     whereHelpernull_Bool
}{
	MaintenanceNotification:       whereHelperstring{field: "`sap_maintenance_notification_item_data`.`MaintenanceNotification`"},
	MaintenanceNotificationItem:   whereHelperstring{field: "`sap_maintenance_notification_item_data`.`MaintenanceNotificationItem`"},
	MaintNotifItemText:            whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifItemText`"},
	MaintNotifDamageCodeGroup:     whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifDamageCodeGroup`"},
	MaintNotifDamageCodeGroupName: whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifDamageCodeGroupName`"},
	MaintNotificationDamageCode:   whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotificationDamageCode`"},
	MaintNotifDamageCodeName:      whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifDamageCodeName`"},
	MaintNotifObjPrtCodeGroup:     whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifObjPrtCodeGroup`"},
	MaintNotifObjPrtCodeGroupName: whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifObjPrtCodeGroupName`"},
	MaintNotifObjPrtCode:          whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifObjPrtCode`"},
	MaintNotifObjPrtCodeName:      whereHelpernull_String{field: "`sap_maintenance_notification_item_data`.`MaintNotifObjPrtCodeName`"},
	IsDeleted:                     whereHelpernull_Bool{field: "`sap_maintenance_notification_item_data`.`IsDeleted`"},
}

// SapMaintenanceNotificationItemDatumRels is where relationship names are stored.
var SapMaintenanceNotificationItemDatumRels = struct {
	MaintenanceNotificationSapMaintenanceNotificationHeaderDatum string
}{
	MaintenanceNotificationSapMaintenanceNotificationHeaderDatum: "MaintenanceNotificationSapMaintenanceNotificationHeaderDatum",
}

// sapMaintenanceNotificationItemDatumR is where relationships are stored.
type sapMaintenanceNotificationItemDatumR struct {
	MaintenanceNotificationSapMaintenanceNotificationHeaderDatum *SapMaintenanceNotificationHeaderDatum `boil:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum" json:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum" toml:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum" yaml:"MaintenanceNotificationSapMaintenanceNotificationHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceNotificationItemDatumR) NewStruct() *sapMaintenanceNotificationItemDatumR {
	return &sapMaintenanceNotificationItemDatumR{}
}

// sapMaintenanceNotificationItemDatumL is where Load methods for each relationship are stored.
type sapMaintenanceNotificationItemDatumL struct{}

var (
	sapMaintenanceNotificationItemDatumAllColumns            = []string{"MaintenanceNotification", "MaintenanceNotificationItem", "MaintNotifItemText", "MaintNotifDamageCodeGroup", "MaintNotifDamageCodeGroupName", "MaintNotificationDamageCode", "MaintNotifDamageCodeName", "MaintNotifObjPrtCodeGroup", "MaintNotifObjPrtCodeGroupName", "MaintNotifObjPrtCode", "MaintNotifObjPrtCodeName", "IsDeleted"}
	sapMaintenanceNotificationItemDatumColumnsWithoutDefault = []string{"MaintenanceNotification", "MaintenanceNotificationItem", "MaintNotifItemText", "MaintNotifDamageCodeGroup", "MaintNotifDamageCodeGroupName", "MaintNotificationDamageCode", "MaintNotifDamageCodeName", "MaintNotifObjPrtCodeGroup", "MaintNotifObjPrtCodeGroupName", "MaintNotifObjPrtCode", "MaintNotifObjPrtCodeName", "IsDeleted"}
	sapMaintenanceNotificationItemDatumColumnsWithDefault    = []string{}
	sapMaintenanceNotificationItemDatumPrimaryKeyColumns     = []string{"MaintenanceNotification", "MaintenanceNotificationItem"}
	sapMaintenanceNotificationItemDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceNotificationItemDatumSlice is an alias for a slice of pointers to SapMaintenanceNotificationItemDatum.
	// This should almost always be used instead of []SapMaintenanceNotificationItemDatum.
	SapMaintenanceNotificationItemDatumSlice []*SapMaintenanceNotificationItemDatum
	// SapMaintenanceNotificationItemDatumHook is the signature for custom SapMaintenanceNotificationItemDatum hook methods
	SapMaintenanceNotificationItemDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceNotificationItemDatum) error

	sapMaintenanceNotificationItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceNotificationItemDatumType                 = reflect.TypeOf(&SapMaintenanceNotificationItemDatum{})
	sapMaintenanceNotificationItemDatumMapping              = queries.MakeStructMapping(sapMaintenanceNotificationItemDatumType)
	sapMaintenanceNotificationItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, sapMaintenanceNotificationItemDatumPrimaryKeyColumns)
	sapMaintenanceNotificationItemDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceNotificationItemDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceNotificationItemDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceNotificationItemDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceNotificationItemDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceNotificationItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceNotificationItemDatumAfterSelectHooks []SapMaintenanceNotificationItemDatumHook

var sapMaintenanceNotificationItemDatumBeforeInsertHooks []SapMaintenanceNotificationItemDatumHook
var sapMaintenanceNotificationItemDatumAfterInsertHooks []SapMaintenanceNotificationItemDatumHook

var sapMaintenanceNotificationItemDatumBeforeUpdateHooks []SapMaintenanceNotificationItemDatumHook
var sapMaintenanceNotificationItemDatumAfterUpdateHooks []SapMaintenanceNotificationItemDatumHook

var sapMaintenanceNotificationItemDatumBeforeDeleteHooks []SapMaintenanceNotificationItemDatumHook
var sapMaintenanceNotificationItemDatumAfterDeleteHooks []SapMaintenanceNotificationItemDatumHook

var sapMaintenanceNotificationItemDatumBeforeUpsertHooks []SapMaintenanceNotificationItemDatumHook
var sapMaintenanceNotificationItemDatumAfterUpsertHooks []SapMaintenanceNotificationItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceNotificationItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceNotificationItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceNotificationItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceNotificationItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceNotificationItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceNotificationItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceNotificationItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceNotificationItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceNotificationItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceNotificationItemDatumHook registers your hook function for all future operations.
func AddSapMaintenanceNotificationItemDatumHook(hookPoint boil.HookPoint, sapMaintenanceNotificationItemDatumHook SapMaintenanceNotificationItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceNotificationItemDatumAfterSelectHooks = append(sapMaintenanceNotificationItemDatumAfterSelectHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceNotificationItemDatumBeforeInsertHooks = append(sapMaintenanceNotificationItemDatumBeforeInsertHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceNotificationItemDatumAfterInsertHooks = append(sapMaintenanceNotificationItemDatumAfterInsertHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceNotificationItemDatumBeforeUpdateHooks = append(sapMaintenanceNotificationItemDatumBeforeUpdateHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceNotificationItemDatumAfterUpdateHooks = append(sapMaintenanceNotificationItemDatumAfterUpdateHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceNotificationItemDatumBeforeDeleteHooks = append(sapMaintenanceNotificationItemDatumBeforeDeleteHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceNotificationItemDatumAfterDeleteHooks = append(sapMaintenanceNotificationItemDatumAfterDeleteHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceNotificationItemDatumBeforeUpsertHooks = append(sapMaintenanceNotificationItemDatumBeforeUpsertHooks, sapMaintenanceNotificationItemDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceNotificationItemDatumAfterUpsertHooks = append(sapMaintenanceNotificationItemDatumAfterUpsertHooks, sapMaintenanceNotificationItemDatumHook)
	}
}

// One returns a single sapMaintenanceNotificationItemDatum record from the query.
func (q sapMaintenanceNotificationItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceNotificationItemDatum, error) {
	o := &SapMaintenanceNotificationItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_notification_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceNotificationItemDatum records from the query.
func (q sapMaintenanceNotificationItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceNotificationItemDatumSlice, error) {
	var o []*SapMaintenanceNotificationItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceNotificationItemDatum slice")
	}

	if len(sapMaintenanceNotificationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceNotificationItemDatum records in the query.
func (q sapMaintenanceNotificationItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_notification_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceNotificationItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_notification_item_data exists")
	}

	return count > 0, nil
}

// MaintenanceNotificationSapMaintenanceNotificationHeaderDatum pointed to by the foreign key.
func (o *SapMaintenanceNotificationItemDatum) MaintenanceNotificationSapMaintenanceNotificationHeaderDatum(mods ...qm.QueryMod) sapMaintenanceNotificationHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`MaintenanceNotification` = ?", o.MaintenanceNotification),
	}

	queryMods = append(queryMods, mods...)

	query := SapMaintenanceNotificationHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_notification_header_data`")

	return query
}

// LoadMaintenanceNotificationSapMaintenanceNotificationHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapMaintenanceNotificationItemDatumL) LoadMaintenanceNotificationSapMaintenanceNotificationHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceNotificationItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceNotificationItemDatum
	var object *SapMaintenanceNotificationItemDatum

	if singular {
		object = maybeSapMaintenanceNotificationItemDatum.(*SapMaintenanceNotificationItemDatum)
	} else {
		slice = *maybeSapMaintenanceNotificationItemDatum.(*[]*SapMaintenanceNotificationItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceNotificationItemDatumR{}
		}
		args = append(args, object.MaintenanceNotification)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceNotificationItemDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceNotification {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceNotification)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_notification_header_data`),
		qm.WhereIn(`sap_maintenance_notification_header_data.MaintenanceNotification in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapMaintenanceNotificationHeaderDatum")
	}

	var resultSlice []*SapMaintenanceNotificationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapMaintenanceNotificationHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_maintenance_notification_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_notification_header_data")
	}

	if len(sapMaintenanceNotificationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapMaintenanceNotificationHeaderDatumR{}
		}
		foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemData = append(foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaintenanceNotification == foreign.MaintenanceNotification {
				local.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapMaintenanceNotificationHeaderDatumR{}
				}
				foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemData = append(foreign.R.MaintenanceNotificationSapMaintenanceNotificationItemData, local)
				break
			}
		}
	}

	return nil
}

// SetMaintenanceNotificationSapMaintenanceNotificationHeaderDatum of the sapMaintenanceNotificationItemDatum to the related item.
// Sets o.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum to related.
// Adds o to related.R.MaintenanceNotificationSapMaintenanceNotificationItemData.
func (o *SapMaintenanceNotificationItemDatum) SetMaintenanceNotificationSapMaintenanceNotificationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapMaintenanceNotificationHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_maintenance_notification_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceNotification"}),
		strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.MaintenanceNotification, o.MaintenanceNotification, o.MaintenanceNotificationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaintenanceNotification = related.MaintenanceNotification
	if o.R == nil {
		o.R = &sapMaintenanceNotificationItemDatumR{
			MaintenanceNotificationSapMaintenanceNotificationHeaderDatum: related,
		}
	} else {
		o.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapMaintenanceNotificationHeaderDatumR{
			MaintenanceNotificationSapMaintenanceNotificationItemData: SapMaintenanceNotificationItemDatumSlice{o},
		}
	} else {
		related.R.MaintenanceNotificationSapMaintenanceNotificationItemData = append(related.R.MaintenanceNotificationSapMaintenanceNotificationItemData, o)
	}

	return nil
}

// SapMaintenanceNotificationItemData retrieves all the records using an executor.
func SapMaintenanceNotificationItemData(mods ...qm.QueryMod) sapMaintenanceNotificationItemDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_notification_item_data`"))
	return sapMaintenanceNotificationItemDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceNotificationItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceNotificationItemDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceNotification string, maintenanceNotificationItem string, selectCols ...string) (*SapMaintenanceNotificationItemDatum, error) {
	sapMaintenanceNotificationItemDatumObj := &SapMaintenanceNotificationItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_notification_item_data` where `MaintenanceNotification`=? AND `MaintenanceNotificationItem`=?", sel,
	)

	q := queries.Raw(query, maintenanceNotification, maintenanceNotificationItem)

	err := q.Bind(ctx, exec, sapMaintenanceNotificationItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_notification_item_data")
	}

	if err = sapMaintenanceNotificationItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceNotificationItemDatumObj, err
	}

	return sapMaintenanceNotificationItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceNotificationItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_notification_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceNotificationItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceNotificationItemDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationItemDatumInsertCache[key]
	sapMaintenanceNotificationItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceNotificationItemDatumAllColumns,
			sapMaintenanceNotificationItemDatumColumnsWithDefault,
			sapMaintenanceNotificationItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_notification_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_notification_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_notification_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_notification_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceNotification,
		o.MaintenanceNotificationItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_notification_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceNotificationItemDatumInsertCacheMut.Lock()
		sapMaintenanceNotificationItemDatumInsertCache[key] = cache
		sapMaintenanceNotificationItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceNotificationItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceNotificationItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceNotificationItemDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationItemDatumUpdateCache[key]
	sapMaintenanceNotificationItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceNotificationItemDatumAllColumns,
			sapMaintenanceNotificationItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_notification_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_notification_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, append(wl, sapMaintenanceNotificationItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_notification_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_notification_item_data")
	}

	if !cached {
		sapMaintenanceNotificationItemDatumUpdateCacheMut.Lock()
		sapMaintenanceNotificationItemDatumUpdateCache[key] = cache
		sapMaintenanceNotificationItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceNotificationItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_notification_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_notification_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceNotificationItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_notification_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceNotificationItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceNotificationItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceNotificationItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceNotificationItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_notification_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceNotificationItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceNotificationItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceNotificationItemDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationItemDatumUpsertCache[key]
	sapMaintenanceNotificationItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceNotificationItemDatumAllColumns,
			sapMaintenanceNotificationItemDatumColumnsWithDefault,
			sapMaintenanceNotificationItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceNotificationItemDatumAllColumns,
			sapMaintenanceNotificationItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_notification_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_notification_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_notification_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_notification_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceNotificationItemDatumType, sapMaintenanceNotificationItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_notification_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_notification_item_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceNotificationItemDatumUpsertCacheMut.Lock()
		sapMaintenanceNotificationItemDatumUpsertCache[key] = cache
		sapMaintenanceNotificationItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceNotificationItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceNotificationItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceNotificationItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceNotificationItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_notification_item_data` WHERE `MaintenanceNotification`=? AND `MaintenanceNotificationItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_notification_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_notification_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceNotificationItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceNotificationItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_notification_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_notification_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceNotificationItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceNotificationItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_notification_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceNotificationItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_notification_item_data")
	}

	if len(sapMaintenanceNotificationItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceNotificationItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceNotificationItemDatum(ctx, exec, o.MaintenanceNotification, o.MaintenanceNotificationItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceNotificationItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceNotificationItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_notification_item_data`.* FROM `sap_maintenance_notification_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceNotificationItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceNotificationItemDatumExists checks if the SapMaintenanceNotificationItemDatum row exists.
func SapMaintenanceNotificationItemDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceNotification string, maintenanceNotificationItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_notification_item_data` where `MaintenanceNotification`=? AND `MaintenanceNotificationItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceNotification, maintenanceNotificationItem)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceNotification, maintenanceNotificationItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_notification_item_data exists")
	}

	return exists, nil
}
