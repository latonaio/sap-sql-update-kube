// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCustomerReturnHeaderDatum is an object representing the database table.
type SapCustomerReturnHeaderDatum struct {
	CustomerReturn                string      `boil:"CustomerReturn" json:"CustomerReturn" toml:"CustomerReturn" yaml:"CustomerReturn"`
	CustomerReturnType            null.String `boil:"CustomerReturnType" json:"CustomerReturnType,omitempty" toml:"CustomerReturnType" yaml:"CustomerReturnType,omitempty"`
	SalesOrganization             null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel           null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision          null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                    null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                   null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                 null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                   null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	SenderBusinessSystemName      null.String `boil:"SenderBusinessSystemName" json:"SenderBusinessSystemName,omitempty" toml:"SenderBusinessSystemName" yaml:"SenderBusinessSystemName,omitempty"`
	LastChangeDateTime            null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	PurchaseOrderByCustomer       null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderType     null.String `boil:"CustomerPurchaseOrderType" json:"CustomerPurchaseOrderType,omitempty" toml:"CustomerPurchaseOrderType" yaml:"CustomerPurchaseOrderType,omitempty"`
	CustomerPurchaseOrderDate     null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	CustomerReturnDate            null.String `boil:"CustomerReturnDate" json:"CustomerReturnDate,omitempty" toml:"CustomerReturnDate" yaml:"CustomerReturnDate,omitempty"`
	TotalNetAmount                null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency           null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	SDDocumentReason              null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PricingDate                   null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	RequestedDeliveryDate         null.String `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate,omitempty" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate,omitempty"`
	ShippingType                  null.String `boil:"ShippingType" json:"ShippingType,omitempty" toml:"ShippingType" yaml:"ShippingType,omitempty"`
	HeaderBillingBlockReason      null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	DeliveryBlockReason           null.String `boil:"DeliveryBlockReason" json:"DeliveryBlockReason,omitempty" toml:"DeliveryBlockReason" yaml:"DeliveryBlockReason,omitempty"`
	IncotermsClassification       null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms          null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                 null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	CustomerTaxClassification1    null.String `boil:"CustomerTaxClassification1" json:"CustomerTaxClassification1,omitempty" toml:"CustomerTaxClassification1" yaml:"CustomerTaxClassification1,omitempty"`
	RetsMgmtProcess               null.String `boil:"RetsMgmtProcess" json:"RetsMgmtProcess,omitempty" toml:"RetsMgmtProcess" yaml:"RetsMgmtProcess,omitempty"`
	ReferenceSDDocument           null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentCategory   null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	CustomerReturnApprovalReason  null.String `boil:"CustomerReturnApprovalReason" json:"CustomerReturnApprovalReason,omitempty" toml:"CustomerReturnApprovalReason" yaml:"CustomerReturnApprovalReason,omitempty"`
	SalesDocApprovalStatus        null.String `boil:"SalesDocApprovalStatus" json:"SalesDocApprovalStatus,omitempty" toml:"SalesDocApprovalStatus" yaml:"SalesDocApprovalStatus,omitempty"`
	RetsMgmtLogProcgStatus        null.String `boil:"RetsMgmtLogProcgStatus" json:"RetsMgmtLogProcgStatus,omitempty" toml:"RetsMgmtLogProcgStatus" yaml:"RetsMgmtLogProcgStatus,omitempty"`
	RetsMgmtCompnProcgStatus      null.String `boil:"RetsMgmtCompnProcgStatus" json:"RetsMgmtCompnProcgStatus,omitempty" toml:"RetsMgmtCompnProcgStatus" yaml:"RetsMgmtCompnProcgStatus,omitempty"`
	RetsMgmtProcessingStatus      null.String `boil:"RetsMgmtProcessingStatus" json:"RetsMgmtProcessingStatus,omitempty" toml:"RetsMgmtProcessingStatus" yaml:"RetsMgmtProcessingStatus,omitempty"`
	OverallSDProcessStatus        null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	TotalCreditCheckStatus        null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	OverallSDDocumentRejectionSts null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`

	R *sapCustomerReturnHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCustomerReturnHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCustomerReturnHeaderDatumColumns = struct {
	CustomerReturn                string
	CustomerReturnType            string
	SalesOrganization             string
	DistributionChannel           string
	OrganizationDivision          string
	SalesGroup                    string
	SalesOffice                   string
	SalesDistrict                 string
	SoldToParty                   string
	CreationDate                  string
	LastChangeDate                string
	SenderBusinessSystemName      string
	LastChangeDateTime            string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderType     string
	CustomerPurchaseOrderDate     string
	CustomerReturnDate            string
	TotalNetAmount                string
	TransactionCurrency           string
	SDDocumentReason              string
	PricingDate                   string
	RequestedDeliveryDate         string
	ShippingType                  string
	HeaderBillingBlockReason      string
	DeliveryBlockReason           string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	PaymentMethod                 string
	CustomerTaxClassification1    string
	RetsMgmtProcess               string
	ReferenceSDDocument           string
	ReferenceSDDocumentCategory   string
	CustomerReturnApprovalReason  string
	SalesDocApprovalStatus        string
	RetsMgmtLogProcgStatus        string
	RetsMgmtCompnProcgStatus      string
	RetsMgmtProcessingStatus      string
	OverallSDProcessStatus        string
	TotalCreditCheckStatus        string
	OverallSDDocumentRejectionSts string
}{
	CustomerReturn:                "CustomerReturn",
	CustomerReturnType:            "CustomerReturnType",
	SalesOrganization:             "SalesOrganization",
	DistributionChannel:           "DistributionChannel",
	OrganizationDivision:          "OrganizationDivision",
	SalesGroup:                    "SalesGroup",
	SalesOffice:                   "SalesOffice",
	SalesDistrict:                 "SalesDistrict",
	SoldToParty:                   "SoldToParty",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	SenderBusinessSystemName:      "SenderBusinessSystemName",
	LastChangeDateTime:            "LastChangeDateTime",
	PurchaseOrderByCustomer:       "PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:     "CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:     "CustomerPurchaseOrderDate",
	CustomerReturnDate:            "CustomerReturnDate",
	TotalNetAmount:                "TotalNetAmount",
	TransactionCurrency:           "TransactionCurrency",
	SDDocumentReason:              "SDDocumentReason",
	PricingDate:                   "PricingDate",
	RequestedDeliveryDate:         "RequestedDeliveryDate",
	ShippingType:                  "ShippingType",
	HeaderBillingBlockReason:      "HeaderBillingBlockReason",
	DeliveryBlockReason:           "DeliveryBlockReason",
	IncotermsClassification:       "IncotermsClassification",
	CustomerPaymentTerms:          "CustomerPaymentTerms",
	PaymentMethod:                 "PaymentMethod",
	CustomerTaxClassification1:    "CustomerTaxClassification1",
	RetsMgmtProcess:               "RetsMgmtProcess",
	ReferenceSDDocument:           "ReferenceSDDocument",
	ReferenceSDDocumentCategory:   "ReferenceSDDocumentCategory",
	CustomerReturnApprovalReason:  "CustomerReturnApprovalReason",
	SalesDocApprovalStatus:        "SalesDocApprovalStatus",
	RetsMgmtLogProcgStatus:        "RetsMgmtLogProcgStatus",
	RetsMgmtCompnProcgStatus:      "RetsMgmtCompnProcgStatus",
	RetsMgmtProcessingStatus:      "RetsMgmtProcessingStatus",
	OverallSDProcessStatus:        "OverallSDProcessStatus",
	TotalCreditCheckStatus:        "TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts: "OverallSDDocumentRejectionSts",
}

var SapCustomerReturnHeaderDatumTableColumns = struct {
	CustomerReturn                string
	CustomerReturnType            string
	SalesOrganization             string
	DistributionChannel           string
	OrganizationDivision          string
	SalesGroup                    string
	SalesOffice                   string
	SalesDistrict                 string
	SoldToParty                   string
	CreationDate                  string
	LastChangeDate                string
	SenderBusinessSystemName      string
	LastChangeDateTime            string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderType     string
	CustomerPurchaseOrderDate     string
	CustomerReturnDate            string
	TotalNetAmount                string
	TransactionCurrency           string
	SDDocumentReason              string
	PricingDate                   string
	RequestedDeliveryDate         string
	ShippingType                  string
	HeaderBillingBlockReason      string
	DeliveryBlockReason           string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	PaymentMethod                 string
	CustomerTaxClassification1    string
	RetsMgmtProcess               string
	ReferenceSDDocument           string
	ReferenceSDDocumentCategory   string
	CustomerReturnApprovalReason  string
	SalesDocApprovalStatus        string
	RetsMgmtLogProcgStatus        string
	RetsMgmtCompnProcgStatus      string
	RetsMgmtProcessingStatus      string
	OverallSDProcessStatus        string
	TotalCreditCheckStatus        string
	OverallSDDocumentRejectionSts string
}{
	CustomerReturn:                "sap_customer_return_header_data.CustomerReturn",
	CustomerReturnType:            "sap_customer_return_header_data.CustomerReturnType",
	SalesOrganization:             "sap_customer_return_header_data.SalesOrganization",
	DistributionChannel:           "sap_customer_return_header_data.DistributionChannel",
	OrganizationDivision:          "sap_customer_return_header_data.OrganizationDivision",
	SalesGroup:                    "sap_customer_return_header_data.SalesGroup",
	SalesOffice:                   "sap_customer_return_header_data.SalesOffice",
	SalesDistrict:                 "sap_customer_return_header_data.SalesDistrict",
	SoldToParty:                   "sap_customer_return_header_data.SoldToParty",
	CreationDate:                  "sap_customer_return_header_data.CreationDate",
	LastChangeDate:                "sap_customer_return_header_data.LastChangeDate",
	SenderBusinessSystemName:      "sap_customer_return_header_data.SenderBusinessSystemName",
	LastChangeDateTime:            "sap_customer_return_header_data.LastChangeDateTime",
	PurchaseOrderByCustomer:       "sap_customer_return_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:     "sap_customer_return_header_data.CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:     "sap_customer_return_header_data.CustomerPurchaseOrderDate",
	CustomerReturnDate:            "sap_customer_return_header_data.CustomerReturnDate",
	TotalNetAmount:                "sap_customer_return_header_data.TotalNetAmount",
	TransactionCurrency:           "sap_customer_return_header_data.TransactionCurrency",
	SDDocumentReason:              "sap_customer_return_header_data.SDDocumentReason",
	PricingDate:                   "sap_customer_return_header_data.PricingDate",
	RequestedDeliveryDate:         "sap_customer_return_header_data.RequestedDeliveryDate",
	ShippingType:                  "sap_customer_return_header_data.ShippingType",
	HeaderBillingBlockReason:      "sap_customer_return_header_data.HeaderBillingBlockReason",
	DeliveryBlockReason:           "sap_customer_return_header_data.DeliveryBlockReason",
	IncotermsClassification:       "sap_customer_return_header_data.IncotermsClassification",
	CustomerPaymentTerms:          "sap_customer_return_header_data.CustomerPaymentTerms",
	PaymentMethod:                 "sap_customer_return_header_data.PaymentMethod",
	CustomerTaxClassification1:    "sap_customer_return_header_data.CustomerTaxClassification1",
	RetsMgmtProcess:               "sap_customer_return_header_data.RetsMgmtProcess",
	ReferenceSDDocument:           "sap_customer_return_header_data.ReferenceSDDocument",
	ReferenceSDDocumentCategory:   "sap_customer_return_header_data.ReferenceSDDocumentCategory",
	CustomerReturnApprovalReason:  "sap_customer_return_header_data.CustomerReturnApprovalReason",
	SalesDocApprovalStatus:        "sap_customer_return_header_data.SalesDocApprovalStatus",
	RetsMgmtLogProcgStatus:        "sap_customer_return_header_data.RetsMgmtLogProcgStatus",
	RetsMgmtCompnProcgStatus:      "sap_customer_return_header_data.RetsMgmtCompnProcgStatus",
	RetsMgmtProcessingStatus:      "sap_customer_return_header_data.RetsMgmtProcessingStatus",
	OverallSDProcessStatus:        "sap_customer_return_header_data.OverallSDProcessStatus",
	TotalCreditCheckStatus:        "sap_customer_return_header_data.TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts: "sap_customer_return_header_data.OverallSDDocumentRejectionSts",
}

// Generated where

var SapCustomerReturnHeaderDatumWhere = struct {
	CustomerReturn                whereHelperstring
	CustomerReturnType            whereHelpernull_String
	SalesOrganization             whereHelpernull_String
	DistributionChannel           whereHelpernull_String
	OrganizationDivision          whereHelpernull_String
	SalesGroup                    whereHelpernull_String
	SalesOffice                   whereHelpernull_String
	SalesDistrict                 whereHelpernull_String
	SoldToParty                   whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	SenderBusinessSystemName      whereHelpernull_String
	LastChangeDateTime            whereHelpernull_String
	PurchaseOrderByCustomer       whereHelpernull_String
	CustomerPurchaseOrderType     whereHelpernull_String
	CustomerPurchaseOrderDate     whereHelpernull_String
	CustomerReturnDate            whereHelpernull_String
	TotalNetAmount                whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	SDDocumentReason              whereHelpernull_String
	PricingDate                   whereHelpernull_String
	RequestedDeliveryDate         whereHelpernull_String
	ShippingType                  whereHelpernull_String
	HeaderBillingBlockReason      whereHelpernull_String
	DeliveryBlockReason           whereHelpernull_String
	IncotermsClassification       whereHelpernull_String
	CustomerPaymentTerms          whereHelpernull_String
	PaymentMethod                 whereHelpernull_String
	CustomerTaxClassification1    whereHelpernull_String
	RetsMgmtProcess               whereHelpernull_String
	ReferenceSDDocument           whereHelpernull_String
	ReferenceSDDocumentCategory   whereHelpernull_String
	CustomerReturnApprovalReason  whereHelpernull_String
	SalesDocApprovalStatus        whereHelpernull_String
	RetsMgmtLogProcgStatus        whereHelpernull_String
	RetsMgmtCompnProcgStatus      whereHelpernull_String
	RetsMgmtProcessingStatus      whereHelpernull_String
	OverallSDProcessStatus        whereHelpernull_String
	TotalCreditCheckStatus        whereHelpernull_String
	OverallSDDocumentRejectionSts whereHelpernull_String
}{
	CustomerReturn:                whereHelperstring{field: "`sap_customer_return_header_data`.`CustomerReturn`"},
	CustomerReturnType:            whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerReturnType`"},
	SalesOrganization:             whereHelpernull_String{field: "`sap_customer_return_header_data`.`SalesOrganization`"},
	DistributionChannel:           whereHelpernull_String{field: "`sap_customer_return_header_data`.`DistributionChannel`"},
	OrganizationDivision:          whereHelpernull_String{field: "`sap_customer_return_header_data`.`OrganizationDivision`"},
	SalesGroup:                    whereHelpernull_String{field: "`sap_customer_return_header_data`.`SalesGroup`"},
	SalesOffice:                   whereHelpernull_String{field: "`sap_customer_return_header_data`.`SalesOffice`"},
	SalesDistrict:                 whereHelpernull_String{field: "`sap_customer_return_header_data`.`SalesDistrict`"},
	SoldToParty:                   whereHelpernull_String{field: "`sap_customer_return_header_data`.`SoldToParty`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_customer_return_header_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_customer_return_header_data`.`LastChangeDate`"},
	SenderBusinessSystemName:      whereHelpernull_String{field: "`sap_customer_return_header_data`.`SenderBusinessSystemName`"},
	LastChangeDateTime:            whereHelpernull_String{field: "`sap_customer_return_header_data`.`LastChangeDateTime`"},
	PurchaseOrderByCustomer:       whereHelpernull_String{field: "`sap_customer_return_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderType:     whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerPurchaseOrderType`"},
	CustomerPurchaseOrderDate:     whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerPurchaseOrderDate`"},
	CustomerReturnDate:            whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerReturnDate`"},
	TotalNetAmount:                whereHelpernull_String{field: "`sap_customer_return_header_data`.`TotalNetAmount`"},
	TransactionCurrency:           whereHelpernull_String{field: "`sap_customer_return_header_data`.`TransactionCurrency`"},
	SDDocumentReason:              whereHelpernull_String{field: "`sap_customer_return_header_data`.`SDDocumentReason`"},
	PricingDate:                   whereHelpernull_String{field: "`sap_customer_return_header_data`.`PricingDate`"},
	RequestedDeliveryDate:         whereHelpernull_String{field: "`sap_customer_return_header_data`.`RequestedDeliveryDate`"},
	ShippingType:                  whereHelpernull_String{field: "`sap_customer_return_header_data`.`ShippingType`"},
	HeaderBillingBlockReason:      whereHelpernull_String{field: "`sap_customer_return_header_data`.`HeaderBillingBlockReason`"},
	DeliveryBlockReason:           whereHelpernull_String{field: "`sap_customer_return_header_data`.`DeliveryBlockReason`"},
	IncotermsClassification:       whereHelpernull_String{field: "`sap_customer_return_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:          whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                 whereHelpernull_String{field: "`sap_customer_return_header_data`.`PaymentMethod`"},
	CustomerTaxClassification1:    whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerTaxClassification1`"},
	RetsMgmtProcess:               whereHelpernull_String{field: "`sap_customer_return_header_data`.`RetsMgmtProcess`"},
	ReferenceSDDocument:           whereHelpernull_String{field: "`sap_customer_return_header_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentCategory:   whereHelpernull_String{field: "`sap_customer_return_header_data`.`ReferenceSDDocumentCategory`"},
	CustomerReturnApprovalReason:  whereHelpernull_String{field: "`sap_customer_return_header_data`.`CustomerReturnApprovalReason`"},
	SalesDocApprovalStatus:        whereHelpernull_String{field: "`sap_customer_return_header_data`.`SalesDocApprovalStatus`"},
	RetsMgmtLogProcgStatus:        whereHelpernull_String{field: "`sap_customer_return_header_data`.`RetsMgmtLogProcgStatus`"},
	RetsMgmtCompnProcgStatus:      whereHelpernull_String{field: "`sap_customer_return_header_data`.`RetsMgmtCompnProcgStatus`"},
	RetsMgmtProcessingStatus:      whereHelpernull_String{field: "`sap_customer_return_header_data`.`RetsMgmtProcessingStatus`"},
	OverallSDProcessStatus:        whereHelpernull_String{field: "`sap_customer_return_header_data`.`OverallSDProcessStatus`"},
	TotalCreditCheckStatus:        whereHelpernull_String{field: "`sap_customer_return_header_data`.`TotalCreditCheckStatus`"},
	OverallSDDocumentRejectionSts: whereHelpernull_String{field: "`sap_customer_return_header_data`.`OverallSDDocumentRejectionSts`"},
}

// SapCustomerReturnHeaderDatumRels is where relationship names are stored.
var SapCustomerReturnHeaderDatumRels = struct {
	CustomerReturnSapCustomerReturnHeaderPartnerData      string
	CustomerReturnSapCustomerReturnItemData               string
	CustomerReturnSapCustomerReturnItemPricingElementData string
	CustomerReturnSapCustomerReturnItemProcessStepData    string
	CustomerReturnSapCustomerReturnItemScheduleLineData   string
}{
	CustomerReturnSapCustomerReturnHeaderPartnerData:      "CustomerReturnSapCustomerReturnHeaderPartnerData",
	CustomerReturnSapCustomerReturnItemData:               "CustomerReturnSapCustomerReturnItemData",
	CustomerReturnSapCustomerReturnItemPricingElementData: "CustomerReturnSapCustomerReturnItemPricingElementData",
	CustomerReturnSapCustomerReturnItemProcessStepData:    "CustomerReturnSapCustomerReturnItemProcessStepData",
	CustomerReturnSapCustomerReturnItemScheduleLineData:   "CustomerReturnSapCustomerReturnItemScheduleLineData",
}

// sapCustomerReturnHeaderDatumR is where relationships are stored.
type sapCustomerReturnHeaderDatumR struct {
	CustomerReturnSapCustomerReturnHeaderPartnerData      SapCustomerReturnHeaderPartnerDatumSlice      `boil:"CustomerReturnSapCustomerReturnHeaderPartnerData" json:"CustomerReturnSapCustomerReturnHeaderPartnerData" toml:"CustomerReturnSapCustomerReturnHeaderPartnerData" yaml:"CustomerReturnSapCustomerReturnHeaderPartnerData"`
	CustomerReturnSapCustomerReturnItemData               SapCustomerReturnItemDatumSlice               `boil:"CustomerReturnSapCustomerReturnItemData" json:"CustomerReturnSapCustomerReturnItemData" toml:"CustomerReturnSapCustomerReturnItemData" yaml:"CustomerReturnSapCustomerReturnItemData"`
	CustomerReturnSapCustomerReturnItemPricingElementData SapCustomerReturnItemPricingElementDatumSlice `boil:"CustomerReturnSapCustomerReturnItemPricingElementData" json:"CustomerReturnSapCustomerReturnItemPricingElementData" toml:"CustomerReturnSapCustomerReturnItemPricingElementData" yaml:"CustomerReturnSapCustomerReturnItemPricingElementData"`
	CustomerReturnSapCustomerReturnItemProcessStepData    SapCustomerReturnItemProcessStepDatumSlice    `boil:"CustomerReturnSapCustomerReturnItemProcessStepData" json:"CustomerReturnSapCustomerReturnItemProcessStepData" toml:"CustomerReturnSapCustomerReturnItemProcessStepData" yaml:"CustomerReturnSapCustomerReturnItemProcessStepData"`
	CustomerReturnSapCustomerReturnItemScheduleLineData   SapCustomerReturnItemScheduleLineDatumSlice   `boil:"CustomerReturnSapCustomerReturnItemScheduleLineData" json:"CustomerReturnSapCustomerReturnItemScheduleLineData" toml:"CustomerReturnSapCustomerReturnItemScheduleLineData" yaml:"CustomerReturnSapCustomerReturnItemScheduleLineData"`
}

// NewStruct creates a new relationship struct
func (*sapCustomerReturnHeaderDatumR) NewStruct() *sapCustomerReturnHeaderDatumR {
	return &sapCustomerReturnHeaderDatumR{}
}

func (r *sapCustomerReturnHeaderDatumR) GetCustomerReturnSapCustomerReturnHeaderPartnerData() SapCustomerReturnHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnHeaderPartnerData
}

func (r *sapCustomerReturnHeaderDatumR) GetCustomerReturnSapCustomerReturnItemData() SapCustomerReturnItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnItemData
}

func (r *sapCustomerReturnHeaderDatumR) GetCustomerReturnSapCustomerReturnItemPricingElementData() SapCustomerReturnItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnItemPricingElementData
}

func (r *sapCustomerReturnHeaderDatumR) GetCustomerReturnSapCustomerReturnItemProcessStepData() SapCustomerReturnItemProcessStepDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnItemProcessStepData
}

func (r *sapCustomerReturnHeaderDatumR) GetCustomerReturnSapCustomerReturnItemScheduleLineData() SapCustomerReturnItemScheduleLineDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnItemScheduleLineData
}

// sapCustomerReturnHeaderDatumL is where Load methods for each relationship are stored.
type sapCustomerReturnHeaderDatumL struct{}

var (
	sapCustomerReturnHeaderDatumAllColumns            = []string{"CustomerReturn", "CustomerReturnType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "SenderBusinessSystemName", "LastChangeDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "CustomerReturnDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "RequestedDeliveryDate", "ShippingType", "HeaderBillingBlockReason", "DeliveryBlockReason", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "CustomerTaxClassification1", "RetsMgmtProcess", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "CustomerReturnApprovalReason", "SalesDocApprovalStatus", "RetsMgmtLogProcgStatus", "RetsMgmtCompnProcgStatus", "RetsMgmtProcessingStatus", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapCustomerReturnHeaderDatumColumnsWithoutDefault = []string{"CustomerReturn", "CustomerReturnType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "SenderBusinessSystemName", "LastChangeDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "CustomerReturnDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "RequestedDeliveryDate", "ShippingType", "HeaderBillingBlockReason", "DeliveryBlockReason", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "CustomerTaxClassification1", "RetsMgmtProcess", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "CustomerReturnApprovalReason", "SalesDocApprovalStatus", "RetsMgmtLogProcgStatus", "RetsMgmtCompnProcgStatus", "RetsMgmtProcessingStatus", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapCustomerReturnHeaderDatumColumnsWithDefault    = []string{}
	sapCustomerReturnHeaderDatumPrimaryKeyColumns     = []string{"CustomerReturn"}
	sapCustomerReturnHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapCustomerReturnHeaderDatumSlice is an alias for a slice of pointers to SapCustomerReturnHeaderDatum.
	// This should almost always be used instead of []SapCustomerReturnHeaderDatum.
	SapCustomerReturnHeaderDatumSlice []*SapCustomerReturnHeaderDatum
	// SapCustomerReturnHeaderDatumHook is the signature for custom SapCustomerReturnHeaderDatum hook methods
	SapCustomerReturnHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapCustomerReturnHeaderDatum) error

	sapCustomerReturnHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCustomerReturnHeaderDatumType                 = reflect.TypeOf(&SapCustomerReturnHeaderDatum{})
	sapCustomerReturnHeaderDatumMapping              = queries.MakeStructMapping(sapCustomerReturnHeaderDatumType)
	sapCustomerReturnHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, sapCustomerReturnHeaderDatumPrimaryKeyColumns)
	sapCustomerReturnHeaderDatumInsertCacheMut       sync.RWMutex
	sapCustomerReturnHeaderDatumInsertCache          = make(map[string]insertCache)
	sapCustomerReturnHeaderDatumUpdateCacheMut       sync.RWMutex
	sapCustomerReturnHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapCustomerReturnHeaderDatumUpsertCacheMut       sync.RWMutex
	sapCustomerReturnHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCustomerReturnHeaderDatumAfterSelectHooks []SapCustomerReturnHeaderDatumHook

var sapCustomerReturnHeaderDatumBeforeInsertHooks []SapCustomerReturnHeaderDatumHook
var sapCustomerReturnHeaderDatumAfterInsertHooks []SapCustomerReturnHeaderDatumHook

var sapCustomerReturnHeaderDatumBeforeUpdateHooks []SapCustomerReturnHeaderDatumHook
var sapCustomerReturnHeaderDatumAfterUpdateHooks []SapCustomerReturnHeaderDatumHook

var sapCustomerReturnHeaderDatumBeforeDeleteHooks []SapCustomerReturnHeaderDatumHook
var sapCustomerReturnHeaderDatumAfterDeleteHooks []SapCustomerReturnHeaderDatumHook

var sapCustomerReturnHeaderDatumBeforeUpsertHooks []SapCustomerReturnHeaderDatumHook
var sapCustomerReturnHeaderDatumAfterUpsertHooks []SapCustomerReturnHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCustomerReturnHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCustomerReturnHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCustomerReturnHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCustomerReturnHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCustomerReturnHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCustomerReturnHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCustomerReturnHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCustomerReturnHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCustomerReturnHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCustomerReturnHeaderDatumHook registers your hook function for all future operations.
func AddSapCustomerReturnHeaderDatumHook(hookPoint boil.HookPoint, sapCustomerReturnHeaderDatumHook SapCustomerReturnHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCustomerReturnHeaderDatumAfterSelectHooks = append(sapCustomerReturnHeaderDatumAfterSelectHooks, sapCustomerReturnHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapCustomerReturnHeaderDatumBeforeInsertHooks = append(sapCustomerReturnHeaderDatumBeforeInsertHooks, sapCustomerReturnHeaderDatumHook)
	case boil.AfterInsertHook:
		sapCustomerReturnHeaderDatumAfterInsertHooks = append(sapCustomerReturnHeaderDatumAfterInsertHooks, sapCustomerReturnHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapCustomerReturnHeaderDatumBeforeUpdateHooks = append(sapCustomerReturnHeaderDatumBeforeUpdateHooks, sapCustomerReturnHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapCustomerReturnHeaderDatumAfterUpdateHooks = append(sapCustomerReturnHeaderDatumAfterUpdateHooks, sapCustomerReturnHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapCustomerReturnHeaderDatumBeforeDeleteHooks = append(sapCustomerReturnHeaderDatumBeforeDeleteHooks, sapCustomerReturnHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapCustomerReturnHeaderDatumAfterDeleteHooks = append(sapCustomerReturnHeaderDatumAfterDeleteHooks, sapCustomerReturnHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapCustomerReturnHeaderDatumBeforeUpsertHooks = append(sapCustomerReturnHeaderDatumBeforeUpsertHooks, sapCustomerReturnHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapCustomerReturnHeaderDatumAfterUpsertHooks = append(sapCustomerReturnHeaderDatumAfterUpsertHooks, sapCustomerReturnHeaderDatumHook)
	}
}

// One returns a single sapCustomerReturnHeaderDatum record from the query.
func (q sapCustomerReturnHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCustomerReturnHeaderDatum, error) {
	o := &SapCustomerReturnHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_customer_return_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCustomerReturnHeaderDatum records from the query.
func (q sapCustomerReturnHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCustomerReturnHeaderDatumSlice, error) {
	var o []*SapCustomerReturnHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCustomerReturnHeaderDatum slice")
	}

	if len(sapCustomerReturnHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCustomerReturnHeaderDatum records in the query.
func (q sapCustomerReturnHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_customer_return_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCustomerReturnHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_customer_return_header_data exists")
	}

	return count > 0, nil
}

// CustomerReturnSapCustomerReturnHeaderPartnerData retrieves all the sap_customer_return_header_partner_datum's SapCustomerReturnHeaderPartnerData with an executor via CustomerReturn column.
func (o *SapCustomerReturnHeaderDatum) CustomerReturnSapCustomerReturnHeaderPartnerData(mods ...qm.QueryMod) sapCustomerReturnHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_customer_return_header_partner_data`.`CustomerReturn`=?", o.CustomerReturn),
	)

	return SapCustomerReturnHeaderPartnerData(queryMods...)
}

// CustomerReturnSapCustomerReturnItemData retrieves all the sap_customer_return_item_datum's SapCustomerReturnItemData with an executor via CustomerReturn column.
func (o *SapCustomerReturnHeaderDatum) CustomerReturnSapCustomerReturnItemData(mods ...qm.QueryMod) sapCustomerReturnItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_customer_return_item_data`.`CustomerReturn`=?", o.CustomerReturn),
	)

	return SapCustomerReturnItemData(queryMods...)
}

// CustomerReturnSapCustomerReturnItemPricingElementData retrieves all the sap_customer_return_item_pricing_element_datum's SapCustomerReturnItemPricingElementData with an executor via CustomerReturn column.
func (o *SapCustomerReturnHeaderDatum) CustomerReturnSapCustomerReturnItemPricingElementData(mods ...qm.QueryMod) sapCustomerReturnItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_customer_return_item_pricing_element_data`.`CustomerReturn`=?", o.CustomerReturn),
	)

	return SapCustomerReturnItemPricingElementData(queryMods...)
}

// CustomerReturnSapCustomerReturnItemProcessStepData retrieves all the sap_customer_return_item_process_step_datum's SapCustomerReturnItemProcessStepData with an executor via CustomerReturn column.
func (o *SapCustomerReturnHeaderDatum) CustomerReturnSapCustomerReturnItemProcessStepData(mods ...qm.QueryMod) sapCustomerReturnItemProcessStepDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_customer_return_item_process_step_data`.`CustomerReturn`=?", o.CustomerReturn),
	)

	return SapCustomerReturnItemProcessStepData(queryMods...)
}

// CustomerReturnSapCustomerReturnItemScheduleLineData retrieves all the sap_customer_return_item_schedule_line_datum's SapCustomerReturnItemScheduleLineData with an executor via CustomerReturn column.
func (o *SapCustomerReturnHeaderDatum) CustomerReturnSapCustomerReturnItemScheduleLineData(mods ...qm.QueryMod) sapCustomerReturnItemScheduleLineDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_customer_return_item_schedule_line_data`.`CustomerReturn`=?", o.CustomerReturn),
	)

	return SapCustomerReturnItemScheduleLineData(queryMods...)
}

// LoadCustomerReturnSapCustomerReturnHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCustomerReturnHeaderDatumL) LoadCustomerReturnSapCustomerReturnHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnHeaderDatum
	var object *SapCustomerReturnHeaderDatum

	if singular {
		object = maybeSapCustomerReturnHeaderDatum.(*SapCustomerReturnHeaderDatum)
	} else {
		slice = *maybeSapCustomerReturnHeaderDatum.(*[]*SapCustomerReturnHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnHeaderDatumR{}
		}
		args = append(args, object.CustomerReturn)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CustomerReturn {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_header_partner_data`),
		qm.WhereIn(`sap_customer_return_header_partner_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_customer_return_header_partner_data")
	}

	var resultSlice []*SapCustomerReturnHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_customer_return_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_customer_return_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_header_partner_data")
	}

	if len(sapCustomerReturnHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerReturnSapCustomerReturnHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCustomerReturnHeaderPartnerDatumR{}
			}
			foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerReturn == foreign.CustomerReturn {
				local.R.CustomerReturnSapCustomerReturnHeaderPartnerData = append(local.R.CustomerReturnSapCustomerReturnHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnHeaderPartnerDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerReturnSapCustomerReturnItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCustomerReturnHeaderDatumL) LoadCustomerReturnSapCustomerReturnItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnHeaderDatum
	var object *SapCustomerReturnHeaderDatum

	if singular {
		object = maybeSapCustomerReturnHeaderDatum.(*SapCustomerReturnHeaderDatum)
	} else {
		slice = *maybeSapCustomerReturnHeaderDatum.(*[]*SapCustomerReturnHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnHeaderDatumR{}
		}
		args = append(args, object.CustomerReturn)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CustomerReturn {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_item_data`),
		qm.WhereIn(`sap_customer_return_item_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_customer_return_item_data")
	}

	var resultSlice []*SapCustomerReturnItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_customer_return_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_customer_return_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_item_data")
	}

	if len(sapCustomerReturnItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerReturnSapCustomerReturnItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCustomerReturnItemDatumR{}
			}
			foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerReturn == foreign.CustomerReturn {
				local.R.CustomerReturnSapCustomerReturnItemData = append(local.R.CustomerReturnSapCustomerReturnItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnItemDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerReturnSapCustomerReturnItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCustomerReturnHeaderDatumL) LoadCustomerReturnSapCustomerReturnItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnHeaderDatum
	var object *SapCustomerReturnHeaderDatum

	if singular {
		object = maybeSapCustomerReturnHeaderDatum.(*SapCustomerReturnHeaderDatum)
	} else {
		slice = *maybeSapCustomerReturnHeaderDatum.(*[]*SapCustomerReturnHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnHeaderDatumR{}
		}
		args = append(args, object.CustomerReturn)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CustomerReturn {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_item_pricing_element_data`),
		qm.WhereIn(`sap_customer_return_item_pricing_element_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_customer_return_item_pricing_element_data")
	}

	var resultSlice []*SapCustomerReturnItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_customer_return_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_customer_return_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_item_pricing_element_data")
	}

	if len(sapCustomerReturnItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerReturnSapCustomerReturnItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCustomerReturnItemPricingElementDatumR{}
			}
			foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerReturn == foreign.CustomerReturn {
				local.R.CustomerReturnSapCustomerReturnItemPricingElementData = append(local.R.CustomerReturnSapCustomerReturnItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnItemPricingElementDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerReturnSapCustomerReturnItemProcessStepData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCustomerReturnHeaderDatumL) LoadCustomerReturnSapCustomerReturnItemProcessStepData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnHeaderDatum
	var object *SapCustomerReturnHeaderDatum

	if singular {
		object = maybeSapCustomerReturnHeaderDatum.(*SapCustomerReturnHeaderDatum)
	} else {
		slice = *maybeSapCustomerReturnHeaderDatum.(*[]*SapCustomerReturnHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnHeaderDatumR{}
		}
		args = append(args, object.CustomerReturn)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CustomerReturn) {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_item_process_step_data`),
		qm.WhereIn(`sap_customer_return_item_process_step_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_customer_return_item_process_step_data")
	}

	var resultSlice []*SapCustomerReturnItemProcessStepDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_customer_return_item_process_step_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_customer_return_item_process_step_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_item_process_step_data")
	}

	if len(sapCustomerReturnItemProcessStepDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerReturnSapCustomerReturnItemProcessStepData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCustomerReturnItemProcessStepDatumR{}
			}
			foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.CustomerReturn, foreign.CustomerReturn) {
				local.R.CustomerReturnSapCustomerReturnItemProcessStepData = append(local.R.CustomerReturnSapCustomerReturnItemProcessStepData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnItemProcessStepDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerReturnSapCustomerReturnItemScheduleLineData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapCustomerReturnHeaderDatumL) LoadCustomerReturnSapCustomerReturnItemScheduleLineData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnHeaderDatum
	var object *SapCustomerReturnHeaderDatum

	if singular {
		object = maybeSapCustomerReturnHeaderDatum.(*SapCustomerReturnHeaderDatum)
	} else {
		slice = *maybeSapCustomerReturnHeaderDatum.(*[]*SapCustomerReturnHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnHeaderDatumR{}
		}
		args = append(args, object.CustomerReturn)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.CustomerReturn {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_item_schedule_line_data`),
		qm.WhereIn(`sap_customer_return_item_schedule_line_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_customer_return_item_schedule_line_data")
	}

	var resultSlice []*SapCustomerReturnItemScheduleLineDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_customer_return_item_schedule_line_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_customer_return_item_schedule_line_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_item_schedule_line_data")
	}

	if len(sapCustomerReturnItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerReturnSapCustomerReturnItemScheduleLineData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapCustomerReturnItemScheduleLineDatumR{}
			}
			foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CustomerReturn == foreign.CustomerReturn {
				local.R.CustomerReturnSapCustomerReturnItemScheduleLineData = append(local.R.CustomerReturnSapCustomerReturnItemScheduleLineData, foreign)
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnItemScheduleLineDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddCustomerReturnSapCustomerReturnHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_customer_return_header_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerReturnSapCustomerReturnHeaderPartnerData.
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum appropriately.
func (o *SapCustomerReturnHeaderDatum) AddCustomerReturnSapCustomerReturnHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCustomerReturnHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerReturn = o.CustomerReturn
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_customer_return_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
				strmangle.WhereClause("`", "`", 0, sapCustomerReturnHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerReturn, rel.CustomerReturn, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerReturn = o.CustomerReturn
		}
	}

	if o.R == nil {
		o.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnHeaderPartnerData: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnHeaderPartnerData = append(o.R.CustomerReturnSapCustomerReturnHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCustomerReturnHeaderPartnerDatumR{
				CustomerReturnSapCustomerReturnHeaderDatum: o,
			}
		} else {
			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = o
		}
	}
	return nil
}

// AddCustomerReturnSapCustomerReturnItemData adds the given related objects to the existing relationships
// of the sap_customer_return_header_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerReturnSapCustomerReturnItemData.
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum appropriately.
func (o *SapCustomerReturnHeaderDatum) AddCustomerReturnSapCustomerReturnItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCustomerReturnItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerReturn = o.CustomerReturn
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_customer_return_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
				strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerReturn, rel.CustomerReturn, rel.CustomerReturnItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerReturn = o.CustomerReturn
		}
	}

	if o.R == nil {
		o.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemData: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnItemData = append(o.R.CustomerReturnSapCustomerReturnItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCustomerReturnItemDatumR{
				CustomerReturnSapCustomerReturnHeaderDatum: o,
			}
		} else {
			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = o
		}
	}
	return nil
}

// AddCustomerReturnSapCustomerReturnItemPricingElementData adds the given related objects to the existing relationships
// of the sap_customer_return_header_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerReturnSapCustomerReturnItemPricingElementData.
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum appropriately.
func (o *SapCustomerReturnHeaderDatum) AddCustomerReturnSapCustomerReturnItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCustomerReturnItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerReturn = o.CustomerReturn
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_customer_return_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
				strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerReturn, rel.CustomerReturn, rel.CustomerReturnItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerReturn = o.CustomerReturn
		}
	}

	if o.R == nil {
		o.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemPricingElementData: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnItemPricingElementData = append(o.R.CustomerReturnSapCustomerReturnItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCustomerReturnItemPricingElementDatumR{
				CustomerReturnSapCustomerReturnHeaderDatum: o,
			}
		} else {
			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = o
		}
	}
	return nil
}

// AddCustomerReturnSapCustomerReturnItemProcessStepData adds the given related objects to the existing relationships
// of the sap_customer_return_header_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerReturnSapCustomerReturnItemProcessStepData.
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum appropriately.
func (o *SapCustomerReturnHeaderDatum) AddCustomerReturnSapCustomerReturnItemProcessStepData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCustomerReturnItemProcessStepDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CustomerReturn, o.CustomerReturn)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_customer_return_item_process_step_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
				strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemProcessStepDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerReturn, rel.RetsMgmtProcess, rel.RetsMgmtProcessItem, rel.RetsMgmtProcItmQtySplit, rel.RetsMgmtProcessStep}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CustomerReturn, o.CustomerReturn)
		}
	}

	if o.R == nil {
		o.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemProcessStepData: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnItemProcessStepData = append(o.R.CustomerReturnSapCustomerReturnItemProcessStepData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCustomerReturnItemProcessStepDatumR{
				CustomerReturnSapCustomerReturnHeaderDatum: o,
			}
		} else {
			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = o
		}
	}
	return nil
}

// SetCustomerReturnSapCustomerReturnItemProcessStepData removes all previously related items of the
// sap_customer_return_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CustomerReturnSapCustomerReturnHeaderDatum's CustomerReturnSapCustomerReturnItemProcessStepData accordingly.
// Replaces o.R.CustomerReturnSapCustomerReturnItemProcessStepData with related.
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum's CustomerReturnSapCustomerReturnItemProcessStepData accordingly.
func (o *SapCustomerReturnHeaderDatum) SetCustomerReturnSapCustomerReturnItemProcessStepData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCustomerReturnItemProcessStepDatum) error {
	query := "update `sap_customer_return_item_process_step_data` set `CustomerReturn` = null where `CustomerReturn` = ?"
	values := []interface{}{o.CustomerReturn}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CustomerReturnSapCustomerReturnItemProcessStepData {
			queries.SetScanner(&rel.CustomerReturn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = nil
		}
		o.R.CustomerReturnSapCustomerReturnItemProcessStepData = nil
	}

	return o.AddCustomerReturnSapCustomerReturnItemProcessStepData(ctx, exec, insert, related...)
}

// RemoveCustomerReturnSapCustomerReturnItemProcessStepData relationships from objects passed in.
// Removes related items from R.CustomerReturnSapCustomerReturnItemProcessStepData (uses pointer comparison, removal does not keep order)
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum.
func (o *SapCustomerReturnHeaderDatum) RemoveCustomerReturnSapCustomerReturnItemProcessStepData(ctx context.Context, exec boil.ContextExecutor, related ...*SapCustomerReturnItemProcessStepDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CustomerReturn, nil)
		if rel.R != nil {
			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("CustomerReturn")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CustomerReturnSapCustomerReturnItemProcessStepData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CustomerReturnSapCustomerReturnItemProcessStepData)
			if ln > 1 && i < ln-1 {
				o.R.CustomerReturnSapCustomerReturnItemProcessStepData[i] = o.R.CustomerReturnSapCustomerReturnItemProcessStepData[ln-1]
			}
			o.R.CustomerReturnSapCustomerReturnItemProcessStepData = o.R.CustomerReturnSapCustomerReturnItemProcessStepData[:ln-1]
			break
		}
	}

	return nil
}

// AddCustomerReturnSapCustomerReturnItemScheduleLineData adds the given related objects to the existing relationships
// of the sap_customer_return_header_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerReturnSapCustomerReturnItemScheduleLineData.
// Sets related.R.CustomerReturnSapCustomerReturnHeaderDatum appropriately.
func (o *SapCustomerReturnHeaderDatum) AddCustomerReturnSapCustomerReturnItemScheduleLineData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapCustomerReturnItemScheduleLineDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerReturn = o.CustomerReturn
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_customer_return_item_schedule_line_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
				strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.CustomerReturn, rel.CustomerReturn, rel.CustomerReturnItem, rel.ScheduleLine}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerReturn = o.CustomerReturn
		}
	}

	if o.R == nil {
		o.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemScheduleLineData: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnItemScheduleLineData = append(o.R.CustomerReturnSapCustomerReturnItemScheduleLineData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapCustomerReturnItemScheduleLineDatumR{
				CustomerReturnSapCustomerReturnHeaderDatum: o,
			}
		} else {
			rel.R.CustomerReturnSapCustomerReturnHeaderDatum = o
		}
	}
	return nil
}

// SapCustomerReturnHeaderData retrieves all the records using an executor.
func SapCustomerReturnHeaderData(mods ...qm.QueryMod) sapCustomerReturnHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_customer_return_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_customer_return_header_data`.*"})
	}

	return sapCustomerReturnHeaderDatumQuery{q}
}

// FindSapCustomerReturnHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCustomerReturnHeaderDatum(ctx context.Context, exec boil.ContextExecutor, customerReturn string, selectCols ...string) (*SapCustomerReturnHeaderDatum, error) {
	sapCustomerReturnHeaderDatumObj := &SapCustomerReturnHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_customer_return_header_data` where `CustomerReturn`=?", sel,
	)

	q := queries.Raw(query, customerReturn)

	err := q.Bind(ctx, exec, sapCustomerReturnHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_customer_return_header_data")
	}

	if err = sapCustomerReturnHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCustomerReturnHeaderDatumObj, err
	}

	return sapCustomerReturnHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCustomerReturnHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCustomerReturnHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapCustomerReturnHeaderDatumInsertCache[key]
	sapCustomerReturnHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCustomerReturnHeaderDatumAllColumns,
			sapCustomerReturnHeaderDatumColumnsWithDefault,
			sapCustomerReturnHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_customer_return_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_customer_return_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_customer_return_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCustomerReturnHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_customer_return_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerReturn,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_header_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnHeaderDatumInsertCacheMut.Lock()
		sapCustomerReturnHeaderDatumInsertCache[key] = cache
		sapCustomerReturnHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCustomerReturnHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCustomerReturnHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCustomerReturnHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapCustomerReturnHeaderDatumUpdateCache[key]
	sapCustomerReturnHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCustomerReturnHeaderDatumAllColumns,
			sapCustomerReturnHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_customer_return_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_customer_return_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCustomerReturnHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, append(wl, sapCustomerReturnHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_customer_return_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_customer_return_header_data")
	}

	if !cached {
		sapCustomerReturnHeaderDatumUpdateCacheMut.Lock()
		sapCustomerReturnHeaderDatumUpdateCache[key] = cache
		sapCustomerReturnHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCustomerReturnHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_customer_return_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_customer_return_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCustomerReturnHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_customer_return_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCustomerReturnHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCustomerReturnHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapCustomerReturnHeaderDatumUniqueColumns = []string{
	"CustomerReturn",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCustomerReturnHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCustomerReturnHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCustomerReturnHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapCustomerReturnHeaderDatumUpsertCache[key]
	sapCustomerReturnHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCustomerReturnHeaderDatumAllColumns,
			sapCustomerReturnHeaderDatumColumnsWithDefault,
			sapCustomerReturnHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCustomerReturnHeaderDatumAllColumns,
			sapCustomerReturnHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_customer_return_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_customer_return_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_customer_return_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_customer_return_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCustomerReturnHeaderDatumType, sapCustomerReturnHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_customer_return_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_header_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnHeaderDatumUpsertCacheMut.Lock()
		sapCustomerReturnHeaderDatumUpsertCache[key] = cache
		sapCustomerReturnHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCustomerReturnHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCustomerReturnHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCustomerReturnHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCustomerReturnHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_customer_return_header_data` WHERE `CustomerReturn`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_customer_return_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_customer_return_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCustomerReturnHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCustomerReturnHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_customer_return_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCustomerReturnHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCustomerReturnHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_customer_return_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCustomerReturnHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_header_data")
	}

	if len(sapCustomerReturnHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCustomerReturnHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCustomerReturnHeaderDatum(ctx, exec, o.CustomerReturn)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCustomerReturnHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCustomerReturnHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_customer_return_header_data`.* FROM `sap_customer_return_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCustomerReturnHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapCustomerReturnHeaderDatumExists checks if the SapCustomerReturnHeaderDatum row exists.
func SapCustomerReturnHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, customerReturn string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_customer_return_header_data` where `CustomerReturn`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customerReturn)
	}
	row := exec.QueryRowContext(ctx, sql, customerReturn)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_customer_return_header_data exists")
	}

	return exists, nil
}
