// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceOrderItemDatum is an object representing the database table.
type SapServiceOrderItemDatum struct {
	ServiceOrder                   string      `boil:"ServiceOrder" json:"ServiceOrder" toml:"ServiceOrder" yaml:"ServiceOrder"`
	ServiceOrderItem               string      `boil:"ServiceOrderItem" json:"ServiceOrderItem" toml:"ServiceOrderItem" yaml:"ServiceOrderItem"`
	ServiceOrderUUID               null.String `boil:"ServiceOrderUUID" json:"ServiceOrderUUID,omitempty" toml:"ServiceOrderUUID" yaml:"ServiceOrderUUID,omitempty"`
	ServiceOrderItemDescription    null.String `boil:"ServiceOrderItemDescription" json:"ServiceOrderItemDescription,omitempty" toml:"ServiceOrderItemDescription" yaml:"ServiceOrderItemDescription,omitempty"`
	ServiceObjectType              null.String `boil:"ServiceObjectType" json:"ServiceObjectType,omitempty" toml:"ServiceObjectType" yaml:"ServiceObjectType,omitempty"`
	ServiceDocumentItemObjectType  null.String `boil:"ServiceDocumentItemObjectType" json:"ServiceDocumentItemObjectType,omitempty" toml:"ServiceDocumentItemObjectType" yaml:"ServiceDocumentItemObjectType,omitempty"`
	Language                       null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Product                        null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	Quantity                       null.String `boil:"Quantity" json:"Quantity,omitempty" toml:"Quantity" yaml:"Quantity,omitempty"`
	QuantityUnit                   null.String `boil:"QuantityUnit" json:"QuantityUnit,omitempty" toml:"QuantityUnit" yaml:"QuantityUnit,omitempty"`
	SrvcOrdItemReservedQuantity    null.String `boil:"SrvcOrdItemReservedQuantity" json:"SrvcOrdItemReservedQuantity,omitempty" toml:"SrvcOrdItemReservedQuantity" yaml:"SrvcOrdItemReservedQuantity,omitempty"`
	ServiceDuration                null.String `boil:"ServiceDuration" json:"ServiceDuration,omitempty" toml:"ServiceDuration" yaml:"ServiceDuration,omitempty"`
	ServiceDurationUnit            null.String `boil:"ServiceDurationUnit" json:"ServiceDurationUnit,omitempty" toml:"ServiceDurationUnit" yaml:"ServiceDurationUnit,omitempty"`
	ServiceOrderItemCategory       null.String `boil:"ServiceOrderItemCategory" json:"ServiceOrderItemCategory,omitempty" toml:"ServiceOrderItemCategory" yaml:"ServiceOrderItemCategory,omitempty"`
	ServiceOrdItemRejectionReason  null.String `boil:"ServiceOrdItemRejectionReason" json:"ServiceOrdItemRejectionReason,omitempty" toml:"ServiceOrdItemRejectionReason" yaml:"ServiceOrdItemRejectionReason,omitempty"`
	BillableControl                null.String `boil:"BillableControl" json:"BillableControl,omitempty" toml:"BillableControl" yaml:"BillableControl,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	ShipToParty                    null.String `boil:"ShipToParty" json:"ShipToParty,omitempty" toml:"ShipToParty" yaml:"ShipToParty,omitempty"`
	BillToParty                    null.String `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	PayerParty                     null.String `boil:"PayerParty" json:"PayerParty,omitempty" toml:"PayerParty" yaml:"PayerParty,omitempty"`
	ContactPersonBusinessPartnerId null.String `boil:"ContactPersonBusinessPartnerId" json:"ContactPersonBusinessPartnerId,omitempty" toml:"ContactPersonBusinessPartnerId" yaml:"ContactPersonBusinessPartnerId,omitempty"`
	PersonResponsible              null.String `boil:"PersonResponsible" json:"PersonResponsible,omitempty" toml:"PersonResponsible" yaml:"PersonResponsible,omitempty"`
	ExecutingServiceEmployee       null.String `boil:"ExecutingServiceEmployee" json:"ExecutingServiceEmployee,omitempty" toml:"ExecutingServiceEmployee" yaml:"ExecutingServiceEmployee,omitempty"`
	ServicePerformer               null.String `boil:"ServicePerformer" json:"ServicePerformer,omitempty" toml:"ServicePerformer" yaml:"ServicePerformer,omitempty"`
	ServiceOrderItemIsReleased     null.String `boil:"ServiceOrderItemIsReleased" json:"ServiceOrderItemIsReleased,omitempty" toml:"ServiceOrderItemIsReleased" yaml:"ServiceOrderItemIsReleased,omitempty"`
	ServiceOrderItemIsCompleted    null.String `boil:"ServiceOrderItemIsCompleted" json:"ServiceOrderItemIsCompleted,omitempty" toml:"ServiceOrderItemIsCompleted" yaml:"ServiceOrderItemIsCompleted,omitempty"`
	ServiceOrderItemIsRejected     null.String `boil:"ServiceOrderItemIsRejected" json:"ServiceOrderItemIsRejected,omitempty" toml:"ServiceOrderItemIsRejected" yaml:"ServiceOrderItemIsRejected,omitempty"`
	ReferenceServiceContract       null.String `boil:"ReferenceServiceContract" json:"ReferenceServiceContract,omitempty" toml:"ReferenceServiceContract" yaml:"ReferenceServiceContract,omitempty"`
	ReferenceServiceContractItem   null.String `boil:"ReferenceServiceContractItem" json:"ReferenceServiceContractItem,omitempty" toml:"ReferenceServiceContractItem" yaml:"ReferenceServiceContractItem,omitempty"`
	ReferenceServiceRequest        null.String `boil:"ReferenceServiceRequest" json:"ReferenceServiceRequest,omitempty" toml:"ReferenceServiceRequest" yaml:"ReferenceServiceRequest,omitempty"`
	ReferenceServiceRequestItem    null.String `boil:"ReferenceServiceRequestItem" json:"ReferenceServiceRequestItem,omitempty" toml:"ReferenceServiceRequestItem" yaml:"ReferenceServiceRequestItem,omitempty"`
	ParentServiceOrderItem         null.String `boil:"ParentServiceOrderItem" json:"ParentServiceOrderItem,omitempty" toml:"ParentServiceOrderItem" yaml:"ParentServiceOrderItem,omitempty"`
	PlannedServiceStartDateTime    null.String `boil:"PlannedServiceStartDateTime" json:"PlannedServiceStartDateTime,omitempty" toml:"PlannedServiceStartDateTime" yaml:"PlannedServiceStartDateTime,omitempty"`
	PlannedServiceEndDateTime      null.String `boil:"PlannedServiceEndDateTime" json:"PlannedServiceEndDateTime,omitempty" toml:"PlannedServiceEndDateTime" yaml:"PlannedServiceEndDateTime,omitempty"`
	RequestedServiceStartDateTime  null.String `boil:"RequestedServiceStartDateTime" json:"RequestedServiceStartDateTime,omitempty" toml:"RequestedServiceStartDateTime" yaml:"RequestedServiceStartDateTime,omitempty"`
	RequestedServiceEndDateTime    null.String `boil:"RequestedServiceEndDateTime" json:"RequestedServiceEndDateTime,omitempty" toml:"RequestedServiceEndDateTime" yaml:"RequestedServiceEndDateTime,omitempty"`
	ActualServiceDuration          null.String `boil:"ActualServiceDuration" json:"ActualServiceDuration,omitempty" toml:"ActualServiceDuration" yaml:"ActualServiceDuration,omitempty"`
	ActualServiceDurationUnit      null.String `boil:"ActualServiceDurationUnit" json:"ActualServiceDurationUnit,omitempty" toml:"ActualServiceDurationUnit" yaml:"ActualServiceDurationUnit,omitempty"`
	ReferenceServiceOrderItem      null.String `boil:"ReferenceServiceOrderItem" json:"ReferenceServiceOrderItem,omitempty" toml:"ReferenceServiceOrderItem" yaml:"ReferenceServiceOrderItem,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	SrvcOrdItemCreditStatus        null.String `boil:"SrvcOrdItemCreditStatus" json:"SrvcOrdItemCreditStatus,omitempty" toml:"SrvcOrdItemCreditStatus" yaml:"SrvcOrdItemCreditStatus,omitempty"`

	R *sapServiceOrderItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceOrderItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceOrderItemDatumColumns = struct {
	ServiceOrder                   string
	ServiceOrderItem               string
	ServiceOrderUUID               string
	ServiceOrderItemDescription    string
	ServiceObjectType              string
	ServiceDocumentItemObjectType  string
	Language                       string
	Product                        string
	Quantity                       string
	QuantityUnit                   string
	SrvcOrdItemReservedQuantity    string
	ServiceDuration                string
	ServiceDurationUnit            string
	ServiceOrderItemCategory       string
	ServiceOrdItemRejectionReason  string
	BillableControl                string
	SoldToParty                    string
	ShipToParty                    string
	BillToParty                    string
	PayerParty                     string
	ContactPersonBusinessPartnerId string
	PersonResponsible              string
	ExecutingServiceEmployee       string
	ServicePerformer               string
	ServiceOrderItemIsReleased     string
	ServiceOrderItemIsCompleted    string
	ServiceOrderItemIsRejected     string
	ReferenceServiceContract       string
	ReferenceServiceContractItem   string
	ReferenceServiceRequest        string
	ReferenceServiceRequestItem    string
	ParentServiceOrderItem         string
	PlannedServiceStartDateTime    string
	PlannedServiceEndDateTime      string
	RequestedServiceStartDateTime  string
	RequestedServiceEndDateTime    string
	ActualServiceDuration          string
	ActualServiceDurationUnit      string
	ReferenceServiceOrderItem      string
	ProfitCenter                   string
	SrvcOrdItemCreditStatus        string
}{
	ServiceOrder:                   "ServiceOrder",
	ServiceOrderItem:               "ServiceOrderItem",
	ServiceOrderUUID:               "ServiceOrderUUID",
	ServiceOrderItemDescription:    "ServiceOrderItemDescription",
	ServiceObjectType:              "ServiceObjectType",
	ServiceDocumentItemObjectType:  "ServiceDocumentItemObjectType",
	Language:                       "Language",
	Product:                        "Product",
	Quantity:                       "Quantity",
	QuantityUnit:                   "QuantityUnit",
	SrvcOrdItemReservedQuantity:    "SrvcOrdItemReservedQuantity",
	ServiceDuration:                "ServiceDuration",
	ServiceDurationUnit:            "ServiceDurationUnit",
	ServiceOrderItemCategory:       "ServiceOrderItemCategory",
	ServiceOrdItemRejectionReason:  "ServiceOrdItemRejectionReason",
	BillableControl:                "BillableControl",
	SoldToParty:                    "SoldToParty",
	ShipToParty:                    "ShipToParty",
	BillToParty:                    "BillToParty",
	PayerParty:                     "PayerParty",
	ContactPersonBusinessPartnerId: "ContactPersonBusinessPartnerId",
	PersonResponsible:              "PersonResponsible",
	ExecutingServiceEmployee:       "ExecutingServiceEmployee",
	ServicePerformer:               "ServicePerformer",
	ServiceOrderItemIsReleased:     "ServiceOrderItemIsReleased",
	ServiceOrderItemIsCompleted:    "ServiceOrderItemIsCompleted",
	ServiceOrderItemIsRejected:     "ServiceOrderItemIsRejected",
	ReferenceServiceContract:       "ReferenceServiceContract",
	ReferenceServiceContractItem:   "ReferenceServiceContractItem",
	ReferenceServiceRequest:        "ReferenceServiceRequest",
	ReferenceServiceRequestItem:    "ReferenceServiceRequestItem",
	ParentServiceOrderItem:         "ParentServiceOrderItem",
	PlannedServiceStartDateTime:    "PlannedServiceStartDateTime",
	PlannedServiceEndDateTime:      "PlannedServiceEndDateTime",
	RequestedServiceStartDateTime:  "RequestedServiceStartDateTime",
	RequestedServiceEndDateTime:    "RequestedServiceEndDateTime",
	ActualServiceDuration:          "ActualServiceDuration",
	ActualServiceDurationUnit:      "ActualServiceDurationUnit",
	ReferenceServiceOrderItem:      "ReferenceServiceOrderItem",
	ProfitCenter:                   "ProfitCenter",
	SrvcOrdItemCreditStatus:        "SrvcOrdItemCreditStatus",
}

var SapServiceOrderItemDatumTableColumns = struct {
	ServiceOrder                   string
	ServiceOrderItem               string
	ServiceOrderUUID               string
	ServiceOrderItemDescription    string
	ServiceObjectType              string
	ServiceDocumentItemObjectType  string
	Language                       string
	Product                        string
	Quantity                       string
	QuantityUnit                   string
	SrvcOrdItemReservedQuantity    string
	ServiceDuration                string
	ServiceDurationUnit            string
	ServiceOrderItemCategory       string
	ServiceOrdItemRejectionReason  string
	BillableControl                string
	SoldToParty                    string
	ShipToParty                    string
	BillToParty                    string
	PayerParty                     string
	ContactPersonBusinessPartnerId string
	PersonResponsible              string
	ExecutingServiceEmployee       string
	ServicePerformer               string
	ServiceOrderItemIsReleased     string
	ServiceOrderItemIsCompleted    string
	ServiceOrderItemIsRejected     string
	ReferenceServiceContract       string
	ReferenceServiceContractItem   string
	ReferenceServiceRequest        string
	ReferenceServiceRequestItem    string
	ParentServiceOrderItem         string
	PlannedServiceStartDateTime    string
	PlannedServiceEndDateTime      string
	RequestedServiceStartDateTime  string
	RequestedServiceEndDateTime    string
	ActualServiceDuration          string
	ActualServiceDurationUnit      string
	ReferenceServiceOrderItem      string
	ProfitCenter                   string
	SrvcOrdItemCreditStatus        string
}{
	ServiceOrder:                   "sap_service_order_item_data.ServiceOrder",
	ServiceOrderItem:               "sap_service_order_item_data.ServiceOrderItem",
	ServiceOrderUUID:               "sap_service_order_item_data.ServiceOrderUUID",
	ServiceOrderItemDescription:    "sap_service_order_item_data.ServiceOrderItemDescription",
	ServiceObjectType:              "sap_service_order_item_data.ServiceObjectType",
	ServiceDocumentItemObjectType:  "sap_service_order_item_data.ServiceDocumentItemObjectType",
	Language:                       "sap_service_order_item_data.Language",
	Product:                        "sap_service_order_item_data.Product",
	Quantity:                       "sap_service_order_item_data.Quantity",
	QuantityUnit:                   "sap_service_order_item_data.QuantityUnit",
	SrvcOrdItemReservedQuantity:    "sap_service_order_item_data.SrvcOrdItemReservedQuantity",
	ServiceDuration:                "sap_service_order_item_data.ServiceDuration",
	ServiceDurationUnit:            "sap_service_order_item_data.ServiceDurationUnit",
	ServiceOrderItemCategory:       "sap_service_order_item_data.ServiceOrderItemCategory",
	ServiceOrdItemRejectionReason:  "sap_service_order_item_data.ServiceOrdItemRejectionReason",
	BillableControl:                "sap_service_order_item_data.BillableControl",
	SoldToParty:                    "sap_service_order_item_data.SoldToParty",
	ShipToParty:                    "sap_service_order_item_data.ShipToParty",
	BillToParty:                    "sap_service_order_item_data.BillToParty",
	PayerParty:                     "sap_service_order_item_data.PayerParty",
	ContactPersonBusinessPartnerId: "sap_service_order_item_data.ContactPersonBusinessPartnerId",
	PersonResponsible:              "sap_service_order_item_data.PersonResponsible",
	ExecutingServiceEmployee:       "sap_service_order_item_data.ExecutingServiceEmployee",
	ServicePerformer:               "sap_service_order_item_data.ServicePerformer",
	ServiceOrderItemIsReleased:     "sap_service_order_item_data.ServiceOrderItemIsReleased",
	ServiceOrderItemIsCompleted:    "sap_service_order_item_data.ServiceOrderItemIsCompleted",
	ServiceOrderItemIsRejected:     "sap_service_order_item_data.ServiceOrderItemIsRejected",
	ReferenceServiceContract:       "sap_service_order_item_data.ReferenceServiceContract",
	ReferenceServiceContractItem:   "sap_service_order_item_data.ReferenceServiceContractItem",
	ReferenceServiceRequest:        "sap_service_order_item_data.ReferenceServiceRequest",
	ReferenceServiceRequestItem:    "sap_service_order_item_data.ReferenceServiceRequestItem",
	ParentServiceOrderItem:         "sap_service_order_item_data.ParentServiceOrderItem",
	PlannedServiceStartDateTime:    "sap_service_order_item_data.PlannedServiceStartDateTime",
	PlannedServiceEndDateTime:      "sap_service_order_item_data.PlannedServiceEndDateTime",
	RequestedServiceStartDateTime:  "sap_service_order_item_data.RequestedServiceStartDateTime",
	RequestedServiceEndDateTime:    "sap_service_order_item_data.RequestedServiceEndDateTime",
	ActualServiceDuration:          "sap_service_order_item_data.ActualServiceDuration",
	ActualServiceDurationUnit:      "sap_service_order_item_data.ActualServiceDurationUnit",
	ReferenceServiceOrderItem:      "sap_service_order_item_data.ReferenceServiceOrderItem",
	ProfitCenter:                   "sap_service_order_item_data.ProfitCenter",
	SrvcOrdItemCreditStatus:        "sap_service_order_item_data.SrvcOrdItemCreditStatus",
}

// Generated where

var SapServiceOrderItemDatumWhere = struct {
	ServiceOrder                   whereHelperstring
	ServiceOrderItem               whereHelperstring
	ServiceOrderUUID               whereHelpernull_String
	ServiceOrderItemDescription    whereHelpernull_String
	ServiceObjectType              whereHelpernull_String
	ServiceDocumentItemObjectType  whereHelpernull_String
	Language                       whereHelpernull_String
	Product                        whereHelpernull_String
	Quantity                       whereHelpernull_String
	QuantityUnit                   whereHelpernull_String
	SrvcOrdItemReservedQuantity    whereHelpernull_String
	ServiceDuration                whereHelpernull_String
	ServiceDurationUnit            whereHelpernull_String
	ServiceOrderItemCategory       whereHelpernull_String
	ServiceOrdItemRejectionReason  whereHelpernull_String
	BillableControl                whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	ShipToParty                    whereHelpernull_String
	BillToParty                    whereHelpernull_String
	PayerParty                     whereHelpernull_String
	ContactPersonBusinessPartnerId whereHelpernull_String
	PersonResponsible              whereHelpernull_String
	ExecutingServiceEmployee       whereHelpernull_String
	ServicePerformer               whereHelpernull_String
	ServiceOrderItemIsReleased     whereHelpernull_String
	ServiceOrderItemIsCompleted    whereHelpernull_String
	ServiceOrderItemIsRejected     whereHelpernull_String
	ReferenceServiceContract       whereHelpernull_String
	ReferenceServiceContractItem   whereHelpernull_String
	ReferenceServiceRequest        whereHelpernull_String
	ReferenceServiceRequestItem    whereHelpernull_String
	ParentServiceOrderItem         whereHelpernull_String
	PlannedServiceStartDateTime    whereHelpernull_String
	PlannedServiceEndDateTime      whereHelpernull_String
	RequestedServiceStartDateTime  whereHelpernull_String
	RequestedServiceEndDateTime    whereHelpernull_String
	ActualServiceDuration          whereHelpernull_String
	ActualServiceDurationUnit      whereHelpernull_String
	ReferenceServiceOrderItem      whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	SrvcOrdItemCreditStatus        whereHelpernull_String
}{
	ServiceOrder:                   whereHelperstring{field: "`sap_service_order_item_data`.`ServiceOrder`"},
	ServiceOrderItem:               whereHelperstring{field: "`sap_service_order_item_data`.`ServiceOrderItem`"},
	ServiceOrderUUID:               whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrderUUID`"},
	ServiceOrderItemDescription:    whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrderItemDescription`"},
	ServiceObjectType:              whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceObjectType`"},
	ServiceDocumentItemObjectType:  whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceDocumentItemObjectType`"},
	Language:                       whereHelpernull_String{field: "`sap_service_order_item_data`.`Language`"},
	Product:                        whereHelpernull_String{field: "`sap_service_order_item_data`.`Product`"},
	Quantity:                       whereHelpernull_String{field: "`sap_service_order_item_data`.`Quantity`"},
	QuantityUnit:                   whereHelpernull_String{field: "`sap_service_order_item_data`.`QuantityUnit`"},
	SrvcOrdItemReservedQuantity:    whereHelpernull_String{field: "`sap_service_order_item_data`.`SrvcOrdItemReservedQuantity`"},
	ServiceDuration:                whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceDuration`"},
	ServiceDurationUnit:            whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceDurationUnit`"},
	ServiceOrderItemCategory:       whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrderItemCategory`"},
	ServiceOrdItemRejectionReason:  whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrdItemRejectionReason`"},
	BillableControl:                whereHelpernull_String{field: "`sap_service_order_item_data`.`BillableControl`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_service_order_item_data`.`SoldToParty`"},
	ShipToParty:                    whereHelpernull_String{field: "`sap_service_order_item_data`.`ShipToParty`"},
	BillToParty:                    whereHelpernull_String{field: "`sap_service_order_item_data`.`BillToParty`"},
	PayerParty:                     whereHelpernull_String{field: "`sap_service_order_item_data`.`PayerParty`"},
	ContactPersonBusinessPartnerId: whereHelpernull_String{field: "`sap_service_order_item_data`.`ContactPersonBusinessPartnerId`"},
	PersonResponsible:              whereHelpernull_String{field: "`sap_service_order_item_data`.`PersonResponsible`"},
	ExecutingServiceEmployee:       whereHelpernull_String{field: "`sap_service_order_item_data`.`ExecutingServiceEmployee`"},
	ServicePerformer:               whereHelpernull_String{field: "`sap_service_order_item_data`.`ServicePerformer`"},
	ServiceOrderItemIsReleased:     whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrderItemIsReleased`"},
	ServiceOrderItemIsCompleted:    whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrderItemIsCompleted`"},
	ServiceOrderItemIsRejected:     whereHelpernull_String{field: "`sap_service_order_item_data`.`ServiceOrderItemIsRejected`"},
	ReferenceServiceContract:       whereHelpernull_String{field: "`sap_service_order_item_data`.`ReferenceServiceContract`"},
	ReferenceServiceContractItem:   whereHelpernull_String{field: "`sap_service_order_item_data`.`ReferenceServiceContractItem`"},
	ReferenceServiceRequest:        whereHelpernull_String{field: "`sap_service_order_item_data`.`ReferenceServiceRequest`"},
	ReferenceServiceRequestItem:    whereHelpernull_String{field: "`sap_service_order_item_data`.`ReferenceServiceRequestItem`"},
	ParentServiceOrderItem:         whereHelpernull_String{field: "`sap_service_order_item_data`.`ParentServiceOrderItem`"},
	PlannedServiceStartDateTime:    whereHelpernull_String{field: "`sap_service_order_item_data`.`PlannedServiceStartDateTime`"},
	PlannedServiceEndDateTime:      whereHelpernull_String{field: "`sap_service_order_item_data`.`PlannedServiceEndDateTime`"},
	RequestedServiceStartDateTime:  whereHelpernull_String{field: "`sap_service_order_item_data`.`RequestedServiceStartDateTime`"},
	RequestedServiceEndDateTime:    whereHelpernull_String{field: "`sap_service_order_item_data`.`RequestedServiceEndDateTime`"},
	ActualServiceDuration:          whereHelpernull_String{field: "`sap_service_order_item_data`.`ActualServiceDuration`"},
	ActualServiceDurationUnit:      whereHelpernull_String{field: "`sap_service_order_item_data`.`ActualServiceDurationUnit`"},
	ReferenceServiceOrderItem:      whereHelpernull_String{field: "`sap_service_order_item_data`.`ReferenceServiceOrderItem`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_service_order_item_data`.`ProfitCenter`"},
	SrvcOrdItemCreditStatus:        whereHelpernull_String{field: "`sap_service_order_item_data`.`SrvcOrdItemCreditStatus`"},
}

// SapServiceOrderItemDatumRels is where relationship names are stored.
var SapServiceOrderItemDatumRels = struct {
	ServiceOrderSapServiceOrderHeaderDatum string
}{
	ServiceOrderSapServiceOrderHeaderDatum: "ServiceOrderSapServiceOrderHeaderDatum",
}

// sapServiceOrderItemDatumR is where relationships are stored.
type sapServiceOrderItemDatumR struct {
	ServiceOrderSapServiceOrderHeaderDatum *SapServiceOrderHeaderDatum `boil:"ServiceOrderSapServiceOrderHeaderDatum" json:"ServiceOrderSapServiceOrderHeaderDatum" toml:"ServiceOrderSapServiceOrderHeaderDatum" yaml:"ServiceOrderSapServiceOrderHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapServiceOrderItemDatumR) NewStruct() *sapServiceOrderItemDatumR {
	return &sapServiceOrderItemDatumR{}
}

// sapServiceOrderItemDatumL is where Load methods for each relationship are stored.
type sapServiceOrderItemDatumL struct{}

var (
	sapServiceOrderItemDatumAllColumns            = []string{"ServiceOrder", "ServiceOrderItem", "ServiceOrderUUID", "ServiceOrderItemDescription", "ServiceObjectType", "ServiceDocumentItemObjectType", "Language", "Product", "Quantity", "QuantityUnit", "SrvcOrdItemReservedQuantity", "ServiceDuration", "ServiceDurationUnit", "ServiceOrderItemCategory", "ServiceOrdItemRejectionReason", "BillableControl", "SoldToParty", "ShipToParty", "BillToParty", "PayerParty", "ContactPersonBusinessPartnerId", "PersonResponsible", "ExecutingServiceEmployee", "ServicePerformer", "ServiceOrderItemIsReleased", "ServiceOrderItemIsCompleted", "ServiceOrderItemIsRejected", "ReferenceServiceContract", "ReferenceServiceContractItem", "ReferenceServiceRequest", "ReferenceServiceRequestItem", "ParentServiceOrderItem", "PlannedServiceStartDateTime", "PlannedServiceEndDateTime", "RequestedServiceStartDateTime", "RequestedServiceEndDateTime", "ActualServiceDuration", "ActualServiceDurationUnit", "ReferenceServiceOrderItem", "ProfitCenter", "SrvcOrdItemCreditStatus"}
	sapServiceOrderItemDatumColumnsWithoutDefault = []string{"ServiceOrder", "ServiceOrderItem", "ServiceOrderUUID", "ServiceOrderItemDescription", "ServiceObjectType", "ServiceDocumentItemObjectType", "Language", "Product", "Quantity", "QuantityUnit", "SrvcOrdItemReservedQuantity", "ServiceDuration", "ServiceDurationUnit", "ServiceOrderItemCategory", "ServiceOrdItemRejectionReason", "BillableControl", "SoldToParty", "ShipToParty", "BillToParty", "PayerParty", "ContactPersonBusinessPartnerId", "PersonResponsible", "ExecutingServiceEmployee", "ServicePerformer", "ServiceOrderItemIsReleased", "ServiceOrderItemIsCompleted", "ServiceOrderItemIsRejected", "ReferenceServiceContract", "ReferenceServiceContractItem", "ReferenceServiceRequest", "ReferenceServiceRequestItem", "ParentServiceOrderItem", "PlannedServiceStartDateTime", "PlannedServiceEndDateTime", "RequestedServiceStartDateTime", "RequestedServiceEndDateTime", "ActualServiceDuration", "ActualServiceDurationUnit", "ReferenceServiceOrderItem", "ProfitCenter", "SrvcOrdItemCreditStatus"}
	sapServiceOrderItemDatumColumnsWithDefault    = []string{}
	sapServiceOrderItemDatumPrimaryKeyColumns     = []string{"ServiceOrder", "ServiceOrderItem"}
	sapServiceOrderItemDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceOrderItemDatumSlice is an alias for a slice of pointers to SapServiceOrderItemDatum.
	// This should almost always be used instead of []SapServiceOrderItemDatum.
	SapServiceOrderItemDatumSlice []*SapServiceOrderItemDatum
	// SapServiceOrderItemDatumHook is the signature for custom SapServiceOrderItemDatum hook methods
	SapServiceOrderItemDatumHook func(context.Context, boil.ContextExecutor, *SapServiceOrderItemDatum) error

	sapServiceOrderItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceOrderItemDatumType                 = reflect.TypeOf(&SapServiceOrderItemDatum{})
	sapServiceOrderItemDatumMapping              = queries.MakeStructMapping(sapServiceOrderItemDatumType)
	sapServiceOrderItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, sapServiceOrderItemDatumPrimaryKeyColumns)
	sapServiceOrderItemDatumInsertCacheMut       sync.RWMutex
	sapServiceOrderItemDatumInsertCache          = make(map[string]insertCache)
	sapServiceOrderItemDatumUpdateCacheMut       sync.RWMutex
	sapServiceOrderItemDatumUpdateCache          = make(map[string]updateCache)
	sapServiceOrderItemDatumUpsertCacheMut       sync.RWMutex
	sapServiceOrderItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceOrderItemDatumAfterSelectHooks []SapServiceOrderItemDatumHook

var sapServiceOrderItemDatumBeforeInsertHooks []SapServiceOrderItemDatumHook
var sapServiceOrderItemDatumAfterInsertHooks []SapServiceOrderItemDatumHook

var sapServiceOrderItemDatumBeforeUpdateHooks []SapServiceOrderItemDatumHook
var sapServiceOrderItemDatumAfterUpdateHooks []SapServiceOrderItemDatumHook

var sapServiceOrderItemDatumBeforeDeleteHooks []SapServiceOrderItemDatumHook
var sapServiceOrderItemDatumAfterDeleteHooks []SapServiceOrderItemDatumHook

var sapServiceOrderItemDatumBeforeUpsertHooks []SapServiceOrderItemDatumHook
var sapServiceOrderItemDatumAfterUpsertHooks []SapServiceOrderItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceOrderItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceOrderItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceOrderItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceOrderItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceOrderItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceOrderItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceOrderItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceOrderItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceOrderItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceOrderItemDatumHook registers your hook function for all future operations.
func AddSapServiceOrderItemDatumHook(hookPoint boil.HookPoint, sapServiceOrderItemDatumHook SapServiceOrderItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceOrderItemDatumAfterSelectHooks = append(sapServiceOrderItemDatumAfterSelectHooks, sapServiceOrderItemDatumHook)
	case boil.BeforeInsertHook:
		sapServiceOrderItemDatumBeforeInsertHooks = append(sapServiceOrderItemDatumBeforeInsertHooks, sapServiceOrderItemDatumHook)
	case boil.AfterInsertHook:
		sapServiceOrderItemDatumAfterInsertHooks = append(sapServiceOrderItemDatumAfterInsertHooks, sapServiceOrderItemDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceOrderItemDatumBeforeUpdateHooks = append(sapServiceOrderItemDatumBeforeUpdateHooks, sapServiceOrderItemDatumHook)
	case boil.AfterUpdateHook:
		sapServiceOrderItemDatumAfterUpdateHooks = append(sapServiceOrderItemDatumAfterUpdateHooks, sapServiceOrderItemDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceOrderItemDatumBeforeDeleteHooks = append(sapServiceOrderItemDatumBeforeDeleteHooks, sapServiceOrderItemDatumHook)
	case boil.AfterDeleteHook:
		sapServiceOrderItemDatumAfterDeleteHooks = append(sapServiceOrderItemDatumAfterDeleteHooks, sapServiceOrderItemDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceOrderItemDatumBeforeUpsertHooks = append(sapServiceOrderItemDatumBeforeUpsertHooks, sapServiceOrderItemDatumHook)
	case boil.AfterUpsertHook:
		sapServiceOrderItemDatumAfterUpsertHooks = append(sapServiceOrderItemDatumAfterUpsertHooks, sapServiceOrderItemDatumHook)
	}
}

// One returns a single sapServiceOrderItemDatum record from the query.
func (q sapServiceOrderItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceOrderItemDatum, error) {
	o := &SapServiceOrderItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_order_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceOrderItemDatum records from the query.
func (q sapServiceOrderItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceOrderItemDatumSlice, error) {
	var o []*SapServiceOrderItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceOrderItemDatum slice")
	}

	if len(sapServiceOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceOrderItemDatum records in the query.
func (q sapServiceOrderItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_order_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceOrderItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_order_item_data exists")
	}

	return count > 0, nil
}

// ServiceOrderSapServiceOrderHeaderDatum pointed to by the foreign key.
func (o *SapServiceOrderItemDatum) ServiceOrderSapServiceOrderHeaderDatum(mods ...qm.QueryMod) sapServiceOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceOrderHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_header_data`")

	return query
}

// LoadServiceOrderSapServiceOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapServiceOrderItemDatumL) LoadServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderItemDatum
	var object *SapServiceOrderItemDatum

	if singular {
		object = maybeSapServiceOrderItemDatum.(*SapServiceOrderItemDatum)
	} else {
		slice = *maybeSapServiceOrderItemDatum.(*[]*SapServiceOrderItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderItemDatumR{}
		}
		args = append(args, object.ServiceOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_header_data`),
		qm.WhereIn(`sap_service_order_header_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderHeaderDatum")
	}

	var resultSlice []*SapServiceOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_header_data")
	}

	if len(sapServiceOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderHeaderDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderItemData = append(foreign.R.ServiceOrderSapServiceOrderItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderHeaderDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderItemData = append(foreign.R.ServiceOrderSapServiceOrderItemData, local)
				break
			}
		}
	}

	return nil
}

// SetServiceOrderSapServiceOrderHeaderDatum of the sapServiceOrderItemDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderHeaderDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderItemData.
func (o *SapServiceOrderItemDatum) SetServiceOrderSapServiceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_service_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
		strmangle.WhereClause("`", "`", 0, sapServiceOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ServiceOrder, o.ServiceOrder, o.ServiceOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceOrder = related.ServiceOrder
	if o.R == nil {
		o.R = &sapServiceOrderItemDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderItemData: SapServiceOrderItemDatumSlice{o},
		}
	} else {
		related.R.ServiceOrderSapServiceOrderItemData = append(related.R.ServiceOrderSapServiceOrderItemData, o)
	}

	return nil
}

// SapServiceOrderItemData retrieves all the records using an executor.
func SapServiceOrderItemData(mods ...qm.QueryMod) sapServiceOrderItemDatumQuery {
	mods = append(mods, qm.From("`sap_service_order_item_data`"))
	return sapServiceOrderItemDatumQuery{NewQuery(mods...)}
}

// FindSapServiceOrderItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, serviceOrderItem string, selectCols ...string) (*SapServiceOrderItemDatum, error) {
	sapServiceOrderItemDatumObj := &SapServiceOrderItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_order_item_data` where `ServiceOrder`=? AND `ServiceOrderItem`=?", sel,
	)

	q := queries.Raw(query, serviceOrder, serviceOrderItem)

	err := q.Bind(ctx, exec, sapServiceOrderItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_order_item_data")
	}

	if err = sapServiceOrderItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceOrderItemDatumObj, err
	}

	return sapServiceOrderItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceOrderItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceOrderItemDatumInsertCacheMut.RLock()
	cache, cached := sapServiceOrderItemDatumInsertCache[key]
	sapServiceOrderItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceOrderItemDatumAllColumns,
			sapServiceOrderItemDatumColumnsWithDefault,
			sapServiceOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_order_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_order_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_order_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceOrderItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_order_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceOrder,
		o.ServiceOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_item_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderItemDatumInsertCacheMut.Lock()
		sapServiceOrderItemDatumInsertCache[key] = cache
		sapServiceOrderItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceOrderItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceOrderItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceOrderItemDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceOrderItemDatumUpdateCache[key]
	sapServiceOrderItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceOrderItemDatumAllColumns,
			sapServiceOrderItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_order_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_order_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, append(wl, sapServiceOrderItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_order_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_order_item_data")
	}

	if !cached {
		sapServiceOrderItemDatumUpdateCacheMut.Lock()
		sapServiceOrderItemDatumUpdateCache[key] = cache
		sapServiceOrderItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceOrderItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_order_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_order_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceOrderItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceOrderItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceOrderItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceOrderItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceOrderItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceOrderItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceOrderItemDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceOrderItemDatumUpsertCache[key]
	sapServiceOrderItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceOrderItemDatumAllColumns,
			sapServiceOrderItemDatumColumnsWithDefault,
			sapServiceOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceOrderItemDatumAllColumns,
			sapServiceOrderItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_order_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_order_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_order_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_order_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceOrderItemDatumType, sapServiceOrderItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_order_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_item_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderItemDatumUpsertCacheMut.Lock()
		sapServiceOrderItemDatumUpsertCache[key] = cache
		sapServiceOrderItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceOrderItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceOrderItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceOrderItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceOrderItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_order_item_data` WHERE `ServiceOrder`=? AND `ServiceOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_order_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_order_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceOrderItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceOrderItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_order_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceOrderItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceOrderItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceOrderItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_item_data")
	}

	if len(sapServiceOrderItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceOrderItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceOrderItemDatum(ctx, exec, o.ServiceOrder, o.ServiceOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceOrderItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceOrderItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_order_item_data`.* FROM `sap_service_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceOrderItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceOrderItemDatumExists checks if the SapServiceOrderItemDatum row exists.
func SapServiceOrderItemDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, serviceOrderItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_order_item_data` where `ServiceOrder`=? AND `ServiceOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceOrder, serviceOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, serviceOrder, serviceOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_order_item_data exists")
	}

	return exists, nil
}
