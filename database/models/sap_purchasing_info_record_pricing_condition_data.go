// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPurchasingInfoRecordPricingConditionDatum is an object representing the database table.
type SapPurchasingInfoRecordPricingConditionDatum struct {
	PurchasingInfoRecord         string      `boil:"PurchasingInfoRecord" json:"PurchasingInfoRecord" toml:"PurchasingInfoRecord" yaml:"PurchasingInfoRecord"`
	ConditionRecord              string      `boil:"ConditionRecord" json:"ConditionRecord" toml:"ConditionRecord" yaml:"ConditionRecord"`
	ConditionSequentialNumber    string      `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber"`
	ConditionValidityEndDate     string      `boil:"ConditionValidityEndDate" json:"ConditionValidityEndDate" toml:"ConditionValidityEndDate" yaml:"ConditionValidityEndDate"`
	ConditionValidityStartDate   null.String `boil:"ConditionValidityStartDate" json:"ConditionValidityStartDate,omitempty" toml:"ConditionValidityStartDate" yaml:"ConditionValidityStartDate,omitempty"`
	ConditionApplication         null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	ConditionType                null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	CreatedByUser                null.String `boil:"CreatedByUser" json:"CreatedByUser,omitempty" toml:"CreatedByUser" yaml:"CreatedByUser,omitempty"`
	CreationDate                 null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	ConditionTextID              null.String `boil:"ConditionTextID" json:"ConditionTextID,omitempty" toml:"ConditionTextID" yaml:"ConditionTextID,omitempty"`
	PricingScaleType             null.String `boil:"PricingScaleType" json:"PricingScaleType,omitempty" toml:"PricingScaleType" yaml:"PricingScaleType,omitempty"`
	PricingScaleBasis            null.String `boil:"PricingScaleBasis" json:"PricingScaleBasis,omitempty" toml:"PricingScaleBasis" yaml:"PricingScaleBasis,omitempty"`
	ConditionScaleQuantity       null.String `boil:"ConditionScaleQuantity" json:"ConditionScaleQuantity,omitempty" toml:"ConditionScaleQuantity" yaml:"ConditionScaleQuantity,omitempty"`
	ConditionScaleQuantityUnit   null.String `boil:"ConditionScaleQuantityUnit" json:"ConditionScaleQuantityUnit,omitempty" toml:"ConditionScaleQuantityUnit" yaml:"ConditionScaleQuantityUnit,omitempty"`
	ConditionScaleAmount         null.String `boil:"ConditionScaleAmount" json:"ConditionScaleAmount,omitempty" toml:"ConditionScaleAmount" yaml:"ConditionScaleAmount,omitempty"`
	ConditionScaleAmountCurrency null.String `boil:"ConditionScaleAmountCurrency" json:"ConditionScaleAmountCurrency,omitempty" toml:"ConditionScaleAmountCurrency" yaml:"ConditionScaleAmountCurrency,omitempty"`
	ConditionCalculationType     null.String `boil:"ConditionCalculationType" json:"ConditionCalculationType,omitempty" toml:"ConditionCalculationType" yaml:"ConditionCalculationType,omitempty"`
	ConditionRateValue           null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionRateValueUnit       null.String `boil:"ConditionRateValueUnit" json:"ConditionRateValueUnit,omitempty" toml:"ConditionRateValueUnit" yaml:"ConditionRateValueUnit,omitempty"`
	ConditionQuantity            null.String `boil:"ConditionQuantity" json:"ConditionQuantity,omitempty" toml:"ConditionQuantity" yaml:"ConditionQuantity,omitempty"`
	ConditionQuantityUnit        null.String `boil:"ConditionQuantityUnit" json:"ConditionQuantityUnit,omitempty" toml:"ConditionQuantityUnit" yaml:"ConditionQuantityUnit,omitempty"`
	ConditionToBaseQtyNmrtr      null.String `boil:"ConditionToBaseQtyNmrtr" json:"ConditionToBaseQtyNmrtr,omitempty" toml:"ConditionToBaseQtyNmrtr" yaml:"ConditionToBaseQtyNmrtr,omitempty"`
	ConditionToBaseQtyDnmntr     null.String `boil:"ConditionToBaseQtyDnmntr" json:"ConditionToBaseQtyDnmntr,omitempty" toml:"ConditionToBaseQtyDnmntr" yaml:"ConditionToBaseQtyDnmntr,omitempty"`
	BaseUnit                     null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ConditionLowerLimit          null.String `boil:"ConditionLowerLimit" json:"ConditionLowerLimit,omitempty" toml:"ConditionLowerLimit" yaml:"ConditionLowerLimit,omitempty"`
	ConditionUpperLimit          null.String `boil:"ConditionUpperLimit" json:"ConditionUpperLimit,omitempty" toml:"ConditionUpperLimit" yaml:"ConditionUpperLimit,omitempty"`
	ConditionAlternativeCurrency null.String `boil:"ConditionAlternativeCurrency" json:"ConditionAlternativeCurrency,omitempty" toml:"ConditionAlternativeCurrency" yaml:"ConditionAlternativeCurrency,omitempty"`
	ConditionExclusion           null.String `boil:"ConditionExclusion" json:"ConditionExclusion,omitempty" toml:"ConditionExclusion" yaml:"ConditionExclusion,omitempty"`
	ConditionIsDeleted           null.Bool   `boil:"ConditionIsDeleted" json:"ConditionIsDeleted,omitempty" toml:"ConditionIsDeleted" yaml:"ConditionIsDeleted,omitempty"`
	AdditionalValueDays          null.String `boil:"AdditionalValueDays" json:"AdditionalValueDays,omitempty" toml:"AdditionalValueDays" yaml:"AdditionalValueDays,omitempty"`
	FixedValueDate               null.String `boil:"FixedValueDate" json:"FixedValueDate,omitempty" toml:"FixedValueDate" yaml:"FixedValueDate,omitempty"`
	PaymentTerms                 null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	CndnMaxNumberOfSalesOrders   null.String `boil:"CndnMaxNumberOfSalesOrders" json:"CndnMaxNumberOfSalesOrders,omitempty" toml:"CndnMaxNumberOfSalesOrders" yaml:"CndnMaxNumberOfSalesOrders,omitempty"`
	MinimumConditionBasisValue   null.String `boil:"MinimumConditionBasisValue" json:"MinimumConditionBasisValue,omitempty" toml:"MinimumConditionBasisValue" yaml:"MinimumConditionBasisValue,omitempty"`
	MaximumConditionBasisValue   null.String `boil:"MaximumConditionBasisValue" json:"MaximumConditionBasisValue,omitempty" toml:"MaximumConditionBasisValue" yaml:"MaximumConditionBasisValue,omitempty"`
	MaximumConditionAmount       null.String `boil:"MaximumConditionAmount" json:"MaximumConditionAmount,omitempty" toml:"MaximumConditionAmount" yaml:"MaximumConditionAmount,omitempty"`
	IncrementalScale             null.String `boil:"IncrementalScale" json:"IncrementalScale,omitempty" toml:"IncrementalScale" yaml:"IncrementalScale,omitempty"`
	PricingScaleLine             null.String `boil:"PricingScaleLine" json:"PricingScaleLine,omitempty" toml:"PricingScaleLine" yaml:"PricingScaleLine,omitempty"`
	ConditionReleaseStatus       null.String `boil:"ConditionReleaseStatus" json:"ConditionReleaseStatus,omitempty" toml:"ConditionReleaseStatus" yaml:"ConditionReleaseStatus,omitempty"`

	R *sapPurchasingInfoRecordPricingConditionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPurchasingInfoRecordPricingConditionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPurchasingInfoRecordPricingConditionDatumColumns = struct {
	PurchasingInfoRecord         string
	ConditionRecord              string
	ConditionSequentialNumber    string
	ConditionValidityEndDate     string
	ConditionValidityStartDate   string
	ConditionApplication         string
	ConditionType                string
	CreatedByUser                string
	CreationDate                 string
	ConditionTextID              string
	PricingScaleType             string
	PricingScaleBasis            string
	ConditionScaleQuantity       string
	ConditionScaleQuantityUnit   string
	ConditionScaleAmount         string
	ConditionScaleAmountCurrency string
	ConditionCalculationType     string
	ConditionRateValue           string
	ConditionRateValueUnit       string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	ConditionToBaseQtyNmrtr      string
	ConditionToBaseQtyDnmntr     string
	BaseUnit                     string
	ConditionLowerLimit          string
	ConditionUpperLimit          string
	ConditionAlternativeCurrency string
	ConditionExclusion           string
	ConditionIsDeleted           string
	AdditionalValueDays          string
	FixedValueDate               string
	PaymentTerms                 string
	CndnMaxNumberOfSalesOrders   string
	MinimumConditionBasisValue   string
	MaximumConditionBasisValue   string
	MaximumConditionAmount       string
	IncrementalScale             string
	PricingScaleLine             string
	ConditionReleaseStatus       string
}{
	PurchasingInfoRecord:         "PurchasingInfoRecord",
	ConditionRecord:              "ConditionRecord",
	ConditionSequentialNumber:    "ConditionSequentialNumber",
	ConditionValidityEndDate:     "ConditionValidityEndDate",
	ConditionValidityStartDate:   "ConditionValidityStartDate",
	ConditionApplication:         "ConditionApplication",
	ConditionType:                "ConditionType",
	CreatedByUser:                "CreatedByUser",
	CreationDate:                 "CreationDate",
	ConditionTextID:              "ConditionTextID",
	PricingScaleType:             "PricingScaleType",
	PricingScaleBasis:            "PricingScaleBasis",
	ConditionScaleQuantity:       "ConditionScaleQuantity",
	ConditionScaleQuantityUnit:   "ConditionScaleQuantityUnit",
	ConditionScaleAmount:         "ConditionScaleAmount",
	ConditionScaleAmountCurrency: "ConditionScaleAmountCurrency",
	ConditionCalculationType:     "ConditionCalculationType",
	ConditionRateValue:           "ConditionRateValue",
	ConditionRateValueUnit:       "ConditionRateValueUnit",
	ConditionQuantity:            "ConditionQuantity",
	ConditionQuantityUnit:        "ConditionQuantityUnit",
	ConditionToBaseQtyNmrtr:      "ConditionToBaseQtyNmrtr",
	ConditionToBaseQtyDnmntr:     "ConditionToBaseQtyDnmntr",
	BaseUnit:                     "BaseUnit",
	ConditionLowerLimit:          "ConditionLowerLimit",
	ConditionUpperLimit:          "ConditionUpperLimit",
	ConditionAlternativeCurrency: "ConditionAlternativeCurrency",
	ConditionExclusion:           "ConditionExclusion",
	ConditionIsDeleted:           "ConditionIsDeleted",
	AdditionalValueDays:          "AdditionalValueDays",
	FixedValueDate:               "FixedValueDate",
	PaymentTerms:                 "PaymentTerms",
	CndnMaxNumberOfSalesOrders:   "CndnMaxNumberOfSalesOrders",
	MinimumConditionBasisValue:   "MinimumConditionBasisValue",
	MaximumConditionBasisValue:   "MaximumConditionBasisValue",
	MaximumConditionAmount:       "MaximumConditionAmount",
	IncrementalScale:             "IncrementalScale",
	PricingScaleLine:             "PricingScaleLine",
	ConditionReleaseStatus:       "ConditionReleaseStatus",
}

var SapPurchasingInfoRecordPricingConditionDatumTableColumns = struct {
	PurchasingInfoRecord         string
	ConditionRecord              string
	ConditionSequentialNumber    string
	ConditionValidityEndDate     string
	ConditionValidityStartDate   string
	ConditionApplication         string
	ConditionType                string
	CreatedByUser                string
	CreationDate                 string
	ConditionTextID              string
	PricingScaleType             string
	PricingScaleBasis            string
	ConditionScaleQuantity       string
	ConditionScaleQuantityUnit   string
	ConditionScaleAmount         string
	ConditionScaleAmountCurrency string
	ConditionCalculationType     string
	ConditionRateValue           string
	ConditionRateValueUnit       string
	ConditionQuantity            string
	ConditionQuantityUnit        string
	ConditionToBaseQtyNmrtr      string
	ConditionToBaseQtyDnmntr     string
	BaseUnit                     string
	ConditionLowerLimit          string
	ConditionUpperLimit          string
	ConditionAlternativeCurrency string
	ConditionExclusion           string
	ConditionIsDeleted           string
	AdditionalValueDays          string
	FixedValueDate               string
	PaymentTerms                 string
	CndnMaxNumberOfSalesOrders   string
	MinimumConditionBasisValue   string
	MaximumConditionBasisValue   string
	MaximumConditionAmount       string
	IncrementalScale             string
	PricingScaleLine             string
	ConditionReleaseStatus       string
}{
	PurchasingInfoRecord:         "sap_purchasing_info_record_pricing_condition_data.PurchasingInfoRecord",
	ConditionRecord:              "sap_purchasing_info_record_pricing_condition_data.ConditionRecord",
	ConditionSequentialNumber:    "sap_purchasing_info_record_pricing_condition_data.ConditionSequentialNumber",
	ConditionValidityEndDate:     "sap_purchasing_info_record_pricing_condition_data.ConditionValidityEndDate",
	ConditionValidityStartDate:   "sap_purchasing_info_record_pricing_condition_data.ConditionValidityStartDate",
	ConditionApplication:         "sap_purchasing_info_record_pricing_condition_data.ConditionApplication",
	ConditionType:                "sap_purchasing_info_record_pricing_condition_data.ConditionType",
	CreatedByUser:                "sap_purchasing_info_record_pricing_condition_data.CreatedByUser",
	CreationDate:                 "sap_purchasing_info_record_pricing_condition_data.CreationDate",
	ConditionTextID:              "sap_purchasing_info_record_pricing_condition_data.ConditionTextID",
	PricingScaleType:             "sap_purchasing_info_record_pricing_condition_data.PricingScaleType",
	PricingScaleBasis:            "sap_purchasing_info_record_pricing_condition_data.PricingScaleBasis",
	ConditionScaleQuantity:       "sap_purchasing_info_record_pricing_condition_data.ConditionScaleQuantity",
	ConditionScaleQuantityUnit:   "sap_purchasing_info_record_pricing_condition_data.ConditionScaleQuantityUnit",
	ConditionScaleAmount:         "sap_purchasing_info_record_pricing_condition_data.ConditionScaleAmount",
	ConditionScaleAmountCurrency: "sap_purchasing_info_record_pricing_condition_data.ConditionScaleAmountCurrency",
	ConditionCalculationType:     "sap_purchasing_info_record_pricing_condition_data.ConditionCalculationType",
	ConditionRateValue:           "sap_purchasing_info_record_pricing_condition_data.ConditionRateValue",
	ConditionRateValueUnit:       "sap_purchasing_info_record_pricing_condition_data.ConditionRateValueUnit",
	ConditionQuantity:            "sap_purchasing_info_record_pricing_condition_data.ConditionQuantity",
	ConditionQuantityUnit:        "sap_purchasing_info_record_pricing_condition_data.ConditionQuantityUnit",
	ConditionToBaseQtyNmrtr:      "sap_purchasing_info_record_pricing_condition_data.ConditionToBaseQtyNmrtr",
	ConditionToBaseQtyDnmntr:     "sap_purchasing_info_record_pricing_condition_data.ConditionToBaseQtyDnmntr",
	BaseUnit:                     "sap_purchasing_info_record_pricing_condition_data.BaseUnit",
	ConditionLowerLimit:          "sap_purchasing_info_record_pricing_condition_data.ConditionLowerLimit",
	ConditionUpperLimit:          "sap_purchasing_info_record_pricing_condition_data.ConditionUpperLimit",
	ConditionAlternativeCurrency: "sap_purchasing_info_record_pricing_condition_data.ConditionAlternativeCurrency",
	ConditionExclusion:           "sap_purchasing_info_record_pricing_condition_data.ConditionExclusion",
	ConditionIsDeleted:           "sap_purchasing_info_record_pricing_condition_data.ConditionIsDeleted",
	AdditionalValueDays:          "sap_purchasing_info_record_pricing_condition_data.AdditionalValueDays",
	FixedValueDate:               "sap_purchasing_info_record_pricing_condition_data.FixedValueDate",
	PaymentTerms:                 "sap_purchasing_info_record_pricing_condition_data.PaymentTerms",
	CndnMaxNumberOfSalesOrders:   "sap_purchasing_info_record_pricing_condition_data.CndnMaxNumberOfSalesOrders",
	MinimumConditionBasisValue:   "sap_purchasing_info_record_pricing_condition_data.MinimumConditionBasisValue",
	MaximumConditionBasisValue:   "sap_purchasing_info_record_pricing_condition_data.MaximumConditionBasisValue",
	MaximumConditionAmount:       "sap_purchasing_info_record_pricing_condition_data.MaximumConditionAmount",
	IncrementalScale:             "sap_purchasing_info_record_pricing_condition_data.IncrementalScale",
	PricingScaleLine:             "sap_purchasing_info_record_pricing_condition_data.PricingScaleLine",
	ConditionReleaseStatus:       "sap_purchasing_info_record_pricing_condition_data.ConditionReleaseStatus",
}

// Generated where

var SapPurchasingInfoRecordPricingConditionDatumWhere = struct {
	PurchasingInfoRecord         whereHelperstring
	ConditionRecord              whereHelperstring
	ConditionSequentialNumber    whereHelperstring
	ConditionValidityEndDate     whereHelperstring
	ConditionValidityStartDate   whereHelpernull_String
	ConditionApplication         whereHelpernull_String
	ConditionType                whereHelpernull_String
	CreatedByUser                whereHelpernull_String
	CreationDate                 whereHelpernull_String
	ConditionTextID              whereHelpernull_String
	PricingScaleType             whereHelpernull_String
	PricingScaleBasis            whereHelpernull_String
	ConditionScaleQuantity       whereHelpernull_String
	ConditionScaleQuantityUnit   whereHelpernull_String
	ConditionScaleAmount         whereHelpernull_String
	ConditionScaleAmountCurrency whereHelpernull_String
	ConditionCalculationType     whereHelpernull_String
	ConditionRateValue           whereHelpernull_String
	ConditionRateValueUnit       whereHelpernull_String
	ConditionQuantity            whereHelpernull_String
	ConditionQuantityUnit        whereHelpernull_String
	ConditionToBaseQtyNmrtr      whereHelpernull_String
	ConditionToBaseQtyDnmntr     whereHelpernull_String
	BaseUnit                     whereHelpernull_String
	ConditionLowerLimit          whereHelpernull_String
	ConditionUpperLimit          whereHelpernull_String
	ConditionAlternativeCurrency whereHelpernull_String
	ConditionExclusion           whereHelpernull_String
	ConditionIsDeleted           whereHelpernull_Bool
	AdditionalValueDays          whereHelpernull_String
	FixedValueDate               whereHelpernull_String
	PaymentTerms                 whereHelpernull_String
	CndnMaxNumberOfSalesOrders   whereHelpernull_String
	MinimumConditionBasisValue   whereHelpernull_String
	MaximumConditionBasisValue   whereHelpernull_String
	MaximumConditionAmount       whereHelpernull_String
	IncrementalScale             whereHelpernull_String
	PricingScaleLine             whereHelpernull_String
	ConditionReleaseStatus       whereHelpernull_String
}{
	PurchasingInfoRecord:         whereHelperstring{field: "`sap_purchasing_info_record_pricing_condition_data`.`PurchasingInfoRecord`"},
	ConditionRecord:              whereHelperstring{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionRecord`"},
	ConditionSequentialNumber:    whereHelperstring{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionSequentialNumber`"},
	ConditionValidityEndDate:     whereHelperstring{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionValidityEndDate`"},
	ConditionValidityStartDate:   whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionValidityStartDate`"},
	ConditionApplication:         whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionApplication`"},
	ConditionType:                whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionType`"},
	CreatedByUser:                whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`CreatedByUser`"},
	CreationDate:                 whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`CreationDate`"},
	ConditionTextID:              whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionTextID`"},
	PricingScaleType:             whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`PricingScaleType`"},
	PricingScaleBasis:            whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`PricingScaleBasis`"},
	ConditionScaleQuantity:       whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionScaleQuantity`"},
	ConditionScaleQuantityUnit:   whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionScaleQuantityUnit`"},
	ConditionScaleAmount:         whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionScaleAmount`"},
	ConditionScaleAmountCurrency: whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionScaleAmountCurrency`"},
	ConditionCalculationType:     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionCalculationType`"},
	ConditionRateValue:           whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionRateValue`"},
	ConditionRateValueUnit:       whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionRateValueUnit`"},
	ConditionQuantity:            whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionQuantity`"},
	ConditionQuantityUnit:        whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionQuantityUnit`"},
	ConditionToBaseQtyNmrtr:      whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionToBaseQtyNmrtr`"},
	ConditionToBaseQtyDnmntr:     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionToBaseQtyDnmntr`"},
	BaseUnit:                     whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`BaseUnit`"},
	ConditionLowerLimit:          whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionLowerLimit`"},
	ConditionUpperLimit:          whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionUpperLimit`"},
	ConditionAlternativeCurrency: whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionAlternativeCurrency`"},
	ConditionExclusion:           whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionExclusion`"},
	ConditionIsDeleted:           whereHelpernull_Bool{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionIsDeleted`"},
	AdditionalValueDays:          whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`AdditionalValueDays`"},
	FixedValueDate:               whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`FixedValueDate`"},
	PaymentTerms:                 whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`PaymentTerms`"},
	CndnMaxNumberOfSalesOrders:   whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`CndnMaxNumberOfSalesOrders`"},
	MinimumConditionBasisValue:   whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`MinimumConditionBasisValue`"},
	MaximumConditionBasisValue:   whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`MaximumConditionBasisValue`"},
	MaximumConditionAmount:       whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`MaximumConditionAmount`"},
	IncrementalScale:             whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`IncrementalScale`"},
	PricingScaleLine:             whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`PricingScaleLine`"},
	ConditionReleaseStatus:       whereHelpernull_String{field: "`sap_purchasing_info_record_pricing_condition_data`.`ConditionReleaseStatus`"},
}

// SapPurchasingInfoRecordPricingConditionDatumRels is where relationship names are stored.
var SapPurchasingInfoRecordPricingConditionDatumRels = struct {
	PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum string
}{
	PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: "PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum",
}

// sapPurchasingInfoRecordPricingConditionDatumR is where relationships are stored.
type sapPurchasingInfoRecordPricingConditionDatumR struct {
	PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum *SapPurchasingInfoRecordGeneralDatum `boil:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum" json:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum" toml:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum" yaml:"PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapPurchasingInfoRecordPricingConditionDatumR) NewStruct() *sapPurchasingInfoRecordPricingConditionDatumR {
	return &sapPurchasingInfoRecordPricingConditionDatumR{}
}

func (r *sapPurchasingInfoRecordPricingConditionDatumR) GetPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum() *SapPurchasingInfoRecordGeneralDatum {
	if r == nil {
		return nil
	}
	return r.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum
}

// sapPurchasingInfoRecordPricingConditionDatumL is where Load methods for each relationship are stored.
type sapPurchasingInfoRecordPricingConditionDatumL struct{}

var (
	sapPurchasingInfoRecordPricingConditionDatumAllColumns            = []string{"PurchasingInfoRecord", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityEndDate", "ConditionValidityStartDate", "ConditionApplication", "ConditionType", "CreatedByUser", "CreationDate", "ConditionTextID", "PricingScaleType", "PricingScaleBasis", "ConditionScaleQuantity", "ConditionScaleQuantityUnit", "ConditionScaleAmount", "ConditionScaleAmountCurrency", "ConditionCalculationType", "ConditionRateValue", "ConditionRateValueUnit", "ConditionQuantity", "ConditionQuantityUnit", "ConditionToBaseQtyNmrtr", "ConditionToBaseQtyDnmntr", "BaseUnit", "ConditionLowerLimit", "ConditionUpperLimit", "ConditionAlternativeCurrency", "ConditionExclusion", "ConditionIsDeleted", "AdditionalValueDays", "FixedValueDate", "PaymentTerms", "CndnMaxNumberOfSalesOrders", "MinimumConditionBasisValue", "MaximumConditionBasisValue", "MaximumConditionAmount", "IncrementalScale", "PricingScaleLine", "ConditionReleaseStatus"}
	sapPurchasingInfoRecordPricingConditionDatumColumnsWithoutDefault = []string{"PurchasingInfoRecord", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityEndDate", "ConditionValidityStartDate", "ConditionApplication", "ConditionType", "CreatedByUser", "CreationDate", "ConditionTextID", "PricingScaleType", "PricingScaleBasis", "ConditionScaleQuantity", "ConditionScaleQuantityUnit", "ConditionScaleAmount", "ConditionScaleAmountCurrency", "ConditionCalculationType", "ConditionRateValue", "ConditionRateValueUnit", "ConditionQuantity", "ConditionQuantityUnit", "ConditionToBaseQtyNmrtr", "ConditionToBaseQtyDnmntr", "BaseUnit", "ConditionLowerLimit", "ConditionUpperLimit", "ConditionAlternativeCurrency", "ConditionExclusion", "ConditionIsDeleted", "AdditionalValueDays", "FixedValueDate", "PaymentTerms", "CndnMaxNumberOfSalesOrders", "MinimumConditionBasisValue", "MaximumConditionBasisValue", "MaximumConditionAmount", "IncrementalScale", "PricingScaleLine", "ConditionReleaseStatus"}
	sapPurchasingInfoRecordPricingConditionDatumColumnsWithDefault    = []string{}
	sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns     = []string{"PurchasingInfoRecord", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityEndDate"}
	sapPurchasingInfoRecordPricingConditionDatumGeneratedColumns      = []string{}
)

type (
	// SapPurchasingInfoRecordPricingConditionDatumSlice is an alias for a slice of pointers to SapPurchasingInfoRecordPricingConditionDatum.
	// This should almost always be used instead of []SapPurchasingInfoRecordPricingConditionDatum.
	SapPurchasingInfoRecordPricingConditionDatumSlice []*SapPurchasingInfoRecordPricingConditionDatum
	// SapPurchasingInfoRecordPricingConditionDatumHook is the signature for custom SapPurchasingInfoRecordPricingConditionDatum hook methods
	SapPurchasingInfoRecordPricingConditionDatumHook func(context.Context, boil.ContextExecutor, *SapPurchasingInfoRecordPricingConditionDatum) error

	sapPurchasingInfoRecordPricingConditionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPurchasingInfoRecordPricingConditionDatumType                 = reflect.TypeOf(&SapPurchasingInfoRecordPricingConditionDatum{})
	sapPurchasingInfoRecordPricingConditionDatumMapping              = queries.MakeStructMapping(sapPurchasingInfoRecordPricingConditionDatumType)
	sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns)
	sapPurchasingInfoRecordPricingConditionDatumInsertCacheMut       sync.RWMutex
	sapPurchasingInfoRecordPricingConditionDatumInsertCache          = make(map[string]insertCache)
	sapPurchasingInfoRecordPricingConditionDatumUpdateCacheMut       sync.RWMutex
	sapPurchasingInfoRecordPricingConditionDatumUpdateCache          = make(map[string]updateCache)
	sapPurchasingInfoRecordPricingConditionDatumUpsertCacheMut       sync.RWMutex
	sapPurchasingInfoRecordPricingConditionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks []SapPurchasingInfoRecordPricingConditionDatumHook

var sapPurchasingInfoRecordPricingConditionDatumBeforeInsertHooks []SapPurchasingInfoRecordPricingConditionDatumHook
var sapPurchasingInfoRecordPricingConditionDatumAfterInsertHooks []SapPurchasingInfoRecordPricingConditionDatumHook

var sapPurchasingInfoRecordPricingConditionDatumBeforeUpdateHooks []SapPurchasingInfoRecordPricingConditionDatumHook
var sapPurchasingInfoRecordPricingConditionDatumAfterUpdateHooks []SapPurchasingInfoRecordPricingConditionDatumHook

var sapPurchasingInfoRecordPricingConditionDatumBeforeDeleteHooks []SapPurchasingInfoRecordPricingConditionDatumHook
var sapPurchasingInfoRecordPricingConditionDatumAfterDeleteHooks []SapPurchasingInfoRecordPricingConditionDatumHook

var sapPurchasingInfoRecordPricingConditionDatumBeforeUpsertHooks []SapPurchasingInfoRecordPricingConditionDatumHook
var sapPurchasingInfoRecordPricingConditionDatumAfterUpsertHooks []SapPurchasingInfoRecordPricingConditionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPurchasingInfoRecordPricingConditionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPurchasingInfoRecordPricingConditionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPurchasingInfoRecordPricingConditionDatumHook registers your hook function for all future operations.
func AddSapPurchasingInfoRecordPricingConditionDatumHook(hookPoint boil.HookPoint, sapPurchasingInfoRecordPricingConditionDatumHook SapPurchasingInfoRecordPricingConditionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks = append(sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.BeforeInsertHook:
		sapPurchasingInfoRecordPricingConditionDatumBeforeInsertHooks = append(sapPurchasingInfoRecordPricingConditionDatumBeforeInsertHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.AfterInsertHook:
		sapPurchasingInfoRecordPricingConditionDatumAfterInsertHooks = append(sapPurchasingInfoRecordPricingConditionDatumAfterInsertHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.BeforeUpdateHook:
		sapPurchasingInfoRecordPricingConditionDatumBeforeUpdateHooks = append(sapPurchasingInfoRecordPricingConditionDatumBeforeUpdateHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.AfterUpdateHook:
		sapPurchasingInfoRecordPricingConditionDatumAfterUpdateHooks = append(sapPurchasingInfoRecordPricingConditionDatumAfterUpdateHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.BeforeDeleteHook:
		sapPurchasingInfoRecordPricingConditionDatumBeforeDeleteHooks = append(sapPurchasingInfoRecordPricingConditionDatumBeforeDeleteHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.AfterDeleteHook:
		sapPurchasingInfoRecordPricingConditionDatumAfterDeleteHooks = append(sapPurchasingInfoRecordPricingConditionDatumAfterDeleteHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.BeforeUpsertHook:
		sapPurchasingInfoRecordPricingConditionDatumBeforeUpsertHooks = append(sapPurchasingInfoRecordPricingConditionDatumBeforeUpsertHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	case boil.AfterUpsertHook:
		sapPurchasingInfoRecordPricingConditionDatumAfterUpsertHooks = append(sapPurchasingInfoRecordPricingConditionDatumAfterUpsertHooks, sapPurchasingInfoRecordPricingConditionDatumHook)
	}
}

// One returns a single sapPurchasingInfoRecordPricingConditionDatum record from the query.
func (q sapPurchasingInfoRecordPricingConditionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPurchasingInfoRecordPricingConditionDatum, error) {
	o := &SapPurchasingInfoRecordPricingConditionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_purchasing_info_record_pricing_condition_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPurchasingInfoRecordPricingConditionDatum records from the query.
func (q sapPurchasingInfoRecordPricingConditionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPurchasingInfoRecordPricingConditionDatumSlice, error) {
	var o []*SapPurchasingInfoRecordPricingConditionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPurchasingInfoRecordPricingConditionDatum slice")
	}

	if len(sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPurchasingInfoRecordPricingConditionDatum records in the query.
func (q sapPurchasingInfoRecordPricingConditionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_purchasing_info_record_pricing_condition_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPurchasingInfoRecordPricingConditionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_purchasing_info_record_pricing_condition_data exists")
	}

	return count > 0, nil
}

// PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum pointed to by the foreign key.
func (o *SapPurchasingInfoRecordPricingConditionDatum) PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum(mods ...qm.QueryMod) sapPurchasingInfoRecordGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PurchasingInfoRecord` = ?", o.PurchasingInfoRecord),
	}

	queryMods = append(queryMods, mods...)

	return SapPurchasingInfoRecordGeneralData(queryMods...)
}

// LoadPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapPurchasingInfoRecordPricingConditionDatumL) LoadPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapPurchasingInfoRecordPricingConditionDatum interface{}, mods queries.Applicator) error {
	var slice []*SapPurchasingInfoRecordPricingConditionDatum
	var object *SapPurchasingInfoRecordPricingConditionDatum

	if singular {
		object = maybeSapPurchasingInfoRecordPricingConditionDatum.(*SapPurchasingInfoRecordPricingConditionDatum)
	} else {
		slice = *maybeSapPurchasingInfoRecordPricingConditionDatum.(*[]*SapPurchasingInfoRecordPricingConditionDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapPurchasingInfoRecordPricingConditionDatumR{}
		}
		args = append(args, object.PurchasingInfoRecord)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapPurchasingInfoRecordPricingConditionDatumR{}
			}

			for _, a := range args {
				if a == obj.PurchasingInfoRecord {
					continue Outer
				}
			}

			args = append(args, obj.PurchasingInfoRecord)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_purchasing_info_record_general_data`),
		qm.WhereIn(`sap_purchasing_info_record_general_data.PurchasingInfoRecord in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapPurchasingInfoRecordGeneralDatum")
	}

	var resultSlice []*SapPurchasingInfoRecordGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapPurchasingInfoRecordGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_purchasing_info_record_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_purchasing_info_record_general_data")
	}

	if len(sapPurchasingInfoRecordPricingConditionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapPurchasingInfoRecordGeneralDatumR{}
		}
		foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData = append(foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchasingInfoRecord == foreign.PurchasingInfoRecord {
				local.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapPurchasingInfoRecordGeneralDatumR{}
				}
				foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData = append(foreign.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData, local)
				break
			}
		}
	}

	return nil
}

// SetPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum of the sapPurchasingInfoRecordPricingConditionDatum to the related item.
// Sets o.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum to related.
// Adds o to related.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData.
func (o *SapPurchasingInfoRecordPricingConditionDatum) SetPurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapPurchasingInfoRecordGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_purchasing_info_record_pricing_condition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PurchasingInfoRecord"}),
		strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PurchasingInfoRecord, o.PurchasingInfoRecord, o.ConditionRecord, o.ConditionSequentialNumber, o.ConditionValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchasingInfoRecord = related.PurchasingInfoRecord
	if o.R == nil {
		o.R = &sapPurchasingInfoRecordPricingConditionDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum: related,
		}
	} else {
		o.R.PurchasingInfoRecordSapPurchasingInfoRecordGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapPurchasingInfoRecordGeneralDatumR{
			PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData: SapPurchasingInfoRecordPricingConditionDatumSlice{o},
		}
	} else {
		related.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData = append(related.R.PurchasingInfoRecordSapPurchasingInfoRecordPricingConditionData, o)
	}

	return nil
}

// SapPurchasingInfoRecordPricingConditionData retrieves all the records using an executor.
func SapPurchasingInfoRecordPricingConditionData(mods ...qm.QueryMod) sapPurchasingInfoRecordPricingConditionDatumQuery {
	mods = append(mods, qm.From("`sap_purchasing_info_record_pricing_condition_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_purchasing_info_record_pricing_condition_data`.*"})
	}

	return sapPurchasingInfoRecordPricingConditionDatumQuery{q}
}

// FindSapPurchasingInfoRecordPricingConditionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPurchasingInfoRecordPricingConditionDatum(ctx context.Context, exec boil.ContextExecutor, purchasingInfoRecord string, conditionRecord string, conditionSequentialNumber string, conditionValidityEndDate string, selectCols ...string) (*SapPurchasingInfoRecordPricingConditionDatum, error) {
	sapPurchasingInfoRecordPricingConditionDatumObj := &SapPurchasingInfoRecordPricingConditionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_purchasing_info_record_pricing_condition_data` where `PurchasingInfoRecord`=? AND `ConditionRecord`=? AND `ConditionSequentialNumber`=? AND `ConditionValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, purchasingInfoRecord, conditionRecord, conditionSequentialNumber, conditionValidityEndDate)

	err := q.Bind(ctx, exec, sapPurchasingInfoRecordPricingConditionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_purchasing_info_record_pricing_condition_data")
	}

	if err = sapPurchasingInfoRecordPricingConditionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPurchasingInfoRecordPricingConditionDatumObj, err
	}

	return sapPurchasingInfoRecordPricingConditionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPurchasingInfoRecordPricingConditionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_info_record_pricing_condition_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingInfoRecordPricingConditionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPurchasingInfoRecordPricingConditionDatumInsertCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordPricingConditionDatumInsertCache[key]
	sapPurchasingInfoRecordPricingConditionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPurchasingInfoRecordPricingConditionDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionDatumColumnsWithDefault,
			sapPurchasingInfoRecordPricingConditionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_purchasing_info_record_pricing_condition_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_purchasing_info_record_pricing_condition_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_purchasing_info_record_pricing_condition_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_purchasing_info_record_pricing_condition_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchasingInfoRecord,
		o.ConditionRecord,
		o.ConditionSequentialNumber,
		o.ConditionValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_info_record_pricing_condition_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingInfoRecordPricingConditionDatumInsertCacheMut.Lock()
		sapPurchasingInfoRecordPricingConditionDatumInsertCache[key] = cache
		sapPurchasingInfoRecordPricingConditionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPurchasingInfoRecordPricingConditionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPurchasingInfoRecordPricingConditionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPurchasingInfoRecordPricingConditionDatumUpdateCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordPricingConditionDatumUpdateCache[key]
	sapPurchasingInfoRecordPricingConditionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPurchasingInfoRecordPricingConditionDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_purchasing_info_record_pricing_condition_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_purchasing_info_record_pricing_condition_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, append(wl, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_purchasing_info_record_pricing_condition_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_purchasing_info_record_pricing_condition_data")
	}

	if !cached {
		sapPurchasingInfoRecordPricingConditionDatumUpdateCacheMut.Lock()
		sapPurchasingInfoRecordPricingConditionDatumUpdateCache[key] = cache
		sapPurchasingInfoRecordPricingConditionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPurchasingInfoRecordPricingConditionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_purchasing_info_record_pricing_condition_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_purchasing_info_record_pricing_condition_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPurchasingInfoRecordPricingConditionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_purchasing_info_record_pricing_condition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPurchasingInfoRecordPricingConditionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPurchasingInfoRecordPricingConditionDatum")
	}
	return rowsAff, nil
}

var mySQLSapPurchasingInfoRecordPricingConditionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPurchasingInfoRecordPricingConditionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_purchasing_info_record_pricing_condition_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPurchasingInfoRecordPricingConditionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPurchasingInfoRecordPricingConditionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPurchasingInfoRecordPricingConditionDatumUpsertCacheMut.RLock()
	cache, cached := sapPurchasingInfoRecordPricingConditionDatumUpsertCache[key]
	sapPurchasingInfoRecordPricingConditionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPurchasingInfoRecordPricingConditionDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionDatumColumnsWithDefault,
			sapPurchasingInfoRecordPricingConditionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPurchasingInfoRecordPricingConditionDatumAllColumns,
			sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_purchasing_info_record_pricing_condition_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_purchasing_info_record_pricing_condition_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_purchasing_info_record_pricing_condition_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_purchasing_info_record_pricing_condition_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPurchasingInfoRecordPricingConditionDatumType, sapPurchasingInfoRecordPricingConditionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_purchasing_info_record_pricing_condition_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_purchasing_info_record_pricing_condition_data")
	}

CacheNoHooks:
	if !cached {
		sapPurchasingInfoRecordPricingConditionDatumUpsertCacheMut.Lock()
		sapPurchasingInfoRecordPricingConditionDatumUpsertCache[key] = cache
		sapPurchasingInfoRecordPricingConditionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPurchasingInfoRecordPricingConditionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPurchasingInfoRecordPricingConditionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPurchasingInfoRecordPricingConditionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_purchasing_info_record_pricing_condition_data` WHERE `PurchasingInfoRecord`=? AND `ConditionRecord`=? AND `ConditionSequentialNumber`=? AND `ConditionValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_purchasing_info_record_pricing_condition_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_purchasing_info_record_pricing_condition_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPurchasingInfoRecordPricingConditionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPurchasingInfoRecordPricingConditionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_purchasing_info_record_pricing_condition_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_info_record_pricing_condition_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPurchasingInfoRecordPricingConditionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPurchasingInfoRecordPricingConditionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_purchasing_info_record_pricing_condition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPurchasingInfoRecordPricingConditionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_purchasing_info_record_pricing_condition_data")
	}

	if len(sapPurchasingInfoRecordPricingConditionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPurchasingInfoRecordPricingConditionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPurchasingInfoRecordPricingConditionDatum(ctx, exec, o.PurchasingInfoRecord, o.ConditionRecord, o.ConditionSequentialNumber, o.ConditionValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPurchasingInfoRecordPricingConditionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPurchasingInfoRecordPricingConditionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_purchasing_info_record_pricing_condition_data`.* FROM `sap_purchasing_info_record_pricing_condition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPurchasingInfoRecordPricingConditionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPurchasingInfoRecordPricingConditionDatumSlice")
	}

	*o = slice

	return nil
}

// SapPurchasingInfoRecordPricingConditionDatumExists checks if the SapPurchasingInfoRecordPricingConditionDatum row exists.
func SapPurchasingInfoRecordPricingConditionDatumExists(ctx context.Context, exec boil.ContextExecutor, purchasingInfoRecord string, conditionRecord string, conditionSequentialNumber string, conditionValidityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_purchasing_info_record_pricing_condition_data` where `PurchasingInfoRecord`=? AND `ConditionRecord`=? AND `ConditionSequentialNumber`=? AND `ConditionValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchasingInfoRecord, conditionRecord, conditionSequentialNumber, conditionValidityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, purchasingInfoRecord, conditionRecord, conditionSequentialNumber, conditionValidityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_purchasing_info_record_pricing_condition_data exists")
	}

	return exists, nil
}
