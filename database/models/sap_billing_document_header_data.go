// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBillingDocumentHeaderDatum is an object representing the database table.
type SapBillingDocumentHeaderDatum struct {
	BillingDocument            string      `boil:"BillingDocument" json:"BillingDocument" toml:"BillingDocument" yaml:"BillingDocument"`
	BillingDocumentType        null.String `boil:"BillingDocumentType" json:"BillingDocumentType,omitempty" toml:"BillingDocumentType" yaml:"BillingDocumentType,omitempty"`
	SDDocumentCategory         null.String `boil:"SDDocumentCategory" json:"SDDocumentCategory,omitempty" toml:"SDDocumentCategory" yaml:"SDDocumentCategory,omitempty"`
	BillingDocumentCategory    null.String `boil:"BillingDocumentCategory" json:"BillingDocumentCategory,omitempty" toml:"BillingDocumentCategory" yaml:"BillingDocumentCategory,omitempty"`
	CreationDate               null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate             null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	SalesOrganization          null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel        null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	Division                   null.String `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	BillingDocumentDate        null.String `boil:"BillingDocumentDate" json:"BillingDocumentDate,omitempty" toml:"BillingDocumentDate" yaml:"BillingDocumentDate,omitempty"`
	BillingDocumentIsCancelled null.Bool   `boil:"BillingDocumentIsCancelled" json:"BillingDocumentIsCancelled,omitempty" toml:"BillingDocumentIsCancelled" yaml:"BillingDocumentIsCancelled,omitempty"`
	CancelledBillingDocument   null.String `boil:"CancelledBillingDocument" json:"CancelledBillingDocument,omitempty" toml:"CancelledBillingDocument" yaml:"CancelledBillingDocument,omitempty"`
	IsExportDelivery           null.String `boil:"IsExportDelivery" json:"IsExportDelivery,omitempty" toml:"IsExportDelivery" yaml:"IsExportDelivery,omitempty"`
	TotalNetAmount             null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency        null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	TaxAmount                  null.String `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	TotalGrossAmount           null.String `boil:"TotalGrossAmount" json:"TotalGrossAmount,omitempty" toml:"TotalGrossAmount" yaml:"TotalGrossAmount,omitempty"`
	CustomerPriceGroup         null.String `boil:"CustomerPriceGroup" json:"CustomerPriceGroup,omitempty" toml:"CustomerPriceGroup" yaml:"CustomerPriceGroup,omitempty"`
	IncotermsClassification    null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms       null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod              null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	CompanyCode                null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	AccountingDocument         null.String `boil:"AccountingDocument" json:"AccountingDocument,omitempty" toml:"AccountingDocument" yaml:"AccountingDocument,omitempty"`
	ExchangeRateDate           null.String `boil:"ExchangeRateDate" json:"ExchangeRateDate,omitempty" toml:"ExchangeRateDate" yaml:"ExchangeRateDate,omitempty"`
	ExchangeRateType           null.String `boil:"ExchangeRateType" json:"ExchangeRateType,omitempty" toml:"ExchangeRateType" yaml:"ExchangeRateType,omitempty"`
	DocumentReferenceID        null.String `boil:"DocumentReferenceID" json:"DocumentReferenceID,omitempty" toml:"DocumentReferenceID" yaml:"DocumentReferenceID,omitempty"`
	SoldToParty                null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	PartnerCompany             null.String `boil:"PartnerCompany" json:"PartnerCompany,omitempty" toml:"PartnerCompany" yaml:"PartnerCompany,omitempty"`
	PurchaseOrderByCustomer    null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerGroup              null.String `boil:"CustomerGroup" json:"CustomerGroup,omitempty" toml:"CustomerGroup" yaml:"CustomerGroup,omitempty"`
	Country                    null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	CityCode                   null.String `boil:"CityCode" json:"CityCode,omitempty" toml:"CityCode" yaml:"CityCode,omitempty"`
	Region                     null.String `boil:"Region" json:"Region,omitempty" toml:"Region" yaml:"Region,omitempty"`
	CreditControlArea          null.String `boil:"CreditControlArea" json:"CreditControlArea,omitempty" toml:"CreditControlArea" yaml:"CreditControlArea,omitempty"`
	OverallBillingStatus       null.String `boil:"OverallBillingStatus" json:"OverallBillingStatus,omitempty" toml:"OverallBillingStatus" yaml:"OverallBillingStatus,omitempty"`
	AccountingPostingStatus    null.String `boil:"AccountingPostingStatus" json:"AccountingPostingStatus,omitempty" toml:"AccountingPostingStatus" yaml:"AccountingPostingStatus,omitempty"`
	AccountingTransferStatus   null.String `boil:"AccountingTransferStatus" json:"AccountingTransferStatus,omitempty" toml:"AccountingTransferStatus" yaml:"AccountingTransferStatus,omitempty"`
	InvoiceListStatus          null.String `boil:"InvoiceListStatus" json:"InvoiceListStatus,omitempty" toml:"InvoiceListStatus" yaml:"InvoiceListStatus,omitempty"`
	BillingDocumentListType    null.String `boil:"BillingDocumentListType" json:"BillingDocumentListType,omitempty" toml:"BillingDocumentListType" yaml:"BillingDocumentListType,omitempty"`
	BillingDocumentListDate    null.String `boil:"BillingDocumentListDate" json:"BillingDocumentListDate,omitempty" toml:"BillingDocumentListDate" yaml:"BillingDocumentListDate,omitempty"`

	R *sapBillingDocumentHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBillingDocumentHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBillingDocumentHeaderDatumColumns = struct {
	BillingDocument            string
	BillingDocumentType        string
	SDDocumentCategory         string
	BillingDocumentCategory    string
	CreationDate               string
	LastChangeDate             string
	SalesOrganization          string
	DistributionChannel        string
	Division                   string
	BillingDocumentDate        string
	BillingDocumentIsCancelled string
	CancelledBillingDocument   string
	IsExportDelivery           string
	TotalNetAmount             string
	TransactionCurrency        string
	TaxAmount                  string
	TotalGrossAmount           string
	CustomerPriceGroup         string
	IncotermsClassification    string
	CustomerPaymentTerms       string
	PaymentMethod              string
	CompanyCode                string
	AccountingDocument         string
	ExchangeRateDate           string
	ExchangeRateType           string
	DocumentReferenceID        string
	SoldToParty                string
	PartnerCompany             string
	PurchaseOrderByCustomer    string
	CustomerGroup              string
	Country                    string
	CityCode                   string
	Region                     string
	CreditControlArea          string
	OverallBillingStatus       string
	AccountingPostingStatus    string
	AccountingTransferStatus   string
	InvoiceListStatus          string
	BillingDocumentListType    string
	BillingDocumentListDate    string
}{
	BillingDocument:            "BillingDocument",
	BillingDocumentType:        "BillingDocumentType",
	SDDocumentCategory:         "SDDocumentCategory",
	BillingDocumentCategory:    "BillingDocumentCategory",
	CreationDate:               "CreationDate",
	LastChangeDate:             "LastChangeDate",
	SalesOrganization:          "SalesOrganization",
	DistributionChannel:        "DistributionChannel",
	Division:                   "Division",
	BillingDocumentDate:        "BillingDocumentDate",
	BillingDocumentIsCancelled: "BillingDocumentIsCancelled",
	CancelledBillingDocument:   "CancelledBillingDocument",
	IsExportDelivery:           "IsExportDelivery",
	TotalNetAmount:             "TotalNetAmount",
	TransactionCurrency:        "TransactionCurrency",
	TaxAmount:                  "TaxAmount",
	TotalGrossAmount:           "TotalGrossAmount",
	CustomerPriceGroup:         "CustomerPriceGroup",
	IncotermsClassification:    "IncotermsClassification",
	CustomerPaymentTerms:       "CustomerPaymentTerms",
	PaymentMethod:              "PaymentMethod",
	CompanyCode:                "CompanyCode",
	AccountingDocument:         "AccountingDocument",
	ExchangeRateDate:           "ExchangeRateDate",
	ExchangeRateType:           "ExchangeRateType",
	DocumentReferenceID:        "DocumentReferenceID",
	SoldToParty:                "SoldToParty",
	PartnerCompany:             "PartnerCompany",
	PurchaseOrderByCustomer:    "PurchaseOrderByCustomer",
	CustomerGroup:              "CustomerGroup",
	Country:                    "Country",
	CityCode:                   "CityCode",
	Region:                     "Region",
	CreditControlArea:          "CreditControlArea",
	OverallBillingStatus:       "OverallBillingStatus",
	AccountingPostingStatus:    "AccountingPostingStatus",
	AccountingTransferStatus:   "AccountingTransferStatus",
	InvoiceListStatus:          "InvoiceListStatus",
	BillingDocumentListType:    "BillingDocumentListType",
	BillingDocumentListDate:    "BillingDocumentListDate",
}

var SapBillingDocumentHeaderDatumTableColumns = struct {
	BillingDocument            string
	BillingDocumentType        string
	SDDocumentCategory         string
	BillingDocumentCategory    string
	CreationDate               string
	LastChangeDate             string
	SalesOrganization          string
	DistributionChannel        string
	Division                   string
	BillingDocumentDate        string
	BillingDocumentIsCancelled string
	CancelledBillingDocument   string
	IsExportDelivery           string
	TotalNetAmount             string
	TransactionCurrency        string
	TaxAmount                  string
	TotalGrossAmount           string
	CustomerPriceGroup         string
	IncotermsClassification    string
	CustomerPaymentTerms       string
	PaymentMethod              string
	CompanyCode                string
	AccountingDocument         string
	ExchangeRateDate           string
	ExchangeRateType           string
	DocumentReferenceID        string
	SoldToParty                string
	PartnerCompany             string
	PurchaseOrderByCustomer    string
	CustomerGroup              string
	Country                    string
	CityCode                   string
	Region                     string
	CreditControlArea          string
	OverallBillingStatus       string
	AccountingPostingStatus    string
	AccountingTransferStatus   string
	InvoiceListStatus          string
	BillingDocumentListType    string
	BillingDocumentListDate    string
}{
	BillingDocument:            "sap_billing_document_header_data.BillingDocument",
	BillingDocumentType:        "sap_billing_document_header_data.BillingDocumentType",
	SDDocumentCategory:         "sap_billing_document_header_data.SDDocumentCategory",
	BillingDocumentCategory:    "sap_billing_document_header_data.BillingDocumentCategory",
	CreationDate:               "sap_billing_document_header_data.CreationDate",
	LastChangeDate:             "sap_billing_document_header_data.LastChangeDate",
	SalesOrganization:          "sap_billing_document_header_data.SalesOrganization",
	DistributionChannel:        "sap_billing_document_header_data.DistributionChannel",
	Division:                   "sap_billing_document_header_data.Division",
	BillingDocumentDate:        "sap_billing_document_header_data.BillingDocumentDate",
	BillingDocumentIsCancelled: "sap_billing_document_header_data.BillingDocumentIsCancelled",
	CancelledBillingDocument:   "sap_billing_document_header_data.CancelledBillingDocument",
	IsExportDelivery:           "sap_billing_document_header_data.IsExportDelivery",
	TotalNetAmount:             "sap_billing_document_header_data.TotalNetAmount",
	TransactionCurrency:        "sap_billing_document_header_data.TransactionCurrency",
	TaxAmount:                  "sap_billing_document_header_data.TaxAmount",
	TotalGrossAmount:           "sap_billing_document_header_data.TotalGrossAmount",
	CustomerPriceGroup:         "sap_billing_document_header_data.CustomerPriceGroup",
	IncotermsClassification:    "sap_billing_document_header_data.IncotermsClassification",
	CustomerPaymentTerms:       "sap_billing_document_header_data.CustomerPaymentTerms",
	PaymentMethod:              "sap_billing_document_header_data.PaymentMethod",
	CompanyCode:                "sap_billing_document_header_data.CompanyCode",
	AccountingDocument:         "sap_billing_document_header_data.AccountingDocument",
	ExchangeRateDate:           "sap_billing_document_header_data.ExchangeRateDate",
	ExchangeRateType:           "sap_billing_document_header_data.ExchangeRateType",
	DocumentReferenceID:        "sap_billing_document_header_data.DocumentReferenceID",
	SoldToParty:                "sap_billing_document_header_data.SoldToParty",
	PartnerCompany:             "sap_billing_document_header_data.PartnerCompany",
	PurchaseOrderByCustomer:    "sap_billing_document_header_data.PurchaseOrderByCustomer",
	CustomerGroup:              "sap_billing_document_header_data.CustomerGroup",
	Country:                    "sap_billing_document_header_data.Country",
	CityCode:                   "sap_billing_document_header_data.CityCode",
	Region:                     "sap_billing_document_header_data.Region",
	CreditControlArea:          "sap_billing_document_header_data.CreditControlArea",
	OverallBillingStatus:       "sap_billing_document_header_data.OverallBillingStatus",
	AccountingPostingStatus:    "sap_billing_document_header_data.AccountingPostingStatus",
	AccountingTransferStatus:   "sap_billing_document_header_data.AccountingTransferStatus",
	InvoiceListStatus:          "sap_billing_document_header_data.InvoiceListStatus",
	BillingDocumentListType:    "sap_billing_document_header_data.BillingDocumentListType",
	BillingDocumentListDate:    "sap_billing_document_header_data.BillingDocumentListDate",
}

// Generated where

var SapBillingDocumentHeaderDatumWhere = struct {
	BillingDocument            whereHelperstring
	BillingDocumentType        whereHelpernull_String
	SDDocumentCategory         whereHelpernull_String
	BillingDocumentCategory    whereHelpernull_String
	CreationDate               whereHelpernull_String
	LastChangeDate             whereHelpernull_String
	SalesOrganization          whereHelpernull_String
	DistributionChannel        whereHelpernull_String
	Division                   whereHelpernull_String
	BillingDocumentDate        whereHelpernull_String
	BillingDocumentIsCancelled whereHelpernull_Bool
	CancelledBillingDocument   whereHelpernull_String
	IsExportDelivery           whereHelpernull_String
	TotalNetAmount             whereHelpernull_String
	TransactionCurrency        whereHelpernull_String
	TaxAmount                  whereHelpernull_String
	TotalGrossAmount           whereHelpernull_String
	CustomerPriceGroup         whereHelpernull_String
	IncotermsClassification    whereHelpernull_String
	CustomerPaymentTerms       whereHelpernull_String
	PaymentMethod              whereHelpernull_String
	CompanyCode                whereHelpernull_String
	AccountingDocument         whereHelpernull_String
	ExchangeRateDate           whereHelpernull_String
	ExchangeRateType           whereHelpernull_String
	DocumentReferenceID        whereHelpernull_String
	SoldToParty                whereHelpernull_String
	PartnerCompany             whereHelpernull_String
	PurchaseOrderByCustomer    whereHelpernull_String
	CustomerGroup              whereHelpernull_String
	Country                    whereHelpernull_String
	CityCode                   whereHelpernull_String
	Region                     whereHelpernull_String
	CreditControlArea          whereHelpernull_String
	OverallBillingStatus       whereHelpernull_String
	AccountingPostingStatus    whereHelpernull_String
	AccountingTransferStatus   whereHelpernull_String
	InvoiceListStatus          whereHelpernull_String
	BillingDocumentListType    whereHelpernull_String
	BillingDocumentListDate    whereHelpernull_String
}{
	BillingDocument:            whereHelperstring{field: "`sap_billing_document_header_data`.`BillingDocument`"},
	BillingDocumentType:        whereHelpernull_String{field: "`sap_billing_document_header_data`.`BillingDocumentType`"},
	SDDocumentCategory:         whereHelpernull_String{field: "`sap_billing_document_header_data`.`SDDocumentCategory`"},
	BillingDocumentCategory:    whereHelpernull_String{field: "`sap_billing_document_header_data`.`BillingDocumentCategory`"},
	CreationDate:               whereHelpernull_String{field: "`sap_billing_document_header_data`.`CreationDate`"},
	LastChangeDate:             whereHelpernull_String{field: "`sap_billing_document_header_data`.`LastChangeDate`"},
	SalesOrganization:          whereHelpernull_String{field: "`sap_billing_document_header_data`.`SalesOrganization`"},
	DistributionChannel:        whereHelpernull_String{field: "`sap_billing_document_header_data`.`DistributionChannel`"},
	Division:                   whereHelpernull_String{field: "`sap_billing_document_header_data`.`Division`"},
	BillingDocumentDate:        whereHelpernull_String{field: "`sap_billing_document_header_data`.`BillingDocumentDate`"},
	BillingDocumentIsCancelled: whereHelpernull_Bool{field: "`sap_billing_document_header_data`.`BillingDocumentIsCancelled`"},
	CancelledBillingDocument:   whereHelpernull_String{field: "`sap_billing_document_header_data`.`CancelledBillingDocument`"},
	IsExportDelivery:           whereHelpernull_String{field: "`sap_billing_document_header_data`.`IsExportDelivery`"},
	TotalNetAmount:             whereHelpernull_String{field: "`sap_billing_document_header_data`.`TotalNetAmount`"},
	TransactionCurrency:        whereHelpernull_String{field: "`sap_billing_document_header_data`.`TransactionCurrency`"},
	TaxAmount:                  whereHelpernull_String{field: "`sap_billing_document_header_data`.`TaxAmount`"},
	TotalGrossAmount:           whereHelpernull_String{field: "`sap_billing_document_header_data`.`TotalGrossAmount`"},
	CustomerPriceGroup:         whereHelpernull_String{field: "`sap_billing_document_header_data`.`CustomerPriceGroup`"},
	IncotermsClassification:    whereHelpernull_String{field: "`sap_billing_document_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:       whereHelpernull_String{field: "`sap_billing_document_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:              whereHelpernull_String{field: "`sap_billing_document_header_data`.`PaymentMethod`"},
	CompanyCode:                whereHelpernull_String{field: "`sap_billing_document_header_data`.`CompanyCode`"},
	AccountingDocument:         whereHelpernull_String{field: "`sap_billing_document_header_data`.`AccountingDocument`"},
	ExchangeRateDate:           whereHelpernull_String{field: "`sap_billing_document_header_data`.`ExchangeRateDate`"},
	ExchangeRateType:           whereHelpernull_String{field: "`sap_billing_document_header_data`.`ExchangeRateType`"},
	DocumentReferenceID:        whereHelpernull_String{field: "`sap_billing_document_header_data`.`DocumentReferenceID`"},
	SoldToParty:                whereHelpernull_String{field: "`sap_billing_document_header_data`.`SoldToParty`"},
	PartnerCompany:             whereHelpernull_String{field: "`sap_billing_document_header_data`.`PartnerCompany`"},
	PurchaseOrderByCustomer:    whereHelpernull_String{field: "`sap_billing_document_header_data`.`PurchaseOrderByCustomer`"},
	CustomerGroup:              whereHelpernull_String{field: "`sap_billing_document_header_data`.`CustomerGroup`"},
	Country:                    whereHelpernull_String{field: "`sap_billing_document_header_data`.`Country`"},
	CityCode:                   whereHelpernull_String{field: "`sap_billing_document_header_data`.`CityCode`"},
	Region:                     whereHelpernull_String{field: "`sap_billing_document_header_data`.`Region`"},
	CreditControlArea:          whereHelpernull_String{field: "`sap_billing_document_header_data`.`CreditControlArea`"},
	OverallBillingStatus:       whereHelpernull_String{field: "`sap_billing_document_header_data`.`OverallBillingStatus`"},
	AccountingPostingStatus:    whereHelpernull_String{field: "`sap_billing_document_header_data`.`AccountingPostingStatus`"},
	AccountingTransferStatus:   whereHelpernull_String{field: "`sap_billing_document_header_data`.`AccountingTransferStatus`"},
	InvoiceListStatus:          whereHelpernull_String{field: "`sap_billing_document_header_data`.`InvoiceListStatus`"},
	BillingDocumentListType:    whereHelpernull_String{field: "`sap_billing_document_header_data`.`BillingDocumentListType`"},
	BillingDocumentListDate:    whereHelpernull_String{field: "`sap_billing_document_header_data`.`BillingDocumentListDate`"},
}

// SapBillingDocumentHeaderDatumRels is where relationship names are stored.
var SapBillingDocumentHeaderDatumRels = struct {
	BillingDocumentSapBillingDocumentHeaderPartnerData      string
	BillingDocumentSapBillingDocumentItemData               string
	BillingDocumentSapBillingDocumentItemPartnerData        string
	BillingDocumentSapBillingDocumentItemPricingElementData string
}{
	BillingDocumentSapBillingDocumentHeaderPartnerData:      "BillingDocumentSapBillingDocumentHeaderPartnerData",
	BillingDocumentSapBillingDocumentItemData:               "BillingDocumentSapBillingDocumentItemData",
	BillingDocumentSapBillingDocumentItemPartnerData:        "BillingDocumentSapBillingDocumentItemPartnerData",
	BillingDocumentSapBillingDocumentItemPricingElementData: "BillingDocumentSapBillingDocumentItemPricingElementData",
}

// sapBillingDocumentHeaderDatumR is where relationships are stored.
type sapBillingDocumentHeaderDatumR struct {
	BillingDocumentSapBillingDocumentHeaderPartnerData      SapBillingDocumentHeaderPartnerDatumSlice      `boil:"BillingDocumentSapBillingDocumentHeaderPartnerData" json:"BillingDocumentSapBillingDocumentHeaderPartnerData" toml:"BillingDocumentSapBillingDocumentHeaderPartnerData" yaml:"BillingDocumentSapBillingDocumentHeaderPartnerData"`
	BillingDocumentSapBillingDocumentItemData               SapBillingDocumentItemDatumSlice               `boil:"BillingDocumentSapBillingDocumentItemData" json:"BillingDocumentSapBillingDocumentItemData" toml:"BillingDocumentSapBillingDocumentItemData" yaml:"BillingDocumentSapBillingDocumentItemData"`
	BillingDocumentSapBillingDocumentItemPartnerData        SapBillingDocumentItemPartnerDatumSlice        `boil:"BillingDocumentSapBillingDocumentItemPartnerData" json:"BillingDocumentSapBillingDocumentItemPartnerData" toml:"BillingDocumentSapBillingDocumentItemPartnerData" yaml:"BillingDocumentSapBillingDocumentItemPartnerData"`
	BillingDocumentSapBillingDocumentItemPricingElementData SapBillingDocumentItemPricingElementDatumSlice `boil:"BillingDocumentSapBillingDocumentItemPricingElementData" json:"BillingDocumentSapBillingDocumentItemPricingElementData" toml:"BillingDocumentSapBillingDocumentItemPricingElementData" yaml:"BillingDocumentSapBillingDocumentItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapBillingDocumentHeaderDatumR) NewStruct() *sapBillingDocumentHeaderDatumR {
	return &sapBillingDocumentHeaderDatumR{}
}

// sapBillingDocumentHeaderDatumL is where Load methods for each relationship are stored.
type sapBillingDocumentHeaderDatumL struct{}

var (
	sapBillingDocumentHeaderDatumAllColumns            = []string{"BillingDocument", "BillingDocumentType", "SDDocumentCategory", "BillingDocumentCategory", "CreationDate", "LastChangeDate", "SalesOrganization", "DistributionChannel", "Division", "BillingDocumentDate", "BillingDocumentIsCancelled", "CancelledBillingDocument", "IsExportDelivery", "TotalNetAmount", "TransactionCurrency", "TaxAmount", "TotalGrossAmount", "CustomerPriceGroup", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "CompanyCode", "AccountingDocument", "ExchangeRateDate", "ExchangeRateType", "DocumentReferenceID", "SoldToParty", "PartnerCompany", "PurchaseOrderByCustomer", "CustomerGroup", "Country", "CityCode", "Region", "CreditControlArea", "OverallBillingStatus", "AccountingPostingStatus", "AccountingTransferStatus", "InvoiceListStatus", "BillingDocumentListType", "BillingDocumentListDate"}
	sapBillingDocumentHeaderDatumColumnsWithoutDefault = []string{"BillingDocument", "BillingDocumentType", "SDDocumentCategory", "BillingDocumentCategory", "CreationDate", "LastChangeDate", "SalesOrganization", "DistributionChannel", "Division", "BillingDocumentDate", "BillingDocumentIsCancelled", "CancelledBillingDocument", "IsExportDelivery", "TotalNetAmount", "TransactionCurrency", "TaxAmount", "TotalGrossAmount", "CustomerPriceGroup", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "CompanyCode", "AccountingDocument", "ExchangeRateDate", "ExchangeRateType", "DocumentReferenceID", "SoldToParty", "PartnerCompany", "PurchaseOrderByCustomer", "CustomerGroup", "Country", "CityCode", "Region", "CreditControlArea", "OverallBillingStatus", "AccountingPostingStatus", "AccountingTransferStatus", "InvoiceListStatus", "BillingDocumentListType", "BillingDocumentListDate"}
	sapBillingDocumentHeaderDatumColumnsWithDefault    = []string{}
	sapBillingDocumentHeaderDatumPrimaryKeyColumns     = []string{"BillingDocument"}
	sapBillingDocumentHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapBillingDocumentHeaderDatumSlice is an alias for a slice of pointers to SapBillingDocumentHeaderDatum.
	// This should almost always be used instead of []SapBillingDocumentHeaderDatum.
	SapBillingDocumentHeaderDatumSlice []*SapBillingDocumentHeaderDatum
	// SapBillingDocumentHeaderDatumHook is the signature for custom SapBillingDocumentHeaderDatum hook methods
	SapBillingDocumentHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapBillingDocumentHeaderDatum) error

	sapBillingDocumentHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBillingDocumentHeaderDatumType                 = reflect.TypeOf(&SapBillingDocumentHeaderDatum{})
	sapBillingDocumentHeaderDatumMapping              = queries.MakeStructMapping(sapBillingDocumentHeaderDatumType)
	sapBillingDocumentHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, sapBillingDocumentHeaderDatumPrimaryKeyColumns)
	sapBillingDocumentHeaderDatumInsertCacheMut       sync.RWMutex
	sapBillingDocumentHeaderDatumInsertCache          = make(map[string]insertCache)
	sapBillingDocumentHeaderDatumUpdateCacheMut       sync.RWMutex
	sapBillingDocumentHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapBillingDocumentHeaderDatumUpsertCacheMut       sync.RWMutex
	sapBillingDocumentHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBillingDocumentHeaderDatumAfterSelectHooks []SapBillingDocumentHeaderDatumHook

var sapBillingDocumentHeaderDatumBeforeInsertHooks []SapBillingDocumentHeaderDatumHook
var sapBillingDocumentHeaderDatumAfterInsertHooks []SapBillingDocumentHeaderDatumHook

var sapBillingDocumentHeaderDatumBeforeUpdateHooks []SapBillingDocumentHeaderDatumHook
var sapBillingDocumentHeaderDatumAfterUpdateHooks []SapBillingDocumentHeaderDatumHook

var sapBillingDocumentHeaderDatumBeforeDeleteHooks []SapBillingDocumentHeaderDatumHook
var sapBillingDocumentHeaderDatumAfterDeleteHooks []SapBillingDocumentHeaderDatumHook

var sapBillingDocumentHeaderDatumBeforeUpsertHooks []SapBillingDocumentHeaderDatumHook
var sapBillingDocumentHeaderDatumAfterUpsertHooks []SapBillingDocumentHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBillingDocumentHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBillingDocumentHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBillingDocumentHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBillingDocumentHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBillingDocumentHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBillingDocumentHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBillingDocumentHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBillingDocumentHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBillingDocumentHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBillingDocumentHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBillingDocumentHeaderDatumHook registers your hook function for all future operations.
func AddSapBillingDocumentHeaderDatumHook(hookPoint boil.HookPoint, sapBillingDocumentHeaderDatumHook SapBillingDocumentHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBillingDocumentHeaderDatumAfterSelectHooks = append(sapBillingDocumentHeaderDatumAfterSelectHooks, sapBillingDocumentHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapBillingDocumentHeaderDatumBeforeInsertHooks = append(sapBillingDocumentHeaderDatumBeforeInsertHooks, sapBillingDocumentHeaderDatumHook)
	case boil.AfterInsertHook:
		sapBillingDocumentHeaderDatumAfterInsertHooks = append(sapBillingDocumentHeaderDatumAfterInsertHooks, sapBillingDocumentHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapBillingDocumentHeaderDatumBeforeUpdateHooks = append(sapBillingDocumentHeaderDatumBeforeUpdateHooks, sapBillingDocumentHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapBillingDocumentHeaderDatumAfterUpdateHooks = append(sapBillingDocumentHeaderDatumAfterUpdateHooks, sapBillingDocumentHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapBillingDocumentHeaderDatumBeforeDeleteHooks = append(sapBillingDocumentHeaderDatumBeforeDeleteHooks, sapBillingDocumentHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapBillingDocumentHeaderDatumAfterDeleteHooks = append(sapBillingDocumentHeaderDatumAfterDeleteHooks, sapBillingDocumentHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapBillingDocumentHeaderDatumBeforeUpsertHooks = append(sapBillingDocumentHeaderDatumBeforeUpsertHooks, sapBillingDocumentHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapBillingDocumentHeaderDatumAfterUpsertHooks = append(sapBillingDocumentHeaderDatumAfterUpsertHooks, sapBillingDocumentHeaderDatumHook)
	}
}

// One returns a single sapBillingDocumentHeaderDatum record from the query.
func (q sapBillingDocumentHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBillingDocumentHeaderDatum, error) {
	o := &SapBillingDocumentHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_billing_document_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBillingDocumentHeaderDatum records from the query.
func (q sapBillingDocumentHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBillingDocumentHeaderDatumSlice, error) {
	var o []*SapBillingDocumentHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBillingDocumentHeaderDatum slice")
	}

	if len(sapBillingDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBillingDocumentHeaderDatum records in the query.
func (q sapBillingDocumentHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_billing_document_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBillingDocumentHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_billing_document_header_data exists")
	}

	return count > 0, nil
}

// BillingDocumentSapBillingDocumentHeaderPartnerData retrieves all the sap_billing_document_header_partner_datum's SapBillingDocumentHeaderPartnerData with an executor via BillingDocument column.
func (o *SapBillingDocumentHeaderDatum) BillingDocumentSapBillingDocumentHeaderPartnerData(mods ...qm.QueryMod) sapBillingDocumentHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_billing_document_header_partner_data`.`BillingDocument`=?", o.BillingDocument),
	)

	query := SapBillingDocumentHeaderPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_billing_document_header_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_billing_document_header_partner_data`.*"})
	}

	return query
}

// BillingDocumentSapBillingDocumentItemData retrieves all the sap_billing_document_item_datum's SapBillingDocumentItemData with an executor via BillingDocument column.
func (o *SapBillingDocumentHeaderDatum) BillingDocumentSapBillingDocumentItemData(mods ...qm.QueryMod) sapBillingDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_billing_document_item_data`.`BillingDocument`=?", o.BillingDocument),
	)

	query := SapBillingDocumentItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_billing_document_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_billing_document_item_data`.*"})
	}

	return query
}

// BillingDocumentSapBillingDocumentItemPartnerData retrieves all the sap_billing_document_item_partner_datum's SapBillingDocumentItemPartnerData with an executor via BillingDocument column.
func (o *SapBillingDocumentHeaderDatum) BillingDocumentSapBillingDocumentItemPartnerData(mods ...qm.QueryMod) sapBillingDocumentItemPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_billing_document_item_partner_data`.`BillingDocument`=?", o.BillingDocument),
	)

	query := SapBillingDocumentItemPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_billing_document_item_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_billing_document_item_partner_data`.*"})
	}

	return query
}

// BillingDocumentSapBillingDocumentItemPricingElementData retrieves all the sap_billing_document_item_pricing_element_datum's SapBillingDocumentItemPricingElementData with an executor via BillingDocument column.
func (o *SapBillingDocumentHeaderDatum) BillingDocumentSapBillingDocumentItemPricingElementData(mods ...qm.QueryMod) sapBillingDocumentItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_billing_document_item_pricing_element_data`.`BillingDocument`=?", o.BillingDocument),
	)

	query := SapBillingDocumentItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_billing_document_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_billing_document_item_pricing_element_data`.*"})
	}

	return query
}

// LoadBillingDocumentSapBillingDocumentHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBillingDocumentHeaderDatumL) LoadBillingDocumentSapBillingDocumentHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillingDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillingDocumentHeaderDatum
	var object *SapBillingDocumentHeaderDatum

	if singular {
		object = maybeSapBillingDocumentHeaderDatum.(*SapBillingDocumentHeaderDatum)
	} else {
		slice = *maybeSapBillingDocumentHeaderDatum.(*[]*SapBillingDocumentHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillingDocumentHeaderDatumR{}
		}
		args = append(args, object.BillingDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillingDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillingDocument {
					continue Outer
				}
			}

			args = append(args, obj.BillingDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_billing_document_header_partner_data`),
		qm.WhereIn(`sap_billing_document_header_partner_data.BillingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_billing_document_header_partner_data")
	}

	var resultSlice []*SapBillingDocumentHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_billing_document_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_billing_document_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_billing_document_header_partner_data")
	}

	if len(sapBillingDocumentHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillingDocumentSapBillingDocumentHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBillingDocumentHeaderPartnerDatumR{}
			}
			foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillingDocument == foreign.BillingDocument {
				local.R.BillingDocumentSapBillingDocumentHeaderPartnerData = append(local.R.BillingDocumentSapBillingDocumentHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBillingDocumentHeaderPartnerDatumR{}
				}
				foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBillingDocumentSapBillingDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBillingDocumentHeaderDatumL) LoadBillingDocumentSapBillingDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillingDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillingDocumentHeaderDatum
	var object *SapBillingDocumentHeaderDatum

	if singular {
		object = maybeSapBillingDocumentHeaderDatum.(*SapBillingDocumentHeaderDatum)
	} else {
		slice = *maybeSapBillingDocumentHeaderDatum.(*[]*SapBillingDocumentHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillingDocumentHeaderDatumR{}
		}
		args = append(args, object.BillingDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillingDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillingDocument {
					continue Outer
				}
			}

			args = append(args, obj.BillingDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_billing_document_item_data`),
		qm.WhereIn(`sap_billing_document_item_data.BillingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_billing_document_item_data")
	}

	var resultSlice []*SapBillingDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_billing_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_billing_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_billing_document_item_data")
	}

	if len(sapBillingDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillingDocumentSapBillingDocumentItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBillingDocumentItemDatumR{}
			}
			foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillingDocument == foreign.BillingDocument {
				local.R.BillingDocumentSapBillingDocumentItemData = append(local.R.BillingDocumentSapBillingDocumentItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBillingDocumentItemDatumR{}
				}
				foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBillingDocumentSapBillingDocumentItemPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBillingDocumentHeaderDatumL) LoadBillingDocumentSapBillingDocumentItemPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillingDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillingDocumentHeaderDatum
	var object *SapBillingDocumentHeaderDatum

	if singular {
		object = maybeSapBillingDocumentHeaderDatum.(*SapBillingDocumentHeaderDatum)
	} else {
		slice = *maybeSapBillingDocumentHeaderDatum.(*[]*SapBillingDocumentHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillingDocumentHeaderDatumR{}
		}
		args = append(args, object.BillingDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillingDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillingDocument {
					continue Outer
				}
			}

			args = append(args, obj.BillingDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_billing_document_item_partner_data`),
		qm.WhereIn(`sap_billing_document_item_partner_data.BillingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_billing_document_item_partner_data")
	}

	var resultSlice []*SapBillingDocumentItemPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_billing_document_item_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_billing_document_item_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_billing_document_item_partner_data")
	}

	if len(sapBillingDocumentItemPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillingDocumentSapBillingDocumentItemPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBillingDocumentItemPartnerDatumR{}
			}
			foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillingDocument == foreign.BillingDocument {
				local.R.BillingDocumentSapBillingDocumentItemPartnerData = append(local.R.BillingDocumentSapBillingDocumentItemPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBillingDocumentItemPartnerDatumR{}
				}
				foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBillingDocumentSapBillingDocumentItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBillingDocumentHeaderDatumL) LoadBillingDocumentSapBillingDocumentItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBillingDocumentHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBillingDocumentHeaderDatum
	var object *SapBillingDocumentHeaderDatum

	if singular {
		object = maybeSapBillingDocumentHeaderDatum.(*SapBillingDocumentHeaderDatum)
	} else {
		slice = *maybeSapBillingDocumentHeaderDatum.(*[]*SapBillingDocumentHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBillingDocumentHeaderDatumR{}
		}
		args = append(args, object.BillingDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBillingDocumentHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillingDocument {
					continue Outer
				}
			}

			args = append(args, obj.BillingDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_billing_document_item_pricing_element_data`),
		qm.WhereIn(`sap_billing_document_item_pricing_element_data.BillingDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_billing_document_item_pricing_element_data")
	}

	var resultSlice []*SapBillingDocumentItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_billing_document_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_billing_document_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_billing_document_item_pricing_element_data")
	}

	if len(sapBillingDocumentItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillingDocumentSapBillingDocumentItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBillingDocumentItemPricingElementDatumR{}
			}
			foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillingDocument == foreign.BillingDocument {
				local.R.BillingDocumentSapBillingDocumentItemPricingElementData = append(local.R.BillingDocumentSapBillingDocumentItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBillingDocumentItemPricingElementDatumR{}
				}
				foreign.R.BillingDocumentSapBillingDocumentHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddBillingDocumentSapBillingDocumentHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_billing_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.BillingDocumentSapBillingDocumentHeaderPartnerData.
// Sets related.R.BillingDocumentSapBillingDocumentHeaderDatum appropriately.
func (o *SapBillingDocumentHeaderDatum) AddBillingDocumentSapBillingDocumentHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBillingDocumentHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillingDocument = o.BillingDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_billing_document_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillingDocument"}),
				strmangle.WhereClause("`", "`", 0, sapBillingDocumentHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillingDocument, rel.BillingDocument, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillingDocument = o.BillingDocument
		}
	}

	if o.R == nil {
		o.R = &sapBillingDocumentHeaderDatumR{
			BillingDocumentSapBillingDocumentHeaderPartnerData: related,
		}
	} else {
		o.R.BillingDocumentSapBillingDocumentHeaderPartnerData = append(o.R.BillingDocumentSapBillingDocumentHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBillingDocumentHeaderPartnerDatumR{
				BillingDocumentSapBillingDocumentHeaderDatum: o,
			}
		} else {
			rel.R.BillingDocumentSapBillingDocumentHeaderDatum = o
		}
	}
	return nil
}

// AddBillingDocumentSapBillingDocumentItemData adds the given related objects to the existing relationships
// of the sap_billing_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.BillingDocumentSapBillingDocumentItemData.
// Sets related.R.BillingDocumentSapBillingDocumentHeaderDatum appropriately.
func (o *SapBillingDocumentHeaderDatum) AddBillingDocumentSapBillingDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBillingDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillingDocument = o.BillingDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_billing_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillingDocument"}),
				strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillingDocument, rel.BillingDocument, rel.BillingDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillingDocument = o.BillingDocument
		}
	}

	if o.R == nil {
		o.R = &sapBillingDocumentHeaderDatumR{
			BillingDocumentSapBillingDocumentItemData: related,
		}
	} else {
		o.R.BillingDocumentSapBillingDocumentItemData = append(o.R.BillingDocumentSapBillingDocumentItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBillingDocumentItemDatumR{
				BillingDocumentSapBillingDocumentHeaderDatum: o,
			}
		} else {
			rel.R.BillingDocumentSapBillingDocumentHeaderDatum = o
		}
	}
	return nil
}

// AddBillingDocumentSapBillingDocumentItemPartnerData adds the given related objects to the existing relationships
// of the sap_billing_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.BillingDocumentSapBillingDocumentItemPartnerData.
// Sets related.R.BillingDocumentSapBillingDocumentHeaderDatum appropriately.
func (o *SapBillingDocumentHeaderDatum) AddBillingDocumentSapBillingDocumentItemPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBillingDocumentItemPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillingDocument = o.BillingDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_billing_document_item_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillingDocument"}),
				strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillingDocument, rel.BillingDocument, rel.BillingDocumentItem, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillingDocument = o.BillingDocument
		}
	}

	if o.R == nil {
		o.R = &sapBillingDocumentHeaderDatumR{
			BillingDocumentSapBillingDocumentItemPartnerData: related,
		}
	} else {
		o.R.BillingDocumentSapBillingDocumentItemPartnerData = append(o.R.BillingDocumentSapBillingDocumentItemPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBillingDocumentItemPartnerDatumR{
				BillingDocumentSapBillingDocumentHeaderDatum: o,
			}
		} else {
			rel.R.BillingDocumentSapBillingDocumentHeaderDatum = o
		}
	}
	return nil
}

// AddBillingDocumentSapBillingDocumentItemPricingElementData adds the given related objects to the existing relationships
// of the sap_billing_document_header_datum, optionally inserting them as new records.
// Appends related to o.R.BillingDocumentSapBillingDocumentItemPricingElementData.
// Sets related.R.BillingDocumentSapBillingDocumentHeaderDatum appropriately.
func (o *SapBillingDocumentHeaderDatum) AddBillingDocumentSapBillingDocumentItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBillingDocumentItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillingDocument = o.BillingDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_billing_document_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillingDocument"}),
				strmangle.WhereClause("`", "`", 0, sapBillingDocumentItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillingDocument, rel.BillingDocument, rel.BillingDocumentItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillingDocument = o.BillingDocument
		}
	}

	if o.R == nil {
		o.R = &sapBillingDocumentHeaderDatumR{
			BillingDocumentSapBillingDocumentItemPricingElementData: related,
		}
	} else {
		o.R.BillingDocumentSapBillingDocumentItemPricingElementData = append(o.R.BillingDocumentSapBillingDocumentItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBillingDocumentItemPricingElementDatumR{
				BillingDocumentSapBillingDocumentHeaderDatum: o,
			}
		} else {
			rel.R.BillingDocumentSapBillingDocumentHeaderDatum = o
		}
	}
	return nil
}

// SapBillingDocumentHeaderData retrieves all the records using an executor.
func SapBillingDocumentHeaderData(mods ...qm.QueryMod) sapBillingDocumentHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_billing_document_header_data`"))
	return sapBillingDocumentHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapBillingDocumentHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBillingDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, billingDocument string, selectCols ...string) (*SapBillingDocumentHeaderDatum, error) {
	sapBillingDocumentHeaderDatumObj := &SapBillingDocumentHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_billing_document_header_data` where `BillingDocument`=?", sel,
	)

	q := queries.Raw(query, billingDocument)

	err := q.Bind(ctx, exec, sapBillingDocumentHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_billing_document_header_data")
	}

	if err = sapBillingDocumentHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBillingDocumentHeaderDatumObj, err
	}

	return sapBillingDocumentHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBillingDocumentHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_billing_document_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillingDocumentHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBillingDocumentHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapBillingDocumentHeaderDatumInsertCache[key]
	sapBillingDocumentHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBillingDocumentHeaderDatumAllColumns,
			sapBillingDocumentHeaderDatumColumnsWithDefault,
			sapBillingDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_billing_document_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_billing_document_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_billing_document_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBillingDocumentHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_billing_document_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillingDocument,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_billing_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapBillingDocumentHeaderDatumInsertCacheMut.Lock()
		sapBillingDocumentHeaderDatumInsertCache[key] = cache
		sapBillingDocumentHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBillingDocumentHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBillingDocumentHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBillingDocumentHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapBillingDocumentHeaderDatumUpdateCache[key]
	sapBillingDocumentHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBillingDocumentHeaderDatumAllColumns,
			sapBillingDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_billing_document_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_billing_document_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBillingDocumentHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, append(wl, sapBillingDocumentHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_billing_document_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_billing_document_header_data")
	}

	if !cached {
		sapBillingDocumentHeaderDatumUpdateCacheMut.Lock()
		sapBillingDocumentHeaderDatumUpdateCache[key] = cache
		sapBillingDocumentHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBillingDocumentHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_billing_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_billing_document_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBillingDocumentHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_billing_document_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBillingDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBillingDocumentHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapBillingDocumentHeaderDatumUniqueColumns = []string{
	"BillingDocument",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBillingDocumentHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_billing_document_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBillingDocumentHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBillingDocumentHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBillingDocumentHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapBillingDocumentHeaderDatumUpsertCache[key]
	sapBillingDocumentHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBillingDocumentHeaderDatumAllColumns,
			sapBillingDocumentHeaderDatumColumnsWithDefault,
			sapBillingDocumentHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBillingDocumentHeaderDatumAllColumns,
			sapBillingDocumentHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_billing_document_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_billing_document_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_billing_document_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_billing_document_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBillingDocumentHeaderDatumType, sapBillingDocumentHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_billing_document_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_billing_document_header_data")
	}

CacheNoHooks:
	if !cached {
		sapBillingDocumentHeaderDatumUpsertCacheMut.Lock()
		sapBillingDocumentHeaderDatumUpsertCache[key] = cache
		sapBillingDocumentHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBillingDocumentHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBillingDocumentHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBillingDocumentHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBillingDocumentHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_billing_document_header_data` WHERE `BillingDocument`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_billing_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_billing_document_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBillingDocumentHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBillingDocumentHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_billing_document_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_billing_document_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBillingDocumentHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBillingDocumentHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_billing_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBillingDocumentHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_billing_document_header_data")
	}

	if len(sapBillingDocumentHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBillingDocumentHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBillingDocumentHeaderDatum(ctx, exec, o.BillingDocument)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBillingDocumentHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBillingDocumentHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBillingDocumentHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_billing_document_header_data`.* FROM `sap_billing_document_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBillingDocumentHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBillingDocumentHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapBillingDocumentHeaderDatumExists checks if the SapBillingDocumentHeaderDatum row exists.
func SapBillingDocumentHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, billingDocument string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_billing_document_header_data` where `BillingDocument`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billingDocument)
	}
	row := exec.QueryRowContext(ctx, sql, billingDocument)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_billing_document_header_data exists")
	}

	return exists, nil
}
