// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerBankDatum is an object representing the database table.
type SapBusinessPartnerBankDatum struct {
	BusinessPartner          string      `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BankIdentification       string      `boil:"BankIdentification" json:"BankIdentification" toml:"BankIdentification" yaml:"BankIdentification"`
	BankCountryKey           null.String `boil:"BankCountryKey" json:"BankCountryKey,omitempty" toml:"BankCountryKey" yaml:"BankCountryKey,omitempty"`
	BankName                 null.String `boil:"BankName" json:"BankName,omitempty" toml:"BankName" yaml:"BankName,omitempty"`
	BankNumber               null.String `boil:"BankNumber" json:"BankNumber,omitempty" toml:"BankNumber" yaml:"BankNumber,omitempty"`
	SWIFTCode                null.String `boil:"SWIFTCode" json:"SWIFTCode,omitempty" toml:"SWIFTCode" yaml:"SWIFTCode,omitempty"`
	BankControlKey           null.String `boil:"BankControlKey" json:"BankControlKey,omitempty" toml:"BankControlKey" yaml:"BankControlKey,omitempty"`
	BankAccountHolderName    null.String `boil:"BankAccountHolderName" json:"BankAccountHolderName,omitempty" toml:"BankAccountHolderName" yaml:"BankAccountHolderName,omitempty"`
	BankAccountName          null.String `boil:"BankAccountName" json:"BankAccountName,omitempty" toml:"BankAccountName" yaml:"BankAccountName,omitempty"`
	ValidityStartDate        null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate          null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	IBAN                     null.String `boil:"IBAN" json:"IBAN,omitempty" toml:"IBAN" yaml:"IBAN,omitempty"`
	IBANValidityStartDate    null.String `boil:"IBANValidityStartDate" json:"IBANValidityStartDate,omitempty" toml:"IBANValidityStartDate" yaml:"IBANValidityStartDate,omitempty"`
	BankAccount              null.String `boil:"BankAccount" json:"BankAccount,omitempty" toml:"BankAccount" yaml:"BankAccount,omitempty"`
	BankAccountReferenceText null.String `boil:"BankAccountReferenceText" json:"BankAccountReferenceText,omitempty" toml:"BankAccountReferenceText" yaml:"BankAccountReferenceText,omitempty"`
	CollectionAuthInd        null.Bool   `boil:"CollectionAuthInd" json:"CollectionAuthInd,omitempty" toml:"CollectionAuthInd" yaml:"CollectionAuthInd,omitempty"`
	CityName                 null.String `boil:"CityName" json:"CityName,omitempty" toml:"CityName" yaml:"CityName,omitempty"`
	AuthorizationGroup       null.String `boil:"AuthorizationGroup" json:"AuthorizationGroup,omitempty" toml:"AuthorizationGroup" yaml:"AuthorizationGroup,omitempty"`

	R *sapBusinessPartnerBankDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerBankDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerBankDatumColumns = struct {
	BusinessPartner          string
	BankIdentification       string
	BankCountryKey           string
	BankName                 string
	BankNumber               string
	SWIFTCode                string
	BankControlKey           string
	BankAccountHolderName    string
	BankAccountName          string
	ValidityStartDate        string
	ValidityEndDate          string
	IBAN                     string
	IBANValidityStartDate    string
	BankAccount              string
	BankAccountReferenceText string
	CollectionAuthInd        string
	CityName                 string
	AuthorizationGroup       string
}{
	BusinessPartner:          "BusinessPartner",
	BankIdentification:       "BankIdentification",
	BankCountryKey:           "BankCountryKey",
	BankName:                 "BankName",
	BankNumber:               "BankNumber",
	SWIFTCode:                "SWIFTCode",
	BankControlKey:           "BankControlKey",
	BankAccountHolderName:    "BankAccountHolderName",
	BankAccountName:          "BankAccountName",
	ValidityStartDate:        "ValidityStartDate",
	ValidityEndDate:          "ValidityEndDate",
	IBAN:                     "IBAN",
	IBANValidityStartDate:    "IBANValidityStartDate",
	BankAccount:              "BankAccount",
	BankAccountReferenceText: "BankAccountReferenceText",
	CollectionAuthInd:        "CollectionAuthInd",
	CityName:                 "CityName",
	AuthorizationGroup:       "AuthorizationGroup",
}

var SapBusinessPartnerBankDatumTableColumns = struct {
	BusinessPartner          string
	BankIdentification       string
	BankCountryKey           string
	BankName                 string
	BankNumber               string
	SWIFTCode                string
	BankControlKey           string
	BankAccountHolderName    string
	BankAccountName          string
	ValidityStartDate        string
	ValidityEndDate          string
	IBAN                     string
	IBANValidityStartDate    string
	BankAccount              string
	BankAccountReferenceText string
	CollectionAuthInd        string
	CityName                 string
	AuthorizationGroup       string
}{
	BusinessPartner:          "sap_business_partner_bank_data.BusinessPartner",
	BankIdentification:       "sap_business_partner_bank_data.BankIdentification",
	BankCountryKey:           "sap_business_partner_bank_data.BankCountryKey",
	BankName:                 "sap_business_partner_bank_data.BankName",
	BankNumber:               "sap_business_partner_bank_data.BankNumber",
	SWIFTCode:                "sap_business_partner_bank_data.SWIFTCode",
	BankControlKey:           "sap_business_partner_bank_data.BankControlKey",
	BankAccountHolderName:    "sap_business_partner_bank_data.BankAccountHolderName",
	BankAccountName:          "sap_business_partner_bank_data.BankAccountName",
	ValidityStartDate:        "sap_business_partner_bank_data.ValidityStartDate",
	ValidityEndDate:          "sap_business_partner_bank_data.ValidityEndDate",
	IBAN:                     "sap_business_partner_bank_data.IBAN",
	IBANValidityStartDate:    "sap_business_partner_bank_data.IBANValidityStartDate",
	BankAccount:              "sap_business_partner_bank_data.BankAccount",
	BankAccountReferenceText: "sap_business_partner_bank_data.BankAccountReferenceText",
	CollectionAuthInd:        "sap_business_partner_bank_data.CollectionAuthInd",
	CityName:                 "sap_business_partner_bank_data.CityName",
	AuthorizationGroup:       "sap_business_partner_bank_data.AuthorizationGroup",
}

// Generated where

var SapBusinessPartnerBankDatumWhere = struct {
	BusinessPartner          whereHelperstring
	BankIdentification       whereHelperstring
	BankCountryKey           whereHelpernull_String
	BankName                 whereHelpernull_String
	BankNumber               whereHelpernull_String
	SWIFTCode                whereHelpernull_String
	BankControlKey           whereHelpernull_String
	BankAccountHolderName    whereHelpernull_String
	BankAccountName          whereHelpernull_String
	ValidityStartDate        whereHelpernull_String
	ValidityEndDate          whereHelpernull_String
	IBAN                     whereHelpernull_String
	IBANValidityStartDate    whereHelpernull_String
	BankAccount              whereHelpernull_String
	BankAccountReferenceText whereHelpernull_String
	CollectionAuthInd        whereHelpernull_Bool
	CityName                 whereHelpernull_String
	AuthorizationGroup       whereHelpernull_String
}{
	BusinessPartner:          whereHelperstring{field: "`sap_business_partner_bank_data`.`BusinessPartner`"},
	BankIdentification:       whereHelperstring{field: "`sap_business_partner_bank_data`.`BankIdentification`"},
	BankCountryKey:           whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankCountryKey`"},
	BankName:                 whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankName`"},
	BankNumber:               whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankNumber`"},
	SWIFTCode:                whereHelpernull_String{field: "`sap_business_partner_bank_data`.`SWIFTCode`"},
	BankControlKey:           whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankControlKey`"},
	BankAccountHolderName:    whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankAccountHolderName`"},
	BankAccountName:          whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankAccountName`"},
	ValidityStartDate:        whereHelpernull_String{field: "`sap_business_partner_bank_data`.`ValidityStartDate`"},
	ValidityEndDate:          whereHelpernull_String{field: "`sap_business_partner_bank_data`.`ValidityEndDate`"},
	IBAN:                     whereHelpernull_String{field: "`sap_business_partner_bank_data`.`IBAN`"},
	IBANValidityStartDate:    whereHelpernull_String{field: "`sap_business_partner_bank_data`.`IBANValidityStartDate`"},
	BankAccount:              whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankAccount`"},
	BankAccountReferenceText: whereHelpernull_String{field: "`sap_business_partner_bank_data`.`BankAccountReferenceText`"},
	CollectionAuthInd:        whereHelpernull_Bool{field: "`sap_business_partner_bank_data`.`CollectionAuthInd`"},
	CityName:                 whereHelpernull_String{field: "`sap_business_partner_bank_data`.`CityName`"},
	AuthorizationGroup:       whereHelpernull_String{field: "`sap_business_partner_bank_data`.`AuthorizationGroup`"},
}

// SapBusinessPartnerBankDatumRels is where relationship names are stored.
var SapBusinessPartnerBankDatumRels = struct {
	BusinessPartnerSapBusinessPartnerGeneralDatum string
}{
	BusinessPartnerSapBusinessPartnerGeneralDatum: "BusinessPartnerSapBusinessPartnerGeneralDatum",
}

// sapBusinessPartnerBankDatumR is where relationships are stored.
type sapBusinessPartnerBankDatumR struct {
	BusinessPartnerSapBusinessPartnerGeneralDatum *SapBusinessPartnerGeneralDatum `boil:"BusinessPartnerSapBusinessPartnerGeneralDatum" json:"BusinessPartnerSapBusinessPartnerGeneralDatum" toml:"BusinessPartnerSapBusinessPartnerGeneralDatum" yaml:"BusinessPartnerSapBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerBankDatumR) NewStruct() *sapBusinessPartnerBankDatumR {
	return &sapBusinessPartnerBankDatumR{}
}

// sapBusinessPartnerBankDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerBankDatumL struct{}

var (
	sapBusinessPartnerBankDatumAllColumns            = []string{"BusinessPartner", "BankIdentification", "BankCountryKey", "BankName", "BankNumber", "SWIFTCode", "BankControlKey", "BankAccountHolderName", "BankAccountName", "ValidityStartDate", "ValidityEndDate", "IBAN", "IBANValidityStartDate", "BankAccount", "BankAccountReferenceText", "CollectionAuthInd", "CityName", "AuthorizationGroup"}
	sapBusinessPartnerBankDatumColumnsWithoutDefault = []string{"BusinessPartner", "BankIdentification", "BankCountryKey", "BankName", "BankNumber", "SWIFTCode", "BankControlKey", "BankAccountHolderName", "BankAccountName", "ValidityStartDate", "ValidityEndDate", "IBAN", "IBANValidityStartDate", "BankAccount", "BankAccountReferenceText", "CollectionAuthInd", "CityName", "AuthorizationGroup"}
	sapBusinessPartnerBankDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerBankDatumPrimaryKeyColumns     = []string{"BusinessPartner", "BankIdentification"}
	sapBusinessPartnerBankDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerBankDatumSlice is an alias for a slice of pointers to SapBusinessPartnerBankDatum.
	// This should almost always be used instead of []SapBusinessPartnerBankDatum.
	SapBusinessPartnerBankDatumSlice []*SapBusinessPartnerBankDatum
	// SapBusinessPartnerBankDatumHook is the signature for custom SapBusinessPartnerBankDatum hook methods
	SapBusinessPartnerBankDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerBankDatum) error

	sapBusinessPartnerBankDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerBankDatumType                 = reflect.TypeOf(&SapBusinessPartnerBankDatum{})
	sapBusinessPartnerBankDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerBankDatumType)
	sapBusinessPartnerBankDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, sapBusinessPartnerBankDatumPrimaryKeyColumns)
	sapBusinessPartnerBankDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerBankDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerBankDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerBankDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerBankDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerBankDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerBankDatumAfterSelectHooks []SapBusinessPartnerBankDatumHook

var sapBusinessPartnerBankDatumBeforeInsertHooks []SapBusinessPartnerBankDatumHook
var sapBusinessPartnerBankDatumAfterInsertHooks []SapBusinessPartnerBankDatumHook

var sapBusinessPartnerBankDatumBeforeUpdateHooks []SapBusinessPartnerBankDatumHook
var sapBusinessPartnerBankDatumAfterUpdateHooks []SapBusinessPartnerBankDatumHook

var sapBusinessPartnerBankDatumBeforeDeleteHooks []SapBusinessPartnerBankDatumHook
var sapBusinessPartnerBankDatumAfterDeleteHooks []SapBusinessPartnerBankDatumHook

var sapBusinessPartnerBankDatumBeforeUpsertHooks []SapBusinessPartnerBankDatumHook
var sapBusinessPartnerBankDatumAfterUpsertHooks []SapBusinessPartnerBankDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerBankDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerBankDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerBankDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerBankDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerBankDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerBankDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerBankDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerBankDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerBankDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerBankDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerBankDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerBankDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerBankDatumHook SapBusinessPartnerBankDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerBankDatumAfterSelectHooks = append(sapBusinessPartnerBankDatumAfterSelectHooks, sapBusinessPartnerBankDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerBankDatumBeforeInsertHooks = append(sapBusinessPartnerBankDatumBeforeInsertHooks, sapBusinessPartnerBankDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerBankDatumAfterInsertHooks = append(sapBusinessPartnerBankDatumAfterInsertHooks, sapBusinessPartnerBankDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerBankDatumBeforeUpdateHooks = append(sapBusinessPartnerBankDatumBeforeUpdateHooks, sapBusinessPartnerBankDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerBankDatumAfterUpdateHooks = append(sapBusinessPartnerBankDatumAfterUpdateHooks, sapBusinessPartnerBankDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerBankDatumBeforeDeleteHooks = append(sapBusinessPartnerBankDatumBeforeDeleteHooks, sapBusinessPartnerBankDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerBankDatumAfterDeleteHooks = append(sapBusinessPartnerBankDatumAfterDeleteHooks, sapBusinessPartnerBankDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerBankDatumBeforeUpsertHooks = append(sapBusinessPartnerBankDatumBeforeUpsertHooks, sapBusinessPartnerBankDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerBankDatumAfterUpsertHooks = append(sapBusinessPartnerBankDatumAfterUpsertHooks, sapBusinessPartnerBankDatumHook)
	}
}

// One returns a single sapBusinessPartnerBankDatum record from the query.
func (q sapBusinessPartnerBankDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerBankDatum, error) {
	o := &SapBusinessPartnerBankDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_bank_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerBankDatum records from the query.
func (q sapBusinessPartnerBankDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerBankDatumSlice, error) {
	var o []*SapBusinessPartnerBankDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerBankDatum slice")
	}

	if len(sapBusinessPartnerBankDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerBankDatum records in the query.
func (q sapBusinessPartnerBankDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_bank_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerBankDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_bank_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerSapBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *SapBusinessPartnerBankDatum) BusinessPartnerSapBusinessPartnerGeneralDatum(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	query := SapBusinessPartnerGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_business_partner_general_data`")

	return query
}

// LoadBusinessPartnerSapBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapBusinessPartnerBankDatumL) LoadBusinessPartnerSapBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerBankDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerBankDatum
	var object *SapBusinessPartnerBankDatum

	if singular {
		object = maybeSapBusinessPartnerBankDatum.(*SapBusinessPartnerBankDatum)
	} else {
		slice = *maybeSapBusinessPartnerBankDatum.(*[]*SapBusinessPartnerBankDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerBankDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerBankDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_general_data`),
		qm.WhereIn(`sap_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerGeneralDatum")
	}

	var resultSlice []*SapBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerBankDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerSapBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerSapBusinessPartnerBankData = append(foreign.R.BusinessPartnerSapBusinessPartnerBankData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerSapBusinessPartnerBankData = append(foreign.R.BusinessPartnerSapBusinessPartnerBankData, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerSapBusinessPartnerGeneralDatum of the sapBusinessPartnerBankDatum to the related item.
// Sets o.R.BusinessPartnerSapBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerSapBusinessPartnerBankData.
func (o *SapBusinessPartnerBankDatum) SetBusinessPartnerSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_business_partner_bank_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, sapBusinessPartnerBankDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.BankIdentification}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &sapBusinessPartnerBankDatumR{
			BusinessPartnerSapBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerSapBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerGeneralDatumR{
			BusinessPartnerSapBusinessPartnerBankData: SapBusinessPartnerBankDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerSapBusinessPartnerBankData = append(related.R.BusinessPartnerSapBusinessPartnerBankData, o)
	}

	return nil
}

// SapBusinessPartnerBankData retrieves all the records using an executor.
func SapBusinessPartnerBankData(mods ...qm.QueryMod) sapBusinessPartnerBankDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_bank_data`"))
	return sapBusinessPartnerBankDatumQuery{NewQuery(mods...)}
}

// FindSapBusinessPartnerBankDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerBankDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner string, bankIdentification string, selectCols ...string) (*SapBusinessPartnerBankDatum, error) {
	sapBusinessPartnerBankDatumObj := &SapBusinessPartnerBankDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_bank_data` where `BusinessPartner`=? AND `BankIdentification`=?", sel,
	)

	q := queries.Raw(query, businessPartner, bankIdentification)

	err := q.Bind(ctx, exec, sapBusinessPartnerBankDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_bank_data")
	}

	if err = sapBusinessPartnerBankDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerBankDatumObj, err
	}

	return sapBusinessPartnerBankDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerBankDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_bank_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerBankDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerBankDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerBankDatumInsertCache[key]
	sapBusinessPartnerBankDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerBankDatumAllColumns,
			sapBusinessPartnerBankDatumColumnsWithDefault,
			sapBusinessPartnerBankDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_bank_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_bank_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_bank_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerBankDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_bank_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.BankIdentification,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_bank_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerBankDatumInsertCacheMut.Lock()
		sapBusinessPartnerBankDatumInsertCache[key] = cache
		sapBusinessPartnerBankDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerBankDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerBankDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerBankDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerBankDatumUpdateCache[key]
	sapBusinessPartnerBankDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerBankDatumAllColumns,
			sapBusinessPartnerBankDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_bank_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_bank_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerBankDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, append(wl, sapBusinessPartnerBankDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_bank_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_bank_data")
	}

	if !cached {
		sapBusinessPartnerBankDatumUpdateCacheMut.Lock()
		sapBusinessPartnerBankDatumUpdateCache[key] = cache
		sapBusinessPartnerBankDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerBankDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_bank_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_bank_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerBankDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerBankDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_bank_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerBankDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerBankDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerBankDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerBankDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerBankDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_bank_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerBankDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerBankDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerBankDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerBankDatumUpsertCache[key]
	sapBusinessPartnerBankDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerBankDatumAllColumns,
			sapBusinessPartnerBankDatumColumnsWithDefault,
			sapBusinessPartnerBankDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerBankDatumAllColumns,
			sapBusinessPartnerBankDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_bank_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_bank_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_bank_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_bank_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerBankDatumType, sapBusinessPartnerBankDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_bank_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_bank_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerBankDatumUpsertCacheMut.Lock()
		sapBusinessPartnerBankDatumUpsertCache[key] = cache
		sapBusinessPartnerBankDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerBankDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerBankDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerBankDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerBankDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_bank_data` WHERE `BusinessPartner`=? AND `BankIdentification`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_bank_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_bank_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerBankDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerBankDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_bank_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_bank_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerBankDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerBankDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerBankDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_bank_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerBankDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerBankDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_bank_data")
	}

	if len(sapBusinessPartnerBankDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerBankDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerBankDatum(ctx, exec, o.BusinessPartner, o.BankIdentification)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerBankDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerBankDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerBankDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_bank_data`.* FROM `sap_business_partner_bank_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerBankDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerBankDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerBankDatumExists checks if the SapBusinessPartnerBankDatum row exists.
func SapBusinessPartnerBankDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner string, bankIdentification string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_bank_data` where `BusinessPartner`=? AND `BankIdentification`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, bankIdentification)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, bankIdentification)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_bank_data exists")
	}

	return exists, nil
}
