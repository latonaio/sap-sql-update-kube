// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapPlannedIndependentRequirementHeaderDatum is an object representing the database table.
type SapPlannedIndependentRequirementHeaderDatum struct {
	Product                       string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                         string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	MRPArea                       string      `boil:"MRPArea" json:"MRPArea" toml:"MRPArea" yaml:"MRPArea"`
	PlndIndepRqmtType             string      `boil:"PlndIndepRqmtType" json:"PlndIndepRqmtType" toml:"PlndIndepRqmtType" yaml:"PlndIndepRqmtType"`
	PlndIndepRqmtVersion          string      `boil:"PlndIndepRqmtVersion" json:"PlndIndepRqmtVersion" toml:"PlndIndepRqmtVersion" yaml:"PlndIndepRqmtVersion"`
	RequirementPlan               string      `boil:"RequirementPlan" json:"RequirementPlan" toml:"RequirementPlan" yaml:"RequirementPlan"`
	RequirementSegment            string      `boil:"RequirementSegment" json:"RequirementSegment" toml:"RequirementSegment" yaml:"RequirementSegment"`
	UpdateMc                      null.Bool   `boil:"UpdateMc" json:"UpdateMc,omitempty" toml:"UpdateMc" yaml:"UpdateMc,omitempty"`
	ToPlndIndepRqmtItemOc         null.Bool   `boil:"ToPlndIndepRqmtItemOc" json:"ToPlndIndepRqmtItemOc,omitempty" toml:"ToPlndIndepRqmtItemOc" yaml:"ToPlndIndepRqmtItemOc,omitempty"`
	PlndIndepRqmtInternalID       null.String `boil:"PlndIndepRqmtInternalID" json:"PlndIndepRqmtInternalID,omitempty" toml:"PlndIndepRqmtInternalID" yaml:"PlndIndepRqmtInternalID,omitempty"`
	PlndIndepRqmtIsActive         null.String `boil:"PlndIndepRqmtIsActive" json:"PlndIndepRqmtIsActive,omitempty" toml:"PlndIndepRqmtIsActive" yaml:"PlndIndepRqmtIsActive,omitempty"`
	WBSElement                    null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	RequirementPlanIsExternal     null.Bool   `boil:"RequirementPlanIsExternal" json:"RequirementPlanIsExternal,omitempty" toml:"RequirementPlanIsExternal" yaml:"RequirementPlanIsExternal,omitempty"`
	PlndIndepRqmtAcctAssgmtCat    null.String `boil:"PlndIndepRqmtAcctAssgmtCat" json:"PlndIndepRqmtAcctAssgmtCat,omitempty" toml:"PlndIndepRqmtAcctAssgmtCat" yaml:"PlndIndepRqmtAcctAssgmtCat,omitempty"`
	PlndIndepRqmtLastChgdDateTime null.String `boil:"PlndIndepRqmtLastChgdDateTime" json:"PlndIndepRqmtLastChgdDateTime,omitempty" toml:"PlndIndepRqmtLastChgdDateTime" yaml:"PlndIndepRqmtLastChgdDateTime,omitempty"`

	R *sapPlannedIndependentRequirementHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapPlannedIndependentRequirementHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapPlannedIndependentRequirementHeaderDatumColumns = struct {
	Product                       string
	Plant                         string
	MRPArea                       string
	PlndIndepRqmtType             string
	PlndIndepRqmtVersion          string
	RequirementPlan               string
	RequirementSegment            string
	UpdateMc                      string
	ToPlndIndepRqmtItemOc         string
	PlndIndepRqmtInternalID       string
	PlndIndepRqmtIsActive         string
	WBSElement                    string
	RequirementPlanIsExternal     string
	PlndIndepRqmtAcctAssgmtCat    string
	PlndIndepRqmtLastChgdDateTime string
}{
	Product:                       "Product",
	Plant:                         "Plant",
	MRPArea:                       "MRPArea",
	PlndIndepRqmtType:             "PlndIndepRqmtType",
	PlndIndepRqmtVersion:          "PlndIndepRqmtVersion",
	RequirementPlan:               "RequirementPlan",
	RequirementSegment:            "RequirementSegment",
	UpdateMc:                      "UpdateMc",
	ToPlndIndepRqmtItemOc:         "ToPlndIndepRqmtItemOc",
	PlndIndepRqmtInternalID:       "PlndIndepRqmtInternalID",
	PlndIndepRqmtIsActive:         "PlndIndepRqmtIsActive",
	WBSElement:                    "WBSElement",
	RequirementPlanIsExternal:     "RequirementPlanIsExternal",
	PlndIndepRqmtAcctAssgmtCat:    "PlndIndepRqmtAcctAssgmtCat",
	PlndIndepRqmtLastChgdDateTime: "PlndIndepRqmtLastChgdDateTime",
}

var SapPlannedIndependentRequirementHeaderDatumTableColumns = struct {
	Product                       string
	Plant                         string
	MRPArea                       string
	PlndIndepRqmtType             string
	PlndIndepRqmtVersion          string
	RequirementPlan               string
	RequirementSegment            string
	UpdateMc                      string
	ToPlndIndepRqmtItemOc         string
	PlndIndepRqmtInternalID       string
	PlndIndepRqmtIsActive         string
	WBSElement                    string
	RequirementPlanIsExternal     string
	PlndIndepRqmtAcctAssgmtCat    string
	PlndIndepRqmtLastChgdDateTime string
}{
	Product:                       "sap_planned_independent_requirement_header_data.Product",
	Plant:                         "sap_planned_independent_requirement_header_data.Plant",
	MRPArea:                       "sap_planned_independent_requirement_header_data.MRPArea",
	PlndIndepRqmtType:             "sap_planned_independent_requirement_header_data.PlndIndepRqmtType",
	PlndIndepRqmtVersion:          "sap_planned_independent_requirement_header_data.PlndIndepRqmtVersion",
	RequirementPlan:               "sap_planned_independent_requirement_header_data.RequirementPlan",
	RequirementSegment:            "sap_planned_independent_requirement_header_data.RequirementSegment",
	UpdateMc:                      "sap_planned_independent_requirement_header_data.UpdateMc",
	ToPlndIndepRqmtItemOc:         "sap_planned_independent_requirement_header_data.ToPlndIndepRqmtItemOc",
	PlndIndepRqmtInternalID:       "sap_planned_independent_requirement_header_data.PlndIndepRqmtInternalID",
	PlndIndepRqmtIsActive:         "sap_planned_independent_requirement_header_data.PlndIndepRqmtIsActive",
	WBSElement:                    "sap_planned_independent_requirement_header_data.WBSElement",
	RequirementPlanIsExternal:     "sap_planned_independent_requirement_header_data.RequirementPlanIsExternal",
	PlndIndepRqmtAcctAssgmtCat:    "sap_planned_independent_requirement_header_data.PlndIndepRqmtAcctAssgmtCat",
	PlndIndepRqmtLastChgdDateTime: "sap_planned_independent_requirement_header_data.PlndIndepRqmtLastChgdDateTime",
}

// Generated where

var SapPlannedIndependentRequirementHeaderDatumWhere = struct {
	Product                       whereHelperstring
	Plant                         whereHelperstring
	MRPArea                       whereHelperstring
	PlndIndepRqmtType             whereHelperstring
	PlndIndepRqmtVersion          whereHelperstring
	RequirementPlan               whereHelperstring
	RequirementSegment            whereHelperstring
	UpdateMc                      whereHelpernull_Bool
	ToPlndIndepRqmtItemOc         whereHelpernull_Bool
	PlndIndepRqmtInternalID       whereHelpernull_String
	PlndIndepRqmtIsActive         whereHelpernull_String
	WBSElement                    whereHelpernull_String
	RequirementPlanIsExternal     whereHelpernull_Bool
	PlndIndepRqmtAcctAssgmtCat    whereHelpernull_String
	PlndIndepRqmtLastChgdDateTime whereHelpernull_String
}{
	Product:                       whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`Product`"},
	Plant:                         whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`Plant`"},
	MRPArea:                       whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`MRPArea`"},
	PlndIndepRqmtType:             whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`PlndIndepRqmtType`"},
	PlndIndepRqmtVersion:          whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`PlndIndepRqmtVersion`"},
	RequirementPlan:               whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`RequirementPlan`"},
	RequirementSegment:            whereHelperstring{field: "`sap_planned_independent_requirement_header_data`.`RequirementSegment`"},
	UpdateMc:                      whereHelpernull_Bool{field: "`sap_planned_independent_requirement_header_data`.`UpdateMc`"},
	ToPlndIndepRqmtItemOc:         whereHelpernull_Bool{field: "`sap_planned_independent_requirement_header_data`.`ToPlndIndepRqmtItemOc`"},
	PlndIndepRqmtInternalID:       whereHelpernull_String{field: "`sap_planned_independent_requirement_header_data`.`PlndIndepRqmtInternalID`"},
	PlndIndepRqmtIsActive:         whereHelpernull_String{field: "`sap_planned_independent_requirement_header_data`.`PlndIndepRqmtIsActive`"},
	WBSElement:                    whereHelpernull_String{field: "`sap_planned_independent_requirement_header_data`.`WBSElement`"},
	RequirementPlanIsExternal:     whereHelpernull_Bool{field: "`sap_planned_independent_requirement_header_data`.`RequirementPlanIsExternal`"},
	PlndIndepRqmtAcctAssgmtCat:    whereHelpernull_String{field: "`sap_planned_independent_requirement_header_data`.`PlndIndepRqmtAcctAssgmtCat`"},
	PlndIndepRqmtLastChgdDateTime: whereHelpernull_String{field: "`sap_planned_independent_requirement_header_data`.`PlndIndepRqmtLastChgdDateTime`"},
}

// SapPlannedIndependentRequirementHeaderDatumRels is where relationship names are stored.
var SapPlannedIndependentRequirementHeaderDatumRels = struct {
}{}

// sapPlannedIndependentRequirementHeaderDatumR is where relationships are stored.
type sapPlannedIndependentRequirementHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapPlannedIndependentRequirementHeaderDatumR) NewStruct() *sapPlannedIndependentRequirementHeaderDatumR {
	return &sapPlannedIndependentRequirementHeaderDatumR{}
}

// sapPlannedIndependentRequirementHeaderDatumL is where Load methods for each relationship are stored.
type sapPlannedIndependentRequirementHeaderDatumL struct{}

var (
	sapPlannedIndependentRequirementHeaderDatumAllColumns            = []string{"Product", "Plant", "MRPArea", "PlndIndepRqmtType", "PlndIndepRqmtVersion", "RequirementPlan", "RequirementSegment", "UpdateMc", "ToPlndIndepRqmtItemOc", "PlndIndepRqmtInternalID", "PlndIndepRqmtIsActive", "WBSElement", "RequirementPlanIsExternal", "PlndIndepRqmtAcctAssgmtCat", "PlndIndepRqmtLastChgdDateTime"}
	sapPlannedIndependentRequirementHeaderDatumColumnsWithoutDefault = []string{"Product", "Plant", "MRPArea", "PlndIndepRqmtType", "PlndIndepRqmtVersion", "RequirementPlan", "RequirementSegment", "UpdateMc", "ToPlndIndepRqmtItemOc", "PlndIndepRqmtInternalID", "PlndIndepRqmtIsActive", "WBSElement", "RequirementPlanIsExternal", "PlndIndepRqmtAcctAssgmtCat", "PlndIndepRqmtLastChgdDateTime"}
	sapPlannedIndependentRequirementHeaderDatumColumnsWithDefault    = []string{}
	sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns     = []string{"Product", "Plant", "MRPArea", "PlndIndepRqmtType", "PlndIndepRqmtVersion", "RequirementPlan", "RequirementSegment"}
	sapPlannedIndependentRequirementHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapPlannedIndependentRequirementHeaderDatumSlice is an alias for a slice of pointers to SapPlannedIndependentRequirementHeaderDatum.
	// This should almost always be used instead of []SapPlannedIndependentRequirementHeaderDatum.
	SapPlannedIndependentRequirementHeaderDatumSlice []*SapPlannedIndependentRequirementHeaderDatum
	// SapPlannedIndependentRequirementHeaderDatumHook is the signature for custom SapPlannedIndependentRequirementHeaderDatum hook methods
	SapPlannedIndependentRequirementHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapPlannedIndependentRequirementHeaderDatum) error

	sapPlannedIndependentRequirementHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapPlannedIndependentRequirementHeaderDatumType                 = reflect.TypeOf(&SapPlannedIndependentRequirementHeaderDatum{})
	sapPlannedIndependentRequirementHeaderDatumMapping              = queries.MakeStructMapping(sapPlannedIndependentRequirementHeaderDatumType)
	sapPlannedIndependentRequirementHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns)
	sapPlannedIndependentRequirementHeaderDatumInsertCacheMut       sync.RWMutex
	sapPlannedIndependentRequirementHeaderDatumInsertCache          = make(map[string]insertCache)
	sapPlannedIndependentRequirementHeaderDatumUpdateCacheMut       sync.RWMutex
	sapPlannedIndependentRequirementHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapPlannedIndependentRequirementHeaderDatumUpsertCacheMut       sync.RWMutex
	sapPlannedIndependentRequirementHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapPlannedIndependentRequirementHeaderDatumAfterSelectHooks []SapPlannedIndependentRequirementHeaderDatumHook

var sapPlannedIndependentRequirementHeaderDatumBeforeInsertHooks []SapPlannedIndependentRequirementHeaderDatumHook
var sapPlannedIndependentRequirementHeaderDatumAfterInsertHooks []SapPlannedIndependentRequirementHeaderDatumHook

var sapPlannedIndependentRequirementHeaderDatumBeforeUpdateHooks []SapPlannedIndependentRequirementHeaderDatumHook
var sapPlannedIndependentRequirementHeaderDatumAfterUpdateHooks []SapPlannedIndependentRequirementHeaderDatumHook

var sapPlannedIndependentRequirementHeaderDatumBeforeDeleteHooks []SapPlannedIndependentRequirementHeaderDatumHook
var sapPlannedIndependentRequirementHeaderDatumAfterDeleteHooks []SapPlannedIndependentRequirementHeaderDatumHook

var sapPlannedIndependentRequirementHeaderDatumBeforeUpsertHooks []SapPlannedIndependentRequirementHeaderDatumHook
var sapPlannedIndependentRequirementHeaderDatumAfterUpsertHooks []SapPlannedIndependentRequirementHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapPlannedIndependentRequirementHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapPlannedIndependentRequirementHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapPlannedIndependentRequirementHeaderDatumHook registers your hook function for all future operations.
func AddSapPlannedIndependentRequirementHeaderDatumHook(hookPoint boil.HookPoint, sapPlannedIndependentRequirementHeaderDatumHook SapPlannedIndependentRequirementHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapPlannedIndependentRequirementHeaderDatumAfterSelectHooks = append(sapPlannedIndependentRequirementHeaderDatumAfterSelectHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapPlannedIndependentRequirementHeaderDatumBeforeInsertHooks = append(sapPlannedIndependentRequirementHeaderDatumBeforeInsertHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.AfterInsertHook:
		sapPlannedIndependentRequirementHeaderDatumAfterInsertHooks = append(sapPlannedIndependentRequirementHeaderDatumAfterInsertHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapPlannedIndependentRequirementHeaderDatumBeforeUpdateHooks = append(sapPlannedIndependentRequirementHeaderDatumBeforeUpdateHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapPlannedIndependentRequirementHeaderDatumAfterUpdateHooks = append(sapPlannedIndependentRequirementHeaderDatumAfterUpdateHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapPlannedIndependentRequirementHeaderDatumBeforeDeleteHooks = append(sapPlannedIndependentRequirementHeaderDatumBeforeDeleteHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapPlannedIndependentRequirementHeaderDatumAfterDeleteHooks = append(sapPlannedIndependentRequirementHeaderDatumAfterDeleteHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapPlannedIndependentRequirementHeaderDatumBeforeUpsertHooks = append(sapPlannedIndependentRequirementHeaderDatumBeforeUpsertHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapPlannedIndependentRequirementHeaderDatumAfterUpsertHooks = append(sapPlannedIndependentRequirementHeaderDatumAfterUpsertHooks, sapPlannedIndependentRequirementHeaderDatumHook)
	}
}

// One returns a single sapPlannedIndependentRequirementHeaderDatum record from the query.
func (q sapPlannedIndependentRequirementHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapPlannedIndependentRequirementHeaderDatum, error) {
	o := &SapPlannedIndependentRequirementHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_planned_independent_requirement_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapPlannedIndependentRequirementHeaderDatum records from the query.
func (q sapPlannedIndependentRequirementHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapPlannedIndependentRequirementHeaderDatumSlice, error) {
	var o []*SapPlannedIndependentRequirementHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapPlannedIndependentRequirementHeaderDatum slice")
	}

	if len(sapPlannedIndependentRequirementHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapPlannedIndependentRequirementHeaderDatum records in the query.
func (q sapPlannedIndependentRequirementHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_planned_independent_requirement_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapPlannedIndependentRequirementHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_planned_independent_requirement_header_data exists")
	}

	return count > 0, nil
}

// SapPlannedIndependentRequirementHeaderData retrieves all the records using an executor.
func SapPlannedIndependentRequirementHeaderData(mods ...qm.QueryMod) sapPlannedIndependentRequirementHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_planned_independent_requirement_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_planned_independent_requirement_header_data`.*"})
	}

	return sapPlannedIndependentRequirementHeaderDatumQuery{q}
}

// FindSapPlannedIndependentRequirementHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapPlannedIndependentRequirementHeaderDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, mRPArea string, plndIndepRqmtType string, plndIndepRqmtVersion string, requirementPlan string, requirementSegment string, selectCols ...string) (*SapPlannedIndependentRequirementHeaderDatum, error) {
	sapPlannedIndependentRequirementHeaderDatumObj := &SapPlannedIndependentRequirementHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_planned_independent_requirement_header_data` where `Product`=? AND `Plant`=? AND `MRPArea`=? AND `PlndIndepRqmtType`=? AND `PlndIndepRqmtVersion`=? AND `RequirementPlan`=? AND `RequirementSegment`=?", sel,
	)

	q := queries.Raw(query, product, plant, mRPArea, plndIndepRqmtType, plndIndepRqmtVersion, requirementPlan, requirementSegment)

	err := q.Bind(ctx, exec, sapPlannedIndependentRequirementHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_planned_independent_requirement_header_data")
	}

	if err = sapPlannedIndependentRequirementHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapPlannedIndependentRequirementHeaderDatumObj, err
	}

	return sapPlannedIndependentRequirementHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapPlannedIndependentRequirementHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_independent_requirement_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedIndependentRequirementHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapPlannedIndependentRequirementHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapPlannedIndependentRequirementHeaderDatumInsertCache[key]
	sapPlannedIndependentRequirementHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapPlannedIndependentRequirementHeaderDatumAllColumns,
			sapPlannedIndependentRequirementHeaderDatumColumnsWithDefault,
			sapPlannedIndependentRequirementHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_planned_independent_requirement_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_planned_independent_requirement_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_planned_independent_requirement_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_planned_independent_requirement_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
		o.MRPArea,
		o.PlndIndepRqmtType,
		o.PlndIndepRqmtVersion,
		o.RequirementPlan,
		o.RequirementSegment,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_independent_requirement_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedIndependentRequirementHeaderDatumInsertCacheMut.Lock()
		sapPlannedIndependentRequirementHeaderDatumInsertCache[key] = cache
		sapPlannedIndependentRequirementHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapPlannedIndependentRequirementHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapPlannedIndependentRequirementHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapPlannedIndependentRequirementHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapPlannedIndependentRequirementHeaderDatumUpdateCache[key]
	sapPlannedIndependentRequirementHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapPlannedIndependentRequirementHeaderDatumAllColumns,
			sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_planned_independent_requirement_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_planned_independent_requirement_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, append(wl, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_planned_independent_requirement_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_planned_independent_requirement_header_data")
	}

	if !cached {
		sapPlannedIndependentRequirementHeaderDatumUpdateCacheMut.Lock()
		sapPlannedIndependentRequirementHeaderDatumUpdateCache[key] = cache
		sapPlannedIndependentRequirementHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapPlannedIndependentRequirementHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_planned_independent_requirement_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_planned_independent_requirement_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapPlannedIndependentRequirementHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedIndependentRequirementHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_planned_independent_requirement_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapPlannedIndependentRequirementHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapPlannedIndependentRequirementHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapPlannedIndependentRequirementHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapPlannedIndependentRequirementHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_planned_independent_requirement_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapPlannedIndependentRequirementHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapPlannedIndependentRequirementHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapPlannedIndependentRequirementHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapPlannedIndependentRequirementHeaderDatumUpsertCache[key]
	sapPlannedIndependentRequirementHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapPlannedIndependentRequirementHeaderDatumAllColumns,
			sapPlannedIndependentRequirementHeaderDatumColumnsWithDefault,
			sapPlannedIndependentRequirementHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapPlannedIndependentRequirementHeaderDatumAllColumns,
			sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_planned_independent_requirement_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_planned_independent_requirement_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_planned_independent_requirement_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_planned_independent_requirement_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapPlannedIndependentRequirementHeaderDatumType, sapPlannedIndependentRequirementHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_planned_independent_requirement_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_planned_independent_requirement_header_data")
	}

CacheNoHooks:
	if !cached {
		sapPlannedIndependentRequirementHeaderDatumUpsertCacheMut.Lock()
		sapPlannedIndependentRequirementHeaderDatumUpsertCache[key] = cache
		sapPlannedIndependentRequirementHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapPlannedIndependentRequirementHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapPlannedIndependentRequirementHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapPlannedIndependentRequirementHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapPlannedIndependentRequirementHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_planned_independent_requirement_header_data` WHERE `Product`=? AND `Plant`=? AND `MRPArea`=? AND `PlndIndepRqmtType`=? AND `PlndIndepRqmtVersion`=? AND `RequirementPlan`=? AND `RequirementSegment`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_planned_independent_requirement_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_planned_independent_requirement_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapPlannedIndependentRequirementHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapPlannedIndependentRequirementHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_planned_independent_requirement_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_independent_requirement_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapPlannedIndependentRequirementHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapPlannedIndependentRequirementHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedIndependentRequirementHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_planned_independent_requirement_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapPlannedIndependentRequirementHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_planned_independent_requirement_header_data")
	}

	if len(sapPlannedIndependentRequirementHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapPlannedIndependentRequirementHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapPlannedIndependentRequirementHeaderDatum(ctx, exec, o.Product, o.Plant, o.MRPArea, o.PlndIndepRqmtType, o.PlndIndepRqmtVersion, o.RequirementPlan, o.RequirementSegment)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapPlannedIndependentRequirementHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapPlannedIndependentRequirementHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapPlannedIndependentRequirementHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_planned_independent_requirement_header_data`.* FROM `sap_planned_independent_requirement_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapPlannedIndependentRequirementHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapPlannedIndependentRequirementHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapPlannedIndependentRequirementHeaderDatumExists checks if the SapPlannedIndependentRequirementHeaderDatum row exists.
func SapPlannedIndependentRequirementHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string, mRPArea string, plndIndepRqmtType string, plndIndepRqmtVersion string, requirementPlan string, requirementSegment string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_planned_independent_requirement_header_data` where `Product`=? AND `Plant`=? AND `MRPArea`=? AND `PlndIndepRqmtType`=? AND `PlndIndepRqmtVersion`=? AND `RequirementPlan`=? AND `RequirementSegment`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant, mRPArea, plndIndepRqmtType, plndIndepRqmtVersion, requirementPlan, requirementSegment)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant, mRPArea, plndIndepRqmtType, plndIndepRqmtVersion, requirementPlan, requirementSegment)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_planned_independent_requirement_header_data exists")
	}

	return exists, nil
}
