// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapServiceOrderHeaderDatum is an object representing the database table.
type SapServiceOrderHeaderDatum struct {
	ServiceOrder                  string      `boil:"ServiceOrder" json:"ServiceOrder" toml:"ServiceOrder" yaml:"ServiceOrder"`
	ServiceOrderType              null.String `boil:"ServiceOrderType" json:"ServiceOrderType,omitempty" toml:"ServiceOrderType" yaml:"ServiceOrderType,omitempty"`
	ServiceOrderUUID              null.String `boil:"ServiceOrderUUID" json:"ServiceOrderUUID,omitempty" toml:"ServiceOrderUUID" yaml:"ServiceOrderUUID,omitempty"`
	ServiceOrderDescription       null.String `boil:"ServiceOrderDescription" json:"ServiceOrderDescription,omitempty" toml:"ServiceOrderDescription" yaml:"ServiceOrderDescription,omitempty"`
	ServiceObjectType             null.String `boil:"ServiceObjectType" json:"ServiceObjectType,omitempty" toml:"ServiceObjectType" yaml:"ServiceObjectType,omitempty"`
	Language                      null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	ServiceDocumentPriority       null.String `boil:"ServiceDocumentPriority" json:"ServiceDocumentPriority,omitempty" toml:"ServiceDocumentPriority" yaml:"ServiceDocumentPriority,omitempty"`
	RequestedServiceStartDateTime null.String `boil:"RequestedServiceStartDateTime" json:"RequestedServiceStartDateTime,omitempty" toml:"RequestedServiceStartDateTime" yaml:"RequestedServiceStartDateTime,omitempty"`
	RequestedServiceEndDateTime   null.String `boil:"RequestedServiceEndDateTime" json:"RequestedServiceEndDateTime,omitempty" toml:"RequestedServiceEndDateTime" yaml:"RequestedServiceEndDateTime,omitempty"`
	ServiceDocChangedDateTime     null.String `boil:"ServiceDocChangedDateTime" json:"ServiceDocChangedDateTime,omitempty" toml:"ServiceDocChangedDateTime" yaml:"ServiceDocChangedDateTime,omitempty"`
	PurchaseOrderByCustomer       null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderDate     null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	ServiceOrderIsReleased        null.String `boil:"ServiceOrderIsReleased" json:"ServiceOrderIsReleased,omitempty" toml:"ServiceOrderIsReleased" yaml:"ServiceOrderIsReleased,omitempty"`
	ServiceOrderIsCompleted       null.String `boil:"ServiceOrderIsCompleted" json:"ServiceOrderIsCompleted,omitempty" toml:"ServiceOrderIsCompleted" yaml:"ServiceOrderIsCompleted,omitempty"`
	ServiceOrderIsRejected        null.String `boil:"ServiceOrderIsRejected" json:"ServiceOrderIsRejected,omitempty" toml:"ServiceOrderIsRejected" yaml:"ServiceOrderIsRejected,omitempty"`
	SalesOrganization             null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel           null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	Division                      null.String `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	SalesOffice                   null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesGroup                    null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	ShipToParty                   null.String `boil:"ShipToParty" json:"ShipToParty,omitempty" toml:"ShipToParty" yaml:"ShipToParty,omitempty"`
	BillToParty                   null.String `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	PayerParty                    null.String `boil:"PayerParty" json:"PayerParty,omitempty" toml:"PayerParty" yaml:"PayerParty,omitempty"`
	ContactPerson                 null.String `boil:"ContactPerson" json:"ContactPerson,omitempty" toml:"ContactPerson" yaml:"ContactPerson,omitempty"`
	ServiceDocGrossAmount         null.String `boil:"ServiceDocGrossAmount" json:"ServiceDocGrossAmount,omitempty" toml:"ServiceDocGrossAmount" yaml:"ServiceDocGrossAmount,omitempty"`
	ServiceDocNetAmount           null.String `boil:"ServiceDocNetAmount" json:"ServiceDocNetAmount,omitempty" toml:"ServiceDocNetAmount" yaml:"ServiceDocNetAmount,omitempty"`
	ServiceDocTaxAmount           null.String `boil:"ServiceDocTaxAmount" json:"ServiceDocTaxAmount,omitempty" toml:"ServiceDocTaxAmount" yaml:"ServiceDocTaxAmount,omitempty"`
	TransactionCurrency           null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	ReferenceServiceRequest       null.String `boil:"ReferenceServiceRequest" json:"ReferenceServiceRequest,omitempty" toml:"ReferenceServiceRequest" yaml:"ReferenceServiceRequest,omitempty"`
	ReferenceServiceContract      null.String `boil:"ReferenceServiceContract" json:"ReferenceServiceContract,omitempty" toml:"ReferenceServiceContract" yaml:"ReferenceServiceContract,omitempty"`
	ReferenceServiceOrder         null.String `boil:"ReferenceServiceOrder" json:"ReferenceServiceOrder,omitempty" toml:"ReferenceServiceOrder" yaml:"ReferenceServiceOrder,omitempty"`
	SrvcOrdCreditStatus           null.String `boil:"SrvcOrdCreditStatus" json:"SrvcOrdCreditStatus,omitempty" toml:"SrvcOrdCreditStatus" yaml:"SrvcOrdCreditStatus,omitempty"`
	ServiceOrderRejectionReason   null.String `boil:"ServiceOrderRejectionReason" json:"ServiceOrderRejectionReason,omitempty" toml:"ServiceOrderRejectionReason" yaml:"ServiceOrderRejectionReason,omitempty"`

	R *sapServiceOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapServiceOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapServiceOrderHeaderDatumColumns = struct {
	ServiceOrder                  string
	ServiceOrderType              string
	ServiceOrderUUID              string
	ServiceOrderDescription       string
	ServiceObjectType             string
	Language                      string
	ServiceDocumentPriority       string
	RequestedServiceStartDateTime string
	RequestedServiceEndDateTime   string
	ServiceDocChangedDateTime     string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderDate     string
	ServiceOrderIsReleased        string
	ServiceOrderIsCompleted       string
	ServiceOrderIsRejected        string
	SalesOrganization             string
	DistributionChannel           string
	Division                      string
	SalesOffice                   string
	SalesGroup                    string
	ShipToParty                   string
	BillToParty                   string
	PayerParty                    string
	ContactPerson                 string
	ServiceDocGrossAmount         string
	ServiceDocNetAmount           string
	ServiceDocTaxAmount           string
	TransactionCurrency           string
	ReferenceServiceRequest       string
	ReferenceServiceContract      string
	ReferenceServiceOrder         string
	SrvcOrdCreditStatus           string
	ServiceOrderRejectionReason   string
}{
	ServiceOrder:                  "ServiceOrder",
	ServiceOrderType:              "ServiceOrderType",
	ServiceOrderUUID:              "ServiceOrderUUID",
	ServiceOrderDescription:       "ServiceOrderDescription",
	ServiceObjectType:             "ServiceObjectType",
	Language:                      "Language",
	ServiceDocumentPriority:       "ServiceDocumentPriority",
	RequestedServiceStartDateTime: "RequestedServiceStartDateTime",
	RequestedServiceEndDateTime:   "RequestedServiceEndDateTime",
	ServiceDocChangedDateTime:     "ServiceDocChangedDateTime",
	PurchaseOrderByCustomer:       "PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:     "CustomerPurchaseOrderDate",
	ServiceOrderIsReleased:        "ServiceOrderIsReleased",
	ServiceOrderIsCompleted:       "ServiceOrderIsCompleted",
	ServiceOrderIsRejected:        "ServiceOrderIsRejected",
	SalesOrganization:             "SalesOrganization",
	DistributionChannel:           "DistributionChannel",
	Division:                      "Division",
	SalesOffice:                   "SalesOffice",
	SalesGroup:                    "SalesGroup",
	ShipToParty:                   "ShipToParty",
	BillToParty:                   "BillToParty",
	PayerParty:                    "PayerParty",
	ContactPerson:                 "ContactPerson",
	ServiceDocGrossAmount:         "ServiceDocGrossAmount",
	ServiceDocNetAmount:           "ServiceDocNetAmount",
	ServiceDocTaxAmount:           "ServiceDocTaxAmount",
	TransactionCurrency:           "TransactionCurrency",
	ReferenceServiceRequest:       "ReferenceServiceRequest",
	ReferenceServiceContract:      "ReferenceServiceContract",
	ReferenceServiceOrder:         "ReferenceServiceOrder",
	SrvcOrdCreditStatus:           "SrvcOrdCreditStatus",
	ServiceOrderRejectionReason:   "ServiceOrderRejectionReason",
}

var SapServiceOrderHeaderDatumTableColumns = struct {
	ServiceOrder                  string
	ServiceOrderType              string
	ServiceOrderUUID              string
	ServiceOrderDescription       string
	ServiceObjectType             string
	Language                      string
	ServiceDocumentPriority       string
	RequestedServiceStartDateTime string
	RequestedServiceEndDateTime   string
	ServiceDocChangedDateTime     string
	PurchaseOrderByCustomer       string
	CustomerPurchaseOrderDate     string
	ServiceOrderIsReleased        string
	ServiceOrderIsCompleted       string
	ServiceOrderIsRejected        string
	SalesOrganization             string
	DistributionChannel           string
	Division                      string
	SalesOffice                   string
	SalesGroup                    string
	ShipToParty                   string
	BillToParty                   string
	PayerParty                    string
	ContactPerson                 string
	ServiceDocGrossAmount         string
	ServiceDocNetAmount           string
	ServiceDocTaxAmount           string
	TransactionCurrency           string
	ReferenceServiceRequest       string
	ReferenceServiceContract      string
	ReferenceServiceOrder         string
	SrvcOrdCreditStatus           string
	ServiceOrderRejectionReason   string
}{
	ServiceOrder:                  "sap_service_order_header_data.ServiceOrder",
	ServiceOrderType:              "sap_service_order_header_data.ServiceOrderType",
	ServiceOrderUUID:              "sap_service_order_header_data.ServiceOrderUUID",
	ServiceOrderDescription:       "sap_service_order_header_data.ServiceOrderDescription",
	ServiceObjectType:             "sap_service_order_header_data.ServiceObjectType",
	Language:                      "sap_service_order_header_data.Language",
	ServiceDocumentPriority:       "sap_service_order_header_data.ServiceDocumentPriority",
	RequestedServiceStartDateTime: "sap_service_order_header_data.RequestedServiceStartDateTime",
	RequestedServiceEndDateTime:   "sap_service_order_header_data.RequestedServiceEndDateTime",
	ServiceDocChangedDateTime:     "sap_service_order_header_data.ServiceDocChangedDateTime",
	PurchaseOrderByCustomer:       "sap_service_order_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:     "sap_service_order_header_data.CustomerPurchaseOrderDate",
	ServiceOrderIsReleased:        "sap_service_order_header_data.ServiceOrderIsReleased",
	ServiceOrderIsCompleted:       "sap_service_order_header_data.ServiceOrderIsCompleted",
	ServiceOrderIsRejected:        "sap_service_order_header_data.ServiceOrderIsRejected",
	SalesOrganization:             "sap_service_order_header_data.SalesOrganization",
	DistributionChannel:           "sap_service_order_header_data.DistributionChannel",
	Division:                      "sap_service_order_header_data.Division",
	SalesOffice:                   "sap_service_order_header_data.SalesOffice",
	SalesGroup:                    "sap_service_order_header_data.SalesGroup",
	ShipToParty:                   "sap_service_order_header_data.ShipToParty",
	BillToParty:                   "sap_service_order_header_data.BillToParty",
	PayerParty:                    "sap_service_order_header_data.PayerParty",
	ContactPerson:                 "sap_service_order_header_data.ContactPerson",
	ServiceDocGrossAmount:         "sap_service_order_header_data.ServiceDocGrossAmount",
	ServiceDocNetAmount:           "sap_service_order_header_data.ServiceDocNetAmount",
	ServiceDocTaxAmount:           "sap_service_order_header_data.ServiceDocTaxAmount",
	TransactionCurrency:           "sap_service_order_header_data.TransactionCurrency",
	ReferenceServiceRequest:       "sap_service_order_header_data.ReferenceServiceRequest",
	ReferenceServiceContract:      "sap_service_order_header_data.ReferenceServiceContract",
	ReferenceServiceOrder:         "sap_service_order_header_data.ReferenceServiceOrder",
	SrvcOrdCreditStatus:           "sap_service_order_header_data.SrvcOrdCreditStatus",
	ServiceOrderRejectionReason:   "sap_service_order_header_data.ServiceOrderRejectionReason",
}

// Generated where

var SapServiceOrderHeaderDatumWhere = struct {
	ServiceOrder                  whereHelperstring
	ServiceOrderType              whereHelpernull_String
	ServiceOrderUUID              whereHelpernull_String
	ServiceOrderDescription       whereHelpernull_String
	ServiceObjectType             whereHelpernull_String
	Language                      whereHelpernull_String
	ServiceDocumentPriority       whereHelpernull_String
	RequestedServiceStartDateTime whereHelpernull_String
	RequestedServiceEndDateTime   whereHelpernull_String
	ServiceDocChangedDateTime     whereHelpernull_String
	PurchaseOrderByCustomer       whereHelpernull_String
	CustomerPurchaseOrderDate     whereHelpernull_String
	ServiceOrderIsReleased        whereHelpernull_String
	ServiceOrderIsCompleted       whereHelpernull_String
	ServiceOrderIsRejected        whereHelpernull_String
	SalesOrganization             whereHelpernull_String
	DistributionChannel           whereHelpernull_String
	Division                      whereHelpernull_String
	SalesOffice                   whereHelpernull_String
	SalesGroup                    whereHelpernull_String
	ShipToParty                   whereHelpernull_String
	BillToParty                   whereHelpernull_String
	PayerParty                    whereHelpernull_String
	ContactPerson                 whereHelpernull_String
	ServiceDocGrossAmount         whereHelpernull_String
	ServiceDocNetAmount           whereHelpernull_String
	ServiceDocTaxAmount           whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	ReferenceServiceRequest       whereHelpernull_String
	ReferenceServiceContract      whereHelpernull_String
	ReferenceServiceOrder         whereHelpernull_String
	SrvcOrdCreditStatus           whereHelpernull_String
	ServiceOrderRejectionReason   whereHelpernull_String
}{
	ServiceOrder:                  whereHelperstring{field: "`sap_service_order_header_data`.`ServiceOrder`"},
	ServiceOrderType:              whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderType`"},
	ServiceOrderUUID:              whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderUUID`"},
	ServiceOrderDescription:       whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderDescription`"},
	ServiceObjectType:             whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceObjectType`"},
	Language:                      whereHelpernull_String{field: "`sap_service_order_header_data`.`Language`"},
	ServiceDocumentPriority:       whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceDocumentPriority`"},
	RequestedServiceStartDateTime: whereHelpernull_String{field: "`sap_service_order_header_data`.`RequestedServiceStartDateTime`"},
	RequestedServiceEndDateTime:   whereHelpernull_String{field: "`sap_service_order_header_data`.`RequestedServiceEndDateTime`"},
	ServiceDocChangedDateTime:     whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceDocChangedDateTime`"},
	PurchaseOrderByCustomer:       whereHelpernull_String{field: "`sap_service_order_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderDate:     whereHelpernull_String{field: "`sap_service_order_header_data`.`CustomerPurchaseOrderDate`"},
	ServiceOrderIsReleased:        whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderIsReleased`"},
	ServiceOrderIsCompleted:       whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderIsCompleted`"},
	ServiceOrderIsRejected:        whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderIsRejected`"},
	SalesOrganization:             whereHelpernull_String{field: "`sap_service_order_header_data`.`SalesOrganization`"},
	DistributionChannel:           whereHelpernull_String{field: "`sap_service_order_header_data`.`DistributionChannel`"},
	Division:                      whereHelpernull_String{field: "`sap_service_order_header_data`.`Division`"},
	SalesOffice:                   whereHelpernull_String{field: "`sap_service_order_header_data`.`SalesOffice`"},
	SalesGroup:                    whereHelpernull_String{field: "`sap_service_order_header_data`.`SalesGroup`"},
	ShipToParty:                   whereHelpernull_String{field: "`sap_service_order_header_data`.`ShipToParty`"},
	BillToParty:                   whereHelpernull_String{field: "`sap_service_order_header_data`.`BillToParty`"},
	PayerParty:                    whereHelpernull_String{field: "`sap_service_order_header_data`.`PayerParty`"},
	ContactPerson:                 whereHelpernull_String{field: "`sap_service_order_header_data`.`ContactPerson`"},
	ServiceDocGrossAmount:         whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceDocGrossAmount`"},
	ServiceDocNetAmount:           whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceDocNetAmount`"},
	ServiceDocTaxAmount:           whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceDocTaxAmount`"},
	TransactionCurrency:           whereHelpernull_String{field: "`sap_service_order_header_data`.`TransactionCurrency`"},
	ReferenceServiceRequest:       whereHelpernull_String{field: "`sap_service_order_header_data`.`ReferenceServiceRequest`"},
	ReferenceServiceContract:      whereHelpernull_String{field: "`sap_service_order_header_data`.`ReferenceServiceContract`"},
	ReferenceServiceOrder:         whereHelpernull_String{field: "`sap_service_order_header_data`.`ReferenceServiceOrder`"},
	SrvcOrdCreditStatus:           whereHelpernull_String{field: "`sap_service_order_header_data`.`SrvcOrdCreditStatus`"},
	ServiceOrderRejectionReason:   whereHelpernull_String{field: "`sap_service_order_header_data`.`ServiceOrderRejectionReason`"},
}

// SapServiceOrderHeaderDatumRels is where relationship names are stored.
var SapServiceOrderHeaderDatumRels = struct {
	ServiceOrderSapServiceOrderConfirmationDatum      string
	ServiceOrderSapServiceOrderPersonResponsibleDatum string
	ServiceOrderSapServiceOrderReferenceObjectDatum   string
	ServiceOrderSapServiceOrderDefectData             string
	ServiceOrderSapServiceOrderItemData               string
	ServiceOrderSapServiceOrderItemPricingElementData string
}{
	ServiceOrderSapServiceOrderConfirmationDatum:      "ServiceOrderSapServiceOrderConfirmationDatum",
	ServiceOrderSapServiceOrderPersonResponsibleDatum: "ServiceOrderSapServiceOrderPersonResponsibleDatum",
	ServiceOrderSapServiceOrderReferenceObjectDatum:   "ServiceOrderSapServiceOrderReferenceObjectDatum",
	ServiceOrderSapServiceOrderDefectData:             "ServiceOrderSapServiceOrderDefectData",
	ServiceOrderSapServiceOrderItemData:               "ServiceOrderSapServiceOrderItemData",
	ServiceOrderSapServiceOrderItemPricingElementData: "ServiceOrderSapServiceOrderItemPricingElementData",
}

// sapServiceOrderHeaderDatumR is where relationships are stored.
type sapServiceOrderHeaderDatumR struct {
	ServiceOrderSapServiceOrderConfirmationDatum      *SapServiceOrderConfirmationDatum           `boil:"ServiceOrderSapServiceOrderConfirmationDatum" json:"ServiceOrderSapServiceOrderConfirmationDatum" toml:"ServiceOrderSapServiceOrderConfirmationDatum" yaml:"ServiceOrderSapServiceOrderConfirmationDatum"`
	ServiceOrderSapServiceOrderPersonResponsibleDatum *SapServiceOrderPersonResponsibleDatum      `boil:"ServiceOrderSapServiceOrderPersonResponsibleDatum" json:"ServiceOrderSapServiceOrderPersonResponsibleDatum" toml:"ServiceOrderSapServiceOrderPersonResponsibleDatum" yaml:"ServiceOrderSapServiceOrderPersonResponsibleDatum"`
	ServiceOrderSapServiceOrderReferenceObjectDatum   *SapServiceOrderReferenceObjectDatum        `boil:"ServiceOrderSapServiceOrderReferenceObjectDatum" json:"ServiceOrderSapServiceOrderReferenceObjectDatum" toml:"ServiceOrderSapServiceOrderReferenceObjectDatum" yaml:"ServiceOrderSapServiceOrderReferenceObjectDatum"`
	ServiceOrderSapServiceOrderDefectData             SapServiceOrderDefectDatumSlice             `boil:"ServiceOrderSapServiceOrderDefectData" json:"ServiceOrderSapServiceOrderDefectData" toml:"ServiceOrderSapServiceOrderDefectData" yaml:"ServiceOrderSapServiceOrderDefectData"`
	ServiceOrderSapServiceOrderItemData               SapServiceOrderItemDatumSlice               `boil:"ServiceOrderSapServiceOrderItemData" json:"ServiceOrderSapServiceOrderItemData" toml:"ServiceOrderSapServiceOrderItemData" yaml:"ServiceOrderSapServiceOrderItemData"`
	ServiceOrderSapServiceOrderItemPricingElementData SapServiceOrderItemPricingElementDatumSlice `boil:"ServiceOrderSapServiceOrderItemPricingElementData" json:"ServiceOrderSapServiceOrderItemPricingElementData" toml:"ServiceOrderSapServiceOrderItemPricingElementData" yaml:"ServiceOrderSapServiceOrderItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapServiceOrderHeaderDatumR) NewStruct() *sapServiceOrderHeaderDatumR {
	return &sapServiceOrderHeaderDatumR{}
}

// sapServiceOrderHeaderDatumL is where Load methods for each relationship are stored.
type sapServiceOrderHeaderDatumL struct{}

var (
	sapServiceOrderHeaderDatumAllColumns            = []string{"ServiceOrder", "ServiceOrderType", "ServiceOrderUUID", "ServiceOrderDescription", "ServiceObjectType", "Language", "ServiceDocumentPriority", "RequestedServiceStartDateTime", "RequestedServiceEndDateTime", "ServiceDocChangedDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "ServiceOrderIsReleased", "ServiceOrderIsCompleted", "ServiceOrderIsRejected", "SalesOrganization", "DistributionChannel", "Division", "SalesOffice", "SalesGroup", "ShipToParty", "BillToParty", "PayerParty", "ContactPerson", "ServiceDocGrossAmount", "ServiceDocNetAmount", "ServiceDocTaxAmount", "TransactionCurrency", "ReferenceServiceRequest", "ReferenceServiceContract", "ReferenceServiceOrder", "SrvcOrdCreditStatus", "ServiceOrderRejectionReason"}
	sapServiceOrderHeaderDatumColumnsWithoutDefault = []string{"ServiceOrder", "ServiceOrderType", "ServiceOrderUUID", "ServiceOrderDescription", "ServiceObjectType", "Language", "ServiceDocumentPriority", "RequestedServiceStartDateTime", "RequestedServiceEndDateTime", "ServiceDocChangedDateTime", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "ServiceOrderIsReleased", "ServiceOrderIsCompleted", "ServiceOrderIsRejected", "SalesOrganization", "DistributionChannel", "Division", "SalesOffice", "SalesGroup", "ShipToParty", "BillToParty", "PayerParty", "ContactPerson", "ServiceDocGrossAmount", "ServiceDocNetAmount", "ServiceDocTaxAmount", "TransactionCurrency", "ReferenceServiceRequest", "ReferenceServiceContract", "ReferenceServiceOrder", "SrvcOrdCreditStatus", "ServiceOrderRejectionReason"}
	sapServiceOrderHeaderDatumColumnsWithDefault    = []string{}
	sapServiceOrderHeaderDatumPrimaryKeyColumns     = []string{"ServiceOrder"}
	sapServiceOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapServiceOrderHeaderDatumSlice is an alias for a slice of pointers to SapServiceOrderHeaderDatum.
	// This should almost always be used instead of []SapServiceOrderHeaderDatum.
	SapServiceOrderHeaderDatumSlice []*SapServiceOrderHeaderDatum
	// SapServiceOrderHeaderDatumHook is the signature for custom SapServiceOrderHeaderDatum hook methods
	SapServiceOrderHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapServiceOrderHeaderDatum) error

	sapServiceOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapServiceOrderHeaderDatumType                 = reflect.TypeOf(&SapServiceOrderHeaderDatum{})
	sapServiceOrderHeaderDatumMapping              = queries.MakeStructMapping(sapServiceOrderHeaderDatumType)
	sapServiceOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, sapServiceOrderHeaderDatumPrimaryKeyColumns)
	sapServiceOrderHeaderDatumInsertCacheMut       sync.RWMutex
	sapServiceOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	sapServiceOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	sapServiceOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapServiceOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	sapServiceOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapServiceOrderHeaderDatumAfterSelectHooks []SapServiceOrderHeaderDatumHook

var sapServiceOrderHeaderDatumBeforeInsertHooks []SapServiceOrderHeaderDatumHook
var sapServiceOrderHeaderDatumAfterInsertHooks []SapServiceOrderHeaderDatumHook

var sapServiceOrderHeaderDatumBeforeUpdateHooks []SapServiceOrderHeaderDatumHook
var sapServiceOrderHeaderDatumAfterUpdateHooks []SapServiceOrderHeaderDatumHook

var sapServiceOrderHeaderDatumBeforeDeleteHooks []SapServiceOrderHeaderDatumHook
var sapServiceOrderHeaderDatumAfterDeleteHooks []SapServiceOrderHeaderDatumHook

var sapServiceOrderHeaderDatumBeforeUpsertHooks []SapServiceOrderHeaderDatumHook
var sapServiceOrderHeaderDatumAfterUpsertHooks []SapServiceOrderHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapServiceOrderHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapServiceOrderHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapServiceOrderHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapServiceOrderHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapServiceOrderHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapServiceOrderHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapServiceOrderHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapServiceOrderHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapServiceOrderHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapServiceOrderHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapServiceOrderHeaderDatumHook registers your hook function for all future operations.
func AddSapServiceOrderHeaderDatumHook(hookPoint boil.HookPoint, sapServiceOrderHeaderDatumHook SapServiceOrderHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapServiceOrderHeaderDatumAfterSelectHooks = append(sapServiceOrderHeaderDatumAfterSelectHooks, sapServiceOrderHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapServiceOrderHeaderDatumBeforeInsertHooks = append(sapServiceOrderHeaderDatumBeforeInsertHooks, sapServiceOrderHeaderDatumHook)
	case boil.AfterInsertHook:
		sapServiceOrderHeaderDatumAfterInsertHooks = append(sapServiceOrderHeaderDatumAfterInsertHooks, sapServiceOrderHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapServiceOrderHeaderDatumBeforeUpdateHooks = append(sapServiceOrderHeaderDatumBeforeUpdateHooks, sapServiceOrderHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapServiceOrderHeaderDatumAfterUpdateHooks = append(sapServiceOrderHeaderDatumAfterUpdateHooks, sapServiceOrderHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapServiceOrderHeaderDatumBeforeDeleteHooks = append(sapServiceOrderHeaderDatumBeforeDeleteHooks, sapServiceOrderHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapServiceOrderHeaderDatumAfterDeleteHooks = append(sapServiceOrderHeaderDatumAfterDeleteHooks, sapServiceOrderHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapServiceOrderHeaderDatumBeforeUpsertHooks = append(sapServiceOrderHeaderDatumBeforeUpsertHooks, sapServiceOrderHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapServiceOrderHeaderDatumAfterUpsertHooks = append(sapServiceOrderHeaderDatumAfterUpsertHooks, sapServiceOrderHeaderDatumHook)
	}
}

// One returns a single sapServiceOrderHeaderDatum record from the query.
func (q sapServiceOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapServiceOrderHeaderDatum, error) {
	o := &SapServiceOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_service_order_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapServiceOrderHeaderDatum records from the query.
func (q sapServiceOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapServiceOrderHeaderDatumSlice, error) {
	var o []*SapServiceOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapServiceOrderHeaderDatum slice")
	}

	if len(sapServiceOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapServiceOrderHeaderDatum records in the query.
func (q sapServiceOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_service_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapServiceOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_service_order_header_data exists")
	}

	return count > 0, nil
}

// ServiceOrderSapServiceOrderConfirmationDatum pointed to by the foreign key.
func (o *SapServiceOrderHeaderDatum) ServiceOrderSapServiceOrderConfirmationDatum(mods ...qm.QueryMod) sapServiceOrderConfirmationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceOrderConfirmationData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_confirmation_data`")

	return query
}

// ServiceOrderSapServiceOrderPersonResponsibleDatum pointed to by the foreign key.
func (o *SapServiceOrderHeaderDatum) ServiceOrderSapServiceOrderPersonResponsibleDatum(mods ...qm.QueryMod) sapServiceOrderPersonResponsibleDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceOrderPersonResponsibleData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_person_responsible_data`")

	return query
}

// ServiceOrderSapServiceOrderReferenceObjectDatum pointed to by the foreign key.
func (o *SapServiceOrderHeaderDatum) ServiceOrderSapServiceOrderReferenceObjectDatum(mods ...qm.QueryMod) sapServiceOrderReferenceObjectDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ServiceOrder` = ?", o.ServiceOrder),
	}

	queryMods = append(queryMods, mods...)

	query := SapServiceOrderReferenceObjectData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_reference_object_data`")

	return query
}

// ServiceOrderSapServiceOrderDefectData retrieves all the sap_service_order_defect_datum's SapServiceOrderDefectData with an executor via ServiceOrder column.
func (o *SapServiceOrderHeaderDatum) ServiceOrderSapServiceOrderDefectData(mods ...qm.QueryMod) sapServiceOrderDefectDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_service_order_defect_data`.`ServiceOrder`=?", o.ServiceOrder),
	)

	query := SapServiceOrderDefectData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_defect_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_service_order_defect_data`.*"})
	}

	return query
}

// ServiceOrderSapServiceOrderItemData retrieves all the sap_service_order_item_datum's SapServiceOrderItemData with an executor via ServiceOrder column.
func (o *SapServiceOrderHeaderDatum) ServiceOrderSapServiceOrderItemData(mods ...qm.QueryMod) sapServiceOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_service_order_item_data`.`ServiceOrder`=?", o.ServiceOrder),
	)

	query := SapServiceOrderItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_service_order_item_data`.*"})
	}

	return query
}

// ServiceOrderSapServiceOrderItemPricingElementData retrieves all the sap_service_order_item_pricing_element_datum's SapServiceOrderItemPricingElementData with an executor via ServiceOrder column.
func (o *SapServiceOrderHeaderDatum) ServiceOrderSapServiceOrderItemPricingElementData(mods ...qm.QueryMod) sapServiceOrderItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_service_order_item_pricing_element_data`.`ServiceOrder`=?", o.ServiceOrder),
	)

	query := SapServiceOrderItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_service_order_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_service_order_item_pricing_element_data`.*"})
	}

	return query
}

// LoadServiceOrderSapServiceOrderConfirmationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapServiceOrderHeaderDatumL) LoadServiceOrderSapServiceOrderConfirmationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderHeaderDatum
	var object *SapServiceOrderHeaderDatum

	if singular {
		object = maybeSapServiceOrderHeaderDatum.(*SapServiceOrderHeaderDatum)
	} else {
		slice = *maybeSapServiceOrderHeaderDatum.(*[]*SapServiceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderHeaderDatumR{}
		}
		args = append(args, object.ServiceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_confirmation_data`),
		qm.WhereIn(`sap_service_order_confirmation_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderConfirmationDatum")
	}

	var resultSlice []*SapServiceOrderConfirmationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderConfirmationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_confirmation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_confirmation_data")
	}

	if len(sapServiceOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderConfirmationDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderConfirmationDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderHeaderDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderConfirmationDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderConfirmationDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceOrderSapServiceOrderPersonResponsibleDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapServiceOrderHeaderDatumL) LoadServiceOrderSapServiceOrderPersonResponsibleDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderHeaderDatum
	var object *SapServiceOrderHeaderDatum

	if singular {
		object = maybeSapServiceOrderHeaderDatum.(*SapServiceOrderHeaderDatum)
	} else {
		slice = *maybeSapServiceOrderHeaderDatum.(*[]*SapServiceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderHeaderDatumR{}
		}
		args = append(args, object.ServiceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_person_responsible_data`),
		qm.WhereIn(`sap_service_order_person_responsible_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderPersonResponsibleDatum")
	}

	var resultSlice []*SapServiceOrderPersonResponsibleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderPersonResponsibleDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_person_responsible_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_person_responsible_data")
	}

	if len(sapServiceOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderPersonResponsibleDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderPersonResponsibleDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderHeaderDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderPersonResponsibleDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderPersonResponsibleDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceOrderSapServiceOrderReferenceObjectDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapServiceOrderHeaderDatumL) LoadServiceOrderSapServiceOrderReferenceObjectDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderHeaderDatum
	var object *SapServiceOrderHeaderDatum

	if singular {
		object = maybeSapServiceOrderHeaderDatum.(*SapServiceOrderHeaderDatum)
	} else {
		slice = *maybeSapServiceOrderHeaderDatum.(*[]*SapServiceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderHeaderDatumR{}
		}
		args = append(args, object.ServiceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_reference_object_data`),
		qm.WhereIn(`sap_service_order_reference_object_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapServiceOrderReferenceObjectDatum")
	}

	var resultSlice []*SapServiceOrderReferenceObjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapServiceOrderReferenceObjectDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_service_order_reference_object_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_reference_object_data")
	}

	if len(sapServiceOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ServiceOrderSapServiceOrderReferenceObjectDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapServiceOrderReferenceObjectDatumR{}
		}
		foreign.R.ServiceOrderSapServiceOrderHeaderDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderReferenceObjectDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapServiceOrderReferenceObjectDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceOrderSapServiceOrderDefectData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapServiceOrderHeaderDatumL) LoadServiceOrderSapServiceOrderDefectData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderHeaderDatum
	var object *SapServiceOrderHeaderDatum

	if singular {
		object = maybeSapServiceOrderHeaderDatum.(*SapServiceOrderHeaderDatum)
	} else {
		slice = *maybeSapServiceOrderHeaderDatum.(*[]*SapServiceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderHeaderDatumR{}
		}
		args = append(args, object.ServiceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_defect_data`),
		qm.WhereIn(`sap_service_order_defect_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_service_order_defect_data")
	}

	var resultSlice []*SapServiceOrderDefectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_service_order_defect_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_service_order_defect_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_defect_data")
	}

	if len(sapServiceOrderDefectDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceOrderSapServiceOrderDefectData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapServiceOrderDefectDatumR{}
			}
			foreign.R.ServiceOrderSapServiceOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderDefectData = append(local.R.ServiceOrderSapServiceOrderDefectData, foreign)
				if foreign.R == nil {
					foreign.R = &sapServiceOrderDefectDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceOrderSapServiceOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapServiceOrderHeaderDatumL) LoadServiceOrderSapServiceOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderHeaderDatum
	var object *SapServiceOrderHeaderDatum

	if singular {
		object = maybeSapServiceOrderHeaderDatum.(*SapServiceOrderHeaderDatum)
	} else {
		slice = *maybeSapServiceOrderHeaderDatum.(*[]*SapServiceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderHeaderDatumR{}
		}
		args = append(args, object.ServiceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_item_data`),
		qm.WhereIn(`sap_service_order_item_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_service_order_item_data")
	}

	var resultSlice []*SapServiceOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_service_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_service_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_item_data")
	}

	if len(sapServiceOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceOrderSapServiceOrderItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapServiceOrderItemDatumR{}
			}
			foreign.R.ServiceOrderSapServiceOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderItemData = append(local.R.ServiceOrderSapServiceOrderItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapServiceOrderItemDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadServiceOrderSapServiceOrderItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapServiceOrderHeaderDatumL) LoadServiceOrderSapServiceOrderItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapServiceOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapServiceOrderHeaderDatum
	var object *SapServiceOrderHeaderDatum

	if singular {
		object = maybeSapServiceOrderHeaderDatum.(*SapServiceOrderHeaderDatum)
	} else {
		slice = *maybeSapServiceOrderHeaderDatum.(*[]*SapServiceOrderHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapServiceOrderHeaderDatumR{}
		}
		args = append(args, object.ServiceOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapServiceOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ServiceOrder {
					continue Outer
				}
			}

			args = append(args, obj.ServiceOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_service_order_item_pricing_element_data`),
		qm.WhereIn(`sap_service_order_item_pricing_element_data.ServiceOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_service_order_item_pricing_element_data")
	}

	var resultSlice []*SapServiceOrderItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_service_order_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_service_order_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_service_order_item_pricing_element_data")
	}

	if len(sapServiceOrderItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ServiceOrderSapServiceOrderItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapServiceOrderItemPricingElementDatumR{}
			}
			foreign.R.ServiceOrderSapServiceOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ServiceOrder == foreign.ServiceOrder {
				local.R.ServiceOrderSapServiceOrderItemPricingElementData = append(local.R.ServiceOrderSapServiceOrderItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapServiceOrderItemPricingElementDatumR{}
				}
				foreign.R.ServiceOrderSapServiceOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// SetServiceOrderSapServiceOrderConfirmationDatum of the sapServiceOrderHeaderDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderConfirmationDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderHeaderDatum.
func (o *SapServiceOrderHeaderDatum) SetServiceOrderSapServiceOrderConfirmationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderConfirmationDatum) error {
	var err error

	if insert {
		related.ServiceOrder = o.ServiceOrder

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_service_order_confirmation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderConfirmationDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.ServiceOrder, related.ServiceOrder}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceOrder = o.ServiceOrder

	}

	if o.R == nil {
		o.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderConfirmationDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderConfirmationDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderConfirmationDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: o,
		}
	} else {
		related.R.ServiceOrderSapServiceOrderHeaderDatum = o
	}
	return nil
}

// SetServiceOrderSapServiceOrderPersonResponsibleDatum of the sapServiceOrderHeaderDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderPersonResponsibleDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderHeaderDatum.
func (o *SapServiceOrderHeaderDatum) SetServiceOrderSapServiceOrderPersonResponsibleDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderPersonResponsibleDatum) error {
	var err error

	if insert {
		related.ServiceOrder = o.ServiceOrder

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_service_order_person_responsible_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderPersonResponsibleDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.ServiceOrder, related.ServiceOrder}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceOrder = o.ServiceOrder

	}

	if o.R == nil {
		o.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderPersonResponsibleDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderPersonResponsibleDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderPersonResponsibleDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: o,
		}
	} else {
		related.R.ServiceOrderSapServiceOrderHeaderDatum = o
	}
	return nil
}

// SetServiceOrderSapServiceOrderReferenceObjectDatum of the sapServiceOrderHeaderDatum to the related item.
// Sets o.R.ServiceOrderSapServiceOrderReferenceObjectDatum to related.
// Adds o to related.R.ServiceOrderSapServiceOrderHeaderDatum.
func (o *SapServiceOrderHeaderDatum) SetServiceOrderSapServiceOrderReferenceObjectDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapServiceOrderReferenceObjectDatum) error {
	var err error

	if insert {
		related.ServiceOrder = o.ServiceOrder

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_service_order_reference_object_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderReferenceObjectDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.ServiceOrder, related.ServiceOrder}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ServiceOrder = o.ServiceOrder

	}

	if o.R == nil {
		o.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderReferenceObjectDatum: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderReferenceObjectDatum = related
	}

	if related.R == nil {
		related.R = &sapServiceOrderReferenceObjectDatumR{
			ServiceOrderSapServiceOrderHeaderDatum: o,
		}
	} else {
		related.R.ServiceOrderSapServiceOrderHeaderDatum = o
	}
	return nil
}

// AddServiceOrderSapServiceOrderDefectData adds the given related objects to the existing relationships
// of the sap_service_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.ServiceOrderSapServiceOrderDefectData.
// Sets related.R.ServiceOrderSapServiceOrderHeaderDatum appropriately.
func (o *SapServiceOrderHeaderDatum) AddServiceOrderSapServiceOrderDefectData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapServiceOrderDefectDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceOrder = o.ServiceOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_service_order_defect_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
				strmangle.WhereClause("`", "`", 0, sapServiceOrderDefectDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ServiceOrder, rel.ServiceOrder, rel.SrvcDocTypeDefectCodeProfType, rel.ServiceDefectSequence}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceOrder = o.ServiceOrder
		}
	}

	if o.R == nil {
		o.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderDefectData: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderDefectData = append(o.R.ServiceOrderSapServiceOrderDefectData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapServiceOrderDefectDatumR{
				ServiceOrderSapServiceOrderHeaderDatum: o,
			}
		} else {
			rel.R.ServiceOrderSapServiceOrderHeaderDatum = o
		}
	}
	return nil
}

// AddServiceOrderSapServiceOrderItemData adds the given related objects to the existing relationships
// of the sap_service_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.ServiceOrderSapServiceOrderItemData.
// Sets related.R.ServiceOrderSapServiceOrderHeaderDatum appropriately.
func (o *SapServiceOrderHeaderDatum) AddServiceOrderSapServiceOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapServiceOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceOrder = o.ServiceOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_service_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
				strmangle.WhereClause("`", "`", 0, sapServiceOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ServiceOrder, rel.ServiceOrder, rel.ServiceOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceOrder = o.ServiceOrder
		}
	}

	if o.R == nil {
		o.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderItemData: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderItemData = append(o.R.ServiceOrderSapServiceOrderItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapServiceOrderItemDatumR{
				ServiceOrderSapServiceOrderHeaderDatum: o,
			}
		} else {
			rel.R.ServiceOrderSapServiceOrderHeaderDatum = o
		}
	}
	return nil
}

// AddServiceOrderSapServiceOrderItemPricingElementData adds the given related objects to the existing relationships
// of the sap_service_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.ServiceOrderSapServiceOrderItemPricingElementData.
// Sets related.R.ServiceOrderSapServiceOrderHeaderDatum appropriately.
func (o *SapServiceOrderHeaderDatum) AddServiceOrderSapServiceOrderItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapServiceOrderItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ServiceOrder = o.ServiceOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_service_order_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ServiceOrder"}),
				strmangle.WhereClause("`", "`", 0, sapServiceOrderItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ServiceOrder, rel.ServiceOrder, rel.ServiceOrderItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ServiceOrder = o.ServiceOrder
		}
	}

	if o.R == nil {
		o.R = &sapServiceOrderHeaderDatumR{
			ServiceOrderSapServiceOrderItemPricingElementData: related,
		}
	} else {
		o.R.ServiceOrderSapServiceOrderItemPricingElementData = append(o.R.ServiceOrderSapServiceOrderItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapServiceOrderItemPricingElementDatumR{
				ServiceOrderSapServiceOrderHeaderDatum: o,
			}
		} else {
			rel.R.ServiceOrderSapServiceOrderHeaderDatum = o
		}
	}
	return nil
}

// SapServiceOrderHeaderData retrieves all the records using an executor.
func SapServiceOrderHeaderData(mods ...qm.QueryMod) sapServiceOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_service_order_header_data`"))
	return sapServiceOrderHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapServiceOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapServiceOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, serviceOrder string, selectCols ...string) (*SapServiceOrderHeaderDatum, error) {
	sapServiceOrderHeaderDatumObj := &SapServiceOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_service_order_header_data` where `ServiceOrder`=?", sel,
	)

	q := queries.Raw(query, serviceOrder)

	err := q.Bind(ctx, exec, sapServiceOrderHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_service_order_header_data")
	}

	if err = sapServiceOrderHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapServiceOrderHeaderDatumObj, err
	}

	return sapServiceOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapServiceOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapServiceOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapServiceOrderHeaderDatumInsertCache[key]
	sapServiceOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapServiceOrderHeaderDatumAllColumns,
			sapServiceOrderHeaderDatumColumnsWithDefault,
			sapServiceOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_service_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_service_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_service_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapServiceOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_service_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ServiceOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderHeaderDatumInsertCacheMut.Lock()
		sapServiceOrderHeaderDatumInsertCache[key] = cache
		sapServiceOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapServiceOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapServiceOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapServiceOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapServiceOrderHeaderDatumUpdateCache[key]
	sapServiceOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapServiceOrderHeaderDatumAllColumns,
			sapServiceOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_service_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_service_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapServiceOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, append(wl, sapServiceOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_service_order_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_service_order_header_data")
	}

	if !cached {
		sapServiceOrderHeaderDatumUpdateCacheMut.Lock()
		sapServiceOrderHeaderDatumUpdateCache[key] = cache
		sapServiceOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapServiceOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_service_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_service_order_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapServiceOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_service_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapServiceOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapServiceOrderHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapServiceOrderHeaderDatumUniqueColumns = []string{
	"ServiceOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapServiceOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_service_order_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapServiceOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapServiceOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapServiceOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapServiceOrderHeaderDatumUpsertCache[key]
	sapServiceOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapServiceOrderHeaderDatumAllColumns,
			sapServiceOrderHeaderDatumColumnsWithDefault,
			sapServiceOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapServiceOrderHeaderDatumAllColumns,
			sapServiceOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_service_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_service_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_service_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_service_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapServiceOrderHeaderDatumType, sapServiceOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_service_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_service_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapServiceOrderHeaderDatumUpsertCacheMut.Lock()
		sapServiceOrderHeaderDatumUpsertCache[key] = cache
		sapServiceOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapServiceOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapServiceOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapServiceOrderHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapServiceOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_service_order_header_data` WHERE `ServiceOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_service_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_service_order_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapServiceOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapServiceOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_service_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapServiceOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapServiceOrderHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_service_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapServiceOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_service_order_header_data")
	}

	if len(sapServiceOrderHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapServiceOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapServiceOrderHeaderDatum(ctx, exec, o.ServiceOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapServiceOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapServiceOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapServiceOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_service_order_header_data`.* FROM `sap_service_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapServiceOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapServiceOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapServiceOrderHeaderDatumExists checks if the SapServiceOrderHeaderDatum row exists.
func SapServiceOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, serviceOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_service_order_header_data` where `ServiceOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, serviceOrder)
	}
	row := exec.QueryRowContext(ctx, sql, serviceOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_service_order_header_data exists")
	}

	return exists, nil
}
