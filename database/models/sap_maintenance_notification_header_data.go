// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapMaintenanceNotificationHeaderDatum is an object representing the database table.
type SapMaintenanceNotificationHeaderDatum struct {
	MaintenanceNotification        string      `boil:"MaintenanceNotification" json:"MaintenanceNotification" toml:"MaintenanceNotification" yaml:"MaintenanceNotification"`
	MaintNotifInternalID           null.String `boil:"MaintNotifInternalID" json:"MaintNotifInternalID,omitempty" toml:"MaintNotifInternalID" yaml:"MaintNotifInternalID,omitempty"`
	NotificationText               null.String `boil:"NotificationText" json:"NotificationText,omitempty" toml:"NotificationText" yaml:"NotificationText,omitempty"`
	MaintPriority                  null.String `boil:"MaintPriority" json:"MaintPriority,omitempty" toml:"MaintPriority" yaml:"MaintPriority,omitempty"`
	NotificationType               null.String `boil:"NotificationType" json:"NotificationType,omitempty" toml:"NotificationType" yaml:"NotificationType,omitempty"`
	NotifProcessingPhase           null.String `boil:"NotifProcessingPhase" json:"NotifProcessingPhase,omitempty" toml:"NotifProcessingPhase" yaml:"NotifProcessingPhase,omitempty"`
	NotifProcessingPhaseDesc       null.String `boil:"NotifProcessingPhaseDesc" json:"NotifProcessingPhaseDesc,omitempty" toml:"NotifProcessingPhaseDesc" yaml:"NotifProcessingPhaseDesc,omitempty"`
	MaintPriorityDesc              null.String `boil:"MaintPriorityDesc" json:"MaintPriorityDesc,omitempty" toml:"MaintPriorityDesc" yaml:"MaintPriorityDesc,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeTime                 null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeDateTime             null.String `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	CreationTime                   null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	ReportedByUser                 null.String `boil:"ReportedByUser" json:"ReportedByUser,omitempty" toml:"ReportedByUser" yaml:"ReportedByUser,omitempty"`
	ReporterFullName               null.String `boil:"ReporterFullName" json:"ReporterFullName,omitempty" toml:"ReporterFullName" yaml:"ReporterFullName,omitempty"`
	PersonResponsible              null.String `boil:"PersonResponsible" json:"PersonResponsible,omitempty" toml:"PersonResponsible" yaml:"PersonResponsible,omitempty"`
	MalfunctionEffect              null.String `boil:"MalfunctionEffect" json:"MalfunctionEffect,omitempty" toml:"MalfunctionEffect" yaml:"MalfunctionEffect,omitempty"`
	MalfunctionEffectText          null.String `boil:"MalfunctionEffectText" json:"MalfunctionEffectText,omitempty" toml:"MalfunctionEffectText" yaml:"MalfunctionEffectText,omitempty"`
	MalfunctionStartDate           null.String `boil:"MalfunctionStartDate" json:"MalfunctionStartDate,omitempty" toml:"MalfunctionStartDate" yaml:"MalfunctionStartDate,omitempty"`
	MalfunctionStartTime           null.String `boil:"MalfunctionStartTime" json:"MalfunctionStartTime,omitempty" toml:"MalfunctionStartTime" yaml:"MalfunctionStartTime,omitempty"`
	MalfunctionEndDate             null.String `boil:"MalfunctionEndDate" json:"MalfunctionEndDate,omitempty" toml:"MalfunctionEndDate" yaml:"MalfunctionEndDate,omitempty"`
	MalfunctionEndTime             null.String `boil:"MalfunctionEndTime" json:"MalfunctionEndTime,omitempty" toml:"MalfunctionEndTime" yaml:"MalfunctionEndTime,omitempty"`
	MaintNotificationCatalog       null.String `boil:"MaintNotificationCatalog" json:"MaintNotificationCatalog,omitempty" toml:"MaintNotificationCatalog" yaml:"MaintNotificationCatalog,omitempty"`
	MaintNotificationCode          null.String `boil:"MaintNotificationCode" json:"MaintNotificationCode,omitempty" toml:"MaintNotificationCode" yaml:"MaintNotificationCode,omitempty"`
	MaintNotificationCodeGroup     null.String `boil:"MaintNotificationCodeGroup" json:"MaintNotificationCodeGroup,omitempty" toml:"MaintNotificationCodeGroup" yaml:"MaintNotificationCodeGroup,omitempty"`
	CatalogProfile                 null.String `boil:"CatalogProfile" json:"CatalogProfile,omitempty" toml:"CatalogProfile" yaml:"CatalogProfile,omitempty"`
	NotificationCreationDate       null.String `boil:"NotificationCreationDate" json:"NotificationCreationDate,omitempty" toml:"NotificationCreationDate" yaml:"NotificationCreationDate,omitempty"`
	NotificationCreationTime       null.String `boil:"NotificationCreationTime" json:"NotificationCreationTime,omitempty" toml:"NotificationCreationTime" yaml:"NotificationCreationTime,omitempty"`
	NotificationTimeZone           null.String `boil:"NotificationTimeZone" json:"NotificationTimeZone,omitempty" toml:"NotificationTimeZone" yaml:"NotificationTimeZone,omitempty"`
	RequiredStartDate              null.String `boil:"RequiredStartDate" json:"RequiredStartDate,omitempty" toml:"RequiredStartDate" yaml:"RequiredStartDate,omitempty"`
	RequiredStartTime              null.String `boil:"RequiredStartTime" json:"RequiredStartTime,omitempty" toml:"RequiredStartTime" yaml:"RequiredStartTime,omitempty"`
	RequiredEndDate                null.String `boil:"RequiredEndDate" json:"RequiredEndDate,omitempty" toml:"RequiredEndDate" yaml:"RequiredEndDate,omitempty"`
	RequiredEndTime                null.String `boil:"RequiredEndTime" json:"RequiredEndTime,omitempty" toml:"RequiredEndTime" yaml:"RequiredEndTime,omitempty"`
	LatestAcceptableCompletionDate null.String `boil:"LatestAcceptableCompletionDate" json:"LatestAcceptableCompletionDate,omitempty" toml:"LatestAcceptableCompletionDate" yaml:"LatestAcceptableCompletionDate,omitempty"`
	MaintenanceObjectIsDown        null.Bool   `boil:"MaintenanceObjectIsDown" json:"MaintenanceObjectIsDown,omitempty" toml:"MaintenanceObjectIsDown" yaml:"MaintenanceObjectIsDown,omitempty"`
	MaintNotificationLongText      null.String `boil:"MaintNotificationLongText" json:"MaintNotificationLongText,omitempty" toml:"MaintNotificationLongText" yaml:"MaintNotificationLongText,omitempty"`
	MaintNotifLongTextForEdit      null.String `boil:"MaintNotifLongTextForEdit" json:"MaintNotifLongTextForEdit,omitempty" toml:"MaintNotifLongTextForEdit" yaml:"MaintNotifLongTextForEdit,omitempty"`
	TechnicalObject                null.String `boil:"TechnicalObject" json:"TechnicalObject,omitempty" toml:"TechnicalObject" yaml:"TechnicalObject,omitempty"`
	TechObjIsEquipOrFuncnlLoc      null.String `boil:"TechObjIsEquipOrFuncnlLoc" json:"TechObjIsEquipOrFuncnlLoc,omitempty" toml:"TechObjIsEquipOrFuncnlLoc" yaml:"TechObjIsEquipOrFuncnlLoc,omitempty"`
	TechnicalObjectLabel           null.String `boil:"TechnicalObjectLabel" json:"TechnicalObjectLabel,omitempty" toml:"TechnicalObjectLabel" yaml:"TechnicalObjectLabel,omitempty"`
	MaintenancePlanningPlant       null.String `boil:"MaintenancePlanningPlant" json:"MaintenancePlanningPlant,omitempty" toml:"MaintenancePlanningPlant" yaml:"MaintenancePlanningPlant,omitempty"`
	MaintenancePlannerGroup        null.String `boil:"MaintenancePlannerGroup" json:"MaintenancePlannerGroup,omitempty" toml:"MaintenancePlannerGroup" yaml:"MaintenancePlannerGroup,omitempty"`
	SuperiorTechnicalObject        null.String `boil:"SuperiorTechnicalObject" json:"SuperiorTechnicalObject,omitempty" toml:"SuperiorTechnicalObject" yaml:"SuperiorTechnicalObject,omitempty"`
	SuperiorTechnicalObjectName    null.String `boil:"SuperiorTechnicalObjectName" json:"SuperiorTechnicalObjectName,omitempty" toml:"SuperiorTechnicalObjectName" yaml:"SuperiorTechnicalObjectName,omitempty"`
	SuperiorObjIsEquipOrFuncnlLoc  null.String `boil:"SuperiorObjIsEquipOrFuncnlLoc" json:"SuperiorObjIsEquipOrFuncnlLoc,omitempty" toml:"SuperiorObjIsEquipOrFuncnlLoc" yaml:"SuperiorObjIsEquipOrFuncnlLoc,omitempty"`
	SuperiorTechnicalObjectLabel   null.String `boil:"SuperiorTechnicalObjectLabel" json:"SuperiorTechnicalObjectLabel,omitempty" toml:"SuperiorTechnicalObjectLabel" yaml:"SuperiorTechnicalObjectLabel,omitempty"`
	ManufacturerPartTypeName       null.String `boil:"ManufacturerPartTypeName" json:"ManufacturerPartTypeName,omitempty" toml:"ManufacturerPartTypeName" yaml:"ManufacturerPartTypeName,omitempty"`
	TechObjIsEquipOrFuncnlLocDesc  null.String `boil:"TechObjIsEquipOrFuncnlLocDesc" json:"TechObjIsEquipOrFuncnlLocDesc,omitempty" toml:"TechObjIsEquipOrFuncnlLocDesc" yaml:"TechObjIsEquipOrFuncnlLocDesc,omitempty"`
	FunctionalLocation             null.String `boil:"FunctionalLocation" json:"FunctionalLocation,omitempty" toml:"FunctionalLocation" yaml:"FunctionalLocation,omitempty"`
	FunctionalLocationLabelName    null.String `boil:"FunctionalLocationLabelName" json:"FunctionalLocationLabelName,omitempty" toml:"FunctionalLocationLabelName" yaml:"FunctionalLocationLabelName,omitempty"`
	TechnicalObjectDescription     null.String `boil:"TechnicalObjectDescription" json:"TechnicalObjectDescription,omitempty" toml:"TechnicalObjectDescription" yaml:"TechnicalObjectDescription,omitempty"`
	AssetLocation                  null.String `boil:"AssetLocation" json:"AssetLocation,omitempty" toml:"AssetLocation" yaml:"AssetLocation,omitempty"`
	LocationName                   null.String `boil:"LocationName" json:"LocationName,omitempty" toml:"LocationName" yaml:"LocationName,omitempty"`
	BusinessArea                   null.String `boil:"BusinessArea" json:"BusinessArea,omitempty" toml:"BusinessArea" yaml:"BusinessArea,omitempty"`
	CompanyCode                    null.String `boil:"CompanyCode" json:"CompanyCode,omitempty" toml:"CompanyCode" yaml:"CompanyCode,omitempty"`
	TechnicalObjectCategory        null.String `boil:"TechnicalObjectCategory" json:"TechnicalObjectCategory,omitempty" toml:"TechnicalObjectCategory" yaml:"TechnicalObjectCategory,omitempty"`
	TechnicalObjectType            null.String `boil:"TechnicalObjectType" json:"TechnicalObjectType,omitempty" toml:"TechnicalObjectType" yaml:"TechnicalObjectType,omitempty"`
	MainWorkCenterPlant            null.String `boil:"MainWorkCenterPlant" json:"MainWorkCenterPlant,omitempty" toml:"MainWorkCenterPlant" yaml:"MainWorkCenterPlant,omitempty"`
	MainWorkCenter                 null.String `boil:"MainWorkCenter" json:"MainWorkCenter,omitempty" toml:"MainWorkCenter" yaml:"MainWorkCenter,omitempty"`
	PlantName                      null.String `boil:"PlantName" json:"PlantName,omitempty" toml:"PlantName" yaml:"PlantName,omitempty"`
	MaintenancePlannerGroupName    null.String `boil:"MaintenancePlannerGroupName" json:"MaintenancePlannerGroupName,omitempty" toml:"MaintenancePlannerGroupName" yaml:"MaintenancePlannerGroupName,omitempty"`
	MaintenancePlant               null.String `boil:"MaintenancePlant" json:"MaintenancePlant,omitempty" toml:"MaintenancePlant" yaml:"MaintenancePlant,omitempty"`
	LocationDescription            null.String `boil:"LocationDescription" json:"LocationDescription,omitempty" toml:"LocationDescription" yaml:"LocationDescription,omitempty"`
	MainWorkCenterText             null.String `boil:"MainWorkCenterText" json:"MainWorkCenterText,omitempty" toml:"MainWorkCenterText" yaml:"MainWorkCenterText,omitempty"`
	MainWorkCenterPlantName        null.String `boil:"MainWorkCenterPlantName" json:"MainWorkCenterPlantName,omitempty" toml:"MainWorkCenterPlantName" yaml:"MainWorkCenterPlantName,omitempty"`
	MaintenancePlantName           null.String `boil:"MaintenancePlantName" json:"MaintenancePlantName,omitempty" toml:"MaintenancePlantName" yaml:"MaintenancePlantName,omitempty"`
	PlantSectionPersonRespName     null.String `boil:"PlantSectionPersonRespName" json:"PlantSectionPersonRespName,omitempty" toml:"PlantSectionPersonRespName" yaml:"PlantSectionPersonRespName,omitempty"`
	PersonResponsibleName          null.String `boil:"PersonResponsibleName" json:"PersonResponsibleName,omitempty" toml:"PersonResponsibleName" yaml:"PersonResponsibleName,omitempty"`
	MaintenanceOrder               null.String `boil:"MaintenanceOrder" json:"MaintenanceOrder,omitempty" toml:"MaintenanceOrder" yaml:"MaintenanceOrder,omitempty"`
	MaintenanceOrderType           null.String `boil:"MaintenanceOrderType" json:"MaintenanceOrderType,omitempty" toml:"MaintenanceOrderType" yaml:"MaintenanceOrderType,omitempty"`
	MaintenanceActivityType        null.String `boil:"MaintenanceActivityType" json:"MaintenanceActivityType,omitempty" toml:"MaintenanceActivityType" yaml:"MaintenanceActivityType,omitempty"`
	MaintObjDowntimeDurationUnit   null.String `boil:"MaintObjDowntimeDurationUnit" json:"MaintObjDowntimeDurationUnit,omitempty" toml:"MaintObjDowntimeDurationUnit" yaml:"MaintObjDowntimeDurationUnit,omitempty"`
	MaintObjectDowntimeDuration    null.String `boil:"MaintObjectDowntimeDuration" json:"MaintObjectDowntimeDuration,omitempty" toml:"MaintObjectDowntimeDuration" yaml:"MaintObjectDowntimeDuration,omitempty"`
	MaintenancePlan                null.String `boil:"MaintenancePlan" json:"MaintenancePlan,omitempty" toml:"MaintenancePlan" yaml:"MaintenancePlan,omitempty"`
	MaintenanceItem                null.String `boil:"MaintenanceItem" json:"MaintenanceItem,omitempty" toml:"MaintenanceItem" yaml:"MaintenanceItem,omitempty"`
	TaskListGroup                  null.String `boil:"TaskListGroup" json:"TaskListGroup,omitempty" toml:"TaskListGroup" yaml:"TaskListGroup,omitempty"`
	TaskListGroupCounter           null.String `boil:"TaskListGroupCounter" json:"TaskListGroupCounter,omitempty" toml:"TaskListGroupCounter" yaml:"TaskListGroupCounter,omitempty"`
	MaintenancePlanCallNumber      null.Int    `boil:"MaintenancePlanCallNumber" json:"MaintenancePlanCallNumber,omitempty" toml:"MaintenancePlanCallNumber" yaml:"MaintenancePlanCallNumber,omitempty"`
	MaintenanceTaskListType        null.String `boil:"MaintenanceTaskListType" json:"MaintenanceTaskListType,omitempty" toml:"MaintenanceTaskListType" yaml:"MaintenanceTaskListType,omitempty"`
	NotificationReferenceDate      null.String `boil:"NotificationReferenceDate" json:"NotificationReferenceDate,omitempty" toml:"NotificationReferenceDate" yaml:"NotificationReferenceDate,omitempty"`
	NotificationReferenceTime      null.String `boil:"NotificationReferenceTime" json:"NotificationReferenceTime,omitempty" toml:"NotificationReferenceTime" yaml:"NotificationReferenceTime,omitempty"`
	NotificationCompletionDate     null.String `boil:"NotificationCompletionDate" json:"NotificationCompletionDate,omitempty" toml:"NotificationCompletionDate" yaml:"NotificationCompletionDate,omitempty"`
	CompletionTime                 null.String `boil:"CompletionTime" json:"CompletionTime,omitempty" toml:"CompletionTime" yaml:"CompletionTime,omitempty"`
	AssetRoom                      null.String `boil:"AssetRoom" json:"AssetRoom,omitempty" toml:"AssetRoom" yaml:"AssetRoom,omitempty"`
	MaintNotifExtReferenceNumber   null.String `boil:"MaintNotifExtReferenceNumber" json:"MaintNotifExtReferenceNumber,omitempty" toml:"MaintNotifExtReferenceNumber" yaml:"MaintNotifExtReferenceNumber,omitempty"`
	MaintNotifRejectionReasonCode  null.String `boil:"MaintNotifRejectionReasonCode" json:"MaintNotifRejectionReasonCode,omitempty" toml:"MaintNotifRejectionReasonCode" yaml:"MaintNotifRejectionReasonCode,omitempty"`
	MaintNotifRejectionRsnCodeTxt  null.String `boil:"MaintNotifRejectionRsnCodeTxt" json:"MaintNotifRejectionRsnCodeTxt,omitempty" toml:"MaintNotifRejectionRsnCodeTxt" yaml:"MaintNotifRejectionRsnCodeTxt,omitempty"`
	MaintNotifDetectionCatalog     null.String `boil:"MaintNotifDetectionCatalog" json:"MaintNotifDetectionCatalog,omitempty" toml:"MaintNotifDetectionCatalog" yaml:"MaintNotifDetectionCatalog,omitempty"`
	MaintNotifDetectionCode        null.String `boil:"MaintNotifDetectionCode" json:"MaintNotifDetectionCode,omitempty" toml:"MaintNotifDetectionCode" yaml:"MaintNotifDetectionCode,omitempty"`
	MaintNotifDetectionCodeText    null.String `boil:"MaintNotifDetectionCodeText" json:"MaintNotifDetectionCodeText,omitempty" toml:"MaintNotifDetectionCodeText" yaml:"MaintNotifDetectionCodeText,omitempty"`
	MaintNotifDetectionCodeGroup   null.String `boil:"MaintNotifDetectionCodeGroup" json:"MaintNotifDetectionCodeGroup,omitempty" toml:"MaintNotifDetectionCodeGroup" yaml:"MaintNotifDetectionCodeGroup,omitempty"`
	MaintNotifDetectionCodeGrpTxt  null.String `boil:"MaintNotifDetectionCodeGrpTxt" json:"MaintNotifDetectionCodeGrpTxt,omitempty" toml:"MaintNotifDetectionCodeGrpTxt" yaml:"MaintNotifDetectionCodeGrpTxt,omitempty"`
	MaintNotifProcessPhaseCode     null.String `boil:"MaintNotifProcessPhaseCode" json:"MaintNotifProcessPhaseCode,omitempty" toml:"MaintNotifProcessPhaseCode" yaml:"MaintNotifProcessPhaseCode,omitempty"`
	MaintNotifProcessSubPhaseCode  null.String `boil:"MaintNotifProcessSubPhaseCode" json:"MaintNotifProcessSubPhaseCode,omitempty" toml:"MaintNotifProcessSubPhaseCode" yaml:"MaintNotifProcessSubPhaseCode,omitempty"`

	R *sapMaintenanceNotificationHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapMaintenanceNotificationHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapMaintenanceNotificationHeaderDatumColumns = struct {
	MaintenanceNotification        string
	MaintNotifInternalID           string
	NotificationText               string
	MaintPriority                  string
	NotificationType               string
	NotifProcessingPhase           string
	NotifProcessingPhaseDesc       string
	MaintPriorityDesc              string
	CreationDate                   string
	LastChangeTime                 string
	LastChangeDate                 string
	LastChangeDateTime             string
	CreationTime                   string
	ReportedByUser                 string
	ReporterFullName               string
	PersonResponsible              string
	MalfunctionEffect              string
	MalfunctionEffectText          string
	MalfunctionStartDate           string
	MalfunctionStartTime           string
	MalfunctionEndDate             string
	MalfunctionEndTime             string
	MaintNotificationCatalog       string
	MaintNotificationCode          string
	MaintNotificationCodeGroup     string
	CatalogProfile                 string
	NotificationCreationDate       string
	NotificationCreationTime       string
	NotificationTimeZone           string
	RequiredStartDate              string
	RequiredStartTime              string
	RequiredEndDate                string
	RequiredEndTime                string
	LatestAcceptableCompletionDate string
	MaintenanceObjectIsDown        string
	MaintNotificationLongText      string
	MaintNotifLongTextForEdit      string
	TechnicalObject                string
	TechObjIsEquipOrFuncnlLoc      string
	TechnicalObjectLabel           string
	MaintenancePlanningPlant       string
	MaintenancePlannerGroup        string
	SuperiorTechnicalObject        string
	SuperiorTechnicalObjectName    string
	SuperiorObjIsEquipOrFuncnlLoc  string
	SuperiorTechnicalObjectLabel   string
	ManufacturerPartTypeName       string
	TechObjIsEquipOrFuncnlLocDesc  string
	FunctionalLocation             string
	FunctionalLocationLabelName    string
	TechnicalObjectDescription     string
	AssetLocation                  string
	LocationName                   string
	BusinessArea                   string
	CompanyCode                    string
	TechnicalObjectCategory        string
	TechnicalObjectType            string
	MainWorkCenterPlant            string
	MainWorkCenter                 string
	PlantName                      string
	MaintenancePlannerGroupName    string
	MaintenancePlant               string
	LocationDescription            string
	MainWorkCenterText             string
	MainWorkCenterPlantName        string
	MaintenancePlantName           string
	PlantSectionPersonRespName     string
	PersonResponsibleName          string
	MaintenanceOrder               string
	MaintenanceOrderType           string
	MaintenanceActivityType        string
	MaintObjDowntimeDurationUnit   string
	MaintObjectDowntimeDuration    string
	MaintenancePlan                string
	MaintenanceItem                string
	TaskListGroup                  string
	TaskListGroupCounter           string
	MaintenancePlanCallNumber      string
	MaintenanceTaskListType        string
	NotificationReferenceDate      string
	NotificationReferenceTime      string
	NotificationCompletionDate     string
	CompletionTime                 string
	AssetRoom                      string
	MaintNotifExtReferenceNumber   string
	MaintNotifRejectionReasonCode  string
	MaintNotifRejectionRsnCodeTxt  string
	MaintNotifDetectionCatalog     string
	MaintNotifDetectionCode        string
	MaintNotifDetectionCodeText    string
	MaintNotifDetectionCodeGroup   string
	MaintNotifDetectionCodeGrpTxt  string
	MaintNotifProcessPhaseCode     string
	MaintNotifProcessSubPhaseCode  string
}{
	MaintenanceNotification:        "MaintenanceNotification",
	MaintNotifInternalID:           "MaintNotifInternalID",
	NotificationText:               "NotificationText",
	MaintPriority:                  "MaintPriority",
	NotificationType:               "NotificationType",
	NotifProcessingPhase:           "NotifProcessingPhase",
	NotifProcessingPhaseDesc:       "NotifProcessingPhaseDesc",
	MaintPriorityDesc:              "MaintPriorityDesc",
	CreationDate:                   "CreationDate",
	LastChangeTime:                 "LastChangeTime",
	LastChangeDate:                 "LastChangeDate",
	LastChangeDateTime:             "LastChangeDateTime",
	CreationTime:                   "CreationTime",
	ReportedByUser:                 "ReportedByUser",
	ReporterFullName:               "ReporterFullName",
	PersonResponsible:              "PersonResponsible",
	MalfunctionEffect:              "MalfunctionEffect",
	MalfunctionEffectText:          "MalfunctionEffectText",
	MalfunctionStartDate:           "MalfunctionStartDate",
	MalfunctionStartTime:           "MalfunctionStartTime",
	MalfunctionEndDate:             "MalfunctionEndDate",
	MalfunctionEndTime:             "MalfunctionEndTime",
	MaintNotificationCatalog:       "MaintNotificationCatalog",
	MaintNotificationCode:          "MaintNotificationCode",
	MaintNotificationCodeGroup:     "MaintNotificationCodeGroup",
	CatalogProfile:                 "CatalogProfile",
	NotificationCreationDate:       "NotificationCreationDate",
	NotificationCreationTime:       "NotificationCreationTime",
	NotificationTimeZone:           "NotificationTimeZone",
	RequiredStartDate:              "RequiredStartDate",
	RequiredStartTime:              "RequiredStartTime",
	RequiredEndDate:                "RequiredEndDate",
	RequiredEndTime:                "RequiredEndTime",
	LatestAcceptableCompletionDate: "LatestAcceptableCompletionDate",
	MaintenanceObjectIsDown:        "MaintenanceObjectIsDown",
	MaintNotificationLongText:      "MaintNotificationLongText",
	MaintNotifLongTextForEdit:      "MaintNotifLongTextForEdit",
	TechnicalObject:                "TechnicalObject",
	TechObjIsEquipOrFuncnlLoc:      "TechObjIsEquipOrFuncnlLoc",
	TechnicalObjectLabel:           "TechnicalObjectLabel",
	MaintenancePlanningPlant:       "MaintenancePlanningPlant",
	MaintenancePlannerGroup:        "MaintenancePlannerGroup",
	SuperiorTechnicalObject:        "SuperiorTechnicalObject",
	SuperiorTechnicalObjectName:    "SuperiorTechnicalObjectName",
	SuperiorObjIsEquipOrFuncnlLoc:  "SuperiorObjIsEquipOrFuncnlLoc",
	SuperiorTechnicalObjectLabel:   "SuperiorTechnicalObjectLabel",
	ManufacturerPartTypeName:       "ManufacturerPartTypeName",
	TechObjIsEquipOrFuncnlLocDesc:  "TechObjIsEquipOrFuncnlLocDesc",
	FunctionalLocation:             "FunctionalLocation",
	FunctionalLocationLabelName:    "FunctionalLocationLabelName",
	TechnicalObjectDescription:     "TechnicalObjectDescription",
	AssetLocation:                  "AssetLocation",
	LocationName:                   "LocationName",
	BusinessArea:                   "BusinessArea",
	CompanyCode:                    "CompanyCode",
	TechnicalObjectCategory:        "TechnicalObjectCategory",
	TechnicalObjectType:            "TechnicalObjectType",
	MainWorkCenterPlant:            "MainWorkCenterPlant",
	MainWorkCenter:                 "MainWorkCenter",
	PlantName:                      "PlantName",
	MaintenancePlannerGroupName:    "MaintenancePlannerGroupName",
	MaintenancePlant:               "MaintenancePlant",
	LocationDescription:            "LocationDescription",
	MainWorkCenterText:             "MainWorkCenterText",
	MainWorkCenterPlantName:        "MainWorkCenterPlantName",
	MaintenancePlantName:           "MaintenancePlantName",
	PlantSectionPersonRespName:     "PlantSectionPersonRespName",
	PersonResponsibleName:          "PersonResponsibleName",
	MaintenanceOrder:               "MaintenanceOrder",
	MaintenanceOrderType:           "MaintenanceOrderType",
	MaintenanceActivityType:        "MaintenanceActivityType",
	MaintObjDowntimeDurationUnit:   "MaintObjDowntimeDurationUnit",
	MaintObjectDowntimeDuration:    "MaintObjectDowntimeDuration",
	MaintenancePlan:                "MaintenancePlan",
	MaintenanceItem:                "MaintenanceItem",
	TaskListGroup:                  "TaskListGroup",
	TaskListGroupCounter:           "TaskListGroupCounter",
	MaintenancePlanCallNumber:      "MaintenancePlanCallNumber",
	MaintenanceTaskListType:        "MaintenanceTaskListType",
	NotificationReferenceDate:      "NotificationReferenceDate",
	NotificationReferenceTime:      "NotificationReferenceTime",
	NotificationCompletionDate:     "NotificationCompletionDate",
	CompletionTime:                 "CompletionTime",
	AssetRoom:                      "AssetRoom",
	MaintNotifExtReferenceNumber:   "MaintNotifExtReferenceNumber",
	MaintNotifRejectionReasonCode:  "MaintNotifRejectionReasonCode",
	MaintNotifRejectionRsnCodeTxt:  "MaintNotifRejectionRsnCodeTxt",
	MaintNotifDetectionCatalog:     "MaintNotifDetectionCatalog",
	MaintNotifDetectionCode:        "MaintNotifDetectionCode",
	MaintNotifDetectionCodeText:    "MaintNotifDetectionCodeText",
	MaintNotifDetectionCodeGroup:   "MaintNotifDetectionCodeGroup",
	MaintNotifDetectionCodeGrpTxt:  "MaintNotifDetectionCodeGrpTxt",
	MaintNotifProcessPhaseCode:     "MaintNotifProcessPhaseCode",
	MaintNotifProcessSubPhaseCode:  "MaintNotifProcessSubPhaseCode",
}

var SapMaintenanceNotificationHeaderDatumTableColumns = struct {
	MaintenanceNotification        string
	MaintNotifInternalID           string
	NotificationText               string
	MaintPriority                  string
	NotificationType               string
	NotifProcessingPhase           string
	NotifProcessingPhaseDesc       string
	MaintPriorityDesc              string
	CreationDate                   string
	LastChangeTime                 string
	LastChangeDate                 string
	LastChangeDateTime             string
	CreationTime                   string
	ReportedByUser                 string
	ReporterFullName               string
	PersonResponsible              string
	MalfunctionEffect              string
	MalfunctionEffectText          string
	MalfunctionStartDate           string
	MalfunctionStartTime           string
	MalfunctionEndDate             string
	MalfunctionEndTime             string
	MaintNotificationCatalog       string
	MaintNotificationCode          string
	MaintNotificationCodeGroup     string
	CatalogProfile                 string
	NotificationCreationDate       string
	NotificationCreationTime       string
	NotificationTimeZone           string
	RequiredStartDate              string
	RequiredStartTime              string
	RequiredEndDate                string
	RequiredEndTime                string
	LatestAcceptableCompletionDate string
	MaintenanceObjectIsDown        string
	MaintNotificationLongText      string
	MaintNotifLongTextForEdit      string
	TechnicalObject                string
	TechObjIsEquipOrFuncnlLoc      string
	TechnicalObjectLabel           string
	MaintenancePlanningPlant       string
	MaintenancePlannerGroup        string
	SuperiorTechnicalObject        string
	SuperiorTechnicalObjectName    string
	SuperiorObjIsEquipOrFuncnlLoc  string
	SuperiorTechnicalObjectLabel   string
	ManufacturerPartTypeName       string
	TechObjIsEquipOrFuncnlLocDesc  string
	FunctionalLocation             string
	FunctionalLocationLabelName    string
	TechnicalObjectDescription     string
	AssetLocation                  string
	LocationName                   string
	BusinessArea                   string
	CompanyCode                    string
	TechnicalObjectCategory        string
	TechnicalObjectType            string
	MainWorkCenterPlant            string
	MainWorkCenter                 string
	PlantName                      string
	MaintenancePlannerGroupName    string
	MaintenancePlant               string
	LocationDescription            string
	MainWorkCenterText             string
	MainWorkCenterPlantName        string
	MaintenancePlantName           string
	PlantSectionPersonRespName     string
	PersonResponsibleName          string
	MaintenanceOrder               string
	MaintenanceOrderType           string
	MaintenanceActivityType        string
	MaintObjDowntimeDurationUnit   string
	MaintObjectDowntimeDuration    string
	MaintenancePlan                string
	MaintenanceItem                string
	TaskListGroup                  string
	TaskListGroupCounter           string
	MaintenancePlanCallNumber      string
	MaintenanceTaskListType        string
	NotificationReferenceDate      string
	NotificationReferenceTime      string
	NotificationCompletionDate     string
	CompletionTime                 string
	AssetRoom                      string
	MaintNotifExtReferenceNumber   string
	MaintNotifRejectionReasonCode  string
	MaintNotifRejectionRsnCodeTxt  string
	MaintNotifDetectionCatalog     string
	MaintNotifDetectionCode        string
	MaintNotifDetectionCodeText    string
	MaintNotifDetectionCodeGroup   string
	MaintNotifDetectionCodeGrpTxt  string
	MaintNotifProcessPhaseCode     string
	MaintNotifProcessSubPhaseCode  string
}{
	MaintenanceNotification:        "sap_maintenance_notification_header_data.MaintenanceNotification",
	MaintNotifInternalID:           "sap_maintenance_notification_header_data.MaintNotifInternalID",
	NotificationText:               "sap_maintenance_notification_header_data.NotificationText",
	MaintPriority:                  "sap_maintenance_notification_header_data.MaintPriority",
	NotificationType:               "sap_maintenance_notification_header_data.NotificationType",
	NotifProcessingPhase:           "sap_maintenance_notification_header_data.NotifProcessingPhase",
	NotifProcessingPhaseDesc:       "sap_maintenance_notification_header_data.NotifProcessingPhaseDesc",
	MaintPriorityDesc:              "sap_maintenance_notification_header_data.MaintPriorityDesc",
	CreationDate:                   "sap_maintenance_notification_header_data.CreationDate",
	LastChangeTime:                 "sap_maintenance_notification_header_data.LastChangeTime",
	LastChangeDate:                 "sap_maintenance_notification_header_data.LastChangeDate",
	LastChangeDateTime:             "sap_maintenance_notification_header_data.LastChangeDateTime",
	CreationTime:                   "sap_maintenance_notification_header_data.CreationTime",
	ReportedByUser:                 "sap_maintenance_notification_header_data.ReportedByUser",
	ReporterFullName:               "sap_maintenance_notification_header_data.ReporterFullName",
	PersonResponsible:              "sap_maintenance_notification_header_data.PersonResponsible",
	MalfunctionEffect:              "sap_maintenance_notification_header_data.MalfunctionEffect",
	MalfunctionEffectText:          "sap_maintenance_notification_header_data.MalfunctionEffectText",
	MalfunctionStartDate:           "sap_maintenance_notification_header_data.MalfunctionStartDate",
	MalfunctionStartTime:           "sap_maintenance_notification_header_data.MalfunctionStartTime",
	MalfunctionEndDate:             "sap_maintenance_notification_header_data.MalfunctionEndDate",
	MalfunctionEndTime:             "sap_maintenance_notification_header_data.MalfunctionEndTime",
	MaintNotificationCatalog:       "sap_maintenance_notification_header_data.MaintNotificationCatalog",
	MaintNotificationCode:          "sap_maintenance_notification_header_data.MaintNotificationCode",
	MaintNotificationCodeGroup:     "sap_maintenance_notification_header_data.MaintNotificationCodeGroup",
	CatalogProfile:                 "sap_maintenance_notification_header_data.CatalogProfile",
	NotificationCreationDate:       "sap_maintenance_notification_header_data.NotificationCreationDate",
	NotificationCreationTime:       "sap_maintenance_notification_header_data.NotificationCreationTime",
	NotificationTimeZone:           "sap_maintenance_notification_header_data.NotificationTimeZone",
	RequiredStartDate:              "sap_maintenance_notification_header_data.RequiredStartDate",
	RequiredStartTime:              "sap_maintenance_notification_header_data.RequiredStartTime",
	RequiredEndDate:                "sap_maintenance_notification_header_data.RequiredEndDate",
	RequiredEndTime:                "sap_maintenance_notification_header_data.RequiredEndTime",
	LatestAcceptableCompletionDate: "sap_maintenance_notification_header_data.LatestAcceptableCompletionDate",
	MaintenanceObjectIsDown:        "sap_maintenance_notification_header_data.MaintenanceObjectIsDown",
	MaintNotificationLongText:      "sap_maintenance_notification_header_data.MaintNotificationLongText",
	MaintNotifLongTextForEdit:      "sap_maintenance_notification_header_data.MaintNotifLongTextForEdit",
	TechnicalObject:                "sap_maintenance_notification_header_data.TechnicalObject",
	TechObjIsEquipOrFuncnlLoc:      "sap_maintenance_notification_header_data.TechObjIsEquipOrFuncnlLoc",
	TechnicalObjectLabel:           "sap_maintenance_notification_header_data.TechnicalObjectLabel",
	MaintenancePlanningPlant:       "sap_maintenance_notification_header_data.MaintenancePlanningPlant",
	MaintenancePlannerGroup:        "sap_maintenance_notification_header_data.MaintenancePlannerGroup",
	SuperiorTechnicalObject:        "sap_maintenance_notification_header_data.SuperiorTechnicalObject",
	SuperiorTechnicalObjectName:    "sap_maintenance_notification_header_data.SuperiorTechnicalObjectName",
	SuperiorObjIsEquipOrFuncnlLoc:  "sap_maintenance_notification_header_data.SuperiorObjIsEquipOrFuncnlLoc",
	SuperiorTechnicalObjectLabel:   "sap_maintenance_notification_header_data.SuperiorTechnicalObjectLabel",
	ManufacturerPartTypeName:       "sap_maintenance_notification_header_data.ManufacturerPartTypeName",
	TechObjIsEquipOrFuncnlLocDesc:  "sap_maintenance_notification_header_data.TechObjIsEquipOrFuncnlLocDesc",
	FunctionalLocation:             "sap_maintenance_notification_header_data.FunctionalLocation",
	FunctionalLocationLabelName:    "sap_maintenance_notification_header_data.FunctionalLocationLabelName",
	TechnicalObjectDescription:     "sap_maintenance_notification_header_data.TechnicalObjectDescription",
	AssetLocation:                  "sap_maintenance_notification_header_data.AssetLocation",
	LocationName:                   "sap_maintenance_notification_header_data.LocationName",
	BusinessArea:                   "sap_maintenance_notification_header_data.BusinessArea",
	CompanyCode:                    "sap_maintenance_notification_header_data.CompanyCode",
	TechnicalObjectCategory:        "sap_maintenance_notification_header_data.TechnicalObjectCategory",
	TechnicalObjectType:            "sap_maintenance_notification_header_data.TechnicalObjectType",
	MainWorkCenterPlant:            "sap_maintenance_notification_header_data.MainWorkCenterPlant",
	MainWorkCenter:                 "sap_maintenance_notification_header_data.MainWorkCenter",
	PlantName:                      "sap_maintenance_notification_header_data.PlantName",
	MaintenancePlannerGroupName:    "sap_maintenance_notification_header_data.MaintenancePlannerGroupName",
	MaintenancePlant:               "sap_maintenance_notification_header_data.MaintenancePlant",
	LocationDescription:            "sap_maintenance_notification_header_data.LocationDescription",
	MainWorkCenterText:             "sap_maintenance_notification_header_data.MainWorkCenterText",
	MainWorkCenterPlantName:        "sap_maintenance_notification_header_data.MainWorkCenterPlantName",
	MaintenancePlantName:           "sap_maintenance_notification_header_data.MaintenancePlantName",
	PlantSectionPersonRespName:     "sap_maintenance_notification_header_data.PlantSectionPersonRespName",
	PersonResponsibleName:          "sap_maintenance_notification_header_data.PersonResponsibleName",
	MaintenanceOrder:               "sap_maintenance_notification_header_data.MaintenanceOrder",
	MaintenanceOrderType:           "sap_maintenance_notification_header_data.MaintenanceOrderType",
	MaintenanceActivityType:        "sap_maintenance_notification_header_data.MaintenanceActivityType",
	MaintObjDowntimeDurationUnit:   "sap_maintenance_notification_header_data.MaintObjDowntimeDurationUnit",
	MaintObjectDowntimeDuration:    "sap_maintenance_notification_header_data.MaintObjectDowntimeDuration",
	MaintenancePlan:                "sap_maintenance_notification_header_data.MaintenancePlan",
	MaintenanceItem:                "sap_maintenance_notification_header_data.MaintenanceItem",
	TaskListGroup:                  "sap_maintenance_notification_header_data.TaskListGroup",
	TaskListGroupCounter:           "sap_maintenance_notification_header_data.TaskListGroupCounter",
	MaintenancePlanCallNumber:      "sap_maintenance_notification_header_data.MaintenancePlanCallNumber",
	MaintenanceTaskListType:        "sap_maintenance_notification_header_data.MaintenanceTaskListType",
	NotificationReferenceDate:      "sap_maintenance_notification_header_data.NotificationReferenceDate",
	NotificationReferenceTime:      "sap_maintenance_notification_header_data.NotificationReferenceTime",
	NotificationCompletionDate:     "sap_maintenance_notification_header_data.NotificationCompletionDate",
	CompletionTime:                 "sap_maintenance_notification_header_data.CompletionTime",
	AssetRoom:                      "sap_maintenance_notification_header_data.AssetRoom",
	MaintNotifExtReferenceNumber:   "sap_maintenance_notification_header_data.MaintNotifExtReferenceNumber",
	MaintNotifRejectionReasonCode:  "sap_maintenance_notification_header_data.MaintNotifRejectionReasonCode",
	MaintNotifRejectionRsnCodeTxt:  "sap_maintenance_notification_header_data.MaintNotifRejectionRsnCodeTxt",
	MaintNotifDetectionCatalog:     "sap_maintenance_notification_header_data.MaintNotifDetectionCatalog",
	MaintNotifDetectionCode:        "sap_maintenance_notification_header_data.MaintNotifDetectionCode",
	MaintNotifDetectionCodeText:    "sap_maintenance_notification_header_data.MaintNotifDetectionCodeText",
	MaintNotifDetectionCodeGroup:   "sap_maintenance_notification_header_data.MaintNotifDetectionCodeGroup",
	MaintNotifDetectionCodeGrpTxt:  "sap_maintenance_notification_header_data.MaintNotifDetectionCodeGrpTxt",
	MaintNotifProcessPhaseCode:     "sap_maintenance_notification_header_data.MaintNotifProcessPhaseCode",
	MaintNotifProcessSubPhaseCode:  "sap_maintenance_notification_header_data.MaintNotifProcessSubPhaseCode",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SapMaintenanceNotificationHeaderDatumWhere = struct {
	MaintenanceNotification        whereHelperstring
	MaintNotifInternalID           whereHelpernull_String
	NotificationText               whereHelpernull_String
	MaintPriority                  whereHelpernull_String
	NotificationType               whereHelpernull_String
	NotifProcessingPhase           whereHelpernull_String
	NotifProcessingPhaseDesc       whereHelpernull_String
	MaintPriorityDesc              whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeTime                 whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	LastChangeDateTime             whereHelpernull_String
	CreationTime                   whereHelpernull_String
	ReportedByUser                 whereHelpernull_String
	ReporterFullName               whereHelpernull_String
	PersonResponsible              whereHelpernull_String
	MalfunctionEffect              whereHelpernull_String
	MalfunctionEffectText          whereHelpernull_String
	MalfunctionStartDate           whereHelpernull_String
	MalfunctionStartTime           whereHelpernull_String
	MalfunctionEndDate             whereHelpernull_String
	MalfunctionEndTime             whereHelpernull_String
	MaintNotificationCatalog       whereHelpernull_String
	MaintNotificationCode          whereHelpernull_String
	MaintNotificationCodeGroup     whereHelpernull_String
	CatalogProfile                 whereHelpernull_String
	NotificationCreationDate       whereHelpernull_String
	NotificationCreationTime       whereHelpernull_String
	NotificationTimeZone           whereHelpernull_String
	RequiredStartDate              whereHelpernull_String
	RequiredStartTime              whereHelpernull_String
	RequiredEndDate                whereHelpernull_String
	RequiredEndTime                whereHelpernull_String
	LatestAcceptableCompletionDate whereHelpernull_String
	MaintenanceObjectIsDown        whereHelpernull_Bool
	MaintNotificationLongText      whereHelpernull_String
	MaintNotifLongTextForEdit      whereHelpernull_String
	TechnicalObject                whereHelpernull_String
	TechObjIsEquipOrFuncnlLoc      whereHelpernull_String
	TechnicalObjectLabel           whereHelpernull_String
	MaintenancePlanningPlant       whereHelpernull_String
	MaintenancePlannerGroup        whereHelpernull_String
	SuperiorTechnicalObject        whereHelpernull_String
	SuperiorTechnicalObjectName    whereHelpernull_String
	SuperiorObjIsEquipOrFuncnlLoc  whereHelpernull_String
	SuperiorTechnicalObjectLabel   whereHelpernull_String
	ManufacturerPartTypeName       whereHelpernull_String
	TechObjIsEquipOrFuncnlLocDesc  whereHelpernull_String
	FunctionalLocation             whereHelpernull_String
	FunctionalLocationLabelName    whereHelpernull_String
	TechnicalObjectDescription     whereHelpernull_String
	AssetLocation                  whereHelpernull_String
	LocationName                   whereHelpernull_String
	BusinessArea                   whereHelpernull_String
	CompanyCode                    whereHelpernull_String
	TechnicalObjectCategory        whereHelpernull_String
	TechnicalObjectType            whereHelpernull_String
	MainWorkCenterPlant            whereHelpernull_String
	MainWorkCenter                 whereHelpernull_String
	PlantName                      whereHelpernull_String
	MaintenancePlannerGroupName    whereHelpernull_String
	MaintenancePlant               whereHelpernull_String
	LocationDescription            whereHelpernull_String
	MainWorkCenterText             whereHelpernull_String
	MainWorkCenterPlantName        whereHelpernull_String
	MaintenancePlantName           whereHelpernull_String
	PlantSectionPersonRespName     whereHelpernull_String
	PersonResponsibleName          whereHelpernull_String
	MaintenanceOrder               whereHelpernull_String
	MaintenanceOrderType           whereHelpernull_String
	MaintenanceActivityType        whereHelpernull_String
	MaintObjDowntimeDurationUnit   whereHelpernull_String
	MaintObjectDowntimeDuration    whereHelpernull_String
	MaintenancePlan                whereHelpernull_String
	MaintenanceItem                whereHelpernull_String
	TaskListGroup                  whereHelpernull_String
	TaskListGroupCounter           whereHelpernull_String
	MaintenancePlanCallNumber      whereHelpernull_Int
	MaintenanceTaskListType        whereHelpernull_String
	NotificationReferenceDate      whereHelpernull_String
	NotificationReferenceTime      whereHelpernull_String
	NotificationCompletionDate     whereHelpernull_String
	CompletionTime                 whereHelpernull_String
	AssetRoom                      whereHelpernull_String
	MaintNotifExtReferenceNumber   whereHelpernull_String
	MaintNotifRejectionReasonCode  whereHelpernull_String
	MaintNotifRejectionRsnCodeTxt  whereHelpernull_String
	MaintNotifDetectionCatalog     whereHelpernull_String
	MaintNotifDetectionCode        whereHelpernull_String
	MaintNotifDetectionCodeText    whereHelpernull_String
	MaintNotifDetectionCodeGroup   whereHelpernull_String
	MaintNotifDetectionCodeGrpTxt  whereHelpernull_String
	MaintNotifProcessPhaseCode     whereHelpernull_String
	MaintNotifProcessSubPhaseCode  whereHelpernull_String
}{
	MaintenanceNotification:        whereHelperstring{field: "`sap_maintenance_notification_header_data`.`MaintenanceNotification`"},
	MaintNotifInternalID:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifInternalID`"},
	NotificationText:               whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationText`"},
	MaintPriority:                  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintPriority`"},
	NotificationType:               whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationType`"},
	NotifProcessingPhase:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotifProcessingPhase`"},
	NotifProcessingPhaseDesc:       whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotifProcessingPhaseDesc`"},
	MaintPriorityDesc:              whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintPriorityDesc`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`CreationDate`"},
	LastChangeTime:                 whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`LastChangeTime`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`LastChangeDate`"},
	LastChangeDateTime:             whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`LastChangeDateTime`"},
	CreationTime:                   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`CreationTime`"},
	ReportedByUser:                 whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`ReportedByUser`"},
	ReporterFullName:               whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`ReporterFullName`"},
	PersonResponsible:              whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`PersonResponsible`"},
	MalfunctionEffect:              whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MalfunctionEffect`"},
	MalfunctionEffectText:          whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MalfunctionEffectText`"},
	MalfunctionStartDate:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MalfunctionStartDate`"},
	MalfunctionStartTime:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MalfunctionStartTime`"},
	MalfunctionEndDate:             whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MalfunctionEndDate`"},
	MalfunctionEndTime:             whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MalfunctionEndTime`"},
	MaintNotificationCatalog:       whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotificationCatalog`"},
	MaintNotificationCode:          whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotificationCode`"},
	MaintNotificationCodeGroup:     whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotificationCodeGroup`"},
	CatalogProfile:                 whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`CatalogProfile`"},
	NotificationCreationDate:       whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationCreationDate`"},
	NotificationCreationTime:       whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationCreationTime`"},
	NotificationTimeZone:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationTimeZone`"},
	RequiredStartDate:              whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`RequiredStartDate`"},
	RequiredStartTime:              whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`RequiredStartTime`"},
	RequiredEndDate:                whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`RequiredEndDate`"},
	RequiredEndTime:                whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`RequiredEndTime`"},
	LatestAcceptableCompletionDate: whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`LatestAcceptableCompletionDate`"},
	MaintenanceObjectIsDown:        whereHelpernull_Bool{field: "`sap_maintenance_notification_header_data`.`MaintenanceObjectIsDown`"},
	MaintNotificationLongText:      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotificationLongText`"},
	MaintNotifLongTextForEdit:      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifLongTextForEdit`"},
	TechnicalObject:                whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechnicalObject`"},
	TechObjIsEquipOrFuncnlLoc:      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechObjIsEquipOrFuncnlLoc`"},
	TechnicalObjectLabel:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechnicalObjectLabel`"},
	MaintenancePlanningPlant:       whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenancePlanningPlant`"},
	MaintenancePlannerGroup:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenancePlannerGroup`"},
	SuperiorTechnicalObject:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`SuperiorTechnicalObject`"},
	SuperiorTechnicalObjectName:    whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`SuperiorTechnicalObjectName`"},
	SuperiorObjIsEquipOrFuncnlLoc:  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`SuperiorObjIsEquipOrFuncnlLoc`"},
	SuperiorTechnicalObjectLabel:   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`SuperiorTechnicalObjectLabel`"},
	ManufacturerPartTypeName:       whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`ManufacturerPartTypeName`"},
	TechObjIsEquipOrFuncnlLocDesc:  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechObjIsEquipOrFuncnlLocDesc`"},
	FunctionalLocation:             whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`FunctionalLocation`"},
	FunctionalLocationLabelName:    whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`FunctionalLocationLabelName`"},
	TechnicalObjectDescription:     whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechnicalObjectDescription`"},
	AssetLocation:                  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`AssetLocation`"},
	LocationName:                   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`LocationName`"},
	BusinessArea:                   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`BusinessArea`"},
	CompanyCode:                    whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`CompanyCode`"},
	TechnicalObjectCategory:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechnicalObjectCategory`"},
	TechnicalObjectType:            whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TechnicalObjectType`"},
	MainWorkCenterPlant:            whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MainWorkCenterPlant`"},
	MainWorkCenter:                 whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MainWorkCenter`"},
	PlantName:                      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`PlantName`"},
	MaintenancePlannerGroupName:    whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenancePlannerGroupName`"},
	MaintenancePlant:               whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenancePlant`"},
	LocationDescription:            whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`LocationDescription`"},
	MainWorkCenterText:             whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MainWorkCenterText`"},
	MainWorkCenterPlantName:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MainWorkCenterPlantName`"},
	MaintenancePlantName:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenancePlantName`"},
	PlantSectionPersonRespName:     whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`PlantSectionPersonRespName`"},
	PersonResponsibleName:          whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`PersonResponsibleName`"},
	MaintenanceOrder:               whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenanceOrder`"},
	MaintenanceOrderType:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenanceOrderType`"},
	MaintenanceActivityType:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenanceActivityType`"},
	MaintObjDowntimeDurationUnit:   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintObjDowntimeDurationUnit`"},
	MaintObjectDowntimeDuration:    whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintObjectDowntimeDuration`"},
	MaintenancePlan:                whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenancePlan`"},
	MaintenanceItem:                whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenanceItem`"},
	TaskListGroup:                  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TaskListGroup`"},
	TaskListGroupCounter:           whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`TaskListGroupCounter`"},
	MaintenancePlanCallNumber:      whereHelpernull_Int{field: "`sap_maintenance_notification_header_data`.`MaintenancePlanCallNumber`"},
	MaintenanceTaskListType:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintenanceTaskListType`"},
	NotificationReferenceDate:      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationReferenceDate`"},
	NotificationReferenceTime:      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationReferenceTime`"},
	NotificationCompletionDate:     whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`NotificationCompletionDate`"},
	CompletionTime:                 whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`CompletionTime`"},
	AssetRoom:                      whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`AssetRoom`"},
	MaintNotifExtReferenceNumber:   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifExtReferenceNumber`"},
	MaintNotifRejectionReasonCode:  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifRejectionReasonCode`"},
	MaintNotifRejectionRsnCodeTxt:  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifRejectionRsnCodeTxt`"},
	MaintNotifDetectionCatalog:     whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifDetectionCatalog`"},
	MaintNotifDetectionCode:        whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifDetectionCode`"},
	MaintNotifDetectionCodeText:    whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifDetectionCodeText`"},
	MaintNotifDetectionCodeGroup:   whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifDetectionCodeGroup`"},
	MaintNotifDetectionCodeGrpTxt:  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifDetectionCodeGrpTxt`"},
	MaintNotifProcessPhaseCode:     whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifProcessPhaseCode`"},
	MaintNotifProcessSubPhaseCode:  whereHelpernull_String{field: "`sap_maintenance_notification_header_data`.`MaintNotifProcessSubPhaseCode`"},
}

// SapMaintenanceNotificationHeaderDatumRels is where relationship names are stored.
var SapMaintenanceNotificationHeaderDatumRels = struct {
	MaintenanceNotificationSapMaintenanceNotificationItemCauseData string
	MaintenanceNotificationSapMaintenanceNotificationItemData      string
}{
	MaintenanceNotificationSapMaintenanceNotificationItemCauseData: "MaintenanceNotificationSapMaintenanceNotificationItemCauseData",
	MaintenanceNotificationSapMaintenanceNotificationItemData:      "MaintenanceNotificationSapMaintenanceNotificationItemData",
}

// sapMaintenanceNotificationHeaderDatumR is where relationships are stored.
type sapMaintenanceNotificationHeaderDatumR struct {
	MaintenanceNotificationSapMaintenanceNotificationItemCauseData SapMaintenanceNotificationItemCauseDatumSlice `boil:"MaintenanceNotificationSapMaintenanceNotificationItemCauseData" json:"MaintenanceNotificationSapMaintenanceNotificationItemCauseData" toml:"MaintenanceNotificationSapMaintenanceNotificationItemCauseData" yaml:"MaintenanceNotificationSapMaintenanceNotificationItemCauseData"`
	MaintenanceNotificationSapMaintenanceNotificationItemData      SapMaintenanceNotificationItemDatumSlice      `boil:"MaintenanceNotificationSapMaintenanceNotificationItemData" json:"MaintenanceNotificationSapMaintenanceNotificationItemData" toml:"MaintenanceNotificationSapMaintenanceNotificationItemData" yaml:"MaintenanceNotificationSapMaintenanceNotificationItemData"`
}

// NewStruct creates a new relationship struct
func (*sapMaintenanceNotificationHeaderDatumR) NewStruct() *sapMaintenanceNotificationHeaderDatumR {
	return &sapMaintenanceNotificationHeaderDatumR{}
}

// sapMaintenanceNotificationHeaderDatumL is where Load methods for each relationship are stored.
type sapMaintenanceNotificationHeaderDatumL struct{}

var (
	sapMaintenanceNotificationHeaderDatumAllColumns            = []string{"MaintenanceNotification", "MaintNotifInternalID", "NotificationText", "MaintPriority", "NotificationType", "NotifProcessingPhase", "NotifProcessingPhaseDesc", "MaintPriorityDesc", "CreationDate", "LastChangeTime", "LastChangeDate", "LastChangeDateTime", "CreationTime", "ReportedByUser", "ReporterFullName", "PersonResponsible", "MalfunctionEffect", "MalfunctionEffectText", "MalfunctionStartDate", "MalfunctionStartTime", "MalfunctionEndDate", "MalfunctionEndTime", "MaintNotificationCatalog", "MaintNotificationCode", "MaintNotificationCodeGroup", "CatalogProfile", "NotificationCreationDate", "NotificationCreationTime", "NotificationTimeZone", "RequiredStartDate", "RequiredStartTime", "RequiredEndDate", "RequiredEndTime", "LatestAcceptableCompletionDate", "MaintenanceObjectIsDown", "MaintNotificationLongText", "MaintNotifLongTextForEdit", "TechnicalObject", "TechObjIsEquipOrFuncnlLoc", "TechnicalObjectLabel", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "SuperiorTechnicalObject", "SuperiorTechnicalObjectName", "SuperiorObjIsEquipOrFuncnlLoc", "SuperiorTechnicalObjectLabel", "ManufacturerPartTypeName", "TechObjIsEquipOrFuncnlLocDesc", "FunctionalLocation", "FunctionalLocationLabelName", "TechnicalObjectDescription", "AssetLocation", "LocationName", "BusinessArea", "CompanyCode", "TechnicalObjectCategory", "TechnicalObjectType", "MainWorkCenterPlant", "MainWorkCenter", "PlantName", "MaintenancePlannerGroupName", "MaintenancePlant", "LocationDescription", "MainWorkCenterText", "MainWorkCenterPlantName", "MaintenancePlantName", "PlantSectionPersonRespName", "PersonResponsibleName", "MaintenanceOrder", "MaintenanceOrderType", "MaintenanceActivityType", "MaintObjDowntimeDurationUnit", "MaintObjectDowntimeDuration", "MaintenancePlan", "MaintenanceItem", "TaskListGroup", "TaskListGroupCounter", "MaintenancePlanCallNumber", "MaintenanceTaskListType", "NotificationReferenceDate", "NotificationReferenceTime", "NotificationCompletionDate", "CompletionTime", "AssetRoom", "MaintNotifExtReferenceNumber", "MaintNotifRejectionReasonCode", "MaintNotifRejectionRsnCodeTxt", "MaintNotifDetectionCatalog", "MaintNotifDetectionCode", "MaintNotifDetectionCodeText", "MaintNotifDetectionCodeGroup", "MaintNotifDetectionCodeGrpTxt", "MaintNotifProcessPhaseCode", "MaintNotifProcessSubPhaseCode"}
	sapMaintenanceNotificationHeaderDatumColumnsWithoutDefault = []string{"MaintenanceNotification", "MaintNotifInternalID", "NotificationText", "MaintPriority", "NotificationType", "NotifProcessingPhase", "NotifProcessingPhaseDesc", "MaintPriorityDesc", "CreationDate", "LastChangeTime", "LastChangeDate", "LastChangeDateTime", "CreationTime", "ReportedByUser", "ReporterFullName", "PersonResponsible", "MalfunctionEffect", "MalfunctionEffectText", "MalfunctionStartDate", "MalfunctionStartTime", "MalfunctionEndDate", "MalfunctionEndTime", "MaintNotificationCatalog", "MaintNotificationCode", "MaintNotificationCodeGroup", "CatalogProfile", "NotificationCreationDate", "NotificationCreationTime", "NotificationTimeZone", "RequiredStartDate", "RequiredStartTime", "RequiredEndDate", "RequiredEndTime", "LatestAcceptableCompletionDate", "MaintenanceObjectIsDown", "MaintNotificationLongText", "MaintNotifLongTextForEdit", "TechnicalObject", "TechObjIsEquipOrFuncnlLoc", "TechnicalObjectLabel", "MaintenancePlanningPlant", "MaintenancePlannerGroup", "SuperiorTechnicalObject", "SuperiorTechnicalObjectName", "SuperiorObjIsEquipOrFuncnlLoc", "SuperiorTechnicalObjectLabel", "ManufacturerPartTypeName", "TechObjIsEquipOrFuncnlLocDesc", "FunctionalLocation", "FunctionalLocationLabelName", "TechnicalObjectDescription", "AssetLocation", "LocationName", "BusinessArea", "CompanyCode", "TechnicalObjectCategory", "TechnicalObjectType", "MainWorkCenterPlant", "MainWorkCenter", "PlantName", "MaintenancePlannerGroupName", "MaintenancePlant", "LocationDescription", "MainWorkCenterText", "MainWorkCenterPlantName", "MaintenancePlantName", "PlantSectionPersonRespName", "PersonResponsibleName", "MaintenanceOrder", "MaintenanceOrderType", "MaintenanceActivityType", "MaintObjDowntimeDurationUnit", "MaintObjectDowntimeDuration", "MaintenancePlan", "MaintenanceItem", "TaskListGroup", "TaskListGroupCounter", "MaintenancePlanCallNumber", "MaintenanceTaskListType", "NotificationReferenceDate", "NotificationReferenceTime", "NotificationCompletionDate", "CompletionTime", "AssetRoom", "MaintNotifExtReferenceNumber", "MaintNotifRejectionReasonCode", "MaintNotifRejectionRsnCodeTxt", "MaintNotifDetectionCatalog", "MaintNotifDetectionCode", "MaintNotifDetectionCodeText", "MaintNotifDetectionCodeGroup", "MaintNotifDetectionCodeGrpTxt", "MaintNotifProcessPhaseCode", "MaintNotifProcessSubPhaseCode"}
	sapMaintenanceNotificationHeaderDatumColumnsWithDefault    = []string{}
	sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns     = []string{"MaintenanceNotification"}
	sapMaintenanceNotificationHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapMaintenanceNotificationHeaderDatumSlice is an alias for a slice of pointers to SapMaintenanceNotificationHeaderDatum.
	// This should almost always be used instead of []SapMaintenanceNotificationHeaderDatum.
	SapMaintenanceNotificationHeaderDatumSlice []*SapMaintenanceNotificationHeaderDatum
	// SapMaintenanceNotificationHeaderDatumHook is the signature for custom SapMaintenanceNotificationHeaderDatum hook methods
	SapMaintenanceNotificationHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapMaintenanceNotificationHeaderDatum) error

	sapMaintenanceNotificationHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapMaintenanceNotificationHeaderDatumType                 = reflect.TypeOf(&SapMaintenanceNotificationHeaderDatum{})
	sapMaintenanceNotificationHeaderDatumMapping              = queries.MakeStructMapping(sapMaintenanceNotificationHeaderDatumType)
	sapMaintenanceNotificationHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns)
	sapMaintenanceNotificationHeaderDatumInsertCacheMut       sync.RWMutex
	sapMaintenanceNotificationHeaderDatumInsertCache          = make(map[string]insertCache)
	sapMaintenanceNotificationHeaderDatumUpdateCacheMut       sync.RWMutex
	sapMaintenanceNotificationHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapMaintenanceNotificationHeaderDatumUpsertCacheMut       sync.RWMutex
	sapMaintenanceNotificationHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapMaintenanceNotificationHeaderDatumAfterSelectHooks []SapMaintenanceNotificationHeaderDatumHook

var sapMaintenanceNotificationHeaderDatumBeforeInsertHooks []SapMaintenanceNotificationHeaderDatumHook
var sapMaintenanceNotificationHeaderDatumAfterInsertHooks []SapMaintenanceNotificationHeaderDatumHook

var sapMaintenanceNotificationHeaderDatumBeforeUpdateHooks []SapMaintenanceNotificationHeaderDatumHook
var sapMaintenanceNotificationHeaderDatumAfterUpdateHooks []SapMaintenanceNotificationHeaderDatumHook

var sapMaintenanceNotificationHeaderDatumBeforeDeleteHooks []SapMaintenanceNotificationHeaderDatumHook
var sapMaintenanceNotificationHeaderDatumAfterDeleteHooks []SapMaintenanceNotificationHeaderDatumHook

var sapMaintenanceNotificationHeaderDatumBeforeUpsertHooks []SapMaintenanceNotificationHeaderDatumHook
var sapMaintenanceNotificationHeaderDatumAfterUpsertHooks []SapMaintenanceNotificationHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapMaintenanceNotificationHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapMaintenanceNotificationHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapMaintenanceNotificationHeaderDatumHook registers your hook function for all future operations.
func AddSapMaintenanceNotificationHeaderDatumHook(hookPoint boil.HookPoint, sapMaintenanceNotificationHeaderDatumHook SapMaintenanceNotificationHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapMaintenanceNotificationHeaderDatumAfterSelectHooks = append(sapMaintenanceNotificationHeaderDatumAfterSelectHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapMaintenanceNotificationHeaderDatumBeforeInsertHooks = append(sapMaintenanceNotificationHeaderDatumBeforeInsertHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.AfterInsertHook:
		sapMaintenanceNotificationHeaderDatumAfterInsertHooks = append(sapMaintenanceNotificationHeaderDatumAfterInsertHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapMaintenanceNotificationHeaderDatumBeforeUpdateHooks = append(sapMaintenanceNotificationHeaderDatumBeforeUpdateHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapMaintenanceNotificationHeaderDatumAfterUpdateHooks = append(sapMaintenanceNotificationHeaderDatumAfterUpdateHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapMaintenanceNotificationHeaderDatumBeforeDeleteHooks = append(sapMaintenanceNotificationHeaderDatumBeforeDeleteHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapMaintenanceNotificationHeaderDatumAfterDeleteHooks = append(sapMaintenanceNotificationHeaderDatumAfterDeleteHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapMaintenanceNotificationHeaderDatumBeforeUpsertHooks = append(sapMaintenanceNotificationHeaderDatumBeforeUpsertHooks, sapMaintenanceNotificationHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapMaintenanceNotificationHeaderDatumAfterUpsertHooks = append(sapMaintenanceNotificationHeaderDatumAfterUpsertHooks, sapMaintenanceNotificationHeaderDatumHook)
	}
}

// One returns a single sapMaintenanceNotificationHeaderDatum record from the query.
func (q sapMaintenanceNotificationHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapMaintenanceNotificationHeaderDatum, error) {
	o := &SapMaintenanceNotificationHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_maintenance_notification_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapMaintenanceNotificationHeaderDatum records from the query.
func (q sapMaintenanceNotificationHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapMaintenanceNotificationHeaderDatumSlice, error) {
	var o []*SapMaintenanceNotificationHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapMaintenanceNotificationHeaderDatum slice")
	}

	if len(sapMaintenanceNotificationHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapMaintenanceNotificationHeaderDatum records in the query.
func (q sapMaintenanceNotificationHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_maintenance_notification_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapMaintenanceNotificationHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_maintenance_notification_header_data exists")
	}

	return count > 0, nil
}

// MaintenanceNotificationSapMaintenanceNotificationItemCauseData retrieves all the sap_maintenance_notification_item_cause_datum's SapMaintenanceNotificationItemCauseData with an executor via MaintenanceNotification column.
func (o *SapMaintenanceNotificationHeaderDatum) MaintenanceNotificationSapMaintenanceNotificationItemCauseData(mods ...qm.QueryMod) sapMaintenanceNotificationItemCauseDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_maintenance_notification_item_cause_data`.`MaintenanceNotification`=?", o.MaintenanceNotification),
	)

	query := SapMaintenanceNotificationItemCauseData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_notification_item_cause_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_maintenance_notification_item_cause_data`.*"})
	}

	return query
}

// MaintenanceNotificationSapMaintenanceNotificationItemData retrieves all the sap_maintenance_notification_item_datum's SapMaintenanceNotificationItemData with an executor via MaintenanceNotification column.
func (o *SapMaintenanceNotificationHeaderDatum) MaintenanceNotificationSapMaintenanceNotificationItemData(mods ...qm.QueryMod) sapMaintenanceNotificationItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_maintenance_notification_item_data`.`MaintenanceNotification`=?", o.MaintenanceNotification),
	)

	query := SapMaintenanceNotificationItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_maintenance_notification_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_maintenance_notification_item_data`.*"})
	}

	return query
}

// LoadMaintenanceNotificationSapMaintenanceNotificationItemCauseData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapMaintenanceNotificationHeaderDatumL) LoadMaintenanceNotificationSapMaintenanceNotificationItemCauseData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceNotificationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceNotificationHeaderDatum
	var object *SapMaintenanceNotificationHeaderDatum

	if singular {
		object = maybeSapMaintenanceNotificationHeaderDatum.(*SapMaintenanceNotificationHeaderDatum)
	} else {
		slice = *maybeSapMaintenanceNotificationHeaderDatum.(*[]*SapMaintenanceNotificationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceNotificationHeaderDatumR{}
		}
		args = append(args, object.MaintenanceNotification)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceNotificationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceNotification {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceNotification)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_notification_item_cause_data`),
		qm.WhereIn(`sap_maintenance_notification_item_cause_data.MaintenanceNotification in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_maintenance_notification_item_cause_data")
	}

	var resultSlice []*SapMaintenanceNotificationItemCauseDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_maintenance_notification_item_cause_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_maintenance_notification_item_cause_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_notification_item_cause_data")
	}

	if len(sapMaintenanceNotificationItemCauseDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapMaintenanceNotificationItemCauseDatumR{}
			}
			foreign.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MaintenanceNotification == foreign.MaintenanceNotification {
				local.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData = append(local.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData, foreign)
				if foreign.R == nil {
					foreign.R = &sapMaintenanceNotificationItemCauseDatumR{}
				}
				foreign.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadMaintenanceNotificationSapMaintenanceNotificationItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapMaintenanceNotificationHeaderDatumL) LoadMaintenanceNotificationSapMaintenanceNotificationItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapMaintenanceNotificationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapMaintenanceNotificationHeaderDatum
	var object *SapMaintenanceNotificationHeaderDatum

	if singular {
		object = maybeSapMaintenanceNotificationHeaderDatum.(*SapMaintenanceNotificationHeaderDatum)
	} else {
		slice = *maybeSapMaintenanceNotificationHeaderDatum.(*[]*SapMaintenanceNotificationHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapMaintenanceNotificationHeaderDatumR{}
		}
		args = append(args, object.MaintenanceNotification)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapMaintenanceNotificationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.MaintenanceNotification {
					continue Outer
				}
			}

			args = append(args, obj.MaintenanceNotification)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_maintenance_notification_item_data`),
		qm.WhereIn(`sap_maintenance_notification_item_data.MaintenanceNotification in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_maintenance_notification_item_data")
	}

	var resultSlice []*SapMaintenanceNotificationItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_maintenance_notification_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_maintenance_notification_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_maintenance_notification_item_data")
	}

	if len(sapMaintenanceNotificationItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MaintenanceNotificationSapMaintenanceNotificationItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapMaintenanceNotificationItemDatumR{}
			}
			foreign.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.MaintenanceNotification == foreign.MaintenanceNotification {
				local.R.MaintenanceNotificationSapMaintenanceNotificationItemData = append(local.R.MaintenanceNotificationSapMaintenanceNotificationItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapMaintenanceNotificationItemDatumR{}
				}
				foreign.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddMaintenanceNotificationSapMaintenanceNotificationItemCauseData adds the given related objects to the existing relationships
// of the sap_maintenance_notification_header_datum, optionally inserting them as new records.
// Appends related to o.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData.
// Sets related.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum appropriately.
func (o *SapMaintenanceNotificationHeaderDatum) AddMaintenanceNotificationSapMaintenanceNotificationItemCauseData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapMaintenanceNotificationItemCauseDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MaintenanceNotification = o.MaintenanceNotification
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_maintenance_notification_item_cause_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceNotification"}),
				strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemCauseDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.MaintenanceNotification, rel.MaintenanceNotification, rel.MaintenanceNotificationItem, rel.MaintenanceNotificationCause}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MaintenanceNotification = o.MaintenanceNotification
		}
	}

	if o.R == nil {
		o.R = &sapMaintenanceNotificationHeaderDatumR{
			MaintenanceNotificationSapMaintenanceNotificationItemCauseData: related,
		}
	} else {
		o.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData = append(o.R.MaintenanceNotificationSapMaintenanceNotificationItemCauseData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapMaintenanceNotificationItemCauseDatumR{
				MaintenanceNotificationSapMaintenanceNotificationHeaderDatum: o,
			}
		} else {
			rel.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = o
		}
	}
	return nil
}

// AddMaintenanceNotificationSapMaintenanceNotificationItemData adds the given related objects to the existing relationships
// of the sap_maintenance_notification_header_datum, optionally inserting them as new records.
// Appends related to o.R.MaintenanceNotificationSapMaintenanceNotificationItemData.
// Sets related.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum appropriately.
func (o *SapMaintenanceNotificationHeaderDatum) AddMaintenanceNotificationSapMaintenanceNotificationItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapMaintenanceNotificationItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MaintenanceNotification = o.MaintenanceNotification
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_maintenance_notification_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MaintenanceNotification"}),
				strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.MaintenanceNotification, rel.MaintenanceNotification, rel.MaintenanceNotificationItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MaintenanceNotification = o.MaintenanceNotification
		}
	}

	if o.R == nil {
		o.R = &sapMaintenanceNotificationHeaderDatumR{
			MaintenanceNotificationSapMaintenanceNotificationItemData: related,
		}
	} else {
		o.R.MaintenanceNotificationSapMaintenanceNotificationItemData = append(o.R.MaintenanceNotificationSapMaintenanceNotificationItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapMaintenanceNotificationItemDatumR{
				MaintenanceNotificationSapMaintenanceNotificationHeaderDatum: o,
			}
		} else {
			rel.R.MaintenanceNotificationSapMaintenanceNotificationHeaderDatum = o
		}
	}
	return nil
}

// SapMaintenanceNotificationHeaderData retrieves all the records using an executor.
func SapMaintenanceNotificationHeaderData(mods ...qm.QueryMod) sapMaintenanceNotificationHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_maintenance_notification_header_data`"))
	return sapMaintenanceNotificationHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapMaintenanceNotificationHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapMaintenanceNotificationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, maintenanceNotification string, selectCols ...string) (*SapMaintenanceNotificationHeaderDatum, error) {
	sapMaintenanceNotificationHeaderDatumObj := &SapMaintenanceNotificationHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_maintenance_notification_header_data` where `MaintenanceNotification`=?", sel,
	)

	q := queries.Raw(query, maintenanceNotification)

	err := q.Bind(ctx, exec, sapMaintenanceNotificationHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_maintenance_notification_header_data")
	}

	if err = sapMaintenanceNotificationHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapMaintenanceNotificationHeaderDatumObj, err
	}

	return sapMaintenanceNotificationHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapMaintenanceNotificationHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_notification_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceNotificationHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapMaintenanceNotificationHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationHeaderDatumInsertCache[key]
	sapMaintenanceNotificationHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapMaintenanceNotificationHeaderDatumAllColumns,
			sapMaintenanceNotificationHeaderDatumColumnsWithDefault,
			sapMaintenanceNotificationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_maintenance_notification_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_maintenance_notification_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_maintenance_notification_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_maintenance_notification_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.MaintenanceNotification,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_notification_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceNotificationHeaderDatumInsertCacheMut.Lock()
		sapMaintenanceNotificationHeaderDatumInsertCache[key] = cache
		sapMaintenanceNotificationHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapMaintenanceNotificationHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapMaintenanceNotificationHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapMaintenanceNotificationHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationHeaderDatumUpdateCache[key]
	sapMaintenanceNotificationHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapMaintenanceNotificationHeaderDatumAllColumns,
			sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_maintenance_notification_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_maintenance_notification_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, append(wl, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_maintenance_notification_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_maintenance_notification_header_data")
	}

	if !cached {
		sapMaintenanceNotificationHeaderDatumUpdateCacheMut.Lock()
		sapMaintenanceNotificationHeaderDatumUpdateCache[key] = cache
		sapMaintenanceNotificationHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapMaintenanceNotificationHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_maintenance_notification_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_maintenance_notification_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapMaintenanceNotificationHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_maintenance_notification_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapMaintenanceNotificationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapMaintenanceNotificationHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapMaintenanceNotificationHeaderDatumUniqueColumns = []string{
	"MaintenanceNotification",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapMaintenanceNotificationHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_maintenance_notification_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapMaintenanceNotificationHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapMaintenanceNotificationHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapMaintenanceNotificationHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapMaintenanceNotificationHeaderDatumUpsertCache[key]
	sapMaintenanceNotificationHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapMaintenanceNotificationHeaderDatumAllColumns,
			sapMaintenanceNotificationHeaderDatumColumnsWithDefault,
			sapMaintenanceNotificationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapMaintenanceNotificationHeaderDatumAllColumns,
			sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_maintenance_notification_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_maintenance_notification_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_maintenance_notification_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_maintenance_notification_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapMaintenanceNotificationHeaderDatumType, sapMaintenanceNotificationHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_maintenance_notification_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_maintenance_notification_header_data")
	}

CacheNoHooks:
	if !cached {
		sapMaintenanceNotificationHeaderDatumUpsertCacheMut.Lock()
		sapMaintenanceNotificationHeaderDatumUpsertCache[key] = cache
		sapMaintenanceNotificationHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapMaintenanceNotificationHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapMaintenanceNotificationHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapMaintenanceNotificationHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapMaintenanceNotificationHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_maintenance_notification_header_data` WHERE `MaintenanceNotification`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_maintenance_notification_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_maintenance_notification_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapMaintenanceNotificationHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapMaintenanceNotificationHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_maintenance_notification_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_notification_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapMaintenanceNotificationHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapMaintenanceNotificationHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_maintenance_notification_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapMaintenanceNotificationHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_maintenance_notification_header_data")
	}

	if len(sapMaintenanceNotificationHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapMaintenanceNotificationHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapMaintenanceNotificationHeaderDatum(ctx, exec, o.MaintenanceNotification)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapMaintenanceNotificationHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapMaintenanceNotificationHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapMaintenanceNotificationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_maintenance_notification_header_data`.* FROM `sap_maintenance_notification_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapMaintenanceNotificationHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapMaintenanceNotificationHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapMaintenanceNotificationHeaderDatumExists checks if the SapMaintenanceNotificationHeaderDatum row exists.
func SapMaintenanceNotificationHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, maintenanceNotification string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_maintenance_notification_header_data` where `MaintenanceNotification`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, maintenanceNotification)
	}
	row := exec.QueryRowContext(ctx, sql, maintenanceNotification)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_maintenance_notification_header_data exists")
	}

	return exists, nil
}
