// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductionRoutingMaterialAssignmentDatum is an object representing the database table.
type SapProductionRoutingMaterialAssignmentDatum struct {
	Product                        string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                          string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	ProductionRoutingGroup         string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting              string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingMatlAssgmt    string      `boil:"ProductionRoutingMatlAssgmt" json:"ProductionRoutingMatlAssgmt" toml:"ProductionRoutingMatlAssgmt" yaml:"ProductionRoutingMatlAssgmt"`
	ProductionRtgMatlAssgmtIntVers string      `boil:"ProductionRtgMatlAssgmtIntVers" json:"ProductionRtgMatlAssgmtIntVers" toml:"ProductionRtgMatlAssgmtIntVers" yaml:"ProductionRtgMatlAssgmtIntVers"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ValidityStartDate              null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ChangeNumber                   null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`

	R *sapProductionRoutingMaterialAssignmentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductionRoutingMaterialAssignmentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductionRoutingMaterialAssignmentDatumColumns = struct {
	Product                        string
	Plant                          string
	ProductionRoutingGroup         string
	ProductionRouting              string
	ProductionRoutingMatlAssgmt    string
	ProductionRtgMatlAssgmtIntVers string
	CreationDate                   string
	LastChangeDate                 string
	ValidityStartDate              string
	ValidityEndDate                string
	ChangeNumber                   string
}{
	Product:                        "Product",
	Plant:                          "Plant",
	ProductionRoutingGroup:         "ProductionRoutingGroup",
	ProductionRouting:              "ProductionRouting",
	ProductionRoutingMatlAssgmt:    "ProductionRoutingMatlAssgmt",
	ProductionRtgMatlAssgmtIntVers: "ProductionRtgMatlAssgmtIntVers",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	ChangeNumber:                   "ChangeNumber",
}

var SapProductionRoutingMaterialAssignmentDatumTableColumns = struct {
	Product                        string
	Plant                          string
	ProductionRoutingGroup         string
	ProductionRouting              string
	ProductionRoutingMatlAssgmt    string
	ProductionRtgMatlAssgmtIntVers string
	CreationDate                   string
	LastChangeDate                 string
	ValidityStartDate              string
	ValidityEndDate                string
	ChangeNumber                   string
}{
	Product:                        "sap_production_routing_material_assignment_data.Product",
	Plant:                          "sap_production_routing_material_assignment_data.Plant",
	ProductionRoutingGroup:         "sap_production_routing_material_assignment_data.ProductionRoutingGroup",
	ProductionRouting:              "sap_production_routing_material_assignment_data.ProductionRouting",
	ProductionRoutingMatlAssgmt:    "sap_production_routing_material_assignment_data.ProductionRoutingMatlAssgmt",
	ProductionRtgMatlAssgmtIntVers: "sap_production_routing_material_assignment_data.ProductionRtgMatlAssgmtIntVers",
	CreationDate:                   "sap_production_routing_material_assignment_data.CreationDate",
	LastChangeDate:                 "sap_production_routing_material_assignment_data.LastChangeDate",
	ValidityStartDate:              "sap_production_routing_material_assignment_data.ValidityStartDate",
	ValidityEndDate:                "sap_production_routing_material_assignment_data.ValidityEndDate",
	ChangeNumber:                   "sap_production_routing_material_assignment_data.ChangeNumber",
}

// Generated where

var SapProductionRoutingMaterialAssignmentDatumWhere = struct {
	Product                        whereHelperstring
	Plant                          whereHelperstring
	ProductionRoutingGroup         whereHelperstring
	ProductionRouting              whereHelperstring
	ProductionRoutingMatlAssgmt    whereHelperstring
	ProductionRtgMatlAssgmtIntVers whereHelperstring
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	ValidityStartDate              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	ChangeNumber                   whereHelpernull_String
}{
	Product:                        whereHelperstring{field: "`sap_production_routing_material_assignment_data`.`Product`"},
	Plant:                          whereHelperstring{field: "`sap_production_routing_material_assignment_data`.`Plant`"},
	ProductionRoutingGroup:         whereHelperstring{field: "`sap_production_routing_material_assignment_data`.`ProductionRoutingGroup`"},
	ProductionRouting:              whereHelperstring{field: "`sap_production_routing_material_assignment_data`.`ProductionRouting`"},
	ProductionRoutingMatlAssgmt:    whereHelperstring{field: "`sap_production_routing_material_assignment_data`.`ProductionRoutingMatlAssgmt`"},
	ProductionRtgMatlAssgmtIntVers: whereHelperstring{field: "`sap_production_routing_material_assignment_data`.`ProductionRtgMatlAssgmtIntVers`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_production_routing_material_assignment_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_production_routing_material_assignment_data`.`LastChangeDate`"},
	ValidityStartDate:              whereHelpernull_String{field: "`sap_production_routing_material_assignment_data`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelpernull_String{field: "`sap_production_routing_material_assignment_data`.`ValidityEndDate`"},
	ChangeNumber:                   whereHelpernull_String{field: "`sap_production_routing_material_assignment_data`.`ChangeNumber`"},
}

// SapProductionRoutingMaterialAssignmentDatumRels is where relationship names are stored.
var SapProductionRoutingMaterialAssignmentDatumRels = struct {
}{}

// sapProductionRoutingMaterialAssignmentDatumR is where relationships are stored.
type sapProductionRoutingMaterialAssignmentDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapProductionRoutingMaterialAssignmentDatumR) NewStruct() *sapProductionRoutingMaterialAssignmentDatumR {
	return &sapProductionRoutingMaterialAssignmentDatumR{}
}

// sapProductionRoutingMaterialAssignmentDatumL is where Load methods for each relationship are stored.
type sapProductionRoutingMaterialAssignmentDatumL struct{}

var (
	sapProductionRoutingMaterialAssignmentDatumAllColumns            = []string{"Product", "Plant", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingMatlAssgmt", "ProductionRtgMatlAssgmtIntVers", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber"}
	sapProductionRoutingMaterialAssignmentDatumColumnsWithoutDefault = []string{"Product", "Plant", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingMatlAssgmt", "ProductionRtgMatlAssgmtIntVers", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber"}
	sapProductionRoutingMaterialAssignmentDatumColumnsWithDefault    = []string{}
	sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns     = []string{"Product", "Plant", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingMatlAssgmt", "ProductionRtgMatlAssgmtIntVers"}
	sapProductionRoutingMaterialAssignmentDatumGeneratedColumns      = []string{}
)

type (
	// SapProductionRoutingMaterialAssignmentDatumSlice is an alias for a slice of pointers to SapProductionRoutingMaterialAssignmentDatum.
	// This should almost always be used instead of []SapProductionRoutingMaterialAssignmentDatum.
	SapProductionRoutingMaterialAssignmentDatumSlice []*SapProductionRoutingMaterialAssignmentDatum
	// SapProductionRoutingMaterialAssignmentDatumHook is the signature for custom SapProductionRoutingMaterialAssignmentDatum hook methods
	SapProductionRoutingMaterialAssignmentDatumHook func(context.Context, boil.ContextExecutor, *SapProductionRoutingMaterialAssignmentDatum) error

	sapProductionRoutingMaterialAssignmentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductionRoutingMaterialAssignmentDatumType                 = reflect.TypeOf(&SapProductionRoutingMaterialAssignmentDatum{})
	sapProductionRoutingMaterialAssignmentDatumMapping              = queries.MakeStructMapping(sapProductionRoutingMaterialAssignmentDatumType)
	sapProductionRoutingMaterialAssignmentDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns)
	sapProductionRoutingMaterialAssignmentDatumInsertCacheMut       sync.RWMutex
	sapProductionRoutingMaterialAssignmentDatumInsertCache          = make(map[string]insertCache)
	sapProductionRoutingMaterialAssignmentDatumUpdateCacheMut       sync.RWMutex
	sapProductionRoutingMaterialAssignmentDatumUpdateCache          = make(map[string]updateCache)
	sapProductionRoutingMaterialAssignmentDatumUpsertCacheMut       sync.RWMutex
	sapProductionRoutingMaterialAssignmentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductionRoutingMaterialAssignmentDatumAfterSelectHooks []SapProductionRoutingMaterialAssignmentDatumHook

var sapProductionRoutingMaterialAssignmentDatumBeforeInsertHooks []SapProductionRoutingMaterialAssignmentDatumHook
var sapProductionRoutingMaterialAssignmentDatumAfterInsertHooks []SapProductionRoutingMaterialAssignmentDatumHook

var sapProductionRoutingMaterialAssignmentDatumBeforeUpdateHooks []SapProductionRoutingMaterialAssignmentDatumHook
var sapProductionRoutingMaterialAssignmentDatumAfterUpdateHooks []SapProductionRoutingMaterialAssignmentDatumHook

var sapProductionRoutingMaterialAssignmentDatumBeforeDeleteHooks []SapProductionRoutingMaterialAssignmentDatumHook
var sapProductionRoutingMaterialAssignmentDatumAfterDeleteHooks []SapProductionRoutingMaterialAssignmentDatumHook

var sapProductionRoutingMaterialAssignmentDatumBeforeUpsertHooks []SapProductionRoutingMaterialAssignmentDatumHook
var sapProductionRoutingMaterialAssignmentDatumAfterUpsertHooks []SapProductionRoutingMaterialAssignmentDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductionRoutingMaterialAssignmentDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductionRoutingMaterialAssignmentDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductionRoutingMaterialAssignmentDatumHook registers your hook function for all future operations.
func AddSapProductionRoutingMaterialAssignmentDatumHook(hookPoint boil.HookPoint, sapProductionRoutingMaterialAssignmentDatumHook SapProductionRoutingMaterialAssignmentDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductionRoutingMaterialAssignmentDatumAfterSelectHooks = append(sapProductionRoutingMaterialAssignmentDatumAfterSelectHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.BeforeInsertHook:
		sapProductionRoutingMaterialAssignmentDatumBeforeInsertHooks = append(sapProductionRoutingMaterialAssignmentDatumBeforeInsertHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.AfterInsertHook:
		sapProductionRoutingMaterialAssignmentDatumAfterInsertHooks = append(sapProductionRoutingMaterialAssignmentDatumAfterInsertHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.BeforeUpdateHook:
		sapProductionRoutingMaterialAssignmentDatumBeforeUpdateHooks = append(sapProductionRoutingMaterialAssignmentDatumBeforeUpdateHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.AfterUpdateHook:
		sapProductionRoutingMaterialAssignmentDatumAfterUpdateHooks = append(sapProductionRoutingMaterialAssignmentDatumAfterUpdateHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.BeforeDeleteHook:
		sapProductionRoutingMaterialAssignmentDatumBeforeDeleteHooks = append(sapProductionRoutingMaterialAssignmentDatumBeforeDeleteHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.AfterDeleteHook:
		sapProductionRoutingMaterialAssignmentDatumAfterDeleteHooks = append(sapProductionRoutingMaterialAssignmentDatumAfterDeleteHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.BeforeUpsertHook:
		sapProductionRoutingMaterialAssignmentDatumBeforeUpsertHooks = append(sapProductionRoutingMaterialAssignmentDatumBeforeUpsertHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	case boil.AfterUpsertHook:
		sapProductionRoutingMaterialAssignmentDatumAfterUpsertHooks = append(sapProductionRoutingMaterialAssignmentDatumAfterUpsertHooks, sapProductionRoutingMaterialAssignmentDatumHook)
	}
}

// One returns a single sapProductionRoutingMaterialAssignmentDatum record from the query.
func (q sapProductionRoutingMaterialAssignmentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductionRoutingMaterialAssignmentDatum, error) {
	o := &SapProductionRoutingMaterialAssignmentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_production_routing_material_assignment_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductionRoutingMaterialAssignmentDatum records from the query.
func (q sapProductionRoutingMaterialAssignmentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductionRoutingMaterialAssignmentDatumSlice, error) {
	var o []*SapProductionRoutingMaterialAssignmentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductionRoutingMaterialAssignmentDatum slice")
	}

	if len(sapProductionRoutingMaterialAssignmentDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductionRoutingMaterialAssignmentDatum records in the query.
func (q sapProductionRoutingMaterialAssignmentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_production_routing_material_assignment_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductionRoutingMaterialAssignmentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_production_routing_material_assignment_data exists")
	}

	return count > 0, nil
}

// SapProductionRoutingMaterialAssignmentData retrieves all the records using an executor.
func SapProductionRoutingMaterialAssignmentData(mods ...qm.QueryMod) sapProductionRoutingMaterialAssignmentDatumQuery {
	mods = append(mods, qm.From("`sap_production_routing_material_assignment_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_production_routing_material_assignment_data`.*"})
	}

	return sapProductionRoutingMaterialAssignmentDatumQuery{q}
}

// FindSapProductionRoutingMaterialAssignmentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductionRoutingMaterialAssignmentDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, productionRoutingGroup string, productionRouting string, productionRoutingMatlAssgmt string, productionRtgMatlAssgmtIntVers string, selectCols ...string) (*SapProductionRoutingMaterialAssignmentDatum, error) {
	sapProductionRoutingMaterialAssignmentDatumObj := &SapProductionRoutingMaterialAssignmentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_production_routing_material_assignment_data` where `Product`=? AND `Plant`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingMatlAssgmt`=? AND `ProductionRtgMatlAssgmtIntVers`=?", sel,
	)

	q := queries.Raw(query, product, plant, productionRoutingGroup, productionRouting, productionRoutingMatlAssgmt, productionRtgMatlAssgmtIntVers)

	err := q.Bind(ctx, exec, sapProductionRoutingMaterialAssignmentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_production_routing_material_assignment_data")
	}

	if err = sapProductionRoutingMaterialAssignmentDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductionRoutingMaterialAssignmentDatumObj, err
	}

	return sapProductionRoutingMaterialAssignmentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductionRoutingMaterialAssignmentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_material_assignment_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingMaterialAssignmentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductionRoutingMaterialAssignmentDatumInsertCacheMut.RLock()
	cache, cached := sapProductionRoutingMaterialAssignmentDatumInsertCache[key]
	sapProductionRoutingMaterialAssignmentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductionRoutingMaterialAssignmentDatumAllColumns,
			sapProductionRoutingMaterialAssignmentDatumColumnsWithDefault,
			sapProductionRoutingMaterialAssignmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_production_routing_material_assignment_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_production_routing_material_assignment_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_production_routing_material_assignment_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_production_routing_material_assignment_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingMatlAssgmt,
		o.ProductionRtgMatlAssgmtIntVers,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_material_assignment_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingMaterialAssignmentDatumInsertCacheMut.Lock()
		sapProductionRoutingMaterialAssignmentDatumInsertCache[key] = cache
		sapProductionRoutingMaterialAssignmentDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductionRoutingMaterialAssignmentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductionRoutingMaterialAssignmentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductionRoutingMaterialAssignmentDatumUpdateCacheMut.RLock()
	cache, cached := sapProductionRoutingMaterialAssignmentDatumUpdateCache[key]
	sapProductionRoutingMaterialAssignmentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductionRoutingMaterialAssignmentDatumAllColumns,
			sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_production_routing_material_assignment_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_production_routing_material_assignment_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, append(wl, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_production_routing_material_assignment_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_production_routing_material_assignment_data")
	}

	if !cached {
		sapProductionRoutingMaterialAssignmentDatumUpdateCacheMut.Lock()
		sapProductionRoutingMaterialAssignmentDatumUpdateCache[key] = cache
		sapProductionRoutingMaterialAssignmentDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductionRoutingMaterialAssignmentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_production_routing_material_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_production_routing_material_assignment_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductionRoutingMaterialAssignmentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingMaterialAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_production_routing_material_assignment_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductionRoutingMaterialAssignmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductionRoutingMaterialAssignmentDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductionRoutingMaterialAssignmentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductionRoutingMaterialAssignmentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_production_routing_material_assignment_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductionRoutingMaterialAssignmentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductionRoutingMaterialAssignmentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductionRoutingMaterialAssignmentDatumUpsertCacheMut.RLock()
	cache, cached := sapProductionRoutingMaterialAssignmentDatumUpsertCache[key]
	sapProductionRoutingMaterialAssignmentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductionRoutingMaterialAssignmentDatumAllColumns,
			sapProductionRoutingMaterialAssignmentDatumColumnsWithDefault,
			sapProductionRoutingMaterialAssignmentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductionRoutingMaterialAssignmentDatumAllColumns,
			sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_production_routing_material_assignment_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_production_routing_material_assignment_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_production_routing_material_assignment_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_production_routing_material_assignment_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductionRoutingMaterialAssignmentDatumType, sapProductionRoutingMaterialAssignmentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_production_routing_material_assignment_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_production_routing_material_assignment_data")
	}

CacheNoHooks:
	if !cached {
		sapProductionRoutingMaterialAssignmentDatumUpsertCacheMut.Lock()
		sapProductionRoutingMaterialAssignmentDatumUpsertCache[key] = cache
		sapProductionRoutingMaterialAssignmentDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductionRoutingMaterialAssignmentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductionRoutingMaterialAssignmentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductionRoutingMaterialAssignmentDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductionRoutingMaterialAssignmentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_production_routing_material_assignment_data` WHERE `Product`=? AND `Plant`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingMatlAssgmt`=? AND `ProductionRtgMatlAssgmtIntVers`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_production_routing_material_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_production_routing_material_assignment_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductionRoutingMaterialAssignmentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductionRoutingMaterialAssignmentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_production_routing_material_assignment_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_material_assignment_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductionRoutingMaterialAssignmentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductionRoutingMaterialAssignmentDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingMaterialAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_production_routing_material_assignment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductionRoutingMaterialAssignmentDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_production_routing_material_assignment_data")
	}

	if len(sapProductionRoutingMaterialAssignmentDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductionRoutingMaterialAssignmentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductionRoutingMaterialAssignmentDatum(ctx, exec, o.Product, o.Plant, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingMatlAssgmt, o.ProductionRtgMatlAssgmtIntVers)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductionRoutingMaterialAssignmentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductionRoutingMaterialAssignmentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductionRoutingMaterialAssignmentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_production_routing_material_assignment_data`.* FROM `sap_production_routing_material_assignment_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductionRoutingMaterialAssignmentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductionRoutingMaterialAssignmentDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductionRoutingMaterialAssignmentDatumExists checks if the SapProductionRoutingMaterialAssignmentDatum row exists.
func SapProductionRoutingMaterialAssignmentDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string, productionRoutingGroup string, productionRouting string, productionRoutingMatlAssgmt string, productionRtgMatlAssgmtIntVers string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_production_routing_material_assignment_data` where `Product`=? AND `Plant`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingMatlAssgmt`=? AND `ProductionRtgMatlAssgmtIntVers`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant, productionRoutingGroup, productionRouting, productionRoutingMatlAssgmt, productionRtgMatlAssgmtIntVers)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant, productionRoutingGroup, productionRouting, productionRoutingMatlAssgmt, productionRtgMatlAssgmtIntVers)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_production_routing_material_assignment_data exists")
	}

	return exists, nil
}
