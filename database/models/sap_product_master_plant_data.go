// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProductMasterPlantDatum is an object representing the database table.
type SapProductMasterPlantDatum struct {
	Product                       string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                         string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	PurchasingGroup               null.String `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	ProductionInvtryManagedLoc    null.String `boil:"ProductionInvtryManagedLoc" json:"ProductionInvtryManagedLoc,omitempty" toml:"ProductionInvtryManagedLoc" yaml:"ProductionInvtryManagedLoc,omitempty"`
	AvailabilityCheckType         null.String `boil:"AvailabilityCheckType" json:"AvailabilityCheckType,omitempty" toml:"AvailabilityCheckType" yaml:"AvailabilityCheckType,omitempty"`
	ProfitCenter                  null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	GoodsReceiptDuration          null.String `boil:"GoodsReceiptDuration" json:"GoodsReceiptDuration,omitempty" toml:"GoodsReceiptDuration" yaml:"GoodsReceiptDuration,omitempty"`
	MRPType                       null.String `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPResponsible                null.String `boil:"MRPResponsible" json:"MRPResponsible,omitempty" toml:"MRPResponsible" yaml:"MRPResponsible,omitempty"`
	MinimumLotSizeQuantity        null.String `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity        null.String `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	FixedLotSizeQuantity          null.String `boil:"FixedLotSizeQuantity" json:"FixedLotSizeQuantity,omitempty" toml:"FixedLotSizeQuantity" yaml:"FixedLotSizeQuantity,omitempty"`
	IsBatchManagementRequired     null.Bool   `boil:"IsBatchManagementRequired" json:"IsBatchManagementRequired,omitempty" toml:"IsBatchManagementRequired" yaml:"IsBatchManagementRequired,omitempty"`
	ProcurementType               null.String `boil:"ProcurementType" json:"ProcurementType,omitempty" toml:"ProcurementType" yaml:"ProcurementType,omitempty"`
	IsInternalBatchManaged        null.Bool   `boil:"IsInternalBatchManaged" json:"IsInternalBatchManaged,omitempty" toml:"IsInternalBatchManaged" yaml:"IsInternalBatchManaged,omitempty"`
	GoodsIssueUnit                null.String `boil:"GoodsIssueUnit" json:"GoodsIssueUnit,omitempty" toml:"GoodsIssueUnit" yaml:"GoodsIssueUnit,omitempty"`
	MaterialFreightGroup          null.String `boil:"MaterialFreightGroup" json:"MaterialFreightGroup,omitempty" toml:"MaterialFreightGroup" yaml:"MaterialFreightGroup,omitempty"`
	ProductLogisticsHandlingGroup null.String `boil:"ProductLogisticsHandlingGroup" json:"ProductLogisticsHandlingGroup,omitempty" toml:"ProductLogisticsHandlingGroup" yaml:"ProductLogisticsHandlingGroup,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *sapProductMasterPlantDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProductMasterPlantDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProductMasterPlantDatumColumns = struct {
	Product                       string
	Plant                         string
	PurchasingGroup               string
	ProductionInvtryManagedLoc    string
	AvailabilityCheckType         string
	ProfitCenter                  string
	GoodsReceiptDuration          string
	MRPType                       string
	MRPResponsible                string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	FixedLotSizeQuantity          string
	IsBatchManagementRequired     string
	ProcurementType               string
	IsInternalBatchManaged        string
	GoodsIssueUnit                string
	MaterialFreightGroup          string
	ProductLogisticsHandlingGroup string
	IsMarkedForDeletion           string
}{
	Product:                       "Product",
	Plant:                         "Plant",
	PurchasingGroup:               "PurchasingGroup",
	ProductionInvtryManagedLoc:    "ProductionInvtryManagedLoc",
	AvailabilityCheckType:         "AvailabilityCheckType",
	ProfitCenter:                  "ProfitCenter",
	GoodsReceiptDuration:          "GoodsReceiptDuration",
	MRPType:                       "MRPType",
	MRPResponsible:                "MRPResponsible",
	MinimumLotSizeQuantity:        "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "MaximumLotSizeQuantity",
	FixedLotSizeQuantity:          "FixedLotSizeQuantity",
	IsBatchManagementRequired:     "IsBatchManagementRequired",
	ProcurementType:               "ProcurementType",
	IsInternalBatchManaged:        "IsInternalBatchManaged",
	GoodsIssueUnit:                "GoodsIssueUnit",
	MaterialFreightGroup:          "MaterialFreightGroup",
	ProductLogisticsHandlingGroup: "ProductLogisticsHandlingGroup",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var SapProductMasterPlantDatumTableColumns = struct {
	Product                       string
	Plant                         string
	PurchasingGroup               string
	ProductionInvtryManagedLoc    string
	AvailabilityCheckType         string
	ProfitCenter                  string
	GoodsReceiptDuration          string
	MRPType                       string
	MRPResponsible                string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	FixedLotSizeQuantity          string
	IsBatchManagementRequired     string
	ProcurementType               string
	IsInternalBatchManaged        string
	GoodsIssueUnit                string
	MaterialFreightGroup          string
	ProductLogisticsHandlingGroup string
	IsMarkedForDeletion           string
}{
	Product:                       "sap_product_master_plant_data.Product",
	Plant:                         "sap_product_master_plant_data.Plant",
	PurchasingGroup:               "sap_product_master_plant_data.PurchasingGroup",
	ProductionInvtryManagedLoc:    "sap_product_master_plant_data.ProductionInvtryManagedLoc",
	AvailabilityCheckType:         "sap_product_master_plant_data.AvailabilityCheckType",
	ProfitCenter:                  "sap_product_master_plant_data.ProfitCenter",
	GoodsReceiptDuration:          "sap_product_master_plant_data.GoodsReceiptDuration",
	MRPType:                       "sap_product_master_plant_data.MRPType",
	MRPResponsible:                "sap_product_master_plant_data.MRPResponsible",
	MinimumLotSizeQuantity:        "sap_product_master_plant_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "sap_product_master_plant_data.MaximumLotSizeQuantity",
	FixedLotSizeQuantity:          "sap_product_master_plant_data.FixedLotSizeQuantity",
	IsBatchManagementRequired:     "sap_product_master_plant_data.IsBatchManagementRequired",
	ProcurementType:               "sap_product_master_plant_data.ProcurementType",
	IsInternalBatchManaged:        "sap_product_master_plant_data.IsInternalBatchManaged",
	GoodsIssueUnit:                "sap_product_master_plant_data.GoodsIssueUnit",
	MaterialFreightGroup:          "sap_product_master_plant_data.MaterialFreightGroup",
	ProductLogisticsHandlingGroup: "sap_product_master_plant_data.ProductLogisticsHandlingGroup",
	IsMarkedForDeletion:           "sap_product_master_plant_data.IsMarkedForDeletion",
}

// Generated where

var SapProductMasterPlantDatumWhere = struct {
	Product                       whereHelperstring
	Plant                         whereHelperstring
	PurchasingGroup               whereHelpernull_String
	ProductionInvtryManagedLoc    whereHelpernull_String
	AvailabilityCheckType         whereHelpernull_String
	ProfitCenter                  whereHelpernull_String
	GoodsReceiptDuration          whereHelpernull_String
	MRPType                       whereHelpernull_String
	MRPResponsible                whereHelpernull_String
	MinimumLotSizeQuantity        whereHelpernull_String
	MaximumLotSizeQuantity        whereHelpernull_String
	FixedLotSizeQuantity          whereHelpernull_String
	IsBatchManagementRequired     whereHelpernull_Bool
	ProcurementType               whereHelpernull_String
	IsInternalBatchManaged        whereHelpernull_Bool
	GoodsIssueUnit                whereHelpernull_String
	MaterialFreightGroup          whereHelpernull_String
	ProductLogisticsHandlingGroup whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	Product:                       whereHelperstring{field: "`sap_product_master_plant_data`.`Product`"},
	Plant:                         whereHelperstring{field: "`sap_product_master_plant_data`.`Plant`"},
	PurchasingGroup:               whereHelpernull_String{field: "`sap_product_master_plant_data`.`PurchasingGroup`"},
	ProductionInvtryManagedLoc:    whereHelpernull_String{field: "`sap_product_master_plant_data`.`ProductionInvtryManagedLoc`"},
	AvailabilityCheckType:         whereHelpernull_String{field: "`sap_product_master_plant_data`.`AvailabilityCheckType`"},
	ProfitCenter:                  whereHelpernull_String{field: "`sap_product_master_plant_data`.`ProfitCenter`"},
	GoodsReceiptDuration:          whereHelpernull_String{field: "`sap_product_master_plant_data`.`GoodsReceiptDuration`"},
	MRPType:                       whereHelpernull_String{field: "`sap_product_master_plant_data`.`MRPType`"},
	MRPResponsible:                whereHelpernull_String{field: "`sap_product_master_plant_data`.`MRPResponsible`"},
	MinimumLotSizeQuantity:        whereHelpernull_String{field: "`sap_product_master_plant_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:        whereHelpernull_String{field: "`sap_product_master_plant_data`.`MaximumLotSizeQuantity`"},
	FixedLotSizeQuantity:          whereHelpernull_String{field: "`sap_product_master_plant_data`.`FixedLotSizeQuantity`"},
	IsBatchManagementRequired:     whereHelpernull_Bool{field: "`sap_product_master_plant_data`.`IsBatchManagementRequired`"},
	ProcurementType:               whereHelpernull_String{field: "`sap_product_master_plant_data`.`ProcurementType`"},
	IsInternalBatchManaged:        whereHelpernull_Bool{field: "`sap_product_master_plant_data`.`IsInternalBatchManaged`"},
	GoodsIssueUnit:                whereHelpernull_String{field: "`sap_product_master_plant_data`.`GoodsIssueUnit`"},
	MaterialFreightGroup:          whereHelpernull_String{field: "`sap_product_master_plant_data`.`MaterialFreightGroup`"},
	ProductLogisticsHandlingGroup: whereHelpernull_String{field: "`sap_product_master_plant_data`.`ProductLogisticsHandlingGroup`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`sap_product_master_plant_data`.`IsMarkedForDeletion`"},
}

// SapProductMasterPlantDatumRels is where relationship names are stored.
var SapProductMasterPlantDatumRels = struct {
	ProductSapProductMasterGeneralDatum string
}{
	ProductSapProductMasterGeneralDatum: "ProductSapProductMasterGeneralDatum",
}

// sapProductMasterPlantDatumR is where relationships are stored.
type sapProductMasterPlantDatumR struct {
	ProductSapProductMasterGeneralDatum *SapProductMasterGeneralDatum `boil:"ProductSapProductMasterGeneralDatum" json:"ProductSapProductMasterGeneralDatum" toml:"ProductSapProductMasterGeneralDatum" yaml:"ProductSapProductMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProductMasterPlantDatumR) NewStruct() *sapProductMasterPlantDatumR {
	return &sapProductMasterPlantDatumR{}
}

// sapProductMasterPlantDatumL is where Load methods for each relationship are stored.
type sapProductMasterPlantDatumL struct{}

var (
	sapProductMasterPlantDatumAllColumns            = []string{"Product", "Plant", "PurchasingGroup", "ProductionInvtryManagedLoc", "AvailabilityCheckType", "ProfitCenter", "GoodsReceiptDuration", "MRPType", "MRPResponsible", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "FixedLotSizeQuantity", "IsBatchManagementRequired", "ProcurementType", "IsInternalBatchManaged", "GoodsIssueUnit", "MaterialFreightGroup", "ProductLogisticsHandlingGroup", "IsMarkedForDeletion"}
	sapProductMasterPlantDatumColumnsWithoutDefault = []string{"Product", "Plant", "PurchasingGroup", "ProductionInvtryManagedLoc", "AvailabilityCheckType", "ProfitCenter", "GoodsReceiptDuration", "MRPType", "MRPResponsible", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "FixedLotSizeQuantity", "IsBatchManagementRequired", "ProcurementType", "IsInternalBatchManaged", "GoodsIssueUnit", "MaterialFreightGroup", "ProductLogisticsHandlingGroup", "IsMarkedForDeletion"}
	sapProductMasterPlantDatumColumnsWithDefault    = []string{}
	sapProductMasterPlantDatumPrimaryKeyColumns     = []string{"Product", "Plant"}
	sapProductMasterPlantDatumGeneratedColumns      = []string{}
)

type (
	// SapProductMasterPlantDatumSlice is an alias for a slice of pointers to SapProductMasterPlantDatum.
	// This should almost always be used instead of []SapProductMasterPlantDatum.
	SapProductMasterPlantDatumSlice []*SapProductMasterPlantDatum
	// SapProductMasterPlantDatumHook is the signature for custom SapProductMasterPlantDatum hook methods
	SapProductMasterPlantDatumHook func(context.Context, boil.ContextExecutor, *SapProductMasterPlantDatum) error

	sapProductMasterPlantDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProductMasterPlantDatumType                 = reflect.TypeOf(&SapProductMasterPlantDatum{})
	sapProductMasterPlantDatumMapping              = queries.MakeStructMapping(sapProductMasterPlantDatumType)
	sapProductMasterPlantDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, sapProductMasterPlantDatumPrimaryKeyColumns)
	sapProductMasterPlantDatumInsertCacheMut       sync.RWMutex
	sapProductMasterPlantDatumInsertCache          = make(map[string]insertCache)
	sapProductMasterPlantDatumUpdateCacheMut       sync.RWMutex
	sapProductMasterPlantDatumUpdateCache          = make(map[string]updateCache)
	sapProductMasterPlantDatumUpsertCacheMut       sync.RWMutex
	sapProductMasterPlantDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProductMasterPlantDatumAfterSelectHooks []SapProductMasterPlantDatumHook

var sapProductMasterPlantDatumBeforeInsertHooks []SapProductMasterPlantDatumHook
var sapProductMasterPlantDatumAfterInsertHooks []SapProductMasterPlantDatumHook

var sapProductMasterPlantDatumBeforeUpdateHooks []SapProductMasterPlantDatumHook
var sapProductMasterPlantDatumAfterUpdateHooks []SapProductMasterPlantDatumHook

var sapProductMasterPlantDatumBeforeDeleteHooks []SapProductMasterPlantDatumHook
var sapProductMasterPlantDatumAfterDeleteHooks []SapProductMasterPlantDatumHook

var sapProductMasterPlantDatumBeforeUpsertHooks []SapProductMasterPlantDatumHook
var sapProductMasterPlantDatumAfterUpsertHooks []SapProductMasterPlantDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProductMasterPlantDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProductMasterPlantDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProductMasterPlantDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProductMasterPlantDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProductMasterPlantDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProductMasterPlantDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProductMasterPlantDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProductMasterPlantDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProductMasterPlantDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProductMasterPlantDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProductMasterPlantDatumHook registers your hook function for all future operations.
func AddSapProductMasterPlantDatumHook(hookPoint boil.HookPoint, sapProductMasterPlantDatumHook SapProductMasterPlantDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProductMasterPlantDatumAfterSelectHooks = append(sapProductMasterPlantDatumAfterSelectHooks, sapProductMasterPlantDatumHook)
	case boil.BeforeInsertHook:
		sapProductMasterPlantDatumBeforeInsertHooks = append(sapProductMasterPlantDatumBeforeInsertHooks, sapProductMasterPlantDatumHook)
	case boil.AfterInsertHook:
		sapProductMasterPlantDatumAfterInsertHooks = append(sapProductMasterPlantDatumAfterInsertHooks, sapProductMasterPlantDatumHook)
	case boil.BeforeUpdateHook:
		sapProductMasterPlantDatumBeforeUpdateHooks = append(sapProductMasterPlantDatumBeforeUpdateHooks, sapProductMasterPlantDatumHook)
	case boil.AfterUpdateHook:
		sapProductMasterPlantDatumAfterUpdateHooks = append(sapProductMasterPlantDatumAfterUpdateHooks, sapProductMasterPlantDatumHook)
	case boil.BeforeDeleteHook:
		sapProductMasterPlantDatumBeforeDeleteHooks = append(sapProductMasterPlantDatumBeforeDeleteHooks, sapProductMasterPlantDatumHook)
	case boil.AfterDeleteHook:
		sapProductMasterPlantDatumAfterDeleteHooks = append(sapProductMasterPlantDatumAfterDeleteHooks, sapProductMasterPlantDatumHook)
	case boil.BeforeUpsertHook:
		sapProductMasterPlantDatumBeforeUpsertHooks = append(sapProductMasterPlantDatumBeforeUpsertHooks, sapProductMasterPlantDatumHook)
	case boil.AfterUpsertHook:
		sapProductMasterPlantDatumAfterUpsertHooks = append(sapProductMasterPlantDatumAfterUpsertHooks, sapProductMasterPlantDatumHook)
	}
}

// One returns a single sapProductMasterPlantDatum record from the query.
func (q sapProductMasterPlantDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProductMasterPlantDatum, error) {
	o := &SapProductMasterPlantDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_product_master_plant_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProductMasterPlantDatum records from the query.
func (q sapProductMasterPlantDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProductMasterPlantDatumSlice, error) {
	var o []*SapProductMasterPlantDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProductMasterPlantDatum slice")
	}

	if len(sapProductMasterPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProductMasterPlantDatum records in the query.
func (q sapProductMasterPlantDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_product_master_plant_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProductMasterPlantDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_product_master_plant_data exists")
	}

	return count > 0, nil
}

// ProductSapProductMasterGeneralDatum pointed to by the foreign key.
func (o *SapProductMasterPlantDatum) ProductSapProductMasterGeneralDatum(mods ...qm.QueryMod) sapProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	query := SapProductMasterGeneralData(queryMods...)
	queries.SetFrom(query.Query, "`sap_product_master_general_data`")

	return query
}

// LoadProductSapProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProductMasterPlantDatumL) LoadProductSapProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProductMasterPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProductMasterPlantDatum
	var object *SapProductMasterPlantDatum

	if singular {
		object = maybeSapProductMasterPlantDatum.(*SapProductMasterPlantDatum)
	} else {
		slice = *maybeSapProductMasterPlantDatum.(*[]*SapProductMasterPlantDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProductMasterPlantDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProductMasterPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_product_master_general_data`),
		qm.WhereIn(`sap_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProductMasterGeneralDatum")
	}

	var resultSlice []*SapProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_product_master_general_data")
	}

	if len(sapProductMasterPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSapProductMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProductMasterGeneralDatumR{}
		}
		foreign.R.ProductSapProductMasterPlantData = append(foreign.R.ProductSapProductMasterPlantData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductSapProductMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProductMasterGeneralDatumR{}
				}
				foreign.R.ProductSapProductMasterPlantData = append(foreign.R.ProductSapProductMasterPlantData, local)
				break
			}
		}
	}

	return nil
}

// SetProductSapProductMasterGeneralDatum of the sapProductMasterPlantDatum to the related item.
// Sets o.R.ProductSapProductMasterGeneralDatum to related.
// Adds o to related.R.ProductSapProductMasterPlantData.
func (o *SapProductMasterPlantDatum) SetProductSapProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_product_master_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, sapProductMasterPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &sapProductMasterPlantDatumR{
			ProductSapProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductSapProductMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &sapProductMasterGeneralDatumR{
			ProductSapProductMasterPlantData: SapProductMasterPlantDatumSlice{o},
		}
	} else {
		related.R.ProductSapProductMasterPlantData = append(related.R.ProductSapProductMasterPlantData, o)
	}

	return nil
}

// SapProductMasterPlantData retrieves all the records using an executor.
func SapProductMasterPlantData(mods ...qm.QueryMod) sapProductMasterPlantDatumQuery {
	mods = append(mods, qm.From("`sap_product_master_plant_data`"))
	return sapProductMasterPlantDatumQuery{NewQuery(mods...)}
}

// FindSapProductMasterPlantDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProductMasterPlantDatum(ctx context.Context, exec boil.ContextExecutor, product string, plant string, selectCols ...string) (*SapProductMasterPlantDatum, error) {
	sapProductMasterPlantDatumObj := &SapProductMasterPlantDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_product_master_plant_data` where `Product`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, plant)

	err := q.Bind(ctx, exec, sapProductMasterPlantDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_product_master_plant_data")
	}

	if err = sapProductMasterPlantDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProductMasterPlantDatumObj, err
	}

	return sapProductMasterPlantDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProductMasterPlantDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_plant_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterPlantDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProductMasterPlantDatumInsertCacheMut.RLock()
	cache, cached := sapProductMasterPlantDatumInsertCache[key]
	sapProductMasterPlantDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProductMasterPlantDatumAllColumns,
			sapProductMasterPlantDatumColumnsWithDefault,
			sapProductMasterPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_product_master_plant_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_product_master_plant_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_product_master_plant_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProductMasterPlantDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_product_master_plant_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_plant_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterPlantDatumInsertCacheMut.Lock()
		sapProductMasterPlantDatumInsertCache[key] = cache
		sapProductMasterPlantDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProductMasterPlantDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProductMasterPlantDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProductMasterPlantDatumUpdateCacheMut.RLock()
	cache, cached := sapProductMasterPlantDatumUpdateCache[key]
	sapProductMasterPlantDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProductMasterPlantDatumAllColumns,
			sapProductMasterPlantDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_product_master_plant_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_product_master_plant_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProductMasterPlantDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, append(wl, sapProductMasterPlantDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_product_master_plant_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_product_master_plant_data")
	}

	if !cached {
		sapProductMasterPlantDatumUpdateCacheMut.Lock()
		sapProductMasterPlantDatumUpdateCache[key] = cache
		sapProductMasterPlantDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProductMasterPlantDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_product_master_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_product_master_plant_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProductMasterPlantDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_product_master_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterPlantDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProductMasterPlantDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProductMasterPlantDatum")
	}
	return rowsAff, nil
}

var mySQLSapProductMasterPlantDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProductMasterPlantDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_product_master_plant_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProductMasterPlantDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProductMasterPlantDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProductMasterPlantDatumUpsertCacheMut.RLock()
	cache, cached := sapProductMasterPlantDatumUpsertCache[key]
	sapProductMasterPlantDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProductMasterPlantDatumAllColumns,
			sapProductMasterPlantDatumColumnsWithDefault,
			sapProductMasterPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProductMasterPlantDatumAllColumns,
			sapProductMasterPlantDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_product_master_plant_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_product_master_plant_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_product_master_plant_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_product_master_plant_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProductMasterPlantDatumType, sapProductMasterPlantDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_product_master_plant_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_product_master_plant_data")
	}

CacheNoHooks:
	if !cached {
		sapProductMasterPlantDatumUpsertCacheMut.Lock()
		sapProductMasterPlantDatumUpsertCache[key] = cache
		sapProductMasterPlantDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProductMasterPlantDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProductMasterPlantDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProductMasterPlantDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProductMasterPlantDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_product_master_plant_data` WHERE `Product`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_product_master_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_product_master_plant_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProductMasterPlantDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProductMasterPlantDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_product_master_plant_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_plant_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProductMasterPlantDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProductMasterPlantDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_product_master_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterPlantDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProductMasterPlantDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_product_master_plant_data")
	}

	if len(sapProductMasterPlantDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProductMasterPlantDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProductMasterPlantDatum(ctx, exec, o.Product, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProductMasterPlantDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProductMasterPlantDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProductMasterPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_product_master_plant_data`.* FROM `sap_product_master_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProductMasterPlantDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProductMasterPlantDatumSlice")
	}

	*o = slice

	return nil
}

// SapProductMasterPlantDatumExists checks if the SapProductMasterPlantDatum row exists.
func SapProductMasterPlantDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_product_master_plant_data` where `Product`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_product_master_plant_data exists")
	}

	return exists, nil
}
