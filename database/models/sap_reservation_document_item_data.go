// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapReservationDocumentItemDatum is an object representing the database table.
type SapReservationDocumentItemDatum struct {
	Reservation                    string      `boil:"Reservation" json:"Reservation" toml:"Reservation" yaml:"Reservation"`
	ReservationItem                string      `boil:"ReservationItem" json:"ReservationItem" toml:"ReservationItem" yaml:"ReservationItem"`
	RecordType                     string      `boil:"RecordType" json:"RecordType" toml:"RecordType" yaml:"RecordType"`
	Product                        null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	RequirementType                null.String `boil:"RequirementType" json:"RequirementType,omitempty" toml:"RequirementType" yaml:"RequirementType,omitempty"`
	MatlCompRequirementDate        null.String `boil:"MatlCompRequirementDate" json:"MatlCompRequirementDate,omitempty" toml:"MatlCompRequirementDate" yaml:"MatlCompRequirementDate,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	ManufacturingOrderOperation    null.String `boil:"ManufacturingOrderOperation" json:"ManufacturingOrderOperation,omitempty" toml:"ManufacturingOrderOperation" yaml:"ManufacturingOrderOperation,omitempty"`
	GoodsMovementIsAllowed         null.Bool   `boil:"GoodsMovementIsAllowed" json:"GoodsMovementIsAllowed,omitempty" toml:"GoodsMovementIsAllowed" yaml:"GoodsMovementIsAllowed,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	DebitCreditCode                null.String `boil:"DebitCreditCode" json:"DebitCreditCode,omitempty" toml:"DebitCreditCode" yaml:"DebitCreditCode,omitempty"`
	BaseUnit                       null.String `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	GLAccount                      null.String `boil:"GLAccount" json:"GLAccount,omitempty" toml:"GLAccount" yaml:"GLAccount,omitempty"`
	GoodsMovementType              null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	EntryUnit                      null.String `boil:"EntryUnit" json:"EntryUnit,omitempty" toml:"EntryUnit" yaml:"EntryUnit,omitempty"`
	QuantityIsFixed                null.Bool   `boil:"QuantityIsFixed" json:"QuantityIsFixed,omitempty" toml:"QuantityIsFixed" yaml:"QuantityIsFixed,omitempty"`
	CompanyCodeCurrency            null.String `boil:"CompanyCodeCurrency" json:"CompanyCodeCurrency,omitempty" toml:"CompanyCodeCurrency" yaml:"CompanyCodeCurrency,omitempty"`
	IssuingOrReceivingPlant        null.String `boil:"IssuingOrReceivingPlant" json:"IssuingOrReceivingPlant,omitempty" toml:"IssuingOrReceivingPlant" yaml:"IssuingOrReceivingPlant,omitempty"`
	IssuingOrReceivingStorageLoc   null.String `boil:"IssuingOrReceivingStorageLoc" json:"IssuingOrReceivingStorageLoc,omitempty" toml:"IssuingOrReceivingStorageLoc" yaml:"IssuingOrReceivingStorageLoc,omitempty"`
	PurchasingDocument             null.String `boil:"PurchasingDocument" json:"PurchasingDocument,omitempty" toml:"PurchasingDocument" yaml:"PurchasingDocument,omitempty"`
	PurchasingDocumentItem         null.String `boil:"PurchasingDocumentItem" json:"PurchasingDocumentItem,omitempty" toml:"PurchasingDocumentItem" yaml:"PurchasingDocumentItem,omitempty"`
	Supplier                       null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	ResvnItmRequiredQtyInBaseUnit  null.String `boil:"ResvnItmRequiredQtyInBaseUnit" json:"ResvnItmRequiredQtyInBaseUnit,omitempty" toml:"ResvnItmRequiredQtyInBaseUnit" yaml:"ResvnItmRequiredQtyInBaseUnit,omitempty"`
	ReservationItemIsFinallyIssued null.Bool   `boil:"ReservationItemIsFinallyIssued" json:"ReservationItemIsFinallyIssued,omitempty" toml:"ReservationItemIsFinallyIssued" yaml:"ReservationItemIsFinallyIssued,omitempty"`
	ReservationItmIsMarkedForDeltn null.Bool   `boil:"ReservationItmIsMarkedForDeltn" json:"ReservationItmIsMarkedForDeltn,omitempty" toml:"ReservationItmIsMarkedForDeltn" yaml:"ReservationItmIsMarkedForDeltn,omitempty"`
	ResvnItmRequiredQtyInEntryUnit null.String `boil:"ResvnItmRequiredQtyInEntryUnit" json:"ResvnItmRequiredQtyInEntryUnit,omitempty" toml:"ResvnItmRequiredQtyInEntryUnit" yaml:"ResvnItmRequiredQtyInEntryUnit,omitempty"`
	ResvnItmWithdrawnQtyInBaseUnit null.String `boil:"ResvnItmWithdrawnQtyInBaseUnit" json:"ResvnItmWithdrawnQtyInBaseUnit,omitempty" toml:"ResvnItmWithdrawnQtyInBaseUnit" yaml:"ResvnItmWithdrawnQtyInBaseUnit,omitempty"`
	ResvnItmWithdrawnAmtInCCCrcy   null.String `boil:"ResvnItmWithdrawnAmtInCCCrcy" json:"ResvnItmWithdrawnAmtInCCCrcy,omitempty" toml:"ResvnItmWithdrawnAmtInCCCrcy" yaml:"ResvnItmWithdrawnAmtInCCCrcy,omitempty"`
	GoodsRecipientName             null.String `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	UnloadingPointName             null.String `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	ReservationItemText            null.String `boil:"ReservationItemText" json:"ReservationItemText,omitempty" toml:"ReservationItemText" yaml:"ReservationItemText,omitempty"`

	R *sapReservationDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapReservationDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapReservationDocumentItemDatumColumns = struct {
	Reservation                    string
	ReservationItem                string
	RecordType                     string
	Product                        string
	RequirementType                string
	MatlCompRequirementDate        string
	Plant                          string
	ManufacturingOrderOperation    string
	GoodsMovementIsAllowed         string
	StorageLocation                string
	Batch                          string
	DebitCreditCode                string
	BaseUnit                       string
	GLAccount                      string
	GoodsMovementType              string
	EntryUnit                      string
	QuantityIsFixed                string
	CompanyCodeCurrency            string
	IssuingOrReceivingPlant        string
	IssuingOrReceivingStorageLoc   string
	PurchasingDocument             string
	PurchasingDocumentItem         string
	Supplier                       string
	ResvnItmRequiredQtyInBaseUnit  string
	ReservationItemIsFinallyIssued string
	ReservationItmIsMarkedForDeltn string
	ResvnItmRequiredQtyInEntryUnit string
	ResvnItmWithdrawnQtyInBaseUnit string
	ResvnItmWithdrawnAmtInCCCrcy   string
	GoodsRecipientName             string
	UnloadingPointName             string
	ReservationItemText            string
}{
	Reservation:                    "Reservation",
	ReservationItem:                "ReservationItem",
	RecordType:                     "RecordType",
	Product:                        "Product",
	RequirementType:                "RequirementType",
	MatlCompRequirementDate:        "MatlCompRequirementDate",
	Plant:                          "Plant",
	ManufacturingOrderOperation:    "ManufacturingOrderOperation",
	GoodsMovementIsAllowed:         "GoodsMovementIsAllowed",
	StorageLocation:                "StorageLocation",
	Batch:                          "Batch",
	DebitCreditCode:                "DebitCreditCode",
	BaseUnit:                       "BaseUnit",
	GLAccount:                      "GLAccount",
	GoodsMovementType:              "GoodsMovementType",
	EntryUnit:                      "EntryUnit",
	QuantityIsFixed:                "QuantityIsFixed",
	CompanyCodeCurrency:            "CompanyCodeCurrency",
	IssuingOrReceivingPlant:        "IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc:   "IssuingOrReceivingStorageLoc",
	PurchasingDocument:             "PurchasingDocument",
	PurchasingDocumentItem:         "PurchasingDocumentItem",
	Supplier:                       "Supplier",
	ResvnItmRequiredQtyInBaseUnit:  "ResvnItmRequiredQtyInBaseUnit",
	ReservationItemIsFinallyIssued: "ReservationItemIsFinallyIssued",
	ReservationItmIsMarkedForDeltn: "ReservationItmIsMarkedForDeltn",
	ResvnItmRequiredQtyInEntryUnit: "ResvnItmRequiredQtyInEntryUnit",
	ResvnItmWithdrawnQtyInBaseUnit: "ResvnItmWithdrawnQtyInBaseUnit",
	ResvnItmWithdrawnAmtInCCCrcy:   "ResvnItmWithdrawnAmtInCCCrcy",
	GoodsRecipientName:             "GoodsRecipientName",
	UnloadingPointName:             "UnloadingPointName",
	ReservationItemText:            "ReservationItemText",
}

var SapReservationDocumentItemDatumTableColumns = struct {
	Reservation                    string
	ReservationItem                string
	RecordType                     string
	Product                        string
	RequirementType                string
	MatlCompRequirementDate        string
	Plant                          string
	ManufacturingOrderOperation    string
	GoodsMovementIsAllowed         string
	StorageLocation                string
	Batch                          string
	DebitCreditCode                string
	BaseUnit                       string
	GLAccount                      string
	GoodsMovementType              string
	EntryUnit                      string
	QuantityIsFixed                string
	CompanyCodeCurrency            string
	IssuingOrReceivingPlant        string
	IssuingOrReceivingStorageLoc   string
	PurchasingDocument             string
	PurchasingDocumentItem         string
	Supplier                       string
	ResvnItmRequiredQtyInBaseUnit  string
	ReservationItemIsFinallyIssued string
	ReservationItmIsMarkedForDeltn string
	ResvnItmRequiredQtyInEntryUnit string
	ResvnItmWithdrawnQtyInBaseUnit string
	ResvnItmWithdrawnAmtInCCCrcy   string
	GoodsRecipientName             string
	UnloadingPointName             string
	ReservationItemText            string
}{
	Reservation:                    "sap_reservation_document_item_data.Reservation",
	ReservationItem:                "sap_reservation_document_item_data.ReservationItem",
	RecordType:                     "sap_reservation_document_item_data.RecordType",
	Product:                        "sap_reservation_document_item_data.Product",
	RequirementType:                "sap_reservation_document_item_data.RequirementType",
	MatlCompRequirementDate:        "sap_reservation_document_item_data.MatlCompRequirementDate",
	Plant:                          "sap_reservation_document_item_data.Plant",
	ManufacturingOrderOperation:    "sap_reservation_document_item_data.ManufacturingOrderOperation",
	GoodsMovementIsAllowed:         "sap_reservation_document_item_data.GoodsMovementIsAllowed",
	StorageLocation:                "sap_reservation_document_item_data.StorageLocation",
	Batch:                          "sap_reservation_document_item_data.Batch",
	DebitCreditCode:                "sap_reservation_document_item_data.DebitCreditCode",
	BaseUnit:                       "sap_reservation_document_item_data.BaseUnit",
	GLAccount:                      "sap_reservation_document_item_data.GLAccount",
	GoodsMovementType:              "sap_reservation_document_item_data.GoodsMovementType",
	EntryUnit:                      "sap_reservation_document_item_data.EntryUnit",
	QuantityIsFixed:                "sap_reservation_document_item_data.QuantityIsFixed",
	CompanyCodeCurrency:            "sap_reservation_document_item_data.CompanyCodeCurrency",
	IssuingOrReceivingPlant:        "sap_reservation_document_item_data.IssuingOrReceivingPlant",
	IssuingOrReceivingStorageLoc:   "sap_reservation_document_item_data.IssuingOrReceivingStorageLoc",
	PurchasingDocument:             "sap_reservation_document_item_data.PurchasingDocument",
	PurchasingDocumentItem:         "sap_reservation_document_item_data.PurchasingDocumentItem",
	Supplier:                       "sap_reservation_document_item_data.Supplier",
	ResvnItmRequiredQtyInBaseUnit:  "sap_reservation_document_item_data.ResvnItmRequiredQtyInBaseUnit",
	ReservationItemIsFinallyIssued: "sap_reservation_document_item_data.ReservationItemIsFinallyIssued",
	ReservationItmIsMarkedForDeltn: "sap_reservation_document_item_data.ReservationItmIsMarkedForDeltn",
	ResvnItmRequiredQtyInEntryUnit: "sap_reservation_document_item_data.ResvnItmRequiredQtyInEntryUnit",
	ResvnItmWithdrawnQtyInBaseUnit: "sap_reservation_document_item_data.ResvnItmWithdrawnQtyInBaseUnit",
	ResvnItmWithdrawnAmtInCCCrcy:   "sap_reservation_document_item_data.ResvnItmWithdrawnAmtInCCCrcy",
	GoodsRecipientName:             "sap_reservation_document_item_data.GoodsRecipientName",
	UnloadingPointName:             "sap_reservation_document_item_data.UnloadingPointName",
	ReservationItemText:            "sap_reservation_document_item_data.ReservationItemText",
}

// Generated where

var SapReservationDocumentItemDatumWhere = struct {
	Reservation                    whereHelperstring
	ReservationItem                whereHelperstring
	RecordType                     whereHelperstring
	Product                        whereHelpernull_String
	RequirementType                whereHelpernull_String
	MatlCompRequirementDate        whereHelpernull_String
	Plant                          whereHelpernull_String
	ManufacturingOrderOperation    whereHelpernull_String
	GoodsMovementIsAllowed         whereHelpernull_Bool
	StorageLocation                whereHelpernull_String
	Batch                          whereHelpernull_String
	DebitCreditCode                whereHelpernull_String
	BaseUnit                       whereHelpernull_String
	GLAccount                      whereHelpernull_String
	GoodsMovementType              whereHelpernull_String
	EntryUnit                      whereHelpernull_String
	QuantityIsFixed                whereHelpernull_Bool
	CompanyCodeCurrency            whereHelpernull_String
	IssuingOrReceivingPlant        whereHelpernull_String
	IssuingOrReceivingStorageLoc   whereHelpernull_String
	PurchasingDocument             whereHelpernull_String
	PurchasingDocumentItem         whereHelpernull_String
	Supplier                       whereHelpernull_String
	ResvnItmRequiredQtyInBaseUnit  whereHelpernull_String
	ReservationItemIsFinallyIssued whereHelpernull_Bool
	ReservationItmIsMarkedForDeltn whereHelpernull_Bool
	ResvnItmRequiredQtyInEntryUnit whereHelpernull_String
	ResvnItmWithdrawnQtyInBaseUnit whereHelpernull_String
	ResvnItmWithdrawnAmtInCCCrcy   whereHelpernull_String
	GoodsRecipientName             whereHelpernull_String
	UnloadingPointName             whereHelpernull_String
	ReservationItemText            whereHelpernull_String
}{
	Reservation:                    whereHelperstring{field: "`sap_reservation_document_item_data`.`Reservation`"},
	ReservationItem:                whereHelperstring{field: "`sap_reservation_document_item_data`.`ReservationItem`"},
	RecordType:                     whereHelperstring{field: "`sap_reservation_document_item_data`.`RecordType`"},
	Product:                        whereHelpernull_String{field: "`sap_reservation_document_item_data`.`Product`"},
	RequirementType:                whereHelpernull_String{field: "`sap_reservation_document_item_data`.`RequirementType`"},
	MatlCompRequirementDate:        whereHelpernull_String{field: "`sap_reservation_document_item_data`.`MatlCompRequirementDate`"},
	Plant:                          whereHelpernull_String{field: "`sap_reservation_document_item_data`.`Plant`"},
	ManufacturingOrderOperation:    whereHelpernull_String{field: "`sap_reservation_document_item_data`.`ManufacturingOrderOperation`"},
	GoodsMovementIsAllowed:         whereHelpernull_Bool{field: "`sap_reservation_document_item_data`.`GoodsMovementIsAllowed`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_reservation_document_item_data`.`StorageLocation`"},
	Batch:                          whereHelpernull_String{field: "`sap_reservation_document_item_data`.`Batch`"},
	DebitCreditCode:                whereHelpernull_String{field: "`sap_reservation_document_item_data`.`DebitCreditCode`"},
	BaseUnit:                       whereHelpernull_String{field: "`sap_reservation_document_item_data`.`BaseUnit`"},
	GLAccount:                      whereHelpernull_String{field: "`sap_reservation_document_item_data`.`GLAccount`"},
	GoodsMovementType:              whereHelpernull_String{field: "`sap_reservation_document_item_data`.`GoodsMovementType`"},
	EntryUnit:                      whereHelpernull_String{field: "`sap_reservation_document_item_data`.`EntryUnit`"},
	QuantityIsFixed:                whereHelpernull_Bool{field: "`sap_reservation_document_item_data`.`QuantityIsFixed`"},
	CompanyCodeCurrency:            whereHelpernull_String{field: "`sap_reservation_document_item_data`.`CompanyCodeCurrency`"},
	IssuingOrReceivingPlant:        whereHelpernull_String{field: "`sap_reservation_document_item_data`.`IssuingOrReceivingPlant`"},
	IssuingOrReceivingStorageLoc:   whereHelpernull_String{field: "`sap_reservation_document_item_data`.`IssuingOrReceivingStorageLoc`"},
	PurchasingDocument:             whereHelpernull_String{field: "`sap_reservation_document_item_data`.`PurchasingDocument`"},
	PurchasingDocumentItem:         whereHelpernull_String{field: "`sap_reservation_document_item_data`.`PurchasingDocumentItem`"},
	Supplier:                       whereHelpernull_String{field: "`sap_reservation_document_item_data`.`Supplier`"},
	ResvnItmRequiredQtyInBaseUnit:  whereHelpernull_String{field: "`sap_reservation_document_item_data`.`ResvnItmRequiredQtyInBaseUnit`"},
	ReservationItemIsFinallyIssued: whereHelpernull_Bool{field: "`sap_reservation_document_item_data`.`ReservationItemIsFinallyIssued`"},
	ReservationItmIsMarkedForDeltn: whereHelpernull_Bool{field: "`sap_reservation_document_item_data`.`ReservationItmIsMarkedForDeltn`"},
	ResvnItmRequiredQtyInEntryUnit: whereHelpernull_String{field: "`sap_reservation_document_item_data`.`ResvnItmRequiredQtyInEntryUnit`"},
	ResvnItmWithdrawnQtyInBaseUnit: whereHelpernull_String{field: "`sap_reservation_document_item_data`.`ResvnItmWithdrawnQtyInBaseUnit`"},
	ResvnItmWithdrawnAmtInCCCrcy:   whereHelpernull_String{field: "`sap_reservation_document_item_data`.`ResvnItmWithdrawnAmtInCCCrcy`"},
	GoodsRecipientName:             whereHelpernull_String{field: "`sap_reservation_document_item_data`.`GoodsRecipientName`"},
	UnloadingPointName:             whereHelpernull_String{field: "`sap_reservation_document_item_data`.`UnloadingPointName`"},
	ReservationItemText:            whereHelpernull_String{field: "`sap_reservation_document_item_data`.`ReservationItemText`"},
}

// SapReservationDocumentItemDatumRels is where relationship names are stored.
var SapReservationDocumentItemDatumRels = struct {
	ReservationSapReservationDocumentHeaderDatum string
}{
	ReservationSapReservationDocumentHeaderDatum: "ReservationSapReservationDocumentHeaderDatum",
}

// sapReservationDocumentItemDatumR is where relationships are stored.
type sapReservationDocumentItemDatumR struct {
	ReservationSapReservationDocumentHeaderDatum *SapReservationDocumentHeaderDatum `boil:"ReservationSapReservationDocumentHeaderDatum" json:"ReservationSapReservationDocumentHeaderDatum" toml:"ReservationSapReservationDocumentHeaderDatum" yaml:"ReservationSapReservationDocumentHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapReservationDocumentItemDatumR) NewStruct() *sapReservationDocumentItemDatumR {
	return &sapReservationDocumentItemDatumR{}
}

// sapReservationDocumentItemDatumL is where Load methods for each relationship are stored.
type sapReservationDocumentItemDatumL struct{}

var (
	sapReservationDocumentItemDatumAllColumns            = []string{"Reservation", "ReservationItem", "RecordType", "Product", "RequirementType", "MatlCompRequirementDate", "Plant", "ManufacturingOrderOperation", "GoodsMovementIsAllowed", "StorageLocation", "Batch", "DebitCreditCode", "BaseUnit", "GLAccount", "GoodsMovementType", "EntryUnit", "QuantityIsFixed", "CompanyCodeCurrency", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc", "PurchasingDocument", "PurchasingDocumentItem", "Supplier", "ResvnItmRequiredQtyInBaseUnit", "ReservationItemIsFinallyIssued", "ReservationItmIsMarkedForDeltn", "ResvnItmRequiredQtyInEntryUnit", "ResvnItmWithdrawnQtyInBaseUnit", "ResvnItmWithdrawnAmtInCCCrcy", "GoodsRecipientName", "UnloadingPointName", "ReservationItemText"}
	sapReservationDocumentItemDatumColumnsWithoutDefault = []string{"Reservation", "ReservationItem", "RecordType", "Product", "RequirementType", "MatlCompRequirementDate", "Plant", "ManufacturingOrderOperation", "GoodsMovementIsAllowed", "StorageLocation", "Batch", "DebitCreditCode", "BaseUnit", "GLAccount", "GoodsMovementType", "EntryUnit", "QuantityIsFixed", "CompanyCodeCurrency", "IssuingOrReceivingPlant", "IssuingOrReceivingStorageLoc", "PurchasingDocument", "PurchasingDocumentItem", "Supplier", "ResvnItmRequiredQtyInBaseUnit", "ReservationItemIsFinallyIssued", "ReservationItmIsMarkedForDeltn", "ResvnItmRequiredQtyInEntryUnit", "ResvnItmWithdrawnQtyInBaseUnit", "ResvnItmWithdrawnAmtInCCCrcy", "GoodsRecipientName", "UnloadingPointName", "ReservationItemText"}
	sapReservationDocumentItemDatumColumnsWithDefault    = []string{}
	sapReservationDocumentItemDatumPrimaryKeyColumns     = []string{"Reservation", "ReservationItem", "RecordType"}
	sapReservationDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// SapReservationDocumentItemDatumSlice is an alias for a slice of pointers to SapReservationDocumentItemDatum.
	// This should almost always be used instead of []SapReservationDocumentItemDatum.
	SapReservationDocumentItemDatumSlice []*SapReservationDocumentItemDatum
	// SapReservationDocumentItemDatumHook is the signature for custom SapReservationDocumentItemDatum hook methods
	SapReservationDocumentItemDatumHook func(context.Context, boil.ContextExecutor, *SapReservationDocumentItemDatum) error

	sapReservationDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapReservationDocumentItemDatumType                 = reflect.TypeOf(&SapReservationDocumentItemDatum{})
	sapReservationDocumentItemDatumMapping              = queries.MakeStructMapping(sapReservationDocumentItemDatumType)
	sapReservationDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, sapReservationDocumentItemDatumPrimaryKeyColumns)
	sapReservationDocumentItemDatumInsertCacheMut       sync.RWMutex
	sapReservationDocumentItemDatumInsertCache          = make(map[string]insertCache)
	sapReservationDocumentItemDatumUpdateCacheMut       sync.RWMutex
	sapReservationDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	sapReservationDocumentItemDatumUpsertCacheMut       sync.RWMutex
	sapReservationDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapReservationDocumentItemDatumAfterSelectHooks []SapReservationDocumentItemDatumHook

var sapReservationDocumentItemDatumBeforeInsertHooks []SapReservationDocumentItemDatumHook
var sapReservationDocumentItemDatumAfterInsertHooks []SapReservationDocumentItemDatumHook

var sapReservationDocumentItemDatumBeforeUpdateHooks []SapReservationDocumentItemDatumHook
var sapReservationDocumentItemDatumAfterUpdateHooks []SapReservationDocumentItemDatumHook

var sapReservationDocumentItemDatumBeforeDeleteHooks []SapReservationDocumentItemDatumHook
var sapReservationDocumentItemDatumAfterDeleteHooks []SapReservationDocumentItemDatumHook

var sapReservationDocumentItemDatumBeforeUpsertHooks []SapReservationDocumentItemDatumHook
var sapReservationDocumentItemDatumAfterUpsertHooks []SapReservationDocumentItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapReservationDocumentItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapReservationDocumentItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapReservationDocumentItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapReservationDocumentItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapReservationDocumentItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapReservationDocumentItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapReservationDocumentItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapReservationDocumentItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapReservationDocumentItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapReservationDocumentItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapReservationDocumentItemDatumHook registers your hook function for all future operations.
func AddSapReservationDocumentItemDatumHook(hookPoint boil.HookPoint, sapReservationDocumentItemDatumHook SapReservationDocumentItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapReservationDocumentItemDatumAfterSelectHooks = append(sapReservationDocumentItemDatumAfterSelectHooks, sapReservationDocumentItemDatumHook)
	case boil.BeforeInsertHook:
		sapReservationDocumentItemDatumBeforeInsertHooks = append(sapReservationDocumentItemDatumBeforeInsertHooks, sapReservationDocumentItemDatumHook)
	case boil.AfterInsertHook:
		sapReservationDocumentItemDatumAfterInsertHooks = append(sapReservationDocumentItemDatumAfterInsertHooks, sapReservationDocumentItemDatumHook)
	case boil.BeforeUpdateHook:
		sapReservationDocumentItemDatumBeforeUpdateHooks = append(sapReservationDocumentItemDatumBeforeUpdateHooks, sapReservationDocumentItemDatumHook)
	case boil.AfterUpdateHook:
		sapReservationDocumentItemDatumAfterUpdateHooks = append(sapReservationDocumentItemDatumAfterUpdateHooks, sapReservationDocumentItemDatumHook)
	case boil.BeforeDeleteHook:
		sapReservationDocumentItemDatumBeforeDeleteHooks = append(sapReservationDocumentItemDatumBeforeDeleteHooks, sapReservationDocumentItemDatumHook)
	case boil.AfterDeleteHook:
		sapReservationDocumentItemDatumAfterDeleteHooks = append(sapReservationDocumentItemDatumAfterDeleteHooks, sapReservationDocumentItemDatumHook)
	case boil.BeforeUpsertHook:
		sapReservationDocumentItemDatumBeforeUpsertHooks = append(sapReservationDocumentItemDatumBeforeUpsertHooks, sapReservationDocumentItemDatumHook)
	case boil.AfterUpsertHook:
		sapReservationDocumentItemDatumAfterUpsertHooks = append(sapReservationDocumentItemDatumAfterUpsertHooks, sapReservationDocumentItemDatumHook)
	}
}

// One returns a single sapReservationDocumentItemDatum record from the query.
func (q sapReservationDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapReservationDocumentItemDatum, error) {
	o := &SapReservationDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_reservation_document_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapReservationDocumentItemDatum records from the query.
func (q sapReservationDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapReservationDocumentItemDatumSlice, error) {
	var o []*SapReservationDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapReservationDocumentItemDatum slice")
	}

	if len(sapReservationDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapReservationDocumentItemDatum records in the query.
func (q sapReservationDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_reservation_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapReservationDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_reservation_document_item_data exists")
	}

	return count > 0, nil
}

// ReservationSapReservationDocumentHeaderDatum pointed to by the foreign key.
func (o *SapReservationDocumentItemDatum) ReservationSapReservationDocumentHeaderDatum(mods ...qm.QueryMod) sapReservationDocumentHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Reservation` = ?", o.Reservation),
	}

	queryMods = append(queryMods, mods...)

	query := SapReservationDocumentHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_reservation_document_header_data`")

	return query
}

// LoadReservationSapReservationDocumentHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapReservationDocumentItemDatumL) LoadReservationSapReservationDocumentHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapReservationDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapReservationDocumentItemDatum
	var object *SapReservationDocumentItemDatum

	if singular {
		object = maybeSapReservationDocumentItemDatum.(*SapReservationDocumentItemDatum)
	} else {
		slice = *maybeSapReservationDocumentItemDatum.(*[]*SapReservationDocumentItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapReservationDocumentItemDatumR{}
		}
		args = append(args, object.Reservation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapReservationDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Reservation {
					continue Outer
				}
			}

			args = append(args, obj.Reservation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_reservation_document_header_data`),
		qm.WhereIn(`sap_reservation_document_header_data.Reservation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapReservationDocumentHeaderDatum")
	}

	var resultSlice []*SapReservationDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapReservationDocumentHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_reservation_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_reservation_document_header_data")
	}

	if len(sapReservationDocumentItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReservationSapReservationDocumentHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapReservationDocumentHeaderDatumR{}
		}
		foreign.R.ReservationSapReservationDocumentItemData = append(foreign.R.ReservationSapReservationDocumentItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Reservation == foreign.Reservation {
				local.R.ReservationSapReservationDocumentHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapReservationDocumentHeaderDatumR{}
				}
				foreign.R.ReservationSapReservationDocumentItemData = append(foreign.R.ReservationSapReservationDocumentItemData, local)
				break
			}
		}
	}

	return nil
}

// SetReservationSapReservationDocumentHeaderDatum of the sapReservationDocumentItemDatum to the related item.
// Sets o.R.ReservationSapReservationDocumentHeaderDatum to related.
// Adds o to related.R.ReservationSapReservationDocumentItemData.
func (o *SapReservationDocumentItemDatum) SetReservationSapReservationDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapReservationDocumentHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_reservation_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Reservation"}),
		strmangle.WhereClause("`", "`", 0, sapReservationDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Reservation, o.Reservation, o.ReservationItem, o.RecordType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Reservation = related.Reservation
	if o.R == nil {
		o.R = &sapReservationDocumentItemDatumR{
			ReservationSapReservationDocumentHeaderDatum: related,
		}
	} else {
		o.R.ReservationSapReservationDocumentHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapReservationDocumentHeaderDatumR{
			ReservationSapReservationDocumentItemData: SapReservationDocumentItemDatumSlice{o},
		}
	} else {
		related.R.ReservationSapReservationDocumentItemData = append(related.R.ReservationSapReservationDocumentItemData, o)
	}

	return nil
}

// SapReservationDocumentItemData retrieves all the records using an executor.
func SapReservationDocumentItemData(mods ...qm.QueryMod) sapReservationDocumentItemDatumQuery {
	mods = append(mods, qm.From("`sap_reservation_document_item_data`"))
	return sapReservationDocumentItemDatumQuery{NewQuery(mods...)}
}

// FindSapReservationDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapReservationDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, reservation string, reservationItem string, recordType string, selectCols ...string) (*SapReservationDocumentItemDatum, error) {
	sapReservationDocumentItemDatumObj := &SapReservationDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_reservation_document_item_data` where `Reservation`=? AND `ReservationItem`=? AND `RecordType`=?", sel,
	)

	q := queries.Raw(query, reservation, reservationItem, recordType)

	err := q.Bind(ctx, exec, sapReservationDocumentItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_reservation_document_item_data")
	}

	if err = sapReservationDocumentItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapReservationDocumentItemDatumObj, err
	}

	return sapReservationDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapReservationDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_reservation_document_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapReservationDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapReservationDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := sapReservationDocumentItemDatumInsertCache[key]
	sapReservationDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapReservationDocumentItemDatumAllColumns,
			sapReservationDocumentItemDatumColumnsWithDefault,
			sapReservationDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_reservation_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_reservation_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_reservation_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapReservationDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_reservation_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Reservation,
		o.ReservationItem,
		o.RecordType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_reservation_document_item_data")
	}

CacheNoHooks:
	if !cached {
		sapReservationDocumentItemDatumInsertCacheMut.Lock()
		sapReservationDocumentItemDatumInsertCache[key] = cache
		sapReservationDocumentItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapReservationDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapReservationDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapReservationDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := sapReservationDocumentItemDatumUpdateCache[key]
	sapReservationDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapReservationDocumentItemDatumAllColumns,
			sapReservationDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_reservation_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_reservation_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapReservationDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, append(wl, sapReservationDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_reservation_document_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_reservation_document_item_data")
	}

	if !cached {
		sapReservationDocumentItemDatumUpdateCacheMut.Lock()
		sapReservationDocumentItemDatumUpdateCache[key] = cache
		sapReservationDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapReservationDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_reservation_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_reservation_document_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapReservationDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapReservationDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_reservation_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapReservationDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapReservationDocumentItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapReservationDocumentItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapReservationDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapReservationDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_reservation_document_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapReservationDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapReservationDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapReservationDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := sapReservationDocumentItemDatumUpsertCache[key]
	sapReservationDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapReservationDocumentItemDatumAllColumns,
			sapReservationDocumentItemDatumColumnsWithDefault,
			sapReservationDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapReservationDocumentItemDatumAllColumns,
			sapReservationDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_reservation_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_reservation_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_reservation_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_reservation_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapReservationDocumentItemDatumType, sapReservationDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_reservation_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_reservation_document_item_data")
	}

CacheNoHooks:
	if !cached {
		sapReservationDocumentItemDatumUpsertCacheMut.Lock()
		sapReservationDocumentItemDatumUpsertCache[key] = cache
		sapReservationDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapReservationDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapReservationDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapReservationDocumentItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapReservationDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_reservation_document_item_data` WHERE `Reservation`=? AND `ReservationItem`=? AND `RecordType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_reservation_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_reservation_document_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapReservationDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapReservationDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_reservation_document_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_reservation_document_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapReservationDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapReservationDocumentItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapReservationDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_reservation_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapReservationDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapReservationDocumentItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_reservation_document_item_data")
	}

	if len(sapReservationDocumentItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapReservationDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapReservationDocumentItemDatum(ctx, exec, o.Reservation, o.ReservationItem, o.RecordType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapReservationDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapReservationDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapReservationDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_reservation_document_item_data`.* FROM `sap_reservation_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapReservationDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapReservationDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapReservationDocumentItemDatumExists checks if the SapReservationDocumentItemDatum row exists.
func SapReservationDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, reservation string, reservationItem string, recordType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_reservation_document_item_data` where `Reservation`=? AND `ReservationItem`=? AND `RecordType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, reservation, reservationItem, recordType)
	}
	row := exec.QueryRowContext(ctx, sql, reservation, reservationItem, recordType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_reservation_document_item_data exists")
	}

	return exists, nil
}
