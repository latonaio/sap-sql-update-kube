// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesContractHeaderDatum is an object representing the database table.
type SapSalesContractHeaderDatum struct {
	SalesContract                  string      `boil:"SalesContract" json:"SalesContract" toml:"SalesContract" yaml:"SalesContract"`
	SalesContractType              null.String `boil:"SalesContractType" json:"SalesContractType,omitempty" toml:"SalesContractType" yaml:"SalesContractType,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision           null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                  null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderDate      null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	SalesContractDate              null.String `boil:"SalesContractDate" json:"SalesContractDate,omitempty" toml:"SalesContractDate" yaml:"SalesContractDate,omitempty"`
	TotalNetAmount                 null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	SDDocumentReason               null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PricingDate                    null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                  null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	SalesContractValidityStartDate null.String `boil:"SalesContractValidityStartDate" json:"SalesContractValidityStartDate,omitempty" toml:"SalesContractValidityStartDate" yaml:"SalesContractValidityStartDate,omitempty"`
	SalesContractValidityEndDate   null.String `boil:"SalesContractValidityEndDate" json:"SalesContractValidityEndDate,omitempty" toml:"SalesContractValidityEndDate" yaml:"SalesContractValidityEndDate,omitempty"`
	SalesContractSignedDate        null.String `boil:"SalesContractSignedDate" json:"SalesContractSignedDate,omitempty" toml:"SalesContractSignedDate" yaml:"SalesContractSignedDate,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentCategory    null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	SalesDocApprovalStatus         null.String `boil:"SalesDocApprovalStatus" json:"SalesDocApprovalStatus,omitempty" toml:"SalesDocApprovalStatus" yaml:"SalesDocApprovalStatus,omitempty"`
	SalesContractApprovalReason    null.String `boil:"SalesContractApprovalReason" json:"SalesContractApprovalReason,omitempty" toml:"SalesContractApprovalReason" yaml:"SalesContractApprovalReason,omitempty"`
	OverallSDProcessStatus         null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	TotalCreditCheckStatus         null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	OverallSDDocumentRejectionSts  null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`

	R *sapSalesContractHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesContractHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesContractHeaderDatumColumns = struct {
	SalesContract                  string
	SalesContractType              string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	SalesContractDate              string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	SalesContractValidityStartDate string
	SalesContractValidityEndDate   string
	SalesContractSignedDate        string
	ReferenceSDDocument            string
	ReferenceSDDocumentCategory    string
	SalesDocApprovalStatus         string
	SalesContractApprovalReason    string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
}{
	SalesContract:                  "SalesContract",
	SalesContractType:              "SalesContractType",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	OrganizationDivision:           "OrganizationDivision",
	SalesGroup:                     "SalesGroup",
	SalesOffice:                    "SalesOffice",
	SalesDistrict:                  "SalesDistrict",
	SoldToParty:                    "SoldToParty",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "CustomerPurchaseOrderDate",
	SalesContractDate:              "SalesContractDate",
	TotalNetAmount:                 "TotalNetAmount",
	TransactionCurrency:            "TransactionCurrency",
	SDDocumentReason:               "SDDocumentReason",
	PricingDate:                    "PricingDate",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	PaymentMethod:                  "PaymentMethod",
	SalesContractValidityStartDate: "SalesContractValidityStartDate",
	SalesContractValidityEndDate:   "SalesContractValidityEndDate",
	SalesContractSignedDate:        "SalesContractSignedDate",
	ReferenceSDDocument:            "ReferenceSDDocument",
	ReferenceSDDocumentCategory:    "ReferenceSDDocumentCategory",
	SalesDocApprovalStatus:         "SalesDocApprovalStatus",
	SalesContractApprovalReason:    "SalesContractApprovalReason",
	OverallSDProcessStatus:         "OverallSDProcessStatus",
	TotalCreditCheckStatus:         "TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "OverallSDDocumentRejectionSts",
}

var SapSalesContractHeaderDatumTableColumns = struct {
	SalesContract                  string
	SalesContractType              string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	SalesContractDate              string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	SalesContractValidityStartDate string
	SalesContractValidityEndDate   string
	SalesContractSignedDate        string
	ReferenceSDDocument            string
	ReferenceSDDocumentCategory    string
	SalesDocApprovalStatus         string
	SalesContractApprovalReason    string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
}{
	SalesContract:                  "sap_sales_contract_header_data.SalesContract",
	SalesContractType:              "sap_sales_contract_header_data.SalesContractType",
	SalesOrganization:              "sap_sales_contract_header_data.SalesOrganization",
	DistributionChannel:            "sap_sales_contract_header_data.DistributionChannel",
	OrganizationDivision:           "sap_sales_contract_header_data.OrganizationDivision",
	SalesGroup:                     "sap_sales_contract_header_data.SalesGroup",
	SalesOffice:                    "sap_sales_contract_header_data.SalesOffice",
	SalesDistrict:                  "sap_sales_contract_header_data.SalesDistrict",
	SoldToParty:                    "sap_sales_contract_header_data.SoldToParty",
	CreationDate:                   "sap_sales_contract_header_data.CreationDate",
	LastChangeDate:                 "sap_sales_contract_header_data.LastChangeDate",
	PurchaseOrderByCustomer:        "sap_sales_contract_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "sap_sales_contract_header_data.CustomerPurchaseOrderDate",
	SalesContractDate:              "sap_sales_contract_header_data.SalesContractDate",
	TotalNetAmount:                 "sap_sales_contract_header_data.TotalNetAmount",
	TransactionCurrency:            "sap_sales_contract_header_data.TransactionCurrency",
	SDDocumentReason:               "sap_sales_contract_header_data.SDDocumentReason",
	PricingDate:                    "sap_sales_contract_header_data.PricingDate",
	IncotermsClassification:        "sap_sales_contract_header_data.IncotermsClassification",
	CustomerPaymentTerms:           "sap_sales_contract_header_data.CustomerPaymentTerms",
	PaymentMethod:                  "sap_sales_contract_header_data.PaymentMethod",
	SalesContractValidityStartDate: "sap_sales_contract_header_data.SalesContractValidityStartDate",
	SalesContractValidityEndDate:   "sap_sales_contract_header_data.SalesContractValidityEndDate",
	SalesContractSignedDate:        "sap_sales_contract_header_data.SalesContractSignedDate",
	ReferenceSDDocument:            "sap_sales_contract_header_data.ReferenceSDDocument",
	ReferenceSDDocumentCategory:    "sap_sales_contract_header_data.ReferenceSDDocumentCategory",
	SalesDocApprovalStatus:         "sap_sales_contract_header_data.SalesDocApprovalStatus",
	SalesContractApprovalReason:    "sap_sales_contract_header_data.SalesContractApprovalReason",
	OverallSDProcessStatus:         "sap_sales_contract_header_data.OverallSDProcessStatus",
	TotalCreditCheckStatus:         "sap_sales_contract_header_data.TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "sap_sales_contract_header_data.OverallSDDocumentRejectionSts",
}

// Generated where

var SapSalesContractHeaderDatumWhere = struct {
	SalesContract                  whereHelperstring
	SalesContractType              whereHelpernull_String
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	OrganizationDivision           whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SalesDistrict                  whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	CustomerPurchaseOrderDate      whereHelpernull_String
	SalesContractDate              whereHelpernull_String
	TotalNetAmount                 whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	SDDocumentReason               whereHelpernull_String
	PricingDate                    whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	PaymentMethod                  whereHelpernull_String
	SalesContractValidityStartDate whereHelpernull_String
	SalesContractValidityEndDate   whereHelpernull_String
	SalesContractSignedDate        whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	ReferenceSDDocumentCategory    whereHelpernull_String
	SalesDocApprovalStatus         whereHelpernull_String
	SalesContractApprovalReason    whereHelpernull_String
	OverallSDProcessStatus         whereHelpernull_String
	TotalCreditCheckStatus         whereHelpernull_String
	OverallSDDocumentRejectionSts  whereHelpernull_String
}{
	SalesContract:                  whereHelperstring{field: "`sap_sales_contract_header_data`.`SalesContract`"},
	SalesContractType:              whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesContractType`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_sales_contract_header_data`.`DistributionChannel`"},
	OrganizationDivision:           whereHelpernull_String{field: "`sap_sales_contract_header_data`.`OrganizationDivision`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesGroup`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesOffice`"},
	SalesDistrict:                  whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesDistrict`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SoldToParty`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_sales_contract_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_sales_contract_header_data`.`LastChangeDate`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_sales_contract_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderDate:      whereHelpernull_String{field: "`sap_sales_contract_header_data`.`CustomerPurchaseOrderDate`"},
	SalesContractDate:              whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesContractDate`"},
	TotalNetAmount:                 whereHelpernull_String{field: "`sap_sales_contract_header_data`.`TotalNetAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_sales_contract_header_data`.`TransactionCurrency`"},
	SDDocumentReason:               whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SDDocumentReason`"},
	PricingDate:                    whereHelpernull_String{field: "`sap_sales_contract_header_data`.`PricingDate`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_sales_contract_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_sales_contract_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                  whereHelpernull_String{field: "`sap_sales_contract_header_data`.`PaymentMethod`"},
	SalesContractValidityStartDate: whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesContractValidityStartDate`"},
	SalesContractValidityEndDate:   whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesContractValidityEndDate`"},
	SalesContractSignedDate:        whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesContractSignedDate`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_sales_contract_header_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentCategory:    whereHelpernull_String{field: "`sap_sales_contract_header_data`.`ReferenceSDDocumentCategory`"},
	SalesDocApprovalStatus:         whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesDocApprovalStatus`"},
	SalesContractApprovalReason:    whereHelpernull_String{field: "`sap_sales_contract_header_data`.`SalesContractApprovalReason`"},
	OverallSDProcessStatus:         whereHelpernull_String{field: "`sap_sales_contract_header_data`.`OverallSDProcessStatus`"},
	TotalCreditCheckStatus:         whereHelpernull_String{field: "`sap_sales_contract_header_data`.`TotalCreditCheckStatus`"},
	OverallSDDocumentRejectionSts:  whereHelpernull_String{field: "`sap_sales_contract_header_data`.`OverallSDDocumentRejectionSts`"},
}

// SapSalesContractHeaderDatumRels is where relationship names are stored.
var SapSalesContractHeaderDatumRels = struct {
	SalesContractSapSalesContractHeaderPartnerData      string
	SalesContractSapSalesContractItemData               string
	SalesContractSapSalesContractItemPricingElementData string
}{
	SalesContractSapSalesContractHeaderPartnerData:      "SalesContractSapSalesContractHeaderPartnerData",
	SalesContractSapSalesContractItemData:               "SalesContractSapSalesContractItemData",
	SalesContractSapSalesContractItemPricingElementData: "SalesContractSapSalesContractItemPricingElementData",
}

// sapSalesContractHeaderDatumR is where relationships are stored.
type sapSalesContractHeaderDatumR struct {
	SalesContractSapSalesContractHeaderPartnerData      SapSalesContractHeaderPartnerDatumSlice      `boil:"SalesContractSapSalesContractHeaderPartnerData" json:"SalesContractSapSalesContractHeaderPartnerData" toml:"SalesContractSapSalesContractHeaderPartnerData" yaml:"SalesContractSapSalesContractHeaderPartnerData"`
	SalesContractSapSalesContractItemData               SapSalesContractItemDatumSlice               `boil:"SalesContractSapSalesContractItemData" json:"SalesContractSapSalesContractItemData" toml:"SalesContractSapSalesContractItemData" yaml:"SalesContractSapSalesContractItemData"`
	SalesContractSapSalesContractItemPricingElementData SapSalesContractItemPricingElementDatumSlice `boil:"SalesContractSapSalesContractItemPricingElementData" json:"SalesContractSapSalesContractItemPricingElementData" toml:"SalesContractSapSalesContractItemPricingElementData" yaml:"SalesContractSapSalesContractItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesContractHeaderDatumR) NewStruct() *sapSalesContractHeaderDatumR {
	return &sapSalesContractHeaderDatumR{}
}

// sapSalesContractHeaderDatumL is where Load methods for each relationship are stored.
type sapSalesContractHeaderDatumL struct{}

var (
	sapSalesContractHeaderDatumAllColumns            = []string{"SalesContract", "SalesContractType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "SalesContractDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "SalesContractValidityStartDate", "SalesContractValidityEndDate", "SalesContractSignedDate", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "SalesDocApprovalStatus", "SalesContractApprovalReason", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapSalesContractHeaderDatumColumnsWithoutDefault = []string{"SalesContract", "SalesContractType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "SalesContractDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "SalesContractValidityStartDate", "SalesContractValidityEndDate", "SalesContractSignedDate", "ReferenceSDDocument", "ReferenceSDDocumentCategory", "SalesDocApprovalStatus", "SalesContractApprovalReason", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapSalesContractHeaderDatumColumnsWithDefault    = []string{}
	sapSalesContractHeaderDatumPrimaryKeyColumns     = []string{"SalesContract"}
)

type (
	// SapSalesContractHeaderDatumSlice is an alias for a slice of pointers to SapSalesContractHeaderDatum.
	// This should almost always be used instead of []SapSalesContractHeaderDatum.
	SapSalesContractHeaderDatumSlice []*SapSalesContractHeaderDatum
	// SapSalesContractHeaderDatumHook is the signature for custom SapSalesContractHeaderDatum hook methods
	SapSalesContractHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapSalesContractHeaderDatum) error

	sapSalesContractHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesContractHeaderDatumType                 = reflect.TypeOf(&SapSalesContractHeaderDatum{})
	sapSalesContractHeaderDatumMapping              = queries.MakeStructMapping(sapSalesContractHeaderDatumType)
	sapSalesContractHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, sapSalesContractHeaderDatumPrimaryKeyColumns)
	sapSalesContractHeaderDatumInsertCacheMut       sync.RWMutex
	sapSalesContractHeaderDatumInsertCache          = make(map[string]insertCache)
	sapSalesContractHeaderDatumUpdateCacheMut       sync.RWMutex
	sapSalesContractHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapSalesContractHeaderDatumUpsertCacheMut       sync.RWMutex
	sapSalesContractHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesContractHeaderDatumBeforeInsertHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumBeforeUpdateHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumBeforeDeleteHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumBeforeUpsertHooks []SapSalesContractHeaderDatumHook

var sapSalesContractHeaderDatumAfterInsertHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumAfterSelectHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumAfterUpdateHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumAfterDeleteHooks []SapSalesContractHeaderDatumHook
var sapSalesContractHeaderDatumAfterUpsertHooks []SapSalesContractHeaderDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesContractHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesContractHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesContractHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesContractHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesContractHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesContractHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesContractHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesContractHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesContractHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesContractHeaderDatumHook registers your hook function for all future operations.
func AddSapSalesContractHeaderDatumHook(hookPoint boil.HookPoint, sapSalesContractHeaderDatumHook SapSalesContractHeaderDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sapSalesContractHeaderDatumBeforeInsertHooks = append(sapSalesContractHeaderDatumBeforeInsertHooks, sapSalesContractHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesContractHeaderDatumBeforeUpdateHooks = append(sapSalesContractHeaderDatumBeforeUpdateHooks, sapSalesContractHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesContractHeaderDatumBeforeDeleteHooks = append(sapSalesContractHeaderDatumBeforeDeleteHooks, sapSalesContractHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesContractHeaderDatumBeforeUpsertHooks = append(sapSalesContractHeaderDatumBeforeUpsertHooks, sapSalesContractHeaderDatumHook)
	case boil.AfterInsertHook:
		sapSalesContractHeaderDatumAfterInsertHooks = append(sapSalesContractHeaderDatumAfterInsertHooks, sapSalesContractHeaderDatumHook)
	case boil.AfterSelectHook:
		sapSalesContractHeaderDatumAfterSelectHooks = append(sapSalesContractHeaderDatumAfterSelectHooks, sapSalesContractHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapSalesContractHeaderDatumAfterUpdateHooks = append(sapSalesContractHeaderDatumAfterUpdateHooks, sapSalesContractHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapSalesContractHeaderDatumAfterDeleteHooks = append(sapSalesContractHeaderDatumAfterDeleteHooks, sapSalesContractHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapSalesContractHeaderDatumAfterUpsertHooks = append(sapSalesContractHeaderDatumAfterUpsertHooks, sapSalesContractHeaderDatumHook)
	}
}

// One returns a single sapSalesContractHeaderDatum record from the query.
func (q sapSalesContractHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesContractHeaderDatum, error) {
	o := &SapSalesContractHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_contract_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesContractHeaderDatum records from the query.
func (q sapSalesContractHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesContractHeaderDatumSlice, error) {
	var o []*SapSalesContractHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesContractHeaderDatum slice")
	}

	if len(sapSalesContractHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesContractHeaderDatum records in the query.
func (q sapSalesContractHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_contract_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesContractHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_contract_header_data exists")
	}

	return count > 0, nil
}

// SalesContractSapSalesContractHeaderPartnerData retrieves all the sap_sales_contract_header_partner_datum's SapSalesContractHeaderPartnerData with an executor via SalesContract column.
func (o *SapSalesContractHeaderDatum) SalesContractSapSalesContractHeaderPartnerData(mods ...qm.QueryMod) sapSalesContractHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_contract_header_partner_data`.`SalesContract`=?", o.SalesContract),
	)

	query := SapSalesContractHeaderPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_contract_header_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_contract_header_partner_data`.*"})
	}

	return query
}

// SalesContractSapSalesContractItemData retrieves all the sap_sales_contract_item_datum's SapSalesContractItemData with an executor via SalesContract column.
func (o *SapSalesContractHeaderDatum) SalesContractSapSalesContractItemData(mods ...qm.QueryMod) sapSalesContractItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_contract_item_data`.`SalesContract`=?", o.SalesContract),
	)

	query := SapSalesContractItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_contract_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_contract_item_data`.*"})
	}

	return query
}

// SalesContractSapSalesContractItemPricingElementData retrieves all the sap_sales_contract_item_pricing_element_datum's SapSalesContractItemPricingElementData with an executor via SalesContract column.
func (o *SapSalesContractHeaderDatum) SalesContractSapSalesContractItemPricingElementData(mods ...qm.QueryMod) sapSalesContractItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_contract_item_pricing_element_data`.`SalesContract`=?", o.SalesContract),
	)

	query := SapSalesContractItemPricingElementData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_contract_item_pricing_element_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_contract_item_pricing_element_data`.*"})
	}

	return query
}

// LoadSalesContractSapSalesContractHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesContractHeaderDatumL) LoadSalesContractSapSalesContractHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesContractHeaderDatum
	var object *SapSalesContractHeaderDatum

	if singular {
		object = maybeSapSalesContractHeaderDatum.(*SapSalesContractHeaderDatum)
	} else {
		slice = *maybeSapSalesContractHeaderDatum.(*[]*SapSalesContractHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesContractHeaderDatumR{}
		}
		args = append(args, object.SalesContract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesContractHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesContract {
					continue Outer
				}
			}

			args = append(args, obj.SalesContract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_contract_header_partner_data`),
		qm.WhereIn(`sap_sales_contract_header_partner_data.SalesContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_contract_header_partner_data")
	}

	var resultSlice []*SapSalesContractHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_contract_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_contract_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_contract_header_partner_data")
	}

	if len(sapSalesContractHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesContractSapSalesContractHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesContractHeaderPartnerDatumR{}
			}
			foreign.R.SalesContractSapSalesContractHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesContract == foreign.SalesContract {
				local.R.SalesContractSapSalesContractHeaderPartnerData = append(local.R.SalesContractSapSalesContractHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesContractHeaderPartnerDatumR{}
				}
				foreign.R.SalesContractSapSalesContractHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesContractSapSalesContractItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesContractHeaderDatumL) LoadSalesContractSapSalesContractItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesContractHeaderDatum
	var object *SapSalesContractHeaderDatum

	if singular {
		object = maybeSapSalesContractHeaderDatum.(*SapSalesContractHeaderDatum)
	} else {
		slice = *maybeSapSalesContractHeaderDatum.(*[]*SapSalesContractHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesContractHeaderDatumR{}
		}
		args = append(args, object.SalesContract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesContractHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesContract {
					continue Outer
				}
			}

			args = append(args, obj.SalesContract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_contract_item_data`),
		qm.WhereIn(`sap_sales_contract_item_data.SalesContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_contract_item_data")
	}

	var resultSlice []*SapSalesContractItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_contract_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_contract_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_contract_item_data")
	}

	if len(sapSalesContractItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesContractSapSalesContractItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesContractItemDatumR{}
			}
			foreign.R.SalesContractSapSalesContractHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesContract == foreign.SalesContract {
				local.R.SalesContractSapSalesContractItemData = append(local.R.SalesContractSapSalesContractItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesContractItemDatumR{}
				}
				foreign.R.SalesContractSapSalesContractHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesContractSapSalesContractItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesContractHeaderDatumL) LoadSalesContractSapSalesContractItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesContractHeaderDatum
	var object *SapSalesContractHeaderDatum

	if singular {
		object = maybeSapSalesContractHeaderDatum.(*SapSalesContractHeaderDatum)
	} else {
		slice = *maybeSapSalesContractHeaderDatum.(*[]*SapSalesContractHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesContractHeaderDatumR{}
		}
		args = append(args, object.SalesContract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesContractHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesContract {
					continue Outer
				}
			}

			args = append(args, obj.SalesContract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_contract_item_pricing_element_data`),
		qm.WhereIn(`sap_sales_contract_item_pricing_element_data.SalesContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_contract_item_pricing_element_data")
	}

	var resultSlice []*SapSalesContractItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_contract_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_contract_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_contract_item_pricing_element_data")
	}

	if len(sapSalesContractItemPricingElementDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesContractSapSalesContractItemPricingElementData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesContractItemPricingElementDatumR{}
			}
			foreign.R.SalesContractSapSalesContractHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesContract == foreign.SalesContract {
				local.R.SalesContractSapSalesContractItemPricingElementData = append(local.R.SalesContractSapSalesContractItemPricingElementData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesContractItemPricingElementDatumR{}
				}
				foreign.R.SalesContractSapSalesContractHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddSalesContractSapSalesContractHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_sales_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesContractSapSalesContractHeaderPartnerData.
// Sets related.R.SalesContractSapSalesContractHeaderDatum appropriately.
func (o *SapSalesContractHeaderDatum) AddSalesContractSapSalesContractHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesContractHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesContract = o.SalesContract
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_contract_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesContract"}),
				strmangle.WhereClause("`", "`", 0, sapSalesContractHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesContract, rel.SalesContract, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesContract = o.SalesContract
		}
	}

	if o.R == nil {
		o.R = &sapSalesContractHeaderDatumR{
			SalesContractSapSalesContractHeaderPartnerData: related,
		}
	} else {
		o.R.SalesContractSapSalesContractHeaderPartnerData = append(o.R.SalesContractSapSalesContractHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesContractHeaderPartnerDatumR{
				SalesContractSapSalesContractHeaderDatum: o,
			}
		} else {
			rel.R.SalesContractSapSalesContractHeaderDatum = o
		}
	}
	return nil
}

// AddSalesContractSapSalesContractItemData adds the given related objects to the existing relationships
// of the sap_sales_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesContractSapSalesContractItemData.
// Sets related.R.SalesContractSapSalesContractHeaderDatum appropriately.
func (o *SapSalesContractHeaderDatum) AddSalesContractSapSalesContractItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesContractItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesContract = o.SalesContract
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_contract_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesContract"}),
				strmangle.WhereClause("`", "`", 0, sapSalesContractItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesContract, rel.SalesContract, rel.SalesContractItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesContract = o.SalesContract
		}
	}

	if o.R == nil {
		o.R = &sapSalesContractHeaderDatumR{
			SalesContractSapSalesContractItemData: related,
		}
	} else {
		o.R.SalesContractSapSalesContractItemData = append(o.R.SalesContractSapSalesContractItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesContractItemDatumR{
				SalesContractSapSalesContractHeaderDatum: o,
			}
		} else {
			rel.R.SalesContractSapSalesContractHeaderDatum = o
		}
	}
	return nil
}

// AddSalesContractSapSalesContractItemPricingElementData adds the given related objects to the existing relationships
// of the sap_sales_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesContractSapSalesContractItemPricingElementData.
// Sets related.R.SalesContractSapSalesContractHeaderDatum appropriately.
func (o *SapSalesContractHeaderDatum) AddSalesContractSapSalesContractItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesContractItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesContract = o.SalesContract
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_contract_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesContract"}),
				strmangle.WhereClause("`", "`", 0, sapSalesContractItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesContract, rel.SalesContract, rel.SalesContractItem, rel.PricingProcedureStep, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesContract = o.SalesContract
		}
	}

	if o.R == nil {
		o.R = &sapSalesContractHeaderDatumR{
			SalesContractSapSalesContractItemPricingElementData: related,
		}
	} else {
		o.R.SalesContractSapSalesContractItemPricingElementData = append(o.R.SalesContractSapSalesContractItemPricingElementData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesContractItemPricingElementDatumR{
				SalesContractSapSalesContractHeaderDatum: o,
			}
		} else {
			rel.R.SalesContractSapSalesContractHeaderDatum = o
		}
	}
	return nil
}

// SapSalesContractHeaderData retrieves all the records using an executor.
func SapSalesContractHeaderData(mods ...qm.QueryMod) sapSalesContractHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_sales_contract_header_data`"))
	return sapSalesContractHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapSalesContractHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, salesContract string, selectCols ...string) (*SapSalesContractHeaderDatum, error) {
	sapSalesContractHeaderDatumObj := &SapSalesContractHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_contract_header_data` where `SalesContract`=?", sel,
	)

	q := queries.Raw(query, salesContract)

	err := q.Bind(ctx, exec, sapSalesContractHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_contract_header_data")
	}

	if err = sapSalesContractHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesContractHeaderDatumObj, err
	}

	return sapSalesContractHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesContractHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_contract_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesContractHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesContractHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapSalesContractHeaderDatumInsertCache[key]
	sapSalesContractHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesContractHeaderDatumAllColumns,
			sapSalesContractHeaderDatumColumnsWithDefault,
			sapSalesContractHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_contract_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_contract_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_contract_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesContractHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_contract_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesContract,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_contract_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesContractHeaderDatumInsertCacheMut.Lock()
		sapSalesContractHeaderDatumInsertCache[key] = cache
		sapSalesContractHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesContractHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesContractHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesContractHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesContractHeaderDatumUpdateCache[key]
	sapSalesContractHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesContractHeaderDatumAllColumns,
			sapSalesContractHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_contract_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_contract_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesContractHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, append(wl, sapSalesContractHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_contract_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_contract_header_data")
	}

	if !cached {
		sapSalesContractHeaderDatumUpdateCacheMut.Lock()
		sapSalesContractHeaderDatumUpdateCache[key] = cache
		sapSalesContractHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesContractHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_contract_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_contract_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesContractHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesContractHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesContractHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesContractHeaderDatumUniqueColumns = []string{
	"SalesContract",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesContractHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_contract_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesContractHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesContractHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesContractHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesContractHeaderDatumUpsertCache[key]
	sapSalesContractHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesContractHeaderDatumAllColumns,
			sapSalesContractHeaderDatumColumnsWithDefault,
			sapSalesContractHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sapSalesContractHeaderDatumAllColumns,
			sapSalesContractHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_contract_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_contract_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_contract_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_contract_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesContractHeaderDatumType, sapSalesContractHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_contract_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_contract_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesContractHeaderDatumUpsertCacheMut.Lock()
		sapSalesContractHeaderDatumUpsertCache[key] = cache
		sapSalesContractHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesContractHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesContractHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesContractHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesContractHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_contract_header_data` WHERE `SalesContract`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_contract_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_contract_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesContractHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesContractHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_contract_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_contract_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesContractHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesContractHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_contract_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesContractHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_contract_header_data")
	}

	if len(sapSalesContractHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesContractHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesContractHeaderDatum(ctx, exec, o.SalesContract)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesContractHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesContractHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_contract_header_data`.* FROM `sap_sales_contract_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesContractHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesContractHeaderDatumExists checks if the SapSalesContractHeaderDatum row exists.
func SapSalesContractHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, salesContract string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_contract_header_data` where `SalesContract`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesContract)
	}
	row := exec.QueryRowContext(ctx, sql, salesContract)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_contract_header_data exists")
	}

	return exists, nil
}
