// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapProcessOrderConfirmationMaterialMovementsDatum is an object representing the database table.
type SapProcessOrderConfirmationMaterialMovementsDatum struct {
	Batch                      string      `boil:"Batch" json:"Batch" toml:"Batch" yaml:"Batch"`
	ConfirmationGroup          null.String `boil:"ConfirmationGroup" json:"ConfirmationGroup,omitempty" toml:"ConfirmationGroup" yaml:"ConfirmationGroup,omitempty"`
	ConfirmationCount          null.String `boil:"ConfirmationCount" json:"ConfirmationCount,omitempty" toml:"ConfirmationCount" yaml:"ConfirmationCount,omitempty"`
	MaterialDocument           null.String `boil:"MaterialDocument" json:"MaterialDocument,omitempty" toml:"MaterialDocument" yaml:"MaterialDocument,omitempty"`
	MaterialDocumentItem       null.String `boil:"MaterialDocumentItem" json:"MaterialDocumentItem,omitempty" toml:"MaterialDocumentItem" yaml:"MaterialDocumentItem,omitempty"`
	MaterialDocumentYear       null.String `boil:"MaterialDocumentYear" json:"MaterialDocumentYear,omitempty" toml:"MaterialDocumentYear" yaml:"MaterialDocumentYear,omitempty"`
	OrderType                  null.String `boil:"OrderType" json:"OrderType,omitempty" toml:"OrderType" yaml:"OrderType,omitempty"`
	OrderID                    null.String `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                  null.String `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	ManufacturingOrderCategory null.String `boil:"ManufacturingOrderCategory" json:"ManufacturingOrderCategory,omitempty" toml:"ManufacturingOrderCategory" yaml:"ManufacturingOrderCategory,omitempty"`
	Material                   null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	Plant                      null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	Reservation                null.String `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem            null.String `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	StorageLocation            null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	ProductionSupplyArea       null.String `boil:"ProductionSupplyArea" json:"ProductionSupplyArea,omitempty" toml:"ProductionSupplyArea" yaml:"ProductionSupplyArea,omitempty"`
	InventoryValuationType     null.String `boil:"InventoryValuationType" json:"InventoryValuationType,omitempty" toml:"InventoryValuationType" yaml:"InventoryValuationType,omitempty"`
	GoodsMovementType          null.String `boil:"GoodsMovementType" json:"GoodsMovementType,omitempty" toml:"GoodsMovementType" yaml:"GoodsMovementType,omitempty"`
	GoodsMovementRefDocType    null.String `boil:"GoodsMovementRefDocType" json:"GoodsMovementRefDocType,omitempty" toml:"GoodsMovementRefDocType" yaml:"GoodsMovementRefDocType,omitempty"`
	InventoryUsabilityCode     null.String `boil:"InventoryUsabilityCode" json:"InventoryUsabilityCode,omitempty" toml:"InventoryUsabilityCode" yaml:"InventoryUsabilityCode,omitempty"`
	InventorySpecialStockType  null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	SalesOrder                 null.String `boil:"SalesOrder" json:"SalesOrder,omitempty" toml:"SalesOrder" yaml:"SalesOrder,omitempty"`
	SalesOrderItem             null.String `boil:"SalesOrderItem" json:"SalesOrderItem,omitempty" toml:"SalesOrderItem" yaml:"SalesOrderItem,omitempty"`
	WBSElementExternalID       null.String `boil:"WBSElementExternalID" json:"WBSElementExternalID,omitempty" toml:"WBSElementExternalID" yaml:"WBSElementExternalID,omitempty"`
	Supplier                   null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	Customer                   null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	ReservationIsFinallyIssued null.Bool   `boil:"ReservationIsFinallyIssued" json:"ReservationIsFinallyIssued,omitempty" toml:"ReservationIsFinallyIssued" yaml:"ReservationIsFinallyIssued,omitempty"`
	IsCompletelyDelivered      null.Bool   `boil:"IsCompletelyDelivered" json:"IsCompletelyDelivered,omitempty" toml:"IsCompletelyDelivered" yaml:"IsCompletelyDelivered,omitempty"`
	ShelfLifeExpirationDate    null.String `boil:"ShelfLifeExpirationDate" json:"ShelfLifeExpirationDate,omitempty" toml:"ShelfLifeExpirationDate" yaml:"ShelfLifeExpirationDate,omitempty"`
	ManufactureDate            null.String `boil:"ManufactureDate" json:"ManufactureDate,omitempty" toml:"ManufactureDate" yaml:"ManufactureDate,omitempty"`
	StorageType                null.String `boil:"StorageType" json:"StorageType,omitempty" toml:"StorageType" yaml:"StorageType,omitempty"`
	StorageBin                 null.String `boil:"StorageBin" json:"StorageBin,omitempty" toml:"StorageBin" yaml:"StorageBin,omitempty"`
	MaterialDocumentItemText   null.String `boil:"MaterialDocumentItemText" json:"MaterialDocumentItemText,omitempty" toml:"MaterialDocumentItemText" yaml:"MaterialDocumentItemText,omitempty"`
	EntryUnit                  null.String `boil:"EntryUnit" json:"EntryUnit,omitempty" toml:"EntryUnit" yaml:"EntryUnit,omitempty"`
	QuantityInEntryUnit        null.String `boil:"QuantityInEntryUnit" json:"QuantityInEntryUnit,omitempty" toml:"QuantityInEntryUnit" yaml:"QuantityInEntryUnit,omitempty"`

	R *sapProcessOrderConfirmationMaterialMovementsDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapProcessOrderConfirmationMaterialMovementsDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapProcessOrderConfirmationMaterialMovementsDatumColumns = struct {
	Batch                      string
	ConfirmationGroup          string
	ConfirmationCount          string
	MaterialDocument           string
	MaterialDocumentItem       string
	MaterialDocumentYear       string
	OrderType                  string
	OrderID                    string
	OrderItem                  string
	ManufacturingOrderCategory string
	Material                   string
	Plant                      string
	Reservation                string
	ReservationItem            string
	StorageLocation            string
	ProductionSupplyArea       string
	InventoryValuationType     string
	GoodsMovementType          string
	GoodsMovementRefDocType    string
	InventoryUsabilityCode     string
	InventorySpecialStockType  string
	SalesOrder                 string
	SalesOrderItem             string
	WBSElementExternalID       string
	Supplier                   string
	Customer                   string
	ReservationIsFinallyIssued string
	IsCompletelyDelivered      string
	ShelfLifeExpirationDate    string
	ManufactureDate            string
	StorageType                string
	StorageBin                 string
	MaterialDocumentItemText   string
	EntryUnit                  string
	QuantityInEntryUnit        string
}{
	Batch:                      "Batch",
	ConfirmationGroup:          "ConfirmationGroup",
	ConfirmationCount:          "ConfirmationCount",
	MaterialDocument:           "MaterialDocument",
	MaterialDocumentItem:       "MaterialDocumentItem",
	MaterialDocumentYear:       "MaterialDocumentYear",
	OrderType:                  "OrderType",
	OrderID:                    "OrderID",
	OrderItem:                  "OrderItem",
	ManufacturingOrderCategory: "ManufacturingOrderCategory",
	Material:                   "Material",
	Plant:                      "Plant",
	Reservation:                "Reservation",
	ReservationItem:            "ReservationItem",
	StorageLocation:            "StorageLocation",
	ProductionSupplyArea:       "ProductionSupplyArea",
	InventoryValuationType:     "InventoryValuationType",
	GoodsMovementType:          "GoodsMovementType",
	GoodsMovementRefDocType:    "GoodsMovementRefDocType",
	InventoryUsabilityCode:     "InventoryUsabilityCode",
	InventorySpecialStockType:  "InventorySpecialStockType",
	SalesOrder:                 "SalesOrder",
	SalesOrderItem:             "SalesOrderItem",
	WBSElementExternalID:       "WBSElementExternalID",
	Supplier:                   "Supplier",
	Customer:                   "Customer",
	ReservationIsFinallyIssued: "ReservationIsFinallyIssued",
	IsCompletelyDelivered:      "IsCompletelyDelivered",
	ShelfLifeExpirationDate:    "ShelfLifeExpirationDate",
	ManufactureDate:            "ManufactureDate",
	StorageType:                "StorageType",
	StorageBin:                 "StorageBin",
	MaterialDocumentItemText:   "MaterialDocumentItemText",
	EntryUnit:                  "EntryUnit",
	QuantityInEntryUnit:        "QuantityInEntryUnit",
}

var SapProcessOrderConfirmationMaterialMovementsDatumTableColumns = struct {
	Batch                      string
	ConfirmationGroup          string
	ConfirmationCount          string
	MaterialDocument           string
	MaterialDocumentItem       string
	MaterialDocumentYear       string
	OrderType                  string
	OrderID                    string
	OrderItem                  string
	ManufacturingOrderCategory string
	Material                   string
	Plant                      string
	Reservation                string
	ReservationItem            string
	StorageLocation            string
	ProductionSupplyArea       string
	InventoryValuationType     string
	GoodsMovementType          string
	GoodsMovementRefDocType    string
	InventoryUsabilityCode     string
	InventorySpecialStockType  string
	SalesOrder                 string
	SalesOrderItem             string
	WBSElementExternalID       string
	Supplier                   string
	Customer                   string
	ReservationIsFinallyIssued string
	IsCompletelyDelivered      string
	ShelfLifeExpirationDate    string
	ManufactureDate            string
	StorageType                string
	StorageBin                 string
	MaterialDocumentItemText   string
	EntryUnit                  string
	QuantityInEntryUnit        string
}{
	Batch:                      "sap_process_order_confirmation_material_movements_data.Batch",
	ConfirmationGroup:          "sap_process_order_confirmation_material_movements_data.ConfirmationGroup",
	ConfirmationCount:          "sap_process_order_confirmation_material_movements_data.ConfirmationCount",
	MaterialDocument:           "sap_process_order_confirmation_material_movements_data.MaterialDocument",
	MaterialDocumentItem:       "sap_process_order_confirmation_material_movements_data.MaterialDocumentItem",
	MaterialDocumentYear:       "sap_process_order_confirmation_material_movements_data.MaterialDocumentYear",
	OrderType:                  "sap_process_order_confirmation_material_movements_data.OrderType",
	OrderID:                    "sap_process_order_confirmation_material_movements_data.OrderID",
	OrderItem:                  "sap_process_order_confirmation_material_movements_data.OrderItem",
	ManufacturingOrderCategory: "sap_process_order_confirmation_material_movements_data.ManufacturingOrderCategory",
	Material:                   "sap_process_order_confirmation_material_movements_data.Material",
	Plant:                      "sap_process_order_confirmation_material_movements_data.Plant",
	Reservation:                "sap_process_order_confirmation_material_movements_data.Reservation",
	ReservationItem:            "sap_process_order_confirmation_material_movements_data.ReservationItem",
	StorageLocation:            "sap_process_order_confirmation_material_movements_data.StorageLocation",
	ProductionSupplyArea:       "sap_process_order_confirmation_material_movements_data.ProductionSupplyArea",
	InventoryValuationType:     "sap_process_order_confirmation_material_movements_data.InventoryValuationType",
	GoodsMovementType:          "sap_process_order_confirmation_material_movements_data.GoodsMovementType",
	GoodsMovementRefDocType:    "sap_process_order_confirmation_material_movements_data.GoodsMovementRefDocType",
	InventoryUsabilityCode:     "sap_process_order_confirmation_material_movements_data.InventoryUsabilityCode",
	InventorySpecialStockType:  "sap_process_order_confirmation_material_movements_data.InventorySpecialStockType",
	SalesOrder:                 "sap_process_order_confirmation_material_movements_data.SalesOrder",
	SalesOrderItem:             "sap_process_order_confirmation_material_movements_data.SalesOrderItem",
	WBSElementExternalID:       "sap_process_order_confirmation_material_movements_data.WBSElementExternalID",
	Supplier:                   "sap_process_order_confirmation_material_movements_data.Supplier",
	Customer:                   "sap_process_order_confirmation_material_movements_data.Customer",
	ReservationIsFinallyIssued: "sap_process_order_confirmation_material_movements_data.ReservationIsFinallyIssued",
	IsCompletelyDelivered:      "sap_process_order_confirmation_material_movements_data.IsCompletelyDelivered",
	ShelfLifeExpirationDate:    "sap_process_order_confirmation_material_movements_data.ShelfLifeExpirationDate",
	ManufactureDate:            "sap_process_order_confirmation_material_movements_data.ManufactureDate",
	StorageType:                "sap_process_order_confirmation_material_movements_data.StorageType",
	StorageBin:                 "sap_process_order_confirmation_material_movements_data.StorageBin",
	MaterialDocumentItemText:   "sap_process_order_confirmation_material_movements_data.MaterialDocumentItemText",
	EntryUnit:                  "sap_process_order_confirmation_material_movements_data.EntryUnit",
	QuantityInEntryUnit:        "sap_process_order_confirmation_material_movements_data.QuantityInEntryUnit",
}

// Generated where

var SapProcessOrderConfirmationMaterialMovementsDatumWhere = struct {
	Batch                      whereHelperstring
	ConfirmationGroup          whereHelpernull_String
	ConfirmationCount          whereHelpernull_String
	MaterialDocument           whereHelpernull_String
	MaterialDocumentItem       whereHelpernull_String
	MaterialDocumentYear       whereHelpernull_String
	OrderType                  whereHelpernull_String
	OrderID                    whereHelpernull_String
	OrderItem                  whereHelpernull_String
	ManufacturingOrderCategory whereHelpernull_String
	Material                   whereHelpernull_String
	Plant                      whereHelpernull_String
	Reservation                whereHelpernull_String
	ReservationItem            whereHelpernull_String
	StorageLocation            whereHelpernull_String
	ProductionSupplyArea       whereHelpernull_String
	InventoryValuationType     whereHelpernull_String
	GoodsMovementType          whereHelpernull_String
	GoodsMovementRefDocType    whereHelpernull_String
	InventoryUsabilityCode     whereHelpernull_String
	InventorySpecialStockType  whereHelpernull_String
	SalesOrder                 whereHelpernull_String
	SalesOrderItem             whereHelpernull_String
	WBSElementExternalID       whereHelpernull_String
	Supplier                   whereHelpernull_String
	Customer                   whereHelpernull_String
	ReservationIsFinallyIssued whereHelpernull_Bool
	IsCompletelyDelivered      whereHelpernull_Bool
	ShelfLifeExpirationDate    whereHelpernull_String
	ManufactureDate            whereHelpernull_String
	StorageType                whereHelpernull_String
	StorageBin                 whereHelpernull_String
	MaterialDocumentItemText   whereHelpernull_String
	EntryUnit                  whereHelpernull_String
	QuantityInEntryUnit        whereHelpernull_String
}{
	Batch:                      whereHelperstring{field: "`sap_process_order_confirmation_material_movements_data`.`Batch`"},
	ConfirmationGroup:          whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ConfirmationGroup`"},
	ConfirmationCount:          whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ConfirmationCount`"},
	MaterialDocument:           whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`MaterialDocument`"},
	MaterialDocumentItem:       whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`MaterialDocumentItem`"},
	MaterialDocumentYear:       whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`MaterialDocumentYear`"},
	OrderType:                  whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`OrderType`"},
	OrderID:                    whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`OrderID`"},
	OrderItem:                  whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`OrderItem`"},
	ManufacturingOrderCategory: whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ManufacturingOrderCategory`"},
	Material:                   whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`Material`"},
	Plant:                      whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`Plant`"},
	Reservation:                whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`Reservation`"},
	ReservationItem:            whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ReservationItem`"},
	StorageLocation:            whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`StorageLocation`"},
	ProductionSupplyArea:       whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ProductionSupplyArea`"},
	InventoryValuationType:     whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`InventoryValuationType`"},
	GoodsMovementType:          whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`GoodsMovementType`"},
	GoodsMovementRefDocType:    whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`GoodsMovementRefDocType`"},
	InventoryUsabilityCode:     whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`InventoryUsabilityCode`"},
	InventorySpecialStockType:  whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`InventorySpecialStockType`"},
	SalesOrder:                 whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`SalesOrder`"},
	SalesOrderItem:             whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`SalesOrderItem`"},
	WBSElementExternalID:       whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`WBSElementExternalID`"},
	Supplier:                   whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`Supplier`"},
	Customer:                   whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`Customer`"},
	ReservationIsFinallyIssued: whereHelpernull_Bool{field: "`sap_process_order_confirmation_material_movements_data`.`ReservationIsFinallyIssued`"},
	IsCompletelyDelivered:      whereHelpernull_Bool{field: "`sap_process_order_confirmation_material_movements_data`.`IsCompletelyDelivered`"},
	ShelfLifeExpirationDate:    whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ShelfLifeExpirationDate`"},
	ManufactureDate:            whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`ManufactureDate`"},
	StorageType:                whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`StorageType`"},
	StorageBin:                 whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`StorageBin`"},
	MaterialDocumentItemText:   whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`MaterialDocumentItemText`"},
	EntryUnit:                  whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`EntryUnit`"},
	QuantityInEntryUnit:        whereHelpernull_String{field: "`sap_process_order_confirmation_material_movements_data`.`QuantityInEntryUnit`"},
}

// SapProcessOrderConfirmationMaterialMovementsDatumRels is where relationship names are stored.
var SapProcessOrderConfirmationMaterialMovementsDatumRels = struct {
	OrderIDSapProcessOrderConfirmationConfirmationDatum string
}{
	OrderIDSapProcessOrderConfirmationConfirmationDatum: "OrderIDSapProcessOrderConfirmationConfirmationDatum",
}

// sapProcessOrderConfirmationMaterialMovementsDatumR is where relationships are stored.
type sapProcessOrderConfirmationMaterialMovementsDatumR struct {
	OrderIDSapProcessOrderConfirmationConfirmationDatum *SapProcessOrderConfirmationConfirmationDatum `boil:"OrderIDSapProcessOrderConfirmationConfirmationDatum" json:"OrderIDSapProcessOrderConfirmationConfirmationDatum" toml:"OrderIDSapProcessOrderConfirmationConfirmationDatum" yaml:"OrderIDSapProcessOrderConfirmationConfirmationDatum"`
}

// NewStruct creates a new relationship struct
func (*sapProcessOrderConfirmationMaterialMovementsDatumR) NewStruct() *sapProcessOrderConfirmationMaterialMovementsDatumR {
	return &sapProcessOrderConfirmationMaterialMovementsDatumR{}
}

// sapProcessOrderConfirmationMaterialMovementsDatumL is where Load methods for each relationship are stored.
type sapProcessOrderConfirmationMaterialMovementsDatumL struct{}

var (
	sapProcessOrderConfirmationMaterialMovementsDatumAllColumns            = []string{"Batch", "ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear", "OrderType", "OrderID", "OrderItem", "ManufacturingOrderCategory", "Material", "Plant", "Reservation", "ReservationItem", "StorageLocation", "ProductionSupplyArea", "InventoryValuationType", "GoodsMovementType", "GoodsMovementRefDocType", "InventoryUsabilityCode", "InventorySpecialStockType", "SalesOrder", "SalesOrderItem", "WBSElementExternalID", "Supplier", "Customer", "ReservationIsFinallyIssued", "IsCompletelyDelivered", "ShelfLifeExpirationDate", "ManufactureDate", "StorageType", "StorageBin", "MaterialDocumentItemText", "EntryUnit", "QuantityInEntryUnit"}
	sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithoutDefault = []string{"Batch", "ConfirmationGroup", "ConfirmationCount", "MaterialDocument", "MaterialDocumentItem", "MaterialDocumentYear", "OrderType", "OrderID", "OrderItem", "ManufacturingOrderCategory", "Material", "Plant", "Reservation", "ReservationItem", "StorageLocation", "ProductionSupplyArea", "InventoryValuationType", "GoodsMovementType", "GoodsMovementRefDocType", "InventoryUsabilityCode", "InventorySpecialStockType", "SalesOrder", "SalesOrderItem", "WBSElementExternalID", "Supplier", "Customer", "ReservationIsFinallyIssued", "IsCompletelyDelivered", "ShelfLifeExpirationDate", "ManufactureDate", "StorageType", "StorageBin", "MaterialDocumentItemText", "EntryUnit", "QuantityInEntryUnit"}
	sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithDefault    = []string{}
	sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns     = []string{"Batch"}
	sapProcessOrderConfirmationMaterialMovementsDatumGeneratedColumns      = []string{}
)

type (
	// SapProcessOrderConfirmationMaterialMovementsDatumSlice is an alias for a slice of pointers to SapProcessOrderConfirmationMaterialMovementsDatum.
	// This should almost always be used instead of []SapProcessOrderConfirmationMaterialMovementsDatum.
	SapProcessOrderConfirmationMaterialMovementsDatumSlice []*SapProcessOrderConfirmationMaterialMovementsDatum
	// SapProcessOrderConfirmationMaterialMovementsDatumHook is the signature for custom SapProcessOrderConfirmationMaterialMovementsDatum hook methods
	SapProcessOrderConfirmationMaterialMovementsDatumHook func(context.Context, boil.ContextExecutor, *SapProcessOrderConfirmationMaterialMovementsDatum) error

	sapProcessOrderConfirmationMaterialMovementsDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapProcessOrderConfirmationMaterialMovementsDatumType                 = reflect.TypeOf(&SapProcessOrderConfirmationMaterialMovementsDatum{})
	sapProcessOrderConfirmationMaterialMovementsDatumMapping              = queries.MakeStructMapping(sapProcessOrderConfirmationMaterialMovementsDatumType)
	sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyMapping, _ = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns)
	sapProcessOrderConfirmationMaterialMovementsDatumInsertCacheMut       sync.RWMutex
	sapProcessOrderConfirmationMaterialMovementsDatumInsertCache          = make(map[string]insertCache)
	sapProcessOrderConfirmationMaterialMovementsDatumUpdateCacheMut       sync.RWMutex
	sapProcessOrderConfirmationMaterialMovementsDatumUpdateCache          = make(map[string]updateCache)
	sapProcessOrderConfirmationMaterialMovementsDatumUpsertCacheMut       sync.RWMutex
	sapProcessOrderConfirmationMaterialMovementsDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook

var sapProcessOrderConfirmationMaterialMovementsDatumBeforeInsertHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook
var sapProcessOrderConfirmationMaterialMovementsDatumAfterInsertHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook

var sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpdateHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook
var sapProcessOrderConfirmationMaterialMovementsDatumAfterUpdateHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook

var sapProcessOrderConfirmationMaterialMovementsDatumBeforeDeleteHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook
var sapProcessOrderConfirmationMaterialMovementsDatumAfterDeleteHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook

var sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpsertHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook
var sapProcessOrderConfirmationMaterialMovementsDatumAfterUpsertHooks []SapProcessOrderConfirmationMaterialMovementsDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapProcessOrderConfirmationMaterialMovementsDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapProcessOrderConfirmationMaterialMovementsDatumHook registers your hook function for all future operations.
func AddSapProcessOrderConfirmationMaterialMovementsDatumHook(hookPoint boil.HookPoint, sapProcessOrderConfirmationMaterialMovementsDatumHook SapProcessOrderConfirmationMaterialMovementsDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.BeforeInsertHook:
		sapProcessOrderConfirmationMaterialMovementsDatumBeforeInsertHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumBeforeInsertHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.AfterInsertHook:
		sapProcessOrderConfirmationMaterialMovementsDatumAfterInsertHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumAfterInsertHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.BeforeUpdateHook:
		sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpdateHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpdateHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.AfterUpdateHook:
		sapProcessOrderConfirmationMaterialMovementsDatumAfterUpdateHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumAfterUpdateHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.BeforeDeleteHook:
		sapProcessOrderConfirmationMaterialMovementsDatumBeforeDeleteHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumBeforeDeleteHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.AfterDeleteHook:
		sapProcessOrderConfirmationMaterialMovementsDatumAfterDeleteHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumAfterDeleteHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.BeforeUpsertHook:
		sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpsertHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumBeforeUpsertHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	case boil.AfterUpsertHook:
		sapProcessOrderConfirmationMaterialMovementsDatumAfterUpsertHooks = append(sapProcessOrderConfirmationMaterialMovementsDatumAfterUpsertHooks, sapProcessOrderConfirmationMaterialMovementsDatumHook)
	}
}

// One returns a single sapProcessOrderConfirmationMaterialMovementsDatum record from the query.
func (q sapProcessOrderConfirmationMaterialMovementsDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapProcessOrderConfirmationMaterialMovementsDatum, error) {
	o := &SapProcessOrderConfirmationMaterialMovementsDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_process_order_confirmation_material_movements_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapProcessOrderConfirmationMaterialMovementsDatum records from the query.
func (q sapProcessOrderConfirmationMaterialMovementsDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapProcessOrderConfirmationMaterialMovementsDatumSlice, error) {
	var o []*SapProcessOrderConfirmationMaterialMovementsDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapProcessOrderConfirmationMaterialMovementsDatum slice")
	}

	if len(sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapProcessOrderConfirmationMaterialMovementsDatum records in the query.
func (q sapProcessOrderConfirmationMaterialMovementsDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_process_order_confirmation_material_movements_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapProcessOrderConfirmationMaterialMovementsDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_process_order_confirmation_material_movements_data exists")
	}

	return count > 0, nil
}

// OrderIDSapProcessOrderConfirmationConfirmationDatum pointed to by the foreign key.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) OrderIDSapProcessOrderConfirmationConfirmationDatum(mods ...qm.QueryMod) sapProcessOrderConfirmationConfirmationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := SapProcessOrderConfirmationConfirmationData(queryMods...)
	queries.SetFrom(query.Query, "`sap_process_order_confirmation_confirmation_data`")

	return query
}

// LoadOrderIDSapProcessOrderConfirmationConfirmationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapProcessOrderConfirmationMaterialMovementsDatumL) LoadOrderIDSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapProcessOrderConfirmationMaterialMovementsDatum interface{}, mods queries.Applicator) error {
	var slice []*SapProcessOrderConfirmationMaterialMovementsDatum
	var object *SapProcessOrderConfirmationMaterialMovementsDatum

	if singular {
		object = maybeSapProcessOrderConfirmationMaterialMovementsDatum.(*SapProcessOrderConfirmationMaterialMovementsDatum)
	} else {
		slice = *maybeSapProcessOrderConfirmationMaterialMovementsDatum.(*[]*SapProcessOrderConfirmationMaterialMovementsDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapProcessOrderConfirmationMaterialMovementsDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapProcessOrderConfirmationMaterialMovementsDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_process_order_confirmation_confirmation_data`),
		qm.WhereIn(`sap_process_order_confirmation_confirmation_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapProcessOrderConfirmationConfirmationDatum")
	}

	var resultSlice []*SapProcessOrderConfirmationConfirmationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapProcessOrderConfirmationConfirmationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_process_order_confirmation_confirmation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_process_order_confirmation_confirmation_data")
	}

	if len(sapProcessOrderConfirmationMaterialMovementsDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapProcessOrderConfirmationConfirmationDatumR{}
		}
		foreign.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = append(foreign.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapProcessOrderConfirmationConfirmationDatumR{}
				}
				foreign.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = append(foreign.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData, local)
				break
			}
		}
	}

	return nil
}

// SetOrderIDSapProcessOrderConfirmationConfirmationDatum of the sapProcessOrderConfirmationMaterialMovementsDatum to the related item.
// Sets o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum to related.
// Adds o to related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) SetOrderIDSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapProcessOrderConfirmationConfirmationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_process_order_confirmation_material_movements_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.Batch}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &sapProcessOrderConfirmationMaterialMovementsDatumR{
			OrderIDSapProcessOrderConfirmationConfirmationDatum: related,
		}
	} else {
		o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = related
	}

	if related.R == nil {
		related.R = &sapProcessOrderConfirmationConfirmationDatumR{
			OrderIDSapProcessOrderConfirmationMaterialMovementsData: SapProcessOrderConfirmationMaterialMovementsDatumSlice{o},
		}
	} else {
		related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = append(related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData, o)
	}

	return nil
}

// RemoveOrderIDSapProcessOrderConfirmationConfirmationDatum relationship.
// Sets o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) RemoveOrderIDSapProcessOrderConfirmationConfirmationDatum(ctx context.Context, exec boil.ContextExecutor, related *SapProcessOrderConfirmationConfirmationDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDSapProcessOrderConfirmationConfirmationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData)
		if ln > 1 && i < ln-1 {
			related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData[i] = related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData[ln-1]
		}
		related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData = related.R.OrderIDSapProcessOrderConfirmationMaterialMovementsData[:ln-1]
		break
	}
	return nil
}

// SapProcessOrderConfirmationMaterialMovementsData retrieves all the records using an executor.
func SapProcessOrderConfirmationMaterialMovementsData(mods ...qm.QueryMod) sapProcessOrderConfirmationMaterialMovementsDatumQuery {
	mods = append(mods, qm.From("`sap_process_order_confirmation_material_movements_data`"))
	return sapProcessOrderConfirmationMaterialMovementsDatumQuery{NewQuery(mods...)}
}

// FindSapProcessOrderConfirmationMaterialMovementsDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapProcessOrderConfirmationMaterialMovementsDatum(ctx context.Context, exec boil.ContextExecutor, batch string, selectCols ...string) (*SapProcessOrderConfirmationMaterialMovementsDatum, error) {
	sapProcessOrderConfirmationMaterialMovementsDatumObj := &SapProcessOrderConfirmationMaterialMovementsDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_process_order_confirmation_material_movements_data` where `Batch`=?", sel,
	)

	q := queries.Raw(query, batch)

	err := q.Bind(ctx, exec, sapProcessOrderConfirmationMaterialMovementsDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_process_order_confirmation_material_movements_data")
	}

	if err = sapProcessOrderConfirmationMaterialMovementsDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapProcessOrderConfirmationMaterialMovementsDatumObj, err
	}

	return sapProcessOrderConfirmationMaterialMovementsDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_process_order_confirmation_material_movements_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapProcessOrderConfirmationMaterialMovementsDatumInsertCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationMaterialMovementsDatumInsertCache[key]
	sapProcessOrderConfirmationMaterialMovementsDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapProcessOrderConfirmationMaterialMovementsDatumAllColumns,
			sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithDefault,
			sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_process_order_confirmation_material_movements_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_process_order_confirmation_material_movements_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_process_order_confirmation_material_movements_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_process_order_confirmation_material_movements_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Batch,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_process_order_confirmation_material_movements_data")
	}

CacheNoHooks:
	if !cached {
		sapProcessOrderConfirmationMaterialMovementsDatumInsertCacheMut.Lock()
		sapProcessOrderConfirmationMaterialMovementsDatumInsertCache[key] = cache
		sapProcessOrderConfirmationMaterialMovementsDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapProcessOrderConfirmationMaterialMovementsDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapProcessOrderConfirmationMaterialMovementsDatumUpdateCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationMaterialMovementsDatumUpdateCache[key]
	sapProcessOrderConfirmationMaterialMovementsDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapProcessOrderConfirmationMaterialMovementsDatumAllColumns,
			sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_process_order_confirmation_material_movements_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_process_order_confirmation_material_movements_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, append(wl, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_process_order_confirmation_material_movements_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_process_order_confirmation_material_movements_data")
	}

	if !cached {
		sapProcessOrderConfirmationMaterialMovementsDatumUpdateCacheMut.Lock()
		sapProcessOrderConfirmationMaterialMovementsDatumUpdateCache[key] = cache
		sapProcessOrderConfirmationMaterialMovementsDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapProcessOrderConfirmationMaterialMovementsDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_process_order_confirmation_material_movements_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_process_order_confirmation_material_movements_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapProcessOrderConfirmationMaterialMovementsDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_process_order_confirmation_material_movements_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapProcessOrderConfirmationMaterialMovementsDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapProcessOrderConfirmationMaterialMovementsDatum")
	}
	return rowsAff, nil
}

var mySQLSapProcessOrderConfirmationMaterialMovementsDatumUniqueColumns = []string{
	"Batch",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_process_order_confirmation_material_movements_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapProcessOrderConfirmationMaterialMovementsDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapProcessOrderConfirmationMaterialMovementsDatumUpsertCacheMut.RLock()
	cache, cached := sapProcessOrderConfirmationMaterialMovementsDatumUpsertCache[key]
	sapProcessOrderConfirmationMaterialMovementsDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapProcessOrderConfirmationMaterialMovementsDatumAllColumns,
			sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithDefault,
			sapProcessOrderConfirmationMaterialMovementsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapProcessOrderConfirmationMaterialMovementsDatumAllColumns,
			sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_process_order_confirmation_material_movements_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_process_order_confirmation_material_movements_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_process_order_confirmation_material_movements_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_process_order_confirmation_material_movements_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapProcessOrderConfirmationMaterialMovementsDatumType, sapProcessOrderConfirmationMaterialMovementsDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_process_order_confirmation_material_movements_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_process_order_confirmation_material_movements_data")
	}

CacheNoHooks:
	if !cached {
		sapProcessOrderConfirmationMaterialMovementsDatumUpsertCacheMut.Lock()
		sapProcessOrderConfirmationMaterialMovementsDatumUpsertCache[key] = cache
		sapProcessOrderConfirmationMaterialMovementsDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapProcessOrderConfirmationMaterialMovementsDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapProcessOrderConfirmationMaterialMovementsDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_process_order_confirmation_material_movements_data` WHERE `Batch`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_process_order_confirmation_material_movements_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_process_order_confirmation_material_movements_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapProcessOrderConfirmationMaterialMovementsDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapProcessOrderConfirmationMaterialMovementsDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_process_order_confirmation_material_movements_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_process_order_confirmation_material_movements_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapProcessOrderConfirmationMaterialMovementsDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapProcessOrderConfirmationMaterialMovementsDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_process_order_confirmation_material_movements_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapProcessOrderConfirmationMaterialMovementsDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_process_order_confirmation_material_movements_data")
	}

	if len(sapProcessOrderConfirmationMaterialMovementsDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapProcessOrderConfirmationMaterialMovementsDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapProcessOrderConfirmationMaterialMovementsDatum(ctx, exec, o.Batch)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapProcessOrderConfirmationMaterialMovementsDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapProcessOrderConfirmationMaterialMovementsDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_process_order_confirmation_material_movements_data`.* FROM `sap_process_order_confirmation_material_movements_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapProcessOrderConfirmationMaterialMovementsDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapProcessOrderConfirmationMaterialMovementsDatumSlice")
	}

	*o = slice

	return nil
}

// SapProcessOrderConfirmationMaterialMovementsDatumExists checks if the SapProcessOrderConfirmationMaterialMovementsDatum row exists.
func SapProcessOrderConfirmationMaterialMovementsDatumExists(ctx context.Context, exec boil.ContextExecutor, batch string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_process_order_confirmation_material_movements_data` where `Batch`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, batch)
	}
	row := exec.QueryRowContext(ctx, sql, batch)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_process_order_confirmation_material_movements_data exists")
	}

	return exists, nil
}
