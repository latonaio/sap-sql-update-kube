// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesContractItemDatum is an object representing the database table.
type SapSalesContractItemDatum struct {
	SalesContract                  string      `boil:"SalesContract" json:"SalesContract" toml:"SalesContract" yaml:"SalesContract"`
	SalesContractItem              string      `boil:"SalesContractItem" json:"SalesContractItem" toml:"SalesContractItem" yaml:"SalesContractItem"`
	SalesContractItemCategory      null.String `boil:"SalesContractItemCategory" json:"SalesContractItemCategory,omitempty" toml:"SalesContractItemCategory" yaml:"SalesContractItemCategory,omitempty"`
	SalesContractItemText          null.String `boil:"SalesContractItemText" json:"SalesContractItemText,omitempty" toml:"SalesContractItemText" yaml:"SalesContractItemText,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	Material                       null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer             null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	PricingDate                    null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	RequestedQuantity              null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	RequestedQuantityUnit          null.String `boil:"RequestedQuantityUnit" json:"RequestedQuantityUnit,omitempty" toml:"RequestedQuantityUnit" yaml:"RequestedQuantityUnit,omitempty"`
	ItemGrossWeight                null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                  null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                 null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemVolume                     null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit                 null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	NetAmount                      null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	MaterialGroup                  null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	MaterialPricingGroup           null.String `boil:"MaterialPricingGroup" json:"MaterialPricingGroup,omitempty" toml:"MaterialPricingGroup" yaml:"MaterialPricingGroup,omitempty"`
	Batch                          null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	ProductionPlant                null.String `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	StorageLocation                null.String `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	ShippingPoint                  null.String `boil:"ShippingPoint" json:"ShippingPoint,omitempty" toml:"ShippingPoint" yaml:"ShippingPoint,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	SalesDocumentRjcnReason        null.String `boil:"SalesDocumentRjcnReason" json:"SalesDocumentRjcnReason,omitempty" toml:"SalesDocumentRjcnReason" yaml:"SalesDocumentRjcnReason,omitempty"`
	ItemBillingBlockReason         null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	WBSElement                     null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ProfitCenter                   null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem        null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	SDProcessStatus                null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`
	SalesContractValidityStartDate null.String `boil:"SalesContractValidityStartDate" json:"SalesContractValidityStartDate,omitempty" toml:"SalesContractValidityStartDate" yaml:"SalesContractValidityStartDate,omitempty"`
	SalesContractValidityEndDate   null.String `boil:"SalesContractValidityEndDate" json:"SalesContractValidityEndDate,omitempty" toml:"SalesContractValidityEndDate" yaml:"SalesContractValidityEndDate,omitempty"`
	SalesContractSignedDate        null.String `boil:"SalesContractSignedDate" json:"SalesContractSignedDate,omitempty" toml:"SalesContractSignedDate" yaml:"SalesContractSignedDate,omitempty"`

	R *sapSalesContractItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesContractItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesContractItemDatumColumns = struct {
	SalesContract                  string
	SalesContractItem              string
	SalesContractItemCategory      string
	SalesContractItemText          string
	PurchaseOrderByCustomer        string
	Material                       string
	MaterialByCustomer             string
	PricingDate                    string
	RequestedQuantity              string
	RequestedQuantityUnit          string
	ItemGrossWeight                string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	ItemVolume                     string
	ItemVolumeUnit                 string
	TransactionCurrency            string
	NetAmount                      string
	MaterialGroup                  string
	MaterialPricingGroup           string
	Batch                          string
	ProductionPlant                string
	StorageLocation                string
	ShippingPoint                  string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	SalesDocumentRjcnReason        string
	ItemBillingBlockReason         string
	WBSElement                     string
	ProfitCenter                   string
	ReferenceSDDocument            string
	ReferenceSDDocumentItem        string
	SDProcessStatus                string
	SalesContractValidityStartDate string
	SalesContractValidityEndDate   string
	SalesContractSignedDate        string
}{
	SalesContract:                  "SalesContract",
	SalesContractItem:              "SalesContractItem",
	SalesContractItemCategory:      "SalesContractItemCategory",
	SalesContractItemText:          "SalesContractItemText",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	Material:                       "Material",
	MaterialByCustomer:             "MaterialByCustomer",
	PricingDate:                    "PricingDate",
	RequestedQuantity:              "RequestedQuantity",
	RequestedQuantityUnit:          "RequestedQuantityUnit",
	ItemGrossWeight:                "ItemGrossWeight",
	ItemNetWeight:                  "ItemNetWeight",
	ItemWeightUnit:                 "ItemWeightUnit",
	ItemVolume:                     "ItemVolume",
	ItemVolumeUnit:                 "ItemVolumeUnit",
	TransactionCurrency:            "TransactionCurrency",
	NetAmount:                      "NetAmount",
	MaterialGroup:                  "MaterialGroup",
	MaterialPricingGroup:           "MaterialPricingGroup",
	Batch:                          "Batch",
	ProductionPlant:                "ProductionPlant",
	StorageLocation:                "StorageLocation",
	ShippingPoint:                  "ShippingPoint",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	SalesDocumentRjcnReason:        "SalesDocumentRjcnReason",
	ItemBillingBlockReason:         "ItemBillingBlockReason",
	WBSElement:                     "WBSElement",
	ProfitCenter:                   "ProfitCenter",
	ReferenceSDDocument:            "ReferenceSDDocument",
	ReferenceSDDocumentItem:        "ReferenceSDDocumentItem",
	SDProcessStatus:                "SDProcessStatus",
	SalesContractValidityStartDate: "SalesContractValidityStartDate",
	SalesContractValidityEndDate:   "SalesContractValidityEndDate",
	SalesContractSignedDate:        "SalesContractSignedDate",
}

var SapSalesContractItemDatumTableColumns = struct {
	SalesContract                  string
	SalesContractItem              string
	SalesContractItemCategory      string
	SalesContractItemText          string
	PurchaseOrderByCustomer        string
	Material                       string
	MaterialByCustomer             string
	PricingDate                    string
	RequestedQuantity              string
	RequestedQuantityUnit          string
	ItemGrossWeight                string
	ItemNetWeight                  string
	ItemWeightUnit                 string
	ItemVolume                     string
	ItemVolumeUnit                 string
	TransactionCurrency            string
	NetAmount                      string
	MaterialGroup                  string
	MaterialPricingGroup           string
	Batch                          string
	ProductionPlant                string
	StorageLocation                string
	ShippingPoint                  string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	SalesDocumentRjcnReason        string
	ItemBillingBlockReason         string
	WBSElement                     string
	ProfitCenter                   string
	ReferenceSDDocument            string
	ReferenceSDDocumentItem        string
	SDProcessStatus                string
	SalesContractValidityStartDate string
	SalesContractValidityEndDate   string
	SalesContractSignedDate        string
}{
	SalesContract:                  "sap_sales_contract_item_data.SalesContract",
	SalesContractItem:              "sap_sales_contract_item_data.SalesContractItem",
	SalesContractItemCategory:      "sap_sales_contract_item_data.SalesContractItemCategory",
	SalesContractItemText:          "sap_sales_contract_item_data.SalesContractItemText",
	PurchaseOrderByCustomer:        "sap_sales_contract_item_data.PurchaseOrderByCustomer",
	Material:                       "sap_sales_contract_item_data.Material",
	MaterialByCustomer:             "sap_sales_contract_item_data.MaterialByCustomer",
	PricingDate:                    "sap_sales_contract_item_data.PricingDate",
	RequestedQuantity:              "sap_sales_contract_item_data.RequestedQuantity",
	RequestedQuantityUnit:          "sap_sales_contract_item_data.RequestedQuantityUnit",
	ItemGrossWeight:                "sap_sales_contract_item_data.ItemGrossWeight",
	ItemNetWeight:                  "sap_sales_contract_item_data.ItemNetWeight",
	ItemWeightUnit:                 "sap_sales_contract_item_data.ItemWeightUnit",
	ItemVolume:                     "sap_sales_contract_item_data.ItemVolume",
	ItemVolumeUnit:                 "sap_sales_contract_item_data.ItemVolumeUnit",
	TransactionCurrency:            "sap_sales_contract_item_data.TransactionCurrency",
	NetAmount:                      "sap_sales_contract_item_data.NetAmount",
	MaterialGroup:                  "sap_sales_contract_item_data.MaterialGroup",
	MaterialPricingGroup:           "sap_sales_contract_item_data.MaterialPricingGroup",
	Batch:                          "sap_sales_contract_item_data.Batch",
	ProductionPlant:                "sap_sales_contract_item_data.ProductionPlant",
	StorageLocation:                "sap_sales_contract_item_data.StorageLocation",
	ShippingPoint:                  "sap_sales_contract_item_data.ShippingPoint",
	IncotermsClassification:        "sap_sales_contract_item_data.IncotermsClassification",
	CustomerPaymentTerms:           "sap_sales_contract_item_data.CustomerPaymentTerms",
	SalesDocumentRjcnReason:        "sap_sales_contract_item_data.SalesDocumentRjcnReason",
	ItemBillingBlockReason:         "sap_sales_contract_item_data.ItemBillingBlockReason",
	WBSElement:                     "sap_sales_contract_item_data.WBSElement",
	ProfitCenter:                   "sap_sales_contract_item_data.ProfitCenter",
	ReferenceSDDocument:            "sap_sales_contract_item_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:        "sap_sales_contract_item_data.ReferenceSDDocumentItem",
	SDProcessStatus:                "sap_sales_contract_item_data.SDProcessStatus",
	SalesContractValidityStartDate: "sap_sales_contract_item_data.SalesContractValidityStartDate",
	SalesContractValidityEndDate:   "sap_sales_contract_item_data.SalesContractValidityEndDate",
	SalesContractSignedDate:        "sap_sales_contract_item_data.SalesContractSignedDate",
}

// Generated where

var SapSalesContractItemDatumWhere = struct {
	SalesContract                  whereHelperstring
	SalesContractItem              whereHelperstring
	SalesContractItemCategory      whereHelpernull_String
	SalesContractItemText          whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	Material                       whereHelpernull_String
	MaterialByCustomer             whereHelpernull_String
	PricingDate                    whereHelpernull_String
	RequestedQuantity              whereHelpernull_String
	RequestedQuantityUnit          whereHelpernull_String
	ItemGrossWeight                whereHelpernull_String
	ItemNetWeight                  whereHelpernull_String
	ItemWeightUnit                 whereHelpernull_String
	ItemVolume                     whereHelpernull_String
	ItemVolumeUnit                 whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	NetAmount                      whereHelpernull_String
	MaterialGroup                  whereHelpernull_String
	MaterialPricingGroup           whereHelpernull_String
	Batch                          whereHelpernull_String
	ProductionPlant                whereHelpernull_String
	StorageLocation                whereHelpernull_String
	ShippingPoint                  whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	SalesDocumentRjcnReason        whereHelpernull_String
	ItemBillingBlockReason         whereHelpernull_String
	WBSElement                     whereHelpernull_String
	ProfitCenter                   whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	ReferenceSDDocumentItem        whereHelpernull_String
	SDProcessStatus                whereHelpernull_String
	SalesContractValidityStartDate whereHelpernull_String
	SalesContractValidityEndDate   whereHelpernull_String
	SalesContractSignedDate        whereHelpernull_String
}{
	SalesContract:                  whereHelperstring{field: "`sap_sales_contract_item_data`.`SalesContract`"},
	SalesContractItem:              whereHelperstring{field: "`sap_sales_contract_item_data`.`SalesContractItem`"},
	SalesContractItemCategory:      whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SalesContractItemCategory`"},
	SalesContractItemText:          whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SalesContractItemText`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_sales_contract_item_data`.`PurchaseOrderByCustomer`"},
	Material:                       whereHelpernull_String{field: "`sap_sales_contract_item_data`.`Material`"},
	MaterialByCustomer:             whereHelpernull_String{field: "`sap_sales_contract_item_data`.`MaterialByCustomer`"},
	PricingDate:                    whereHelpernull_String{field: "`sap_sales_contract_item_data`.`PricingDate`"},
	RequestedQuantity:              whereHelpernull_String{field: "`sap_sales_contract_item_data`.`RequestedQuantity`"},
	RequestedQuantityUnit:          whereHelpernull_String{field: "`sap_sales_contract_item_data`.`RequestedQuantityUnit`"},
	ItemGrossWeight:                whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                  whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                 whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ItemWeightUnit`"},
	ItemVolume:                     whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ItemVolume`"},
	ItemVolumeUnit:                 whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ItemVolumeUnit`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_sales_contract_item_data`.`TransactionCurrency`"},
	NetAmount:                      whereHelpernull_String{field: "`sap_sales_contract_item_data`.`NetAmount`"},
	MaterialGroup:                  whereHelpernull_String{field: "`sap_sales_contract_item_data`.`MaterialGroup`"},
	MaterialPricingGroup:           whereHelpernull_String{field: "`sap_sales_contract_item_data`.`MaterialPricingGroup`"},
	Batch:                          whereHelpernull_String{field: "`sap_sales_contract_item_data`.`Batch`"},
	ProductionPlant:                whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ProductionPlant`"},
	StorageLocation:                whereHelpernull_String{field: "`sap_sales_contract_item_data`.`StorageLocation`"},
	ShippingPoint:                  whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ShippingPoint`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_sales_contract_item_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_sales_contract_item_data`.`CustomerPaymentTerms`"},
	SalesDocumentRjcnReason:        whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SalesDocumentRjcnReason`"},
	ItemBillingBlockReason:         whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ItemBillingBlockReason`"},
	WBSElement:                     whereHelpernull_String{field: "`sap_sales_contract_item_data`.`WBSElement`"},
	ProfitCenter:                   whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ProfitCenter`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:        whereHelpernull_String{field: "`sap_sales_contract_item_data`.`ReferenceSDDocumentItem`"},
	SDProcessStatus:                whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SDProcessStatus`"},
	SalesContractValidityStartDate: whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SalesContractValidityStartDate`"},
	SalesContractValidityEndDate:   whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SalesContractValidityEndDate`"},
	SalesContractSignedDate:        whereHelpernull_String{field: "`sap_sales_contract_item_data`.`SalesContractSignedDate`"},
}

// SapSalesContractItemDatumRels is where relationship names are stored.
var SapSalesContractItemDatumRels = struct {
	SalesContractSapSalesContractHeaderDatum string
}{
	SalesContractSapSalesContractHeaderDatum: "SalesContractSapSalesContractHeaderDatum",
}

// sapSalesContractItemDatumR is where relationships are stored.
type sapSalesContractItemDatumR struct {
	SalesContractSapSalesContractHeaderDatum *SapSalesContractHeaderDatum `boil:"SalesContractSapSalesContractHeaderDatum" json:"SalesContractSapSalesContractHeaderDatum" toml:"SalesContractSapSalesContractHeaderDatum" yaml:"SalesContractSapSalesContractHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapSalesContractItemDatumR) NewStruct() *sapSalesContractItemDatumR {
	return &sapSalesContractItemDatumR{}
}

// sapSalesContractItemDatumL is where Load methods for each relationship are stored.
type sapSalesContractItemDatumL struct{}

var (
	sapSalesContractItemDatumAllColumns            = []string{"SalesContract", "SalesContractItem", "SalesContractItemCategory", "SalesContractItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "Batch", "ProductionPlant", "StorageLocation", "ShippingPoint", "IncotermsClassification", "CustomerPaymentTerms", "SalesDocumentRjcnReason", "ItemBillingBlockReason", "WBSElement", "ProfitCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "SalesContractValidityStartDate", "SalesContractValidityEndDate", "SalesContractSignedDate"}
	sapSalesContractItemDatumColumnsWithoutDefault = []string{"SalesContract", "SalesContractItem", "SalesContractItemCategory", "SalesContractItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "Batch", "ProductionPlant", "StorageLocation", "ShippingPoint", "IncotermsClassification", "CustomerPaymentTerms", "SalesDocumentRjcnReason", "ItemBillingBlockReason", "WBSElement", "ProfitCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "SalesContractValidityStartDate", "SalesContractValidityEndDate", "SalesContractSignedDate"}
	sapSalesContractItemDatumColumnsWithDefault    = []string{}
	sapSalesContractItemDatumPrimaryKeyColumns     = []string{"SalesContract", "SalesContractItem"}
	sapSalesContractItemDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesContractItemDatumSlice is an alias for a slice of pointers to SapSalesContractItemDatum.
	// This should almost always be used instead of []SapSalesContractItemDatum.
	SapSalesContractItemDatumSlice []*SapSalesContractItemDatum
	// SapSalesContractItemDatumHook is the signature for custom SapSalesContractItemDatum hook methods
	SapSalesContractItemDatumHook func(context.Context, boil.ContextExecutor, *SapSalesContractItemDatum) error

	sapSalesContractItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesContractItemDatumType                 = reflect.TypeOf(&SapSalesContractItemDatum{})
	sapSalesContractItemDatumMapping              = queries.MakeStructMapping(sapSalesContractItemDatumType)
	sapSalesContractItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, sapSalesContractItemDatumPrimaryKeyColumns)
	sapSalesContractItemDatumInsertCacheMut       sync.RWMutex
	sapSalesContractItemDatumInsertCache          = make(map[string]insertCache)
	sapSalesContractItemDatumUpdateCacheMut       sync.RWMutex
	sapSalesContractItemDatumUpdateCache          = make(map[string]updateCache)
	sapSalesContractItemDatumUpsertCacheMut       sync.RWMutex
	sapSalesContractItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesContractItemDatumAfterSelectHooks []SapSalesContractItemDatumHook

var sapSalesContractItemDatumBeforeInsertHooks []SapSalesContractItemDatumHook
var sapSalesContractItemDatumAfterInsertHooks []SapSalesContractItemDatumHook

var sapSalesContractItemDatumBeforeUpdateHooks []SapSalesContractItemDatumHook
var sapSalesContractItemDatumAfterUpdateHooks []SapSalesContractItemDatumHook

var sapSalesContractItemDatumBeforeDeleteHooks []SapSalesContractItemDatumHook
var sapSalesContractItemDatumAfterDeleteHooks []SapSalesContractItemDatumHook

var sapSalesContractItemDatumBeforeUpsertHooks []SapSalesContractItemDatumHook
var sapSalesContractItemDatumAfterUpsertHooks []SapSalesContractItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesContractItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesContractItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesContractItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesContractItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesContractItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesContractItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesContractItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesContractItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesContractItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesContractItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesContractItemDatumHook registers your hook function for all future operations.
func AddSapSalesContractItemDatumHook(hookPoint boil.HookPoint, sapSalesContractItemDatumHook SapSalesContractItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesContractItemDatumAfterSelectHooks = append(sapSalesContractItemDatumAfterSelectHooks, sapSalesContractItemDatumHook)
	case boil.BeforeInsertHook:
		sapSalesContractItemDatumBeforeInsertHooks = append(sapSalesContractItemDatumBeforeInsertHooks, sapSalesContractItemDatumHook)
	case boil.AfterInsertHook:
		sapSalesContractItemDatumAfterInsertHooks = append(sapSalesContractItemDatumAfterInsertHooks, sapSalesContractItemDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesContractItemDatumBeforeUpdateHooks = append(sapSalesContractItemDatumBeforeUpdateHooks, sapSalesContractItemDatumHook)
	case boil.AfterUpdateHook:
		sapSalesContractItemDatumAfterUpdateHooks = append(sapSalesContractItemDatumAfterUpdateHooks, sapSalesContractItemDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesContractItemDatumBeforeDeleteHooks = append(sapSalesContractItemDatumBeforeDeleteHooks, sapSalesContractItemDatumHook)
	case boil.AfterDeleteHook:
		sapSalesContractItemDatumAfterDeleteHooks = append(sapSalesContractItemDatumAfterDeleteHooks, sapSalesContractItemDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesContractItemDatumBeforeUpsertHooks = append(sapSalesContractItemDatumBeforeUpsertHooks, sapSalesContractItemDatumHook)
	case boil.AfterUpsertHook:
		sapSalesContractItemDatumAfterUpsertHooks = append(sapSalesContractItemDatumAfterUpsertHooks, sapSalesContractItemDatumHook)
	}
}

// One returns a single sapSalesContractItemDatum record from the query.
func (q sapSalesContractItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesContractItemDatum, error) {
	o := &SapSalesContractItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_contract_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesContractItemDatum records from the query.
func (q sapSalesContractItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesContractItemDatumSlice, error) {
	var o []*SapSalesContractItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesContractItemDatum slice")
	}

	if len(sapSalesContractItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesContractItemDatum records in the query.
func (q sapSalesContractItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_contract_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesContractItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_contract_item_data exists")
	}

	return count > 0, nil
}

// SalesContractSapSalesContractHeaderDatum pointed to by the foreign key.
func (o *SapSalesContractItemDatum) SalesContractSapSalesContractHeaderDatum(mods ...qm.QueryMod) sapSalesContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SalesContract` = ?", o.SalesContract),
	}

	queryMods = append(queryMods, mods...)

	query := SapSalesContractHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_contract_header_data`")

	return query
}

// LoadSalesContractSapSalesContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapSalesContractItemDatumL) LoadSalesContractSapSalesContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesContractItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesContractItemDatum
	var object *SapSalesContractItemDatum

	if singular {
		object = maybeSapSalesContractItemDatum.(*SapSalesContractItemDatum)
	} else {
		slice = *maybeSapSalesContractItemDatum.(*[]*SapSalesContractItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesContractItemDatumR{}
		}
		args = append(args, object.SalesContract)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesContractItemDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesContract {
					continue Outer
				}
			}

			args = append(args, obj.SalesContract)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_contract_header_data`),
		qm.WhereIn(`sap_sales_contract_header_data.SalesContract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapSalesContractHeaderDatum")
	}

	var resultSlice []*SapSalesContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapSalesContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_sales_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_contract_header_data")
	}

	if len(sapSalesContractItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SalesContractSapSalesContractHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapSalesContractHeaderDatumR{}
		}
		foreign.R.SalesContractSapSalesContractItemData = append(foreign.R.SalesContractSapSalesContractItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SalesContract == foreign.SalesContract {
				local.R.SalesContractSapSalesContractHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapSalesContractHeaderDatumR{}
				}
				foreign.R.SalesContractSapSalesContractItemData = append(foreign.R.SalesContractSapSalesContractItemData, local)
				break
			}
		}
	}

	return nil
}

// SetSalesContractSapSalesContractHeaderDatum of the sapSalesContractItemDatum to the related item.
// Sets o.R.SalesContractSapSalesContractHeaderDatum to related.
// Adds o to related.R.SalesContractSapSalesContractItemData.
func (o *SapSalesContractItemDatum) SetSalesContractSapSalesContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapSalesContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_sales_contract_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SalesContract"}),
		strmangle.WhereClause("`", "`", 0, sapSalesContractItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SalesContract, o.SalesContract, o.SalesContractItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SalesContract = related.SalesContract
	if o.R == nil {
		o.R = &sapSalesContractItemDatumR{
			SalesContractSapSalesContractHeaderDatum: related,
		}
	} else {
		o.R.SalesContractSapSalesContractHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapSalesContractHeaderDatumR{
			SalesContractSapSalesContractItemData: SapSalesContractItemDatumSlice{o},
		}
	} else {
		related.R.SalesContractSapSalesContractItemData = append(related.R.SalesContractSapSalesContractItemData, o)
	}

	return nil
}

// SapSalesContractItemData retrieves all the records using an executor.
func SapSalesContractItemData(mods ...qm.QueryMod) sapSalesContractItemDatumQuery {
	mods = append(mods, qm.From("`sap_sales_contract_item_data`"))
	return sapSalesContractItemDatumQuery{NewQuery(mods...)}
}

// FindSapSalesContractItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesContractItemDatum(ctx context.Context, exec boil.ContextExecutor, salesContract string, salesContractItem string, selectCols ...string) (*SapSalesContractItemDatum, error) {
	sapSalesContractItemDatumObj := &SapSalesContractItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_contract_item_data` where `SalesContract`=? AND `SalesContractItem`=?", sel,
	)

	q := queries.Raw(query, salesContract, salesContractItem)

	err := q.Bind(ctx, exec, sapSalesContractItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_contract_item_data")
	}

	if err = sapSalesContractItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesContractItemDatumObj, err
	}

	return sapSalesContractItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesContractItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_contract_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesContractItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesContractItemDatumInsertCacheMut.RLock()
	cache, cached := sapSalesContractItemDatumInsertCache[key]
	sapSalesContractItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesContractItemDatumAllColumns,
			sapSalesContractItemDatumColumnsWithDefault,
			sapSalesContractItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_contract_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_contract_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_contract_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesContractItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_contract_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesContract,
		o.SalesContractItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_contract_item_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesContractItemDatumInsertCacheMut.Lock()
		sapSalesContractItemDatumInsertCache[key] = cache
		sapSalesContractItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesContractItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesContractItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesContractItemDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesContractItemDatumUpdateCache[key]
	sapSalesContractItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesContractItemDatumAllColumns,
			sapSalesContractItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_contract_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_contract_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesContractItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, append(wl, sapSalesContractItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_contract_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_contract_item_data")
	}

	if !cached {
		sapSalesContractItemDatumUpdateCacheMut.Lock()
		sapSalesContractItemDatumUpdateCache[key] = cache
		sapSalesContractItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesContractItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_contract_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_contract_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesContractItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_contract_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesContractItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesContractItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesContractItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesContractItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_contract_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesContractItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesContractItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesContractItemDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesContractItemDatumUpsertCache[key]
	sapSalesContractItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesContractItemDatumAllColumns,
			sapSalesContractItemDatumColumnsWithDefault,
			sapSalesContractItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesContractItemDatumAllColumns,
			sapSalesContractItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_contract_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_contract_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_contract_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_contract_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesContractItemDatumType, sapSalesContractItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_contract_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_contract_item_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesContractItemDatumUpsertCacheMut.Lock()
		sapSalesContractItemDatumUpsertCache[key] = cache
		sapSalesContractItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesContractItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesContractItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesContractItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesContractItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_contract_item_data` WHERE `SalesContract`=? AND `SalesContractItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_contract_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_contract_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesContractItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesContractItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_contract_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_contract_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesContractItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesContractItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_contract_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesContractItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_contract_item_data")
	}

	if len(sapSalesContractItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesContractItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesContractItemDatum(ctx, exec, o.SalesContract, o.SalesContractItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesContractItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesContractItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesContractItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_contract_item_data`.* FROM `sap_sales_contract_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesContractItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesContractItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesContractItemDatumExists checks if the SapSalesContractItemDatum row exists.
func SapSalesContractItemDatumExists(ctx context.Context, exec boil.ContextExecutor, salesContract string, salesContractItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_contract_item_data` where `SalesContract`=? AND `SalesContractItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesContract, salesContractItem)
	}
	row := exec.QueryRowContext(ctx, sql, salesContract, salesContractItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_contract_item_data exists")
	}

	return exists, nil
}
