// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCreditMemoRequestItemDatum is an object representing the database table.
type SapCreditMemoRequestItemDatum struct {
	CreditMemoRequest             string      `boil:"CreditMemoRequest" json:"CreditMemoRequest" toml:"CreditMemoRequest" yaml:"CreditMemoRequest"`
	CreditMemoRequestItem         string      `boil:"CreditMemoRequestItem" json:"CreditMemoRequestItem" toml:"CreditMemoRequestItem" yaml:"CreditMemoRequestItem"`
	CreditMemoRequestItemCategory null.String `boil:"CreditMemoRequestItemCategory" json:"CreditMemoRequestItemCategory,omitempty" toml:"CreditMemoRequestItemCategory" yaml:"CreditMemoRequestItemCategory,omitempty"`
	CreditMemoRequestItemText     null.String `boil:"CreditMemoRequestItemText" json:"CreditMemoRequestItemText,omitempty" toml:"CreditMemoRequestItemText" yaml:"CreditMemoRequestItemText,omitempty"`
	PurchaseOrderByCustomer       null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	Material                      null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	MaterialByCustomer            null.String `boil:"MaterialByCustomer" json:"MaterialByCustomer,omitempty" toml:"MaterialByCustomer" yaml:"MaterialByCustomer,omitempty"`
	PricingDate                   null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	RequestedQuantity             null.String `boil:"RequestedQuantity" json:"RequestedQuantity,omitempty" toml:"RequestedQuantity" yaml:"RequestedQuantity,omitempty"`
	RequestedQuantityUnit         null.String `boil:"RequestedQuantityUnit" json:"RequestedQuantityUnit,omitempty" toml:"RequestedQuantityUnit" yaml:"RequestedQuantityUnit,omitempty"`
	ItemGrossWeight               null.String `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                 null.String `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                null.String `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ItemVolume                    null.String `boil:"ItemVolume" json:"ItemVolume,omitempty" toml:"ItemVolume" yaml:"ItemVolume,omitempty"`
	ItemVolumeUnit                null.String `boil:"ItemVolumeUnit" json:"ItemVolumeUnit,omitempty" toml:"ItemVolumeUnit" yaml:"ItemVolumeUnit,omitempty"`
	TransactionCurrency           null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	NetAmount                     null.String `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	MaterialGroup                 null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	MaterialPricingGroup          null.String `boil:"MaterialPricingGroup" json:"MaterialPricingGroup,omitempty" toml:"MaterialPricingGroup" yaml:"MaterialPricingGroup,omitempty"`
	ProductTaxClassification1     null.String `boil:"ProductTaxClassification1" json:"ProductTaxClassification1,omitempty" toml:"ProductTaxClassification1" yaml:"ProductTaxClassification1,omitempty"`
	MatlAccountAssignmentGroup    null.String `boil:"MatlAccountAssignmentGroup" json:"MatlAccountAssignmentGroup,omitempty" toml:"MatlAccountAssignmentGroup" yaml:"MatlAccountAssignmentGroup,omitempty"`
	Batch                         null.String `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	Plant                         null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	IncotermsClassification       null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms          null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	ItemBillingBlockReason        null.String `boil:"ItemBillingBlockReason" json:"ItemBillingBlockReason,omitempty" toml:"ItemBillingBlockReason" yaml:"ItemBillingBlockReason,omitempty"`
	SalesDocumentRjcnReason       null.String `boil:"SalesDocumentRjcnReason" json:"SalesDocumentRjcnReason,omitempty" toml:"SalesDocumentRjcnReason" yaml:"SalesDocumentRjcnReason,omitempty"`
	WBSElement                    null.String `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	ProfitCenter                  null.String `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	ReferenceSDDocument           null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem       null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	SDProcessStatus               null.String `boil:"SDProcessStatus" json:"SDProcessStatus,omitempty" toml:"SDProcessStatus" yaml:"SDProcessStatus,omitempty"`
	OrderRelatedBillingStatus     null.String `boil:"OrderRelatedBillingStatus" json:"OrderRelatedBillingStatus,omitempty" toml:"OrderRelatedBillingStatus" yaml:"OrderRelatedBillingStatus,omitempty"`

	R *sapCreditMemoRequestItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCreditMemoRequestItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCreditMemoRequestItemDatumColumns = struct {
	CreditMemoRequest             string
	CreditMemoRequestItem         string
	CreditMemoRequestItemCategory string
	CreditMemoRequestItemText     string
	PurchaseOrderByCustomer       string
	Material                      string
	MaterialByCustomer            string
	PricingDate                   string
	RequestedQuantity             string
	RequestedQuantityUnit         string
	ItemGrossWeight               string
	ItemNetWeight                 string
	ItemWeightUnit                string
	ItemVolume                    string
	ItemVolumeUnit                string
	TransactionCurrency           string
	NetAmount                     string
	MaterialGroup                 string
	MaterialPricingGroup          string
	ProductTaxClassification1     string
	MatlAccountAssignmentGroup    string
	Batch                         string
	Plant                         string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	ItemBillingBlockReason        string
	SalesDocumentRjcnReason       string
	WBSElement                    string
	ProfitCenter                  string
	ReferenceSDDocument           string
	ReferenceSDDocumentItem       string
	SDProcessStatus               string
	OrderRelatedBillingStatus     string
}{
	CreditMemoRequest:             "CreditMemoRequest",
	CreditMemoRequestItem:         "CreditMemoRequestItem",
	CreditMemoRequestItemCategory: "CreditMemoRequestItemCategory",
	CreditMemoRequestItemText:     "CreditMemoRequestItemText",
	PurchaseOrderByCustomer:       "PurchaseOrderByCustomer",
	Material:                      "Material",
	MaterialByCustomer:            "MaterialByCustomer",
	PricingDate:                   "PricingDate",
	RequestedQuantity:             "RequestedQuantity",
	RequestedQuantityUnit:         "RequestedQuantityUnit",
	ItemGrossWeight:               "ItemGrossWeight",
	ItemNetWeight:                 "ItemNetWeight",
	ItemWeightUnit:                "ItemWeightUnit",
	ItemVolume:                    "ItemVolume",
	ItemVolumeUnit:                "ItemVolumeUnit",
	TransactionCurrency:           "TransactionCurrency",
	NetAmount:                     "NetAmount",
	MaterialGroup:                 "MaterialGroup",
	MaterialPricingGroup:          "MaterialPricingGroup",
	ProductTaxClassification1:     "ProductTaxClassification1",
	MatlAccountAssignmentGroup:    "MatlAccountAssignmentGroup",
	Batch:                         "Batch",
	Plant:                         "Plant",
	IncotermsClassification:       "IncotermsClassification",
	CustomerPaymentTerms:          "CustomerPaymentTerms",
	ItemBillingBlockReason:        "ItemBillingBlockReason",
	SalesDocumentRjcnReason:       "SalesDocumentRjcnReason",
	WBSElement:                    "WBSElement",
	ProfitCenter:                  "ProfitCenter",
	ReferenceSDDocument:           "ReferenceSDDocument",
	ReferenceSDDocumentItem:       "ReferenceSDDocumentItem",
	SDProcessStatus:               "SDProcessStatus",
	OrderRelatedBillingStatus:     "OrderRelatedBillingStatus",
}

var SapCreditMemoRequestItemDatumTableColumns = struct {
	CreditMemoRequest             string
	CreditMemoRequestItem         string
	CreditMemoRequestItemCategory string
	CreditMemoRequestItemText     string
	PurchaseOrderByCustomer       string
	Material                      string
	MaterialByCustomer            string
	PricingDate                   string
	RequestedQuantity             string
	RequestedQuantityUnit         string
	ItemGrossWeight               string
	ItemNetWeight                 string
	ItemWeightUnit                string
	ItemVolume                    string
	ItemVolumeUnit                string
	TransactionCurrency           string
	NetAmount                     string
	MaterialGroup                 string
	MaterialPricingGroup          string
	ProductTaxClassification1     string
	MatlAccountAssignmentGroup    string
	Batch                         string
	Plant                         string
	IncotermsClassification       string
	CustomerPaymentTerms          string
	ItemBillingBlockReason        string
	SalesDocumentRjcnReason       string
	WBSElement                    string
	ProfitCenter                  string
	ReferenceSDDocument           string
	ReferenceSDDocumentItem       string
	SDProcessStatus               string
	OrderRelatedBillingStatus     string
}{
	CreditMemoRequest:             "sap_credit_memo_request_item_data.CreditMemoRequest",
	CreditMemoRequestItem:         "sap_credit_memo_request_item_data.CreditMemoRequestItem",
	CreditMemoRequestItemCategory: "sap_credit_memo_request_item_data.CreditMemoRequestItemCategory",
	CreditMemoRequestItemText:     "sap_credit_memo_request_item_data.CreditMemoRequestItemText",
	PurchaseOrderByCustomer:       "sap_credit_memo_request_item_data.PurchaseOrderByCustomer",
	Material:                      "sap_credit_memo_request_item_data.Material",
	MaterialByCustomer:            "sap_credit_memo_request_item_data.MaterialByCustomer",
	PricingDate:                   "sap_credit_memo_request_item_data.PricingDate",
	RequestedQuantity:             "sap_credit_memo_request_item_data.RequestedQuantity",
	RequestedQuantityUnit:         "sap_credit_memo_request_item_data.RequestedQuantityUnit",
	ItemGrossWeight:               "sap_credit_memo_request_item_data.ItemGrossWeight",
	ItemNetWeight:                 "sap_credit_memo_request_item_data.ItemNetWeight",
	ItemWeightUnit:                "sap_credit_memo_request_item_data.ItemWeightUnit",
	ItemVolume:                    "sap_credit_memo_request_item_data.ItemVolume",
	ItemVolumeUnit:                "sap_credit_memo_request_item_data.ItemVolumeUnit",
	TransactionCurrency:           "sap_credit_memo_request_item_data.TransactionCurrency",
	NetAmount:                     "sap_credit_memo_request_item_data.NetAmount",
	MaterialGroup:                 "sap_credit_memo_request_item_data.MaterialGroup",
	MaterialPricingGroup:          "sap_credit_memo_request_item_data.MaterialPricingGroup",
	ProductTaxClassification1:     "sap_credit_memo_request_item_data.ProductTaxClassification1",
	MatlAccountAssignmentGroup:    "sap_credit_memo_request_item_data.MatlAccountAssignmentGroup",
	Batch:                         "sap_credit_memo_request_item_data.Batch",
	Plant:                         "sap_credit_memo_request_item_data.Plant",
	IncotermsClassification:       "sap_credit_memo_request_item_data.IncotermsClassification",
	CustomerPaymentTerms:          "sap_credit_memo_request_item_data.CustomerPaymentTerms",
	ItemBillingBlockReason:        "sap_credit_memo_request_item_data.ItemBillingBlockReason",
	SalesDocumentRjcnReason:       "sap_credit_memo_request_item_data.SalesDocumentRjcnReason",
	WBSElement:                    "sap_credit_memo_request_item_data.WBSElement",
	ProfitCenter:                  "sap_credit_memo_request_item_data.ProfitCenter",
	ReferenceSDDocument:           "sap_credit_memo_request_item_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:       "sap_credit_memo_request_item_data.ReferenceSDDocumentItem",
	SDProcessStatus:               "sap_credit_memo_request_item_data.SDProcessStatus",
	OrderRelatedBillingStatus:     "sap_credit_memo_request_item_data.OrderRelatedBillingStatus",
}

// Generated where

var SapCreditMemoRequestItemDatumWhere = struct {
	CreditMemoRequest             whereHelperstring
	CreditMemoRequestItem         whereHelperstring
	CreditMemoRequestItemCategory whereHelpernull_String
	CreditMemoRequestItemText     whereHelpernull_String
	PurchaseOrderByCustomer       whereHelpernull_String
	Material                      whereHelpernull_String
	MaterialByCustomer            whereHelpernull_String
	PricingDate                   whereHelpernull_String
	RequestedQuantity             whereHelpernull_String
	RequestedQuantityUnit         whereHelpernull_String
	ItemGrossWeight               whereHelpernull_String
	ItemNetWeight                 whereHelpernull_String
	ItemWeightUnit                whereHelpernull_String
	ItemVolume                    whereHelpernull_String
	ItemVolumeUnit                whereHelpernull_String
	TransactionCurrency           whereHelpernull_String
	NetAmount                     whereHelpernull_String
	MaterialGroup                 whereHelpernull_String
	MaterialPricingGroup          whereHelpernull_String
	ProductTaxClassification1     whereHelpernull_String
	MatlAccountAssignmentGroup    whereHelpernull_String
	Batch                         whereHelpernull_String
	Plant                         whereHelpernull_String
	IncotermsClassification       whereHelpernull_String
	CustomerPaymentTerms          whereHelpernull_String
	ItemBillingBlockReason        whereHelpernull_String
	SalesDocumentRjcnReason       whereHelpernull_String
	WBSElement                    whereHelpernull_String
	ProfitCenter                  whereHelpernull_String
	ReferenceSDDocument           whereHelpernull_String
	ReferenceSDDocumentItem       whereHelpernull_String
	SDProcessStatus               whereHelpernull_String
	OrderRelatedBillingStatus     whereHelpernull_String
}{
	CreditMemoRequest:             whereHelperstring{field: "`sap_credit_memo_request_item_data`.`CreditMemoRequest`"},
	CreditMemoRequestItem:         whereHelperstring{field: "`sap_credit_memo_request_item_data`.`CreditMemoRequestItem`"},
	CreditMemoRequestItemCategory: whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`CreditMemoRequestItemCategory`"},
	CreditMemoRequestItemText:     whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`CreditMemoRequestItemText`"},
	PurchaseOrderByCustomer:       whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`PurchaseOrderByCustomer`"},
	Material:                      whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`Material`"},
	MaterialByCustomer:            whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`MaterialByCustomer`"},
	PricingDate:                   whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`PricingDate`"},
	RequestedQuantity:             whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`RequestedQuantity`"},
	RequestedQuantityUnit:         whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`RequestedQuantityUnit`"},
	ItemGrossWeight:               whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                 whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ItemWeightUnit`"},
	ItemVolume:                    whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ItemVolume`"},
	ItemVolumeUnit:                whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ItemVolumeUnit`"},
	TransactionCurrency:           whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`TransactionCurrency`"},
	NetAmount:                     whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`NetAmount`"},
	MaterialGroup:                 whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`MaterialGroup`"},
	MaterialPricingGroup:          whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`MaterialPricingGroup`"},
	ProductTaxClassification1:     whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ProductTaxClassification1`"},
	MatlAccountAssignmentGroup:    whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`MatlAccountAssignmentGroup`"},
	Batch:                         whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`Batch`"},
	Plant:                         whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`Plant`"},
	IncotermsClassification:       whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:          whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`CustomerPaymentTerms`"},
	ItemBillingBlockReason:        whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ItemBillingBlockReason`"},
	SalesDocumentRjcnReason:       whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`SalesDocumentRjcnReason`"},
	WBSElement:                    whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`WBSElement`"},
	ProfitCenter:                  whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ProfitCenter`"},
	ReferenceSDDocument:           whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:       whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`ReferenceSDDocumentItem`"},
	SDProcessStatus:               whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`SDProcessStatus`"},
	OrderRelatedBillingStatus:     whereHelpernull_String{field: "`sap_credit_memo_request_item_data`.`OrderRelatedBillingStatus`"},
}

// SapCreditMemoRequestItemDatumRels is where relationship names are stored.
var SapCreditMemoRequestItemDatumRels = struct {
	CreditMemoRequestSapCreditMemoRequestHeaderDatum string
}{
	CreditMemoRequestSapCreditMemoRequestHeaderDatum: "CreditMemoRequestSapCreditMemoRequestHeaderDatum",
}

// sapCreditMemoRequestItemDatumR is where relationships are stored.
type sapCreditMemoRequestItemDatumR struct {
	CreditMemoRequestSapCreditMemoRequestHeaderDatum *SapCreditMemoRequestHeaderDatum `boil:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" json:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" toml:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" yaml:"CreditMemoRequestSapCreditMemoRequestHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCreditMemoRequestItemDatumR) NewStruct() *sapCreditMemoRequestItemDatumR {
	return &sapCreditMemoRequestItemDatumR{}
}

// sapCreditMemoRequestItemDatumL is where Load methods for each relationship are stored.
type sapCreditMemoRequestItemDatumL struct{}

var (
	sapCreditMemoRequestItemDatumAllColumns            = []string{"CreditMemoRequest", "CreditMemoRequestItem", "CreditMemoRequestItemCategory", "CreditMemoRequestItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "ProductTaxClassification1", "MatlAccountAssignmentGroup", "Batch", "Plant", "IncotermsClassification", "CustomerPaymentTerms", "ItemBillingBlockReason", "SalesDocumentRjcnReason", "WBSElement", "ProfitCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "OrderRelatedBillingStatus"}
	sapCreditMemoRequestItemDatumColumnsWithoutDefault = []string{"CreditMemoRequest", "CreditMemoRequestItem", "CreditMemoRequestItemCategory", "CreditMemoRequestItemText", "PurchaseOrderByCustomer", "Material", "MaterialByCustomer", "PricingDate", "RequestedQuantity", "RequestedQuantityUnit", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "ItemVolume", "ItemVolumeUnit", "TransactionCurrency", "NetAmount", "MaterialGroup", "MaterialPricingGroup", "ProductTaxClassification1", "MatlAccountAssignmentGroup", "Batch", "Plant", "IncotermsClassification", "CustomerPaymentTerms", "ItemBillingBlockReason", "SalesDocumentRjcnReason", "WBSElement", "ProfitCenter", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SDProcessStatus", "OrderRelatedBillingStatus"}
	sapCreditMemoRequestItemDatumColumnsWithDefault    = []string{}
	sapCreditMemoRequestItemDatumPrimaryKeyColumns     = []string{"CreditMemoRequest", "CreditMemoRequestItem"}
	sapCreditMemoRequestItemDatumGeneratedColumns      = []string{}
)

type (
	// SapCreditMemoRequestItemDatumSlice is an alias for a slice of pointers to SapCreditMemoRequestItemDatum.
	// This should almost always be used instead of []SapCreditMemoRequestItemDatum.
	SapCreditMemoRequestItemDatumSlice []*SapCreditMemoRequestItemDatum
	// SapCreditMemoRequestItemDatumHook is the signature for custom SapCreditMemoRequestItemDatum hook methods
	SapCreditMemoRequestItemDatumHook func(context.Context, boil.ContextExecutor, *SapCreditMemoRequestItemDatum) error

	sapCreditMemoRequestItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCreditMemoRequestItemDatumType                 = reflect.TypeOf(&SapCreditMemoRequestItemDatum{})
	sapCreditMemoRequestItemDatumMapping              = queries.MakeStructMapping(sapCreditMemoRequestItemDatumType)
	sapCreditMemoRequestItemDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, sapCreditMemoRequestItemDatumPrimaryKeyColumns)
	sapCreditMemoRequestItemDatumInsertCacheMut       sync.RWMutex
	sapCreditMemoRequestItemDatumInsertCache          = make(map[string]insertCache)
	sapCreditMemoRequestItemDatumUpdateCacheMut       sync.RWMutex
	sapCreditMemoRequestItemDatumUpdateCache          = make(map[string]updateCache)
	sapCreditMemoRequestItemDatumUpsertCacheMut       sync.RWMutex
	sapCreditMemoRequestItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCreditMemoRequestItemDatumAfterSelectHooks []SapCreditMemoRequestItemDatumHook

var sapCreditMemoRequestItemDatumBeforeInsertHooks []SapCreditMemoRequestItemDatumHook
var sapCreditMemoRequestItemDatumAfterInsertHooks []SapCreditMemoRequestItemDatumHook

var sapCreditMemoRequestItemDatumBeforeUpdateHooks []SapCreditMemoRequestItemDatumHook
var sapCreditMemoRequestItemDatumAfterUpdateHooks []SapCreditMemoRequestItemDatumHook

var sapCreditMemoRequestItemDatumBeforeDeleteHooks []SapCreditMemoRequestItemDatumHook
var sapCreditMemoRequestItemDatumAfterDeleteHooks []SapCreditMemoRequestItemDatumHook

var sapCreditMemoRequestItemDatumBeforeUpsertHooks []SapCreditMemoRequestItemDatumHook
var sapCreditMemoRequestItemDatumAfterUpsertHooks []SapCreditMemoRequestItemDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCreditMemoRequestItemDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCreditMemoRequestItemDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCreditMemoRequestItemDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCreditMemoRequestItemDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCreditMemoRequestItemDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCreditMemoRequestItemDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCreditMemoRequestItemDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCreditMemoRequestItemDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCreditMemoRequestItemDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestItemDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCreditMemoRequestItemDatumHook registers your hook function for all future operations.
func AddSapCreditMemoRequestItemDatumHook(hookPoint boil.HookPoint, sapCreditMemoRequestItemDatumHook SapCreditMemoRequestItemDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCreditMemoRequestItemDatumAfterSelectHooks = append(sapCreditMemoRequestItemDatumAfterSelectHooks, sapCreditMemoRequestItemDatumHook)
	case boil.BeforeInsertHook:
		sapCreditMemoRequestItemDatumBeforeInsertHooks = append(sapCreditMemoRequestItemDatumBeforeInsertHooks, sapCreditMemoRequestItemDatumHook)
	case boil.AfterInsertHook:
		sapCreditMemoRequestItemDatumAfterInsertHooks = append(sapCreditMemoRequestItemDatumAfterInsertHooks, sapCreditMemoRequestItemDatumHook)
	case boil.BeforeUpdateHook:
		sapCreditMemoRequestItemDatumBeforeUpdateHooks = append(sapCreditMemoRequestItemDatumBeforeUpdateHooks, sapCreditMemoRequestItemDatumHook)
	case boil.AfterUpdateHook:
		sapCreditMemoRequestItemDatumAfterUpdateHooks = append(sapCreditMemoRequestItemDatumAfterUpdateHooks, sapCreditMemoRequestItemDatumHook)
	case boil.BeforeDeleteHook:
		sapCreditMemoRequestItemDatumBeforeDeleteHooks = append(sapCreditMemoRequestItemDatumBeforeDeleteHooks, sapCreditMemoRequestItemDatumHook)
	case boil.AfterDeleteHook:
		sapCreditMemoRequestItemDatumAfterDeleteHooks = append(sapCreditMemoRequestItemDatumAfterDeleteHooks, sapCreditMemoRequestItemDatumHook)
	case boil.BeforeUpsertHook:
		sapCreditMemoRequestItemDatumBeforeUpsertHooks = append(sapCreditMemoRequestItemDatumBeforeUpsertHooks, sapCreditMemoRequestItemDatumHook)
	case boil.AfterUpsertHook:
		sapCreditMemoRequestItemDatumAfterUpsertHooks = append(sapCreditMemoRequestItemDatumAfterUpsertHooks, sapCreditMemoRequestItemDatumHook)
	}
}

// One returns a single sapCreditMemoRequestItemDatum record from the query.
func (q sapCreditMemoRequestItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCreditMemoRequestItemDatum, error) {
	o := &SapCreditMemoRequestItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_credit_memo_request_item_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCreditMemoRequestItemDatum records from the query.
func (q sapCreditMemoRequestItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCreditMemoRequestItemDatumSlice, error) {
	var o []*SapCreditMemoRequestItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCreditMemoRequestItemDatum slice")
	}

	if len(sapCreditMemoRequestItemDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCreditMemoRequestItemDatum records in the query.
func (q sapCreditMemoRequestItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_credit_memo_request_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCreditMemoRequestItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_credit_memo_request_item_data exists")
	}

	return count > 0, nil
}

// CreditMemoRequestSapCreditMemoRequestHeaderDatum pointed to by the foreign key.
func (o *SapCreditMemoRequestItemDatum) CreditMemoRequestSapCreditMemoRequestHeaderDatum(mods ...qm.QueryMod) sapCreditMemoRequestHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CreditMemoRequest` = ?", o.CreditMemoRequest),
	}

	queryMods = append(queryMods, mods...)

	query := SapCreditMemoRequestHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_credit_memo_request_header_data`")

	return query
}

// LoadCreditMemoRequestSapCreditMemoRequestHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCreditMemoRequestItemDatumL) LoadCreditMemoRequestSapCreditMemoRequestHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditMemoRequestItemDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditMemoRequestItemDatum
	var object *SapCreditMemoRequestItemDatum

	if singular {
		object = maybeSapCreditMemoRequestItemDatum.(*SapCreditMemoRequestItemDatum)
	} else {
		slice = *maybeSapCreditMemoRequestItemDatum.(*[]*SapCreditMemoRequestItemDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditMemoRequestItemDatumR{}
		}
		args = append(args, object.CreditMemoRequest)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditMemoRequestItemDatumR{}
			}

			for _, a := range args {
				if a == obj.CreditMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.CreditMemoRequest)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_memo_request_header_data`),
		qm.WhereIn(`sap_credit_memo_request_header_data.CreditMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCreditMemoRequestHeaderDatum")
	}

	var resultSlice []*SapCreditMemoRequestHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCreditMemoRequestHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_credit_memo_request_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_memo_request_header_data")
	}

	if len(sapCreditMemoRequestItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCreditMemoRequestHeaderDatumR{}
		}
		foreign.R.CreditMemoRequestSapCreditMemoRequestItemData = append(foreign.R.CreditMemoRequestSapCreditMemoRequestItemData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreditMemoRequest == foreign.CreditMemoRequest {
				local.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCreditMemoRequestHeaderDatumR{}
				}
				foreign.R.CreditMemoRequestSapCreditMemoRequestItemData = append(foreign.R.CreditMemoRequestSapCreditMemoRequestItemData, local)
				break
			}
		}
	}

	return nil
}

// SetCreditMemoRequestSapCreditMemoRequestHeaderDatum of the sapCreditMemoRequestItemDatum to the related item.
// Sets o.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum to related.
// Adds o to related.R.CreditMemoRequestSapCreditMemoRequestItemData.
func (o *SapCreditMemoRequestItemDatum) SetCreditMemoRequestSapCreditMemoRequestHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCreditMemoRequestHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_credit_memo_request_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CreditMemoRequest"}),
		strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CreditMemoRequest, o.CreditMemoRequest, o.CreditMemoRequestItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreditMemoRequest = related.CreditMemoRequest
	if o.R == nil {
		o.R = &sapCreditMemoRequestItemDatumR{
			CreditMemoRequestSapCreditMemoRequestHeaderDatum: related,
		}
	} else {
		o.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapCreditMemoRequestHeaderDatumR{
			CreditMemoRequestSapCreditMemoRequestItemData: SapCreditMemoRequestItemDatumSlice{o},
		}
	} else {
		related.R.CreditMemoRequestSapCreditMemoRequestItemData = append(related.R.CreditMemoRequestSapCreditMemoRequestItemData, o)
	}

	return nil
}

// SapCreditMemoRequestItemData retrieves all the records using an executor.
func SapCreditMemoRequestItemData(mods ...qm.QueryMod) sapCreditMemoRequestItemDatumQuery {
	mods = append(mods, qm.From("`sap_credit_memo_request_item_data`"))
	return sapCreditMemoRequestItemDatumQuery{NewQuery(mods...)}
}

// FindSapCreditMemoRequestItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCreditMemoRequestItemDatum(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, creditMemoRequestItem string, selectCols ...string) (*SapCreditMemoRequestItemDatum, error) {
	sapCreditMemoRequestItemDatumObj := &SapCreditMemoRequestItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_credit_memo_request_item_data` where `CreditMemoRequest`=? AND `CreditMemoRequestItem`=?", sel,
	)

	q := queries.Raw(query, creditMemoRequest, creditMemoRequestItem)

	err := q.Bind(ctx, exec, sapCreditMemoRequestItemDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_credit_memo_request_item_data")
	}

	if err = sapCreditMemoRequestItemDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCreditMemoRequestItemDatumObj, err
	}

	return sapCreditMemoRequestItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCreditMemoRequestItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_item_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCreditMemoRequestItemDatumInsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestItemDatumInsertCache[key]
	sapCreditMemoRequestItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCreditMemoRequestItemDatumAllColumns,
			sapCreditMemoRequestItemDatumColumnsWithDefault,
			sapCreditMemoRequestItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_credit_memo_request_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_credit_memo_request_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_credit_memo_request_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_credit_memo_request_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreditMemoRequest,
		o.CreditMemoRequestItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_item_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestItemDatumInsertCacheMut.Lock()
		sapCreditMemoRequestItemDatumInsertCache[key] = cache
		sapCreditMemoRequestItemDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCreditMemoRequestItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCreditMemoRequestItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCreditMemoRequestItemDatumUpdateCacheMut.RLock()
	cache, cached := sapCreditMemoRequestItemDatumUpdateCache[key]
	sapCreditMemoRequestItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCreditMemoRequestItemDatumAllColumns,
			sapCreditMemoRequestItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_credit_memo_request_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_credit_memo_request_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, append(wl, sapCreditMemoRequestItemDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_credit_memo_request_item_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_credit_memo_request_item_data")
	}

	if !cached {
		sapCreditMemoRequestItemDatumUpdateCacheMut.Lock()
		sapCreditMemoRequestItemDatumUpdateCache[key] = cache
		sapCreditMemoRequestItemDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCreditMemoRequestItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_credit_memo_request_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_credit_memo_request_item_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCreditMemoRequestItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_credit_memo_request_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCreditMemoRequestItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCreditMemoRequestItemDatum")
	}
	return rowsAff, nil
}

var mySQLSapCreditMemoRequestItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCreditMemoRequestItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_item_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCreditMemoRequestItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCreditMemoRequestItemDatumUpsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestItemDatumUpsertCache[key]
	sapCreditMemoRequestItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCreditMemoRequestItemDatumAllColumns,
			sapCreditMemoRequestItemDatumColumnsWithDefault,
			sapCreditMemoRequestItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCreditMemoRequestItemDatumAllColumns,
			sapCreditMemoRequestItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_credit_memo_request_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_credit_memo_request_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_credit_memo_request_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_credit_memo_request_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCreditMemoRequestItemDatumType, sapCreditMemoRequestItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_credit_memo_request_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_item_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestItemDatumUpsertCacheMut.Lock()
		sapCreditMemoRequestItemDatumUpsertCache[key] = cache
		sapCreditMemoRequestItemDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCreditMemoRequestItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCreditMemoRequestItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCreditMemoRequestItemDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCreditMemoRequestItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_credit_memo_request_item_data` WHERE `CreditMemoRequest`=? AND `CreditMemoRequestItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_credit_memo_request_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_credit_memo_request_item_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCreditMemoRequestItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCreditMemoRequestItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_credit_memo_request_item_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_item_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCreditMemoRequestItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCreditMemoRequestItemDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_credit_memo_request_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCreditMemoRequestItemDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_item_data")
	}

	if len(sapCreditMemoRequestItemDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCreditMemoRequestItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCreditMemoRequestItemDatum(ctx, exec, o.CreditMemoRequest, o.CreditMemoRequestItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCreditMemoRequestItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCreditMemoRequestItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_credit_memo_request_item_data`.* FROM `sap_credit_memo_request_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCreditMemoRequestItemDatumSlice")
	}

	*o = slice

	return nil
}

// SapCreditMemoRequestItemDatumExists checks if the SapCreditMemoRequestItemDatum row exists.
func SapCreditMemoRequestItemDatumExists(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, creditMemoRequestItem string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_credit_memo_request_item_data` where `CreditMemoRequest`=? AND `CreditMemoRequestItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, creditMemoRequest, creditMemoRequestItem)
	}
	row := exec.QueryRowContext(ctx, sql, creditMemoRequest, creditMemoRequestItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_credit_memo_request_item_data exists")
	}

	return exists, nil
}
