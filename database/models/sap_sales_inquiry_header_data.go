// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesInquiryHeaderDatum is an object representing the database table.
type SapSalesInquiryHeaderDatum struct {
	SalesInquiry                   string      `boil:"SalesInquiry" json:"SalesInquiry" toml:"SalesInquiry" yaml:"SalesInquiry"`
	SalesInquiryType               null.String `boil:"SalesInquiryType" json:"SalesInquiryType,omitempty" toml:"SalesInquiryType" yaml:"SalesInquiryType,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision           null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                  null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderType      null.String `boil:"CustomerPurchaseOrderType" json:"CustomerPurchaseOrderType,omitempty" toml:"CustomerPurchaseOrderType" yaml:"CustomerPurchaseOrderType,omitempty"`
	CustomerPurchaseOrderDate      null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	SalesInquiryDate               null.String `boil:"SalesInquiryDate" json:"SalesInquiryDate,omitempty" toml:"SalesInquiryDate" yaml:"SalesInquiryDate,omitempty"`
	TotalNetAmount                 null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	SDDocumentReason               null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PricingDate                    null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	HeaderBillingBlockReason       null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	BindingPeriodValidityStartDate null.String `boil:"BindingPeriodValidityStartDate" json:"BindingPeriodValidityStartDate,omitempty" toml:"BindingPeriodValidityStartDate" yaml:"BindingPeriodValidityStartDate,omitempty"`
	BindingPeriodValidityEndDate   null.String `boil:"BindingPeriodValidityEndDate" json:"BindingPeriodValidityEndDate,omitempty" toml:"BindingPeriodValidityEndDate" yaml:"BindingPeriodValidityEndDate,omitempty"`
	HdrOrderProbabilityInPercent   null.String `boil:"HdrOrderProbabilityInPercent" json:"HdrOrderProbabilityInPercent,omitempty" toml:"HdrOrderProbabilityInPercent" yaml:"HdrOrderProbabilityInPercent,omitempty"`
	ExpectedOrderNetAmount         null.String `boil:"ExpectedOrderNetAmount" json:"ExpectedOrderNetAmount,omitempty" toml:"ExpectedOrderNetAmount" yaml:"ExpectedOrderNetAmount,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                  null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	OverallSDProcessStatus         null.String `boil:"OverallSDProcessStatus" json:"OverallSDProcessStatus,omitempty" toml:"OverallSDProcessStatus" yaml:"OverallSDProcessStatus,omitempty"`
	TotalCreditCheckStatus         null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	OverallSDDocumentRejectionSts  null.String `boil:"OverallSDDocumentRejectionSts" json:"OverallSDDocumentRejectionSts,omitempty" toml:"OverallSDDocumentRejectionSts" yaml:"OverallSDDocumentRejectionSts,omitempty"`

	R *sapSalesInquiryHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesInquiryHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesInquiryHeaderDatumColumns = struct {
	SalesInquiry                   string
	SalesInquiryType               string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderType      string
	CustomerPurchaseOrderDate      string
	SalesInquiryDate               string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	HeaderBillingBlockReason       string
	BindingPeriodValidityStartDate string
	BindingPeriodValidityEndDate   string
	HdrOrderProbabilityInPercent   string
	ExpectedOrderNetAmount         string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
}{
	SalesInquiry:                   "SalesInquiry",
	SalesInquiryType:               "SalesInquiryType",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	OrganizationDivision:           "OrganizationDivision",
	SalesGroup:                     "SalesGroup",
	SalesOffice:                    "SalesOffice",
	SalesDistrict:                  "SalesDistrict",
	SoldToParty:                    "SoldToParty",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:      "CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:      "CustomerPurchaseOrderDate",
	SalesInquiryDate:               "SalesInquiryDate",
	TotalNetAmount:                 "TotalNetAmount",
	TransactionCurrency:            "TransactionCurrency",
	SDDocumentReason:               "SDDocumentReason",
	PricingDate:                    "PricingDate",
	HeaderBillingBlockReason:       "HeaderBillingBlockReason",
	BindingPeriodValidityStartDate: "BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:   "BindingPeriodValidityEndDate",
	HdrOrderProbabilityInPercent:   "HdrOrderProbabilityInPercent",
	ExpectedOrderNetAmount:         "ExpectedOrderNetAmount",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	PaymentMethod:                  "PaymentMethod",
	OverallSDProcessStatus:         "OverallSDProcessStatus",
	TotalCreditCheckStatus:         "TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "OverallSDDocumentRejectionSts",
}

var SapSalesInquiryHeaderDatumTableColumns = struct {
	SalesInquiry                   string
	SalesInquiryType               string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderType      string
	CustomerPurchaseOrderDate      string
	SalesInquiryDate               string
	TotalNetAmount                 string
	TransactionCurrency            string
	SDDocumentReason               string
	PricingDate                    string
	HeaderBillingBlockReason       string
	BindingPeriodValidityStartDate string
	BindingPeriodValidityEndDate   string
	HdrOrderProbabilityInPercent   string
	ExpectedOrderNetAmount         string
	IncotermsClassification        string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	OverallSDProcessStatus         string
	TotalCreditCheckStatus         string
	OverallSDDocumentRejectionSts  string
}{
	SalesInquiry:                   "sap_sales_inquiry_header_data.SalesInquiry",
	SalesInquiryType:               "sap_sales_inquiry_header_data.SalesInquiryType",
	SalesOrganization:              "sap_sales_inquiry_header_data.SalesOrganization",
	DistributionChannel:            "sap_sales_inquiry_header_data.DistributionChannel",
	OrganizationDivision:           "sap_sales_inquiry_header_data.OrganizationDivision",
	SalesGroup:                     "sap_sales_inquiry_header_data.SalesGroup",
	SalesOffice:                    "sap_sales_inquiry_header_data.SalesOffice",
	SalesDistrict:                  "sap_sales_inquiry_header_data.SalesDistrict",
	SoldToParty:                    "sap_sales_inquiry_header_data.SoldToParty",
	CreationDate:                   "sap_sales_inquiry_header_data.CreationDate",
	LastChangeDate:                 "sap_sales_inquiry_header_data.LastChangeDate",
	PurchaseOrderByCustomer:        "sap_sales_inquiry_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderType:      "sap_sales_inquiry_header_data.CustomerPurchaseOrderType",
	CustomerPurchaseOrderDate:      "sap_sales_inquiry_header_data.CustomerPurchaseOrderDate",
	SalesInquiryDate:               "sap_sales_inquiry_header_data.SalesInquiryDate",
	TotalNetAmount:                 "sap_sales_inquiry_header_data.TotalNetAmount",
	TransactionCurrency:            "sap_sales_inquiry_header_data.TransactionCurrency",
	SDDocumentReason:               "sap_sales_inquiry_header_data.SDDocumentReason",
	PricingDate:                    "sap_sales_inquiry_header_data.PricingDate",
	HeaderBillingBlockReason:       "sap_sales_inquiry_header_data.HeaderBillingBlockReason",
	BindingPeriodValidityStartDate: "sap_sales_inquiry_header_data.BindingPeriodValidityStartDate",
	BindingPeriodValidityEndDate:   "sap_sales_inquiry_header_data.BindingPeriodValidityEndDate",
	HdrOrderProbabilityInPercent:   "sap_sales_inquiry_header_data.HdrOrderProbabilityInPercent",
	ExpectedOrderNetAmount:         "sap_sales_inquiry_header_data.ExpectedOrderNetAmount",
	IncotermsClassification:        "sap_sales_inquiry_header_data.IncotermsClassification",
	CustomerPaymentTerms:           "sap_sales_inquiry_header_data.CustomerPaymentTerms",
	PaymentMethod:                  "sap_sales_inquiry_header_data.PaymentMethod",
	OverallSDProcessStatus:         "sap_sales_inquiry_header_data.OverallSDProcessStatus",
	TotalCreditCheckStatus:         "sap_sales_inquiry_header_data.TotalCreditCheckStatus",
	OverallSDDocumentRejectionSts:  "sap_sales_inquiry_header_data.OverallSDDocumentRejectionSts",
}

// Generated where

var SapSalesInquiryHeaderDatumWhere = struct {
	SalesInquiry                   whereHelperstring
	SalesInquiryType               whereHelpernull_String
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	OrganizationDivision           whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SalesDistrict                  whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	CustomerPurchaseOrderType      whereHelpernull_String
	CustomerPurchaseOrderDate      whereHelpernull_String
	SalesInquiryDate               whereHelpernull_String
	TotalNetAmount                 whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	SDDocumentReason               whereHelpernull_String
	PricingDate                    whereHelpernull_String
	HeaderBillingBlockReason       whereHelpernull_String
	BindingPeriodValidityStartDate whereHelpernull_String
	BindingPeriodValidityEndDate   whereHelpernull_String
	HdrOrderProbabilityInPercent   whereHelpernull_String
	ExpectedOrderNetAmount         whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	PaymentMethod                  whereHelpernull_String
	OverallSDProcessStatus         whereHelpernull_String
	TotalCreditCheckStatus         whereHelpernull_String
	OverallSDDocumentRejectionSts  whereHelpernull_String
}{
	SalesInquiry:                   whereHelperstring{field: "`sap_sales_inquiry_header_data`.`SalesInquiry`"},
	SalesInquiryType:               whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SalesInquiryType`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`DistributionChannel`"},
	OrganizationDivision:           whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`OrganizationDivision`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SalesGroup`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SalesOffice`"},
	SalesDistrict:                  whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SalesDistrict`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SoldToParty`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`LastChangeDate`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderType:      whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`CustomerPurchaseOrderType`"},
	CustomerPurchaseOrderDate:      whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`CustomerPurchaseOrderDate`"},
	SalesInquiryDate:               whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SalesInquiryDate`"},
	TotalNetAmount:                 whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`TotalNetAmount`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`TransactionCurrency`"},
	SDDocumentReason:               whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`SDDocumentReason`"},
	PricingDate:                    whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`PricingDate`"},
	HeaderBillingBlockReason:       whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`HeaderBillingBlockReason`"},
	BindingPeriodValidityStartDate: whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`BindingPeriodValidityStartDate`"},
	BindingPeriodValidityEndDate:   whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`BindingPeriodValidityEndDate`"},
	HdrOrderProbabilityInPercent:   whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`HdrOrderProbabilityInPercent`"},
	ExpectedOrderNetAmount:         whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`ExpectedOrderNetAmount`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`IncotermsClassification`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                  whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`PaymentMethod`"},
	OverallSDProcessStatus:         whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`OverallSDProcessStatus`"},
	TotalCreditCheckStatus:         whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`TotalCreditCheckStatus`"},
	OverallSDDocumentRejectionSts:  whereHelpernull_String{field: "`sap_sales_inquiry_header_data`.`OverallSDDocumentRejectionSts`"},
}

// SapSalesInquiryHeaderDatumRels is where relationship names are stored.
var SapSalesInquiryHeaderDatumRels = struct {
	SalesInquirySapSalesInquiryHeaderPartnerData string
	SalesInquirySapSalesInquiryItemData          string
}{
	SalesInquirySapSalesInquiryHeaderPartnerData: "SalesInquirySapSalesInquiryHeaderPartnerData",
	SalesInquirySapSalesInquiryItemData:          "SalesInquirySapSalesInquiryItemData",
}

// sapSalesInquiryHeaderDatumR is where relationships are stored.
type sapSalesInquiryHeaderDatumR struct {
	SalesInquirySapSalesInquiryHeaderPartnerData SapSalesInquiryHeaderPartnerDatumSlice `boil:"SalesInquirySapSalesInquiryHeaderPartnerData" json:"SalesInquirySapSalesInquiryHeaderPartnerData" toml:"SalesInquirySapSalesInquiryHeaderPartnerData" yaml:"SalesInquirySapSalesInquiryHeaderPartnerData"`
	SalesInquirySapSalesInquiryItemData          SapSalesInquiryItemDatumSlice          `boil:"SalesInquirySapSalesInquiryItemData" json:"SalesInquirySapSalesInquiryItemData" toml:"SalesInquirySapSalesInquiryItemData" yaml:"SalesInquirySapSalesInquiryItemData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesInquiryHeaderDatumR) NewStruct() *sapSalesInquiryHeaderDatumR {
	return &sapSalesInquiryHeaderDatumR{}
}

// sapSalesInquiryHeaderDatumL is where Load methods for each relationship are stored.
type sapSalesInquiryHeaderDatumL struct{}

var (
	sapSalesInquiryHeaderDatumAllColumns            = []string{"SalesInquiry", "SalesInquiryType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "SalesInquiryDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "HeaderBillingBlockReason", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "HdrOrderProbabilityInPercent", "ExpectedOrderNetAmount", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapSalesInquiryHeaderDatumColumnsWithoutDefault = []string{"SalesInquiry", "SalesInquiryType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderType", "CustomerPurchaseOrderDate", "SalesInquiryDate", "TotalNetAmount", "TransactionCurrency", "SDDocumentReason", "PricingDate", "HeaderBillingBlockReason", "BindingPeriodValidityStartDate", "BindingPeriodValidityEndDate", "HdrOrderProbabilityInPercent", "ExpectedOrderNetAmount", "IncotermsClassification", "CustomerPaymentTerms", "PaymentMethod", "OverallSDProcessStatus", "TotalCreditCheckStatus", "OverallSDDocumentRejectionSts"}
	sapSalesInquiryHeaderDatumColumnsWithDefault    = []string{}
	sapSalesInquiryHeaderDatumPrimaryKeyColumns     = []string{"SalesInquiry"}
	sapSalesInquiryHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesInquiryHeaderDatumSlice is an alias for a slice of pointers to SapSalesInquiryHeaderDatum.
	// This should almost always be used instead of []SapSalesInquiryHeaderDatum.
	SapSalesInquiryHeaderDatumSlice []*SapSalesInquiryHeaderDatum
	// SapSalesInquiryHeaderDatumHook is the signature for custom SapSalesInquiryHeaderDatum hook methods
	SapSalesInquiryHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapSalesInquiryHeaderDatum) error

	sapSalesInquiryHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesInquiryHeaderDatumType                 = reflect.TypeOf(&SapSalesInquiryHeaderDatum{})
	sapSalesInquiryHeaderDatumMapping              = queries.MakeStructMapping(sapSalesInquiryHeaderDatumType)
	sapSalesInquiryHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, sapSalesInquiryHeaderDatumPrimaryKeyColumns)
	sapSalesInquiryHeaderDatumInsertCacheMut       sync.RWMutex
	sapSalesInquiryHeaderDatumInsertCache          = make(map[string]insertCache)
	sapSalesInquiryHeaderDatumUpdateCacheMut       sync.RWMutex
	sapSalesInquiryHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapSalesInquiryHeaderDatumUpsertCacheMut       sync.RWMutex
	sapSalesInquiryHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesInquiryHeaderDatumAfterSelectHooks []SapSalesInquiryHeaderDatumHook

var sapSalesInquiryHeaderDatumBeforeInsertHooks []SapSalesInquiryHeaderDatumHook
var sapSalesInquiryHeaderDatumAfterInsertHooks []SapSalesInquiryHeaderDatumHook

var sapSalesInquiryHeaderDatumBeforeUpdateHooks []SapSalesInquiryHeaderDatumHook
var sapSalesInquiryHeaderDatumAfterUpdateHooks []SapSalesInquiryHeaderDatumHook

var sapSalesInquiryHeaderDatumBeforeDeleteHooks []SapSalesInquiryHeaderDatumHook
var sapSalesInquiryHeaderDatumAfterDeleteHooks []SapSalesInquiryHeaderDatumHook

var sapSalesInquiryHeaderDatumBeforeUpsertHooks []SapSalesInquiryHeaderDatumHook
var sapSalesInquiryHeaderDatumAfterUpsertHooks []SapSalesInquiryHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesInquiryHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesInquiryHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesInquiryHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesInquiryHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesInquiryHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesInquiryHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesInquiryHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesInquiryHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesInquiryHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesInquiryHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesInquiryHeaderDatumHook registers your hook function for all future operations.
func AddSapSalesInquiryHeaderDatumHook(hookPoint boil.HookPoint, sapSalesInquiryHeaderDatumHook SapSalesInquiryHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesInquiryHeaderDatumAfterSelectHooks = append(sapSalesInquiryHeaderDatumAfterSelectHooks, sapSalesInquiryHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapSalesInquiryHeaderDatumBeforeInsertHooks = append(sapSalesInquiryHeaderDatumBeforeInsertHooks, sapSalesInquiryHeaderDatumHook)
	case boil.AfterInsertHook:
		sapSalesInquiryHeaderDatumAfterInsertHooks = append(sapSalesInquiryHeaderDatumAfterInsertHooks, sapSalesInquiryHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesInquiryHeaderDatumBeforeUpdateHooks = append(sapSalesInquiryHeaderDatumBeforeUpdateHooks, sapSalesInquiryHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapSalesInquiryHeaderDatumAfterUpdateHooks = append(sapSalesInquiryHeaderDatumAfterUpdateHooks, sapSalesInquiryHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesInquiryHeaderDatumBeforeDeleteHooks = append(sapSalesInquiryHeaderDatumBeforeDeleteHooks, sapSalesInquiryHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapSalesInquiryHeaderDatumAfterDeleteHooks = append(sapSalesInquiryHeaderDatumAfterDeleteHooks, sapSalesInquiryHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesInquiryHeaderDatumBeforeUpsertHooks = append(sapSalesInquiryHeaderDatumBeforeUpsertHooks, sapSalesInquiryHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapSalesInquiryHeaderDatumAfterUpsertHooks = append(sapSalesInquiryHeaderDatumAfterUpsertHooks, sapSalesInquiryHeaderDatumHook)
	}
}

// One returns a single sapSalesInquiryHeaderDatum record from the query.
func (q sapSalesInquiryHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesInquiryHeaderDatum, error) {
	o := &SapSalesInquiryHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_inquiry_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesInquiryHeaderDatum records from the query.
func (q sapSalesInquiryHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesInquiryHeaderDatumSlice, error) {
	var o []*SapSalesInquiryHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesInquiryHeaderDatum slice")
	}

	if len(sapSalesInquiryHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesInquiryHeaderDatum records in the query.
func (q sapSalesInquiryHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_inquiry_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesInquiryHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_inquiry_header_data exists")
	}

	return count > 0, nil
}

// SalesInquirySapSalesInquiryHeaderPartnerData retrieves all the sap_sales_inquiry_header_partner_datum's SapSalesInquiryHeaderPartnerData with an executor via SalesInquiry column.
func (o *SapSalesInquiryHeaderDatum) SalesInquirySapSalesInquiryHeaderPartnerData(mods ...qm.QueryMod) sapSalesInquiryHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_inquiry_header_partner_data`.`SalesInquiry`=?", o.SalesInquiry),
	)

	query := SapSalesInquiryHeaderPartnerData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_inquiry_header_partner_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_inquiry_header_partner_data`.*"})
	}

	return query
}

// SalesInquirySapSalesInquiryItemData retrieves all the sap_sales_inquiry_item_datum's SapSalesInquiryItemData with an executor via SalesInquiry column.
func (o *SapSalesInquiryHeaderDatum) SalesInquirySapSalesInquiryItemData(mods ...qm.QueryMod) sapSalesInquiryItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_inquiry_item_data`.`SalesInquiry`=?", o.SalesInquiry),
	)

	query := SapSalesInquiryItemData(queryMods...)
	queries.SetFrom(query.Query, "`sap_sales_inquiry_item_data`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sap_sales_inquiry_item_data`.*"})
	}

	return query
}

// LoadSalesInquirySapSalesInquiryHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesInquiryHeaderDatumL) LoadSalesInquirySapSalesInquiryHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesInquiryHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesInquiryHeaderDatum
	var object *SapSalesInquiryHeaderDatum

	if singular {
		object = maybeSapSalesInquiryHeaderDatum.(*SapSalesInquiryHeaderDatum)
	} else {
		slice = *maybeSapSalesInquiryHeaderDatum.(*[]*SapSalesInquiryHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesInquiryHeaderDatumR{}
		}
		args = append(args, object.SalesInquiry)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesInquiryHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesInquiry {
					continue Outer
				}
			}

			args = append(args, obj.SalesInquiry)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_inquiry_header_partner_data`),
		qm.WhereIn(`sap_sales_inquiry_header_partner_data.SalesInquiry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_inquiry_header_partner_data")
	}

	var resultSlice []*SapSalesInquiryHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_inquiry_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_inquiry_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_inquiry_header_partner_data")
	}

	if len(sapSalesInquiryHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesInquirySapSalesInquiryHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesInquiryHeaderPartnerDatumR{}
			}
			foreign.R.SalesInquirySapSalesInquiryHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesInquiry == foreign.SalesInquiry {
				local.R.SalesInquirySapSalesInquiryHeaderPartnerData = append(local.R.SalesInquirySapSalesInquiryHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesInquiryHeaderPartnerDatumR{}
				}
				foreign.R.SalesInquirySapSalesInquiryHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSalesInquirySapSalesInquiryItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesInquiryHeaderDatumL) LoadSalesInquirySapSalesInquiryItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesInquiryHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesInquiryHeaderDatum
	var object *SapSalesInquiryHeaderDatum

	if singular {
		object = maybeSapSalesInquiryHeaderDatum.(*SapSalesInquiryHeaderDatum)
	} else {
		slice = *maybeSapSalesInquiryHeaderDatum.(*[]*SapSalesInquiryHeaderDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesInquiryHeaderDatumR{}
		}
		args = append(args, object.SalesInquiry)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesInquiryHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesInquiry {
					continue Outer
				}
			}

			args = append(args, obj.SalesInquiry)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_inquiry_item_data`),
		qm.WhereIn(`sap_sales_inquiry_item_data.SalesInquiry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_inquiry_item_data")
	}

	var resultSlice []*SapSalesInquiryItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_inquiry_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_inquiry_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_inquiry_item_data")
	}

	if len(sapSalesInquiryItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesInquirySapSalesInquiryItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesInquiryItemDatumR{}
			}
			foreign.R.SalesInquirySapSalesInquiryHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesInquiry == foreign.SalesInquiry {
				local.R.SalesInquirySapSalesInquiryItemData = append(local.R.SalesInquirySapSalesInquiryItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesInquiryItemDatumR{}
				}
				foreign.R.SalesInquirySapSalesInquiryHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddSalesInquirySapSalesInquiryHeaderPartnerData adds the given related objects to the existing relationships
// of the sap_sales_inquiry_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesInquirySapSalesInquiryHeaderPartnerData.
// Sets related.R.SalesInquirySapSalesInquiryHeaderDatum appropriately.
func (o *SapSalesInquiryHeaderDatum) AddSalesInquirySapSalesInquiryHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesInquiryHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesInquiry = o.SalesInquiry
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_inquiry_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesInquiry"}),
				strmangle.WhereClause("`", "`", 0, sapSalesInquiryHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesInquiry, rel.SalesInquiry, rel.PartnerFunction}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesInquiry = o.SalesInquiry
		}
	}

	if o.R == nil {
		o.R = &sapSalesInquiryHeaderDatumR{
			SalesInquirySapSalesInquiryHeaderPartnerData: related,
		}
	} else {
		o.R.SalesInquirySapSalesInquiryHeaderPartnerData = append(o.R.SalesInquirySapSalesInquiryHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesInquiryHeaderPartnerDatumR{
				SalesInquirySapSalesInquiryHeaderDatum: o,
			}
		} else {
			rel.R.SalesInquirySapSalesInquiryHeaderDatum = o
		}
	}
	return nil
}

// AddSalesInquirySapSalesInquiryItemData adds the given related objects to the existing relationships
// of the sap_sales_inquiry_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesInquirySapSalesInquiryItemData.
// Sets related.R.SalesInquirySapSalesInquiryHeaderDatum appropriately.
func (o *SapSalesInquiryHeaderDatum) AddSalesInquirySapSalesInquiryItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesInquiryItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesInquiry = o.SalesInquiry
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_inquiry_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesInquiry"}),
				strmangle.WhereClause("`", "`", 0, sapSalesInquiryItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesInquiry, rel.SalesInquiry, rel.SalesInquiryItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesInquiry = o.SalesInquiry
		}
	}

	if o.R == nil {
		o.R = &sapSalesInquiryHeaderDatumR{
			SalesInquirySapSalesInquiryItemData: related,
		}
	} else {
		o.R.SalesInquirySapSalesInquiryItemData = append(o.R.SalesInquirySapSalesInquiryItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesInquiryItemDatumR{
				SalesInquirySapSalesInquiryHeaderDatum: o,
			}
		} else {
			rel.R.SalesInquirySapSalesInquiryHeaderDatum = o
		}
	}
	return nil
}

// SapSalesInquiryHeaderData retrieves all the records using an executor.
func SapSalesInquiryHeaderData(mods ...qm.QueryMod) sapSalesInquiryHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_sales_inquiry_header_data`"))
	return sapSalesInquiryHeaderDatumQuery{NewQuery(mods...)}
}

// FindSapSalesInquiryHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesInquiryHeaderDatum(ctx context.Context, exec boil.ContextExecutor, salesInquiry string, selectCols ...string) (*SapSalesInquiryHeaderDatum, error) {
	sapSalesInquiryHeaderDatumObj := &SapSalesInquiryHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_inquiry_header_data` where `SalesInquiry`=?", sel,
	)

	q := queries.Raw(query, salesInquiry)

	err := q.Bind(ctx, exec, sapSalesInquiryHeaderDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_inquiry_header_data")
	}

	if err = sapSalesInquiryHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesInquiryHeaderDatumObj, err
	}

	return sapSalesInquiryHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesInquiryHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_inquiry_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesInquiryHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesInquiryHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapSalesInquiryHeaderDatumInsertCache[key]
	sapSalesInquiryHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesInquiryHeaderDatumAllColumns,
			sapSalesInquiryHeaderDatumColumnsWithDefault,
			sapSalesInquiryHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_inquiry_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_inquiry_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_inquiry_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesInquiryHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_inquiry_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesInquiry,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_inquiry_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesInquiryHeaderDatumInsertCacheMut.Lock()
		sapSalesInquiryHeaderDatumInsertCache[key] = cache
		sapSalesInquiryHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesInquiryHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesInquiryHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesInquiryHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesInquiryHeaderDatumUpdateCache[key]
	sapSalesInquiryHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesInquiryHeaderDatumAllColumns,
			sapSalesInquiryHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_inquiry_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_inquiry_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesInquiryHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, append(wl, sapSalesInquiryHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_inquiry_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_inquiry_header_data")
	}

	if !cached {
		sapSalesInquiryHeaderDatumUpdateCacheMut.Lock()
		sapSalesInquiryHeaderDatumUpdateCache[key] = cache
		sapSalesInquiryHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesInquiryHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_inquiry_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_inquiry_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesInquiryHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesInquiryHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_inquiry_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesInquiryHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesInquiryHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesInquiryHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesInquiryHeaderDatumUniqueColumns = []string{
	"SalesInquiry",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesInquiryHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_inquiry_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesInquiryHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesInquiryHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesInquiryHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesInquiryHeaderDatumUpsertCache[key]
	sapSalesInquiryHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesInquiryHeaderDatumAllColumns,
			sapSalesInquiryHeaderDatumColumnsWithDefault,
			sapSalesInquiryHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesInquiryHeaderDatumAllColumns,
			sapSalesInquiryHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_inquiry_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_inquiry_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_inquiry_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_inquiry_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesInquiryHeaderDatumType, sapSalesInquiryHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_inquiry_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_inquiry_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesInquiryHeaderDatumUpsertCacheMut.Lock()
		sapSalesInquiryHeaderDatumUpsertCache[key] = cache
		sapSalesInquiryHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesInquiryHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesInquiryHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesInquiryHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesInquiryHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_inquiry_header_data` WHERE `SalesInquiry`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_inquiry_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_inquiry_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesInquiryHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesInquiryHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_inquiry_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_inquiry_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesInquiryHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesInquiryHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesInquiryHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_inquiry_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesInquiryHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesInquiryHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_inquiry_header_data")
	}

	if len(sapSalesInquiryHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesInquiryHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesInquiryHeaderDatum(ctx, exec, o.SalesInquiry)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesInquiryHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesInquiryHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesInquiryHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_inquiry_header_data`.* FROM `sap_sales_inquiry_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesInquiryHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesInquiryHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesInquiryHeaderDatumExists checks if the SapSalesInquiryHeaderDatum row exists.
func SapSalesInquiryHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, salesInquiry string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_inquiry_header_data` where `SalesInquiry`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesInquiry)
	}
	row := exec.QueryRowContext(ctx, sql, salesInquiry)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_inquiry_header_data exists")
	}

	return exists, nil
}
