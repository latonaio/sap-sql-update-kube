// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapBusinessPartnerGeneralDatum is an object representing the database table.
type SapBusinessPartnerGeneralDatum struct {
	BusinessPartner               string      `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Customer                      null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	Supplier                      null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	AcademicTitle                 null.String `boil:"AcademicTitle" json:"AcademicTitle,omitempty" toml:"AcademicTitle" yaml:"AcademicTitle,omitempty"`
	AuthorizationGroup            null.String `boil:"AuthorizationGroup" json:"AuthorizationGroup,omitempty" toml:"AuthorizationGroup" yaml:"AuthorizationGroup,omitempty"`
	BusinessPartnerCategory       null.String `boil:"BusinessPartnerCategory" json:"BusinessPartnerCategory,omitempty" toml:"BusinessPartnerCategory" yaml:"BusinessPartnerCategory,omitempty"`
	BusinessPartnerFullName       null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerGrouping       null.String `boil:"BusinessPartnerGrouping" json:"BusinessPartnerGrouping,omitempty" toml:"BusinessPartnerGrouping" yaml:"BusinessPartnerGrouping,omitempty"`
	BusinessPartnerName           null.String `boil:"BusinessPartnerName" json:"BusinessPartnerName,omitempty" toml:"BusinessPartnerName" yaml:"BusinessPartnerName,omitempty"`
	CorrespondenceLanguage        null.String `boil:"CorrespondenceLanguage" json:"CorrespondenceLanguage,omitempty" toml:"CorrespondenceLanguage" yaml:"CorrespondenceLanguage,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                  null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	FirstName                     null.String `boil:"FirstName" json:"FirstName,omitempty" toml:"FirstName" yaml:"FirstName,omitempty"`
	Industry                      null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	IsFemale                      null.Bool   `boil:"IsFemale" json:"IsFemale,omitempty" toml:"IsFemale" yaml:"IsFemale,omitempty"`
	IsMale                        null.Bool   `boil:"IsMale" json:"IsMale,omitempty" toml:"IsMale" yaml:"IsMale,omitempty"`
	IsNaturalPerson               null.String `boil:"IsNaturalPerson" json:"IsNaturalPerson,omitempty" toml:"IsNaturalPerson" yaml:"IsNaturalPerson,omitempty"`
	IsSexUnknown                  null.Bool   `boil:"IsSexUnknown" json:"IsSexUnknown,omitempty" toml:"IsSexUnknown" yaml:"IsSexUnknown,omitempty"`
	GenderCodeName                null.String `boil:"GenderCodeName" json:"GenderCodeName,omitempty" toml:"GenderCodeName" yaml:"GenderCodeName,omitempty"`
	Language                      null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	LastName                      null.String `boil:"LastName" json:"LastName,omitempty" toml:"LastName" yaml:"LastName,omitempty"`
	OrganizationBPName1           null.String `boil:"OrganizationBPName1" json:"OrganizationBPName1,omitempty" toml:"OrganizationBPName1" yaml:"OrganizationBPName1,omitempty"`
	OrganizationBPName2           null.String `boil:"OrganizationBPName2" json:"OrganizationBPName2,omitempty" toml:"OrganizationBPName2" yaml:"OrganizationBPName2,omitempty"`
	OrganizationBPName3           null.String `boil:"OrganizationBPName3" json:"OrganizationBPName3,omitempty" toml:"OrganizationBPName3" yaml:"OrganizationBPName3,omitempty"`
	OrganizationBPName4           null.String `boil:"OrganizationBPName4" json:"OrganizationBPName4,omitempty" toml:"OrganizationBPName4" yaml:"OrganizationBPName4,omitempty"`
	OrganizationFoundationDate    null.String `boil:"OrganizationFoundationDate" json:"OrganizationFoundationDate,omitempty" toml:"OrganizationFoundationDate" yaml:"OrganizationFoundationDate,omitempty"`
	OrganizationLiquidationDate   null.String `boil:"OrganizationLiquidationDate" json:"OrganizationLiquidationDate,omitempty" toml:"OrganizationLiquidationDate" yaml:"OrganizationLiquidationDate,omitempty"`
	SearchTerm1                   null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2                   null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	AdditionalLastName            null.String `boil:"AdditionalLastName" json:"AdditionalLastName,omitempty" toml:"AdditionalLastName" yaml:"AdditionalLastName,omitempty"`
	BirthDate                     null.String `boil:"BirthDate" json:"BirthDate,omitempty" toml:"BirthDate" yaml:"BirthDate,omitempty"`
	BusinessPartnerBirthplaceName null.String `boil:"BusinessPartnerBirthplaceName" json:"BusinessPartnerBirthplaceName,omitempty" toml:"BusinessPartnerBirthplaceName" yaml:"BusinessPartnerBirthplaceName,omitempty"`
	BusinessPartnerDeathDate      null.String `boil:"BusinessPartnerDeathDate" json:"BusinessPartnerDeathDate,omitempty" toml:"BusinessPartnerDeathDate" yaml:"BusinessPartnerDeathDate,omitempty"`
	BusinessPartnerIsBlocked      null.Bool   `boil:"BusinessPartnerIsBlocked" json:"BusinessPartnerIsBlocked,omitempty" toml:"BusinessPartnerIsBlocked" yaml:"BusinessPartnerIsBlocked,omitempty"`
	BusinessPartnerType           null.String `boil:"BusinessPartnerType" json:"BusinessPartnerType,omitempty" toml:"BusinessPartnerType" yaml:"BusinessPartnerType,omitempty"`
	GroupBusinessPartnerName1     null.String `boil:"GroupBusinessPartnerName1" json:"GroupBusinessPartnerName1,omitempty" toml:"GroupBusinessPartnerName1" yaml:"GroupBusinessPartnerName1,omitempty"`
	GroupBusinessPartnerName2     null.String `boil:"GroupBusinessPartnerName2" json:"GroupBusinessPartnerName2,omitempty" toml:"GroupBusinessPartnerName2" yaml:"GroupBusinessPartnerName2,omitempty"`
	IndependentAddressID          null.String `boil:"IndependentAddressID" json:"IndependentAddressID,omitempty" toml:"IndependentAddressID" yaml:"IndependentAddressID,omitempty"`
	MiddleName                    null.String `boil:"MiddleName" json:"MiddleName,omitempty" toml:"MiddleName" yaml:"MiddleName,omitempty"`
	NameCountry                   null.String `boil:"NameCountry" json:"NameCountry,omitempty" toml:"NameCountry" yaml:"NameCountry,omitempty"`
	PersonFullName                null.String `boil:"PersonFullName" json:"PersonFullName,omitempty" toml:"PersonFullName" yaml:"PersonFullName,omitempty"`
	PersonNumber                  null.String `boil:"PersonNumber" json:"PersonNumber,omitempty" toml:"PersonNumber" yaml:"PersonNumber,omitempty"`
	IsMarkedForArchiving          null.Bool   `boil:"IsMarkedForArchiving" json:"IsMarkedForArchiving,omitempty" toml:"IsMarkedForArchiving" yaml:"IsMarkedForArchiving,omitempty"`
	BusinessPartnerIDByExtSystem  null.String `boil:"BusinessPartnerIDByExtSystem" json:"BusinessPartnerIDByExtSystem,omitempty" toml:"BusinessPartnerIDByExtSystem" yaml:"BusinessPartnerIDByExtSystem,omitempty"`
	TradingPartner                null.String `boil:"TradingPartner" json:"TradingPartner,omitempty" toml:"TradingPartner" yaml:"TradingPartner,omitempty"`

	R *sapBusinessPartnerGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapBusinessPartnerGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapBusinessPartnerGeneralDatumColumns = struct {
	BusinessPartner               string
	Customer                      string
	Supplier                      string
	AcademicTitle                 string
	AuthorizationGroup            string
	BusinessPartnerCategory       string
	BusinessPartnerFullName       string
	BusinessPartnerGrouping       string
	BusinessPartnerName           string
	CorrespondenceLanguage        string
	CreationDate                  string
	CreationTime                  string
	FirstName                     string
	Industry                      string
	IsFemale                      string
	IsMale                        string
	IsNaturalPerson               string
	IsSexUnknown                  string
	GenderCodeName                string
	Language                      string
	LastChangeDate                string
	LastChangeTime                string
	LastName                      string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	SearchTerm1                   string
	SearchTerm2                   string
	AdditionalLastName            string
	BirthDate                     string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	BusinessPartnerType           string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	IndependentAddressID          string
	MiddleName                    string
	NameCountry                   string
	PersonFullName                string
	PersonNumber                  string
	IsMarkedForArchiving          string
	BusinessPartnerIDByExtSystem  string
	TradingPartner                string
}{
	BusinessPartner:               "BusinessPartner",
	Customer:                      "Customer",
	Supplier:                      "Supplier",
	AcademicTitle:                 "AcademicTitle",
	AuthorizationGroup:            "AuthorizationGroup",
	BusinessPartnerCategory:       "BusinessPartnerCategory",
	BusinessPartnerFullName:       "BusinessPartnerFullName",
	BusinessPartnerGrouping:       "BusinessPartnerGrouping",
	BusinessPartnerName:           "BusinessPartnerName",
	CorrespondenceLanguage:        "CorrespondenceLanguage",
	CreationDate:                  "CreationDate",
	CreationTime:                  "CreationTime",
	FirstName:                     "FirstName",
	Industry:                      "Industry",
	IsFemale:                      "IsFemale",
	IsMale:                        "IsMale",
	IsNaturalPerson:               "IsNaturalPerson",
	IsSexUnknown:                  "IsSexUnknown",
	GenderCodeName:                "GenderCodeName",
	Language:                      "Language",
	LastChangeDate:                "LastChangeDate",
	LastChangeTime:                "LastChangeTime",
	LastName:                      "LastName",
	OrganizationBPName1:           "OrganizationBPName1",
	OrganizationBPName2:           "OrganizationBPName2",
	OrganizationBPName3:           "OrganizationBPName3",
	OrganizationBPName4:           "OrganizationBPName4",
	OrganizationFoundationDate:    "OrganizationFoundationDate",
	OrganizationLiquidationDate:   "OrganizationLiquidationDate",
	SearchTerm1:                   "SearchTerm1",
	SearchTerm2:                   "SearchTerm2",
	AdditionalLastName:            "AdditionalLastName",
	BirthDate:                     "BirthDate",
	BusinessPartnerBirthplaceName: "BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "BusinessPartnerIsBlocked",
	BusinessPartnerType:           "BusinessPartnerType",
	GroupBusinessPartnerName1:     "GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "GroupBusinessPartnerName2",
	IndependentAddressID:          "IndependentAddressID",
	MiddleName:                    "MiddleName",
	NameCountry:                   "NameCountry",
	PersonFullName:                "PersonFullName",
	PersonNumber:                  "PersonNumber",
	IsMarkedForArchiving:          "IsMarkedForArchiving",
	BusinessPartnerIDByExtSystem:  "BusinessPartnerIDByExtSystem",
	TradingPartner:                "TradingPartner",
}

var SapBusinessPartnerGeneralDatumTableColumns = struct {
	BusinessPartner               string
	Customer                      string
	Supplier                      string
	AcademicTitle                 string
	AuthorizationGroup            string
	BusinessPartnerCategory       string
	BusinessPartnerFullName       string
	BusinessPartnerGrouping       string
	BusinessPartnerName           string
	CorrespondenceLanguage        string
	CreationDate                  string
	CreationTime                  string
	FirstName                     string
	Industry                      string
	IsFemale                      string
	IsMale                        string
	IsNaturalPerson               string
	IsSexUnknown                  string
	GenderCodeName                string
	Language                      string
	LastChangeDate                string
	LastChangeTime                string
	LastName                      string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	SearchTerm1                   string
	SearchTerm2                   string
	AdditionalLastName            string
	BirthDate                     string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	BusinessPartnerType           string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	IndependentAddressID          string
	MiddleName                    string
	NameCountry                   string
	PersonFullName                string
	PersonNumber                  string
	IsMarkedForArchiving          string
	BusinessPartnerIDByExtSystem  string
	TradingPartner                string
}{
	BusinessPartner:               "sap_business_partner_general_data.BusinessPartner",
	Customer:                      "sap_business_partner_general_data.Customer",
	Supplier:                      "sap_business_partner_general_data.Supplier",
	AcademicTitle:                 "sap_business_partner_general_data.AcademicTitle",
	AuthorizationGroup:            "sap_business_partner_general_data.AuthorizationGroup",
	BusinessPartnerCategory:       "sap_business_partner_general_data.BusinessPartnerCategory",
	BusinessPartnerFullName:       "sap_business_partner_general_data.BusinessPartnerFullName",
	BusinessPartnerGrouping:       "sap_business_partner_general_data.BusinessPartnerGrouping",
	BusinessPartnerName:           "sap_business_partner_general_data.BusinessPartnerName",
	CorrespondenceLanguage:        "sap_business_partner_general_data.CorrespondenceLanguage",
	CreationDate:                  "sap_business_partner_general_data.CreationDate",
	CreationTime:                  "sap_business_partner_general_data.CreationTime",
	FirstName:                     "sap_business_partner_general_data.FirstName",
	Industry:                      "sap_business_partner_general_data.Industry",
	IsFemale:                      "sap_business_partner_general_data.IsFemale",
	IsMale:                        "sap_business_partner_general_data.IsMale",
	IsNaturalPerson:               "sap_business_partner_general_data.IsNaturalPerson",
	IsSexUnknown:                  "sap_business_partner_general_data.IsSexUnknown",
	GenderCodeName:                "sap_business_partner_general_data.GenderCodeName",
	Language:                      "sap_business_partner_general_data.Language",
	LastChangeDate:                "sap_business_partner_general_data.LastChangeDate",
	LastChangeTime:                "sap_business_partner_general_data.LastChangeTime",
	LastName:                      "sap_business_partner_general_data.LastName",
	OrganizationBPName1:           "sap_business_partner_general_data.OrganizationBPName1",
	OrganizationBPName2:           "sap_business_partner_general_data.OrganizationBPName2",
	OrganizationBPName3:           "sap_business_partner_general_data.OrganizationBPName3",
	OrganizationBPName4:           "sap_business_partner_general_data.OrganizationBPName4",
	OrganizationFoundationDate:    "sap_business_partner_general_data.OrganizationFoundationDate",
	OrganizationLiquidationDate:   "sap_business_partner_general_data.OrganizationLiquidationDate",
	SearchTerm1:                   "sap_business_partner_general_data.SearchTerm1",
	SearchTerm2:                   "sap_business_partner_general_data.SearchTerm2",
	AdditionalLastName:            "sap_business_partner_general_data.AdditionalLastName",
	BirthDate:                     "sap_business_partner_general_data.BirthDate",
	BusinessPartnerBirthplaceName: "sap_business_partner_general_data.BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "sap_business_partner_general_data.BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "sap_business_partner_general_data.BusinessPartnerIsBlocked",
	BusinessPartnerType:           "sap_business_partner_general_data.BusinessPartnerType",
	GroupBusinessPartnerName1:     "sap_business_partner_general_data.GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "sap_business_partner_general_data.GroupBusinessPartnerName2",
	IndependentAddressID:          "sap_business_partner_general_data.IndependentAddressID",
	MiddleName:                    "sap_business_partner_general_data.MiddleName",
	NameCountry:                   "sap_business_partner_general_data.NameCountry",
	PersonFullName:                "sap_business_partner_general_data.PersonFullName",
	PersonNumber:                  "sap_business_partner_general_data.PersonNumber",
	IsMarkedForArchiving:          "sap_business_partner_general_data.IsMarkedForArchiving",
	BusinessPartnerIDByExtSystem:  "sap_business_partner_general_data.BusinessPartnerIDByExtSystem",
	TradingPartner:                "sap_business_partner_general_data.TradingPartner",
}

// Generated where

var SapBusinessPartnerGeneralDatumWhere = struct {
	BusinessPartner               whereHelperstring
	Customer                      whereHelpernull_String
	Supplier                      whereHelpernull_String
	AcademicTitle                 whereHelpernull_String
	AuthorizationGroup            whereHelpernull_String
	BusinessPartnerCategory       whereHelpernull_String
	BusinessPartnerFullName       whereHelpernull_String
	BusinessPartnerGrouping       whereHelpernull_String
	BusinessPartnerName           whereHelpernull_String
	CorrespondenceLanguage        whereHelpernull_String
	CreationDate                  whereHelpernull_String
	CreationTime                  whereHelpernull_String
	FirstName                     whereHelpernull_String
	Industry                      whereHelpernull_String
	IsFemale                      whereHelpernull_Bool
	IsMale                        whereHelpernull_Bool
	IsNaturalPerson               whereHelpernull_String
	IsSexUnknown                  whereHelpernull_Bool
	GenderCodeName                whereHelpernull_String
	Language                      whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	LastChangeTime                whereHelpernull_String
	LastName                      whereHelpernull_String
	OrganizationBPName1           whereHelpernull_String
	OrganizationBPName2           whereHelpernull_String
	OrganizationBPName3           whereHelpernull_String
	OrganizationBPName4           whereHelpernull_String
	OrganizationFoundationDate    whereHelpernull_String
	OrganizationLiquidationDate   whereHelpernull_String
	SearchTerm1                   whereHelpernull_String
	SearchTerm2                   whereHelpernull_String
	AdditionalLastName            whereHelpernull_String
	BirthDate                     whereHelpernull_String
	BusinessPartnerBirthplaceName whereHelpernull_String
	BusinessPartnerDeathDate      whereHelpernull_String
	BusinessPartnerIsBlocked      whereHelpernull_Bool
	BusinessPartnerType           whereHelpernull_String
	GroupBusinessPartnerName1     whereHelpernull_String
	GroupBusinessPartnerName2     whereHelpernull_String
	IndependentAddressID          whereHelpernull_String
	MiddleName                    whereHelpernull_String
	NameCountry                   whereHelpernull_String
	PersonFullName                whereHelpernull_String
	PersonNumber                  whereHelpernull_String
	IsMarkedForArchiving          whereHelpernull_Bool
	BusinessPartnerIDByExtSystem  whereHelpernull_String
	TradingPartner                whereHelpernull_String
}{
	BusinessPartner:               whereHelperstring{field: "`sap_business_partner_general_data`.`BusinessPartner`"},
	Customer:                      whereHelpernull_String{field: "`sap_business_partner_general_data`.`Customer`"},
	Supplier:                      whereHelpernull_String{field: "`sap_business_partner_general_data`.`Supplier`"},
	AcademicTitle:                 whereHelpernull_String{field: "`sap_business_partner_general_data`.`AcademicTitle`"},
	AuthorizationGroup:            whereHelpernull_String{field: "`sap_business_partner_general_data`.`AuthorizationGroup`"},
	BusinessPartnerCategory:       whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerCategory`"},
	BusinessPartnerFullName:       whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerFullName`"},
	BusinessPartnerGrouping:       whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerGrouping`"},
	BusinessPartnerName:           whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerName`"},
	CorrespondenceLanguage:        whereHelpernull_String{field: "`sap_business_partner_general_data`.`CorrespondenceLanguage`"},
	CreationDate:                  whereHelpernull_String{field: "`sap_business_partner_general_data`.`CreationDate`"},
	CreationTime:                  whereHelpernull_String{field: "`sap_business_partner_general_data`.`CreationTime`"},
	FirstName:                     whereHelpernull_String{field: "`sap_business_partner_general_data`.`FirstName`"},
	Industry:                      whereHelpernull_String{field: "`sap_business_partner_general_data`.`Industry`"},
	IsFemale:                      whereHelpernull_Bool{field: "`sap_business_partner_general_data`.`IsFemale`"},
	IsMale:                        whereHelpernull_Bool{field: "`sap_business_partner_general_data`.`IsMale`"},
	IsNaturalPerson:               whereHelpernull_String{field: "`sap_business_partner_general_data`.`IsNaturalPerson`"},
	IsSexUnknown:                  whereHelpernull_Bool{field: "`sap_business_partner_general_data`.`IsSexUnknown`"},
	GenderCodeName:                whereHelpernull_String{field: "`sap_business_partner_general_data`.`GenderCodeName`"},
	Language:                      whereHelpernull_String{field: "`sap_business_partner_general_data`.`Language`"},
	LastChangeDate:                whereHelpernull_String{field: "`sap_business_partner_general_data`.`LastChangeDate`"},
	LastChangeTime:                whereHelpernull_String{field: "`sap_business_partner_general_data`.`LastChangeTime`"},
	LastName:                      whereHelpernull_String{field: "`sap_business_partner_general_data`.`LastName`"},
	OrganizationBPName1:           whereHelpernull_String{field: "`sap_business_partner_general_data`.`OrganizationBPName1`"},
	OrganizationBPName2:           whereHelpernull_String{field: "`sap_business_partner_general_data`.`OrganizationBPName2`"},
	OrganizationBPName3:           whereHelpernull_String{field: "`sap_business_partner_general_data`.`OrganizationBPName3`"},
	OrganizationBPName4:           whereHelpernull_String{field: "`sap_business_partner_general_data`.`OrganizationBPName4`"},
	OrganizationFoundationDate:    whereHelpernull_String{field: "`sap_business_partner_general_data`.`OrganizationFoundationDate`"},
	OrganizationLiquidationDate:   whereHelpernull_String{field: "`sap_business_partner_general_data`.`OrganizationLiquidationDate`"},
	SearchTerm1:                   whereHelpernull_String{field: "`sap_business_partner_general_data`.`SearchTerm1`"},
	SearchTerm2:                   whereHelpernull_String{field: "`sap_business_partner_general_data`.`SearchTerm2`"},
	AdditionalLastName:            whereHelpernull_String{field: "`sap_business_partner_general_data`.`AdditionalLastName`"},
	BirthDate:                     whereHelpernull_String{field: "`sap_business_partner_general_data`.`BirthDate`"},
	BusinessPartnerBirthplaceName: whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerBirthplaceName`"},
	BusinessPartnerDeathDate:      whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerDeathDate`"},
	BusinessPartnerIsBlocked:      whereHelpernull_Bool{field: "`sap_business_partner_general_data`.`BusinessPartnerIsBlocked`"},
	BusinessPartnerType:           whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerType`"},
	GroupBusinessPartnerName1:     whereHelpernull_String{field: "`sap_business_partner_general_data`.`GroupBusinessPartnerName1`"},
	GroupBusinessPartnerName2:     whereHelpernull_String{field: "`sap_business_partner_general_data`.`GroupBusinessPartnerName2`"},
	IndependentAddressID:          whereHelpernull_String{field: "`sap_business_partner_general_data`.`IndependentAddressID`"},
	MiddleName:                    whereHelpernull_String{field: "`sap_business_partner_general_data`.`MiddleName`"},
	NameCountry:                   whereHelpernull_String{field: "`sap_business_partner_general_data`.`NameCountry`"},
	PersonFullName:                whereHelpernull_String{field: "`sap_business_partner_general_data`.`PersonFullName`"},
	PersonNumber:                  whereHelpernull_String{field: "`sap_business_partner_general_data`.`PersonNumber`"},
	IsMarkedForArchiving:          whereHelpernull_Bool{field: "`sap_business_partner_general_data`.`IsMarkedForArchiving`"},
	BusinessPartnerIDByExtSystem:  whereHelpernull_String{field: "`sap_business_partner_general_data`.`BusinessPartnerIDByExtSystem`"},
	TradingPartner:                whereHelpernull_String{field: "`sap_business_partner_general_data`.`TradingPartner`"},
}

// SapBusinessPartnerGeneralDatumRels is where relationship names are stored.
var SapBusinessPartnerGeneralDatumRels = struct {
	CustomerSapBusinessPartnerCustomerDatum                      string
	SupplierSapBusinessPartnerSupplierDatum                      string
	BusinessPartnerSapBusinessPartnerAddressData                 string
	BusinessPartnerSapBusinessPartnerBankData                    string
	CustomerSapBusinessPartnerCustomerCompanyData                string
	CustomerSapBusinessPartnerCustomerPartnerFunctionData        string
	CustomerSapBusinessPartnerCustomerSalesAreaData              string
	BusinessPartnerSapBusinessPartnerRoleData                    string
	SupplierSapBusinessPartnerSupplierCompanyData                string
	SupplierSapBusinessPartnerSupplierPartnerFunctionData        string
	SupplierSapBusinessPartnerSupplierPurchasingOrganizationData string
}{
	CustomerSapBusinessPartnerCustomerDatum:                      "CustomerSapBusinessPartnerCustomerDatum",
	SupplierSapBusinessPartnerSupplierDatum:                      "SupplierSapBusinessPartnerSupplierDatum",
	BusinessPartnerSapBusinessPartnerAddressData:                 "BusinessPartnerSapBusinessPartnerAddressData",
	BusinessPartnerSapBusinessPartnerBankData:                    "BusinessPartnerSapBusinessPartnerBankData",
	CustomerSapBusinessPartnerCustomerCompanyData:                "CustomerSapBusinessPartnerCustomerCompanyData",
	CustomerSapBusinessPartnerCustomerPartnerFunctionData:        "CustomerSapBusinessPartnerCustomerPartnerFunctionData",
	CustomerSapBusinessPartnerCustomerSalesAreaData:              "CustomerSapBusinessPartnerCustomerSalesAreaData",
	BusinessPartnerSapBusinessPartnerRoleData:                    "BusinessPartnerSapBusinessPartnerRoleData",
	SupplierSapBusinessPartnerSupplierCompanyData:                "SupplierSapBusinessPartnerSupplierCompanyData",
	SupplierSapBusinessPartnerSupplierPartnerFunctionData:        "SupplierSapBusinessPartnerSupplierPartnerFunctionData",
	SupplierSapBusinessPartnerSupplierPurchasingOrganizationData: "SupplierSapBusinessPartnerSupplierPurchasingOrganizationData",
}

// sapBusinessPartnerGeneralDatumR is where relationships are stored.
type sapBusinessPartnerGeneralDatumR struct {
	CustomerSapBusinessPartnerCustomerDatum                      *SapBusinessPartnerCustomerDatum                           `boil:"CustomerSapBusinessPartnerCustomerDatum" json:"CustomerSapBusinessPartnerCustomerDatum" toml:"CustomerSapBusinessPartnerCustomerDatum" yaml:"CustomerSapBusinessPartnerCustomerDatum"`
	SupplierSapBusinessPartnerSupplierDatum                      *SapBusinessPartnerSupplierDatum                           `boil:"SupplierSapBusinessPartnerSupplierDatum" json:"SupplierSapBusinessPartnerSupplierDatum" toml:"SupplierSapBusinessPartnerSupplierDatum" yaml:"SupplierSapBusinessPartnerSupplierDatum"`
	BusinessPartnerSapBusinessPartnerAddressData                 SapBusinessPartnerAddressDatumSlice                        `boil:"BusinessPartnerSapBusinessPartnerAddressData" json:"BusinessPartnerSapBusinessPartnerAddressData" toml:"BusinessPartnerSapBusinessPartnerAddressData" yaml:"BusinessPartnerSapBusinessPartnerAddressData"`
	BusinessPartnerSapBusinessPartnerBankData                    SapBusinessPartnerBankDatumSlice                           `boil:"BusinessPartnerSapBusinessPartnerBankData" json:"BusinessPartnerSapBusinessPartnerBankData" toml:"BusinessPartnerSapBusinessPartnerBankData" yaml:"BusinessPartnerSapBusinessPartnerBankData"`
	CustomerSapBusinessPartnerCustomerCompanyData                SapBusinessPartnerCustomerCompanyDatumSlice                `boil:"CustomerSapBusinessPartnerCustomerCompanyData" json:"CustomerSapBusinessPartnerCustomerCompanyData" toml:"CustomerSapBusinessPartnerCustomerCompanyData" yaml:"CustomerSapBusinessPartnerCustomerCompanyData"`
	CustomerSapBusinessPartnerCustomerPartnerFunctionData        SapBusinessPartnerCustomerPartnerFunctionDatumSlice        `boil:"CustomerSapBusinessPartnerCustomerPartnerFunctionData" json:"CustomerSapBusinessPartnerCustomerPartnerFunctionData" toml:"CustomerSapBusinessPartnerCustomerPartnerFunctionData" yaml:"CustomerSapBusinessPartnerCustomerPartnerFunctionData"`
	CustomerSapBusinessPartnerCustomerSalesAreaData              SapBusinessPartnerCustomerSalesAreaDatumSlice              `boil:"CustomerSapBusinessPartnerCustomerSalesAreaData" json:"CustomerSapBusinessPartnerCustomerSalesAreaData" toml:"CustomerSapBusinessPartnerCustomerSalesAreaData" yaml:"CustomerSapBusinessPartnerCustomerSalesAreaData"`
	BusinessPartnerSapBusinessPartnerRoleData                    SapBusinessPartnerRoleDatumSlice                           `boil:"BusinessPartnerSapBusinessPartnerRoleData" json:"BusinessPartnerSapBusinessPartnerRoleData" toml:"BusinessPartnerSapBusinessPartnerRoleData" yaml:"BusinessPartnerSapBusinessPartnerRoleData"`
	SupplierSapBusinessPartnerSupplierCompanyData                SapBusinessPartnerSupplierCompanyDatumSlice                `boil:"SupplierSapBusinessPartnerSupplierCompanyData" json:"SupplierSapBusinessPartnerSupplierCompanyData" toml:"SupplierSapBusinessPartnerSupplierCompanyData" yaml:"SupplierSapBusinessPartnerSupplierCompanyData"`
	SupplierSapBusinessPartnerSupplierPartnerFunctionData        SapBusinessPartnerSupplierPartnerFunctionDatumSlice        `boil:"SupplierSapBusinessPartnerSupplierPartnerFunctionData" json:"SupplierSapBusinessPartnerSupplierPartnerFunctionData" toml:"SupplierSapBusinessPartnerSupplierPartnerFunctionData" yaml:"SupplierSapBusinessPartnerSupplierPartnerFunctionData"`
	SupplierSapBusinessPartnerSupplierPurchasingOrganizationData SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice `boil:"SupplierSapBusinessPartnerSupplierPurchasingOrganizationData" json:"SupplierSapBusinessPartnerSupplierPurchasingOrganizationData" toml:"SupplierSapBusinessPartnerSupplierPurchasingOrganizationData" yaml:"SupplierSapBusinessPartnerSupplierPurchasingOrganizationData"`
}

// NewStruct creates a new relationship struct
func (*sapBusinessPartnerGeneralDatumR) NewStruct() *sapBusinessPartnerGeneralDatumR {
	return &sapBusinessPartnerGeneralDatumR{}
}

func (r *sapBusinessPartnerGeneralDatumR) GetCustomerSapBusinessPartnerCustomerDatum() *SapBusinessPartnerCustomerDatum {
	if r == nil {
		return nil
	}
	return r.CustomerSapBusinessPartnerCustomerDatum
}

func (r *sapBusinessPartnerGeneralDatumR) GetSupplierSapBusinessPartnerSupplierDatum() *SapBusinessPartnerSupplierDatum {
	if r == nil {
		return nil
	}
	return r.SupplierSapBusinessPartnerSupplierDatum
}

func (r *sapBusinessPartnerGeneralDatumR) GetBusinessPartnerSapBusinessPartnerAddressData() SapBusinessPartnerAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerSapBusinessPartnerAddressData
}

func (r *sapBusinessPartnerGeneralDatumR) GetBusinessPartnerSapBusinessPartnerBankData() SapBusinessPartnerBankDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerSapBusinessPartnerBankData
}

func (r *sapBusinessPartnerGeneralDatumR) GetCustomerSapBusinessPartnerCustomerCompanyData() SapBusinessPartnerCustomerCompanyDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerSapBusinessPartnerCustomerCompanyData
}

func (r *sapBusinessPartnerGeneralDatumR) GetCustomerSapBusinessPartnerCustomerPartnerFunctionData() SapBusinessPartnerCustomerPartnerFunctionDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerSapBusinessPartnerCustomerPartnerFunctionData
}

func (r *sapBusinessPartnerGeneralDatumR) GetCustomerSapBusinessPartnerCustomerSalesAreaData() SapBusinessPartnerCustomerSalesAreaDatumSlice {
	if r == nil {
		return nil
	}
	return r.CustomerSapBusinessPartnerCustomerSalesAreaData
}

func (r *sapBusinessPartnerGeneralDatumR) GetBusinessPartnerSapBusinessPartnerRoleData() SapBusinessPartnerRoleDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerSapBusinessPartnerRoleData
}

func (r *sapBusinessPartnerGeneralDatumR) GetSupplierSapBusinessPartnerSupplierCompanyData() SapBusinessPartnerSupplierCompanyDatumSlice {
	if r == nil {
		return nil
	}
	return r.SupplierSapBusinessPartnerSupplierCompanyData
}

func (r *sapBusinessPartnerGeneralDatumR) GetSupplierSapBusinessPartnerSupplierPartnerFunctionData() SapBusinessPartnerSupplierPartnerFunctionDatumSlice {
	if r == nil {
		return nil
	}
	return r.SupplierSapBusinessPartnerSupplierPartnerFunctionData
}

func (r *sapBusinessPartnerGeneralDatumR) GetSupplierSapBusinessPartnerSupplierPurchasingOrganizationData() SapBusinessPartnerSupplierPurchasingOrganizationDatumSlice {
	if r == nil {
		return nil
	}
	return r.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData
}

// sapBusinessPartnerGeneralDatumL is where Load methods for each relationship are stored.
type sapBusinessPartnerGeneralDatumL struct{}

var (
	sapBusinessPartnerGeneralDatumAllColumns            = []string{"BusinessPartner", "Customer", "Supplier", "AcademicTitle", "AuthorizationGroup", "BusinessPartnerCategory", "BusinessPartnerFullName", "BusinessPartnerGrouping", "BusinessPartnerName", "CorrespondenceLanguage", "CreationDate", "CreationTime", "FirstName", "Industry", "IsFemale", "IsMale", "IsNaturalPerson", "IsSexUnknown", "GenderCodeName", "Language", "LastChangeDate", "LastChangeTime", "LastName", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "SearchTerm1", "SearchTerm2", "AdditionalLastName", "BirthDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "BusinessPartnerType", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "IndependentAddressID", "MiddleName", "NameCountry", "PersonFullName", "PersonNumber", "IsMarkedForArchiving", "BusinessPartnerIDByExtSystem", "TradingPartner"}
	sapBusinessPartnerGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "Customer", "Supplier", "AcademicTitle", "AuthorizationGroup", "BusinessPartnerCategory", "BusinessPartnerFullName", "BusinessPartnerGrouping", "BusinessPartnerName", "CorrespondenceLanguage", "CreationDate", "CreationTime", "FirstName", "Industry", "IsFemale", "IsMale", "IsNaturalPerson", "IsSexUnknown", "GenderCodeName", "Language", "LastChangeDate", "LastChangeTime", "LastName", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "SearchTerm1", "SearchTerm2", "AdditionalLastName", "BirthDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "BusinessPartnerType", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "IndependentAddressID", "MiddleName", "NameCountry", "PersonFullName", "PersonNumber", "IsMarkedForArchiving", "BusinessPartnerIDByExtSystem", "TradingPartner"}
	sapBusinessPartnerGeneralDatumColumnsWithDefault    = []string{}
	sapBusinessPartnerGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	sapBusinessPartnerGeneralDatumGeneratedColumns      = []string{}
)

type (
	// SapBusinessPartnerGeneralDatumSlice is an alias for a slice of pointers to SapBusinessPartnerGeneralDatum.
	// This should almost always be used instead of []SapBusinessPartnerGeneralDatum.
	SapBusinessPartnerGeneralDatumSlice []*SapBusinessPartnerGeneralDatum
	// SapBusinessPartnerGeneralDatumHook is the signature for custom SapBusinessPartnerGeneralDatum hook methods
	SapBusinessPartnerGeneralDatumHook func(context.Context, boil.ContextExecutor, *SapBusinessPartnerGeneralDatum) error

	sapBusinessPartnerGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapBusinessPartnerGeneralDatumType                 = reflect.TypeOf(&SapBusinessPartnerGeneralDatum{})
	sapBusinessPartnerGeneralDatumMapping              = queries.MakeStructMapping(sapBusinessPartnerGeneralDatumType)
	sapBusinessPartnerGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, sapBusinessPartnerGeneralDatumPrimaryKeyColumns)
	sapBusinessPartnerGeneralDatumInsertCacheMut       sync.RWMutex
	sapBusinessPartnerGeneralDatumInsertCache          = make(map[string]insertCache)
	sapBusinessPartnerGeneralDatumUpdateCacheMut       sync.RWMutex
	sapBusinessPartnerGeneralDatumUpdateCache          = make(map[string]updateCache)
	sapBusinessPartnerGeneralDatumUpsertCacheMut       sync.RWMutex
	sapBusinessPartnerGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapBusinessPartnerGeneralDatumAfterSelectHooks []SapBusinessPartnerGeneralDatumHook

var sapBusinessPartnerGeneralDatumBeforeInsertHooks []SapBusinessPartnerGeneralDatumHook
var sapBusinessPartnerGeneralDatumAfterInsertHooks []SapBusinessPartnerGeneralDatumHook

var sapBusinessPartnerGeneralDatumBeforeUpdateHooks []SapBusinessPartnerGeneralDatumHook
var sapBusinessPartnerGeneralDatumAfterUpdateHooks []SapBusinessPartnerGeneralDatumHook

var sapBusinessPartnerGeneralDatumBeforeDeleteHooks []SapBusinessPartnerGeneralDatumHook
var sapBusinessPartnerGeneralDatumAfterDeleteHooks []SapBusinessPartnerGeneralDatumHook

var sapBusinessPartnerGeneralDatumBeforeUpsertHooks []SapBusinessPartnerGeneralDatumHook
var sapBusinessPartnerGeneralDatumAfterUpsertHooks []SapBusinessPartnerGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapBusinessPartnerGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapBusinessPartnerGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapBusinessPartnerGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapBusinessPartnerGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapBusinessPartnerGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapBusinessPartnerGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapBusinessPartnerGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapBusinessPartnerGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapBusinessPartnerGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapBusinessPartnerGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapBusinessPartnerGeneralDatumHook registers your hook function for all future operations.
func AddSapBusinessPartnerGeneralDatumHook(hookPoint boil.HookPoint, sapBusinessPartnerGeneralDatumHook SapBusinessPartnerGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapBusinessPartnerGeneralDatumAfterSelectHooks = append(sapBusinessPartnerGeneralDatumAfterSelectHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.BeforeInsertHook:
		sapBusinessPartnerGeneralDatumBeforeInsertHooks = append(sapBusinessPartnerGeneralDatumBeforeInsertHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.AfterInsertHook:
		sapBusinessPartnerGeneralDatumAfterInsertHooks = append(sapBusinessPartnerGeneralDatumAfterInsertHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.BeforeUpdateHook:
		sapBusinessPartnerGeneralDatumBeforeUpdateHooks = append(sapBusinessPartnerGeneralDatumBeforeUpdateHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.AfterUpdateHook:
		sapBusinessPartnerGeneralDatumAfterUpdateHooks = append(sapBusinessPartnerGeneralDatumAfterUpdateHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.BeforeDeleteHook:
		sapBusinessPartnerGeneralDatumBeforeDeleteHooks = append(sapBusinessPartnerGeneralDatumBeforeDeleteHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.AfterDeleteHook:
		sapBusinessPartnerGeneralDatumAfterDeleteHooks = append(sapBusinessPartnerGeneralDatumAfterDeleteHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.BeforeUpsertHook:
		sapBusinessPartnerGeneralDatumBeforeUpsertHooks = append(sapBusinessPartnerGeneralDatumBeforeUpsertHooks, sapBusinessPartnerGeneralDatumHook)
	case boil.AfterUpsertHook:
		sapBusinessPartnerGeneralDatumAfterUpsertHooks = append(sapBusinessPartnerGeneralDatumAfterUpsertHooks, sapBusinessPartnerGeneralDatumHook)
	}
}

// One returns a single sapBusinessPartnerGeneralDatum record from the query.
func (q sapBusinessPartnerGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapBusinessPartnerGeneralDatum, error) {
	o := &SapBusinessPartnerGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_business_partner_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapBusinessPartnerGeneralDatum records from the query.
func (q sapBusinessPartnerGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapBusinessPartnerGeneralDatumSlice, error) {
	var o []*SapBusinessPartnerGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapBusinessPartnerGeneralDatum slice")
	}

	if len(sapBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapBusinessPartnerGeneralDatum records in the query.
func (q sapBusinessPartnerGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_business_partner_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapBusinessPartnerGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_business_partner_general_data exists")
	}

	return count > 0, nil
}

// CustomerSapBusinessPartnerCustomerDatum pointed to by the foreign key.
func (o *SapBusinessPartnerGeneralDatum) CustomerSapBusinessPartnerCustomerDatum(mods ...qm.QueryMod) sapBusinessPartnerCustomerDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Customer` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return SapBusinessPartnerCustomerData(queryMods...)
}

// SupplierSapBusinessPartnerSupplierDatum pointed to by the foreign key.
func (o *SapBusinessPartnerGeneralDatum) SupplierSapBusinessPartnerSupplierDatum(mods ...qm.QueryMod) sapBusinessPartnerSupplierDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Supplier` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return SapBusinessPartnerSupplierData(queryMods...)
}

// BusinessPartnerSapBusinessPartnerAddressData retrieves all the sap_business_partner_address_datum's SapBusinessPartnerAddressData with an executor via BusinessPartner column.
func (o *SapBusinessPartnerGeneralDatum) BusinessPartnerSapBusinessPartnerAddressData(mods ...qm.QueryMod) sapBusinessPartnerAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_address_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerAddressData(queryMods...)
}

// BusinessPartnerSapBusinessPartnerBankData retrieves all the sap_business_partner_bank_datum's SapBusinessPartnerBankData with an executor via BusinessPartner column.
func (o *SapBusinessPartnerGeneralDatum) BusinessPartnerSapBusinessPartnerBankData(mods ...qm.QueryMod) sapBusinessPartnerBankDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_bank_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerBankData(queryMods...)
}

// CustomerSapBusinessPartnerCustomerCompanyData retrieves all the sap_business_partner_customer_company_datum's SapBusinessPartnerCustomerCompanyData with an executor via Customer column.
func (o *SapBusinessPartnerGeneralDatum) CustomerSapBusinessPartnerCustomerCompanyData(mods ...qm.QueryMod) sapBusinessPartnerCustomerCompanyDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_customer_company_data`.`Customer`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerCustomerCompanyData(queryMods...)
}

// CustomerSapBusinessPartnerCustomerPartnerFunctionData retrieves all the sap_business_partner_customer_partner_function_datum's SapBusinessPartnerCustomerPartnerFunctionData with an executor via Customer column.
func (o *SapBusinessPartnerGeneralDatum) CustomerSapBusinessPartnerCustomerPartnerFunctionData(mods ...qm.QueryMod) sapBusinessPartnerCustomerPartnerFunctionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_customer_partner_function_data`.`Customer`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerCustomerPartnerFunctionData(queryMods...)
}

// CustomerSapBusinessPartnerCustomerSalesAreaData retrieves all the sap_business_partner_customer_sales_area_datum's SapBusinessPartnerCustomerSalesAreaData with an executor via Customer column.
func (o *SapBusinessPartnerGeneralDatum) CustomerSapBusinessPartnerCustomerSalesAreaData(mods ...qm.QueryMod) sapBusinessPartnerCustomerSalesAreaDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_customer_sales_area_data`.`Customer`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerCustomerSalesAreaData(queryMods...)
}

// BusinessPartnerSapBusinessPartnerRoleData retrieves all the sap_business_partner_role_datum's SapBusinessPartnerRoleData with an executor via BusinessPartner column.
func (o *SapBusinessPartnerGeneralDatum) BusinessPartnerSapBusinessPartnerRoleData(mods ...qm.QueryMod) sapBusinessPartnerRoleDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_role_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerRoleData(queryMods...)
}

// SupplierSapBusinessPartnerSupplierCompanyData retrieves all the sap_business_partner_supplier_company_datum's SapBusinessPartnerSupplierCompanyData with an executor via Supplier column.
func (o *SapBusinessPartnerGeneralDatum) SupplierSapBusinessPartnerSupplierCompanyData(mods ...qm.QueryMod) sapBusinessPartnerSupplierCompanyDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_supplier_company_data`.`Supplier`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerSupplierCompanyData(queryMods...)
}

// SupplierSapBusinessPartnerSupplierPartnerFunctionData retrieves all the sap_business_partner_supplier_partner_function_datum's SapBusinessPartnerSupplierPartnerFunctionData with an executor via Supplier column.
func (o *SapBusinessPartnerGeneralDatum) SupplierSapBusinessPartnerSupplierPartnerFunctionData(mods ...qm.QueryMod) sapBusinessPartnerSupplierPartnerFunctionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_supplier_partner_function_data`.`Supplier`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerSupplierPartnerFunctionData(queryMods...)
}

// SupplierSapBusinessPartnerSupplierPurchasingOrganizationData retrieves all the sap_business_partner_supplier_purchasing_organization_datum's SapBusinessPartnerSupplierPurchasingOrganizationData with an executor via Supplier column.
func (o *SapBusinessPartnerGeneralDatum) SupplierSapBusinessPartnerSupplierPurchasingOrganizationData(mods ...qm.QueryMod) sapBusinessPartnerSupplierPurchasingOrganizationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_business_partner_supplier_purchasing_organization_data`.`Supplier`=?", o.BusinessPartner),
	)

	return SapBusinessPartnerSupplierPurchasingOrganizationData(queryMods...)
}

// LoadCustomerSapBusinessPartnerCustomerDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapBusinessPartnerGeneralDatumL) LoadCustomerSapBusinessPartnerCustomerDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_customer_data`),
		qm.WhereIn(`sap_business_partner_customer_data.Customer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerCustomerDatum")
	}

	var resultSlice []*SapBusinessPartnerCustomerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerCustomerDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_customer_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_customer_data")
	}

	if len(sapBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomerSapBusinessPartnerCustomerDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerCustomerDatumR{}
		}
		foreign.R.CustomerSapBusinessPartnerGeneralDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.Customer {
				local.R.CustomerSapBusinessPartnerCustomerDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerCustomerDatumR{}
				}
				foreign.R.CustomerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSupplierSapBusinessPartnerSupplierDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (sapBusinessPartnerGeneralDatumL) LoadSupplierSapBusinessPartnerSupplierDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_supplier_data`),
		qm.WhereIn(`sap_business_partner_supplier_data.Supplier in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapBusinessPartnerSupplierDatum")
	}

	var resultSlice []*SapBusinessPartnerSupplierDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapBusinessPartnerSupplierDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_business_partner_supplier_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_supplier_data")
	}

	if len(sapBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupplierSapBusinessPartnerSupplierDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapBusinessPartnerSupplierDatumR{}
		}
		foreign.R.SupplierSapBusinessPartnerGeneralDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.Supplier {
				local.R.SupplierSapBusinessPartnerSupplierDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerSupplierDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerSapBusinessPartnerAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadBusinessPartnerSapBusinessPartnerAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_address_data`),
		qm.WhereIn(`sap_business_partner_address_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_address_data")
	}

	var resultSlice []*SapBusinessPartnerAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_address_data")
	}

	if len(sapBusinessPartnerAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerSapBusinessPartnerAddressData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerAddressDatumR{}
			}
			foreign.R.BusinessPartnerSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapBusinessPartnerAddressData = append(local.R.BusinessPartnerSapBusinessPartnerAddressData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerAddressDatumR{}
				}
				foreign.R.BusinessPartnerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerSapBusinessPartnerBankData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadBusinessPartnerSapBusinessPartnerBankData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_bank_data`),
		qm.WhereIn(`sap_business_partner_bank_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_bank_data")
	}

	var resultSlice []*SapBusinessPartnerBankDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_bank_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_bank_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_bank_data")
	}

	if len(sapBusinessPartnerBankDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerSapBusinessPartnerBankData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerBankDatumR{}
			}
			foreign.R.BusinessPartnerSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapBusinessPartnerBankData = append(local.R.BusinessPartnerSapBusinessPartnerBankData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerBankDatumR{}
				}
				foreign.R.BusinessPartnerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerSapBusinessPartnerCustomerCompanyData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadCustomerSapBusinessPartnerCustomerCompanyData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_customer_company_data`),
		qm.WhereIn(`sap_business_partner_customer_company_data.Customer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_customer_company_data")
	}

	var resultSlice []*SapBusinessPartnerCustomerCompanyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_customer_company_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_customer_company_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_customer_company_data")
	}

	if len(sapBusinessPartnerCustomerCompanyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerSapBusinessPartnerCustomerCompanyData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerCustomerCompanyDatumR{}
			}
			foreign.R.CustomerSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Customer {
				local.R.CustomerSapBusinessPartnerCustomerCompanyData = append(local.R.CustomerSapBusinessPartnerCustomerCompanyData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerCustomerCompanyDatumR{}
				}
				foreign.R.CustomerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerSapBusinessPartnerCustomerPartnerFunctionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadCustomerSapBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_customer_partner_function_data`),
		qm.WhereIn(`sap_business_partner_customer_partner_function_data.Customer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_customer_partner_function_data")
	}

	var resultSlice []*SapBusinessPartnerCustomerPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_customer_partner_function_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_customer_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_customer_partner_function_data")
	}

	if len(sapBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerCustomerPartnerFunctionDatumR{}
			}
			foreign.R.CustomerSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Customer {
				local.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData = append(local.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerCustomerPartnerFunctionDatumR{}
				}
				foreign.R.CustomerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCustomerSapBusinessPartnerCustomerSalesAreaData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadCustomerSapBusinessPartnerCustomerSalesAreaData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_customer_sales_area_data`),
		qm.WhereIn(`sap_business_partner_customer_sales_area_data.Customer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_customer_sales_area_data")
	}

	var resultSlice []*SapBusinessPartnerCustomerSalesAreaDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_customer_sales_area_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_customer_sales_area_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_customer_sales_area_data")
	}

	if len(sapBusinessPartnerCustomerSalesAreaDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerSapBusinessPartnerCustomerSalesAreaData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerCustomerSalesAreaDatumR{}
			}
			foreign.R.CustomerSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Customer {
				local.R.CustomerSapBusinessPartnerCustomerSalesAreaData = append(local.R.CustomerSapBusinessPartnerCustomerSalesAreaData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerCustomerSalesAreaDatumR{}
				}
				foreign.R.CustomerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerSapBusinessPartnerRoleData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadBusinessPartnerSapBusinessPartnerRoleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_role_data`),
		qm.WhereIn(`sap_business_partner_role_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_role_data")
	}

	var resultSlice []*SapBusinessPartnerRoleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_role_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_role_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_role_data")
	}

	if len(sapBusinessPartnerRoleDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerSapBusinessPartnerRoleData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerRoleDatumR{}
			}
			foreign.R.BusinessPartnerSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerSapBusinessPartnerRoleData = append(local.R.BusinessPartnerSapBusinessPartnerRoleData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerRoleDatumR{}
				}
				foreign.R.BusinessPartnerSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSupplierSapBusinessPartnerSupplierCompanyData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadSupplierSapBusinessPartnerSupplierCompanyData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_supplier_company_data`),
		qm.WhereIn(`sap_business_partner_supplier_company_data.Supplier in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_supplier_company_data")
	}

	var resultSlice []*SapBusinessPartnerSupplierCompanyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_supplier_company_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_supplier_company_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_supplier_company_data")
	}

	if len(sapBusinessPartnerSupplierCompanyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSapBusinessPartnerSupplierCompanyData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerSupplierCompanyDatumR{}
			}
			foreign.R.SupplierSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Supplier {
				local.R.SupplierSapBusinessPartnerSupplierCompanyData = append(local.R.SupplierSapBusinessPartnerSupplierCompanyData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerSupplierCompanyDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSupplierSapBusinessPartnerSupplierPartnerFunctionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadSupplierSapBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_supplier_partner_function_data`),
		qm.WhereIn(`sap_business_partner_supplier_partner_function_data.Supplier in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_supplier_partner_function_data")
	}

	var resultSlice []*SapBusinessPartnerSupplierPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_supplier_partner_function_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_supplier_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_supplier_partner_function_data")
	}

	if len(sapBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerSupplierPartnerFunctionDatumR{}
			}
			foreign.R.SupplierSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Supplier {
				local.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData = append(local.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerSupplierPartnerFunctionDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSupplierSapBusinessPartnerSupplierPurchasingOrganizationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapBusinessPartnerGeneralDatumL) LoadSupplierSapBusinessPartnerSupplierPurchasingOrganizationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*SapBusinessPartnerGeneralDatum
	var object *SapBusinessPartnerGeneralDatum

	if singular {
		object = maybeSapBusinessPartnerGeneralDatum.(*SapBusinessPartnerGeneralDatum)
	} else {
		slice = *maybeSapBusinessPartnerGeneralDatum.(*[]*SapBusinessPartnerGeneralDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_business_partner_supplier_purchasing_organization_data`),
		qm.WhereIn(`sap_business_partner_supplier_purchasing_organization_data.Supplier in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_business_partner_supplier_purchasing_organization_data")
	}

	var resultSlice []*SapBusinessPartnerSupplierPurchasingOrganizationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_business_partner_supplier_purchasing_organization_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_business_partner_supplier_purchasing_organization_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_business_partner_supplier_purchasing_organization_data")
	}

	if len(sapBusinessPartnerSupplierPurchasingOrganizationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{}
			}
			foreign.R.SupplierSapBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Supplier {
				local.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData = append(local.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData, foreign)
				if foreign.R == nil {
					foreign.R = &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{}
				}
				foreign.R.SupplierSapBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// SetCustomerSapBusinessPartnerCustomerDatum of the sapBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CustomerSapBusinessPartnerCustomerDatum to related.
// Adds o to related.R.CustomerSapBusinessPartnerGeneralDatum.
func (o *SapBusinessPartnerGeneralDatum) SetCustomerSapBusinessPartnerCustomerDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerCustomerDatum) error {
	var err error

	if insert {
		related.Customer = o.BusinessPartner

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_business_partner_customer_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"Customer"}),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.BusinessPartner, related.Customer}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Customer = o.BusinessPartner
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			CustomerSapBusinessPartnerCustomerDatum: related,
		}
	} else {
		o.R.CustomerSapBusinessPartnerCustomerDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerCustomerDatumR{
			CustomerSapBusinessPartnerGeneralDatum: o,
		}
	} else {
		related.R.CustomerSapBusinessPartnerGeneralDatum = o
	}
	return nil
}

// SetSupplierSapBusinessPartnerSupplierDatum of the sapBusinessPartnerGeneralDatum to the related item.
// Sets o.R.SupplierSapBusinessPartnerSupplierDatum to related.
// Adds o to related.R.SupplierSapBusinessPartnerGeneralDatum.
func (o *SapBusinessPartnerGeneralDatum) SetSupplierSapBusinessPartnerSupplierDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapBusinessPartnerSupplierDatum) error {
	var err error

	if insert {
		related.Supplier = o.BusinessPartner

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `sap_business_partner_supplier_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.BusinessPartner, related.Supplier}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Supplier = o.BusinessPartner
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierDatum: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerSupplierDatum = related
	}

	if related.R == nil {
		related.R = &sapBusinessPartnerSupplierDatumR{
			SupplierSapBusinessPartnerGeneralDatum: o,
		}
	} else {
		related.R.SupplierSapBusinessPartnerGeneralDatum = o
	}
	return nil
}

// AddBusinessPartnerSapBusinessPartnerAddressData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerSapBusinessPartnerAddressData.
// Sets related.R.BusinessPartnerSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddBusinessPartnerSapBusinessPartnerAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.AddressID, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			BusinessPartnerSapBusinessPartnerAddressData: related,
		}
	} else {
		o.R.BusinessPartnerSapBusinessPartnerAddressData = append(o.R.BusinessPartnerSapBusinessPartnerAddressData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerAddressDatumR{
				BusinessPartnerSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerSapBusinessPartnerBankData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerSapBusinessPartnerBankData.
// Sets related.R.BusinessPartnerSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddBusinessPartnerSapBusinessPartnerBankData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerBankDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_bank_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerBankDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.BankIdentification}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			BusinessPartnerSapBusinessPartnerBankData: related,
		}
	} else {
		o.R.BusinessPartnerSapBusinessPartnerBankData = append(o.R.BusinessPartnerSapBusinessPartnerBankData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerBankDatumR{
				BusinessPartnerSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddCustomerSapBusinessPartnerCustomerCompanyData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerSapBusinessPartnerCustomerCompanyData.
// Sets related.R.CustomerSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddCustomerSapBusinessPartnerCustomerCompanyData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerCustomerCompanyDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Customer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_customer_company_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Customer"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerCompanyDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Customer, rel.CompanyCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Customer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			CustomerSapBusinessPartnerCustomerCompanyData: related,
		}
	} else {
		o.R.CustomerSapBusinessPartnerCustomerCompanyData = append(o.R.CustomerSapBusinessPartnerCustomerCompanyData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerCustomerCompanyDatumR{
				CustomerSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.CustomerSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddCustomerSapBusinessPartnerCustomerPartnerFunctionData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData.
// Sets related.R.CustomerSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddCustomerSapBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerCustomerPartnerFunctionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Customer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_customer_partner_function_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Customer"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Customer, rel.SalesOrganization, rel.DistributionChannel, rel.Division, rel.PartnerCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Customer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			CustomerSapBusinessPartnerCustomerPartnerFunctionData: related,
		}
	} else {
		o.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData = append(o.R.CustomerSapBusinessPartnerCustomerPartnerFunctionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerCustomerPartnerFunctionDatumR{
				CustomerSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.CustomerSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddCustomerSapBusinessPartnerCustomerSalesAreaData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.CustomerSapBusinessPartnerCustomerSalesAreaData.
// Sets related.R.CustomerSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddCustomerSapBusinessPartnerCustomerSalesAreaData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerCustomerSalesAreaDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Customer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_customer_sales_area_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Customer"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerCustomerSalesAreaDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Customer, rel.SalesOrganization, rel.DistributionChannel, rel.Division}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Customer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			CustomerSapBusinessPartnerCustomerSalesAreaData: related,
		}
	} else {
		o.R.CustomerSapBusinessPartnerCustomerSalesAreaData = append(o.R.CustomerSapBusinessPartnerCustomerSalesAreaData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerCustomerSalesAreaDatumR{
				CustomerSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.CustomerSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerSapBusinessPartnerRoleData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerSapBusinessPartnerRoleData.
// Sets related.R.BusinessPartnerSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddBusinessPartnerSapBusinessPartnerRoleData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerRoleDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_role_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerRoleDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.BusinessPartnerRole, rel.ValidTo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			BusinessPartnerSapBusinessPartnerRoleData: related,
		}
	} else {
		o.R.BusinessPartnerSapBusinessPartnerRoleData = append(o.R.BusinessPartnerSapBusinessPartnerRoleData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerRoleDatumR{
				BusinessPartnerSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddSupplierSapBusinessPartnerSupplierCompanyData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SupplierSapBusinessPartnerSupplierCompanyData.
// Sets related.R.SupplierSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddSupplierSapBusinessPartnerSupplierCompanyData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerSupplierCompanyDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Supplier = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_supplier_company_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierCompanyDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Supplier, rel.CompanyCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Supplier = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierCompanyData: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerSupplierCompanyData = append(o.R.SupplierSapBusinessPartnerSupplierCompanyData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerSupplierCompanyDatumR{
				SupplierSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.SupplierSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddSupplierSapBusinessPartnerSupplierPartnerFunctionData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData.
// Sets related.R.SupplierSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddSupplierSapBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerSupplierPartnerFunctionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Supplier = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_supplier_partner_function_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Supplier, rel.PurchasingOrganization, rel.PartnerCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Supplier = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierPartnerFunctionData: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData = append(o.R.SupplierSapBusinessPartnerSupplierPartnerFunctionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerSupplierPartnerFunctionDatumR{
				SupplierSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.SupplierSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddSupplierSapBusinessPartnerSupplierPurchasingOrganizationData adds the given related objects to the existing relationships
// of the sap_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData.
// Sets related.R.SupplierSapBusinessPartnerGeneralDatum appropriately.
func (o *SapBusinessPartnerGeneralDatum) AddSupplierSapBusinessPartnerSupplierPurchasingOrganizationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapBusinessPartnerSupplierPurchasingOrganizationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Supplier = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_business_partner_supplier_purchasing_organization_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Supplier"}),
				strmangle.WhereClause("`", "`", 0, sapBusinessPartnerSupplierPurchasingOrganizationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Supplier, rel.PurchasingOrganization}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Supplier = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &sapBusinessPartnerGeneralDatumR{
			SupplierSapBusinessPartnerSupplierPurchasingOrganizationData: related,
		}
	} else {
		o.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData = append(o.R.SupplierSapBusinessPartnerSupplierPurchasingOrganizationData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapBusinessPartnerSupplierPurchasingOrganizationDatumR{
				SupplierSapBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.SupplierSapBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// SapBusinessPartnerGeneralData retrieves all the records using an executor.
func SapBusinessPartnerGeneralData(mods ...qm.QueryMod) sapBusinessPartnerGeneralDatumQuery {
	mods = append(mods, qm.From("`sap_business_partner_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_business_partner_general_data`.*"})
	}

	return sapBusinessPartnerGeneralDatumQuery{q}
}

// FindSapBusinessPartnerGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner string, selectCols ...string) (*SapBusinessPartnerGeneralDatum, error) {
	sapBusinessPartnerGeneralDatumObj := &SapBusinessPartnerGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_business_partner_general_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, sapBusinessPartnerGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_business_partner_general_data")
	}

	if err = sapBusinessPartnerGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapBusinessPartnerGeneralDatumObj, err
	}

	return sapBusinessPartnerGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapBusinessPartnerGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapBusinessPartnerGeneralDatumInsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerGeneralDatumInsertCache[key]
	sapBusinessPartnerGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapBusinessPartnerGeneralDatumAllColumns,
			sapBusinessPartnerGeneralDatumColumnsWithDefault,
			sapBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_business_partner_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_business_partner_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_business_partner_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapBusinessPartnerGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_business_partner_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerGeneralDatumInsertCacheMut.Lock()
		sapBusinessPartnerGeneralDatumInsertCache[key] = cache
		sapBusinessPartnerGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapBusinessPartnerGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapBusinessPartnerGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapBusinessPartnerGeneralDatumUpdateCacheMut.RLock()
	cache, cached := sapBusinessPartnerGeneralDatumUpdateCache[key]
	sapBusinessPartnerGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapBusinessPartnerGeneralDatumAllColumns,
			sapBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_business_partner_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_business_partner_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapBusinessPartnerGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, append(wl, sapBusinessPartnerGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_business_partner_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_business_partner_general_data")
	}

	if !cached {
		sapBusinessPartnerGeneralDatumUpdateCacheMut.Lock()
		sapBusinessPartnerGeneralDatumUpdateCache[key] = cache
		sapBusinessPartnerGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapBusinessPartnerGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_business_partner_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapBusinessPartnerGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapBusinessPartnerGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapBusinessPartnerGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLSapBusinessPartnerGeneralDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapBusinessPartnerGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_business_partner_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapBusinessPartnerGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapBusinessPartnerGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapBusinessPartnerGeneralDatumUpsertCacheMut.RLock()
	cache, cached := sapBusinessPartnerGeneralDatumUpsertCache[key]
	sapBusinessPartnerGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapBusinessPartnerGeneralDatumAllColumns,
			sapBusinessPartnerGeneralDatumColumnsWithDefault,
			sapBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapBusinessPartnerGeneralDatumAllColumns,
			sapBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_business_partner_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_business_partner_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_business_partner_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_business_partner_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapBusinessPartnerGeneralDatumType, sapBusinessPartnerGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_business_partner_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		sapBusinessPartnerGeneralDatumUpsertCacheMut.Lock()
		sapBusinessPartnerGeneralDatumUpsertCache[key] = cache
		sapBusinessPartnerGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapBusinessPartnerGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapBusinessPartnerGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapBusinessPartnerGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapBusinessPartnerGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_business_partner_general_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_business_partner_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapBusinessPartnerGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapBusinessPartnerGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapBusinessPartnerGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapBusinessPartnerGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapBusinessPartnerGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_business_partner_general_data")
	}

	if len(sapBusinessPartnerGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapBusinessPartnerGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapBusinessPartnerGeneralDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapBusinessPartnerGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapBusinessPartnerGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_business_partner_general_data`.* FROM `sap_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapBusinessPartnerGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapBusinessPartnerGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// SapBusinessPartnerGeneralDatumExists checks if the SapBusinessPartnerGeneralDatum row exists.
func SapBusinessPartnerGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_business_partner_general_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_business_partner_general_data exists")
	}

	return exists, nil
}
