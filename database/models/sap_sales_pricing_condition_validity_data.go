// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesPricingConditionValidityDatum is an object representing the database table.
type SapSalesPricingConditionValidityDatum struct {
	ConditionRecord            string      `boil:"ConditionRecord" json:"ConditionRecord" toml:"ConditionRecord" yaml:"ConditionRecord"`
	ConditionValidityEndDate   time.Time   `boil:"ConditionValidityEndDate" json:"ConditionValidityEndDate" toml:"ConditionValidityEndDate" yaml:"ConditionValidityEndDate"`
	ConditionValidityStartDate null.String `boil:"ConditionValidityStartDate" json:"ConditionValidityStartDate,omitempty" toml:"ConditionValidityStartDate" yaml:"ConditionValidityStartDate,omitempty"`
	ConditionApplication       null.String `boil:"ConditionApplication" json:"ConditionApplication,omitempty" toml:"ConditionApplication" yaml:"ConditionApplication,omitempty"`
	ConditionType              null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	ConditionReleaseStatus     null.String `boil:"ConditionReleaseStatus" json:"ConditionReleaseStatus,omitempty" toml:"ConditionReleaseStatus" yaml:"ConditionReleaseStatus,omitempty"`
	SalesDocument              null.String `boil:"SalesDocument" json:"SalesDocument,omitempty" toml:"SalesDocument" yaml:"SalesDocument,omitempty"`
	SalesDocumentItem          null.String `boil:"SalesDocumentItem" json:"SalesDocumentItem,omitempty" toml:"SalesDocumentItem" yaml:"SalesDocumentItem,omitempty"`
	ConditionContract          null.String `boil:"ConditionContract" json:"ConditionContract,omitempty" toml:"ConditionContract" yaml:"ConditionContract,omitempty"`
	CustomerGroup              null.String `boil:"CustomerGroup" json:"CustomerGroup,omitempty" toml:"CustomerGroup" yaml:"CustomerGroup,omitempty"`
	CustomerPriceGroup         null.String `boil:"CustomerPriceGroup" json:"CustomerPriceGroup,omitempty" toml:"CustomerPriceGroup" yaml:"CustomerPriceGroup,omitempty"`
	MaterialPricingGroup       null.String `boil:"MaterialPricingGroup" json:"MaterialPricingGroup,omitempty" toml:"MaterialPricingGroup" yaml:"MaterialPricingGroup,omitempty"`
	SoldToParty                null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	BPForSoldToParty           null.String `boil:"BPForSoldToParty" json:"BPForSoldToParty,omitempty" toml:"BPForSoldToParty" yaml:"BPForSoldToParty,omitempty"`
	Customer                   null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	BPForCustomer              null.String `boil:"BPForCustomer" json:"BPForCustomer,omitempty" toml:"BPForCustomer" yaml:"BPForCustomer,omitempty"`
	PayerParty                 null.String `boil:"PayerParty" json:"PayerParty,omitempty" toml:"PayerParty" yaml:"PayerParty,omitempty"`
	BPForPayerParty            null.String `boil:"BPForPayerParty" json:"BPForPayerParty,omitempty" toml:"BPForPayerParty" yaml:"BPForPayerParty,omitempty"`
	ShipToParty                null.String `boil:"ShipToParty" json:"ShipToParty,omitempty" toml:"ShipToParty" yaml:"ShipToParty,omitempty"`
	BPForShipToParty           null.String `boil:"BPForShipToParty" json:"BPForShipToParty,omitempty" toml:"BPForShipToParty" yaml:"BPForShipToParty,omitempty"`
	Supplier                   null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`
	BPForSupplier              null.String `boil:"BPForSupplier" json:"BPForSupplier,omitempty" toml:"BPForSupplier" yaml:"BPForSupplier,omitempty"`
	MaterialGroup              null.String `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	Material                   null.String `boil:"Material" json:"Material,omitempty" toml:"Material" yaml:"Material,omitempty"`
	PriceListType              null.String `boil:"PriceListType" json:"PriceListType,omitempty" toml:"PriceListType" yaml:"PriceListType,omitempty"`
	CustomerTaxClassification1 null.String `boil:"CustomerTaxClassification1" json:"CustomerTaxClassification1,omitempty" toml:"CustomerTaxClassification1" yaml:"CustomerTaxClassification1,omitempty"`
	ProductTaxClassification1  null.String `boil:"ProductTaxClassification1" json:"ProductTaxClassification1,omitempty" toml:"ProductTaxClassification1" yaml:"ProductTaxClassification1,omitempty"`
	SDDocument                 null.String `boil:"SDDocument" json:"SDDocument,omitempty" toml:"SDDocument" yaml:"SDDocument,omitempty"`
	ReferenceSDDocument        null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	ReferenceSDDocumentItem    null.String `boil:"ReferenceSDDocumentItem" json:"ReferenceSDDocumentItem,omitempty" toml:"ReferenceSDDocumentItem" yaml:"ReferenceSDDocumentItem,omitempty"`
	SalesOffice                null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesGroup                 null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOrganization          null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel        null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	TransactionCurrency        null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	ConditionProcessingStatus  null.String `boil:"ConditionProcessingStatus" json:"ConditionProcessingStatus,omitempty" toml:"ConditionProcessingStatus" yaml:"ConditionProcessingStatus,omitempty"`
	PricingDate                null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	ConditionScaleBasisValue   null.String `boil:"ConditionScaleBasisValue" json:"ConditionScaleBasisValue,omitempty" toml:"ConditionScaleBasisValue" yaml:"ConditionScaleBasisValue,omitempty"`
	TaxCode                    null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ServiceDocument            null.String `boil:"ServiceDocument" json:"ServiceDocument,omitempty" toml:"ServiceDocument" yaml:"ServiceDocument,omitempty"`
	ServiceDocumentItem        null.String `boil:"ServiceDocumentItem" json:"ServiceDocumentItem,omitempty" toml:"ServiceDocumentItem" yaml:"ServiceDocumentItem,omitempty"`
	CustomerConditionGroup     null.String `boil:"CustomerConditionGroup" json:"CustomerConditionGroup,omitempty" toml:"CustomerConditionGroup" yaml:"CustomerConditionGroup,omitempty"`

	R *sapSalesPricingConditionValidityDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesPricingConditionValidityDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesPricingConditionValidityDatumColumns = struct {
	ConditionRecord            string
	ConditionValidityEndDate   string
	ConditionValidityStartDate string
	ConditionApplication       string
	ConditionType              string
	ConditionReleaseStatus     string
	SalesDocument              string
	SalesDocumentItem          string
	ConditionContract          string
	CustomerGroup              string
	CustomerPriceGroup         string
	MaterialPricingGroup       string
	SoldToParty                string
	BPForSoldToParty           string
	Customer                   string
	BPForCustomer              string
	PayerParty                 string
	BPForPayerParty            string
	ShipToParty                string
	BPForShipToParty           string
	Supplier                   string
	BPForSupplier              string
	MaterialGroup              string
	Material                   string
	PriceListType              string
	CustomerTaxClassification1 string
	ProductTaxClassification1  string
	SDDocument                 string
	ReferenceSDDocument        string
	ReferenceSDDocumentItem    string
	SalesOffice                string
	SalesGroup                 string
	SalesOrganization          string
	DistributionChannel        string
	TransactionCurrency        string
	ConditionProcessingStatus  string
	PricingDate                string
	ConditionScaleBasisValue   string
	TaxCode                    string
	ServiceDocument            string
	ServiceDocumentItem        string
	CustomerConditionGroup     string
}{
	ConditionRecord:            "ConditionRecord",
	ConditionValidityEndDate:   "ConditionValidityEndDate",
	ConditionValidityStartDate: "ConditionValidityStartDate",
	ConditionApplication:       "ConditionApplication",
	ConditionType:              "ConditionType",
	ConditionReleaseStatus:     "ConditionReleaseStatus",
	SalesDocument:              "SalesDocument",
	SalesDocumentItem:          "SalesDocumentItem",
	ConditionContract:          "ConditionContract",
	CustomerGroup:              "CustomerGroup",
	CustomerPriceGroup:         "CustomerPriceGroup",
	MaterialPricingGroup:       "MaterialPricingGroup",
	SoldToParty:                "SoldToParty",
	BPForSoldToParty:           "BPForSoldToParty",
	Customer:                   "Customer",
	BPForCustomer:              "BPForCustomer",
	PayerParty:                 "PayerParty",
	BPForPayerParty:            "BPForPayerParty",
	ShipToParty:                "ShipToParty",
	BPForShipToParty:           "BPForShipToParty",
	Supplier:                   "Supplier",
	BPForSupplier:              "BPForSupplier",
	MaterialGroup:              "MaterialGroup",
	Material:                   "Material",
	PriceListType:              "PriceListType",
	CustomerTaxClassification1: "CustomerTaxClassification1",
	ProductTaxClassification1:  "ProductTaxClassification1",
	SDDocument:                 "SDDocument",
	ReferenceSDDocument:        "ReferenceSDDocument",
	ReferenceSDDocumentItem:    "ReferenceSDDocumentItem",
	SalesOffice:                "SalesOffice",
	SalesGroup:                 "SalesGroup",
	SalesOrganization:          "SalesOrganization",
	DistributionChannel:        "DistributionChannel",
	TransactionCurrency:        "TransactionCurrency",
	ConditionProcessingStatus:  "ConditionProcessingStatus",
	PricingDate:                "PricingDate",
	ConditionScaleBasisValue:   "ConditionScaleBasisValue",
	TaxCode:                    "TaxCode",
	ServiceDocument:            "ServiceDocument",
	ServiceDocumentItem:        "ServiceDocumentItem",
	CustomerConditionGroup:     "CustomerConditionGroup",
}

var SapSalesPricingConditionValidityDatumTableColumns = struct {
	ConditionRecord            string
	ConditionValidityEndDate   string
	ConditionValidityStartDate string
	ConditionApplication       string
	ConditionType              string
	ConditionReleaseStatus     string
	SalesDocument              string
	SalesDocumentItem          string
	ConditionContract          string
	CustomerGroup              string
	CustomerPriceGroup         string
	MaterialPricingGroup       string
	SoldToParty                string
	BPForSoldToParty           string
	Customer                   string
	BPForCustomer              string
	PayerParty                 string
	BPForPayerParty            string
	ShipToParty                string
	BPForShipToParty           string
	Supplier                   string
	BPForSupplier              string
	MaterialGroup              string
	Material                   string
	PriceListType              string
	CustomerTaxClassification1 string
	ProductTaxClassification1  string
	SDDocument                 string
	ReferenceSDDocument        string
	ReferenceSDDocumentItem    string
	SalesOffice                string
	SalesGroup                 string
	SalesOrganization          string
	DistributionChannel        string
	TransactionCurrency        string
	ConditionProcessingStatus  string
	PricingDate                string
	ConditionScaleBasisValue   string
	TaxCode                    string
	ServiceDocument            string
	ServiceDocumentItem        string
	CustomerConditionGroup     string
}{
	ConditionRecord:            "sap_sales_pricing_condition_validity_data.ConditionRecord",
	ConditionValidityEndDate:   "sap_sales_pricing_condition_validity_data.ConditionValidityEndDate",
	ConditionValidityStartDate: "sap_sales_pricing_condition_validity_data.ConditionValidityStartDate",
	ConditionApplication:       "sap_sales_pricing_condition_validity_data.ConditionApplication",
	ConditionType:              "sap_sales_pricing_condition_validity_data.ConditionType",
	ConditionReleaseStatus:     "sap_sales_pricing_condition_validity_data.ConditionReleaseStatus",
	SalesDocument:              "sap_sales_pricing_condition_validity_data.SalesDocument",
	SalesDocumentItem:          "sap_sales_pricing_condition_validity_data.SalesDocumentItem",
	ConditionContract:          "sap_sales_pricing_condition_validity_data.ConditionContract",
	CustomerGroup:              "sap_sales_pricing_condition_validity_data.CustomerGroup",
	CustomerPriceGroup:         "sap_sales_pricing_condition_validity_data.CustomerPriceGroup",
	MaterialPricingGroup:       "sap_sales_pricing_condition_validity_data.MaterialPricingGroup",
	SoldToParty:                "sap_sales_pricing_condition_validity_data.SoldToParty",
	BPForSoldToParty:           "sap_sales_pricing_condition_validity_data.BPForSoldToParty",
	Customer:                   "sap_sales_pricing_condition_validity_data.Customer",
	BPForCustomer:              "sap_sales_pricing_condition_validity_data.BPForCustomer",
	PayerParty:                 "sap_sales_pricing_condition_validity_data.PayerParty",
	BPForPayerParty:            "sap_sales_pricing_condition_validity_data.BPForPayerParty",
	ShipToParty:                "sap_sales_pricing_condition_validity_data.ShipToParty",
	BPForShipToParty:           "sap_sales_pricing_condition_validity_data.BPForShipToParty",
	Supplier:                   "sap_sales_pricing_condition_validity_data.Supplier",
	BPForSupplier:              "sap_sales_pricing_condition_validity_data.BPForSupplier",
	MaterialGroup:              "sap_sales_pricing_condition_validity_data.MaterialGroup",
	Material:                   "sap_sales_pricing_condition_validity_data.Material",
	PriceListType:              "sap_sales_pricing_condition_validity_data.PriceListType",
	CustomerTaxClassification1: "sap_sales_pricing_condition_validity_data.CustomerTaxClassification1",
	ProductTaxClassification1:  "sap_sales_pricing_condition_validity_data.ProductTaxClassification1",
	SDDocument:                 "sap_sales_pricing_condition_validity_data.SDDocument",
	ReferenceSDDocument:        "sap_sales_pricing_condition_validity_data.ReferenceSDDocument",
	ReferenceSDDocumentItem:    "sap_sales_pricing_condition_validity_data.ReferenceSDDocumentItem",
	SalesOffice:                "sap_sales_pricing_condition_validity_data.SalesOffice",
	SalesGroup:                 "sap_sales_pricing_condition_validity_data.SalesGroup",
	SalesOrganization:          "sap_sales_pricing_condition_validity_data.SalesOrganization",
	DistributionChannel:        "sap_sales_pricing_condition_validity_data.DistributionChannel",
	TransactionCurrency:        "sap_sales_pricing_condition_validity_data.TransactionCurrency",
	ConditionProcessingStatus:  "sap_sales_pricing_condition_validity_data.ConditionProcessingStatus",
	PricingDate:                "sap_sales_pricing_condition_validity_data.PricingDate",
	ConditionScaleBasisValue:   "sap_sales_pricing_condition_validity_data.ConditionScaleBasisValue",
	TaxCode:                    "sap_sales_pricing_condition_validity_data.TaxCode",
	ServiceDocument:            "sap_sales_pricing_condition_validity_data.ServiceDocument",
	ServiceDocumentItem:        "sap_sales_pricing_condition_validity_data.ServiceDocumentItem",
	CustomerConditionGroup:     "sap_sales_pricing_condition_validity_data.CustomerConditionGroup",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SapSalesPricingConditionValidityDatumWhere = struct {
	ConditionRecord            whereHelperstring
	ConditionValidityEndDate   whereHelpertime_Time
	ConditionValidityStartDate whereHelpernull_String
	ConditionApplication       whereHelpernull_String
	ConditionType              whereHelpernull_String
	ConditionReleaseStatus     whereHelpernull_String
	SalesDocument              whereHelpernull_String
	SalesDocumentItem          whereHelpernull_String
	ConditionContract          whereHelpernull_String
	CustomerGroup              whereHelpernull_String
	CustomerPriceGroup         whereHelpernull_String
	MaterialPricingGroup       whereHelpernull_String
	SoldToParty                whereHelpernull_String
	BPForSoldToParty           whereHelpernull_String
	Customer                   whereHelpernull_String
	BPForCustomer              whereHelpernull_String
	PayerParty                 whereHelpernull_String
	BPForPayerParty            whereHelpernull_String
	ShipToParty                whereHelpernull_String
	BPForShipToParty           whereHelpernull_String
	Supplier                   whereHelpernull_String
	BPForSupplier              whereHelpernull_String
	MaterialGroup              whereHelpernull_String
	Material                   whereHelpernull_String
	PriceListType              whereHelpernull_String
	CustomerTaxClassification1 whereHelpernull_String
	ProductTaxClassification1  whereHelpernull_String
	SDDocument                 whereHelpernull_String
	ReferenceSDDocument        whereHelpernull_String
	ReferenceSDDocumentItem    whereHelpernull_String
	SalesOffice                whereHelpernull_String
	SalesGroup                 whereHelpernull_String
	SalesOrganization          whereHelpernull_String
	DistributionChannel        whereHelpernull_String
	TransactionCurrency        whereHelpernull_String
	ConditionProcessingStatus  whereHelpernull_String
	PricingDate                whereHelpernull_String
	ConditionScaleBasisValue   whereHelpernull_String
	TaxCode                    whereHelpernull_String
	ServiceDocument            whereHelpernull_String
	ServiceDocumentItem        whereHelpernull_String
	CustomerConditionGroup     whereHelpernull_String
}{
	ConditionRecord:            whereHelperstring{field: "`sap_sales_pricing_condition_validity_data`.`ConditionRecord`"},
	ConditionValidityEndDate:   whereHelpertime_Time{field: "`sap_sales_pricing_condition_validity_data`.`ConditionValidityEndDate`"},
	ConditionValidityStartDate: whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionValidityStartDate`"},
	ConditionApplication:       whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionApplication`"},
	ConditionType:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionType`"},
	ConditionReleaseStatus:     whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionReleaseStatus`"},
	SalesDocument:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SalesDocument`"},
	SalesDocumentItem:          whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SalesDocumentItem`"},
	ConditionContract:          whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionContract`"},
	CustomerGroup:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`CustomerGroup`"},
	CustomerPriceGroup:         whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`CustomerPriceGroup`"},
	MaterialPricingGroup:       whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`MaterialPricingGroup`"},
	SoldToParty:                whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SoldToParty`"},
	BPForSoldToParty:           whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`BPForSoldToParty`"},
	Customer:                   whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`Customer`"},
	BPForCustomer:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`BPForCustomer`"},
	PayerParty:                 whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`PayerParty`"},
	BPForPayerParty:            whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`BPForPayerParty`"},
	ShipToParty:                whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ShipToParty`"},
	BPForShipToParty:           whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`BPForShipToParty`"},
	Supplier:                   whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`Supplier`"},
	BPForSupplier:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`BPForSupplier`"},
	MaterialGroup:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`MaterialGroup`"},
	Material:                   whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`Material`"},
	PriceListType:              whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`PriceListType`"},
	CustomerTaxClassification1: whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`CustomerTaxClassification1`"},
	ProductTaxClassification1:  whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ProductTaxClassification1`"},
	SDDocument:                 whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SDDocument`"},
	ReferenceSDDocument:        whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ReferenceSDDocument`"},
	ReferenceSDDocumentItem:    whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ReferenceSDDocumentItem`"},
	SalesOffice:                whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SalesOffice`"},
	SalesGroup:                 whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SalesGroup`"},
	SalesOrganization:          whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`SalesOrganization`"},
	DistributionChannel:        whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`DistributionChannel`"},
	TransactionCurrency:        whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`TransactionCurrency`"},
	ConditionProcessingStatus:  whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionProcessingStatus`"},
	PricingDate:                whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`PricingDate`"},
	ConditionScaleBasisValue:   whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ConditionScaleBasisValue`"},
	TaxCode:                    whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`TaxCode`"},
	ServiceDocument:            whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ServiceDocument`"},
	ServiceDocumentItem:        whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`ServiceDocumentItem`"},
	CustomerConditionGroup:     whereHelpernull_String{field: "`sap_sales_pricing_condition_validity_data`.`CustomerConditionGroup`"},
}

// SapSalesPricingConditionValidityDatumRels is where relationship names are stored.
var SapSalesPricingConditionValidityDatumRels = struct {
}{}

// sapSalesPricingConditionValidityDatumR is where relationships are stored.
type sapSalesPricingConditionValidityDatumR struct {
}

// NewStruct creates a new relationship struct
func (*sapSalesPricingConditionValidityDatumR) NewStruct() *sapSalesPricingConditionValidityDatumR {
	return &sapSalesPricingConditionValidityDatumR{}
}

// sapSalesPricingConditionValidityDatumL is where Load methods for each relationship are stored.
type sapSalesPricingConditionValidityDatumL struct{}

var (
	sapSalesPricingConditionValidityDatumAllColumns            = []string{"ConditionRecord", "ConditionValidityEndDate", "ConditionValidityStartDate", "ConditionApplication", "ConditionType", "ConditionReleaseStatus", "SalesDocument", "SalesDocumentItem", "ConditionContract", "CustomerGroup", "CustomerPriceGroup", "MaterialPricingGroup", "SoldToParty", "BPForSoldToParty", "Customer", "BPForCustomer", "PayerParty", "BPForPayerParty", "ShipToParty", "BPForShipToParty", "Supplier", "BPForSupplier", "MaterialGroup", "Material", "PriceListType", "CustomerTaxClassification1", "ProductTaxClassification1", "SDDocument", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SalesOffice", "SalesGroup", "SalesOrganization", "DistributionChannel", "TransactionCurrency", "ConditionProcessingStatus", "PricingDate", "ConditionScaleBasisValue", "TaxCode", "ServiceDocument", "ServiceDocumentItem", "CustomerConditionGroup"}
	sapSalesPricingConditionValidityDatumColumnsWithoutDefault = []string{"ConditionRecord", "ConditionValidityEndDate", "ConditionValidityStartDate", "ConditionApplication", "ConditionType", "ConditionReleaseStatus", "SalesDocument", "SalesDocumentItem", "ConditionContract", "CustomerGroup", "CustomerPriceGroup", "MaterialPricingGroup", "SoldToParty", "BPForSoldToParty", "Customer", "BPForCustomer", "PayerParty", "BPForPayerParty", "ShipToParty", "BPForShipToParty", "Supplier", "BPForSupplier", "MaterialGroup", "Material", "PriceListType", "CustomerTaxClassification1", "ProductTaxClassification1", "SDDocument", "ReferenceSDDocument", "ReferenceSDDocumentItem", "SalesOffice", "SalesGroup", "SalesOrganization", "DistributionChannel", "TransactionCurrency", "ConditionProcessingStatus", "PricingDate", "ConditionScaleBasisValue", "TaxCode", "ServiceDocument", "ServiceDocumentItem", "CustomerConditionGroup"}
	sapSalesPricingConditionValidityDatumColumnsWithDefault    = []string{}
	sapSalesPricingConditionValidityDatumPrimaryKeyColumns     = []string{"ConditionRecord", "ConditionValidityEndDate"}
	sapSalesPricingConditionValidityDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesPricingConditionValidityDatumSlice is an alias for a slice of pointers to SapSalesPricingConditionValidityDatum.
	// This should almost always be used instead of []SapSalesPricingConditionValidityDatum.
	SapSalesPricingConditionValidityDatumSlice []*SapSalesPricingConditionValidityDatum
	// SapSalesPricingConditionValidityDatumHook is the signature for custom SapSalesPricingConditionValidityDatum hook methods
	SapSalesPricingConditionValidityDatumHook func(context.Context, boil.ContextExecutor, *SapSalesPricingConditionValidityDatum) error

	sapSalesPricingConditionValidityDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesPricingConditionValidityDatumType                 = reflect.TypeOf(&SapSalesPricingConditionValidityDatum{})
	sapSalesPricingConditionValidityDatumMapping              = queries.MakeStructMapping(sapSalesPricingConditionValidityDatumType)
	sapSalesPricingConditionValidityDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, sapSalesPricingConditionValidityDatumPrimaryKeyColumns)
	sapSalesPricingConditionValidityDatumInsertCacheMut       sync.RWMutex
	sapSalesPricingConditionValidityDatumInsertCache          = make(map[string]insertCache)
	sapSalesPricingConditionValidityDatumUpdateCacheMut       sync.RWMutex
	sapSalesPricingConditionValidityDatumUpdateCache          = make(map[string]updateCache)
	sapSalesPricingConditionValidityDatumUpsertCacheMut       sync.RWMutex
	sapSalesPricingConditionValidityDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesPricingConditionValidityDatumAfterSelectHooks []SapSalesPricingConditionValidityDatumHook

var sapSalesPricingConditionValidityDatumBeforeInsertHooks []SapSalesPricingConditionValidityDatumHook
var sapSalesPricingConditionValidityDatumAfterInsertHooks []SapSalesPricingConditionValidityDatumHook

var sapSalesPricingConditionValidityDatumBeforeUpdateHooks []SapSalesPricingConditionValidityDatumHook
var sapSalesPricingConditionValidityDatumAfterUpdateHooks []SapSalesPricingConditionValidityDatumHook

var sapSalesPricingConditionValidityDatumBeforeDeleteHooks []SapSalesPricingConditionValidityDatumHook
var sapSalesPricingConditionValidityDatumAfterDeleteHooks []SapSalesPricingConditionValidityDatumHook

var sapSalesPricingConditionValidityDatumBeforeUpsertHooks []SapSalesPricingConditionValidityDatumHook
var sapSalesPricingConditionValidityDatumAfterUpsertHooks []SapSalesPricingConditionValidityDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesPricingConditionValidityDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesPricingConditionValidityDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesPricingConditionValidityDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesPricingConditionValidityDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesPricingConditionValidityDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesPricingConditionValidityDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesPricingConditionValidityDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesPricingConditionValidityDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesPricingConditionValidityDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesPricingConditionValidityDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesPricingConditionValidityDatumHook registers your hook function for all future operations.
func AddSapSalesPricingConditionValidityDatumHook(hookPoint boil.HookPoint, sapSalesPricingConditionValidityDatumHook SapSalesPricingConditionValidityDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesPricingConditionValidityDatumAfterSelectHooks = append(sapSalesPricingConditionValidityDatumAfterSelectHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.BeforeInsertHook:
		sapSalesPricingConditionValidityDatumBeforeInsertHooks = append(sapSalesPricingConditionValidityDatumBeforeInsertHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.AfterInsertHook:
		sapSalesPricingConditionValidityDatumAfterInsertHooks = append(sapSalesPricingConditionValidityDatumAfterInsertHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesPricingConditionValidityDatumBeforeUpdateHooks = append(sapSalesPricingConditionValidityDatumBeforeUpdateHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.AfterUpdateHook:
		sapSalesPricingConditionValidityDatumAfterUpdateHooks = append(sapSalesPricingConditionValidityDatumAfterUpdateHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesPricingConditionValidityDatumBeforeDeleteHooks = append(sapSalesPricingConditionValidityDatumBeforeDeleteHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.AfterDeleteHook:
		sapSalesPricingConditionValidityDatumAfterDeleteHooks = append(sapSalesPricingConditionValidityDatumAfterDeleteHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesPricingConditionValidityDatumBeforeUpsertHooks = append(sapSalesPricingConditionValidityDatumBeforeUpsertHooks, sapSalesPricingConditionValidityDatumHook)
	case boil.AfterUpsertHook:
		sapSalesPricingConditionValidityDatumAfterUpsertHooks = append(sapSalesPricingConditionValidityDatumAfterUpsertHooks, sapSalesPricingConditionValidityDatumHook)
	}
}

// One returns a single sapSalesPricingConditionValidityDatum record from the query.
func (q sapSalesPricingConditionValidityDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesPricingConditionValidityDatum, error) {
	o := &SapSalesPricingConditionValidityDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_pricing_condition_validity_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesPricingConditionValidityDatum records from the query.
func (q sapSalesPricingConditionValidityDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesPricingConditionValidityDatumSlice, error) {
	var o []*SapSalesPricingConditionValidityDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesPricingConditionValidityDatum slice")
	}

	if len(sapSalesPricingConditionValidityDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesPricingConditionValidityDatum records in the query.
func (q sapSalesPricingConditionValidityDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_pricing_condition_validity_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesPricingConditionValidityDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_pricing_condition_validity_data exists")
	}

	return count > 0, nil
}

// SapSalesPricingConditionValidityData retrieves all the records using an executor.
func SapSalesPricingConditionValidityData(mods ...qm.QueryMod) sapSalesPricingConditionValidityDatumQuery {
	mods = append(mods, qm.From("`sap_sales_pricing_condition_validity_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_sales_pricing_condition_validity_data`.*"})
	}

	return sapSalesPricingConditionValidityDatumQuery{q}
}

// FindSapSalesPricingConditionValidityDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesPricingConditionValidityDatum(ctx context.Context, exec boil.ContextExecutor, conditionRecord string, conditionValidityEndDate time.Time, selectCols ...string) (*SapSalesPricingConditionValidityDatum, error) {
	sapSalesPricingConditionValidityDatumObj := &SapSalesPricingConditionValidityDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_pricing_condition_validity_data` where `ConditionRecord`=? AND `ConditionValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, conditionRecord, conditionValidityEndDate)

	err := q.Bind(ctx, exec, sapSalesPricingConditionValidityDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_pricing_condition_validity_data")
	}

	if err = sapSalesPricingConditionValidityDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesPricingConditionValidityDatumObj, err
	}

	return sapSalesPricingConditionValidityDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesPricingConditionValidityDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_pricing_condition_validity_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesPricingConditionValidityDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesPricingConditionValidityDatumInsertCacheMut.RLock()
	cache, cached := sapSalesPricingConditionValidityDatumInsertCache[key]
	sapSalesPricingConditionValidityDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesPricingConditionValidityDatumAllColumns,
			sapSalesPricingConditionValidityDatumColumnsWithDefault,
			sapSalesPricingConditionValidityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_pricing_condition_validity_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_pricing_condition_validity_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_pricing_condition_validity_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesPricingConditionValidityDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_pricing_condition_validity_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ConditionRecord,
		o.ConditionValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_pricing_condition_validity_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesPricingConditionValidityDatumInsertCacheMut.Lock()
		sapSalesPricingConditionValidityDatumInsertCache[key] = cache
		sapSalesPricingConditionValidityDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesPricingConditionValidityDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesPricingConditionValidityDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesPricingConditionValidityDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesPricingConditionValidityDatumUpdateCache[key]
	sapSalesPricingConditionValidityDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesPricingConditionValidityDatumAllColumns,
			sapSalesPricingConditionValidityDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_pricing_condition_validity_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_pricing_condition_validity_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesPricingConditionValidityDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, append(wl, sapSalesPricingConditionValidityDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_pricing_condition_validity_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_pricing_condition_validity_data")
	}

	if !cached {
		sapSalesPricingConditionValidityDatumUpdateCacheMut.Lock()
		sapSalesPricingConditionValidityDatumUpdateCache[key] = cache
		sapSalesPricingConditionValidityDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesPricingConditionValidityDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_pricing_condition_validity_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_pricing_condition_validity_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesPricingConditionValidityDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesPricingConditionValidityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_pricing_condition_validity_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesPricingConditionValidityDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesPricingConditionValidityDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesPricingConditionValidityDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesPricingConditionValidityDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesPricingConditionValidityDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_pricing_condition_validity_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesPricingConditionValidityDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesPricingConditionValidityDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesPricingConditionValidityDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesPricingConditionValidityDatumUpsertCache[key]
	sapSalesPricingConditionValidityDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesPricingConditionValidityDatumAllColumns,
			sapSalesPricingConditionValidityDatumColumnsWithDefault,
			sapSalesPricingConditionValidityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesPricingConditionValidityDatumAllColumns,
			sapSalesPricingConditionValidityDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_pricing_condition_validity_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_pricing_condition_validity_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_pricing_condition_validity_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_pricing_condition_validity_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesPricingConditionValidityDatumType, sapSalesPricingConditionValidityDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_pricing_condition_validity_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_pricing_condition_validity_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesPricingConditionValidityDatumUpsertCacheMut.Lock()
		sapSalesPricingConditionValidityDatumUpsertCache[key] = cache
		sapSalesPricingConditionValidityDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesPricingConditionValidityDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesPricingConditionValidityDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesPricingConditionValidityDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesPricingConditionValidityDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_pricing_condition_validity_data` WHERE `ConditionRecord`=? AND `ConditionValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_pricing_condition_validity_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_pricing_condition_validity_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesPricingConditionValidityDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesPricingConditionValidityDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_pricing_condition_validity_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_pricing_condition_validity_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesPricingConditionValidityDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesPricingConditionValidityDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesPricingConditionValidityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_pricing_condition_validity_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesPricingConditionValidityDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesPricingConditionValidityDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_pricing_condition_validity_data")
	}

	if len(sapSalesPricingConditionValidityDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesPricingConditionValidityDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesPricingConditionValidityDatum(ctx, exec, o.ConditionRecord, o.ConditionValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesPricingConditionValidityDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesPricingConditionValidityDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesPricingConditionValidityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_pricing_condition_validity_data`.* FROM `sap_sales_pricing_condition_validity_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesPricingConditionValidityDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesPricingConditionValidityDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesPricingConditionValidityDatumExists checks if the SapSalesPricingConditionValidityDatum row exists.
func SapSalesPricingConditionValidityDatumExists(ctx context.Context, exec boil.ContextExecutor, conditionRecord string, conditionValidityEndDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_pricing_condition_validity_data` where `ConditionRecord`=? AND `ConditionValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, conditionRecord, conditionValidityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, conditionRecord, conditionValidityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_pricing_condition_validity_data exists")
	}

	return exists, nil
}
