// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCustomerReturnItemScheduleLineDatum is an object representing the database table.
type SapCustomerReturnItemScheduleLineDatum struct {
	CustomerReturn                string      `boil:"CustomerReturn" json:"CustomerReturn" toml:"CustomerReturn" yaml:"CustomerReturn"`
	CustomerReturnItem            string      `boil:"CustomerReturnItem" json:"CustomerReturnItem" toml:"CustomerReturnItem" yaml:"CustomerReturnItem"`
	ScheduleLine                  string      `boil:"ScheduleLine" json:"ScheduleLine" toml:"ScheduleLine" yaml:"ScheduleLine"`
	OrderQuantityUnit             null.String `boil:"OrderQuantityUnit" json:"OrderQuantityUnit,omitempty" toml:"OrderQuantityUnit" yaml:"OrderQuantityUnit,omitempty"`
	ConfdOrderQtyByMatlAvailCheck null.String `boil:"ConfdOrderQtyByMatlAvailCheck" json:"ConfdOrderQtyByMatlAvailCheck,omitempty" toml:"ConfdOrderQtyByMatlAvailCheck" yaml:"ConfdOrderQtyByMatlAvailCheck,omitempty"`
	DeliveredQtyInOrderQtyUnit    null.String `boil:"DeliveredQtyInOrderQtyUnit" json:"DeliveredQtyInOrderQtyUnit,omitempty" toml:"DeliveredQtyInOrderQtyUnit" yaml:"DeliveredQtyInOrderQtyUnit,omitempty"`
	OpenConfdDelivQtyInOrdQtyUnit null.String `boil:"OpenConfdDelivQtyInOrdQtyUnit" json:"OpenConfdDelivQtyInOrdQtyUnit,omitempty" toml:"OpenConfdDelivQtyInOrdQtyUnit" yaml:"OpenConfdDelivQtyInOrdQtyUnit,omitempty"`
	DelivBlockReasonForSchedLine  null.String `boil:"DelivBlockReasonForSchedLine" json:"DelivBlockReasonForSchedLine,omitempty" toml:"DelivBlockReasonForSchedLine" yaml:"DelivBlockReasonForSchedLine,omitempty"`

	R *sapCustomerReturnItemScheduleLineDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCustomerReturnItemScheduleLineDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCustomerReturnItemScheduleLineDatumColumns = struct {
	CustomerReturn                string
	CustomerReturnItem            string
	ScheduleLine                  string
	OrderQuantityUnit             string
	ConfdOrderQtyByMatlAvailCheck string
	DeliveredQtyInOrderQtyUnit    string
	OpenConfdDelivQtyInOrdQtyUnit string
	DelivBlockReasonForSchedLine  string
}{
	CustomerReturn:                "CustomerReturn",
	CustomerReturnItem:            "CustomerReturnItem",
	ScheduleLine:                  "ScheduleLine",
	OrderQuantityUnit:             "OrderQuantityUnit",
	ConfdOrderQtyByMatlAvailCheck: "ConfdOrderQtyByMatlAvailCheck",
	DeliveredQtyInOrderQtyUnit:    "DeliveredQtyInOrderQtyUnit",
	OpenConfdDelivQtyInOrdQtyUnit: "OpenConfdDelivQtyInOrdQtyUnit",
	DelivBlockReasonForSchedLine:  "DelivBlockReasonForSchedLine",
}

var SapCustomerReturnItemScheduleLineDatumTableColumns = struct {
	CustomerReturn                string
	CustomerReturnItem            string
	ScheduleLine                  string
	OrderQuantityUnit             string
	ConfdOrderQtyByMatlAvailCheck string
	DeliveredQtyInOrderQtyUnit    string
	OpenConfdDelivQtyInOrdQtyUnit string
	DelivBlockReasonForSchedLine  string
}{
	CustomerReturn:                "sap_customer_return_item_schedule_line_data.CustomerReturn",
	CustomerReturnItem:            "sap_customer_return_item_schedule_line_data.CustomerReturnItem",
	ScheduleLine:                  "sap_customer_return_item_schedule_line_data.ScheduleLine",
	OrderQuantityUnit:             "sap_customer_return_item_schedule_line_data.OrderQuantityUnit",
	ConfdOrderQtyByMatlAvailCheck: "sap_customer_return_item_schedule_line_data.ConfdOrderQtyByMatlAvailCheck",
	DeliveredQtyInOrderQtyUnit:    "sap_customer_return_item_schedule_line_data.DeliveredQtyInOrderQtyUnit",
	OpenConfdDelivQtyInOrdQtyUnit: "sap_customer_return_item_schedule_line_data.OpenConfdDelivQtyInOrdQtyUnit",
	DelivBlockReasonForSchedLine:  "sap_customer_return_item_schedule_line_data.DelivBlockReasonForSchedLine",
}

// Generated where

var SapCustomerReturnItemScheduleLineDatumWhere = struct {
	CustomerReturn                whereHelperstring
	CustomerReturnItem            whereHelperstring
	ScheduleLine                  whereHelperstring
	OrderQuantityUnit             whereHelpernull_String
	ConfdOrderQtyByMatlAvailCheck whereHelpernull_String
	DeliveredQtyInOrderQtyUnit    whereHelpernull_String
	OpenConfdDelivQtyInOrdQtyUnit whereHelpernull_String
	DelivBlockReasonForSchedLine  whereHelpernull_String
}{
	CustomerReturn:                whereHelperstring{field: "`sap_customer_return_item_schedule_line_data`.`CustomerReturn`"},
	CustomerReturnItem:            whereHelperstring{field: "`sap_customer_return_item_schedule_line_data`.`CustomerReturnItem`"},
	ScheduleLine:                  whereHelperstring{field: "`sap_customer_return_item_schedule_line_data`.`ScheduleLine`"},
	OrderQuantityUnit:             whereHelpernull_String{field: "`sap_customer_return_item_schedule_line_data`.`OrderQuantityUnit`"},
	ConfdOrderQtyByMatlAvailCheck: whereHelpernull_String{field: "`sap_customer_return_item_schedule_line_data`.`ConfdOrderQtyByMatlAvailCheck`"},
	DeliveredQtyInOrderQtyUnit:    whereHelpernull_String{field: "`sap_customer_return_item_schedule_line_data`.`DeliveredQtyInOrderQtyUnit`"},
	OpenConfdDelivQtyInOrdQtyUnit: whereHelpernull_String{field: "`sap_customer_return_item_schedule_line_data`.`OpenConfdDelivQtyInOrdQtyUnit`"},
	DelivBlockReasonForSchedLine:  whereHelpernull_String{field: "`sap_customer_return_item_schedule_line_data`.`DelivBlockReasonForSchedLine`"},
}

// SapCustomerReturnItemScheduleLineDatumRels is where relationship names are stored.
var SapCustomerReturnItemScheduleLineDatumRels = struct {
	CustomerReturnSapCustomerReturnHeaderDatum string
}{
	CustomerReturnSapCustomerReturnHeaderDatum: "CustomerReturnSapCustomerReturnHeaderDatum",
}

// sapCustomerReturnItemScheduleLineDatumR is where relationships are stored.
type sapCustomerReturnItemScheduleLineDatumR struct {
	CustomerReturnSapCustomerReturnHeaderDatum *SapCustomerReturnHeaderDatum `boil:"CustomerReturnSapCustomerReturnHeaderDatum" json:"CustomerReturnSapCustomerReturnHeaderDatum" toml:"CustomerReturnSapCustomerReturnHeaderDatum" yaml:"CustomerReturnSapCustomerReturnHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCustomerReturnItemScheduleLineDatumR) NewStruct() *sapCustomerReturnItemScheduleLineDatumR {
	return &sapCustomerReturnItemScheduleLineDatumR{}
}

func (r *sapCustomerReturnItemScheduleLineDatumR) GetCustomerReturnSapCustomerReturnHeaderDatum() *SapCustomerReturnHeaderDatum {
	if r == nil {
		return nil
	}
	return r.CustomerReturnSapCustomerReturnHeaderDatum
}

// sapCustomerReturnItemScheduleLineDatumL is where Load methods for each relationship are stored.
type sapCustomerReturnItemScheduleLineDatumL struct{}

var (
	sapCustomerReturnItemScheduleLineDatumAllColumns            = []string{"CustomerReturn", "CustomerReturnItem", "ScheduleLine", "OrderQuantityUnit", "ConfdOrderQtyByMatlAvailCheck", "DeliveredQtyInOrderQtyUnit", "OpenConfdDelivQtyInOrdQtyUnit", "DelivBlockReasonForSchedLine"}
	sapCustomerReturnItemScheduleLineDatumColumnsWithoutDefault = []string{"CustomerReturn", "CustomerReturnItem", "ScheduleLine", "OrderQuantityUnit", "ConfdOrderQtyByMatlAvailCheck", "DeliveredQtyInOrderQtyUnit", "OpenConfdDelivQtyInOrdQtyUnit", "DelivBlockReasonForSchedLine"}
	sapCustomerReturnItemScheduleLineDatumColumnsWithDefault    = []string{}
	sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns     = []string{"CustomerReturn", "CustomerReturnItem", "ScheduleLine"}
	sapCustomerReturnItemScheduleLineDatumGeneratedColumns      = []string{}
)

type (
	// SapCustomerReturnItemScheduleLineDatumSlice is an alias for a slice of pointers to SapCustomerReturnItemScheduleLineDatum.
	// This should almost always be used instead of []SapCustomerReturnItemScheduleLineDatum.
	SapCustomerReturnItemScheduleLineDatumSlice []*SapCustomerReturnItemScheduleLineDatum
	// SapCustomerReturnItemScheduleLineDatumHook is the signature for custom SapCustomerReturnItemScheduleLineDatum hook methods
	SapCustomerReturnItemScheduleLineDatumHook func(context.Context, boil.ContextExecutor, *SapCustomerReturnItemScheduleLineDatum) error

	sapCustomerReturnItemScheduleLineDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCustomerReturnItemScheduleLineDatumType                 = reflect.TypeOf(&SapCustomerReturnItemScheduleLineDatum{})
	sapCustomerReturnItemScheduleLineDatumMapping              = queries.MakeStructMapping(sapCustomerReturnItemScheduleLineDatumType)
	sapCustomerReturnItemScheduleLineDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns)
	sapCustomerReturnItemScheduleLineDatumInsertCacheMut       sync.RWMutex
	sapCustomerReturnItemScheduleLineDatumInsertCache          = make(map[string]insertCache)
	sapCustomerReturnItemScheduleLineDatumUpdateCacheMut       sync.RWMutex
	sapCustomerReturnItemScheduleLineDatumUpdateCache          = make(map[string]updateCache)
	sapCustomerReturnItemScheduleLineDatumUpsertCacheMut       sync.RWMutex
	sapCustomerReturnItemScheduleLineDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCustomerReturnItemScheduleLineDatumAfterSelectHooks []SapCustomerReturnItemScheduleLineDatumHook

var sapCustomerReturnItemScheduleLineDatumBeforeInsertHooks []SapCustomerReturnItemScheduleLineDatumHook
var sapCustomerReturnItemScheduleLineDatumAfterInsertHooks []SapCustomerReturnItemScheduleLineDatumHook

var sapCustomerReturnItemScheduleLineDatumBeforeUpdateHooks []SapCustomerReturnItemScheduleLineDatumHook
var sapCustomerReturnItemScheduleLineDatumAfterUpdateHooks []SapCustomerReturnItemScheduleLineDatumHook

var sapCustomerReturnItemScheduleLineDatumBeforeDeleteHooks []SapCustomerReturnItemScheduleLineDatumHook
var sapCustomerReturnItemScheduleLineDatumAfterDeleteHooks []SapCustomerReturnItemScheduleLineDatumHook

var sapCustomerReturnItemScheduleLineDatumBeforeUpsertHooks []SapCustomerReturnItemScheduleLineDatumHook
var sapCustomerReturnItemScheduleLineDatumAfterUpsertHooks []SapCustomerReturnItemScheduleLineDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCustomerReturnItemScheduleLineDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCustomerReturnItemScheduleLineDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCustomerReturnItemScheduleLineDatumHook registers your hook function for all future operations.
func AddSapCustomerReturnItemScheduleLineDatumHook(hookPoint boil.HookPoint, sapCustomerReturnItemScheduleLineDatumHook SapCustomerReturnItemScheduleLineDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCustomerReturnItemScheduleLineDatumAfterSelectHooks = append(sapCustomerReturnItemScheduleLineDatumAfterSelectHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.BeforeInsertHook:
		sapCustomerReturnItemScheduleLineDatumBeforeInsertHooks = append(sapCustomerReturnItemScheduleLineDatumBeforeInsertHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.AfterInsertHook:
		sapCustomerReturnItemScheduleLineDatumAfterInsertHooks = append(sapCustomerReturnItemScheduleLineDatumAfterInsertHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.BeforeUpdateHook:
		sapCustomerReturnItemScheduleLineDatumBeforeUpdateHooks = append(sapCustomerReturnItemScheduleLineDatumBeforeUpdateHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.AfterUpdateHook:
		sapCustomerReturnItemScheduleLineDatumAfterUpdateHooks = append(sapCustomerReturnItemScheduleLineDatumAfterUpdateHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.BeforeDeleteHook:
		sapCustomerReturnItemScheduleLineDatumBeforeDeleteHooks = append(sapCustomerReturnItemScheduleLineDatumBeforeDeleteHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.AfterDeleteHook:
		sapCustomerReturnItemScheduleLineDatumAfterDeleteHooks = append(sapCustomerReturnItemScheduleLineDatumAfterDeleteHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.BeforeUpsertHook:
		sapCustomerReturnItemScheduleLineDatumBeforeUpsertHooks = append(sapCustomerReturnItemScheduleLineDatumBeforeUpsertHooks, sapCustomerReturnItemScheduleLineDatumHook)
	case boil.AfterUpsertHook:
		sapCustomerReturnItemScheduleLineDatumAfterUpsertHooks = append(sapCustomerReturnItemScheduleLineDatumAfterUpsertHooks, sapCustomerReturnItemScheduleLineDatumHook)
	}
}

// One returns a single sapCustomerReturnItemScheduleLineDatum record from the query.
func (q sapCustomerReturnItemScheduleLineDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCustomerReturnItemScheduleLineDatum, error) {
	o := &SapCustomerReturnItemScheduleLineDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_customer_return_item_schedule_line_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCustomerReturnItemScheduleLineDatum records from the query.
func (q sapCustomerReturnItemScheduleLineDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCustomerReturnItemScheduleLineDatumSlice, error) {
	var o []*SapCustomerReturnItemScheduleLineDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCustomerReturnItemScheduleLineDatum slice")
	}

	if len(sapCustomerReturnItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCustomerReturnItemScheduleLineDatum records in the query.
func (q sapCustomerReturnItemScheduleLineDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_customer_return_item_schedule_line_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCustomerReturnItemScheduleLineDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_customer_return_item_schedule_line_data exists")
	}

	return count > 0, nil
}

// CustomerReturnSapCustomerReturnHeaderDatum pointed to by the foreign key.
func (o *SapCustomerReturnItemScheduleLineDatum) CustomerReturnSapCustomerReturnHeaderDatum(mods ...qm.QueryMod) sapCustomerReturnHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CustomerReturn` = ?", o.CustomerReturn),
	}

	queryMods = append(queryMods, mods...)

	return SapCustomerReturnHeaderData(queryMods...)
}

// LoadCustomerReturnSapCustomerReturnHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCustomerReturnItemScheduleLineDatumL) LoadCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCustomerReturnItemScheduleLineDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCustomerReturnItemScheduleLineDatum
	var object *SapCustomerReturnItemScheduleLineDatum

	if singular {
		object = maybeSapCustomerReturnItemScheduleLineDatum.(*SapCustomerReturnItemScheduleLineDatum)
	} else {
		slice = *maybeSapCustomerReturnItemScheduleLineDatum.(*[]*SapCustomerReturnItemScheduleLineDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCustomerReturnItemScheduleLineDatumR{}
		}
		args = append(args, object.CustomerReturn)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCustomerReturnItemScheduleLineDatumR{}
			}

			for _, a := range args {
				if a == obj.CustomerReturn {
					continue Outer
				}
			}

			args = append(args, obj.CustomerReturn)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_customer_return_header_data`),
		qm.WhereIn(`sap_customer_return_header_data.CustomerReturn in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCustomerReturnHeaderDatum")
	}

	var resultSlice []*SapCustomerReturnHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCustomerReturnHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_customer_return_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_customer_return_header_data")
	}

	if len(sapCustomerReturnItemScheduleLineDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CustomerReturnSapCustomerReturnHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCustomerReturnHeaderDatumR{}
		}
		foreign.R.CustomerReturnSapCustomerReturnItemScheduleLineData = append(foreign.R.CustomerReturnSapCustomerReturnItemScheduleLineData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerReturn == foreign.CustomerReturn {
				local.R.CustomerReturnSapCustomerReturnHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCustomerReturnHeaderDatumR{}
				}
				foreign.R.CustomerReturnSapCustomerReturnItemScheduleLineData = append(foreign.R.CustomerReturnSapCustomerReturnItemScheduleLineData, local)
				break
			}
		}
	}

	return nil
}

// SetCustomerReturnSapCustomerReturnHeaderDatum of the sapCustomerReturnItemScheduleLineDatum to the related item.
// Sets o.R.CustomerReturnSapCustomerReturnHeaderDatum to related.
// Adds o to related.R.CustomerReturnSapCustomerReturnItemScheduleLineData.
func (o *SapCustomerReturnItemScheduleLineDatum) SetCustomerReturnSapCustomerReturnHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCustomerReturnHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_customer_return_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CustomerReturn"}),
		strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CustomerReturn, o.CustomerReturn, o.CustomerReturnItem, o.ScheduleLine}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerReturn = related.CustomerReturn
	if o.R == nil {
		o.R = &sapCustomerReturnItemScheduleLineDatumR{
			CustomerReturnSapCustomerReturnHeaderDatum: related,
		}
	} else {
		o.R.CustomerReturnSapCustomerReturnHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapCustomerReturnHeaderDatumR{
			CustomerReturnSapCustomerReturnItemScheduleLineData: SapCustomerReturnItemScheduleLineDatumSlice{o},
		}
	} else {
		related.R.CustomerReturnSapCustomerReturnItemScheduleLineData = append(related.R.CustomerReturnSapCustomerReturnItemScheduleLineData, o)
	}

	return nil
}

// SapCustomerReturnItemScheduleLineData retrieves all the records using an executor.
func SapCustomerReturnItemScheduleLineData(mods ...qm.QueryMod) sapCustomerReturnItemScheduleLineDatumQuery {
	mods = append(mods, qm.From("`sap_customer_return_item_schedule_line_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_customer_return_item_schedule_line_data`.*"})
	}

	return sapCustomerReturnItemScheduleLineDatumQuery{q}
}

// FindSapCustomerReturnItemScheduleLineDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCustomerReturnItemScheduleLineDatum(ctx context.Context, exec boil.ContextExecutor, customerReturn string, customerReturnItem string, scheduleLine string, selectCols ...string) (*SapCustomerReturnItemScheduleLineDatum, error) {
	sapCustomerReturnItemScheduleLineDatumObj := &SapCustomerReturnItemScheduleLineDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_customer_return_item_schedule_line_data` where `CustomerReturn`=? AND `CustomerReturnItem`=? AND `ScheduleLine`=?", sel,
	)

	q := queries.Raw(query, customerReturn, customerReturnItem, scheduleLine)

	err := q.Bind(ctx, exec, sapCustomerReturnItemScheduleLineDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_customer_return_item_schedule_line_data")
	}

	if err = sapCustomerReturnItemScheduleLineDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCustomerReturnItemScheduleLineDatumObj, err
	}

	return sapCustomerReturnItemScheduleLineDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCustomerReturnItemScheduleLineDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_item_schedule_line_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnItemScheduleLineDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCustomerReturnItemScheduleLineDatumInsertCacheMut.RLock()
	cache, cached := sapCustomerReturnItemScheduleLineDatumInsertCache[key]
	sapCustomerReturnItemScheduleLineDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCustomerReturnItemScheduleLineDatumAllColumns,
			sapCustomerReturnItemScheduleLineDatumColumnsWithDefault,
			sapCustomerReturnItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_customer_return_item_schedule_line_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_customer_return_item_schedule_line_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_customer_return_item_schedule_line_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_customer_return_item_schedule_line_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CustomerReturn,
		o.CustomerReturnItem,
		o.ScheduleLine,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnItemScheduleLineDatumInsertCacheMut.Lock()
		sapCustomerReturnItemScheduleLineDatumInsertCache[key] = cache
		sapCustomerReturnItemScheduleLineDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCustomerReturnItemScheduleLineDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCustomerReturnItemScheduleLineDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCustomerReturnItemScheduleLineDatumUpdateCacheMut.RLock()
	cache, cached := sapCustomerReturnItemScheduleLineDatumUpdateCache[key]
	sapCustomerReturnItemScheduleLineDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCustomerReturnItemScheduleLineDatumAllColumns,
			sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_customer_return_item_schedule_line_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_customer_return_item_schedule_line_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, append(wl, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_customer_return_item_schedule_line_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_customer_return_item_schedule_line_data")
	}

	if !cached {
		sapCustomerReturnItemScheduleLineDatumUpdateCacheMut.Lock()
		sapCustomerReturnItemScheduleLineDatumUpdateCache[key] = cache
		sapCustomerReturnItemScheduleLineDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCustomerReturnItemScheduleLineDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_customer_return_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_customer_return_item_schedule_line_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCustomerReturnItemScheduleLineDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_customer_return_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCustomerReturnItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCustomerReturnItemScheduleLineDatum")
	}
	return rowsAff, nil
}

var mySQLSapCustomerReturnItemScheduleLineDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCustomerReturnItemScheduleLineDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_customer_return_item_schedule_line_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCustomerReturnItemScheduleLineDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCustomerReturnItemScheduleLineDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCustomerReturnItemScheduleLineDatumUpsertCacheMut.RLock()
	cache, cached := sapCustomerReturnItemScheduleLineDatumUpsertCache[key]
	sapCustomerReturnItemScheduleLineDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCustomerReturnItemScheduleLineDatumAllColumns,
			sapCustomerReturnItemScheduleLineDatumColumnsWithDefault,
			sapCustomerReturnItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCustomerReturnItemScheduleLineDatumAllColumns,
			sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_customer_return_item_schedule_line_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_customer_return_item_schedule_line_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_customer_return_item_schedule_line_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_customer_return_item_schedule_line_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCustomerReturnItemScheduleLineDatumType, sapCustomerReturnItemScheduleLineDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_customer_return_item_schedule_line_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_customer_return_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		sapCustomerReturnItemScheduleLineDatumUpsertCacheMut.Lock()
		sapCustomerReturnItemScheduleLineDatumUpsertCache[key] = cache
		sapCustomerReturnItemScheduleLineDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCustomerReturnItemScheduleLineDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCustomerReturnItemScheduleLineDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCustomerReturnItemScheduleLineDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCustomerReturnItemScheduleLineDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_customer_return_item_schedule_line_data` WHERE `CustomerReturn`=? AND `CustomerReturnItem`=? AND `ScheduleLine`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_customer_return_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_customer_return_item_schedule_line_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCustomerReturnItemScheduleLineDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCustomerReturnItemScheduleLineDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_customer_return_item_schedule_line_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_item_schedule_line_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCustomerReturnItemScheduleLineDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCustomerReturnItemScheduleLineDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_customer_return_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCustomerReturnItemScheduleLineDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_customer_return_item_schedule_line_data")
	}

	if len(sapCustomerReturnItemScheduleLineDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCustomerReturnItemScheduleLineDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCustomerReturnItemScheduleLineDatum(ctx, exec, o.CustomerReturn, o.CustomerReturnItem, o.ScheduleLine)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCustomerReturnItemScheduleLineDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCustomerReturnItemScheduleLineDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCustomerReturnItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_customer_return_item_schedule_line_data`.* FROM `sap_customer_return_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCustomerReturnItemScheduleLineDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCustomerReturnItemScheduleLineDatumSlice")
	}

	*o = slice

	return nil
}

// SapCustomerReturnItemScheduleLineDatumExists checks if the SapCustomerReturnItemScheduleLineDatum row exists.
func SapCustomerReturnItemScheduleLineDatumExists(ctx context.Context, exec boil.ContextExecutor, customerReturn string, customerReturnItem string, scheduleLine string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_customer_return_item_schedule_line_data` where `CustomerReturn`=? AND `CustomerReturnItem`=? AND `ScheduleLine`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, customerReturn, customerReturnItem, scheduleLine)
	}
	row := exec.QueryRowContext(ctx, sql, customerReturn, customerReturnItem, scheduleLine)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_customer_return_item_schedule_line_data exists")
	}

	return exists, nil
}
