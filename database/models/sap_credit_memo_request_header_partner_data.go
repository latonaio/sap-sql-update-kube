// Code generated by SQLBoiler 4.8.4 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapCreditMemoRequestHeaderPartnerDatum is an object representing the database table.
type SapCreditMemoRequestHeaderPartnerDatum struct {
	CreditMemoRequest string      `boil:"CreditMemoRequest" json:"CreditMemoRequest" toml:"CreditMemoRequest" yaml:"CreditMemoRequest"`
	PartnerFunction   string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	Customer          null.String `boil:"Customer" json:"Customer,omitempty" toml:"Customer" yaml:"Customer,omitempty"`
	Supplier          null.String `boil:"Supplier" json:"Supplier,omitempty" toml:"Supplier" yaml:"Supplier,omitempty"`

	R *sapCreditMemoRequestHeaderPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapCreditMemoRequestHeaderPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapCreditMemoRequestHeaderPartnerDatumColumns = struct {
	CreditMemoRequest string
	PartnerFunction   string
	Customer          string
	Supplier          string
}{
	CreditMemoRequest: "CreditMemoRequest",
	PartnerFunction:   "PartnerFunction",
	Customer:          "Customer",
	Supplier:          "Supplier",
}

var SapCreditMemoRequestHeaderPartnerDatumTableColumns = struct {
	CreditMemoRequest string
	PartnerFunction   string
	Customer          string
	Supplier          string
}{
	CreditMemoRequest: "sap_credit_memo_request_header_partner_data.CreditMemoRequest",
	PartnerFunction:   "sap_credit_memo_request_header_partner_data.PartnerFunction",
	Customer:          "sap_credit_memo_request_header_partner_data.Customer",
	Supplier:          "sap_credit_memo_request_header_partner_data.Supplier",
}

// Generated where

var SapCreditMemoRequestHeaderPartnerDatumWhere = struct {
	CreditMemoRequest whereHelperstring
	PartnerFunction   whereHelperstring
	Customer          whereHelpernull_String
	Supplier          whereHelpernull_String
}{
	CreditMemoRequest: whereHelperstring{field: "`sap_credit_memo_request_header_partner_data`.`CreditMemoRequest`"},
	PartnerFunction:   whereHelperstring{field: "`sap_credit_memo_request_header_partner_data`.`PartnerFunction`"},
	Customer:          whereHelpernull_String{field: "`sap_credit_memo_request_header_partner_data`.`Customer`"},
	Supplier:          whereHelpernull_String{field: "`sap_credit_memo_request_header_partner_data`.`Supplier`"},
}

// SapCreditMemoRequestHeaderPartnerDatumRels is where relationship names are stored.
var SapCreditMemoRequestHeaderPartnerDatumRels = struct {
	CreditMemoRequestSapCreditMemoRequestHeaderDatum string
}{
	CreditMemoRequestSapCreditMemoRequestHeaderDatum: "CreditMemoRequestSapCreditMemoRequestHeaderDatum",
}

// sapCreditMemoRequestHeaderPartnerDatumR is where relationships are stored.
type sapCreditMemoRequestHeaderPartnerDatumR struct {
	CreditMemoRequestSapCreditMemoRequestHeaderDatum *SapCreditMemoRequestHeaderDatum `boil:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" json:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" toml:"CreditMemoRequestSapCreditMemoRequestHeaderDatum" yaml:"CreditMemoRequestSapCreditMemoRequestHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*sapCreditMemoRequestHeaderPartnerDatumR) NewStruct() *sapCreditMemoRequestHeaderPartnerDatumR {
	return &sapCreditMemoRequestHeaderPartnerDatumR{}
}

// sapCreditMemoRequestHeaderPartnerDatumL is where Load methods for each relationship are stored.
type sapCreditMemoRequestHeaderPartnerDatumL struct{}

var (
	sapCreditMemoRequestHeaderPartnerDatumAllColumns            = []string{"CreditMemoRequest", "PartnerFunction", "Customer", "Supplier"}
	sapCreditMemoRequestHeaderPartnerDatumColumnsWithoutDefault = []string{"CreditMemoRequest", "PartnerFunction", "Customer", "Supplier"}
	sapCreditMemoRequestHeaderPartnerDatumColumnsWithDefault    = []string{}
	sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns     = []string{"CreditMemoRequest", "PartnerFunction"}
	sapCreditMemoRequestHeaderPartnerDatumGeneratedColumns      = []string{}
)

type (
	// SapCreditMemoRequestHeaderPartnerDatumSlice is an alias for a slice of pointers to SapCreditMemoRequestHeaderPartnerDatum.
	// This should almost always be used instead of []SapCreditMemoRequestHeaderPartnerDatum.
	SapCreditMemoRequestHeaderPartnerDatumSlice []*SapCreditMemoRequestHeaderPartnerDatum
	// SapCreditMemoRequestHeaderPartnerDatumHook is the signature for custom SapCreditMemoRequestHeaderPartnerDatum hook methods
	SapCreditMemoRequestHeaderPartnerDatumHook func(context.Context, boil.ContextExecutor, *SapCreditMemoRequestHeaderPartnerDatum) error

	sapCreditMemoRequestHeaderPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapCreditMemoRequestHeaderPartnerDatumType                 = reflect.TypeOf(&SapCreditMemoRequestHeaderPartnerDatum{})
	sapCreditMemoRequestHeaderPartnerDatumMapping              = queries.MakeStructMapping(sapCreditMemoRequestHeaderPartnerDatumType)
	sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns)
	sapCreditMemoRequestHeaderPartnerDatumInsertCacheMut       sync.RWMutex
	sapCreditMemoRequestHeaderPartnerDatumInsertCache          = make(map[string]insertCache)
	sapCreditMemoRequestHeaderPartnerDatumUpdateCacheMut       sync.RWMutex
	sapCreditMemoRequestHeaderPartnerDatumUpdateCache          = make(map[string]updateCache)
	sapCreditMemoRequestHeaderPartnerDatumUpsertCacheMut       sync.RWMutex
	sapCreditMemoRequestHeaderPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks []SapCreditMemoRequestHeaderPartnerDatumHook

var sapCreditMemoRequestHeaderPartnerDatumBeforeInsertHooks []SapCreditMemoRequestHeaderPartnerDatumHook
var sapCreditMemoRequestHeaderPartnerDatumAfterInsertHooks []SapCreditMemoRequestHeaderPartnerDatumHook

var sapCreditMemoRequestHeaderPartnerDatumBeforeUpdateHooks []SapCreditMemoRequestHeaderPartnerDatumHook
var sapCreditMemoRequestHeaderPartnerDatumAfterUpdateHooks []SapCreditMemoRequestHeaderPartnerDatumHook

var sapCreditMemoRequestHeaderPartnerDatumBeforeDeleteHooks []SapCreditMemoRequestHeaderPartnerDatumHook
var sapCreditMemoRequestHeaderPartnerDatumAfterDeleteHooks []SapCreditMemoRequestHeaderPartnerDatumHook

var sapCreditMemoRequestHeaderPartnerDatumBeforeUpsertHooks []SapCreditMemoRequestHeaderPartnerDatumHook
var sapCreditMemoRequestHeaderPartnerDatumAfterUpsertHooks []SapCreditMemoRequestHeaderPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapCreditMemoRequestHeaderPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapCreditMemoRequestHeaderPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapCreditMemoRequestHeaderPartnerDatumHook registers your hook function for all future operations.
func AddSapCreditMemoRequestHeaderPartnerDatumHook(hookPoint boil.HookPoint, sapCreditMemoRequestHeaderPartnerDatumHook SapCreditMemoRequestHeaderPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks = append(sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.BeforeInsertHook:
		sapCreditMemoRequestHeaderPartnerDatumBeforeInsertHooks = append(sapCreditMemoRequestHeaderPartnerDatumBeforeInsertHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.AfterInsertHook:
		sapCreditMemoRequestHeaderPartnerDatumAfterInsertHooks = append(sapCreditMemoRequestHeaderPartnerDatumAfterInsertHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.BeforeUpdateHook:
		sapCreditMemoRequestHeaderPartnerDatumBeforeUpdateHooks = append(sapCreditMemoRequestHeaderPartnerDatumBeforeUpdateHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.AfterUpdateHook:
		sapCreditMemoRequestHeaderPartnerDatumAfterUpdateHooks = append(sapCreditMemoRequestHeaderPartnerDatumAfterUpdateHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.BeforeDeleteHook:
		sapCreditMemoRequestHeaderPartnerDatumBeforeDeleteHooks = append(sapCreditMemoRequestHeaderPartnerDatumBeforeDeleteHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.AfterDeleteHook:
		sapCreditMemoRequestHeaderPartnerDatumAfterDeleteHooks = append(sapCreditMemoRequestHeaderPartnerDatumAfterDeleteHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.BeforeUpsertHook:
		sapCreditMemoRequestHeaderPartnerDatumBeforeUpsertHooks = append(sapCreditMemoRequestHeaderPartnerDatumBeforeUpsertHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	case boil.AfterUpsertHook:
		sapCreditMemoRequestHeaderPartnerDatumAfterUpsertHooks = append(sapCreditMemoRequestHeaderPartnerDatumAfterUpsertHooks, sapCreditMemoRequestHeaderPartnerDatumHook)
	}
}

// One returns a single sapCreditMemoRequestHeaderPartnerDatum record from the query.
func (q sapCreditMemoRequestHeaderPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapCreditMemoRequestHeaderPartnerDatum, error) {
	o := &SapCreditMemoRequestHeaderPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_credit_memo_request_header_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapCreditMemoRequestHeaderPartnerDatum records from the query.
func (q sapCreditMemoRequestHeaderPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapCreditMemoRequestHeaderPartnerDatumSlice, error) {
	var o []*SapCreditMemoRequestHeaderPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapCreditMemoRequestHeaderPartnerDatum slice")
	}

	if len(sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapCreditMemoRequestHeaderPartnerDatum records in the query.
func (q sapCreditMemoRequestHeaderPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_credit_memo_request_header_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapCreditMemoRequestHeaderPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_credit_memo_request_header_partner_data exists")
	}

	return count > 0, nil
}

// CreditMemoRequestSapCreditMemoRequestHeaderDatum pointed to by the foreign key.
func (o *SapCreditMemoRequestHeaderPartnerDatum) CreditMemoRequestSapCreditMemoRequestHeaderDatum(mods ...qm.QueryMod) sapCreditMemoRequestHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`CreditMemoRequest` = ?", o.CreditMemoRequest),
	}

	queryMods = append(queryMods, mods...)

	query := SapCreditMemoRequestHeaderData(queryMods...)
	queries.SetFrom(query.Query, "`sap_credit_memo_request_header_data`")

	return query
}

// LoadCreditMemoRequestSapCreditMemoRequestHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sapCreditMemoRequestHeaderPartnerDatumL) LoadCreditMemoRequestSapCreditMemoRequestHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapCreditMemoRequestHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*SapCreditMemoRequestHeaderPartnerDatum
	var object *SapCreditMemoRequestHeaderPartnerDatum

	if singular {
		object = maybeSapCreditMemoRequestHeaderPartnerDatum.(*SapCreditMemoRequestHeaderPartnerDatum)
	} else {
		slice = *maybeSapCreditMemoRequestHeaderPartnerDatum.(*[]*SapCreditMemoRequestHeaderPartnerDatum)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapCreditMemoRequestHeaderPartnerDatumR{}
		}
		args = append(args, object.CreditMemoRequest)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapCreditMemoRequestHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.CreditMemoRequest {
					continue Outer
				}
			}

			args = append(args, obj.CreditMemoRequest)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_credit_memo_request_header_data`),
		qm.WhereIn(`sap_credit_memo_request_header_data.CreditMemoRequest in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SapCreditMemoRequestHeaderDatum")
	}

	var resultSlice []*SapCreditMemoRequestHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SapCreditMemoRequestHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sap_credit_memo_request_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_credit_memo_request_header_data")
	}

	if len(sapCreditMemoRequestHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = foreign
		if foreign.R == nil {
			foreign.R = &sapCreditMemoRequestHeaderDatumR{}
		}
		foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData = append(foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreditMemoRequest == foreign.CreditMemoRequest {
				local.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = foreign
				if foreign.R == nil {
					foreign.R = &sapCreditMemoRequestHeaderDatumR{}
				}
				foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData = append(foreign.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetCreditMemoRequestSapCreditMemoRequestHeaderDatum of the sapCreditMemoRequestHeaderPartnerDatum to the related item.
// Sets o.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum to related.
// Adds o to related.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData.
func (o *SapCreditMemoRequestHeaderPartnerDatum) SetCreditMemoRequestSapCreditMemoRequestHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SapCreditMemoRequestHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sap_credit_memo_request_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CreditMemoRequest"}),
		strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.CreditMemoRequest, o.CreditMemoRequest, o.PartnerFunction}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreditMemoRequest = related.CreditMemoRequest
	if o.R == nil {
		o.R = &sapCreditMemoRequestHeaderPartnerDatumR{
			CreditMemoRequestSapCreditMemoRequestHeaderDatum: related,
		}
	} else {
		o.R.CreditMemoRequestSapCreditMemoRequestHeaderDatum = related
	}

	if related.R == nil {
		related.R = &sapCreditMemoRequestHeaderDatumR{
			CreditMemoRequestSapCreditMemoRequestHeaderPartnerData: SapCreditMemoRequestHeaderPartnerDatumSlice{o},
		}
	} else {
		related.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData = append(related.R.CreditMemoRequestSapCreditMemoRequestHeaderPartnerData, o)
	}

	return nil
}

// SapCreditMemoRequestHeaderPartnerData retrieves all the records using an executor.
func SapCreditMemoRequestHeaderPartnerData(mods ...qm.QueryMod) sapCreditMemoRequestHeaderPartnerDatumQuery {
	mods = append(mods, qm.From("`sap_credit_memo_request_header_partner_data`"))
	return sapCreditMemoRequestHeaderPartnerDatumQuery{NewQuery(mods...)}
}

// FindSapCreditMemoRequestHeaderPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapCreditMemoRequestHeaderPartnerDatum(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, partnerFunction string, selectCols ...string) (*SapCreditMemoRequestHeaderPartnerDatum, error) {
	sapCreditMemoRequestHeaderPartnerDatumObj := &SapCreditMemoRequestHeaderPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_credit_memo_request_header_partner_data` where `CreditMemoRequest`=? AND `PartnerFunction`=?", sel,
	)

	q := queries.Raw(query, creditMemoRequest, partnerFunction)

	err := q.Bind(ctx, exec, sapCreditMemoRequestHeaderPartnerDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_credit_memo_request_header_partner_data")
	}

	if err = sapCreditMemoRequestHeaderPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapCreditMemoRequestHeaderPartnerDatumObj, err
	}

	return sapCreditMemoRequestHeaderPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapCreditMemoRequestHeaderPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_header_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestHeaderPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapCreditMemoRequestHeaderPartnerDatumInsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestHeaderPartnerDatumInsertCache[key]
	sapCreditMemoRequestHeaderPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapCreditMemoRequestHeaderPartnerDatumAllColumns,
			sapCreditMemoRequestHeaderPartnerDatumColumnsWithDefault,
			sapCreditMemoRequestHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_credit_memo_request_header_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_credit_memo_request_header_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_credit_memo_request_header_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_credit_memo_request_header_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CreditMemoRequest,
		o.PartnerFunction,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestHeaderPartnerDatumInsertCacheMut.Lock()
		sapCreditMemoRequestHeaderPartnerDatumInsertCache[key] = cache
		sapCreditMemoRequestHeaderPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapCreditMemoRequestHeaderPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapCreditMemoRequestHeaderPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapCreditMemoRequestHeaderPartnerDatumUpdateCacheMut.RLock()
	cache, cached := sapCreditMemoRequestHeaderPartnerDatumUpdateCache[key]
	sapCreditMemoRequestHeaderPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapCreditMemoRequestHeaderPartnerDatumAllColumns,
			sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_credit_memo_request_header_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_credit_memo_request_header_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, append(wl, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_credit_memo_request_header_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_credit_memo_request_header_partner_data")
	}

	if !cached {
		sapCreditMemoRequestHeaderPartnerDatumUpdateCacheMut.Lock()
		sapCreditMemoRequestHeaderPartnerDatumUpdateCache[key] = cache
		sapCreditMemoRequestHeaderPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapCreditMemoRequestHeaderPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_credit_memo_request_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_credit_memo_request_header_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapCreditMemoRequestHeaderPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_credit_memo_request_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapCreditMemoRequestHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapCreditMemoRequestHeaderPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLSapCreditMemoRequestHeaderPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapCreditMemoRequestHeaderPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_credit_memo_request_header_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapCreditMemoRequestHeaderPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapCreditMemoRequestHeaderPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapCreditMemoRequestHeaderPartnerDatumUpsertCacheMut.RLock()
	cache, cached := sapCreditMemoRequestHeaderPartnerDatumUpsertCache[key]
	sapCreditMemoRequestHeaderPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapCreditMemoRequestHeaderPartnerDatumAllColumns,
			sapCreditMemoRequestHeaderPartnerDatumColumnsWithDefault,
			sapCreditMemoRequestHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapCreditMemoRequestHeaderPartnerDatumAllColumns,
			sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_credit_memo_request_header_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_credit_memo_request_header_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_credit_memo_request_header_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_credit_memo_request_header_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapCreditMemoRequestHeaderPartnerDatumType, sapCreditMemoRequestHeaderPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_credit_memo_request_header_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_credit_memo_request_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		sapCreditMemoRequestHeaderPartnerDatumUpsertCacheMut.Lock()
		sapCreditMemoRequestHeaderPartnerDatumUpsertCache[key] = cache
		sapCreditMemoRequestHeaderPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapCreditMemoRequestHeaderPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapCreditMemoRequestHeaderPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapCreditMemoRequestHeaderPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_credit_memo_request_header_partner_data` WHERE `CreditMemoRequest`=? AND `PartnerFunction`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_credit_memo_request_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_credit_memo_request_header_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapCreditMemoRequestHeaderPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapCreditMemoRequestHeaderPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_credit_memo_request_header_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_header_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapCreditMemoRequestHeaderPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapCreditMemoRequestHeaderPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_credit_memo_request_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapCreditMemoRequestHeaderPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_credit_memo_request_header_partner_data")
	}

	if len(sapCreditMemoRequestHeaderPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapCreditMemoRequestHeaderPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapCreditMemoRequestHeaderPartnerDatum(ctx, exec, o.CreditMemoRequest, o.PartnerFunction)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapCreditMemoRequestHeaderPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapCreditMemoRequestHeaderPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_credit_memo_request_header_partner_data`.* FROM `sap_credit_memo_request_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapCreditMemoRequestHeaderPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapCreditMemoRequestHeaderPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// SapCreditMemoRequestHeaderPartnerDatumExists checks if the SapCreditMemoRequestHeaderPartnerDatum row exists.
func SapCreditMemoRequestHeaderPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, creditMemoRequest string, partnerFunction string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_credit_memo_request_header_partner_data` where `CreditMemoRequest`=? AND `PartnerFunction`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, creditMemoRequest, partnerFunction)
	}
	row := exec.QueryRowContext(ctx, sql, creditMemoRequest, partnerFunction)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_credit_memo_request_header_partner_data exists")
	}

	return exists, nil
}
